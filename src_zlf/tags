!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A9SCU	./dev/arm/RealView.py	/^class A9SCU(BasicPioDevice):$/;"	c
A9SCU	./dev/arm/a9scu.cc	/^A9SCU::A9SCU(Params *p)$/;"	f	class:A9SCU
A9SCU	./dev/arm/a9scu.hh	/^class A9SCU : public BasicPioDevice$/;"	c
AArch32GdbRegCache	./arch/arm/remote_gdb.hh	/^    class AArch32GdbRegCache : public BaseGdbRegCache$/;"	c	class:ArmISA::RemoteGDB
AArch64Bit	./arch/arm/types.hh	/^            AArch64Bit = (1 << 2)$/;"	e	enum:ArmISA::PCState::FlagBits
AArch64GdbRegCache	./arch/arm/remote_gdb.hh	/^    class AArch64GdbRegCache : public BaseGdbRegCache$/;"	c	class:ArmISA::RemoteGDB
ACBit	./arch/x86/regs/misc.hh	/^        ACBit = 1 << 18,$/;"	e	enum:X86ISA::RFLAGBit
ACPI	./arch/x86/bios/acpi.hh	/^namespace ACPI$/;"	n	namespace:X86ISA
ACTIVATE_PER_TFAW	./mem/ruby/structures/RubyMemoryControl.hh	47;"	d
ACTIVE_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum VC_state_type {IDLE_, VC_AB_, ACTIVE_, NUM_VC_STATE_TYPE_};$/;"	e	enum:VC_state_type
ACT_CMD_COMPLETE	./dev/storage/ide_disk.hh	/^    ACT_CMD_COMPLETE,$/;"	e	enum:DevAction
ACT_CMD_ERROR	./dev/storage/ide_disk.hh	/^    ACT_CMD_ERROR,$/;"	e	enum:DevAction
ACT_CMD_WRITE	./dev/storage/ide_disk.hh	/^    ACT_CMD_WRITE,$/;"	e	enum:DevAction
ACT_DATA_READY	./dev/storage/ide_disk.hh	/^    ACT_DATA_READY,$/;"	e	enum:DevAction
ACT_DATA_READ_BYTE	./dev/storage/ide_disk.hh	/^    ACT_DATA_READ_BYTE,$/;"	e	enum:DevAction
ACT_DATA_READ_SHORT	./dev/storage/ide_disk.hh	/^    ACT_DATA_READ_SHORT,$/;"	e	enum:DevAction
ACT_DATA_WRITE_BYTE	./dev/storage/ide_disk.hh	/^    ACT_DATA_WRITE_BYTE,$/;"	e	enum:DevAction
ACT_DATA_WRITE_SHORT	./dev/storage/ide_disk.hh	/^    ACT_DATA_WRITE_SHORT,$/;"	e	enum:DevAction
ACT_DMA_DONE	./dev/storage/ide_disk.hh	/^    ACT_DMA_DONE,$/;"	e	enum:DevAction
ACT_DMA_READY	./dev/storage/ide_disk.hh	/^    ACT_DMA_READY,$/;"	e	enum:DevAction
ACT_NONE	./dev/storage/ide_disk.hh	/^    ACT_NONE = 0,$/;"	e	enum:DevAction
ACT_SELECT_WRITE	./dev/storage/ide_disk.hh	/^    ACT_SELECT_WRITE,$/;"	e	enum:DevAction
ACT_SRST_CLEAR	./dev/storage/ide_disk.hh	/^    ACT_SRST_CLEAR$/;"	e	enum:DevAction
ACT_SRST_SET	./dev/storage/ide_disk.hh	/^    ACT_SRST_SET,$/;"	e	enum:DevAction
ACT_STAT_READ	./dev/storage/ide_disk.hh	/^    ACT_STAT_READ,$/;"	e	enum:DevAction
ADDRESS_WIDTH	./mem/ruby/common/Address.hh	/^const uint32_t ADDRESS_WIDTH = 64; \/\/ address width in bytes$/;"	v
ADD_FIELD16	./dev/pci/copy_engine_defs.hh	83;"	d
ADD_FIELD32	./dev/net/i8254xGBe_defs.hh	289;"	d
ADD_FIELD32	./dev/pci/copy_engine_defs.hh	87;"	d
ADD_FIELD64	./dev/net/i8254xGBe_defs.hh	293;"	d
ADD_FIELD64	./dev/pci/copy_engine_defs.hh	91;"	d
ADD_FIELD8	./dev/pci/copy_engine_defs.hh	79;"	d
AFBit	./arch/x86/regs/misc.hh	/^        AFBit = 1 << 4,$/;"	e	enum:X86ISA::CondFlagBit
ALIGN_BITS	./dev/virtio/base.hh	/^    static const unsigned ALIGN_BITS = 12;$/;"	m	class:VirtQueue
ALIGN_SIZE	./dev/virtio/base.hh	/^    static const unsigned ALIGN_SIZE = 1 << ALIGN_BITS;$/;"	m	class:VirtQueue
ALPHA_ACCESS_VERSION	./dev/alpha/access.h	38;"	d
ALPHA_K0SEG_BASE	./dev/alpha/tsunamireg.h	38;"	d
ALPHA_K0SEG_BASE	./dev/mips/maltareg.h	40;"	d
ALTMODE	./arch/alpha/types.hh	/^    static const ArchFlagsType ALTMODE = 0x02;$/;"	m	struct:AlphaISA::AlphaRequestFlags
ALTSTAT_OFFSET	./dev/storage/ide_disk.hh	111;"	d
ALT_MODE_AM	./arch/alpha/ev5.hh	/^inline uint64_t ALT_MODE_AM(uint64_t reg) { return reg >> 3 & 0x3; }$/;"	f	namespace:AlphaISA
AMBA_CEL_ID0	./dev/arm/amba_device.hh	/^    static const int AMBA_CEL_ID0 = 0xFF0;$/;"	m	class:AmbaDevice
AMBA_CEL_ID1	./dev/arm/amba_device.hh	/^    static const int AMBA_CEL_ID1 = 0xFF4;$/;"	m	class:AmbaDevice
AMBA_CEL_ID2	./dev/arm/amba_device.hh	/^    static const int AMBA_CEL_ID2 = 0xFF8;$/;"	m	class:AmbaDevice
AMBA_CEL_ID3	./dev/arm/amba_device.hh	/^    static const int AMBA_CEL_ID3 = 0xFFC;$/;"	m	class:AmbaDevice
AMBA_ID	./dev/arm/pl011.hh	/^    static const uint64_t AMBA_ID = ULL(0xb105f00d00341011);$/;"	m	class:Pl011
AMBA_ID	./dev/arm/pl111.hh	/^    static const uint64_t AMBA_ID       = ULL(0xb105f00d00141111);$/;"	m	class:Pl111
AMBA_PER_ID0	./dev/arm/amba_device.hh	/^    static const int AMBA_PER_ID0 = 0xFE0;$/;"	m	class:AmbaDevice
AMBA_PER_ID1	./dev/arm/amba_device.hh	/^    static const int AMBA_PER_ID1 = 0xFE4;$/;"	m	class:AmbaDevice
AMBA_PER_ID2	./dev/arm/amba_device.hh	/^    static const int AMBA_PER_ID2 = 0xFE8;$/;"	m	class:AmbaDevice
AMBA_PER_ID3	./dev/arm/amba_device.hh	/^    static const int AMBA_PER_ID3 = 0xFEC;$/;"	m	class:AmbaDevice
AMD64GdbRegCache	./arch/x86/remote_gdb.hh	/^    class AMD64GdbRegCache : public BaseGdbRegCache$/;"	c	class:X86ISA::RemoteGDB
AND	./mem/ruby/common/NetDest.cc	/^NetDest::AND(const NetDest& andNetDest) const$/;"	f	class:NetDest
AND	./mem/ruby/common/Set.hh	/^    AND(const Set& obj) const$/;"	f	class:Set
ANNOTE_NONE	./arch/alpha/types.hh	/^    ANNOTE_NONE = 0,$/;"	e	enum:AlphaISA::annotes
ANNOTE_NONE	./arch/mips/isa_traits.hh	/^const int ANNOTE_NONE = 0;$/;"	m	namespace:MipsISA
AO	./arch/x86/decoder_tables.cc	/^    const uint8_t AO = AddressSizeOverride;$/;"	m	namespace:X86ISA	file:
AOUT_LDPGSZ	./arch/alpha/aout_machdep.h	55;"	d
APICVersion	./dev/x86/i82094aa.hh	/^    static const uint8_t APICVersion = 0x14;$/;"	m	class:X86ISA::I82094AA
APIC_ARBITRATION_PRIORITY	./arch/x86/regs/apic.hh	/^        APIC_ARBITRATION_PRIORITY,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_CURRENT_COUNT	./arch/x86/regs/apic.hh	/^        APIC_CURRENT_COUNT,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_DESTINATION_FORMAT	./arch/x86/regs/apic.hh	/^        APIC_DESTINATION_FORMAT,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_DIVIDE_CONFIGURATION	./arch/x86/regs/apic.hh	/^        APIC_DIVIDE_CONFIGURATION,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_EOI	./arch/x86/regs/apic.hh	/^        APIC_EOI,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_ERROR_STATUS	./arch/x86/regs/apic.hh	/^        APIC_ERROR_STATUS = APIC_INTERRUPT_REQUEST_BASE + 16,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_ID	./arch/x86/regs/apic.hh	/^        APIC_ID,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_INITIAL_COUNT	./arch/x86/regs/apic.hh	/^        APIC_INITIAL_COUNT,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_INTERNAL_STATE	./arch/x86/regs/apic.hh	/^        APIC_INTERNAL_STATE,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_INTERRUPT_COMMAND_HIGH	./arch/x86/regs/apic.hh	/^        APIC_INTERRUPT_COMMAND_HIGH,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_INTERRUPT_COMMAND_LOW	./arch/x86/regs/apic.hh	/^        APIC_INTERRUPT_COMMAND_LOW,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_INTERRUPT_REQUEST	./arch/x86/regs/apic.hh	/^    APIC_INTERRUPT_REQUEST(int index)$/;"	f	namespace:X86ISA
APIC_INTERRUPT_REQUEST_BASE	./arch/x86/regs/apic.hh	/^        APIC_INTERRUPT_REQUEST_BASE = APIC_TRIGGER_MODE_BASE + 16,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_IN_SERVICE	./arch/x86/regs/apic.hh	/^    APIC_IN_SERVICE(int index)$/;"	f	namespace:X86ISA
APIC_IN_SERVICE_BASE	./arch/x86/regs/apic.hh	/^        APIC_IN_SERVICE_BASE,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_LOGICAL_DESTINATION	./arch/x86/regs/apic.hh	/^        APIC_LOGICAL_DESTINATION,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_LVT_ERROR	./arch/x86/regs/apic.hh	/^        APIC_LVT_ERROR,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_LVT_LINT0	./arch/x86/regs/apic.hh	/^        APIC_LVT_LINT0,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_LVT_LINT1	./arch/x86/regs/apic.hh	/^        APIC_LVT_LINT1,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_LVT_PERFORMANCE_MONITORING_COUNTERS	./arch/x86/regs/apic.hh	/^        APIC_LVT_PERFORMANCE_MONITORING_COUNTERS,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_LVT_THERMAL_SENSOR	./arch/x86/regs/apic.hh	/^        APIC_LVT_THERMAL_SENSOR,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_LVT_TIMER	./arch/x86/regs/apic.hh	/^        APIC_LVT_TIMER,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_PROCESSOR_PRIORITY	./arch/x86/regs/apic.hh	/^        APIC_PROCESSOR_PRIORITY,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_SPURIOUS_INTERRUPT_VECTOR	./arch/x86/regs/apic.hh	/^        APIC_SPURIOUS_INTERRUPT_VECTOR,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_TASK_PRIORITY	./arch/x86/regs/apic.hh	/^        APIC_TASK_PRIORITY,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_TRIGGER_MODE	./arch/x86/regs/apic.hh	/^    APIC_TRIGGER_MODE(int index)$/;"	f	namespace:X86ISA
APIC_TRIGGER_MODE_BASE	./arch/x86/regs/apic.hh	/^        APIC_TRIGGER_MODE_BASE = APIC_IN_SERVICE_BASE + 16,$/;"	e	enum:X86ISA::ApicRegIndex
APIC_VERSION	./arch/x86/regs/apic.hh	/^        APIC_VERSION,$/;"	e	enum:X86ISA::ApicRegIndex
APMInfo	./arch/x86/cpuid.cc	/^        APMInfo,$/;"	e	enum:X86ISA::ExtendedCpuidFunctions	file:
APPLY_DREG	./cpu/kvm/x86_cpu.cc	231;"	d	file:
APPLY_DREG	./cpu/kvm/x86_cpu.cc	236;"	d	file:
APPLY_DTABLE	./cpu/kvm/x86_cpu.cc	1030;"	d	file:
APPLY_DTABLE	./cpu/kvm/x86_cpu.cc	1036;"	d	file:
APPLY_DTABLE	./cpu/kvm/x86_cpu.cc	208;"	d	file:
APPLY_DTABLE	./cpu/kvm/x86_cpu.cc	222;"	d	file:
APPLY_DTABLE	./cpu/kvm/x86_cpu.cc	756;"	d	file:
APPLY_DTABLE	./cpu/kvm/x86_cpu.cc	764;"	d	file:
APPLY_IREG	./cpu/kvm/x86_cpu.cc	173;"	d	file:
APPLY_IREG	./cpu/kvm/x86_cpu.cc	178;"	d	file:
APPLY_IREG	./cpu/kvm/x86_cpu.cc	687;"	d	file:
APPLY_IREG	./cpu/kvm/x86_cpu.cc	689;"	d	file:
APPLY_IREG	./cpu/kvm/x86_cpu.cc	972;"	d	file:
APPLY_IREG	./cpu/kvm/x86_cpu.cc	976;"	d	file:
APPLY_SEGMENT	./cpu/kvm/x86_cpu.cc	1029;"	d	file:
APPLY_SEGMENT	./cpu/kvm/x86_cpu.cc	1035;"	d	file:
APPLY_SEGMENT	./cpu/kvm/x86_cpu.cc	206;"	d	file:
APPLY_SEGMENT	./cpu/kvm/x86_cpu.cc	221;"	d	file:
APPLY_SEGMENT	./cpu/kvm/x86_cpu.cc	755;"	d	file:
APPLY_SEGMENT	./cpu/kvm/x86_cpu.cc	763;"	d	file:
APPLY_SEGMENT	./cpu/kvm/x86_cpu.cc	807;"	d	file:
APPLY_SEGMENT	./cpu/kvm/x86_cpu.cc	811;"	d	file:
APPLY_SREG	./cpu/kvm/x86_cpu.cc	1028;"	d	file:
APPLY_SREG	./cpu/kvm/x86_cpu.cc	1034;"	d	file:
APPLY_SREG	./cpu/kvm/x86_cpu.cc	204;"	d	file:
APPLY_SREG	./cpu/kvm/x86_cpu.cc	220;"	d	file:
APPLY_SREG	./cpu/kvm/x86_cpu.cc	754;"	d	file:
APPLY_SREG	./cpu/kvm/x86_cpu.cc	762;"	d	file:
AR	./arch/arm/faults.hh	/^        AR     \/\/ DataAbort: Acquire\/Release semantics$/;"	e	enum:ArmISA::ArmFault::AnnotationIDs
ARCH_EVENT_SW_INCR	./arch/arm/pmu.hh	/^    static const EventTypeId ARCH_EVENT_SW_INCR = 0x00;$/;"	m	class:ArmISA::PMU
ASI	./arch/sparc/asi.hh	/^enum ASI {$/;"	g	namespace:SparcISA
ASI_AIUP	./arch/sparc/asi.hh	/^    ASI_AIUP = 0x10,$/;"	e	enum:SparcISA::ASI
ASI_AIUP_L	./arch/sparc/asi.hh	/^    ASI_AIUP_L = 0x18,$/;"	e	enum:SparcISA::ASI
ASI_AIUS	./arch/sparc/asi.hh	/^    ASI_AIUS = 0x11,$/;"	e	enum:SparcISA::ASI
ASI_AIUS_L	./arch/sparc/asi.hh	/^    ASI_AIUS_L = 0x19,$/;"	e	enum:SparcISA::ASI
ASI_AS_IF_USER_PRIMARY	./arch/sparc/asi.hh	/^    ASI_AS_IF_USER_PRIMARY = ASI_AIUP,$/;"	e	enum:SparcISA::ASI
ASI_AS_IF_USER_PRIMARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_AS_IF_USER_PRIMARY_LITTLE = ASI_AIUP_L,$/;"	e	enum:SparcISA::ASI
ASI_AS_IF_USER_SECONDARY	./arch/sparc/asi.hh	/^    ASI_AS_IF_USER_SECONDARY = ASI_AIUS,$/;"	e	enum:SparcISA::ASI
ASI_AS_IF_USER_SECONDARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_AS_IF_USER_SECONDARY_LITTLE = ASI_AIUS_L,$/;"	e	enum:SparcISA::ASI
ASI_BLK_AIUP	./arch/sparc/asi.hh	/^    ASI_BLK_AIUP = 0x16,$/;"	e	enum:SparcISA::ASI
ASI_BLK_AIUP_L	./arch/sparc/asi.hh	/^    ASI_BLK_AIUP_L = 0x1E,$/;"	e	enum:SparcISA::ASI
ASI_BLK_AIUS	./arch/sparc/asi.hh	/^    ASI_BLK_AIUS = 0x17,$/;"	e	enum:SparcISA::ASI
ASI_BLK_AIUS_L	./arch/sparc/asi.hh	/^    ASI_BLK_AIUS_L = 0x1F,$/;"	e	enum:SparcISA::ASI
ASI_BLK_P	./arch/sparc/asi.hh	/^    ASI_BLK_P = 0xF0,$/;"	e	enum:SparcISA::ASI
ASI_BLK_PL	./arch/sparc/asi.hh	/^    ASI_BLK_PL = 0xF8,$/;"	e	enum:SparcISA::ASI
ASI_BLK_S	./arch/sparc/asi.hh	/^    ASI_BLK_S = 0xF1,$/;"	e	enum:SparcISA::ASI
ASI_BLK_SL	./arch/sparc/asi.hh	/^    ASI_BLK_SL = 0xF9,$/;"	e	enum:SparcISA::ASI
ASI_BLOCK_AS_IF_USER_PRIMARY	./arch/sparc/asi.hh	/^    ASI_BLOCK_AS_IF_USER_PRIMARY = ASI_BLK_AIUP,$/;"	e	enum:SparcISA::ASI
ASI_BLOCK_AS_IF_USER_PRIMARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_BLOCK_AS_IF_USER_PRIMARY_LITTLE = ASI_BLK_AIUP_L,$/;"	e	enum:SparcISA::ASI
ASI_BLOCK_AS_IF_USER_SECONDARY	./arch/sparc/asi.hh	/^    ASI_BLOCK_AS_IF_USER_SECONDARY = ASI_BLK_AIUS,$/;"	e	enum:SparcISA::ASI
ASI_BLOCK_AS_IF_USER_SECONDARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_BLOCK_AS_IF_USER_SECONDARY_LITTLE = ASI_BLK_AIUS_L,$/;"	e	enum:SparcISA::ASI
ASI_BLOCK_PRIMARY	./arch/sparc/asi.hh	/^    ASI_BLOCK_PRIMARY = ASI_BLK_P,$/;"	e	enum:SparcISA::ASI
ASI_BLOCK_PRIMARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_BLOCK_PRIMARY_LITTLE = ASI_BLK_PL,$/;"	e	enum:SparcISA::ASI
ASI_BLOCK_SECONDARY	./arch/sparc/asi.hh	/^    ASI_BLOCK_SECONDARY = ASI_BLK_S,$/;"	e	enum:SparcISA::ASI
ASI_BLOCK_SECONDARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_BLOCK_SECONDARY_LITTLE = ASI_BLK_SL,$/;"	e	enum:SparcISA::ASI
ASI_CMT_PER_STRAND	./arch/sparc/asi.hh	/^    ASI_CMT_PER_STRAND = 0x63,$/;"	e	enum:SparcISA::ASI
ASI_CMT_SHARED	./arch/sparc/asi.hh	/^    ASI_CMT_SHARED = 0x41,$/;"	e	enum:SparcISA::ASI
ASI_DCACHE_DATA	./arch/sparc/asi.hh	/^    ASI_DCACHE_DATA = 0x46,$/;"	e	enum:SparcISA::ASI
ASI_DCACHE_TAG	./arch/sparc/asi.hh	/^    ASI_DCACHE_TAG = 0x47,$/;"	e	enum:SparcISA::ASI
ASI_DMMU	./arch/sparc/asi.hh	/^    ASI_DMMU = 0x58,$/;"	e	enum:SparcISA::ASI
ASI_DMMU_CTXT_NONZERO_CONFIG	./arch/sparc/asi.hh	/^    ASI_DMMU_CTXT_NONZERO_CONFIG = 0x3B,$/;"	e	enum:SparcISA::ASI
ASI_DMMU_CTXT_NONZERO_TSB_BASE_PS0	./arch/sparc/asi.hh	/^    ASI_DMMU_CTXT_NONZERO_TSB_BASE_PS0 = 0x39,$/;"	e	enum:SparcISA::ASI
ASI_DMMU_CTXT_NONZERO_TSB_BASE_PS1	./arch/sparc/asi.hh	/^    ASI_DMMU_CTXT_NONZERO_TSB_BASE_PS1 = 0x3A,$/;"	e	enum:SparcISA::ASI
ASI_DMMU_CTXT_ZERO_CONFIG	./arch/sparc/asi.hh	/^    ASI_DMMU_CTXT_ZERO_CONFIG = 0x33,$/;"	e	enum:SparcISA::ASI
ASI_DMMU_CTXT_ZERO_TSB_BASE_PS0	./arch/sparc/asi.hh	/^    ASI_DMMU_CTXT_ZERO_TSB_BASE_PS0 = 0x31,$/;"	e	enum:SparcISA::ASI
ASI_DMMU_CTXT_ZERO_TSB_BASE_PS1	./arch/sparc/asi.hh	/^    ASI_DMMU_CTXT_ZERO_TSB_BASE_PS1 = 0x32,$/;"	e	enum:SparcISA::ASI
ASI_DMMU_DEMAP	./arch/sparc/asi.hh	/^    ASI_DMMU_DEMAP = 0x5F,$/;"	e	enum:SparcISA::ASI
ASI_DMMU_TSB_DIRECT_PTR_REG	./arch/sparc/asi.hh	/^    ASI_DMMU_TSB_DIRECT_PTR_REG = 0x5B,$/;"	e	enum:SparcISA::ASI
ASI_DMMU_TSB_PS0_PTR_REG	./arch/sparc/asi.hh	/^    ASI_DMMU_TSB_PS0_PTR_REG = 0x59,$/;"	e	enum:SparcISA::ASI
ASI_DMMU_TSB_PS1_PTR_REG	./arch/sparc/asi.hh	/^    ASI_DMMU_TSB_PS1_PTR_REG = 0x5A,$/;"	e	enum:SparcISA::ASI
ASI_DTLB_DATA_ACCESS_REG	./arch/sparc/asi.hh	/^    ASI_DTLB_DATA_ACCESS_REG = 0x5D,$/;"	e	enum:SparcISA::ASI
ASI_DTLB_DATA_IN_REG	./arch/sparc/asi.hh	/^    ASI_DTLB_DATA_IN_REG = 0x5C,$/;"	e	enum:SparcISA::ASI
ASI_DTLB_TAG_READ_REG	./arch/sparc/asi.hh	/^    ASI_DTLB_TAG_READ_REG = 0x5E,$/;"	e	enum:SparcISA::ASI
ASI_ECACHE_TAG_DATA	./arch/sparc/asi.hh	/^    ASI_ECACHE_TAG_DATA = 0x4E,$/;"	e	enum:SparcISA::ASI
ASI_FL16_P	./arch/sparc/asi.hh	/^    ASI_FL16_P = 0xD2,$/;"	e	enum:SparcISA::ASI
ASI_FL16_PL	./arch/sparc/asi.hh	/^    ASI_FL16_PL = 0xDA,$/;"	e	enum:SparcISA::ASI
ASI_FL16_PRIMARY	./arch/sparc/asi.hh	/^    ASI_FL16_PRIMARY = ASI_FL16_P,$/;"	e	enum:SparcISA::ASI
ASI_FL16_PRIMARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_FL16_PRIMARY_LITTLE = ASI_FL16_PL,$/;"	e	enum:SparcISA::ASI
ASI_FL16_S	./arch/sparc/asi.hh	/^    ASI_FL16_S = 0xD3,$/;"	e	enum:SparcISA::ASI
ASI_FL16_SECONDARY	./arch/sparc/asi.hh	/^    ASI_FL16_SECONDARY = ASI_FL16_S,$/;"	e	enum:SparcISA::ASI
ASI_FL16_SECONDARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_FL16_SECONDARY_LITTLE = ASI_FL16_SL,$/;"	e	enum:SparcISA::ASI
ASI_FL16_SL	./arch/sparc/asi.hh	/^    ASI_FL16_SL = 0xDB,$/;"	e	enum:SparcISA::ASI
ASI_FL8_P	./arch/sparc/asi.hh	/^    ASI_FL8_P = 0xD0,$/;"	e	enum:SparcISA::ASI
ASI_FL8_PL	./arch/sparc/asi.hh	/^    ASI_FL8_PL = 0xD8,$/;"	e	enum:SparcISA::ASI
ASI_FL8_PRIMARY	./arch/sparc/asi.hh	/^    ASI_FL8_PRIMARY = ASI_FL8_P,$/;"	e	enum:SparcISA::ASI
ASI_FL8_PRIMARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_FL8_PRIMARY_LITTLE = ASI_FL8_PL,$/;"	e	enum:SparcISA::ASI
ASI_FL8_S	./arch/sparc/asi.hh	/^    ASI_FL8_S = 0xD1,$/;"	e	enum:SparcISA::ASI
ASI_FL8_SECONDARY	./arch/sparc/asi.hh	/^    ASI_FL8_SECONDARY = ASI_FL8_S,$/;"	e	enum:SparcISA::ASI
ASI_FL8_SECONDARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_FL8_SECONDARY_LITTLE = ASI_FL8_SL,$/;"	e	enum:SparcISA::ASI
ASI_FL8_SL	./arch/sparc/asi.hh	/^    ASI_FL8_SL = 0xD9,$/;"	e	enum:SparcISA::ASI
ASI_HYP_SCRATCHPAD	./arch/sparc/asi.hh	/^    ASI_HYP_SCRATCHPAD = 0x4F,$/;"	e	enum:SparcISA::ASI
ASI_ICACHE_INSTR	./arch/sparc/asi.hh	/^    ASI_ICACHE_INSTR = 0x66,$/;"	e	enum:SparcISA::ASI
ASI_ICACHE_TAG	./arch/sparc/asi.hh	/^    ASI_ICACHE_TAG = 0x67,$/;"	e	enum:SparcISA::ASI
ASI_IMMU	./arch/sparc/asi.hh	/^    ASI_IMMU = 0x50,$/;"	e	enum:SparcISA::ASI
ASI_IMMU_CTXT_NONZERO_CONFIG	./arch/sparc/asi.hh	/^    ASI_IMMU_CTXT_NONZERO_CONFIG = 0x3F,$/;"	e	enum:SparcISA::ASI
ASI_IMMU_CTXT_NONZERO_TSB_BASE_PS0	./arch/sparc/asi.hh	/^    ASI_IMMU_CTXT_NONZERO_TSB_BASE_PS0 = 0x3D,$/;"	e	enum:SparcISA::ASI
ASI_IMMU_CTXT_NONZERO_TSB_BASE_PS1	./arch/sparc/asi.hh	/^    ASI_IMMU_CTXT_NONZERO_TSB_BASE_PS1 = 0x3E,$/;"	e	enum:SparcISA::ASI
ASI_IMMU_CTXT_ZERO_CONFIG	./arch/sparc/asi.hh	/^    ASI_IMMU_CTXT_ZERO_CONFIG = 0x37,$/;"	e	enum:SparcISA::ASI
ASI_IMMU_CTXT_ZERO_TSB_BASE_PS0	./arch/sparc/asi.hh	/^    ASI_IMMU_CTXT_ZERO_TSB_BASE_PS0 = 0x35,$/;"	e	enum:SparcISA::ASI
ASI_IMMU_CTXT_ZERO_TSB_BASE_PS1	./arch/sparc/asi.hh	/^    ASI_IMMU_CTXT_ZERO_TSB_BASE_PS1 = 0x36,$/;"	e	enum:SparcISA::ASI
ASI_IMMU_DEMAP	./arch/sparc/asi.hh	/^    ASI_IMMU_DEMAP = 0x57,$/;"	e	enum:SparcISA::ASI
ASI_IMMU_TSB_PS0_PTR_REG	./arch/sparc/asi.hh	/^    ASI_IMMU_TSB_PS0_PTR_REG = 0x51,$/;"	e	enum:SparcISA::ASI
ASI_IMMU_TSB_PS1_PTR_REG	./arch/sparc/asi.hh	/^    ASI_IMMU_TSB_PS1_PTR_REG = 0x52,$/;"	e	enum:SparcISA::ASI
ASI_IMPLICIT	./arch/sparc/asi.hh	/^    ASI_IMPLICIT = 0x00,$/;"	e	enum:SparcISA::ASI
ASI_INST_MASK_REG	./arch/sparc/asi.hh	/^    ASI_INST_MASK_REG = 0x42,$/;"	e	enum:SparcISA::ASI
ASI_INTR_DISPATCH_STATUS	./arch/sparc/asi.hh	/^    ASI_INTR_DISPATCH_STATUS = 0x48,$/;"	e	enum:SparcISA::ASI
ASI_INTR_RECEIVE	./arch/sparc/asi.hh	/^    ASI_INTR_RECEIVE = 0x49,$/;"	e	enum:SparcISA::ASI
ASI_ITLB_DATA_ACCESS_REG	./arch/sparc/asi.hh	/^    ASI_ITLB_DATA_ACCESS_REG = 0x55,$/;"	e	enum:SparcISA::ASI
ASI_ITLB_DATA_IN_REG	./arch/sparc/asi.hh	/^    ASI_ITLB_DATA_IN_REG = 0x54,$/;"	e	enum:SparcISA::ASI
ASI_ITLB_TAG_READ_REG	./arch/sparc/asi.hh	/^    ASI_ITLB_TAG_READ_REG = 0x56,$/;"	e	enum:SparcISA::ASI
ASI_LDTX_AIUP	./arch/sparc/asi.hh	/^    ASI_LDTX_AIUP = 0x22,$/;"	e	enum:SparcISA::ASI
ASI_LDTX_AIUP_L	./arch/sparc/asi.hh	/^    ASI_LDTX_AIUP_L = 0x2A,$/;"	e	enum:SparcISA::ASI
ASI_LDTX_AIUS	./arch/sparc/asi.hh	/^    ASI_LDTX_AIUS = 0x23,$/;"	e	enum:SparcISA::ASI
ASI_LDTX_AIUS_L	./arch/sparc/asi.hh	/^    ASI_LDTX_AIUS_L = 0x2B,$/;"	e	enum:SparcISA::ASI
ASI_LDTX_N	./arch/sparc/asi.hh	/^    ASI_LDTX_N = 0x27,$/;"	e	enum:SparcISA::ASI
ASI_LDTX_NL	./arch/sparc/asi.hh	/^    ASI_LDTX_NL = 0x2F,$/;"	e	enum:SparcISA::ASI
ASI_LDTX_P	./arch/sparc/asi.hh	/^    ASI_LDTX_P = 0xE2,$/;"	e	enum:SparcISA::ASI
ASI_LDTX_PL	./arch/sparc/asi.hh	/^    ASI_LDTX_PL = 0xEA,$/;"	e	enum:SparcISA::ASI
ASI_LDTX_REAL	./arch/sparc/asi.hh	/^    ASI_LDTX_REAL = ASI_QUAD_LDD_REAL,$/;"	e	enum:SparcISA::ASI
ASI_LDTX_REAL_L	./arch/sparc/asi.hh	/^    ASI_LDTX_REAL_L = 0x2E,$/;"	e	enum:SparcISA::ASI
ASI_LDTX_S	./arch/sparc/asi.hh	/^    ASI_LDTX_S = 0xE3,$/;"	e	enum:SparcISA::ASI
ASI_LDTX_SL	./arch/sparc/asi.hh	/^    ASI_LDTX_SL = 0xEB,$/;"	e	enum:SparcISA::ASI
ASI_LD_TWINX_AS_IF_USER_PRIMARY	./arch/sparc/asi.hh	/^    ASI_LD_TWINX_AS_IF_USER_PRIMARY = ASI_LDTX_AIUP,$/;"	e	enum:SparcISA::ASI
ASI_LD_TWINX_AS_IF_USER_SECONDARY	./arch/sparc/asi.hh	/^    ASI_LD_TWINX_AS_IF_USER_SECONDARY = ASI_LDTX_AIUS,$/;"	e	enum:SparcISA::ASI
ASI_LD_TWINX_AS_IF_USER_SECONDARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_LD_TWINX_AS_IF_USER_SECONDARY_LITTLE = ASI_LDTX_AIUS_L,$/;"	e	enum:SparcISA::ASI
ASI_LD_TWINX_NUCLEUS	./arch/sparc/asi.hh	/^    ASI_LD_TWINX_NUCLEUS = ASI_LDTX_N,$/;"	e	enum:SparcISA::ASI
ASI_LD_TWINX_NUCLEUS_LITTLE	./arch/sparc/asi.hh	/^    ASI_LD_TWINX_NUCLEUS_LITTLE = ASI_LDTX_NL,$/;"	e	enum:SparcISA::ASI
ASI_LD_TWINX_PRIMARY	./arch/sparc/asi.hh	/^    ASI_LD_TWINX_PRIMARY = ASI_LDTX_P,$/;"	e	enum:SparcISA::ASI
ASI_LD_TWINX_PRIMARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_LD_TWINX_PRIMARY_LITTLE = ASI_LDTX_PL,$/;"	e	enum:SparcISA::ASI
ASI_LD_TWINX_REAL_LITTLE	./arch/sparc/asi.hh	/^    ASI_LD_TWINX_REAL_LITTLE = ASI_LDTX_REAL_L,$/;"	e	enum:SparcISA::ASI
ASI_LD_TWINX_SECONDARY	./arch/sparc/asi.hh	/^    ASI_LD_TWINX_SECONDARY = ASI_LDTX_S,$/;"	e	enum:SparcISA::ASI
ASI_LD_TWINX_SECONDARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_LD_TWINX_SECONDARY_LITTLE = ASI_LDTX_SL,$/;"	e	enum:SparcISA::ASI
ASI_LSU_CONTROL_REG	./arch/sparc/asi.hh	/^    ASI_LSU_CONTROL_REG = 0x45,$/;"	e	enum:SparcISA::ASI
ASI_LSU_DIAG_REG	./arch/sparc/asi.hh	/^    ASI_LSU_DIAG_REG = 0x42,$/;"	e	enum:SparcISA::ASI
ASI_LTX_L	./arch/sparc/asi.hh	/^    ASI_LTX_L = 0x2C,$/;"	e	enum:SparcISA::ASI
ASI_MMU	./arch/sparc/asi.hh	/^    ASI_MMU = 0x21,$/;"	e	enum:SparcISA::ASI
ASI_N	./arch/sparc/asi.hh	/^    ASI_N = 0x4,$/;"	e	enum:SparcISA::ASI
ASI_NL	./arch/sparc/asi.hh	/^    ASI_NL = 0xC,$/;"	e	enum:SparcISA::ASI
ASI_NUCLEUS	./arch/sparc/asi.hh	/^    ASI_NUCLEUS = 0x4,$/;"	e	enum:SparcISA::ASI
ASI_NUCLEUS_LITTLE	./arch/sparc/asi.hh	/^    ASI_NUCLEUS_LITTLE = ASI_NL,$/;"	e	enum:SparcISA::ASI
ASI_P	./arch/sparc/asi.hh	/^    ASI_P = 0x80,$/;"	e	enum:SparcISA::ASI
ASI_PL	./arch/sparc/asi.hh	/^    ASI_PL = 0x88,$/;"	e	enum:SparcISA::ASI
ASI_PNF	./arch/sparc/asi.hh	/^    ASI_PNF = 0x82,$/;"	e	enum:SparcISA::ASI
ASI_PNFL	./arch/sparc/asi.hh	/^    ASI_PNFL = 0x8A,$/;"	e	enum:SparcISA::ASI
ASI_PRIMARY	./arch/sparc/asi.hh	/^    ASI_PRIMARY = ASI_P,$/;"	e	enum:SparcISA::ASI
ASI_PRIMARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_PRIMARY_LITTLE = ASI_PL,$/;"	e	enum:SparcISA::ASI
ASI_PRIMARY_NO_FAULT	./arch/sparc/asi.hh	/^    ASI_PRIMARY_NO_FAULT = ASI_PNF,$/;"	e	enum:SparcISA::ASI
ASI_PRIMARY_NO_FAULT_LITTLE	./arch/sparc/asi.hh	/^    ASI_PRIMARY_NO_FAULT_LITTLE = ASI_PNFL,$/;"	e	enum:SparcISA::ASI
ASI_PST16_P	./arch/sparc/asi.hh	/^    ASI_PST16_P = 0xC2,$/;"	e	enum:SparcISA::ASI
ASI_PST16_PL	./arch/sparc/asi.hh	/^    ASI_PST16_PL = 0xCA,$/;"	e	enum:SparcISA::ASI
ASI_PST16_PRIMARY	./arch/sparc/asi.hh	/^    ASI_PST16_PRIMARY = ASI_PST16_P,$/;"	e	enum:SparcISA::ASI
ASI_PST16_PRIMARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_PST16_PRIMARY_LITTLE = ASI_PST16_PL,$/;"	e	enum:SparcISA::ASI
ASI_PST16_S	./arch/sparc/asi.hh	/^    ASI_PST16_S = 0xC3,$/;"	e	enum:SparcISA::ASI
ASI_PST16_SECONDARY	./arch/sparc/asi.hh	/^    ASI_PST16_SECONDARY = ASI_PST16_S,$/;"	e	enum:SparcISA::ASI
ASI_PST16_SECONDARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_PST16_SECONDARY_LITTLE = ASI_PST16_SL,$/;"	e	enum:SparcISA::ASI
ASI_PST16_SL	./arch/sparc/asi.hh	/^    ASI_PST16_SL = 0xCB,$/;"	e	enum:SparcISA::ASI
ASI_PST32_P	./arch/sparc/asi.hh	/^    ASI_PST32_P = 0xC4,$/;"	e	enum:SparcISA::ASI
ASI_PST32_PL	./arch/sparc/asi.hh	/^    ASI_PST32_PL = 0xCC,$/;"	e	enum:SparcISA::ASI
ASI_PST32_PRIMARY	./arch/sparc/asi.hh	/^    ASI_PST32_PRIMARY = ASI_PST32_P,$/;"	e	enum:SparcISA::ASI
ASI_PST32_PRIMARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_PST32_PRIMARY_LITTLE = ASI_PST32_PL,$/;"	e	enum:SparcISA::ASI
ASI_PST32_S	./arch/sparc/asi.hh	/^    ASI_PST32_S = 0xC5,$/;"	e	enum:SparcISA::ASI
ASI_PST32_SECONDARY	./arch/sparc/asi.hh	/^    ASI_PST32_SECONDARY = ASI_PST32_S,$/;"	e	enum:SparcISA::ASI
ASI_PST32_SECONDARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_PST32_SECONDARY_LITTLE = ASI_PST32_SL,$/;"	e	enum:SparcISA::ASI
ASI_PST32_SL	./arch/sparc/asi.hh	/^    ASI_PST32_SL = 0xCD,$/;"	e	enum:SparcISA::ASI
ASI_PST8_P	./arch/sparc/asi.hh	/^    ASI_PST8_P = 0xC0,$/;"	e	enum:SparcISA::ASI
ASI_PST8_PL	./arch/sparc/asi.hh	/^    ASI_PST8_PL = 0xC8,$/;"	e	enum:SparcISA::ASI
ASI_PST8_PRIMARY	./arch/sparc/asi.hh	/^    ASI_PST8_PRIMARY = ASI_PST8_P,$/;"	e	enum:SparcISA::ASI
ASI_PST8_PRIMARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_PST8_PRIMARY_LITTLE = ASI_PST8_PL,$/;"	e	enum:SparcISA::ASI
ASI_PST8_S	./arch/sparc/asi.hh	/^    ASI_PST8_S = 0xC1,$/;"	e	enum:SparcISA::ASI
ASI_PST8_SECONDARY	./arch/sparc/asi.hh	/^    ASI_PST8_SECONDARY = ASI_PST8_S,$/;"	e	enum:SparcISA::ASI
ASI_PST8_SECONDARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_PST8_SECONDARY_LITTLE = ASI_PST8_SL,$/;"	e	enum:SparcISA::ASI
ASI_PST8_SL	./arch/sparc/asi.hh	/^    ASI_PST8_SL = 0xC9,$/;"	e	enum:SparcISA::ASI
ASI_QUAD_LDD	./arch/sparc/asi.hh	/^    ASI_QUAD_LDD = 0x24,$/;"	e	enum:SparcISA::ASI
ASI_QUAD_LDD_REAL	./arch/sparc/asi.hh	/^    ASI_QUAD_LDD_REAL = 0x26,$/;"	e	enum:SparcISA::ASI
ASI_QUEUE	./arch/sparc/asi.hh	/^    ASI_QUEUE = 0x25,$/;"	e	enum:SparcISA::ASI
ASI_REAL	./arch/sparc/asi.hh	/^    ASI_REAL = 0x14,$/;"	e	enum:SparcISA::ASI
ASI_REAL_IO	./arch/sparc/asi.hh	/^    ASI_REAL_IO = 0x15,$/;"	e	enum:SparcISA::ASI
ASI_REAL_IO_L	./arch/sparc/asi.hh	/^    ASI_REAL_IO_L = 0x1D,$/;"	e	enum:SparcISA::ASI
ASI_REAL_IO_LITTLE	./arch/sparc/asi.hh	/^    ASI_REAL_IO_LITTLE = ASI_REAL_IO_L,$/;"	e	enum:SparcISA::ASI
ASI_REAL_L	./arch/sparc/asi.hh	/^    ASI_REAL_L = 0x1C,$/;"	e	enum:SparcISA::ASI
ASI_REAL_LITTLE	./arch/sparc/asi.hh	/^    ASI_REAL_LITTLE = ASI_REAL_L,$/;"	e	enum:SparcISA::ASI
ASI_S	./arch/sparc/asi.hh	/^    ASI_S = 0x81,$/;"	e	enum:SparcISA::ASI
ASI_SCRATCHPAD	./arch/sparc/asi.hh	/^    ASI_SCRATCHPAD = 0x20,$/;"	e	enum:SparcISA::ASI
ASI_SECONDARY	./arch/sparc/asi.hh	/^    ASI_SECONDARY = ASI_S,$/;"	e	enum:SparcISA::ASI
ASI_SECONDARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_SECONDARY_LITTLE = ASI_SL,$/;"	e	enum:SparcISA::ASI
ASI_SECONDARY_NO_FAULT	./arch/sparc/asi.hh	/^    ASI_SECONDARY_NO_FAULT = ASI_SNF,$/;"	e	enum:SparcISA::ASI
ASI_SECONDARY_NO_FAULT_LITTLE	./arch/sparc/asi.hh	/^    ASI_SECONDARY_NO_FAULT_LITTLE = ASI_SNFL,$/;"	e	enum:SparcISA::ASI
ASI_SL	./arch/sparc/asi.hh	/^    ASI_SL = 0x89,$/;"	e	enum:SparcISA::ASI
ASI_SNF	./arch/sparc/asi.hh	/^    ASI_SNF = 0x83,$/;"	e	enum:SparcISA::ASI
ASI_SNFL	./arch/sparc/asi.hh	/^    ASI_SNFL = 0x8B,$/;"	e	enum:SparcISA::ASI
ASI_SPARC_BIST_CONTROL	./arch/sparc/asi.hh	/^    ASI_SPARC_BIST_CONTROL = 0x42,$/;"	e	enum:SparcISA::ASI
ASI_SPARC_ERROR_ADDRESS_REG	./arch/sparc/asi.hh	/^    ASI_SPARC_ERROR_ADDRESS_REG = 0x4D,$/;"	e	enum:SparcISA::ASI
ASI_SPARC_ERROR_EN_REG	./arch/sparc/asi.hh	/^    ASI_SPARC_ERROR_EN_REG = 0x4B,$/;"	e	enum:SparcISA::ASI
ASI_SPARC_ERROR_STATUS_REG	./arch/sparc/asi.hh	/^    ASI_SPARC_ERROR_STATUS_REG = 0x4C,$/;"	e	enum:SparcISA::ASI
ASI_STBI_AIUP_L	./arch/sparc/asi.hh	/^    ASI_STBI_AIUP_L = ASI_LDTX_AIUP_L,$/;"	e	enum:SparcISA::ASI
ASI_STBI_AIUS_L	./arch/sparc/asi.hh	/^    ASI_STBI_AIUS_L = ASI_LDTX_AIUS_L,$/;"	e	enum:SparcISA::ASI
ASI_STBI_N	./arch/sparc/asi.hh	/^    ASI_STBI_N = ASI_LDTX_N,$/;"	e	enum:SparcISA::ASI
ASI_STM_CTL_REG	./arch/sparc/asi.hh	/^    ASI_STM_CTL_REG = 0x44,$/;"	e	enum:SparcISA::ASI
ASI_STREAM_MA	./arch/sparc/asi.hh	/^    ASI_STREAM_MA = 0x40,$/;"	e	enum:SparcISA::ASI
ASI_ST_BLKINIT_AS_IF_USER_PRIMARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_ST_BLKINIT_AS_IF_USER_PRIMARY_LITTLE = ASI_LDTX_AIUP_L,$/;"	e	enum:SparcISA::ASI
ASI_ST_BLKINIT_AS_IF_USER_SECONDARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_ST_BLKINIT_AS_IF_USER_SECONDARY_LITTLE = ASI_LDTX_AIUS_L,$/;"	e	enum:SparcISA::ASI
ASI_ST_BLKINIT_NUCLEUS	./arch/sparc/asi.hh	/^    ASI_ST_BLKINIT_NUCLEUS = ASI_LDTX_N,$/;"	e	enum:SparcISA::ASI
ASI_SWVR_INTR_RECEIVE	./arch/sparc/asi.hh	/^    ASI_SWVR_INTR_RECEIVE = 0x72,$/;"	e	enum:SparcISA::ASI
ASI_SWVR_UDB_INTR_R	./arch/sparc/asi.hh	/^    ASI_SWVR_UDB_INTR_R = 0x74,$/;"	e	enum:SparcISA::ASI
ASI_SWVR_UDB_INTR_W	./arch/sparc/asi.hh	/^    ASI_SWVR_UDB_INTR_W = 0x73,$/;"	e	enum:SparcISA::ASI
ASI_TLB_INVALIDATE_ALL	./arch/sparc/asi.hh	/^    ASI_TLB_INVALIDATE_ALL = 0x60,$/;"	e	enum:SparcISA::ASI
ASI_TWINX_AS_IF_USER_PRIMARY_LITTLE	./arch/sparc/asi.hh	/^    ASI_TWINX_AS_IF_USER_PRIMARY_LITTLE = ASI_LDTX_AIUP_L,$/;"	e	enum:SparcISA::ASI
ASI_TWINX_LITTLE	./arch/sparc/asi.hh	/^    ASI_TWINX_LITTLE = ASI_LTX_L,$/;"	e	enum:SparcISA::ASI
ASI_UPA_CONFIG_REGISTER	./arch/sparc/asi.hh	/^    ASI_UPA_CONFIG_REGISTER = 0x4A,$/;"	e	enum:SparcISA::ASI
ASR	./arch/arm/types.hh	/^        ASR,$/;"	e	enum:ArmISA::ArmShiftType
AST	./mem/slicc/ast/AST.py	/^class AST(PairContainer):$/;"	c
ATAPI_CAP_ATA_RST	./dev/storage/ide_atareg.h	114;"	d
ATAPI_CAP_CMD_QUEUE	./dev/storage/ide_atareg.h	112;"	d
ATAPI_CAP_INTERL_DMA	./dev/storage/ide_atareg.h	111;"	d
ATAPI_CAP_OVERLP	./dev/storage/ide_atareg.h	113;"	d
ATAPI_CFA_MAX_MASK	./dev/storage/ide_atareg.h	276;"	d
ATAPI_CFA_MODE1_DIS	./dev/storage/ide_atareg.h	277;"	d
ATAPI_CFA_MODE1_REQ	./dev/storage/ide_atareg.h	278;"	d
ATAPI_CFA_WORD160	./dev/storage/ide_atareg.h	279;"	d
ATAPI_CFG_ACCEL_DRQ	./dev/storage/ide_atareg.h	85;"	d
ATAPI_CFG_CMD_12	./dev/storage/ide_atareg.h	87;"	d
ATAPI_CFG_CMD_16	./dev/storage/ide_atareg.h	88;"	d
ATAPI_CFG_CMD_MASK	./dev/storage/ide_atareg.h	86;"	d
ATAPI_CFG_DRQ_MASK	./dev/storage/ide_atareg.h	82;"	d
ATAPI_CFG_IRQ_DRQ	./dev/storage/ide_atareg.h	84;"	d
ATAPI_CFG_REMOV	./dev/storage/ide_atareg.h	81;"	d
ATAPI_CFG_STD_DRQ	./dev/storage/ide_atareg.h	83;"	d
ATAPI_CFG_TYPE	./dev/storage/ide_atareg.h	75;"	d
ATAPI_CFG_TYPE_CDROM	./dev/storage/ide_atareg.h	78;"	d
ATAPI_CFG_TYPE_DIRECT	./dev/storage/ide_atareg.h	76;"	d
ATAPI_CFG_TYPE_MASK	./dev/storage/ide_atareg.h	74;"	d
ATAPI_CFG_TYPE_NODEVICE	./dev/storage/ide_atareg.h	80;"	d
ATAPI_CFG_TYPE_OPTICAL	./dev/storage/ide_atareg.h	79;"	d
ATAPI_CFG_TYPE_SEQUENTIAL	./dev/storage/ide_atareg.h	77;"	d
ATAPI_CHECK_POWER_MODE	./dev/storage/ide_wdcreg.h	166;"	d
ATAPI_CMD2_48AD	./dev/storage/ide_atareg.h	210;"	d
ATAPI_CMD2_AAM	./dev/storage/ide_atareg.h	211;"	d
ATAPI_CMD2_DCO	./dev/storage/ide_atareg.h	209;"	d
ATAPI_CMD2_FC	./dev/storage/ide_atareg.h	208;"	d
ATAPI_CMD2_FCE	./dev/storage/ide_atareg.h	207;"	d
ATAPI_CMD2_PUIS	./dev/storage/ide_atareg.h	214;"	d
ATAPI_CMD2_SF	./dev/storage/ide_atareg.h	213;"	d
ATAPI_CMD2_SM	./dev/storage/ide_atareg.h	212;"	d
ATAPI_CMDE_MSER	./dev/storage/ide_atareg.h	221;"	d
ATAPI_CMDE_SLOG	./dev/storage/ide_atareg.h	223;"	d
ATAPI_CMDE_TEST	./dev/storage/ide_atareg.h	222;"	d
ATAPI_DEVICE_RESET	./dev/storage/ide_wdcreg.h	173;"	d
ATAPI_EXEC_DRIVE_DIAGS	./dev/storage/ide_wdcreg.h	167;"	d
ATAPI_IDENTIFY_DEVICE	./dev/storage/ide_wdcreg.h	171;"	d
ATAPI_IDLE_IMMEDIATE	./dev/storage/ide_wdcreg.h	168;"	d
ATAPI_NOP	./dev/storage/ide_wdcreg.h	169;"	d
ATAPI_PKT_CMD	./dev/storage/ide_wdcreg.h	170;"	d
ATAPI_PKT_CMD_FTRE_DMA	./dev/storage/ide_wdcreg.h	183;"	d
ATAPI_PKT_CMD_FTRE_OVL	./dev/storage/ide_wdcreg.h	184;"	d
ATAPI_SETMAX	./dev/storage/ide_wdcreg.h	177;"	d
ATAPI_SETMAXEXT	./dev/storage/ide_wdcreg.h	179;"	d
ATAPI_SLEEP	./dev/storage/ide_wdcreg.h	174;"	d
ATAPI_SMART	./dev/storage/ide_wdcreg.h	176;"	d
ATAPI_SOFT_RESET	./dev/storage/ide_wdcreg.h	172;"	d
ATAPI_STANDBY_IMMEDIATE	./dev/storage/ide_wdcreg.h	175;"	d
ATAPI_WRITEEXT	./dev/storage/ide_wdcreg.h	178;"	d
ATAPI_WRITEMULTIEXT	./dev/storage/ide_wdcreg.h	180;"	d
ATA_BYTE_ORDER	./dev/storage/ide_atareg.h	292;"	d
ATA_BYTE_ORDER	./dev/storage/ide_atareg.h	48;"	d
ATA_BYTE_ORDER	./dev/storage/ide_atareg.h	50;"	d
ATA_BYTE_ORDER	./dev/storage/ide_atareg.h	52;"	d
ATA_BYTE_ORDER	./dev/storage/ide_atareg.h	55;"	d
ATA_CAP_STBY	./dev/storage/ide_atareg.h	110;"	d
ATA_CFG_FIXED	./dev/storage/ide_atareg.h	73;"	d
ATA_CFG_REMOVABLE	./dev/storage/ide_atareg.h	72;"	d
ATA_CMD2_APM	./dev/storage/ide_atareg.h	216;"	d
ATA_CMD2_CFA	./dev/storage/ide_atareg.h	217;"	d
ATA_CMD2_RWQ	./dev/storage/ide_atareg.h	218;"	d
ATA_HWRES_CBLID	./dev/storage/ide_atareg.h	243;"	d
ATA_HWRES_D0_CSEL	./dev/storage/ide_atareg.h	251;"	d
ATA_HWRES_D0_DASP	./dev/storage/ide_atareg.h	248;"	d
ATA_HWRES_D0_DIAG	./dev/storage/ide_atareg.h	250;"	d
ATA_HWRES_D0_JUMP	./dev/storage/ide_atareg.h	252;"	d
ATA_HWRES_D0_PDIAG	./dev/storage/ide_atareg.h	249;"	d
ATA_HWRES_D0_SEL	./dev/storage/ide_atareg.h	247;"	d
ATA_HWRES_D1_CSEL	./dev/storage/ide_atareg.h	245;"	d
ATA_HWRES_D1_JUMP	./dev/storage/ide_atareg.h	246;"	d
ATA_HWRES_D1_PDIAG	./dev/storage/ide_atareg.h	244;"	d
ATA_PCI_DMA	./dev/mips/maltareg.h	142;"	d
ATA_PCI_DMA2	./dev/mips/maltareg.h	143;"	d
ATA_PCI_DMA3	./dev/mips/maltareg.h	144;"	d
ATA_PCI_DMA4	./dev/mips/maltareg.h	145;"	d
ATA_PCI_DMA5	./dev/mips/maltareg.h	146;"	d
ATA_PCI_DMA6	./dev/mips/maltareg.h	147;"	d
ATA_PCI_DMA7	./dev/mips/maltareg.h	148;"	d
ATable	./base/loader/symtab.hh	/^    typedef std::map<Addr, std::string> ATable;$/;"	t	class:SymbolTable
AUXU	./base/loader/coff_sym.h	/^} AUXU, *pAUXU;$/;"	t	typeref:union:__anon115
AXI_PORT_WIDTH	./dev/arm/hdlcd.hh	/^    static constexpr size_t AXI_PORT_WIDTH = 8;$/;"	m	class:HDLcd
AbortFault	./arch/arm/faults.hh	/^    AbortFault(Addr _faultAddr, bool _write, TlbEntry::DomainType _domain,$/;"	f	class:ArmISA::AbortFault
AbortFault	./arch/arm/faults.hh	/^class AbortFault : public ArmFaultVals<T>$/;"	c	namespace:ArmISA
AbstractBloomFilter	./mem/ruby/filters/AbstractBloomFilter.hh	/^class AbstractBloomFilter$/;"	c
AbstractCacheEntry	./mem/ruby/slicc_interface/AbstractCacheEntry.cc	/^AbstractCacheEntry::AbstractCacheEntry()$/;"	f	class:AbstractCacheEntry
AbstractCacheEntry	./mem/ruby/slicc_interface/AbstractCacheEntry.hh	/^class AbstractCacheEntry : public AbstractEntry$/;"	c
AbstractController	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::AbstractController(const Params *p)$/;"	f	class:AbstractController
AbstractController	./mem/ruby/slicc_interface/AbstractController.hh	/^class AbstractController : public MemObject, public Consumer$/;"	c
AbstractEntry	./mem/ruby/slicc_interface/AbstractEntry.cc	/^AbstractEntry::AbstractEntry()$/;"	f	class:AbstractEntry
AbstractEntry	./mem/ruby/slicc_interface/AbstractEntry.hh	/^class AbstractEntry$/;"	c
AbstractMemory	./mem/AbstractMemory.py	/^class AbstractMemory(MemObject):$/;"	c
AbstractMemory	./mem/abstract_mem.cc	/^AbstractMemory::AbstractMemory(const Params *p) :$/;"	f	class:AbstractMemory
AbstractMemory	./mem/abstract_mem.hh	/^class AbstractMemory : public MemObject$/;"	c
AbstractNVM	./dev/arm/AbstractNVM.py	/^class AbstractNVM(SimObject):$/;"	c
AbstractNVM	./dev/arm/abstract_nvm.hh	/^    AbstractNVM(const AbstractNVMParams* p): SimObject(p) {};$/;"	f	class:AbstractNVM
AbstractNVM	./dev/arm/abstract_nvm.hh	/^class AbstractNVM : public SimObject$/;"	c
AbstractReplacementPolicy	./mem/ruby/structures/AbstractReplacementPolicy.cc	/^AbstractReplacementPolicy::AbstractReplacementPolicy(const Params * p)$/;"	f	class:AbstractReplacementPolicy
AbstractReplacementPolicy	./mem/ruby/structures/AbstractReplacementPolicy.hh	/^class AbstractReplacementPolicy : public SimObject$/;"	c
Access	./dev/alpha/backdoor.hh	/^    struct Access : public AlphaAccess, public Serializable$/;"	s	class:AlphaBackdoor
AccessFlagLL	./arch/arm/faults.hh	/^        AccessFlagLL = TranslationLL + 4,$/;"	e	enum:ArmISA::ArmFault::FaultSource
AccessRecord	./mem/ruby/structures/BankedArray.hh	/^        AccessRecord() : idx(0), startAccess(0), endAccess(0) {}$/;"	f	class:BankedArray::AccessRecord
AccessRecord	./mem/ruby/structures/BankedArray.hh	/^    class AccessRecord$/;"	c	class:BankedArray
AccessTraceForAddress	./mem/ruby/profiler/AccessTraceForAddress.hh	/^    AccessTraceForAddress()$/;"	f	class:AccessTraceForAddress
AccessTraceForAddress	./mem/ruby/profiler/AccessTraceForAddress.hh	/^class AccessTraceForAddress$/;"	c
Ack	./dev/ps2.hh	/^    Ack             = 0xfa,$/;"	e	enum:Ps2::__anon4
AckCtl	./dev/arm/vgic.hh	/^    Bitfield<2> AckCtl;$/;"	m	class:VGic
Action	./mem/slicc/symbols/Action.py	/^class Action(Symbol):$/;"	c
ActionCopy	./dev/arm/flash_device.hh	/^        ActionCopy$/;"	e	enum:FlashDevice::Actions
ActionDeclAST	./mem/slicc/ast/ActionDeclAST.py	/^class ActionDeclAST(DeclAST):$/;"	c
ActionErase	./dev/arm/flash_device.hh	/^        ActionErase,$/;"	e	enum:FlashDevice::Actions
ActionRead	./dev/arm/flash_device.hh	/^        ActionRead,$/;"	e	enum:FlashDevice::Actions
ActionWrite	./dev/arm/flash_device.hh	/^        ActionWrite,$/;"	e	enum:FlashDevice::Actions
Actions	./dev/arm/flash_device.hh	/^    enum Actions {$/;"	g	class:FlashDevice
Active	./cpu/o3/commit.hh	/^        Active,$/;"	e	enum:DefaultCommit::CommitStatus
Active	./cpu/o3/decode.hh	/^        Active,$/;"	e	enum:DefaultDecode::DecodeStatus
Active	./cpu/o3/fetch.hh	/^        Active,$/;"	e	enum:DefaultFetch::FetchStatus
Active	./cpu/o3/iew.hh	/^        Active,$/;"	e	enum:DefaultIEW::Status
Active	./cpu/o3/rename.hh	/^        Active,$/;"	e	enum:DefaultRename::RenameStatus
Active	./cpu/thread_context.hh	/^        Active,$/;"	e	enum:ThreadContext::Status
ActivityRecorder	./cpu/activity.cc	/^ActivityRecorder::ActivityRecorder(const string &name, int num_stages,$/;"	f	class:ActivityRecorder
ActivityRecorder	./cpu/activity.hh	/^class ActivityRecorder$/;"	c
Addr	./base/types.hh	/^typedef uint64_t Addr;$/;"	t
Addr	./python/m5/params.py	/^class Addr(CheckedInt):$/;"	c
AddrCacheMap	./arch/x86/decoder.hh	/^    typedef std::unordered_map<CacheKey, DecodePages *> AddrCacheMap;$/;"	t	class:X86ISA::Decoder
AddrMap	./cpu/decode_cache.hh	/^    AddrMap()$/;"	f	class:DecodeCache::AddrMap
AddrMap	./cpu/decode_cache.hh	/^class AddrMap$/;"	c	namespace:DecodeCache
AddrMap	./mem/DRAMCtrl.py	/^class AddrMap(Enum): vals = ['RoRaBaChCo', 'RoRaBaCoCh', 'RoCoRaBaCh']$/;"	c
AddrMapper	./mem/AddrMapper.py	/^class AddrMapper(MemObject):$/;"	c
AddrMapper	./mem/addr_mapper.cc	/^AddrMapper::AddrMapper(const AddrMapperParams* p)$/;"	f	class:AddrMapper
AddrMapper	./mem/addr_mapper.hh	/^class AddrMapper : public MemObject$/;"	c
AddrMapperSenderState	./mem/addr_mapper.hh	/^        AddrMapperSenderState(Addr _origAddr) : origAddr(_origAddr)$/;"	f	class:AddrMapper::AddrMapperSenderState
AddrMapperSenderState	./mem/addr_mapper.hh	/^    class AddrMapperSenderState : public Packet::SenderState$/;"	c	class:AddrMapper
AddrMd_Offset	./arch/arm/insts/macromem.hh	/^        AddrMd_Offset,$/;"	e	enum:ArmISA::PairMemOp::AddrMode
AddrMd_Offset	./arch/arm/insts/mem.hh	/^        AddrMd_Offset,$/;"	e	enum:ArmISA::Memory::AddrMode
AddrMd_Offset	./arch/arm/insts/mem64.hh	/^        AddrMd_Offset,$/;"	e	enum:ArmISA::Memory64::AddrMode
AddrMd_PostIndex	./arch/arm/insts/macromem.hh	/^        AddrMd_PostIndex$/;"	e	enum:ArmISA::PairMemOp::AddrMode
AddrMd_PostIndex	./arch/arm/insts/mem.hh	/^        AddrMd_PostIndex$/;"	e	enum:ArmISA::Memory::AddrMode
AddrMd_PostIndex	./arch/arm/insts/mem64.hh	/^        AddrMd_PostIndex$/;"	e	enum:ArmISA::Memory64::AddrMode
AddrMd_PreIndex	./arch/arm/insts/macromem.hh	/^        AddrMd_PreIndex,$/;"	e	enum:ArmISA::PairMemOp::AddrMode
AddrMd_PreIndex	./arch/arm/insts/mem.hh	/^        AddrMd_PreIndex,$/;"	e	enum:ArmISA::Memory::AddrMode
AddrMd_PreIndex	./arch/arm/insts/mem64.hh	/^        AddrMd_PreIndex,$/;"	e	enum:ArmISA::Memory64::AddrMode
AddrMode	./arch/arm/insts/macromem.hh	/^    enum AddrMode {$/;"	g	class:ArmISA::PairMemOp
AddrMode	./arch/arm/insts/mem.hh	/^    enum AddrMode {$/;"	g	class:ArmISA::Memory
AddrMode	./arch/arm/insts/mem.hh	/^    enum AddrMode {$/;"	g	class:ArmISA::RfeOp
AddrMode	./arch/arm/insts/mem.hh	/^    enum AddrMode {$/;"	g	class:ArmISA::SrsOp
AddrMode	./arch/arm/insts/mem64.hh	/^    enum AddrMode {$/;"	g	class:ArmISA::Memory64
AddrRange	./base/addr_range.hh	/^    AddrRange()$/;"	f	class:AddrRange
AddrRange	./base/addr_range.hh	/^    AddrRange(Addr _start, Addr _end)$/;"	f	class:AddrRange
AddrRange	./base/addr_range.hh	/^    AddrRange(Addr _start, Addr _end, uint8_t _intlv_high_bit,$/;"	f	class:AddrRange
AddrRange	./base/addr_range.hh	/^    AddrRange(const std::vector<AddrRange>& ranges)$/;"	f	class:AddrRange
AddrRange	./base/addr_range.hh	/^class AddrRange$/;"	c
AddrRange	./python/m5/params.py	/^class AddrRange(ParamValue):$/;"	c
AddrRangeCoverage	./cpu/minor/lsq.hh	/^    enum AddrRangeCoverage$/;"	g	class:Minor::LSQ
AddrRangeList	./base/addr_range.hh	/^typedef std::list<AddrRange> AddrRangeList;$/;"	t
AddrRangeMap	./base/addr_range_map.hh	/^class AddrRangeMap$/;"	c
AddrShiftAmount	./arch/mips/pagetable.hh	/^    int AddrShiftAmount;$/;"	m	struct:MipsISA::PTE
AddrShiftAmount	./arch/power/pagetable.hh	/^    int AddrShiftAmount;$/;"	m	struct:PowerISA::PTE
AddrSizeFlagBit	./arch/x86/ldstflags.hh	/^        AddrSizeFlagBit = 2,$/;"	e	enum:X86ISA::FlagBit
AddrSpaceMapping	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::AddrSpaceMapping::AddrSpaceMapping(Params * p) :$/;"	f	class:X86ISA::IntelMP::AddrSpaceMapping
AddrSpaceMapping	./arch/x86/bios/intelmp.hh	/^class AddrSpaceMapping : public ExtConfigEntry$/;"	c	namespace:X86ISA::IntelMP
Addr_Mask	./mem/abstract_mem.hh	/^    static const Addr Addr_Mask = 0xf;$/;"	m	class:LockedAddr
Addr_a	./arch/mips/linux/aligned.hh	/^typedef Addr Addr_a __attribute__ ((aligned (8))) ;$/;"	t
Addr_a	./arch/mips/linux/aligned.hh	47;"	d
AddressErrorFault	./arch/mips/faults.hh	/^    AddressErrorFault(Addr _vaddr, bool _store) :$/;"	f	class:MipsISA::AddressErrorFault
AddressErrorFault	./arch/mips/faults.hh	/^class AddressErrorFault : public AddressFault<AddressErrorFault>$/;"	c	namespace:MipsISA
AddressFault	./arch/mips/faults.hh	/^    AddressFault(Addr _vaddr, bool _store) : vaddr(_vaddr), store(_store)$/;"	f	class:MipsISA::AddressFault
AddressFault	./arch/mips/faults.hh	/^class AddressFault : public MipsFault<T>$/;"	c	namespace:MipsISA
AddressFetch	./dev/pci/copy_engine.hh	/^            AddressFetch,$/;"	e	enum:CopyEngine::CopyEngineChannel::ChannelState
AddressIndexMap	./mem/stack_dist_calc.hh	/^    typedef std::map<Addr, uint64_t> AddressIndexMap;$/;"	t	class:StackDistCalc
AddressMap	./mem/ruby/profiler/AddressProfiler.cc	/^typedef AddressProfiler::AddressMap AddressMap;$/;"	t	file:
AddressMap	./mem/ruby/profiler/AddressProfiler.hh	/^    typedef std::unordered_map<Addr, AccessTraceForAddress> AddressMap;$/;"	t	class:AddressProfiler
AddressMap	./mem/ruby/structures/PersistentTable.hh	/^    typedef std::unordered_map<Addr, PersistentTableEntry> AddressMap;$/;"	t	class:PersistentTable
AddressMap	./mem/ruby/structures/TimerTable.hh	/^    typedef std::map<Addr, Tick> AddressMap;$/;"	t	class:TimerTable
AddressMonitor	./cpu/base.cc	/^AddressMonitor::AddressMonitor() {$/;"	f	class:AddressMonitor
AddressMonitor	./cpu/base.hh	/^struct AddressMonitor$/;"	s
AddressProfiler	./mem/ruby/profiler/AddressProfiler.cc	/^AddressProfiler::AddressProfiler(int num_of_sequencers, Profiler *profiler)$/;"	f	class:AddressProfiler
AddressProfiler	./mem/ruby/profiler/AddressProfiler.hh	/^class AddressProfiler$/;"	c
AddressSizeLL	./arch/arm/faults.hh	/^        AddressSizeLL,  \/\/ AArch64 only$/;"	e	enum:ArmISA::ArmFault::FaultSource
AddressSizeOverride	./arch/x86/types.hh	/^        AddressSizeOverride,$/;"	e	enum:X86ISA::Prefixes
Aggressive	./cpu/o3/commit.hh	/^        Aggressive,$/;"	e	enum:DefaultCommit::CommitPolicy
AlignByte	./arch/arm/tlb.hh	/^        AlignByte = 0x0,$/;"	e	enum:ArmISA::TLB::ArmFlags
AlignDoubleWord	./arch/arm/tlb.hh	/^        AlignDoubleWord = 0x3,$/;"	e	enum:ArmISA::TLB::ArmFlags
AlignHalfWord	./arch/arm/tlb.hh	/^        AlignHalfWord = 0x1,$/;"	e	enum:ArmISA::TLB::ArmFlags
AlignOctWord	./arch/arm/tlb.hh	/^        AlignOctWord = 0x5,$/;"	e	enum:ArmISA::TLB::ArmFlags
AlignQuadWord	./arch/arm/tlb.hh	/^        AlignQuadWord = 0x4,$/;"	e	enum:ArmISA::TLB::ArmFlags
AlignWord	./arch/arm/tlb.hh	/^        AlignWord = 0x2,$/;"	e	enum:ArmISA::TLB::ArmFlags
AlignmentCheck	./arch/x86/faults.hh	/^        AlignmentCheck() :$/;"	f	class:X86ISA::AlignmentCheck
AlignmentCheck	./arch/x86/faults.hh	/^    class AlignmentCheck : public X86Fault$/;"	c	namespace:X86ISA
AlignmentFault	./arch/alpha/faults.hh	/^class AlignmentFault : public AlphaFault$/;"	c	namespace:AlphaISA
AlignmentFault	./arch/arm/faults.hh	/^        AlignmentFault = 0,$/;"	e	enum:ArmISA::ArmFault::FaultSource
AlignmentFault	./arch/power/faults.hh	/^    AlignmentFault()$/;"	f	class:PowerISA::AlignmentFault
AlignmentFault	./arch/power/faults.hh	/^class AlignmentFault : public PowerFault$/;"	c	namespace:PowerISA
AlignmentMask	./arch/arm/tlb.hh	/^        AlignmentMask = 0x7,$/;"	e	enum:ArmISA::TLB::ArmFlags
All	./base/debug.cc	/^Flag *const All = &theAllFlags;$/;"	m	namespace:Debug	file:
AllFlags	./base/debug.cc	/^    AllFlags()$/;"	f	struct:Debug::AllFlags
AllFlags	./base/debug.cc	/^struct AllFlags : public Flag$/;"	s	namespace:Debug	file:
AllFlags	./python/m5/debug.py	/^class AllFlags(DictMixin):$/;"	c
AllKeysToMake	./dev/x86/i8042.hh	/^        AllKeysToMake = 0xF9,$/;"	e	enum:X86ISA::PS2Keyboard::Command
AllKeysToMakeRelease	./dev/x86/i8042.hh	/^        AllKeysToMakeRelease = 0xF8,$/;"	e	enum:X86ISA::PS2Keyboard::Command
AllKeysToTypematic	./dev/x86/i8042.hh	/^        AllKeysToTypematic = 0xF7,$/;"	e	enum:X86ISA::PS2Keyboard::Command
AllKeysToTypematicMakeRelease	./dev/x86/i8042.hh	/^        AllKeysToTypematicMakeRelease = 0xFA,$/;"	e	enum:X86ISA::PS2Keyboard::Command
AllMemory	./python/m5/params.py	/^AllMemory = AddrRange(0, MaxAddr)$/;"	v
AllProxy	./python/m5/proxy.py	/^class AllProxy(BaseProxy):$/;"	c
AllocType	./mem/se_translating_port_proxy.hh	/^    enum AllocType {$/;"	g	class:SETranslatingPortProxy
AllowUnaligned	./arch/arm/tlb.hh	/^        AllowUnaligned = 0x8,$/;"	e	enum:ArmISA::TLB::ArmFlags
Alpha	./base/loader/object_file.hh	/^        Alpha,$/;"	e	enum:ObjectFile::Arch
AlphaAccess	./dev/alpha/access.h	/^struct AlphaAccess$/;"	s
AlphaBackdoor	./dev/alpha/AlphaBackdoor.py	/^class AlphaBackdoor(BasicPioDevice):$/;"	c
AlphaBackdoor	./dev/alpha/backdoor.cc	/^AlphaBackdoor::AlphaBackdoor(const Params *p)$/;"	f	class:AlphaBackdoor
AlphaBackdoor	./dev/alpha/backdoor.hh	/^class AlphaBackdoor : public BasicPioDevice$/;"	c
AlphaDTB	./arch/alpha/AlphaTLB.py	/^class AlphaDTB(AlphaTLB):$/;"	c
AlphaFault	./arch/alpha/faults.hh	/^class AlphaFault : public FaultBase$/;"	c	namespace:AlphaISA
AlphaGdbRegCache	./arch/alpha/remote_gdb.hh	/^    class AlphaGdbRegCache : public BaseGdbRegCache$/;"	c	class:AlphaISA::RemoteGDB
AlphaISA	./arch/alpha/AlphaISA.py	/^class AlphaISA(SimObject):$/;"	c
AlphaISA	./arch/alpha/decoder.cc	/^namespace AlphaISA$/;"	n	file:
AlphaISA	./arch/alpha/decoder.hh	/^namespace AlphaISA$/;"	n
AlphaISA	./arch/alpha/ev5.cc	/^namespace AlphaISA {$/;"	n	file:
AlphaISA	./arch/alpha/ev5.hh	/^namespace AlphaISA {$/;"	n
AlphaISA	./arch/alpha/faults.cc	/^namespace AlphaISA {$/;"	n	file:
AlphaISA	./arch/alpha/faults.hh	/^namespace AlphaISA {$/;"	n
AlphaISA	./arch/alpha/interrupts.hh	/^namespace AlphaISA {$/;"	n
AlphaISA	./arch/alpha/ipr.cc	/^namespace AlphaISA {$/;"	n	file:
AlphaISA	./arch/alpha/ipr.hh	/^namespace AlphaISA {$/;"	n
AlphaISA	./arch/alpha/isa.cc	/^namespace AlphaISA$/;"	n	file:
AlphaISA	./arch/alpha/isa.hh	/^namespace AlphaISA$/;"	n
AlphaISA	./arch/alpha/isa_traits.hh	/^namespace AlphaISA {$/;"	n
AlphaISA	./arch/alpha/kernel_stats.cc	/^namespace AlphaISA {$/;"	n	file:
AlphaISA	./arch/alpha/kernel_stats.hh	/^namespace AlphaISA {$/;"	n
AlphaISA	./arch/alpha/linux/process.hh	/^namespace AlphaISA  {$/;"	n
AlphaISA	./arch/alpha/locked_mem.hh	/^namespace AlphaISA {$/;"	n
AlphaISA	./arch/alpha/microcode_rom.hh	/^namespace AlphaISA$/;"	n
AlphaISA	./arch/alpha/mmapped_ipr.hh	/^namespace AlphaISA {$/;"	n
AlphaISA	./arch/alpha/mt.hh	/^namespace AlphaISA$/;"	n
AlphaISA	./arch/alpha/pagetable.cc	/^namespace AlphaISA {$/;"	n	file:
AlphaISA	./arch/alpha/pagetable.hh	/^namespace AlphaISA {$/;"	n
AlphaISA	./arch/alpha/pseudo_inst.hh	/^namespace AlphaISA {$/;"	n
AlphaISA	./arch/alpha/registers.hh	/^namespace AlphaISA {$/;"	n
AlphaISA	./arch/alpha/regredir.cc	/^namespace AlphaISA {$/;"	n	file:
AlphaISA	./arch/alpha/regredir.hh	/^namespace AlphaISA {$/;"	n
AlphaISA	./arch/alpha/remote_gdb.hh	/^namespace AlphaISA {$/;"	n
AlphaISA	./arch/alpha/stacktrace.cc	/^namespace AlphaISA {$/;"	n	file:
AlphaISA	./arch/alpha/stacktrace.hh	/^namespace AlphaISA {$/;"	n
AlphaISA	./arch/alpha/tlb.cc	/^namespace AlphaISA {$/;"	n	file:
AlphaISA	./arch/alpha/tlb.hh	/^namespace AlphaISA {$/;"	n
AlphaISA	./arch/alpha/tru64/process.hh	/^namespace AlphaISA {$/;"	n
AlphaISA	./arch/alpha/types.hh	/^namespace AlphaISA {$/;"	n
AlphaISA	./arch/alpha/utility.cc	/^namespace AlphaISA {$/;"	n	file:
AlphaISA	./arch/alpha/utility.hh	/^namespace AlphaISA {$/;"	n
AlphaISA	./arch/alpha/vtophys.cc	/^namespace AlphaISA {$/;"	n	file:
AlphaISA	./arch/alpha/vtophys.hh	/^namespace AlphaISA {$/;"	n
AlphaITB	./arch/alpha/AlphaTLB.py	/^class AlphaITB(AlphaTLB):$/;"	c
AlphaInterrupts	./arch/alpha/AlphaInterrupts.py	/^class AlphaInterrupts(SimObject):$/;"	c
AlphaLinux	./arch/alpha/linux/linux.hh	/^class AlphaLinux : public Linux$/;"	c
AlphaLinuxProcess	./arch/alpha/linux/process.cc	/^AlphaLinuxProcess::AlphaLinuxProcess(LiveProcessParams * params,$/;"	f	class:AlphaLinuxProcess
AlphaLinuxProcess	./arch/alpha/linux/process.hh	/^class AlphaLinuxProcess : public AlphaLiveProcess$/;"	c	namespace:AlphaISA
AlphaLiveProcess	./arch/alpha/process.cc	/^AlphaLiveProcess::AlphaLiveProcess(LiveProcessParams *params,$/;"	f	class:AlphaLiveProcess
AlphaLiveProcess	./arch/alpha/process.hh	/^class AlphaLiveProcess : public LiveProcess$/;"	c
AlphaRequestFlags	./arch/alpha/types.hh	/^struct AlphaRequestFlags$/;"	s	namespace:AlphaISA
AlphaSystem	./arch/alpha/AlphaSystem.py	/^class AlphaSystem(System):$/;"	c
AlphaSystem	./arch/alpha/system.cc	/^AlphaSystem::AlphaSystem(Params *p)$/;"	f	class:AlphaSystem
AlphaSystem	./arch/alpha/system.hh	/^class AlphaSystem : public System$/;"	c
AlphaTLB	./arch/alpha/AlphaTLB.py	/^class AlphaTLB(BaseTLB):$/;"	c
AlphaTru64	./arch/alpha/tru64/tru64.hh	/^class AlphaTru64 : public Tru64$/;"	c
AlphaTru64Process	./arch/alpha/tru64/process.cc	/^AlphaTru64Process::AlphaTru64Process(LiveProcessParams *params,$/;"	f	class:AlphaTru64Process
AlphaTru64Process	./arch/alpha/tru64/process.hh	/^class AlphaTru64Process : public AlphaLiveProcess$/;"	c	namespace:AlphaISA
AlreadyGenerated	./arch/isa_parser.py	/^    AlreadyGenerated = {}$/;"	v	class:ISAParser
AlternateScanCodes	./dev/x86/i8042.hh	/^        AlternateScanCodes = 0xF0,$/;"	e	enum:X86ISA::PS2Keyboard::Command
Always	./mem/se_translating_port_proxy.hh	/^        Always,$/;"	e	enum:SETranslatingPortProxy::AllocType
AmbaDevice	./dev/arm/amba_device.hh	/^class AmbaDevice$/;"	c
AmbaDmaDevice	./dev/arm/RealView.py	/^class AmbaDmaDevice(DmaDevice):$/;"	c
AmbaDmaDevice	./dev/arm/amba_device.cc	/^AmbaDmaDevice::AmbaDmaDevice(const Params *p, Addr pio_size)$/;"	f	class:AmbaDmaDevice
AmbaDmaDevice	./dev/arm/amba_device.hh	/^class AmbaDmaDevice : public DmaDevice, public AmbaDevice$/;"	c
AmbaFake	./dev/arm/RealView.py	/^class AmbaFake(AmbaPioDevice):$/;"	c
AmbaFake	./dev/arm/amba_fake.cc	/^AmbaFake::AmbaFake(const Params *p)$/;"	f	class:AmbaFake
AmbaFake	./dev/arm/amba_fake.hh	/^class AmbaFake : public AmbaPioDevice$/;"	c
AmbaIntDevice	./dev/arm/RealView.py	/^class AmbaIntDevice(AmbaPioDevice):$/;"	c
AmbaIntDevice	./dev/arm/amba_device.cc	/^AmbaIntDevice::AmbaIntDevice(const Params *p, Addr pio_size)$/;"	f	class:AmbaIntDevice
AmbaIntDevice	./dev/arm/amba_device.hh	/^class AmbaIntDevice : public AmbaPioDevice$/;"	c
AmbaPioDevice	./dev/arm/RealView.py	/^class AmbaPioDevice(BasicPioDevice):$/;"	c
AmbaPioDevice	./dev/arm/amba_device.cc	/^AmbaPioDevice::AmbaPioDevice(const Params *p, Addr pio_size)$/;"	f	class:AmbaPioDevice
AmbaPioDevice	./dev/arm/amba_device.hh	/^class AmbaPioDevice : public BasicPioDevice, public AmbaDevice$/;"	c
AmbaVendor	./dev/arm/amba_device.cc	/^const uint64_t AmbaVendor = ULL(0xb105f00d00000000);$/;"	v
AnnDataPtr	./base/cp_annotate.hh	/^    typedef std::shared_ptr<AnnotateData> AnnDataPtr;$/;"	t	class:CPA
AnnotateData	./base/cp_annotate.hh	/^    struct AnnotateData : public Serializable {$/;"	s	class:CPA
AnnotateDumpCallback	./base/cp_annotate.cc	/^    AnnotateDumpCallback(CPA *_cpa)$/;"	f	class:AnnotateDumpCallback
AnnotateDumpCallback	./base/cp_annotate.cc	/^class AnnotateDumpCallback : public Callback$/;"	c	file:
AnnotateHeader	./base/cp_annotate.hh	/^    struct AnnotateHeader {$/;"	s	class:CPA
AnnotateList	./base/cp_annotate.hh	/^    typedef std::list<AnnDataPtr> AnnotateList;$/;"	t	class:CPA
AnnotationIDs	./arch/arm/faults.hh	/^    enum AnnotationIDs$/;"	g	class:ArmISA::ArmFault
AnyProxy	./python/m5/proxy.py	/^class AnyProxy(BaseProxy):$/;"	c
AnyReg	./arch/alpha/registers.hh	/^union AnyReg$/;"	u	namespace:AlphaISA
AnyReg	./arch/arm/registers.hh	/^} AnyReg;$/;"	t	namespace:ArmISA	typeref:union:ArmISA::__anon66
AnyReg	./arch/mips/registers.hh	/^} AnyReg;$/;"	t	namespace:MipsISA	typeref:union:MipsISA::__anon82
AnyReg	./arch/power/registers.hh	/^} AnyReg;$/;"	t	namespace:PowerISA	typeref:union:PowerISA::__anon52
AnyReg	./arch/sparc/registers.hh	/^} AnyReg;$/;"	t	namespace:SparcISA	typeref:union:SparcISA::__anon41
AnyReg	./arch/x86/registers.hh	/^} AnyReg;$/;"	t	namespace:X86ISA	typeref:union:X86ISA::__anon56
AoutObject	./base/loader/aout_object.cc	/^AoutObject::AoutObject(const string &_filename,$/;"	f	class:AoutObject
AoutObject	./base/loader/aout_object.hh	/^class AoutObject : public ObjectFile$/;"	c
ApicList	./dev/x86/intdev.hh	/^typedef std::list<int> ApicList;$/;"	t	namespace:X86ISA
ApicRegIndex	./arch/x86/regs/apic.hh	/^    enum ApicRegIndex$/;"	g	namespace:X86ISA
ApicTimerEvent	./arch/x86/interrupts.hh	/^        ApicTimerEvent(Interrupts *_localApic) :$/;"	f	class:X86ISA::Interrupts::ApicTimerEvent
ApicTimerEvent	./arch/x86/interrupts.hh	/^    class ApicTimerEvent : public Event$/;"	c	class:X86ISA::Interrupts
Arch	./base/loader/object_file.hh	/^    enum Arch {$/;"	g	class:ObjectFile
ArchFlagsType	./arch/alpha/types.hh	/^    typedef uint8_t ArchFlagsType;$/;"	t	struct:AlphaISA::AlphaRequestFlags
ArchFlagsType	./mem/request.hh	/^    typedef uint8_t ArchFlagsType;$/;"	t	class:Request
ArchPageTable	./arch/alpha/process.hh	/^typedef NoArchPageTable ArchPageTable;$/;"	t
ArchPageTable	./arch/arm/process.hh	/^typedef NoArchPageTable ArchPageTable;$/;"	t
ArchPageTable	./arch/mips/process.hh	/^typedef NoArchPageTable ArchPageTable;$/;"	t
ArchPageTable	./arch/power/process.hh	/^typedef NoArchPageTable ArchPageTable;$/;"	t
ArchPageTable	./arch/sparc/process.hh	/^typedef NoArchPageTable ArchPageTable;$/;"	t
ArchPageTable	./arch/x86/process.hh	/^    typedef MultiLevelPageTable<PageTableOps> ArchPageTable;$/;"	t	namespace:X86ISA
ArchTimer	./dev/arm/generic_timer.cc	/^ArchTimer::ArchTimer(const std::string &name,$/;"	f	class:ArchTimer
ArchTimer	./dev/arm/generic_timer.hh	/^class ArchTimer : public Serializable$/;"	c
ArgumentReg	./arch/x86/process.cc	/^static const int ArgumentReg[] = {$/;"	v	file:
ArgumentReg0	./arch/arm/registers.hh	/^const int ArgumentReg0 = 0;$/;"	m	namespace:ArmISA
ArgumentReg0	./arch/power/registers.hh	/^const int ArgumentReg0 = 3;$/;"	m	namespace:PowerISA
ArgumentReg1	./arch/arm/registers.hh	/^const int ArgumentReg1 = 1;$/;"	m	namespace:ArmISA
ArgumentReg1	./arch/power/registers.hh	/^const int ArgumentReg1 = 4;$/;"	m	namespace:PowerISA
ArgumentReg2	./arch/arm/registers.hh	/^const int ArgumentReg2 = 2;$/;"	m	namespace:ArmISA
ArgumentReg2	./arch/power/registers.hh	/^const int ArgumentReg2 = 5;$/;"	m	namespace:PowerISA
ArgumentReg3	./arch/arm/registers.hh	/^const int ArgumentReg3 = 3;$/;"	m	namespace:ArmISA
ArgumentReg3	./arch/power/registers.hh	/^const int ArgumentReg3 = 6;$/;"	m	namespace:PowerISA
ArgumentReg32	./arch/x86/process.cc	/^static const int ArgumentReg32[] = {$/;"	v	file:
ArgumentReg4	./arch/power/registers.hh	/^const int ArgumentReg4 = 7;$/;"	m	namespace:PowerISA
Arguments	./sim/arguments.hh	/^    Arguments(ThreadContext *ctx, int n = 0)$/;"	f	class:Arguments
Arguments	./sim/arguments.hh	/^    Arguments(const Arguments &args)$/;"	f	class:Arguments
Arguments	./sim/arguments.hh	/^class Arguments$/;"	c
ArithmeticFault	./arch/alpha/faults.hh	/^class ArithmeticFault : public AlphaFault$/;"	c	namespace:AlphaISA
Arm	./base/loader/object_file.hh	/^        Arm,$/;"	e	enum:ObjectFile::Arch
Arm64	./base/loader/object_file.hh	/^        Arm64,$/;"	e	enum:ObjectFile::Arch
ArmExtendType	./arch/arm/types.hh	/^    enum ArmExtendType {$/;"	g	namespace:ArmISA
ArmFault	./arch/arm/faults.hh	/^    ArmFault(ExtMachInst _machInst = 0, uint32_t _iss = 0) :$/;"	f	class:ArmISA::ArmFault
ArmFault	./arch/arm/faults.hh	/^class ArmFault : public FaultBase$/;"	c	namespace:ArmISA
ArmFaultVals	./arch/arm/faults.hh	/^    ArmFaultVals<T>(ExtMachInst _machInst = 0, uint32_t _iss = 0) :$/;"	f	class:ArmISA::ArmFaultVals
ArmFaultVals	./arch/arm/faults.hh	/^class ArmFaultVals : public ArmFault$/;"	c	namespace:ArmISA
ArmFlags	./arch/arm/tlb.hh	/^    enum ArmFlags {$/;"	g	class:ArmISA::TLB
ArmFreebsd32	./arch/arm/freebsd/freebsd.hh	/^class ArmFreebsd32 : public FreeBSD$/;"	c
ArmFreebsd64	./arch/arm/freebsd/freebsd.hh	/^class ArmFreebsd64 : public FreeBSD$/;"	c
ArmFreebsdProcess32	./arch/arm/freebsd/process.cc	/^ArmFreebsdProcess32::ArmFreebsdProcess32(LiveProcessParams * params,$/;"	f	class:ArmFreebsdProcess32
ArmFreebsdProcess32	./arch/arm/freebsd/process.hh	/^class ArmFreebsdProcess32 : public ArmLiveProcess32, public ArmFreebsdProcessBits$/;"	c
ArmFreebsdProcess64	./arch/arm/freebsd/process.cc	/^ArmFreebsdProcess64::ArmFreebsdProcess64(LiveProcessParams * params,$/;"	f	class:ArmFreebsdProcess64
ArmFreebsdProcess64	./arch/arm/freebsd/process.hh	/^class ArmFreebsdProcess64 : public ArmLiveProcess64, public ArmFreebsdProcessBits$/;"	c
ArmFreebsdProcessBits	./arch/arm/freebsd/process.hh	/^class ArmFreebsdProcessBits$/;"	c
ArmISA	./arch/arm/ArmISA.py	/^class ArmISA(SimObject):$/;"	c
ArmISA	./arch/arm/ccregs.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/decoder.cc	/^namespace ArmISA$/;"	n	file:
ArmISA	./arch/arm/decoder.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/faults.cc	/^namespace ArmISA$/;"	n	file:
ArmISA	./arch/arm/faults.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/insts/branch.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/insts/branch64.cc	/^namespace ArmISA$/;"	n	file:
ArmISA	./arch/arm/insts/branch64.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/insts/data64.cc	/^namespace ArmISA$/;"	n	file:
ArmISA	./arch/arm/insts/data64.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/insts/fplib.cc	/^namespace ArmISA$/;"	n	file:
ArmISA	./arch/arm/insts/fplib.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/insts/macromem.cc	/^namespace ArmISA$/;"	n	file:
ArmISA	./arch/arm/insts/macromem.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/insts/mem.cc	/^namespace ArmISA$/;"	n	file:
ArmISA	./arch/arm/insts/mem.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/insts/mem64.cc	/^namespace ArmISA$/;"	n	file:
ArmISA	./arch/arm/insts/mem64.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/insts/mult.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/insts/neon64_mem.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/insts/pred_inst.cc	/^namespace ArmISA$/;"	n	file:
ArmISA	./arch/arm/insts/pred_inst.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/insts/static_inst.cc	/^namespace ArmISA$/;"	n	file:
ArmISA	./arch/arm/insts/static_inst.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/insts/vfp.cc	/^namespace ArmISA$/;"	n	file:
ArmISA	./arch/arm/insts/vfp.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/interrupts.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/intregs.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/isa.cc	/^namespace ArmISA$/;"	n	file:
ArmISA	./arch/arm/isa.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/isa_device.cc	/^namespace ArmISA$/;"	n	file:
ArmISA	./arch/arm/isa_device.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/isa_traits.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/kernel_stats.hh	/^namespace ArmISA {$/;"	n
ArmISA	./arch/arm/locked_mem.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/microcode_rom.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/miscregs.cc	/^namespace ArmISA$/;"	n	file:
ArmISA	./arch/arm/miscregs.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/mmapped_ipr.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/pagetable.hh	/^namespace ArmISA {$/;"	n
ArmISA	./arch/arm/pmu.cc	/^namespace ArmISA {$/;"	n	file:
ArmISA	./arch/arm/pmu.hh	/^namespace ArmISA {$/;"	n
ArmISA	./arch/arm/pseudo_inst.hh	/^namespace ArmISA {$/;"	n
ArmISA	./arch/arm/registers.hh	/^namespace ArmISA {$/;"	n
ArmISA	./arch/arm/remote_gdb.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/stacktrace.cc	/^namespace ArmISA$/;"	n	file:
ArmISA	./arch/arm/stacktrace.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/stage2_lookup.hh	/^namespace ArmISA {$/;"	n
ArmISA	./arch/arm/stage2_mmu.hh	/^namespace ArmISA {$/;"	n
ArmISA	./arch/arm/table_walker.hh	/^namespace ArmISA {$/;"	n
ArmISA	./arch/arm/tlb.hh	/^namespace ArmISA {$/;"	n
ArmISA	./arch/arm/types.hh	/^namespace ArmISA$/;"	n
ArmISA	./arch/arm/utility.cc	/^namespace ArmISA {$/;"	n	file:
ArmISA	./arch/arm/utility.hh	/^namespace ArmISA {$/;"	n
ArmISA	./arch/arm/vtophys.hh	/^namespace ArmISA {$/;"	n
ArmInterrupts	./arch/arm/ArmInterrupts.py	/^class ArmInterrupts(SimObject):$/;"	c
ArmKvmCPU	./arch/arm/kvm/ArmKvmCPU.py	/^class ArmKvmCPU(BaseKvmCPU):$/;"	c
ArmKvmCPU	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::ArmKvmCPU(ArmKvmCPUParams *params)$/;"	f	class:ArmKvmCPU
ArmKvmCPU	./arch/arm/kvm/arm_cpu.hh	/^class ArmKvmCPU : public BaseKvmCPU$/;"	c
ArmLinux32	./arch/arm/linux/linux.hh	/^class ArmLinux32 : public Linux$/;"	c
ArmLinux64	./arch/arm/linux/linux.hh	/^class ArmLinux64 : public Linux$/;"	c
ArmLinuxProcess32	./arch/arm/linux/process.cc	/^ArmLinuxProcess32::ArmLinuxProcess32(LiveProcessParams * params,$/;"	f	class:ArmLinuxProcess32
ArmLinuxProcess32	./arch/arm/linux/process.hh	/^class ArmLinuxProcess32 : public ArmLiveProcess32, public ArmLinuxProcessBits$/;"	c
ArmLinuxProcess64	./arch/arm/linux/process.cc	/^ArmLinuxProcess64::ArmLinuxProcess64(LiveProcessParams * params,$/;"	f	class:ArmLinuxProcess64
ArmLinuxProcess64	./arch/arm/linux/process.hh	/^class ArmLinuxProcess64 : public ArmLiveProcess64, public ArmLinuxProcessBits$/;"	c
ArmLinuxProcessBits	./arch/arm/linux/process.hh	/^class ArmLinuxProcessBits$/;"	c
ArmLiveProcess	./arch/arm/process.cc	/^ArmLiveProcess::ArmLiveProcess(LiveProcessParams *params, ObjectFile *objFile,$/;"	f	class:ArmLiveProcess
ArmLiveProcess	./arch/arm/process.hh	/^class ArmLiveProcess : public LiveProcess$/;"	c
ArmLiveProcess32	./arch/arm/process.cc	/^ArmLiveProcess32::ArmLiveProcess32(LiveProcessParams *params,$/;"	f	class:ArmLiveProcess32
ArmLiveProcess32	./arch/arm/process.hh	/^class ArmLiveProcess32 : public ArmLiveProcess$/;"	c
ArmLiveProcess64	./arch/arm/process.cc	/^ArmLiveProcess64::ArmLiveProcess64(LiveProcessParams *params,$/;"	f	class:ArmLiveProcess64
ArmLiveProcess64	./arch/arm/process.hh	/^class ArmLiveProcess64 : public ArmLiveProcess$/;"	c
ArmMachineType	./arch/arm/ArmSystem.py	/^class ArmMachineType(Enum):$/;"	c
ArmNativeTrace	./arch/arm/ArmNativeTrace.py	/^class ArmNativeTrace(NativeTrace):$/;"	c
ArmNativeTrace	./arch/arm/nativetrace.hh	/^    ArmNativeTrace(const Params *p) :$/;"	f	class:Trace::ArmNativeTrace
ArmNativeTrace	./arch/arm/nativetrace.hh	/^class ArmNativeTrace : public NativeTrace$/;"	c	namespace:Trace
ArmPMU	./arch/arm/ArmPMU.py	/^class ArmPMU(SimObject):$/;"	c
ArmSev	./arch/arm/faults.hh	/^    ArmSev () {}$/;"	f	class:ArmISA::ArmSev
ArmSev	./arch/arm/faults.hh	/^class ArmSev : public ArmFaultVals<ArmSev>$/;"	c	namespace:ArmISA
ArmShiftType	./arch/arm/types.hh	/^    enum ArmShiftType {$/;"	g	namespace:ArmISA
ArmStage2DMMU	./arch/arm/ArmTLB.py	/^class ArmStage2DMMU(ArmStage2MMU):$/;"	c
ArmStage2IMMU	./arch/arm/ArmTLB.py	/^class ArmStage2IMMU(ArmStage2MMU):$/;"	c
ArmStage2MMU	./arch/arm/ArmTLB.py	/^class ArmStage2MMU(SimObject):$/;"	c
ArmStage2TLB	./arch/arm/ArmTLB.py	/^class ArmStage2TLB(ArmTLB):$/;"	c
ArmStage2TableWalker	./arch/arm/ArmTLB.py	/^class ArmStage2TableWalker(ArmTableWalker):$/;"	c
ArmStaticInst	./arch/arm/insts/static_inst.hh	/^    ArmStaticInst(const char *mnem, ExtMachInst _machInst,$/;"	f	class:ArmISA::ArmStaticInst
ArmStaticInst	./arch/arm/insts/static_inst.hh	/^class ArmStaticInst : public StaticInst$/;"	c	namespace:ArmISA
ArmSystem	./arch/arm/ArmSystem.py	/^class ArmSystem(System):$/;"	c
ArmSystem	./arch/arm/system.cc	/^ArmSystem::ArmSystem(Params *p)$/;"	f	class:ArmSystem
ArmSystem	./arch/arm/system.hh	/^class ArmSystem : public System$/;"	c
ArmTLB	./arch/arm/ArmTLB.py	/^class ArmTLB(SimObject):$/;"	c
ArmTableWalker	./arch/arm/ArmTLB.py	/^class ArmTableWalker(MemObject):$/;"	c
ArmTranslationType	./arch/arm/tlb.hh	/^    enum ArmTranslationType {$/;"	g	class:ArmISA::TLB
ArmV8KvmCPU	./arch/arm/kvm/ArmV8KvmCPU.py	/^class ArmV8KvmCPU(BaseArmKvmCPU):$/;"	c
ArmV8KvmCPU	./arch/arm/kvm/armv8_cpu.cc	/^ArmV8KvmCPU::ArmV8KvmCPU(ArmV8KvmCPUParams *params)$/;"	f	class:ArmV8KvmCPU
ArmV8KvmCPU	./arch/arm/kvm/armv8_cpu.hh	/^class ArmV8KvmCPU : public BaseArmKvmCPU$/;"	c
AsnMask	./arch/alpha/ev5.hh	/^const uint64_t AsnMask = ULL(0xff);$/;"	m	namespace:AlphaISA
AssemblerReg	./arch/mips/registers.hh	/^const int AssemblerReg = 1;$/;"	m	namespace:MipsISA
AssignStatementAST	./mem/slicc/ast/AssignStatementAST.py	/^class AssignStatementAST(StatementAST):$/;"	c
AsynchPtyErrOnMemoryAccess	./arch/arm/faults.hh	/^        AsynchPtyErrOnMemoryAccess,$/;"	e	enum:ArmISA::ArmFault::FaultSource
AsynchronousExternalAbort	./arch/arm/faults.hh	/^        AsynchronousExternalAbort,$/;"	e	enum:ArmISA::ArmFault::FaultSource
AtCommit	./cpu/base_dyn_inst.hh	/^        AtCommit,                \/\/\/ Instruction has reached commit$/;"	e	enum:BaseDynInst::Status
AtagCmdline	./arch/arm/linux/atag.hh	/^    AtagCmdline()$/;"	f	class:AtagCmdline
AtagCmdline	./arch/arm/linux/atag.hh	/^class AtagCmdline : public AtagHeader$/;"	c
AtagCore	./arch/arm/linux/atag.hh	/^    AtagCore()$/;"	f	class:AtagCore
AtagCore	./arch/arm/linux/atag.hh	/^class AtagCore : public AtagHeader$/;"	c
AtagHeader	./arch/arm/linux/atag.hh	/^    AtagHeader(uint32_t s)$/;"	f	class:AtagHeader
AtagHeader	./arch/arm/linux/atag.hh	/^class AtagHeader$/;"	c
AtagMem	./arch/arm/linux/atag.hh	/^    AtagMem()$/;"	f	class:AtagMem
AtagMem	./arch/arm/linux/atag.hh	/^class AtagMem : public AtagHeader$/;"	c
AtagNone	./arch/arm/linux/atag.hh	/^    AtagNone()$/;"	f	class:AtagNone
AtagNone	./arch/arm/linux/atag.hh	/^class AtagNone : public AtagHeader$/;"	c
AtagRev	./arch/arm/linux/atag.hh	/^    AtagRev()$/;"	f	class:AtagRev
AtagRev	./arch/arm/linux/atag.hh	/^class AtagRev : public AtagHeader$/;"	c
AtagSerial	./arch/arm/linux/atag.hh	/^    AtagSerial()$/;"	f	class:AtagSerial
AtagSerial	./arch/arm/linux/atag.hh	/^class AtagSerial : public AtagHeader$/;"	c
AtomicCPUDPort	./cpu/simple/atomic.hh	/^        AtomicCPUDPort(const std::string &_name, BaseSimpleCPU* _cpu)$/;"	f	class:AtomicSimpleCPU::AtomicCPUDPort
AtomicCPUDPort	./cpu/simple/atomic.hh	/^    class AtomicCPUDPort : public AtomicCPUPort$/;"	c	class:AtomicSimpleCPU
AtomicCPUPort	./cpu/simple/atomic.hh	/^        AtomicCPUPort(const std::string &_name, BaseSimpleCPU* _cpu)$/;"	f	class:AtomicSimpleCPU::AtomicCPUPort
AtomicCPUPort	./cpu/simple/atomic.hh	/^    class AtomicCPUPort : public MasterPort$/;"	c	class:AtomicSimpleCPU
AtomicSimpleCPU	./cpu/simple/AtomicSimpleCPU.py	/^class AtomicSimpleCPU(BaseSimpleCPU):$/;"	c
AtomicSimpleCPU	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::AtomicSimpleCPU(AtomicSimpleCPUParams *p)$/;"	f	class:AtomicSimpleCPU
AtomicSimpleCPU	./cpu/simple/atomic.hh	/^class AtomicSimpleCPU : public BaseSimpleCPU$/;"	c
AtomicToIo	./arch/sparc/tlb.hh	/^        AtomicToIo = 0x4,$/;"	e	enum:SparcISA::TLB::FaultTypes
AttrProxy	./python/m5/proxy.py	/^class AttrProxy(BaseProxy):$/;"	c
Attribute	./mem/packet.hh	/^    enum Attribute$/;"	g	class:MemCmd
AuthInvalid	./base/vnc/vncserver.hh	/^    const static uint32_t AuthInvalid = 0;$/;"	m	class:VncServer
AuthNone	./base/vnc/vncserver.hh	/^    const static uint32_t AuthNone    = 1;$/;"	m	class:VncServer
AutoDelete	./sim/eventq.hh	/^    static const FlagsType AutoDelete    = 0x0004; \/\/ delete after dispatch$/;"	m	class:EventBase
AuxVector	./sim/process.cc	/^AuxVector<IntType>::AuxVector(IntType type, IntType val)$/;"	f	class:AuxVector
AuxVector	./sim/process.hh	/^    AuxVector()$/;"	f	struct:AuxVector
AuxVector	./sim/process.hh	/^struct AuxVector$/;"	s
AuxiliaryVectorType	./sim/process.hh	/^    enum AuxiliaryVectorType {$/;"	g	class:LiveProcess
Average	./base/statistics.hh	/^class Average : public ScalarBase<Average, AvgStor>$/;"	c	namespace:Stats
AverageDeviation	./base/statistics.hh	/^    AverageDeviation()$/;"	f	class:Stats::AverageDeviation
AverageDeviation	./base/statistics.hh	/^class AverageDeviation : public DistBase<AverageDeviation, AvgSampleStor>$/;"	c	namespace:Stats
AverageVector	./base/statistics.hh	/^class AverageVector : public VectorBase<AverageVector, AvgStor>$/;"	c	namespace:Stats
AvgSampleStor	./base/statistics.hh	/^    AvgSampleStor(Info *info)$/;"	f	class:Stats::AvgSampleStor
AvgSampleStor	./base/statistics.hh	/^class AvgSampleStor$/;"	c	namespace:Stats
AvgStor	./base/statistics.hh	/^    AvgStor(Info *info)$/;"	f	class:Stats::AvgStor
AvgStor	./base/statistics.hh	/^class AvgStor$/;"	c	namespace:Stats
BAR0	./dev/net/Ethernet.py	/^    BAR0 = 0x00000000$/;"	v	class:IGbE
BAR0	./dev/net/Ethernet.py	/^    BAR0 = 0x00000000$/;"	v	class:Sinic
BAR0	./dev/net/Ethernet.py	/^    BAR0 = 0x00000001$/;"	v	class:NSGigE
BAR0	./dev/pci/PciDevice.py	/^    BAR0 = Param.UInt32(0x00, "Base Address Register 0")$/;"	v	class:PciDevice
BAR0	./dev/storage/Ide.py	/^    BAR0 = 0x00000001$/;"	v	class:IdeController
BAR0	./dev/virtio/VirtIO.py	/^    BAR0 = 0x00000000 # Anywhere in 32-bit space$/;"	v	class:PciVirtIO
BAR0LegacyIO	./dev/pci/PciDevice.py	/^    BAR0LegacyIO = Param.Bool(False, "Whether BAR0 is hardwired legacy IO")$/;"	v	class:PciDevice
BAR0Size	./dev/net/Ethernet.py	/^    BAR0Size = '128kB'$/;"	v	class:IGbE
BAR0Size	./dev/net/Ethernet.py	/^    BAR0Size = '256B'$/;"	v	class:NSGigE
BAR0Size	./dev/net/Ethernet.py	/^    BAR0Size = '64kB'$/;"	v	class:Sinic
BAR0Size	./dev/pci/CopyEngine.py	/^    BAR0Size = '1kB'$/;"	v	class:CopyEngine
BAR0Size	./dev/pci/PciDevice.py	/^    BAR0Size = Param.MemorySize32('0B', "Base Address Register 0 Size")$/;"	v	class:PciDevice
BAR0Size	./dev/storage/Ide.py	/^    BAR0Size = '8B'$/;"	v	class:IdeController
BAR0Size	./dev/virtio/VirtIO.py	/^    BAR0Size = '0B' # Overridden by the device model$/;"	v	class:PciVirtIO
BAR0_SIZE_BASE	./dev/virtio/pci.hh	/^    static const Addr BAR0_SIZE_BASE = OFF_VIO_DEVICE;$/;"	m	class:PciVirtIO
BAR1	./dev/net/Ethernet.py	/^    BAR1 = 0x00000000$/;"	v	class:IGbE
BAR1	./dev/net/Ethernet.py	/^    BAR1 = 0x00000000$/;"	v	class:NSGigE
BAR1	./dev/net/Ethernet.py	/^    BAR1 = 0x00000000$/;"	v	class:Sinic
BAR1	./dev/pci/PciDevice.py	/^    BAR1 = Param.UInt32(0x00, "Base Address Register 1")$/;"	v	class:PciDevice
BAR1	./dev/storage/Ide.py	/^    BAR1 = 0x00000001$/;"	v	class:IdeController
BAR1LegacyIO	./dev/pci/PciDevice.py	/^    BAR1LegacyIO = Param.Bool(False, "Whether BAR1 is hardwired legacy IO")$/;"	v	class:PciDevice
BAR1Size	./dev/net/Ethernet.py	/^    BAR1Size = '4kB'$/;"	v	class:NSGigE
BAR1Size	./dev/pci/PciDevice.py	/^    BAR1Size = Param.MemorySize32('0B', "Base Address Register 1 Size")$/;"	v	class:PciDevice
BAR1Size	./dev/storage/Ide.py	/^    BAR1Size = '4B'$/;"	v	class:IdeController
BAR2	./dev/net/Ethernet.py	/^    BAR2 = 0x00000000$/;"	v	class:IGbE
BAR2	./dev/net/Ethernet.py	/^    BAR2 = 0x00000000$/;"	v	class:NSGigE
BAR2	./dev/net/Ethernet.py	/^    BAR2 = 0x00000000$/;"	v	class:Sinic
BAR2	./dev/pci/PciDevice.py	/^    BAR2 = Param.UInt32(0x00, "Base Address Register 2")$/;"	v	class:PciDevice
BAR2	./dev/storage/Ide.py	/^    BAR2 = 0x00000001$/;"	v	class:IdeController
BAR2LegacyIO	./dev/pci/PciDevice.py	/^    BAR2LegacyIO = Param.Bool(False, "Whether BAR2 is hardwired legacy IO")$/;"	v	class:PciDevice
BAR2Size	./dev/pci/PciDevice.py	/^    BAR2Size = Param.MemorySize32('0B', "Base Address Register 2 Size")$/;"	v	class:PciDevice
BAR2Size	./dev/storage/Ide.py	/^    BAR2Size = '8B'$/;"	v	class:IdeController
BAR3	./dev/net/Ethernet.py	/^    BAR3 = 0x00000000$/;"	v	class:IGbE
BAR3	./dev/net/Ethernet.py	/^    BAR3 = 0x00000000$/;"	v	class:NSGigE
BAR3	./dev/net/Ethernet.py	/^    BAR3 = 0x00000000$/;"	v	class:Sinic
BAR3	./dev/pci/PciDevice.py	/^    BAR3 = Param.UInt32(0x00, "Base Address Register 3")$/;"	v	class:PciDevice
BAR3	./dev/storage/Ide.py	/^    BAR3 = 0x00000001$/;"	v	class:IdeController
BAR3LegacyIO	./dev/pci/PciDevice.py	/^    BAR3LegacyIO = Param.Bool(False, "Whether BAR3 is hardwired legacy IO")$/;"	v	class:PciDevice
BAR3Size	./dev/pci/PciDevice.py	/^    BAR3Size = Param.MemorySize32('0B', "Base Address Register 3 Size")$/;"	v	class:PciDevice
BAR3Size	./dev/storage/Ide.py	/^    BAR3Size = '4B'$/;"	v	class:IdeController
BAR4	./dev/net/Ethernet.py	/^    BAR4 = 0x00000000$/;"	v	class:IGbE
BAR4	./dev/net/Ethernet.py	/^    BAR4 = 0x00000000$/;"	v	class:NSGigE
BAR4	./dev/net/Ethernet.py	/^    BAR4 = 0x00000000$/;"	v	class:Sinic
BAR4	./dev/pci/PciDevice.py	/^    BAR4 = Param.UInt32(0x00, "Base Address Register 4")$/;"	v	class:PciDevice
BAR4	./dev/storage/Ide.py	/^    BAR4 = 0x00000001$/;"	v	class:IdeController
BAR4LegacyIO	./dev/pci/PciDevice.py	/^    BAR4LegacyIO = Param.Bool(False, "Whether BAR4 is hardwired legacy IO")$/;"	v	class:PciDevice
BAR4Size	./dev/pci/PciDevice.py	/^    BAR4Size = Param.MemorySize32('0B', "Base Address Register 4 Size")$/;"	v	class:PciDevice
BAR4Size	./dev/storage/Ide.py	/^    BAR4Size = '16B'$/;"	v	class:IdeController
BAR5	./dev/net/Ethernet.py	/^    BAR5 = 0x00000000$/;"	v	class:IGbE
BAR5	./dev/net/Ethernet.py	/^    BAR5 = 0x00000000$/;"	v	class:NSGigE
BAR5	./dev/net/Ethernet.py	/^    BAR5 = 0x00000000$/;"	v	class:Sinic
BAR5	./dev/pci/PciDevice.py	/^    BAR5 = Param.UInt32(0x00, "Base Address Register 5")$/;"	v	class:PciDevice
BAR5	./dev/storage/Ide.py	/^    BAR5 = 0x00000001$/;"	v	class:IdeController
BAR5LegacyIO	./dev/pci/PciDevice.py	/^    BAR5LegacyIO = Param.Bool(False, "Whether BAR5 is hardwired legacy IO")$/;"	v	class:PciDevice
BAR5Size	./dev/pci/PciDevice.py	/^    BAR5Size = Param.MemorySize32('0B', "Base Address Register 5 Size")$/;"	v	class:PciDevice
BARAddrs	./dev/pci/device.hh	/^    Addr BARAddrs[6];$/;"	m	class:PciDevice
BARSize	./dev/pci/device.hh	/^    uint32_t BARSize[6];$/;"	m	class:PciDevice
BAR_IO_MASK	./dev/pci/device.hh	61;"	d
BAR_IO_SPACE	./dev/pci/device.hh	64;"	d
BAR_IO_SPACE_BIT	./dev/pci/device.hh	63;"	d
BAR_MEM_MASK	./dev/pci/device.hh	62;"	d
BAR_NUMBER	./dev/pci/device.hh	65;"	d
BASELINE_TEMPERATURE_CELCIUS	./mem/ruby/network/fault_model/FaultModel.hh	46;"	d
BBInfo	./cpu/simple/probes/simpoint.hh	/^    struct BBInfo {$/;"	s	class:SimPoint
BGLoad	./dev/arm/timer_sp804.hh	/^            BGLoad     = 0x18,$/;"	e	enum:Sp804::Timer::__anon21
BIST	./dev/pci/PciDevice.py	/^    BIST = Param.UInt8(0, "Built In Self Test")$/;"	v	class:PciDevice
BMICommand	./dev/storage/ide_ctrl.cc	/^    BMICommand = 0x0,$/;"	e	enum:BMIRegOffset	file:
BMIDescTablePtr	./dev/storage/ide_ctrl.cc	/^    BMIDescTablePtr = 0x4$/;"	e	enum:BMIRegOffset	file:
BMIRegOffset	./dev/storage/ide_ctrl.cc	/^enum BMIRegOffset {$/;"	g	file:
BMIRegs	./dev/storage/ide_ctrl.hh	/^        struct BMIRegs$/;"	s	struct:IdeController::Channel
BMIStatus	./dev/storage/ide_ctrl.cc	/^    BMIStatus = 0x2,$/;"	e	enum:BMIRegOffset	file:
BODY_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum flit_type {HEAD_, BODY_, TAIL_, HEAD_TAIL_, NUM_FLIT_TYPE_};$/;"	e	enum:flit_type
BPHistory	./cpu/pred/bi_mode.hh	/^    struct BPHistory {$/;"	s	class:BiModeBP
BPHistory	./cpu/pred/tournament.hh	/^        BPHistory()$/;"	f	struct:TournamentBP::BPHistory
BPHistory	./cpu/pred/tournament.hh	/^    struct BPHistory {$/;"	s	class:TournamentBP
BPredUnit	./cpu/pred/bpred_unit.cc	/^BPredUnit::BPredUnit(const Params *params)$/;"	f	class:BPredUnit
BPredUnit	./cpu/pred/bpred_unit.hh	/^class BPredUnit : public SimObject$/;"	c
BRAR	./dev/net/ns_gige_reg.h	/^    BRAR =              0x50,$/;"	e	enum:DeviceRegisterAddress
BRDR	./dev/net/ns_gige_reg.h	/^    BRDR =              0x54,$/;"	e	enum:DeviceRegisterAddress
BROADCAST_SCALING	./mem/ruby/network/simple/Throttle.cc	/^const int BROADCAST_SCALING = 1;$/;"	v
BTB	./cpu/pred/bpred_unit.hh	/^    DefaultBTB BTB;$/;"	m	class:BPredUnit
BTBCorrect	./cpu/pred/bpred_unit.hh	/^    Stats::Scalar BTBCorrect;$/;"	m	class:BPredUnit
BTBEntries	./cpu/pred/BranchPredictor.py	/^    BTBEntries = Param.Unsigned(4096, "Number of BTB entries")$/;"	v	class:BranchPredictor
BTBEntry	./cpu/pred/btb.hh	/^        BTBEntry()$/;"	f	struct:DefaultBTB::BTBEntry
BTBEntry	./cpu/pred/btb.hh	/^    struct BTBEntry$/;"	s	class:DefaultBTB
BTBHitPct	./cpu/pred/bpred_unit.hh	/^    Stats::Formula BTBHitPct;$/;"	m	class:BPredUnit
BTBHits	./cpu/pred/bpred_unit.hh	/^    Stats::Scalar BTBHits;$/;"	m	class:BPredUnit
BTBLookup	./cpu/pred/bpred_unit.hh	/^    TheISA::PCState BTBLookup(Addr instPC)$/;"	f	class:BPredUnit
BTBLookups	./cpu/pred/bpred_unit.hh	/^    Stats::Scalar BTBLookups;$/;"	m	class:BPredUnit
BTBTagSize	./cpu/pred/BranchPredictor.py	/^    BTBTagSize = Param.Unsigned(16, "Size of the BTB tags, in bits")$/;"	v	class:BranchPredictor
BTBUpdate	./cpu/pred/bpred_unit.hh	/^    void BTBUpdate(Addr instPC, const TheISA::PCState &target)$/;"	f	class:BPredUnit
BTBValid	./cpu/pred/bpred_unit.hh	/^    bool BTBValid(Addr instPC)$/;"	f	class:BPredUnit
BUSY	./mem/xbar.hh	/^        enum State { IDLE, BUSY, RETRY };$/;"	e	enum:BaseXBar::Layer::State
BUS_OPTIONS_RESETV	./dev/arm/hdlcd.cc	/^      bus_options(BUS_OPTIONS_RESETV),$/;"	v
BUS_OPTIONS_RESETV	./dev/arm/hdlcd.hh	/^    static constexpr size_t BUS_OPTIONS_RESETV = 0x408;$/;"	m	class:HDLcd
BY	./arch/x86/decoder_tables.cc	/^        BY = ByteImm,$/;"	e	enum:X86ISA::SizeType	file:
BadAddr	./dev/Device.py	/^class BadAddr(IsaFake):$/;"	c
BadAddrEvent	./kern/tru64/tru64_events.hh	/^    BadAddrEvent(PCEventQueue *q, const std::string &desc, Addr addr)$/;"	f	class:BadAddrEvent
BadAddrEvent	./kern/tru64/tru64_events.hh	/^class BadAddrEvent : public SkipFuncEvent$/;"	c
BadAddressError	./mem/packet.hh	/^        BadAddressError,   \/\/ memory address invalid$/;"	e	enum:MemCmd::Command
BadDevice	./dev/BadDevice.py	/^class BadDevice(BasicPioDevice):$/;"	c
BadDevice	./dev/baddev.cc	/^BadDevice::BadDevice(Params *p)$/;"	f	class:BadDevice
BadDevice	./dev/baddev.hh	/^class BadDevice : public BasicPioDevice$/;"	c
BadOpcode	./arch/x86/types.hh	/^        BadOpcode,$/;"	e	enum:X86ISA::OpcodeType
BadlyPredictedBranch	./cpu/minor/pipe_data.hh	/^        BadlyPredictedBranch,$/;"	e	enum:Minor::BranchData::Reason
BadlyPredictedBranchTarget	./cpu/minor/pipe_data.hh	/^        BadlyPredictedBranchTarget,$/;"	e	enum:Minor::BranchData::Reason
Bah	./arch/micro_asm_test.py	/^class Bah(object):$/;"	c
Bah_Tweaked	./arch/micro_asm_test.py	/^class Bah_Tweaked(object):$/;"	c
Bank	./mem/dram_ctrl.hh	/^        Bank() :$/;"	f	class:DRAMCtrl::Bank
Bank	./mem/dram_ctrl.hh	/^    class Bank$/;"	c	class:DRAMCtrl
BankType	./arch/mips/isa.hh	/^        enum BankType {$/;"	g	class:MipsISA::ISA
BankedArray	./mem/ruby/structures/BankedArray.cc	/^BankedArray::BankedArray(unsigned int banks, Cycles accessLatency,$/;"	f	class:BankedArray
BankedArray	./mem/ruby/structures/BankedArray.hh	/^class BankedArray$/;"	c
BareIronMipsSystem	./arch/mips/MipsSystem.py	/^class BareIronMipsSystem(MipsSystem):$/;"	c
BareIronMipsSystem	./arch/mips/bare_iron/system.cc	/^BareIronMipsSystem::BareIronMipsSystem(Params *p)$/;"	f	class:BareIronMipsSystem
BareIronMipsSystem	./arch/mips/bare_iron/system.hh	/^class BareIronMipsSystem : public MipsSystem$/;"	c
Barrier	./base/barrier.hh	/^    Barrier(unsigned _numWaiting)$/;"	f	class:Barrier
Barrier	./base/barrier.hh	/^class Barrier$/;"	c
BarrierDataRequest	./cpu/minor/lsq.hh	/^        BarrierDataRequest(LSQ &port_, MinorDynInstPtr inst_) :$/;"	f	class:Minor::LSQ::BarrierDataRequest
BarrierDataRequest	./cpu/minor/lsq.hh	/^    class BarrierDataRequest : public SpecialDataRequest$/;"	c	class:Minor::LSQ
BarrierEvent	./sim/global_event.hh	/^        BarrierEvent(Base *global_event, Priority p, Flags f)$/;"	f	class:GlobalEvent::BarrierEvent
BarrierEvent	./sim/global_event.hh	/^        BarrierEvent(Base *global_event, Priority p, Flags f)$/;"	f	class:GlobalSyncEvent::BarrierEvent
BarrierEvent	./sim/global_event.hh	/^        BarrierEvent(BaseGlobalEvent *global_event, Priority p, Flags f)$/;"	f	class:BaseGlobalEvent::BarrierEvent
BarrierEvent	./sim/global_event.hh	/^    class BarrierEvent : public Base::BarrierEvent$/;"	c	class:GlobalEvent
BarrierEvent	./sim/global_event.hh	/^    class BarrierEvent : public Base::BarrierEvent$/;"	c	class:GlobalSyncEvent
BarrierEvent	./sim/global_event.hh	/^    class BarrierEvent : public Event$/;"	c	class:BaseGlobalEvent
Base	./arch/arm/types.hh	/^        typedef GenericISA::UPCState<MachInst> Base;$/;"	t	class:ArmISA::PCState
Base	./arch/generic/types.hh	/^    typedef DelaySlotPCState<MachInst> Base;$/;"	t	class:GenericISA::DelaySlotUPCState
Base	./arch/generic/types.hh	/^    typedef PCStateBase Base;$/;"	t	class:GenericISA::SimplePCState
Base	./arch/generic/types.hh	/^    typedef SimplePCState<MachInst> Base;$/;"	t	class:GenericISA::DelaySlotPCState
Base	./arch/generic/types.hh	/^    typedef SimplePCState<MachInst> Base;$/;"	t	class:GenericISA::UPCState
Base	./arch/null/types.hh	/^        typedef GenericISA::UPCState<MachInst> Base;$/;"	t	class:NullISA::PCState
Base	./arch/x86/types.hh	/^        typedef GenericISA::UPCState<MachInst> Base;$/;"	t	class:X86ISA::PCState
Base	./dev/net/sinic.cc	/^Base::Base(const Params *p)$/;"	f	class:Sinic::Base
Base	./dev/net/sinic.hh	/^class Base : public EtherDevBase$/;"	c	namespace:Sinic
Base	./sim/global_event.hh	/^    typedef BaseGlobalEventTemplate<GlobalEvent> Base;$/;"	t	class:GlobalEvent
Base	./sim/global_event.hh	/^    typedef BaseGlobalEventTemplate<GlobalSyncEvent> Base;$/;"	t	class:GlobalSyncEvent
BaseArmKvmCPU	./arch/arm/kvm/BaseArmKvmCPU.py	/^class BaseArmKvmCPU(BaseKvmCPU):$/;"	c
BaseArmKvmCPU	./arch/arm/kvm/base_cpu.cc	/^BaseArmKvmCPU::BaseArmKvmCPU(BaseArmKvmCPUParams *params)$/;"	f	class:BaseArmKvmCPU
BaseArmKvmCPU	./arch/arm/kvm/base_cpu.hh	/^class BaseArmKvmCPU : public BaseKvmCPU$/;"	c
BaseBufferArg	./sim/syscall_emul_buf.hh	/^    BaseBufferArg(Addr _addr, int _size)$/;"	f	class:BaseBufferArg
BaseBufferArg	./sim/syscall_emul_buf.hh	/^class BaseBufferArg {$/;"	c
BaseCPU	./arch/null/cpu_dummy.hh	/^class BaseCPU$/;"	c
BaseCPU	./cpu/BaseCPU.py	/^class BaseCPU(MemObject):$/;"	c
BaseCPU	./cpu/base.cc	/^BaseCPU::BaseCPU(Params *p, bool is_checker)$/;"	f	class:BaseCPU
BaseCPU	./cpu/base.hh	/^class BaseCPU : public MemObject$/;"	c
BaseCache	./mem/cache/Cache.py	/^class BaseCache(MemObject):$/;"	c
BaseCache	./mem/cache/base.cc	/^BaseCache::BaseCache(const BaseCacheParams *p, unsigned blk_size)$/;"	f	class:BaseCache
BaseCache	./mem/cache/base.hh	/^class BaseCache : public MemObject$/;"	c
BaseConfigEntry	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::BaseConfigEntry::BaseConfigEntry(Params * p, uint8_t _type) :$/;"	f	class:X86ISA::IntelMP::BaseConfigEntry
BaseConfigEntry	./arch/x86/bios/intelmp.hh	/^class BaseConfigEntry : public SimObject$/;"	c	namespace:X86ISA::IntelMP
BaseDynInst	./cpu/base_dyn_inst.hh	/^class BaseDynInst : public ExecContext, public RefCounted$/;"	c
BaseDynInst	./cpu/base_dyn_inst_impl.hh	/^BaseDynInst<Impl>::BaseDynInst(const StaticInstPtr &_staticInst,$/;"	f	class:BaseDynInst
BaseDynInstPtr	./cpu/base_dyn_inst.hh	/^    typedef RefCountingPtr<BaseDynInst<Impl> > BaseDynInstPtr;$/;"	t	class:BaseDynInst
BaseGarnetNetwork	./mem/ruby/network/garnet/BaseGarnetNetwork.cc	/^BaseGarnetNetwork::BaseGarnetNetwork(const Params *p)$/;"	f	class:BaseGarnetNetwork
BaseGarnetNetwork	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^class BaseGarnetNetwork : public Network$/;"	c
BaseGarnetNetwork	./mem/ruby/network/garnet/BaseGarnetNetwork.py	/^class BaseGarnetNetwork(RubyNetwork):$/;"	c
BaseGdbRegCache	./base/remote_gdb.hh	/^        BaseGdbRegCache(BaseRemoteGDB *g) : gdb(g)$/;"	f	class:BaseRemoteGDB::BaseGdbRegCache
BaseGdbRegCache	./base/remote_gdb.hh	/^    class BaseGdbRegCache$/;"	c	class:BaseRemoteGDB
BaseGen	./cpu/testers/traffic_gen/generators.cc	/^BaseGen::BaseGen(const std::string& _name, MasterID master_id, Tick _duration)$/;"	f	class:BaseGen
BaseGen	./cpu/testers/traffic_gen/generators.hh	/^class BaseGen$/;"	c
BaseGic	./dev/arm/Gic.py	/^class BaseGic(PioDevice):$/;"	c
BaseGic	./dev/arm/base_gic.cc	/^BaseGic::BaseGic(const Params *p)$/;"	f	class:BaseGic
BaseGic	./dev/arm/base_gic.hh	/^class BaseGic :  public PioDevice$/;"	c
BaseGlobalEvent	./sim/global_event.cc	/^BaseGlobalEvent::BaseGlobalEvent(Priority p, Flags f)$/;"	f	class:BaseGlobalEvent
BaseGlobalEvent	./sim/global_event.hh	/^class BaseGlobalEvent : public EventBase$/;"	c
BaseGlobalEventTemplate	./sim/global_event.hh	/^    BaseGlobalEventTemplate(Priority p, Flags f)$/;"	f	class:BaseGlobalEventTemplate
BaseGlobalEventTemplate	./sim/global_event.hh	/^class BaseGlobalEventTemplate : public BaseGlobalEvent$/;"	c
BaseISADevice	./arch/arm/isa_device.cc	/^BaseISADevice::BaseISADevice()$/;"	f	class:ArmISA::BaseISADevice
BaseISADevice	./arch/arm/isa_device.hh	/^class BaseISADevice$/;"	c	namespace:ArmISA
BaseKvmCPU	./cpu/kvm/BaseKvmCPU.py	/^class BaseKvmCPU(BaseCPU):$/;"	c
BaseKvmCPU	./cpu/kvm/base.cc	/^BaseKvmCPU::BaseKvmCPU(BaseKvmCPUParams *params)$/;"	f	class:BaseKvmCPU
BaseKvmCPU	./cpu/kvm/base.hh	/^class BaseKvmCPU : public BaseCPU$/;"	c
BaseKvmTimer	./cpu/kvm/timer.hh	/^    BaseKvmTimer(int signo, float hostFactor, Tick hostFreq)$/;"	f	class:BaseKvmTimer
BaseKvmTimer	./cpu/kvm/timer.hh	/^class BaseKvmTimer$/;"	c
BaseMasterPort	./mem/port.cc	/^BaseMasterPort::BaseMasterPort(const std::string& name, MemObject* owner,$/;"	f	class:BaseMasterPort
BaseMasterPort	./mem/port.hh	/^class BaseMasterPort : public Port$/;"	c
BaseMemProbe	./mem/probes/BaseMemProbe.py	/^class BaseMemProbe(SimObject):$/;"	c
BaseMemProbe	./mem/probes/base.cc	/^BaseMemProbe::BaseMemProbe(BaseMemProbeParams *p)$/;"	f	class:BaseMemProbe
BaseMemProbe	./mem/probes/base.hh	/^class BaseMemProbe : public SimObject$/;"	c
BaseMipsCPU	./arch/mips/MipsCPU.py	/^class BaseMipsCPU(BaseCPU)$/;"	c
BaseO3CPU	./cpu/o3/cpu.cc	/^BaseO3CPU::BaseO3CPU(BaseCPUParams *params)$/;"	f	class:BaseO3CPU
BaseO3CPU	./cpu/o3/cpu.hh	/^class BaseO3CPU : public BaseCPU$/;"	c
BaseO3DynInst	./cpu/o3/dyn_inst.hh	/^class BaseO3DynInst : public BaseDynInst<Impl>$/;"	c
BaseO3DynInst	./cpu/o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::BaseO3DynInst(const StaticInstPtr &_staticInst,$/;"	f	class:BaseO3DynInst
BaseO3DynInst	./cpu/o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::BaseO3DynInst(const StaticInstPtr &staticInst,$/;"	f	class:BaseO3DynInst
BasePixelPump	./dev/pixelpump.cc	/^BasePixelPump::BasePixelPump(EventManager &em, ClockDomain &pxl_clk,$/;"	f	class:BasePixelPump
BasePixelPump	./dev/pixelpump.hh	/^class BasePixelPump$/;"	c
BasePrefetcher	./mem/cache/prefetch/Prefetcher.py	/^class BasePrefetcher(ClockedObject):$/;"	c
BasePrefetcher	./mem/cache/prefetch/base.cc	/^BasePrefetcher::BasePrefetcher(const BasePrefetcherParams *p)$/;"	f	class:BasePrefetcher
BasePrefetcher	./mem/cache/prefetch/base.hh	/^class BasePrefetcher : public ClockedObject$/;"	c
BaseProxy	./python/m5/proxy.py	/^class BaseProxy(object):$/;"	c
BaseRemoteGDB	./arch/null/remote_gdb.hh	/^class BaseRemoteGDB$/;"	c
BaseRemoteGDB	./base/remote_gdb.cc	/^BaseRemoteGDB::BaseRemoteGDB(System *_system, ThreadContext *c) :$/;"	f	class:BaseRemoteGDB
BaseRemoteGDB	./base/remote_gdb.hh	/^class BaseRemoteGDB$/;"	c
BaseSetAssoc	./mem/cache/tags/Tags.py	/^class BaseSetAssoc(BaseTags):$/;"	c
BaseSetAssoc	./mem/cache/tags/base_set_assoc.cc	/^BaseSetAssoc::BaseSetAssoc(const Params *p)$/;"	f	class:BaseSetAssoc
BaseSetAssoc	./mem/cache/tags/base_set_assoc.hh	/^class BaseSetAssoc : public BaseTags$/;"	c
BaseSimpleCPU	./cpu/simple/BaseSimpleCPU.py	/^class BaseSimpleCPU(BaseCPU):$/;"	c
BaseSimpleCPU	./cpu/simple/base.cc	/^BaseSimpleCPU::BaseSimpleCPU(BaseSimpleCPUParams *p)$/;"	f	class:BaseSimpleCPU
BaseSimpleCPU	./cpu/simple/base.hh	/^class BaseSimpleCPU : public BaseCPU$/;"	c
BaseSlavePort	./mem/port.cc	/^BaseSlavePort::BaseSlavePort(const std::string& name, MemObject* owner,$/;"	f	class:BaseSlavePort
BaseSlavePort	./mem/port.hh	/^class BaseSlavePort : public Port$/;"	c
BaseTLB	./arch/generic/BaseTLB.py	/^class BaseTLB(SimObject):$/;"	c
BaseTLB	./arch/generic/tlb.hh	/^    BaseTLB(const Params *p)$/;"	f	class:BaseTLB
BaseTLB	./arch/generic/tlb.hh	/^class BaseTLB : public SimObject$/;"	c
BaseTags	./mem/cache/tags/Tags.py	/^class BaseTags(ClockedObject):$/;"	c
BaseTags	./mem/cache/tags/base.cc	/^BaseTags::BaseTags(const Params *p)$/;"	f	class:BaseTags
BaseTags	./mem/cache/tags/base.hh	/^class BaseTags : public ClockedObject$/;"	c
BaseTagsCallback	./mem/cache/tags/base.hh	/^    BaseTagsCallback(BaseTags *t) : tags(t) {}$/;"	f	class:BaseTagsCallback
BaseTagsCallback	./mem/cache/tags/base.hh	/^class BaseTagsCallback : public Callback$/;"	c
BaseTagsDumpCallback	./mem/cache/tags/base.hh	/^    BaseTagsDumpCallback(BaseTags *t) : tags(t) {}$/;"	f	class:BaseTagsDumpCallback
BaseTagsDumpCallback	./mem/cache/tags/base.hh	/^class BaseTagsDumpCallback : public Callback$/;"	c
BaseXBar	./mem/XBar.py	/^class BaseXBar(MemObject):$/;"	c
BaseXBar	./mem/xbar.cc	/^BaseXBar::BaseXBar(const BaseXBarParams *p)$/;"	f	class:BaseXBar
BaseXBar	./mem/xbar.hh	/^class BaseXBar : public MemObject$/;"	c
BasicBlockRange	./cpu/simple/probes/simpoint.hh	/^typedef std::pair<Addr, Addr> BasicBlockRange;$/;"	t
BasicDecodeCache	./arch/generic/decode_cache.hh	/^class BasicDecodeCache$/;"	c	namespace:GenericISA
BasicExtLink	./mem/ruby/network/BasicLink.cc	/^BasicExtLink::BasicExtLink(const Params *p)$/;"	f	class:BasicExtLink
BasicExtLink	./mem/ruby/network/BasicLink.hh	/^class BasicExtLink : public BasicLink$/;"	c
BasicExtLink	./mem/ruby/network/BasicLink.py	/^class BasicExtLink(BasicLink):$/;"	c
BasicIntLink	./mem/ruby/network/BasicLink.cc	/^BasicIntLink::BasicIntLink(const Params *p)$/;"	f	class:BasicIntLink
BasicIntLink	./mem/ruby/network/BasicLink.hh	/^class BasicIntLink : public BasicLink$/;"	c
BasicIntLink	./mem/ruby/network/BasicLink.py	/^class BasicIntLink(BasicLink):$/;"	c
BasicLink	./mem/ruby/network/BasicLink.cc	/^BasicLink::BasicLink(const Params *p)$/;"	f	class:BasicLink
BasicLink	./mem/ruby/network/BasicLink.hh	/^class BasicLink : public SimObject$/;"	c
BasicLink	./mem/ruby/network/BasicLink.py	/^class BasicLink(SimObject):$/;"	c
BasicPioDevice	./dev/Device.py	/^class BasicPioDevice(PioDevice):$/;"	c
BasicPioDevice	./dev/io_device.cc	/^BasicPioDevice::BasicPioDevice(const Params *p, Addr size)$/;"	f	class:BasicPioDevice
BasicPioDevice	./dev/io_device.hh	/^class BasicPioDevice : public PioDevice$/;"	c
BasicRouter	./mem/ruby/network/BasicRouter.cc	/^BasicRouter::BasicRouter(const Params *p)$/;"	f	class:BasicRouter
BasicRouter	./mem/ruby/network/BasicRouter.hh	/^class BasicRouter : public ClockedObject$/;"	c
BasicRouter	./mem/ruby/network/BasicRouter.py	/^class BasicRouter(ClockedObject):$/;"	c
BatSuccessful	./dev/x86/i8042.cc	/^const uint8_t BatSuccessful = 0xaa;$/;"	v
BiModeBP	./cpu/pred/BranchPredictor.py	/^class BiModeBP(BranchPredictor):$/;"	c
BiModeBP	./cpu/pred/bi_mode.cc	/^BiModeBP::BiModeBP(const BiModeBPParams *params)$/;"	f	class:BiModeBP
BiModeBP	./cpu/pred/bi_mode.hh	/^class BiModeBP : public BPredUnit$/;"	c
BigEndianByteOrder	./base/types.hh	/^    BigEndianByteOrder,$/;"	e	enum:ByteOrder
BigEndianGuest	./arch/power/isa_traits.hh	/^namespace BigEndianGuest {}$/;"	n
BigEndianGuest	./arch/sparc/isa_traits.hh	/^namespace BigEndianGuest {}$/;"	n
BigEndianGuest	./sim/byteswap.hh	/^namespace BigEndianGuest$/;"	n
BigFpMemImmOp	./arch/arm/insts/macromem.cc	/^BigFpMemImmOp::BigFpMemImmOp(const char *mnem, ExtMachInst machInst,$/;"	f	class:ArmISA::BigFpMemImmOp
BigFpMemImmOp	./arch/arm/insts/macromem.hh	/^class BigFpMemImmOp : public PredMacroOp$/;"	c	namespace:ArmISA
BigFpMemLitOp	./arch/arm/insts/macromem.cc	/^BigFpMemLitOp::BigFpMemLitOp(const char *mnem, ExtMachInst machInst,$/;"	f	class:ArmISA::BigFpMemLitOp
BigFpMemLitOp	./arch/arm/insts/macromem.hh	/^class BigFpMemLitOp : public PredMacroOp$/;"	c	namespace:ArmISA
BigFpMemPostOp	./arch/arm/insts/macromem.cc	/^BigFpMemPostOp::BigFpMemPostOp(const char *mnem, ExtMachInst machInst,$/;"	f	class:ArmISA::BigFpMemPostOp
BigFpMemPostOp	./arch/arm/insts/macromem.hh	/^class BigFpMemPostOp : public PredMacroOp$/;"	c	namespace:ArmISA
BigFpMemPreOp	./arch/arm/insts/macromem.cc	/^BigFpMemPreOp::BigFpMemPreOp(const char *mnem, ExtMachInst machInst,$/;"	f	class:ArmISA::BigFpMemPreOp
BigFpMemPreOp	./arch/arm/insts/macromem.hh	/^class BigFpMemPreOp : public PredMacroOp$/;"	c	namespace:ArmISA
BigFpMemRegOp	./arch/arm/insts/macromem.cc	/^BigFpMemRegOp::BigFpMemRegOp(const char *mnem, ExtMachInst machInst,$/;"	f	class:ArmISA::BigFpMemRegOp
BigFpMemRegOp	./arch/arm/insts/macromem.hh	/^class BigFpMemRegOp : public PredMacroOp$/;"	c	namespace:ArmISA
BinaryNode	./base/statistics.hh	/^    BinaryNode(NodePtr &a, NodePtr &b) : l(a), r(b) {}$/;"	f	class:Stats::BinaryNode
BinaryNode	./base/statistics.hh	/^class BinaryNode : public Node$/;"	c	namespace:Stats
BiosInformation	./arch/x86/bios/smbios.cc	/^X86ISA::SMBios::BiosInformation::BiosInformation(Params * p) :$/;"	f	class:X86ISA::SMBios::BiosInformation
BiosInformation	./arch/x86/bios/smbios.hh	/^class BiosInformation : public SMBiosStructure$/;"	c	namespace:X86ISA::SMBios
BitCount	./base/bitmap.hh	/^        uint16_t BitCount;$/;"	m	struct:Bitmap::InfoHeaderV1
BitUnion	./base/bitunion.hh	325;"	d
BitUnion16	./base/bitunion.hh	330;"	d
BitUnion32	./base/bitunion.hh	329;"	d
BitUnion64	./base/bitunion.hh	328;"	d
BitUnion8	./base/bitunion.hh	331;"	d
BitUnionOperators	./base/bitunion.hh	/^        BitUnionOperators() {}$/;"	f	class:BitfieldBackend::BitUnionOperators
BitUnionOperators	./base/bitunion.hh	/^        BitUnionOperators(Type const & _data)$/;"	f	class:BitfieldBackend::BitUnionOperators
BitUnionOperators	./base/bitunion.hh	/^    class BitUnionOperators : public Base$/;"	c	namespace:BitfieldBackend
Bitfield	./base/bitunion.hh	/^        class Bitfield : public BitfieldBase<Type>$/;"	c	class:BitfieldBackend::RegularBitfieldTypes
BitfieldBackend	./base/bitunion.hh	/^namespace BitfieldBackend$/;"	n
BitfieldBase	./base/bitunion.hh	/^    class BitfieldBase$/;"	c	namespace:BitfieldBackend
BitfieldRO	./base/bitunion.hh	/^        class BitfieldRO : public Bitfield<first, last>$/;"	c	class:BitfieldBackend::RegularBitfieldTypes
BitfieldTypes	./base/bitunion.hh	/^    class BitfieldTypes : public RegularBitfieldTypes<Type>,$/;"	c	namespace:BitfieldBackend
BitfieldWO	./base/bitunion.hh	/^        class BitfieldWO : public Bitfield<first, last>$/;"	c	class:BitfieldBackend::RegularBitfieldTypes
Bitmap	./base/bitmap.cc	/^Bitmap::Bitmap(const FrameBuffer *_fb)$/;"	f	class:Bitmap
Bitmap	./base/bitmap.hh	/^class  Bitmap$/;"	c
BlkList	./mem/cache/cache.hh	/^    typedef std::list<CacheBlk*> BlkList;$/;"	t	class:Cache
BlkList	./mem/cache/tags/base_set_assoc.hh	/^    typedef std::list<BlkType*> BlkList;$/;"	t	class:BaseSetAssoc
BlkList	./mem/cache/tags/fa_lru.hh	/^    typedef std::list<FALRUBlk*> BlkList;$/;"	t	class:FALRU
BlkRequest	./dev/virtio/block.hh	/^    struct BlkRequest {$/;"	s	class:VirtIOBlock
BlkType	./mem/cache/tags/base_set_assoc.hh	/^    typedef CacheBlk BlkType;$/;"	t	class:BaseSetAssoc
BlkType	./mem/cache/tags/fa_lru.hh	/^    typedef FALRUBlk BlkType;$/;"	t	class:FALRU
Block	./arch/arm/table_walker.hh	/^            Block,$/;"	e	enum:ArmISA::TableWalker::LongDescriptor::EntryType
Block	./arch/micro_asm.py	/^class Block(object):$/;"	c
BlockBloomFilter	./mem/ruby/filters/BlockBloomFilter.cc	/^BlockBloomFilter::BlockBloomFilter(int size)$/;"	f	class:BlockBloomFilter
BlockBloomFilter	./mem/ruby/filters/BlockBloomFilter.hh	/^class BlockBloomFilter : public AbstractBloomFilter$/;"	c
Blocked	./cpu/o3/cpu.hh	/^        Blocked,$/;"	e	enum:FullO3CPU::Status
Blocked	./cpu/o3/decode.hh	/^        Blocked,$/;"	e	enum:DefaultDecode::ThreadStatus
Blocked	./cpu/o3/fetch.hh	/^        Blocked,$/;"	e	enum:DefaultFetch::ThreadStatus
Blocked	./cpu/o3/iew.hh	/^        Blocked,$/;"	e	enum:DefaultIEW::StageStatus
Blocked	./cpu/o3/rename.hh	/^        Blocked,$/;"	e	enum:DefaultRename::ThreadStatus
BlockedCause	./mem/cache/base.hh	/^    enum BlockedCause {$/;"	g	class:BaseCache
Blocked_NoMSHRs	./mem/cache/base.hh	/^        Blocked_NoMSHRs = MSHRQueue_MSHRs,$/;"	e	enum:BaseCache::BlockedCause
Blocked_NoTargets	./mem/cache/base.hh	/^        Blocked_NoTargets,$/;"	e	enum:BaseCache::BlockedCause
Blocked_NoWBBuffers	./mem/cache/base.hh	/^        Blocked_NoWBBuffers = MSHRQueue_WriteBuffer,$/;"	e	enum:BaseCache::BlockedCause
BlockingInst	./cpu/base_dyn_inst.hh	/^        BlockingInst,            \/\/\/ Is a blocking instruction$/;"	e	enum:BaseDynInst::Status
Blue_Select	./dev/arm/hdlcd.hh	/^        Blue_Select      = 0x024C,$/;"	e	enum:HDLcd::RegisterOffset
BmpPixel32	./base/bitmap.hh	/^    struct BmpPixel32 {$/;"	s	class:Bitmap
Bool	./python/m5/params.py	/^class Bool(ParamValue):$/;"	c
BoolVec	./mem/ruby/common/BoolVec.hh	/^typedef std::vector<bool> BoolVec;$/;"	t
Bootcs	./dev/arm/rv_ctrl.hh	/^        Bootcs     = 0x58,$/;"	e	enum:RealViewCtrl::__anon19
BoundRange	./arch/x86/faults.hh	/^        BoundRange() :$/;"	f	class:X86ISA::BoundRange
BoundRange	./arch/x86/faults.hh	/^    class BoundRange : public X86Fault$/;"	c	namespace:X86ISA
Branch	./cpu/o3/fetch.hh	/^        Branch,$/;"	e	enum:DefaultFetch::FetchPriority
BranchCond	./arch/power/insts/branch.hh	/^    BranchCond(const char *mnem, MachInst _machInst, OpClass __opClass)$/;"	f	class:PowerISA::BranchCond
BranchCond	./arch/power/insts/branch.hh	/^class BranchCond : public PCDependentDisassembly$/;"	c	namespace:PowerISA
BranchData	./cpu/minor/pipe_data.hh	/^    BranchData($/;"	f	class:Minor::BranchData
BranchData	./cpu/minor/pipe_data.hh	/^    BranchData() :$/;"	f	class:Minor::BranchData
BranchData	./cpu/minor/pipe_data.hh	/^class BranchData \/* : public ReportIF, public BubbleIF *\/$/;"	c	namespace:Minor
BranchEret64	./arch/arm/insts/branch64.hh	/^    BranchEret64(const char *mnem, ExtMachInst _machInst, OpClass __opClass) :$/;"	f	class:ArmISA::BranchEret64
BranchEret64	./arch/arm/insts/branch64.hh	/^class BranchEret64 : public ArmStaticInst$/;"	c	namespace:ArmISA
BranchImm	./arch/arm/insts/branch.hh	/^    BranchImm(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::BranchImm
BranchImm	./arch/arm/insts/branch.hh	/^class BranchImm : public PredOp$/;"	c	namespace:ArmISA
BranchImm64	./arch/arm/insts/branch64.hh	/^    BranchImm64(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::BranchImm64
BranchImm64	./arch/arm/insts/branch64.hh	/^class BranchImm64 : public ArmStaticInst$/;"	c	namespace:ArmISA
BranchImmCond	./arch/arm/insts/branch.hh	/^    BranchImmCond(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::BranchImmCond
BranchImmCond	./arch/arm/insts/branch.hh	/^class BranchImmCond : public BranchImm$/;"	c	namespace:ArmISA
BranchImmCond64	./arch/arm/insts/branch64.hh	/^    BranchImmCond64(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::BranchImmCond64
BranchImmCond64	./arch/arm/insts/branch64.hh	/^class BranchImmCond64 : public BranchImm64$/;"	c	namespace:ArmISA
BranchImmImmReg64	./arch/arm/insts/branch64.hh	/^    BranchImmImmReg64(const char *mnem, ExtMachInst _machInst,$/;"	f	class:ArmISA::BranchImmImmReg64
BranchImmImmReg64	./arch/arm/insts/branch64.hh	/^class BranchImmImmReg64 : public ArmStaticInst$/;"	c	namespace:ArmISA
BranchImmReg	./arch/arm/insts/branch.hh	/^    BranchImmReg(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::BranchImmReg
BranchImmReg	./arch/arm/insts/branch.hh	/^class BranchImmReg : public PredOp$/;"	c	namespace:ArmISA
BranchImmReg64	./arch/arm/insts/branch64.hh	/^    BranchImmReg64(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::BranchImmReg64
BranchImmReg64	./arch/arm/insts/branch64.hh	/^class BranchImmReg64 : public ArmStaticInst$/;"	c	namespace:ArmISA
BranchNonPCRel	./arch/power/insts/branch.hh	/^    BranchNonPCRel(const char *mnem, MachInst _machInst, OpClass __opClass)$/;"	f	class:PowerISA::BranchNonPCRel
BranchNonPCRel	./arch/power/insts/branch.hh	/^class BranchNonPCRel : public PCDependentDisassembly$/;"	c	namespace:PowerISA
BranchNonPCRelCond	./arch/power/insts/branch.hh	/^    BranchNonPCRelCond(const char *mnem, MachInst _machInst, OpClass __opClass)$/;"	f	class:PowerISA::BranchNonPCRelCond
BranchNonPCRelCond	./arch/power/insts/branch.hh	/^class BranchNonPCRelCond : public BranchCond$/;"	c	namespace:PowerISA
BranchPCRel	./arch/power/insts/branch.hh	/^    BranchPCRel(const char *mnem, MachInst _machInst, OpClass __opClass)$/;"	f	class:PowerISA::BranchPCRel
BranchPCRel	./arch/power/insts/branch.hh	/^class BranchPCRel : public PCDependentDisassembly$/;"	c	namespace:PowerISA
BranchPCRelCond	./arch/power/insts/branch.hh	/^    BranchPCRelCond(const char *mnem, MachInst _machInst, OpClass __opClass)$/;"	f	class:PowerISA::BranchPCRelCond
BranchPCRelCond	./arch/power/insts/branch.hh	/^class BranchPCRelCond : public BranchCond$/;"	c	namespace:PowerISA
BranchPrediction	./cpu/minor/pipe_data.hh	/^        BranchPrediction,$/;"	e	enum:Minor::BranchData::Reason
BranchPredictor	./cpu/pred/BranchPredictor.py	/^class BranchPredictor(SimObject):$/;"	c
BranchReg	./arch/arm/insts/branch.hh	/^    BranchReg(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::BranchReg
BranchReg	./arch/arm/insts/branch.hh	/^class BranchReg : public PredOp$/;"	c	namespace:ArmISA
BranchReg64	./arch/arm/insts/branch64.hh	/^    BranchReg64(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::BranchReg64
BranchReg64	./arch/arm/insts/branch64.hh	/^class BranchReg64 : public ArmStaticInst$/;"	c	namespace:ArmISA
BranchRegCond	./arch/arm/insts/branch.hh	/^    BranchRegCond(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::BranchRegCond
BranchRegCond	./arch/arm/insts/branch.hh	/^class BranchRegCond : public BranchReg$/;"	c	namespace:ArmISA
BranchRegCond	./arch/power/insts/branch.hh	/^    BranchRegCond(const char *mnem, MachInst _machInst, OpClass __opClass)$/;"	f	class:PowerISA::BranchRegCond
BranchRegCond	./arch/power/insts/branch.hh	/^class BranchRegCond : public BranchCond$/;"	c	namespace:PowerISA
BranchRegReg	./arch/arm/insts/branch.hh	/^    BranchRegReg(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::BranchRegReg
BranchRegReg	./arch/arm/insts/branch.hh	/^class BranchRegReg : public PredOp$/;"	c	namespace:ArmISA
BranchRet64	./arch/arm/insts/branch64.hh	/^    BranchRet64(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::BranchRet64
BranchRet64	./arch/arm/insts/branch64.hh	/^class BranchRet64 : public BranchReg64$/;"	c	namespace:ArmISA
BreakKey	./dev/ps2.cc	/^const uint8_t BreakKey = 0xf0;$/;"	m	namespace:Ps2	file:
BreakPCEvent	./cpu/pc_event.cc	/^BreakPCEvent::BreakPCEvent(PCEventQueue *q, const std::string &desc, Addr addr,$/;"	f	class:BreakPCEvent
BreakPCEvent	./cpu/pc_event.hh	/^class BreakPCEvent : public PCEvent$/;"	c
Breakpoint	./arch/x86/faults.hh	/^        Breakpoint() :$/;"	f	class:X86ISA::Breakpoint
Breakpoint	./arch/x86/faults.hh	/^    class Breakpoint : public X86Trap$/;"	c	namespace:X86ISA
BreakpointFault	./arch/mips/faults.hh	/^class BreakpointFault : public MipsFault<BreakpointFault> {};$/;"	c	namespace:MipsISA
Bridge	./mem/Bridge.py	/^class Bridge(MemObject):$/;"	c
Bridge	./mem/bridge.cc	/^Bridge::Bridge(Params *p)$/;"	f	class:Bridge
Bridge	./mem/bridge.hh	/^class Bridge : public MemObject$/;"	c
BridgeMasterPort	./mem/bridge.cc	/^Bridge::BridgeMasterPort::BridgeMasterPort(const std::string& _name,$/;"	f	class:Bridge::BridgeMasterPort
BridgeMasterPort	./mem/bridge.hh	/^    class BridgeMasterPort : public MasterPort$/;"	c	class:Bridge
BridgeSlavePort	./mem/bridge.cc	/^Bridge::BridgeSlavePort::BridgeSlavePort(const std::string& _name,$/;"	f	class:Bridge::BridgeSlavePort
BridgeSlavePort	./mem/bridge.hh	/^    class BridgeSlavePort : public SlavePort$/;"	c	class:Bridge
BubbleIF	./cpu/minor/buffers.hh	/^class BubbleIF$/;"	c	namespace:Minor
BubbleTraitsAdaptor	./cpu/minor/buffers.hh	/^class BubbleTraitsAdaptor$/;"	c	namespace:Minor
BubbleTraitsPtrAdaptor	./cpu/minor/buffers.hh	/^class BubbleTraitsPtrAdaptor$/;"	c	namespace:Minor
Buffer	./cpu/minor/buffers.hh	/^    typedef MinorBuffer<Data> Buffer;$/;"	t	class:Minor::Latch
BufferArg	./sim/syscall_emul_buf.hh	/^    BufferArg(Addr _addr, int _size) : BaseBufferArg(_addr, _size) { }$/;"	f	class:BufferArg
BufferArg	./sim/syscall_emul_buf.hh	/^class BufferArg : public BaseBufferArg$/;"	c
BulkBloomFilter	./mem/ruby/filters/BulkBloomFilter.cc	/^BulkBloomFilter::BulkBloomFilter(int size)$/;"	f	class:BulkBloomFilter
BulkBloomFilter	./mem/ruby/filters/BulkBloomFilter.hh	/^class BulkBloomFilter : public AbstractBloomFilter$/;"	c
BurstHelper	./mem/dram_ctrl.hh	/^        BurstHelper(unsigned int _burstCount)$/;"	f	class:DRAMCtrl::BurstHelper
BurstHelper	./mem/dram_ctrl.hh	/^    class BurstHelper {$/;"	c	class:DRAMCtrl
Bus	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::Bus::Bus(Params * p) : BaseConfigEntry(p, 1),$/;"	f	class:X86ISA::IntelMP::Bus
Bus	./arch/x86/bios/intelmp.hh	/^class Bus : public BaseConfigEntry$/;"	c	namespace:X86ISA::IntelMP
BusHierarchy	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::BusHierarchy::BusHierarchy(Params * p) :$/;"	f	class:X86ISA::IntelMP::BusHierarchy
BusHierarchy	./arch/x86/bios/intelmp.hh	/^class BusHierarchy : public ExtConfigEntry$/;"	c	namespace:X86ISA::IntelMP
BusState	./mem/dram_ctrl.hh	/^    enum BusState {$/;"	g	class:DRAMCtrl
Bus_Options	./dev/arm/hdlcd.hh	/^        Bus_Options      = 0x0110,$/;"	e	enum:HDLcd::RegisterOffset
BusyBit	./arch/x86/regs/misc.hh	/^        BusyBit = 1 << 15,$/;"	e	enum:X86ISA::X87StatusBit
ByteImm	./arch/x86/decoder_tables.cc	/^        ByteImm,$/;"	e	enum:X86ISA::SizeType	file:
ByteOrder	./base/types.hh	/^enum ByteOrder {$/;"	g
ByteTable	./arch/x86/decoder.hh	/^    typedef const uint8_t ByteTable[256];$/;"	t	class:X86ISA::Decoder
ByteTracker	./mem/mem_checker.hh	/^        ByteTracker(Addr addr = 0, const MemChecker *parent = NULL)$/;"	f	class:MemChecker::ByteTracker
ByteTracker	./mem/mem_checker.hh	/^    class ByteTracker : public Named$/;"	c	class:MemChecker
BytesInPageMask	./arch/sparc/isa_traits.hh	/^const Addr BytesInPageMask = ULL(0x1FFF);$/;"	m	namespace:SparcISA
C0	./arch/mips/pagetable.hh	/^    uint8_t C0; \/\/ Cache Coherency Bits - Even$/;"	m	struct:MipsISA::PTE
C0	./arch/power/pagetable.hh	/^    uint8_t C0; \/\/ Cache Coherency Bits - Even$/;"	m	struct:PowerISA::PTE
C1	./arch/mips/pagetable.hh	/^    uint8_t C1; \/\/ Cache Coherency Bits (3 bits)$/;"	m	struct:MipsISA::PTE
C1	./arch/power/pagetable.hh	/^    uint8_t C1; \/\/ Cache Coherency Bits (3 bits)$/;"	m	struct:PowerISA::PTE
CASE	./mem/abstract_mem.cc	292;"	d	file:
CC0Bit	./arch/x86/regs/misc.hh	/^        CC0Bit = 1 << 8,$/;"	e	enum:X86ISA::X87StatusBit
CC1Bit	./arch/x86/regs/misc.hh	/^        CC1Bit = 1 << 9,$/;"	e	enum:X86ISA::X87StatusBit
CC2Bit	./arch/x86/regs/misc.hh	/^        CC2Bit = 1 << 10,$/;"	e	enum:X86ISA::X87StatusBit
CC3Bit	./arch/x86/regs/misc.hh	/^        CC3Bit = 1 << 14,$/;"	e	enum:X86ISA::X87StatusBit
CCREG_C	./arch/arm/ccregs.hh	/^    CCREG_C,$/;"	e	enum:ArmISA::ccRegIndex
CCREG_CFOF	./arch/x86/regs/ccr.hh	/^        CCREG_CFOF,$/;"	e	enum:X86ISA::CCRegIndex
CCREG_DF	./arch/x86/regs/ccr.hh	/^        CCREG_DF,$/;"	e	enum:X86ISA::CCRegIndex
CCREG_ECF	./arch/x86/regs/ccr.hh	/^        CCREG_ECF,$/;"	e	enum:X86ISA::CCRegIndex
CCREG_EZF	./arch/x86/regs/ccr.hh	/^        CCREG_EZF,$/;"	e	enum:X86ISA::CCRegIndex
CCREG_FP	./arch/arm/ccregs.hh	/^    CCREG_FP,$/;"	e	enum:ArmISA::ccRegIndex
CCREG_GE	./arch/arm/ccregs.hh	/^    CCREG_GE,$/;"	e	enum:ArmISA::ccRegIndex
CCREG_NZ	./arch/arm/ccregs.hh	/^    CCREG_NZ,$/;"	e	enum:ArmISA::ccRegIndex
CCREG_V	./arch/arm/ccregs.hh	/^    CCREG_V,$/;"	e	enum:ArmISA::ccRegIndex
CCREG_ZAPS	./arch/x86/regs/ccr.hh	/^        CCREG_ZAPS,$/;"	e	enum:X86ISA::CCRegIndex
CCREG_ZERO	./arch/arm/ccregs.hh	/^    CCREG_ZERO,$/;"	e	enum:ArmISA::ccRegIndex
CCReg	./arch/alpha/registers.hh	/^typedef uint8_t CCReg;$/;"	t	namespace:AlphaISA
CCReg	./arch/arm/registers.hh	/^typedef uint64_t CCReg;$/;"	t	namespace:ArmISA
CCReg	./arch/mips/registers.hh	/^typedef uint8_t CCReg;$/;"	t	namespace:MipsISA
CCReg	./arch/null/registers.hh	/^typedef uint8_t CCReg;$/;"	t	namespace:NullISA
CCReg	./arch/power/registers.hh	/^typedef uint8_t CCReg;$/;"	t	namespace:PowerISA
CCReg	./arch/sparc/registers.hh	/^typedef uint8_t CCReg;$/;"	t	namespace:SparcISA
CCReg	./arch/x86/registers.hh	/^typedef uint64_t CCReg;$/;"	t	namespace:X86ISA
CCReg	./cpu/exec_context.hh	/^    typedef TheISA::CCReg CCReg;$/;"	t	class:ExecContext
CCReg	./cpu/o3/dyn_inst.hh	/^    typedef TheISA::CCReg   CCReg;$/;"	t	class:BaseO3DynInst
CCReg	./cpu/o3/regfile.hh	/^    typedef TheISA::CCReg CCReg;$/;"	t	class:PhysRegFile
CCReg	./cpu/simple/exec_context.hh	/^    typedef TheISA::CCReg CCReg;$/;"	t	class:SimpleExecContext
CCReg	./cpu/simple_thread.hh	/^    typedef TheISA::CCReg CCReg;$/;"	t	class:SimpleThread
CCReg	./cpu/thread_context.hh	/^    typedef TheISA::CCReg CCReg;$/;"	t	class:ThreadContext
CCRegClass	./cpu/reg_class.hh	/^    CCRegClass,         \/\/\/< Condition-code register$/;"	e	enum:RegClass
CCRegIndex	./arch/x86/regs/ccr.hh	/^    enum CCRegIndex$/;"	g	namespace:X86ISA
CCRegOperand	./arch/isa_parser.py	/^class CCRegOperand(Operand):$/;"	c
CCSR	./dev/net/ns_gige_reg.h	/^    CCSR =              0xcc,$/;"	e	enum:DeviceRegisterAddress
CCSR_CLKRUN_EN	./dev/net/ns_gige_reg.h	/^     CCSR_CLKRUN_EN =   0x00000001$/;"	e	enum:ClockrunControlStatusRegister
CC_Reg_Base	./arch/alpha/registers.hh	/^    CC_Reg_Base = FP_Reg_Base + NumFloatRegs,$/;"	e	enum:AlphaISA::DependenceTags
CC_Reg_Base	./arch/arm/registers.hh	/^const int CC_Reg_Base = FP_Reg_Base + NumFloatRegs;$/;"	m	namespace:ArmISA
CC_Reg_Base	./arch/mips/registers.hh	/^const int CC_Reg_Base = FP_Reg_Base + NumFloatRegs;$/;"	m	namespace:MipsISA
CC_Reg_Base	./arch/power/registers.hh	/^const int CC_Reg_Base = FP_Reg_Base + NumFloatRegs;$/;"	m	namespace:PowerISA
CC_Reg_Base	./arch/sparc/registers.hh	/^    CC_Reg_Base = FP_Reg_Base + NumFloatRegs,$/;"	e	enum:SparcISA::DependenceTags
CC_Reg_Base	./arch/x86/registers.hh	/^    CC_Reg_Base = FP_Reg_Base + NumFloatRegs,$/;"	e	enum:X86ISA::DependenceTags
CF	./arch/x86/insts/microop.hh	/^            CF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
CFBit	./arch/x86/regs/misc.hh	/^        CFBit = 1 << 0,$/;"	e	enum:X86ISA::CondFlagBit
CFGR	./dev/net/ns_gige_reg.h	/^    CFGR =              0x04,$/;"	e	enum:DeviceRegisterAddress
CFGR_AUTO_1000	./dev/net/ns_gige_reg.h	/^     CFGR_AUTO_1000 =   0x00200000,$/;"	e	enum:ConfigurationRegisters
CFGR_BEM	./dev/net/ns_gige_reg.h	/^     CFGR_BEM =         0x00000001$/;"	e	enum:ConfigurationRegisters
CFGR_BROM_DIS	./dev/net/ns_gige_reg.h	/^     CFGR_BROM_DIS =    0x00000004,$/;"	e	enum:ConfigurationRegisters
CFGR_DATA64_EN	./dev/net/ns_gige_reg.h	/^     CFGR_DATA64_EN =   0x00001000,$/;"	e	enum:ConfigurationRegisters
CFGR_DUPSTS	./dev/net/ns_gige_reg.h	/^     CFGR_DUPSTS =      0x10000000,$/;"	e	enum:ConfigurationRegisters
CFGR_EXD	./dev/net/ns_gige_reg.h	/^     CFGR_EXD =         0x00000010,$/;"	e	enum:ConfigurationRegisters
CFGR_EXTSTS_EN	./dev/net/ns_gige_reg.h	/^     CFGR_EXTSTS_EN =   0x00000100,$/;"	e	enum:ConfigurationRegisters
CFGR_EXT_125	./dev/net/ns_gige_reg.h	/^     CFGR_EXT_125 =     0x00000002,$/;"	e	enum:ConfigurationRegisters
CFGR_LNKSTS	./dev/net/ns_gige_reg.h	/^     CFGR_LNKSTS =      0x80000000,$/;"	e	enum:ConfigurationRegisters
CFGR_M64ADDR	./dev/net/ns_gige_reg.h	/^     CFGR_M64ADDR =     0x00000800,$/;"	e	enum:ConfigurationRegisters
CFGR_MODE_1000	./dev/net/ns_gige_reg.h	/^     CFGR_MODE_1000 =   0x00400000,$/;"	e	enum:ConfigurationRegisters
CFGR_MRM_DIS	./dev/net/ns_gige_reg.h	/^     CFGR_MRM_DIS =     0x00010000,$/;"	e	enum:ConfigurationRegisters
CFGR_MWI_DIS	./dev/net/ns_gige_reg.h	/^     CFGR_MWI_DIS =     0x00008000,$/;"	e	enum:ConfigurationRegisters
CFGR_PCI64_DET	./dev/net/ns_gige_reg.h	/^     CFGR_PCI64_DET =   0x00002000,$/;"	e	enum:ConfigurationRegisters
CFGR_PESEL	./dev/net/ns_gige_reg.h	/^     CFGR_PESEL =       0x00000008,$/;"	e	enum:ConfigurationRegisters
CFGR_PHY_DIS	./dev/net/ns_gige_reg.h	/^     CFGR_PHY_DIS =     0x00000200,$/;"	e	enum:ConfigurationRegisters
CFGR_PHY_RST	./dev/net/ns_gige_reg.h	/^     CFGR_PHY_RST =     0x00000400,$/;"	e	enum:ConfigurationRegisters
CFGR_PINT_CTL	./dev/net/ns_gige_reg.h	/^     CFGR_PINT_CTL =    0x001c0000,$/;"	e	enum:ConfigurationRegisters
CFGR_PINT_DUPSTS	./dev/net/ns_gige_reg.h	/^     CFGR_PINT_DUPSTS = 0x00100000,$/;"	e	enum:ConfigurationRegisters
CFGR_PINT_LNKSTS	./dev/net/ns_gige_reg.h	/^     CFGR_PINT_LNKSTS = 0x00080000,$/;"	e	enum:ConfigurationRegisters
CFGR_PINT_SPDSTS	./dev/net/ns_gige_reg.h	/^     CFGR_PINT_SPDSTS = 0x00040000,$/;"	e	enum:ConfigurationRegisters
CFGR_POW	./dev/net/ns_gige_reg.h	/^     CFGR_POW =         0x00000020,$/;"	e	enum:ConfigurationRegisters
CFGR_REQALG	./dev/net/ns_gige_reg.h	/^     CFGR_REQALG =      0x00000080,$/;"	e	enum:ConfigurationRegisters
CFGR_RESERVED	./dev/net/ns_gige_reg.h	/^     CFGR_RESERVED =    0x0e000000,$/;"	e	enum:ConfigurationRegisters
CFGR_SB	./dev/net/ns_gige_reg.h	/^     CFGR_SB =          0x00000040,$/;"	e	enum:ConfigurationRegisters
CFGR_SPDSTS	./dev/net/ns_gige_reg.h	/^     CFGR_SPDSTS =      0x60000000,$/;"	e	enum:ConfigurationRegisters
CFGR_SPDSTS0	./dev/net/ns_gige_reg.h	/^     CFGR_SPDSTS0 =     0x20000000,$/;"	e	enum:ConfigurationRegisters
CFGR_SPDSTS1	./dev/net/ns_gige_reg.h	/^     CFGR_SPDSTS1 =     0x40000000,$/;"	e	enum:ConfigurationRegisters
CFGR_T64ADDR	./dev/net/ns_gige_reg.h	/^     CFGR_T64ADDR =     0x00004000,$/;"	e	enum:ConfigurationRegisters
CFGR_TBI_EN	./dev/net/ns_gige_reg.h	/^     CFGR_TBI_EN =      0x01000000,$/;"	e	enum:ConfigurationRegisters
CFGR_TMRTEST	./dev/net/ns_gige_reg.h	/^     CFGR_TMRTEST =     0x00020000,$/;"	e	enum:ConfigurationRegisters
CFGR_ZERO	./dev/net/ns_gige_reg.h	/^     CFGR_ZERO =        0x00000000,$/;"	e	enum:ConfigurationRegisters
CFG_CTRL_ADDR_MASK	./dev/arm/rv_ctrl.hh	/^    static const uint32_t CFG_CTRL_ADDR_MASK = 0x3fffffffUL;$/;"	m	class:RealViewCtrl
CHANCMD	./dev/pci/copy_engine_defs.hh	/^    struct CHANCMD : public Reg<uint8_t> { \/\/ channelX + 0x14$/;"	s	struct:CopyEngineReg::ChanRegs
CHANCTRL	./dev/pci/copy_engine_defs.hh	/^    struct CHANCTRL : public Reg<uint16_t> { \/\/ channelX + 0x00$/;"	s	struct:CopyEngineReg::ChanRegs
CHANERR	./dev/pci/copy_engine_defs.hh	/^    struct CHANERR : public Reg<uint32_t> { \/\/ channel X + 0x28$/;"	s	struct:CopyEngineReg::ChanRegs
CHANSTS	./dev/pci/copy_engine_defs.hh	/^    struct CHANSTS : public Reg<uint64_t> { \/\/ channelX + 0x04$/;"	s	struct:CopyEngineReg::ChanRegs
CHAN_CHAINADDR	./dev/pci/copy_engine_defs.hh	/^const uint32_t CHAN_CHAINADDR       = 0x0C;$/;"	m	namespace:CopyEngineReg
CHAN_CHAINADDR_HIGH	./dev/pci/copy_engine_defs.hh	/^const uint32_t CHAN_CHAINADDR_HIGH  = 0x10;$/;"	m	namespace:CopyEngineReg
CHAN_CHAINADDR_LOW	./dev/pci/copy_engine_defs.hh	/^const uint32_t CHAN_CHAINADDR_LOW   = 0x0C;$/;"	m	namespace:CopyEngineReg
CHAN_CMPLNADDR	./dev/pci/copy_engine_defs.hh	/^const uint32_t CHAN_CMPLNADDR       = 0x18;$/;"	m	namespace:CopyEngineReg
CHAN_CMPLNADDR_HIGH	./dev/pci/copy_engine_defs.hh	/^const uint32_t CHAN_CMPLNADDR_HIGH  = 0x1C;$/;"	m	namespace:CopyEngineReg
CHAN_CMPLNADDR_LOW	./dev/pci/copy_engine_defs.hh	/^const uint32_t CHAN_CMPLNADDR_LOW   = 0x18;$/;"	m	namespace:CopyEngineReg
CHAN_COMMAND	./dev/pci/copy_engine_defs.hh	/^const uint32_t CHAN_COMMAND         = 0x14;$/;"	m	namespace:CopyEngineReg
CHAN_CONTROL	./dev/pci/copy_engine_defs.hh	/^const uint32_t CHAN_CONTROL         = 0x00;$/;"	m	namespace:CopyEngineReg
CHAN_ERROR	./dev/pci/copy_engine_defs.hh	/^const uint32_t CHAN_ERROR           = 0x28;$/;"	m	namespace:CopyEngineReg
CHAN_STATUS	./dev/pci/copy_engine_defs.hh	/^const uint32_t CHAN_STATUS          = 0x04;$/;"	m	namespace:CopyEngineReg
CHECK_SIZE	./cpu/testers/rubytest/Check.hh	/^const int CHECK_SIZE = (1 << CHECK_SIZE_BITS);$/;"	v
CHECK_SIZE_BITS	./cpu/testers/rubytest/Check.hh	/^const int CHECK_SIZE_BITS = 2;$/;"	v
CMDSTSFlatsForDescriptors	./dev/net/ns_gige_reg.h	/^enum CMDSTSFlatsForDescriptors {$/;"	g
CMDSTS_DEST_MASK	./dev/net/ns_gige_reg.h	/^     CMDSTS_DEST_MASK = 0x01800000,$/;"	e	enum:CMDSTSFlatsForDescriptors
CMDSTS_DEST_MULTI	./dev/net/ns_gige_reg.h	/^     CMDSTS_DEST_MULTI = 0x01000000$/;"	e	enum:CMDSTSFlatsForDescriptors
CMDSTS_DEST_SELF	./dev/net/ns_gige_reg.h	/^     CMDSTS_DEST_SELF = 0x00800000,$/;"	e	enum:CMDSTSFlatsForDescriptors
CMDSTS_ERR	./dev/net/ns_gige_reg.h	/^     CMDSTS_ERR =       0x10000000,$/;"	e	enum:CMDSTSFlatsForDescriptors
CMDSTS_INTR	./dev/net/ns_gige_reg.h	/^     CMDSTS_INTR =      0x20000000,$/;"	e	enum:CMDSTSFlatsForDescriptors
CMDSTS_LEN_MASK	./dev/net/ns_gige_reg.h	/^     CMDSTS_LEN_MASK =  0x0000ffff,$/;"	e	enum:CMDSTSFlatsForDescriptors
CMDSTS_MORE	./dev/net/ns_gige_reg.h	/^     CMDSTS_MORE =      0x40000000,$/;"	e	enum:CMDSTSFlatsForDescriptors
CMDSTS_OK	./dev/net/ns_gige_reg.h	/^     CMDSTS_OK =        0x08000000,$/;"	e	enum:CMDSTSFlatsForDescriptors
CMDSTS_OWN	./dev/net/ns_gige_reg.h	/^     CMDSTS_OWN =       0x80000000,$/;"	e	enum:CMDSTSFlatsForDescriptors
CMDUCMDARG1	./dev/arm/ufs_device.hh	/^        uint32_t CMDUCMDARG1;$/;"	m	struct:UFSHostDevice::HCIMem
CMDUCMDARG2	./dev/arm/ufs_device.hh	/^        uint32_t CMDUCMDARG2;$/;"	m	struct:UFSHostDevice::HCIMem
CMDUCMDARG3	./dev/arm/ufs_device.hh	/^        uint32_t CMDUCMDARG3;$/;"	m	struct:UFSHostDevice::HCIMem
CMDUICCMDR	./dev/arm/ufs_device.hh	/^        uint32_t CMDUICCMDR;$/;"	m	struct:UFSHostDevice::HCIMem
CMP_EQ	./arch/mips/dsp.hh	/^    CMP_EQ,        \/\/ equal$/;"	e	enum:MipsISA::__anon87
CMP_LE	./arch/mips/dsp.hh	/^    CMP_LE         \/\/ less than or equal$/;"	e	enum:MipsISA::__anon87
CMP_LT	./arch/mips/dsp.hh	/^    CMP_LT,        \/\/ less than$/;"	e	enum:MipsISA::__anon87
COMMAND_OFFSET	./dev/storage/ide_disk.hh	108;"	d
COMPLETED	./arch/arm/table_walker.hh	/^    static const unsigned COMPLETED = 1;$/;"	m	class:ArmISA::TableWalker
COND_AL	./arch/arm/ccregs.hh	/^    COND_AL, \/\/ 14$/;"	e	enum:ArmISA::ConditionCode
COND_CC	./arch/arm/ccregs.hh	/^    COND_CC, \/\/  3$/;"	e	enum:ArmISA::ConditionCode
COND_CS	./arch/arm/ccregs.hh	/^    COND_CS, \/\/  2$/;"	e	enum:ArmISA::ConditionCode
COND_EQ	./arch/arm/ccregs.hh	/^    COND_EQ  =   0,$/;"	e	enum:ArmISA::ConditionCode
COND_GE	./arch/arm/ccregs.hh	/^    COND_GE, \/\/ 10$/;"	e	enum:ArmISA::ConditionCode
COND_GT	./arch/arm/ccregs.hh	/^    COND_GT, \/\/ 12$/;"	e	enum:ArmISA::ConditionCode
COND_HI	./arch/arm/ccregs.hh	/^    COND_HI, \/\/  8$/;"	e	enum:ArmISA::ConditionCode
COND_LE	./arch/arm/ccregs.hh	/^    COND_LE, \/\/ 13$/;"	e	enum:ArmISA::ConditionCode
COND_LS	./arch/arm/ccregs.hh	/^    COND_LS, \/\/  9$/;"	e	enum:ArmISA::ConditionCode
COND_LT	./arch/arm/ccregs.hh	/^    COND_LT, \/\/ 11$/;"	e	enum:ArmISA::ConditionCode
COND_MI	./arch/arm/ccregs.hh	/^    COND_MI, \/\/  4$/;"	e	enum:ArmISA::ConditionCode
COND_NE	./arch/arm/ccregs.hh	/^    COND_NE, \/\/  1$/;"	e	enum:ArmISA::ConditionCode
COND_PL	./arch/arm/ccregs.hh	/^    COND_PL, \/\/  5$/;"	e	enum:ArmISA::ConditionCode
COND_UC	./arch/arm/ccregs.hh	/^    COND_UC  \/\/ 15$/;"	e	enum:ArmISA::ConditionCode
COND_VC	./arch/arm/ccregs.hh	/^    COND_VC, \/\/  7$/;"	e	enum:ArmISA::ConditionCode
COND_VS	./arch/arm/ccregs.hh	/^    COND_VS, \/\/  6$/;"	e	enum:ArmISA::ConditionCode
CONSOLE_START_ADDRESS	./dev/mips/access.h	39;"	d
CONTROL_IEN_BIT	./dev/storage/ide_disk.hh	115;"	d
CONTROL_OFFSET	./dev/storage/ide_disk.hh	110;"	d
CONTROL_RST_BIT	./dev/storage/ide_disk.hh	114;"	d
CORE_REG	./arch/arm/kvm/armv8_cpu.cc	60;"	d	file:
COUNT_OF	./arch/arm/kvm/arm_cpu.cc	188;"	d	file:
CP0	./arch/mips/isa.hh	/^        typedef ISA CP0;$/;"	t	class:MipsISA::ISA
CP0Event	./arch/mips/isa.cc	/^ISA::CP0Event::CP0Event(CP0 *_cp0, BaseCPU *_cpu, CP0EventType e_type)$/;"	f	class:MipsISA::ISA::CP0Event
CP0Event	./arch/mips/isa.hh	/^        class CP0Event : public Event$/;"	c	class:MipsISA::ISA
CP0EventType	./arch/mips/isa.hh	/^        enum CP0EventType {$/;"	g	class:MipsISA::ISA
CP0_Config	./arch/mips/MipsCPU.py	/^        CP0_Config = Param.Unsigned(0,"CP0 Config Register")$/;"	v	class:BaseMipsCPU
CP0_Config	./arch/mips/types.hh	/^      unsigned CP0_Config;$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config1	./arch/mips/MipsCPU.py	/^        CP0_Config1 = Param.Unsigned(0,"CP0 Config1 Register")$/;"	v	class:BaseMipsCPU
CP0_Config1	./arch/mips/types.hh	/^      unsigned CP0_Config1;$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config1_C2	./arch/mips/MipsCPU.py	/^        CP0_Config1_C2 = Param.Bool(False,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config1_C2	./arch/mips/types.hh	/^      bool CP0_Config1_C2; \/\/ Page 112$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config1_CA	./arch/mips/MipsCPU.py	/^        CP0_Config1_CA = Param.Bool(False,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config1_CA	./arch/mips/types.hh	/^      bool CP0_Config1_CA;\/\/ Page 113$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config1_DA	./arch/mips/MipsCPU.py	/^        CP0_Config1_DA = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config1_DA	./arch/mips/types.hh	/^      unsigned CP0_Config1_DA; \/\/ Page 112$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config1_DL	./arch/mips/MipsCPU.py	/^        CP0_Config1_DL = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config1_DL	./arch/mips/types.hh	/^      unsigned CP0_Config1_DL; \/\/ Page 112$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config1_DS	./arch/mips/MipsCPU.py	/^        CP0_Config1_DS = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config1_DS	./arch/mips/types.hh	/^      unsigned CP0_Config1_DS; \/\/ Page 111$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config1_EP	./arch/mips/MipsCPU.py	/^        CP0_Config1_EP = Param.Bool(False,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config1_EP	./arch/mips/types.hh	/^      bool CP0_Config1_EP;\/\/ Page 113$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config1_FP	./arch/mips/MipsCPU.py	/^        CP0_Config1_FP = Param.Bool(False,"FPU Implemented?")$/;"	v	class:BaseMipsCPU
CP0_Config1_FP	./arch/mips/types.hh	/^      bool CP0_Config1_FP;\/\/ Page 113$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config1_IA	./arch/mips/MipsCPU.py	/^        CP0_Config1_IA = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config1_IA	./arch/mips/types.hh	/^      unsigned CP0_Config1_IA; \/\/ Page 111$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config1_IL	./arch/mips/MipsCPU.py	/^        CP0_Config1_IL = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config1_IL	./arch/mips/types.hh	/^      unsigned CP0_Config1_IL; \/\/ Page 111$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config1_IS	./arch/mips/MipsCPU.py	/^        CP0_Config1_IS = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config1_IS	./arch/mips/types.hh	/^      unsigned CP0_Config1_IS; \/\/ Page 110$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config1_M	./arch/mips/MipsCPU.py	/^        CP0_Config1_M = Param.Unsigned(0,"Config2 Implemented?")$/;"	v	class:BaseMipsCPU
CP0_Config1_M	./arch/mips/types.hh	/^      unsigned CP0_Config1_M; \/\/ Page 110$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config1_MD	./arch/mips/MipsCPU.py	/^        CP0_Config1_MD = Param.Bool(False,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config1_MD	./arch/mips/types.hh	/^      bool CP0_Config1_MD;\/\/ Page 112 - Technically not used in MIPS32$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config1_MMU	./arch/mips/MipsCPU.py	/^        CP0_Config1_MMU = Param.Unsigned(0,"MMU Type")$/;"	v	class:BaseMipsCPU
CP0_Config1_MMU	./arch/mips/types.hh	/^      unsigned CP0_Config1_MMU; \/\/ Page 110$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config1_PC	./arch/mips/MipsCPU.py	/^        CP0_Config1_PC = Param.Bool(False,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config1_PC	./arch/mips/types.hh	/^      bool CP0_Config1_PC;\/\/ Page 112$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config1_WR	./arch/mips/MipsCPU.py	/^        CP0_Config1_WR = Param.Bool(False,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config1_WR	./arch/mips/types.hh	/^      bool CP0_Config1_WR;\/\/ Page 113$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config2	./arch/mips/MipsCPU.py	/^        CP0_Config2 = Param.Unsigned(0,"CP0 Config2 Register")$/;"	v	class:BaseMipsCPU
CP0_Config2	./arch/mips/types.hh	/^      unsigned CP0_Config2;$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config2_M	./arch/mips/MipsCPU.py	/^        CP0_Config2_M = Param.Bool(False,"Config3 Implemented?")$/;"	v	class:BaseMipsCPU
CP0_Config2_M	./arch/mips/types.hh	/^      bool CP0_Config2_M; \/\/ Page 114$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config2_SA	./arch/mips/MipsCPU.py	/^        CP0_Config2_SA = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config2_SA	./arch/mips/types.hh	/^      unsigned CP0_Config2_SA;\/\/ Page 116$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config2_SL	./arch/mips/MipsCPU.py	/^        CP0_Config2_SL = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config2_SL	./arch/mips/types.hh	/^      unsigned CP0_Config2_SL;\/\/ Page 116$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config2_SS	./arch/mips/MipsCPU.py	/^        CP0_Config2_SS = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config2_SS	./arch/mips/types.hh	/^      unsigned CP0_Config2_SS;\/\/ Page 115$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config2_SU	./arch/mips/MipsCPU.py	/^        CP0_Config2_SU = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config2_SU	./arch/mips/types.hh	/^      unsigned CP0_Config2_SU;\/\/ Page 115$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config2_TA	./arch/mips/MipsCPU.py	/^        CP0_Config2_TA = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config2_TA	./arch/mips/types.hh	/^      unsigned CP0_Config2_TA;\/\/ Page 115$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config2_TL	./arch/mips/MipsCPU.py	/^        CP0_Config2_TL = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config2_TL	./arch/mips/types.hh	/^      unsigned CP0_Config2_TL;\/\/ Page 115$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config2_TS	./arch/mips/MipsCPU.py	/^        CP0_Config2_TS = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config2_TS	./arch/mips/types.hh	/^      unsigned CP0_Config2_TS;\/\/ Page 114$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config2_TU	./arch/mips/MipsCPU.py	/^        CP0_Config2_TU = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config2_TU	./arch/mips/types.hh	/^      unsigned CP0_Config2_TU;\/\/ Page 114$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config3	./arch/mips/MipsCPU.py	/^        CP0_Config3 = Param.Unsigned(0,"CP0 Config3 Register")$/;"	v	class:BaseMipsCPU
CP0_Config3	./arch/mips/types.hh	/^      unsigned CP0_Config3;$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config3_DSPP	./arch/mips/MipsCPU.py	/^        CP0_Config3_DSPP = Param.Bool(False,"DSP Extensions Present?")$/;"	v	class:BaseMipsCPU
CP0_Config3_DSPP	./arch/mips/types.hh	/^      bool CP0_Config3_DSPP;\/\/ Page 117$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config3_LPA	./arch/mips/MipsCPU.py	/^        CP0_Config3_LPA = Param.Bool(False,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config3_LPA	./arch/mips/types.hh	/^      bool CP0_Config3_LPA;\/\/ Page 117$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config3_M	./arch/mips/MipsCPU.py	/^        CP0_Config3_M = Param.Bool(False,"Config4 Implemented?")$/;"	v	class:BaseMipsCPU
CP0_Config3_M	./arch/mips/types.hh	/^      bool CP0_Config3_M; \/\/\/\/ Page 117$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config3_MT	./arch/mips/MipsCPU.py	/^        CP0_Config3_MT = Param.Bool(False,"Multithreading Extensions Present?")$/;"	v	class:BaseMipsCPU
CP0_Config3_MT	./arch/mips/types.hh	/^      bool CP0_Config3_MT;\/\/ Page 119$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config3_SM	./arch/mips/MipsCPU.py	/^        CP0_Config3_SM = Param.Bool(False,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config3_SM	./arch/mips/types.hh	/^      bool CP0_Config3_SM;\/\/ Page 119$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config3_SP	./arch/mips/MipsCPU.py	/^        CP0_Config3_SP = Param.Bool(False,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config3_SP	./arch/mips/types.hh	/^      bool CP0_Config3_SP;\/\/ Page 118$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config3_TL	./arch/mips/MipsCPU.py	/^        CP0_Config3_TL = Param.Bool(False,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config3_TL	./arch/mips/types.hh	/^      bool CP0_Config3_TL;\/\/ Page 119$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config3_VEIC	./arch/mips/MipsCPU.py	/^        CP0_Config3_VEIC = Param.Bool(False,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config3_VEIC	./arch/mips/types.hh	/^      bool CP0_Config3_VEIC;\/\/ Page 118$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config3_VInt	./arch/mips/MipsCPU.py	/^        CP0_Config3_VInt = Param.Bool(False,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config3_VInt	./arch/mips/types.hh	/^      bool CP0_Config3_VInt; \/\/ Page 118$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config_AR	./arch/mips/MipsCPU.py	/^        CP0_Config_AR = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config_AR	./arch/mips/types.hh	/^      unsigned CP0_Config_AR; \/\/Page 109$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config_AT	./arch/mips/MipsCPU.py	/^        CP0_Config_AT = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config_AT	./arch/mips/types.hh	/^      unsigned CP0_Config_AT; \/\/Page 109$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config_BE	./arch/mips/MipsCPU.py	/^        CP0_Config_BE = Param.Unsigned(0,"Big Endian?")$/;"	v	class:BaseMipsCPU
CP0_Config_BE	./arch/mips/types.hh	/^      unsigned CP0_Config_BE; \/\/ Page 108, Big\/Little Endian mode$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config_MT	./arch/mips/MipsCPU.py	/^        CP0_Config_MT = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config_MT	./arch/mips/types.hh	/^      unsigned CP0_Config_MT; \/\/Page 109$/;"	m	struct:MipsISA::CoreSpecific
CP0_Config_VI	./arch/mips/MipsCPU.py	/^        CP0_Config_VI = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_Config_VI	./arch/mips/types.hh	/^      unsigned CP0_Config_VI; \/\/Page 109$/;"	m	struct:MipsISA::CoreSpecific
CP0_EBase_CPUNum	./arch/mips/MipsCPU.py	/^        CP0_EBase_CPUNum = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_EBase_CPUNum	./arch/mips/types.hh	/^      unsigned CP0_EBase_CPUNum; \/\/ Page 106, CPU Number in a multiprocessor$/;"	m	struct:MipsISA::CoreSpecific
CP0_IntCtl_IPPCI	./arch/mips/MipsCPU.py	/^        CP0_IntCtl_IPPCI = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_IntCtl_IPPCI	./arch/mips/types.hh	/^      unsigned CP0_IntCtl_IPPCI; \/\/ Page 94, IP Performance Counter Interrupt$/;"	m	struct:MipsISA::CoreSpecific
CP0_IntCtl_IPTI	./arch/mips/MipsCPU.py	/^        CP0_IntCtl_IPTI = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_IntCtl_IPTI	./arch/mips/types.hh	/^      unsigned CP0_IntCtl_IPTI; \/\/ Page 93, IP Timer Interrupt$/;"	m	struct:MipsISA::CoreSpecific
CP0_PRId	./arch/mips/MipsCPU.py	/^        CP0_PRId = Param.Unsigned(0,"CP0 Status Register")$/;"	v	class:BaseMipsCPU
CP0_PRId	./arch/mips/types.hh	/^      unsigned CP0_PRId;$/;"	m	struct:MipsISA::CoreSpecific
CP0_PRId_CompanyID	./arch/mips/MipsCPU.py	/^        CP0_PRId_CompanyID = Param.Unsigned(0,"Company Identifier in Processor ID Register")$/;"	v	class:BaseMipsCPU
CP0_PRId_CompanyID	./arch/mips/types.hh	/^      unsigned CP0_PRId_CompanyID; \/\/ Page 105, Company ID - (0-255, 1=>MIPS)$/;"	m	struct:MipsISA::CoreSpecific
CP0_PRId_CompanyOptions	./arch/mips/MipsCPU.py	/^        CP0_PRId_CompanyOptions = Param.Unsigned(0,"Company Options in Processor ID Register")$/;"	v	class:BaseMipsCPU
CP0_PRId_CompanyOptions	./arch/mips/types.hh	/^      unsigned CP0_PRId_CompanyOptions; \/\/ Page 105, Manufacture options$/;"	m	struct:MipsISA::CoreSpecific
CP0_PRId_ProcessorID	./arch/mips/MipsCPU.py	/^        CP0_PRId_ProcessorID = Param.Unsigned(1,"Processor ID (0=>Not MIPS32\/64 Processor, 1=>MIPS, 2-255 => Other Company")$/;"	v	class:BaseMipsCPU
CP0_PRId_ProcessorID	./arch/mips/types.hh	/^      unsigned CP0_PRId_ProcessorID; \/\/ Page 105$/;"	m	struct:MipsISA::CoreSpecific
CP0_PRId_Revision	./arch/mips/MipsCPU.py	/^        CP0_PRId_Revision = Param.Unsigned(0,"Processor Revision Number in Processor ID Register")$/;"	v	class:BaseMipsCPU
CP0_PRId_Revision	./arch/mips/types.hh	/^      unsigned CP0_PRId_Revision; \/\/ Page 105$/;"	m	struct:MipsISA::CoreSpecific
CP0_PerfCtr_M	./arch/mips/MipsCPU.py	/^        CP0_PerfCtr_M = Param.Bool(False,"No Description")$/;"	v	class:BaseMipsCPU
CP0_PerfCtr_M	./arch/mips/types.hh	/^      bool CP0_PerfCtr_M; \/\/ Page 130$/;"	m	struct:MipsISA::CoreSpecific
CP0_PerfCtr_W	./arch/mips/MipsCPU.py	/^        CP0_PerfCtr_W = Param.Bool(False,"No Description")$/;"	v	class:BaseMipsCPU
CP0_PerfCtr_W	./arch/mips/types.hh	/^      bool CP0_PerfCtr_W; \/\/ Page 130$/;"	m	struct:MipsISA::CoreSpecific
CP0_SrsCtl_HSS	./arch/mips/MipsCPU.py	/^        CP0_SrsCtl_HSS = Param.Unsigned(0,"No Description")$/;"	v	class:BaseMipsCPU
CP0_SrsCtl_HSS	./arch/mips/types.hh	/^      unsigned CP0_SrsCtl_HSS; \/\/ Page 95, Highest Implemented Shadow Set$/;"	m	struct:MipsISA::CoreSpecific
CP0_WatchHi_M	./arch/mips/MipsCPU.py	/^        CP0_WatchHi_M = Param.Bool(False,"No Description")$/;"	v	class:BaseMipsCPU
CP0_WatchHi_M	./arch/mips/types.hh	/^      bool CP0_WatchHi_M; \/\/ Page 124$/;"	m	struct:MipsISA::CoreSpecific
CPA	./base/CPA.py	/^class CPA(SimObject):$/;"	c
CPA	./base/cp_annotate.cc	/^CPA::CPA(Params *p)$/;"	f	class:CPA
CPA	./base/cp_annotate.hh	/^class CPA : SimObject$/;"	c
CPA	./base/cp_annotate.hh	/^class CPA$/;"	c
CPAIgnoreSymbol	./base/cp_annotate.cc	/^struct CPAIgnoreSymbol$/;"	s	file:
CPA_IGNORE_SYMBOL	./base/cp_annotate.cc	52;"	d	file:
CPA_IGNORE_SYMBOL	./base/cp_annotate.cc	76;"	d	file:
CPBR	./dev/arm/vgic.hh	/^    Bitfield<4> CPBR;$/;"	m	class:VGic
CPL0FlagBit	./arch/x86/ldstflags.hh	/^        CPL0FlagBit = 1,$/;"	e	enum:X86ISA::FlagBit
CPU	./python/m5/util/dot_writer.py	/^    CPU = 1$/;"	v	class:NodeType
CPUIDVector	./cpu/kvm/vm.hh	/^    typedef std::vector<struct kvm_cpuid_entry2> CPUIDVector;$/;"	t	class:Kvm
CPUPol	./cpu/o3/commit.hh	/^    typedef typename Impl::CPUPol CPUPol;$/;"	t	class:DefaultCommit
CPUPol	./cpu/o3/decode.hh	/^    typedef typename Impl::CPUPol CPUPol;$/;"	t	class:DefaultDecode
CPUPol	./cpu/o3/fetch.hh	/^    typedef typename Impl::CPUPol CPUPol;$/;"	t	class:DefaultFetch
CPUPol	./cpu/o3/iew.hh	/^    typedef typename Impl::CPUPol CPUPol;$/;"	t	class:DefaultIEW
CPUPol	./cpu/o3/impl.hh	/^    typedef SimpleCPUPolicy<O3CPUImpl> CPUPol;$/;"	t	struct:O3CPUImpl
CPUPol	./cpu/o3/rename.hh	/^    typedef typename Impl::CPUPol CPUPol;$/;"	t	class:DefaultRename
CPUPolicy	./cpu/o3/cpu.hh	/^    typedef typename Impl::CPUPol CPUPolicy;$/;"	t	class:FullO3CPU
CPUProgressEvent	./cpu/base.cc	/^CPUProgressEvent::CPUProgressEvent(BaseCPU *_cpu, Tick ival)$/;"	f	class:CPUProgressEvent
CPUProgressEvent	./cpu/base.hh	/^class CPUProgressEvent : public Event$/;"	c
CPUStageId	./cpu/minor/pipeline.hh	/^        CPUStageId = 0,$/;"	e	enum:Minor::Pipeline::StageId
CPUType	./cpu/o3/impl.hh	/^    typedef O3CPU CPUType;$/;"	t	struct:O3CPUImpl
CPU_MAX	./dev/arm/gic_pl390.hh	/^    static const int CPU_MAX = 256;   \/\/ Max number of supported CPU interfaces$/;"	m	class:Pl390
CPU_MAX	./dev/arm/timer_cpulocal.hh	/^    static const int CPU_MAX = 8;$/;"	m	class:CpuLocalTimer
CPU_SIZE	./dev/arm/gic_pl390.hh	/^    static const int CPU_SIZE  = 0xff;$/;"	m	class:Pl390
CPU_Switch_Pri	./sim/eventq.hh	/^    static const Priority CPU_Switch_Pri =             -31;$/;"	m	class:EventBase
CPU_Tick_Pri	./sim/eventq.hh	/^    static const Priority CPU_Tick_Pri =                50;$/;"	m	class:EventBase
CR	./dev/net/ns_gige_reg.h	/^    CR =                0x00,$/;"	e	enum:DeviceRegisterAddress
CR0	./arch/x86/regs/misc.hh	49;"	d
CR2	./arch/x86/regs/misc.hh	50;"	d
CR3	./arch/x86/regs/misc.hh	51;"	d
CRDD	./dev/net/ns_gige.hh	/^    bool CRDD;$/;"	m	class:NSGigE
CR_RST	./dev/net/ns_gige_reg.h	/^     CR_RST =           0x00000100$/;"	e	enum:ChipCommandRegister
CR_RXD	./dev/net/ns_gige_reg.h	/^     CR_RXD =           0x00000008,$/;"	e	enum:ChipCommandRegister
CR_RXE	./dev/net/ns_gige_reg.h	/^     CR_RXE =           0x00000004,$/;"	e	enum:ChipCommandRegister
CR_RXR	./dev/net/ns_gige_reg.h	/^     CR_RXR =           0x00000020,$/;"	e	enum:ChipCommandRegister
CR_SWI	./dev/net/ns_gige_reg.h	/^     CR_SWI =           0x00000080,$/;"	e	enum:ChipCommandRegister
CR_TXD	./dev/net/ns_gige_reg.h	/^     CR_TXD =           0x00000002,$/;"	e	enum:ChipCommandRegister
CR_TXE	./dev/net/ns_gige_reg.h	/^     CR_TXE =           0x00000001,$/;"	e	enum:ChipCommandRegister
CR_TXR	./dev/net/ns_gige_reg.h	/^     CR_TXR =           0x00000010,$/;"	e	enum:ChipCommandRegister
CS	./arch/x86/decoder_tables.cc	/^    const uint8_t CS = CSOverride;$/;"	m	namespace:X86ISA	file:
CSOverride	./arch/x86/types.hh	/^        CSOverride,$/;"	e	enum:X86ISA::Prefixes
CTDD	./dev/net/ns_gige.hh	/^    bool CTDD;$/;"	m	class:NSGigE
CTRL	./dev/net/i8254xGBe_defs.hh	/^    struct CTRL : public Reg<uint32_t> { \/\/ 0x0000 CTRL Register$/;"	s	struct:iGbReg::Regs
CTRL_CNTACR_BASE	./dev/arm/generic_timer.hh	/^    static const Addr CTRL_CNTACR_BASE     = 0x040;$/;"	m	class:GenericTimerMem
CTRL_CNTFRQ	./dev/arm/generic_timer.hh	/^    static const Addr CTRL_CNTFRQ          = 0x000;$/;"	m	class:GenericTimerMem
CTRL_CNTNSAR	./dev/arm/generic_timer.hh	/^    static const Addr CTRL_CNTNSAR         = 0x004;$/;"	m	class:GenericTimerMem
CTRL_CNTTIDR	./dev/arm/generic_timer.hh	/^    static const Addr CTRL_CNTTIDR         = 0x008;$/;"	m	class:GenericTimerMem
CTRL_CNTVOFF_HI_BASE	./dev/arm/generic_timer.hh	/^    static const Addr CTRL_CNTVOFF_HI_BASE = 0x084;$/;"	m	class:GenericTimerMem
CTRL_CNTVOFF_LO_BASE	./dev/arm/generic_timer.hh	/^    static const Addr CTRL_CNTVOFF_LO_BASE = 0x080;$/;"	m	class:GenericTimerMem
CTRL_EXT	./dev/net/i8254xGBe_defs.hh	/^    struct CTRL_EXT : public Reg<uint32_t> { \/\/ 0x0018 CTRL_EXT Register$/;"	s	struct:iGbReg::Regs
CTRL_VNET_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum VNET_type {CTRL_VNET_, DATA_VNET_, NULL_VNET_, NUM_VNET_TYPE_};$/;"	e	enum:VNET_type
Cache	./mem/cache/Cache.py	/^class Cache(BaseCache):$/;"	c
Cache	./mem/cache/cache.cc	/^Cache::Cache(const CacheParams *p)$/;"	f	class:Cache
Cache	./mem/cache/cache.hh	/^class Cache : public BaseCache$/;"	c
CacheBlk	./mem/cache/blk.hh	/^    CacheBlk()$/;"	f	class:CacheBlk
CacheBlk	./mem/cache/blk.hh	/^class CacheBlk$/;"	c
CacheBlkIsDirtyVisitor	./mem/cache/cache.hh	/^    CacheBlkIsDirtyVisitor()$/;"	f	class:CacheBlkIsDirtyVisitor
CacheBlkIsDirtyVisitor	./mem/cache/cache.hh	/^class CacheBlkIsDirtyVisitor : public CacheBlkVisitor$/;"	c
CacheBlkPrintWrapper	./mem/cache/blk.hh	/^    CacheBlkPrintWrapper(CacheBlk *_blk) : blk(_blk) {}$/;"	f	class:CacheBlkPrintWrapper
CacheBlkPrintWrapper	./mem/cache/blk.hh	/^class CacheBlkPrintWrapper : public Printable$/;"	c
CacheBlkVisitor	./mem/cache/blk.hh	/^    CacheBlkVisitor() {}$/;"	f	class:CacheBlkVisitor
CacheBlkVisitor	./mem/cache/blk.hh	/^class CacheBlkVisitor$/;"	c
CacheBlkVisitorWrapper	./mem/cache/cache.hh	/^    CacheBlkVisitorWrapper(Cache &_cache, VisitorPtr _visitor)$/;"	f	class:CacheBlkVisitorWrapper
CacheBlkVisitorWrapper	./mem/cache/cache.hh	/^class CacheBlkVisitorWrapper : public CacheBlkVisitor$/;"	c
CacheKey	./arch/x86/decoder.hh	/^    typedef MiscReg CacheKey;$/;"	t	class:X86ISA::Decoder
CacheLineSize	./dev/pci/PciDevice.py	/^    CacheLineSize = Param.UInt8(0, "System Cacheline Size")$/;"	v	class:PciDevice
CacheMasterPort	./mem/cache/base.hh	/^        CacheMasterPort(const std::string &_name, BaseCache *_cache,$/;"	f	class:BaseCache::CacheMasterPort
CacheMasterPort	./mem/cache/base.hh	/^    class CacheMasterPort : public QueuedMasterPort$/;"	c	class:BaseCache
CacheMemory	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::CacheMemory(const Params *p)$/;"	f	class:CacheMemory
CacheMemory	./mem/ruby/structures/CacheMemory.hh	/^class CacheMemory : public SimObject$/;"	c
CachePage	./cpu/decode_cache.hh	/^    struct CachePage {$/;"	s	class:DecodeCache::AddrMap
CacheRecorder	./mem/ruby/system/CacheRecorder.cc	/^CacheRecorder::CacheRecorder()$/;"	f	class:CacheRecorder
CacheRecorder	./mem/ruby/system/CacheRecorder.cc	/^CacheRecorder::CacheRecorder(uint8_t* uncompressed_trace,$/;"	f	class:CacheRecorder
CacheRecorder	./mem/ruby/system/CacheRecorder.hh	/^class CacheRecorder$/;"	c
CacheReqPacketQueue	./mem/cache/cache.hh	/^        CacheReqPacketQueue(Cache &cache, MasterPort &port,$/;"	f	class:Cache::CacheReqPacketQueue
CacheReqPacketQueue	./mem/cache/cache.hh	/^    class CacheReqPacketQueue : public ReqPacketQueue$/;"	c	class:Cache
CacheSet	./mem/cache/tags/cacheset.hh	/^class CacheSet$/;"	c
CacheSlavePort	./mem/cache/base.cc	/^BaseCache::CacheSlavePort::CacheSlavePort(const std::string &_name,$/;"	f	class:BaseCache::CacheSlavePort
CacheSlavePort	./mem/cache/base.hh	/^    class CacheSlavePort : public QueuedSlavePort$/;"	c	class:BaseCache
CacheType	./dev/net/i8254xGBe.hh	/^        typedef std::deque<T *> CacheType;$/;"	t	class:IGbE::DescCache
CallBackEntry	./dev/arm/flash_device.hh	/^    struct CallBackEntry {$/;"	s	class:FlashDevice
Callback	./base/callback.hh	/^class Callback$/;"	c
CallbackQueue	./base/callback.hh	/^class CallbackQueue$/;"	c
CallbackType	./dev/pixelpump.hh	/^        typedef void (BasePixelPump::* CallbackType)();$/;"	t	class:BasePixelPump::PixelEvent
CanCommit	./cpu/base_dyn_inst.hh	/^        CanCommit,               \/\/\/ Instruction can commit$/;"	e	enum:BaseDynInst::Status
CanIssue	./cpu/base_dyn_inst.hh	/^        CanIssue,                \/\/\/ Instruction can issue and execute$/;"	e	enum:BaseDynInst::Status
CapabilityPtr	./dev/pci/PciDevice.py	/^    CapabilityPtr = Param.UInt8(0x00, "Capability List Pointer offset")$/;"	v	class:PciDevice
CardbusCIS	./dev/pci/PciDevice.py	/^    CardbusCIS = Param.UInt32(0x00, "Cardbus Card Information Structure")$/;"	v	class:PciDevice
Cause_Field	./arch/mips/registers.hh	/^    Cause_Field = 11$/;"	e	enum:MipsISA::FCSRFields
CfgCtrl	./dev/arm/rv_ctrl.hh	/^        CfgCtrl    = 0xA4,$/;"	e	enum:RealViewCtrl::__anon19
CfgData	./dev/arm/rv_ctrl.hh	/^        CfgData    = 0xA0,$/;"	e	enum:RealViewCtrl::__anon19
CfgData1	./dev/arm/rv_ctrl.hh	/^        CfgData1   = 0x28,$/;"	e	enum:RealViewCtrl::__anon19
CfgData2	./dev/arm/rv_ctrl.hh	/^        CfgData2   = 0x2C,$/;"	e	enum:RealViewCtrl::__anon19
CfgStat	./dev/arm/rv_ctrl.hh	/^        CfgStat    = 0xA8,$/;"	e	enum:RealViewCtrl::__anon19
ChanCnt	./dev/pci/CopyEngine.py	/^    ChanCnt = Param.UInt8(4, "Number of DMA channels that exist on device")$/;"	v	class:CopyEngine
ChanRegs	./dev/pci/copy_engine_defs.hh	/^struct ChanRegs : public Serializable {$/;"	s	namespace:CopyEngineReg
Channel	./base/framebuffer.cc	/^PixelConverter::Channel::Channel(unsigned _offset, unsigned width)$/;"	f	class:PixelConverter::Channel
Channel	./base/framebuffer.hh	/^    struct Channel {$/;"	s	class:PixelConverter
Channel	./dev/storage/ide_ctrl.cc	/^IdeController::Channel::Channel($/;"	f	class:IdeController::Channel
Channel	./dev/storage/ide_ctrl.hh	/^    struct Channel$/;"	s	class:IdeController
ChannelState	./dev/pci/copy_engine.hh	/^        enum ChannelState {$/;"	g	class:CopyEngine::CopyEngineChannel
Characteristic	./arch/x86/bios/SMBios.py	/^class Characteristic(Enum):$/;"	c
Check	./cpu/testers/rubytest/Check.cc	/^Check::Check(Addr address, Addr pc, int _num_writers, int _num_readers,$/;"	f	class:Check
Check	./cpu/testers/rubytest/Check.hh	/^class Check$/;"	c
CheckAllocateStatementAST	./mem/slicc/ast/CheckAllocateStatementAST.py	/^class CheckAllocateStatementAST(StatementAST):$/;"	c
CheckForPassword	./dev/x86/i8042.hh	/^        CheckForPassword = 0xA4,$/;"	e	enum:X86ISA::I8042::Command
CheckNextCycleAST	./mem/slicc/ast/CheckNextCycleAST.py	/^class CheckNextCycleAST(StatementAST):$/;"	c
CheckPassword	./dev/x86/i8042.hh	/^        CheckPassword = 0xA6,$/;"	e	enum:X86ISA::I8042::Command
CheckStartEvent	./cpu/testers/rubytest/RubyTester.hh	/^        CheckStartEvent(RubyTester *_tester)$/;"	f	class:RubyTester::CheckStartEvent
CheckStartEvent	./cpu/testers/rubytest/RubyTester.hh	/^    class CheckStartEvent : public Event$/;"	c	class:RubyTester
CheckTable	./cpu/testers/rubytest/CheckTable.cc	/^CheckTable::CheckTable(int _num_writers, int _num_readers, RubyTester* _tester)$/;"	f	class:CheckTable
CheckTable	./cpu/testers/rubytest/CheckTable.hh	/^class CheckTable$/;"	c
CheckedInt	./python/m5/params.py	/^class CheckedInt(NumericParamValue):$/;"	c
CheckedIntType	./python/m5/params.py	/^class CheckedIntType(MetaParamValue):$/;"	c
Checker	./cpu/checker/cpu.hh	/^    Checker(Params *p)$/;"	f	class:Checker
Checker	./cpu/checker/cpu.hh	/^class Checker : public CheckerCPU$/;"	c
CheckerCPU	./cpu/CheckerCPU.py	/^class CheckerCPU(BaseCPU):$/;"	c
CheckerCPU	./cpu/checker/cpu.cc	/^CheckerCPU::CheckerCPU(Params *p)$/;"	f	class:CheckerCPU
CheckerCPU	./cpu/checker/cpu.hh	/^class CheckerCPU : public BaseCPU, public ExecContext$/;"	c
CheckerThreadContext	./cpu/checker/thread_context.hh	/^    CheckerThreadContext(TC *actual_tc,$/;"	f	class:CheckerThreadContext
CheckerThreadContext	./cpu/checker/thread_context.hh	/^class CheckerThreadContext : public ThreadContext$/;"	c
CheckpointIn	./sim/serialize.cc	/^CheckpointIn::CheckpointIn(const string &cpt_dir, SimObjectResolver &resolver)$/;"	f	class:CheckpointIn
CheckpointIn	./sim/serialize.hh	/^class CheckpointIn$/;"	c
CheckpointOut	./sim/serialize.hh	/^typedef std::ostream CheckpointOut;$/;"	t
ChildList	./cpu/profile.hh	/^    typedef std::map<Addr, ProfileNode *> ChildList;$/;"	t	class:ProfileNode
ChipCommandRegister	./dev/net/ns_gige_reg.h	/^enum ChipCommandRegister {$/;"	g
ChunkGenerator	./base/chunk_generator.hh	/^    ChunkGenerator(Addr _startAddr, unsigned totalSize, unsigned _chunkSize)$/;"	f	class:ChunkGenerator
ChunkGenerator	./base/chunk_generator.hh	/^class ChunkGenerator$/;"	c
CircleBuf	./base/circlebuf.hh	/^    explicit CircleBuf(size_t size)$/;"	f	class:CircleBuf
CircleBuf	./base/circlebuf.hh	/^class CircleBuf$/;"	c
ClassCode	./dev/net/Ethernet.py	/^    ClassCode = 0x02$/;"	v	class:IGbE
ClassCode	./dev/net/Ethernet.py	/^    ClassCode = 0x02$/;"	v	class:NSGigE
ClassCode	./dev/net/Ethernet.py	/^    ClassCode = 0x02$/;"	v	class:Sinic
ClassCode	./dev/pci/CopyEngine.py	/^    ClassCode = 0x80$/;"	v	class:CopyEngine
ClassCode	./dev/pci/PciDevice.py	/^    ClassCode = Param.UInt8(0, "Class Code")$/;"	v	class:PciDevice
ClassCode	./dev/storage/Ide.py	/^    ClassCode = 0x01$/;"	v	class:IdeController
ClassCode	./dev/virtio/VirtIO.py	/^    ClassCode = 0xff # Misc device$/;"	v	class:PciVirtIO
ClassMethodCallExprAST	./mem/slicc/ast/MethodCallExprAST.py	/^class ClassMethodCallExprAST(MethodCallExprAST):$/;"	c
Clcd	./dev/arm/rv_ctrl.hh	/^        Clcd       = 0x50,$/;"	e	enum:RealViewCtrl::__anon19
ClcdCrsrClip	./dev/arm/pl111.hh	/^    static const int ClcdCrsrClip     = 0xC14;$/;"	m	class:Pl111
ClcdCrsrConfig	./dev/arm/pl111.hh	/^    static const int ClcdCrsrConfig   = 0xC04;$/;"	m	class:Pl111
ClcdCrsrCtrl	./dev/arm/pl111.hh	/^    static const int ClcdCrsrCtrl     = 0xC00;$/;"	m	class:Pl111
ClcdCrsrIcr	./dev/arm/pl111.hh	/^    static const int ClcdCrsrIcr      = 0xC24;$/;"	m	class:Pl111
ClcdCrsrImsc	./dev/arm/pl111.hh	/^    static const int ClcdCrsrImsc     = 0xC20;$/;"	m	class:Pl111
ClcdCrsrMis	./dev/arm/pl111.hh	/^    static const int ClcdCrsrMis      = 0xC2C;$/;"	m	class:Pl111
ClcdCrsrPalette0	./dev/arm/pl111.hh	/^    static const int ClcdCrsrPalette0 = 0xC08;$/;"	m	class:Pl111
ClcdCrsrPalette1	./dev/arm/pl111.hh	/^    static const int ClcdCrsrPalette1 = 0xC0C;$/;"	m	class:Pl111
ClcdCrsrRis	./dev/arm/pl111.hh	/^    static const int ClcdCrsrRis      = 0xC28;$/;"	m	class:Pl111
ClcdCrsrXY	./dev/arm/pl111.hh	/^    static const int ClcdCrsrXY       = 0xC10;$/;"	m	class:Pl111
ClcdSer	./dev/arm/rv_ctrl.hh	/^        ClcdSer    = 0x54,$/;"	e	enum:RealViewCtrl::__anon19
CleanEvict	./mem/packet.hh	/^        CleanEvict,$/;"	e	enum:MemCmd::Command
CleanWindow	./arch/sparc/faults.hh	/^class CleanWindow : public SparcFault<CleanWindow> {};$/;"	c	namespace:SparcISA
Client	./arch/arm/pagetable.hh	/^        Client,$/;"	m	class:ArmISA::TlbEntry::DomainType
ClientCutText	./base/vnc/vncinput.hh	/^        ClientCutText           = 6$/;"	e	enum:VncInput::ClientMessages
ClientCutTextMessage	./base/vnc/vncinput.hh	/^    struct ClientCutTextMessage {$/;"	s	class:VncInput
ClientFrameBufferUpdate	./base/vnc/vncinput.hh	/^        ClientFrameBufferUpdate = 3,$/;"	e	enum:VncInput::ClientMessages
ClientKeyEvent	./base/vnc/vncinput.hh	/^        ClientKeyEvent          = 4,$/;"	e	enum:VncInput::ClientMessages
ClientMessages	./base/vnc/vncinput.hh	/^    enum ClientMessages {$/;"	g	class:VncInput
ClientPointerEvent	./base/vnc/vncinput.hh	/^        ClientPointerEvent      = 5,$/;"	e	enum:VncInput::ClientMessages
ClientSetEncodings	./base/vnc/vncinput.hh	/^        ClientSetEncodings      = 2,$/;"	e	enum:VncInput::ClientMessages
ClientSetPixelFormat	./base/vnc/vncinput.hh	/^        ClientSetPixelFormat    = 0,$/;"	e	enum:VncInput::ClientMessages
Clock	./python/m5/params.py	/^class Clock(TickParamValue):$/;"	c
Clock100	./dev/arm/rv_ctrl.hh	/^        Clock100   = 0x24,$/;"	e	enum:RealViewCtrl::__anon19
Clock24	./dev/arm/rv_ctrl.hh	/^        Clock24    = 0x5C,$/;"	e	enum:RealViewCtrl::__anon19
ClockDomain	./sim/ClockDomain.py	/^class ClockDomain(SimObject):$/;"	c
ClockDomain	./sim/clock_domain.hh	/^    ClockDomain(const Params *p, VoltageDomain *voltage_domain) :$/;"	f	class:ClockDomain
ClockDomain	./sim/clock_domain.hh	/^class ClockDomain : public SimObject$/;"	c
ClockEvent	./sim/ticked_object.hh	/^        ClockEvent(Ticked &owner_, Priority priority) :$/;"	f	class:Ticked::ClockEvent
ClockEvent	./sim/ticked_object.hh	/^    class ClockEvent : public Event$/;"	c	class:Ticked
Clocked	./sim/clocked_object.hh	/^    Clocked(ClockDomain &clk_domain)$/;"	f	class:Clocked
Clocked	./sim/clocked_object.hh	/^class Clocked$/;"	c
ClockedObject	./sim/ClockedObject.py	/^class ClockedObject(SimObject):$/;"	c
ClockedObject	./sim/clocked_object.hh	/^    ClockedObject(const ClockedObjectParams *p)$/;"	f	class:ClockedObject
ClockedObject	./sim/clocked_object.hh	/^class ClockedObject$/;"	c
ClockrunControlStatusRegister	./dev/net/ns_gige_reg.h	/^enum ClockrunControlStatusRegister {$/;"	g
ClrImportant	./base/bitmap.hh	/^        uint32_t ClrImportant;$/;"	m	struct:Bitmap::InfoHeaderV1
ClrUsed	./base/bitmap.hh	/^        uint32_t ClrUsed;$/;"	m	struct:Bitmap::InfoHeaderV1
Clusivity	./mem/cache/Cache.py	/^class Clusivity(Enum): vals = ['mostly_incl', 'mostly_excl']$/;"	c
CmdTag	./arch/arm/linux/atag.hh	/^    CmdTag    = 0x54410009,$/;"	e	enum:__anon73
Cmos	./dev/x86/Cmos.py	/^class Cmos(BasicPioDevice):$/;"	c
Cmos	./dev/x86/cmos.hh	/^    Cmos(const Params *p) : BasicPioDevice(p, 2), latency(p->pio_latency),$/;"	f	class:X86ISA::Cmos
Cmos	./dev/x86/cmos.hh	/^class Cmos : public BasicPioDevice$/;"	c	namespace:X86ISA
CodeImporter	./python/importer.py	/^class CodeImporter(object):$/;"	c
CoherentXBar	./mem/XBar.py	/^class CoherentXBar(BaseXBar):$/;"	c
CoherentXBar	./mem/coherent_xbar.cc	/^CoherentXBar::CoherentXBar(const CoherentXBarParams *p)$/;"	f	class:CoherentXBar
CoherentXBar	./mem/coherent_xbar.hh	/^class CoherentXBar : public BaseXBar$/;"	c
CoherentXBarMasterPort	./mem/coherent_xbar.hh	/^        CoherentXBarMasterPort(const std::string &_name,$/;"	f	class:CoherentXBar::CoherentXBarMasterPort
CoherentXBarMasterPort	./mem/coherent_xbar.hh	/^    class CoherentXBarMasterPort : public MasterPort$/;"	c	class:CoherentXBar
CoherentXBarSlavePort	./mem/coherent_xbar.hh	/^        CoherentXBarSlavePort(const std::string &_name,$/;"	f	class:CoherentXBar::CoherentXBarSlavePort
CoherentXBarSlavePort	./mem/coherent_xbar.hh	/^    class CoherentXBarSlavePort : public QueuedSlavePort$/;"	c	class:CoherentXBar
ColorStrings	./python/m5/util/terminal.py	/^class ColorStrings(object):$/;"	c
Combinational_Macroop	./arch/micro_asm.py	/^class Combinational_Macroop(Micro_Container):$/;"	c
CommMonitor	./mem/CommMonitor.py	/^class CommMonitor(MemObject):$/;"	c
CommMonitor	./mem/comm_monitor.cc	/^CommMonitor::CommMonitor(Params* params)$/;"	f	class:CommMonitor
CommMonitor	./mem/comm_monitor.hh	/^class CommMonitor : public MemObject$/;"	c
CommMonitorSenderState	./mem/comm_monitor.hh	/^        CommMonitorSenderState(Tick _transmitTime)$/;"	f	class:CommMonitor::CommMonitorSenderState
CommMonitorSenderState	./mem/comm_monitor.hh	/^    class CommMonitorSenderState : public Packet::SenderState$/;"	c	class:CommMonitor
Command	./dev/arm/hdlcd.hh	/^        Command          = 0x0230,$/;"	e	enum:HDLcd::RegisterOffset
Command	./dev/net/sinic.hh	/^        uint32_t Command;      \/\/ 0x04$/;"	m	struct:Sinic::Device::__anon11
Command	./dev/pci/PciDevice.py	/^    Command = Param.UInt16(0, "Command")$/;"	v	class:PciDevice
Command	./dev/storage/Ide.py	/^    Command = 0x0$/;"	v	class:IdeController
Command	./dev/x86/i8042.hh	/^    enum Command$/;"	g	class:X86ISA::I8042
Command	./dev/x86/i8042.hh	/^    enum Command$/;"	g	class:X86ISA::PS2Keyboard
Command	./dev/x86/i8042.hh	/^    enum Command$/;"	g	class:X86ISA::PS2Mouse
Command	./mem/packet.hh	/^    enum Command$/;"	g	class:MemCmd
Command	./mem/packet.hh	/^    typedef MemCmd::Command Command;$/;"	t	class:Packet
CommandAck	./dev/x86/i8042.cc	/^const uint8_t CommandAck = 0xfa;$/;"	v
CommandInfo	./mem/packet.hh	/^    struct CommandInfo$/;"	s	class:MemCmd
CommandLine	./arch/alpha/linux/system.hh	/^    Addr CommandLine() const { return Param() + 0x0; }$/;"	f	class:LinuxAlphaSystem
CommandLine	./arch/mips/linux/system.hh	/^    Addr CommandLine() const { return Param() + 0x0; }$/;"	f	class:LinuxMipsSystem
CommandLineSize	./arch/alpha/linux/system.hh	/^    static const int CommandLineSize = 256;$/;"	m	class:LinuxAlphaSystem
CommandLineSize	./arch/mips/bare_iron/system.hh	/^    static const int CommandLineSize = 256;$/;"	m	class:BareIronMipsSystem
CommandLineSize	./arch/mips/linux/system.hh	/^    static const int CommandLineSize = 256;$/;"	m	class:LinuxMipsSystem
CommandNack	./dev/x86/i8042.cc	/^const uint8_t CommandNack = 0xfe;$/;"	v
CommandReg	./dev/storage/ide_disk.hh	/^typedef struct CommandReg {$/;"	s
CommandReg_t	./dev/storage/ide_disk.hh	/^} CommandReg_t;$/;"	t	typeref:struct:CommandReg
Command_Execution	./dev/storage/ide_disk.hh	/^    Command_Execution,$/;"	e	enum:DevState
Commit	./cpu/o3/cpu_policy.hh	/^    typedef DefaultCommit<Impl> Commit;$/;"	t	struct:SimpleCPUPolicy
Commit	./cpu/o3/rename.hh	/^    typedef typename CPUPol::Commit Commit;$/;"	t	class:DefaultRename
CommitIdx	./cpu/o3/cpu.hh	/^        CommitIdx,$/;"	e	enum:FullO3CPU::StageIdx
CommitPolicy	./cpu/o3/commit.hh	/^    enum CommitPolicy {$/;"	g	class:DefaultCommit
CommitStatus	./cpu/o3/commit.hh	/^    enum CommitStatus{$/;"	g	class:DefaultCommit
Committed	./cpu/base_dyn_inst.hh	/^        Committed,               \/\/\/ Instruction has committed$/;"	e	enum:BaseDynInst::Status
CompatAddrSpaceMod	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::CompatAddrSpaceMod::CompatAddrSpaceMod(Params * p) :$/;"	f	class:X86ISA::IntelMP::CompatAddrSpaceMod
CompatAddrSpaceMod	./arch/x86/bios/intelmp.hh	/^class CompatAddrSpaceMod : public ExtConfigEntry$/;"	c	namespace:X86ISA::IntelMP
CompatabilityMode	./arch/x86/types.hh	/^        CompatabilityMode,$/;"	e	enum:X86ISA::X86SubMode
Complete	./cpu/minor/fetch1.hh	/^            Complete \/* Complete.  Either a fault, or a fetched line *\/$/;"	e	enum:Minor::Fetch1::FetchRequest::FetchRequestState
Complete	./cpu/minor/lsq.hh	/^            Complete$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
CompleteV1Header	./base/bitmap.hh	/^    struct CompleteV1Header {$/;"	s	class:Bitmap
Completed	./cpu/base_dyn_inst.hh	/^        Completed,               \/\/\/ Instruction has completed$/;"	e	enum:BaseDynInst::Status
CompletionWrite	./dev/pci/copy_engine.hh	/^            CompletionWrite$/;"	e	enum:CopyEngine::CopyEngineChannel::ChannelState
CompoundFlag	./base/debug.hh	/^    CompoundFlag(const char *name, const char *desc,$/;"	f	class:Debug::CompoundFlag
CompoundFlag	./base/debug.hh	/^class CompoundFlag : public Flag$/;"	c	namespace:Debug
Compression	./base/bitmap.hh	/^        uint32_t Compression;$/;"	m	struct:Bitmap::InfoHeaderV1
CondCodesMask	./arch/arm/miscregs.hh	/^    static const uint32_t CondCodesMask   = 0xF00F0000;$/;"	m	namespace:ArmISA
CondFlagBit	./arch/x86/regs/misc.hh	/^    enum CondFlagBit {$/;"	g	namespace:X86ISA
CondLogicOp	./arch/power/insts/condition.hh	/^    CondLogicOp(const char *mnem, MachInst _machInst, OpClass __opClass)$/;"	f	class:PowerISA::CondLogicOp
CondLogicOp	./arch/power/insts/condition.hh	/^class CondLogicOp : public PowerStaticInst$/;"	c	namespace:PowerISA
CondMoveOp	./arch/power/insts/condition.hh	/^    CondMoveOp(const char *mnem, MachInst _machInst, OpClass __opClass)$/;"	f	class:PowerISA::CondMoveOp
CondMoveOp	./arch/power/insts/condition.hh	/^class CondMoveOp : public PowerStaticInst$/;"	c	namespace:PowerISA
CondTest	./arch/x86/insts/microop.hh	/^        enum CondTest {$/;"	g	namespace:X86ISA::ConditionTests
ConditionCode	./arch/arm/ccregs.hh	/^enum ConditionCode {$/;"	g	namespace:ArmISA
ConditionTests	./arch/x86/insts/microop.hh	/^    namespace ConditionTests$/;"	n	namespace:X86ISA
ConfRegOffset	./dev/storage/ide_ctrl.cc	/^enum ConfRegOffset {$/;"	g	file:
Config	./dev/arm/a9scu.hh	/^        Config      = 0x04,$/;"	e	enum:A9SCU::__anon20
Config	./dev/net/sinic.hh	/^        uint32_t Config;       \/\/ 0x00$/;"	m	struct:Sinic::Device::__anon11
Config	./dev/virtio/block.hh	/^    struct Config {$/;"	s	class:VirtIOBlock
Config	./dev/virtio/console.hh	/^    struct Config {$/;"	s	class:VirtIOConsole
Config	./dev/virtio/fs9p.hh	/^    struct Config {$/;"	s	class:VirtIO9PBase
ConfigTable	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::ConfigTable::ConfigTable(Params * p) : SimObject(p),$/;"	f	class:X86ISA::IntelMP::ConfigTable
ConfigTable	./arch/x86/bios/intelmp.hh	/^class ConfigTable : public SimObject$/;"	c	namespace:X86ISA::IntelMP
Configuration	./python/m5/util/jobfile.py	/^class Configuration(Data):$/;"	c
ConfigurationRegisters	./dev/net/ns_gige_reg.h	/^enum ConfigurationRegisters {$/;"	g
ConnectionState	./base/vnc/vncserver.hh	/^    enum ConnectionState {$/;"	g	class:VncServer
ConstIterator	./mem/cache/mshr.hh	/^    typedef List::const_iterator ConstIterator;$/;"	t	class:MSHR
ConstNode	./base/statistics.hh	/^    ConstNode(T s) : vresult(1, (Result)s) {}$/;"	f	class:Stats::ConstNode
ConstNode	./base/statistics.hh	/^class ConstNode : public Node$/;"	c	namespace:Stats
ConstVectorNode	./base/statistics.hh	/^    ConstVectorNode(const T &s) : vresult(s.begin(), s.end()) {}$/;"	f	class:Stats::ConstVectorNode
ConstVectorNode	./base/statistics.hh	/^class ConstVectorNode : public Node$/;"	c	namespace:Stats
Consumer	./mem/ruby/common/Consumer.hh	/^    Consumer(ClockedObject *_em)$/;"	f	class:Consumer
Consumer	./mem/ruby/common/Consumer.hh	/^class Consumer$/;"	c
ConsumerEvent	./mem/ruby/common/Consumer.hh	/^          ConsumerEvent(Consumer* _consumer)$/;"	f	class:Consumer::ConsumerEvent
ConsumerEvent	./mem/ruby/common/Consumer.hh	/^    class ConsumerEvent : public Event$/;"	c	class:Consumer
ContainerPrint	./base/stl_helpers.hh	/^    ContainerPrint(std::ostream &out)$/;"	f	class:m5::stl_helpers::ContainerPrint
ContainerPrint	./base/stl_helpers.hh	/^class ContainerPrint$/;"	c	namespace:m5::stl_helpers
ContainingStruct	./unittest/bituniontest.cc	/^struct ContainingStruct$/;"	s	namespace:__anon1	file:
ContextID	./base/types.hh	/^typedef int ContextID;$/;"	t
ContextSwitchTaskId	./mem/request.hh	/^namespace ContextSwitchTaskId {$/;"	n
ContextType	./arch/sparc/tlb.hh	/^    enum ContextType {$/;"	g	class:SparcISA::TLB
ContinuousPollHigh	./dev/x86/i8042.hh	/^        ContinuousPollHigh = 0xC2,$/;"	e	enum:X86ISA::I8042::Command
ContinuousPollLow	./dev/x86/i8042.hh	/^        ContinuousPollLow = 0xC1,$/;"	e	enum:X86ISA::I8042::Command
Control	./dev/arm/a9scu.hh	/^        Control     = 0x00,$/;"	e	enum:A9SCU::__anon20
ControlReg	./dev/arm/rtc_pl031.hh	/^        ControlReg = 0x0C,$/;"	e	enum:PL031::__anon24
ControlReg	./dev/arm/timer_sp804.hh	/^            ControlReg = 0x08,$/;"	e	enum:Sp804::Timer::__anon21
ControlRegOperand	./arch/isa_parser.py	/^class ControlRegOperand(Operand):$/;"	c
ConvertType	./arch/arm/types.hh	/^    enum ConvertType{$/;"	g	namespace:ArmISA
ConvertType	./arch/mips/types.hh	/^enum ConvertType{$/;"	g	namespace:MipsISA
CoprocessorUnusableFault	./arch/mips/faults.hh	/^    CoprocessorUnusableFault(int _procid) : coProcID(_procid)$/;"	f	class:MipsISA::CoprocessorUnusableFault
CoprocessorUnusableFault	./arch/mips/faults.hh	/^class CoprocessorUnusableFault : public MipsFault<CoprocessorUnusableFault>$/;"	c	namespace:MipsISA
CopyEngine	./dev/pci/CopyEngine.py	/^class CopyEngine(PciDevice):$/;"	c
CopyEngine	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngine(const Params *p)$/;"	f	class:CopyEngine
CopyEngine	./dev/pci/copy_engine.hh	/^class CopyEngine : public PciDevice$/;"	c
CopyEngineChannel	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::CopyEngineChannel(CopyEngine *_ce, int cid)$/;"	f	class:CopyEngine::CopyEngineChannel
CopyEngineChannel	./dev/pci/copy_engine.hh	/^    class CopyEngineChannel : public Drainable, public Serializable$/;"	c	class:CopyEngine
CopyEngineReg	./dev/pci/copy_engine_defs.hh	/^namespace CopyEngineReg {$/;"	n
CopyIn	./mem/fs_translating_port_proxy.cc	/^CopyIn(ThreadContext *tc, Addr dest, const void *source, size_t cplen)$/;"	f
CopyOut	./mem/fs_translating_port_proxy.cc	/^CopyOut(ThreadContext *tc, void *dest, Addr src, size_t cplen)$/;"	f
CopyStringIn	./mem/fs_translating_port_proxy.cc	/^CopyStringIn(ThreadContext *tc, const char *src, Addr vaddr)$/;"	f
CopyStringOut	./mem/fs_translating_port_proxy.cc	/^CopyStringOut(ThreadContext *tc, char *dst, Addr vaddr, size_t maxlen)$/;"	f
CoreSpecific	./arch/mips/types.hh	/^    CoreSpecific()$/;"	f	struct:MipsISA::CoreSpecific
CoreSpecific	./arch/mips/types.hh	/^struct CoreSpecific {$/;"	s	namespace:MipsISA
CoreTag	./arch/arm/linux/atag.hh	/^    CoreTag   = 0x54410001,$/;"	e	enum:__anon73
CoreTile2A15DCC	./dev/arm/RealView.py	/^class CoreTile2A15DCC(SubSystem):$/;"	c
CoreTimers	./dev/arm/generic_timer.hh	/^        CoreTimers(GenericTimer &parent, unsigned cpu,$/;"	f	struct:GenericTimer::CoreTimers
CoreTimers	./dev/arm/generic_timer.hh	/^    struct CoreTimers {$/;"	s	class:GenericTimer
CorrectlyPredictedBranch	./cpu/minor/pipe_data.hh	/^        CorrectlyPredictedBranch,$/;"	e	enum:Minor::BranchData::Reason
CountedDrainEvent	./sim/sim_events.hh	/^class CountedDrainEvent : public Event$/;"	c
CountedExitEvent	./sim/sim_events.cc	/^CountedExitEvent::CountedExitEvent(const std::string &_cause, int &counter)$/;"	f	class:CountedExitEvent
CountedExitEvent	./sim/sim_events.hh	/^class CountedExitEvent : public Event$/;"	c
Counter	./base/stats/types.hh	/^typedef double Counter;$/;"	t	namespace:Stats
Counter	./base/types.hh	/^typedef int64_t Counter;$/;"	t
Counter	./dev/intel_8254_timer.cc	/^Intel8254Timer::Counter::Counter(Intel8254Timer *p,$/;"	f	class:Intel8254Timer::Counter
Counter	./dev/intel_8254_timer.hh	/^    class Counter$/;"	c	class:Intel8254Timer
Counter	./python/m5/params.py	/^class Counter(CheckedInt):  cxx_type = 'Counter';  size = 64; unsigned = True$/;"	c
CounterEvent	./dev/intel_8254_timer.cc	/^Intel8254Timer::Counter::CounterEvent::CounterEvent(Counter* c_ptr)$/;"	f	class:Intel8254Timer::Counter::CounterEvent
CounterEvent	./dev/intel_8254_timer.hh	/^        class CounterEvent : public Event$/;"	c	class:Intel8254Timer::Counter
CounterId	./arch/arm/pmu.hh	/^    typedef unsigned int CounterId;$/;"	t	class:ArmISA::PMU
CounterLimits	./base/stats/types.hh	/^typedef std::numeric_limits<Counter> CounterLimits;$/;"	t	namespace:Stats
CounterState	./arch/arm/pmu.hh	/^        CounterState()$/;"	f	struct:ArmISA::PMU::CounterState
CounterState	./arch/arm/pmu.hh	/^    struct CounterState : public Serializable {$/;"	s	class:ArmISA::PMU
CowDiskCallback	./dev/storage/disk_image.cc	/^    CowDiskCallback(CowDiskImage *i) : image(i) {}$/;"	f	class:CowDiskCallback
CowDiskCallback	./dev/storage/disk_image.cc	/^class CowDiskCallback : public Callback$/;"	c	file:
CowDiskImage	./dev/storage/DiskImage.py	/^class CowDiskImage(DiskImage):$/;"	c
CowDiskImage	./dev/storage/disk_image.cc	/^CowDiskImage::CowDiskImage(const Params *p)$/;"	f	class:CowDiskImage
CowDiskImage	./dev/storage/disk_image.hh	/^class CowDiskImage : public DiskImage$/;"	c
CpsrMaskQ	./arch/arm/miscregs.hh	/^    static const uint32_t CpsrMaskQ       = 0x08000000;$/;"	m	namespace:ArmISA
CpuEvent	./cpu/cpuevent.hh	/^    CpuEvent(ThreadContext *_tc, Priority p = Default_Pri)$/;"	f	class:CpuEvent
CpuEvent	./cpu/cpuevent.hh	/^class CpuEvent : public Event$/;"	c
CpuEventList	./cpu/cpuevent.hh	/^    typedef std::vector<CpuEvent *> CpuEventList;$/;"	t	class:CpuEvent
CpuEventWrapper	./cpu/cpuevent.hh	/^    CpuEventWrapper(T *obj, ThreadContext *_tc, Priority p = Default_Pri)$/;"	f	class:CpuEventWrapper
CpuEventWrapper	./cpu/cpuevent.hh	/^class CpuEventWrapper : public CpuEvent$/;"	c
CpuID	./dev/arm/vgic.hh	/^    Bitfield<12,10> CpuID;$/;"	m	class:VGic
CpuLocalTimer	./dev/arm/RealView.py	/^class CpuLocalTimer(BasicPioDevice):$/;"	c
CpuLocalTimer	./dev/arm/timer_cpulocal.cc	/^CpuLocalTimer::CpuLocalTimer(Params *p)$/;"	f	class:CpuLocalTimer
CpuLocalTimer	./dev/arm/timer_cpulocal.hh	/^class CpuLocalTimer : public BasicPioDevice$/;"	c
CpuModel	./arch/isa_parser.py	/^    class CpuModel(object):$/;"	c	class:ISAParser
CpuMondo	./arch/sparc/faults.hh	/^class CpuMondo : public SparcFault<CpuMondo> {};$/;"	c	namespace:SparcISA
CpuPort	./cpu/testers/directedtest/RubyDirectedTester.hh	/^        CpuPort(const std::string &_name, RubyDirectedTester *_tester,$/;"	f	class:RubyDirectedTester::CpuPort
CpuPort	./cpu/testers/directedtest/RubyDirectedTester.hh	/^    class CpuPort : public MasterPort$/;"	c	class:RubyDirectedTester
CpuPort	./cpu/testers/memtest/memtest.hh	/^        CpuPort(const std::string &_name, MemTest &_memtest)$/;"	f	class:MemTest::CpuPort
CpuPort	./cpu/testers/memtest/memtest.hh	/^    class CpuPort : public MasterPort$/;"	c	class:MemTest
CpuPort	./cpu/testers/networktest/networktest.hh	/^        CpuPort(const std::string &_name, NetworkTest *_networktest)$/;"	f	class:NetworkTest::CpuPort
CpuPort	./cpu/testers/networktest/networktest.hh	/^    class CpuPort : public MasterPort$/;"	c	class:NetworkTest
CpuPort	./cpu/testers/rubytest/RubyTester.hh	/^        CpuPort(const std::string &_name, RubyTester *_tester, PortID _id,$/;"	f	class:RubyTester::CpuPort
CpuPort	./cpu/testers/rubytest/RubyTester.hh	/^    class CpuPort : public MasterPort$/;"	c	class:RubyTester
CpuPortIter	./mem/ruby/system/RubyPort.hh	/^    typedef std::vector<MemSlavePort *>::iterator CpuPortIter;$/;"	t	class:RubyPort
CpuSidePort	./mem/cache/cache.cc	/^CpuSidePort::CpuSidePort(const std::string &_name, Cache *_cache,$/;"	f	class:Cache::CpuSidePort
CpuSidePort	./mem/cache/cache.hh	/^    class CpuSidePort : public CacheSlavePort$/;"	c	class:Cache
CpuidResult	./arch/x86/cpuid.hh	/^        CpuidResult()$/;"	f	struct:X86ISA::CpuidResult
CpuidResult	./arch/x86/cpuid.hh	/^        CpuidResult(uint64_t _rax, uint64_t _rbx,$/;"	f	struct:X86ISA::CpuidResult
CpuidResult	./arch/x86/cpuid.hh	/^    struct CpuidResult$/;"	s	namespace:X86ISA
CreditLink_d	./mem/ruby/network/garnet/fixed-pipeline/CreditLink_d.hh	/^    CreditLink_d(const Params *p) : NetworkLink_d(p) {}$/;"	f	class:CreditLink_d
CreditLink_d	./mem/ruby/network/garnet/fixed-pipeline/CreditLink_d.hh	/^class CreditLink_d : public NetworkLink_d$/;"	c
CreditLink_d	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^class CreditLink_d(NetworkLink_d):$/;"	c
CrsrImage	./dev/arm/pl111.hh	/^    static const int CrsrImage        = 0x800;$/;"	m	class:Pl111
CrsrImageSize	./dev/arm/pl111.hh	/^    static const int CrsrImageSize    = 256;$/;"	m	class:Pl111
CurThreadInfoImplemented	./arch/alpha/isa_traits.hh	/^const bool CurThreadInfoImplemented = true;$/;"	m	namespace:AlphaISA
CurThreadInfoImplemented	./arch/arm/isa_traits.hh	/^    const bool CurThreadInfoImplemented = false;$/;"	m	namespace:ArmISA
CurThreadInfoImplemented	./arch/mips/isa_traits.hh	/^const bool CurThreadInfoImplemented = false;$/;"	m	namespace:MipsISA
CurThreadInfoImplemented	./arch/power/isa_traits.hh	/^const bool CurThreadInfoImplemented = false;$/;"	m	namespace:PowerISA
CurThreadInfoImplemented	./arch/sparc/isa_traits.hh	/^const bool CurThreadInfoImplemented = false;$/;"	m	namespace:SparcISA
CurThreadInfoImplemented	./arch/x86/isa_traits.hh	/^    const bool CurThreadInfoImplemented = false;$/;"	m	namespace:X86ISA
CurThreadInfoReg	./arch/alpha/isa_traits.hh	/^const int CurThreadInfoReg = AlphaISA::IPR_PALtemp23;$/;"	m	namespace:AlphaISA
CurThreadInfoReg	./arch/arm/isa_traits.hh	/^    const int CurThreadInfoReg = -1;$/;"	m	namespace:ArmISA
CurThreadInfoReg	./arch/mips/isa_traits.hh	/^const int CurThreadInfoReg = -1;$/;"	m	namespace:MipsISA
CurThreadInfoReg	./arch/power/isa_traits.hh	/^const int CurThreadInfoReg = -1;$/;"	m	namespace:PowerISA
CurThreadInfoReg	./arch/sparc/isa_traits.hh	/^const int CurThreadInfoReg = -1;$/;"	m	namespace:SparcISA
CurThreadInfoReg	./arch/x86/isa_traits.hh	/^    const int CurThreadInfoReg = -1;$/;"	m	namespace:X86ISA
Current	./python/m5/params.py	/^class Current(float, ParamValue):$/;"	c
CurrentGlobalsOffset	./arch/sparc/isa.hh	/^        CurrentGlobalsOffset = 0,$/;"	e	enum:SparcISA::ISA::InstIntRegOffsets
CurrentReg	./dev/arm/timer_sp804.hh	/^            CurrentReg = 0x04,$/;"	e	enum:Sp804::Timer::__anon21
CurrentWindowOffset	./arch/sparc/isa.hh	/^        CurrentWindowOffset = CurrentGlobalsOffset + NumGlobalRegs,$/;"	e	enum:SparcISA::ISA::InstIntRegOffsets
CvZF	./arch/x86/insts/microop.hh	/^            CvZF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
CxxConfigDirectoryEntry	./sim/cxx_config.hh	/^class CxxConfigDirectoryEntry$/;"	c
CxxConfigFileBase	./sim/cxx_config.hh	/^    CxxConfigFileBase() { }$/;"	f	class:CxxConfigFileBase
CxxConfigFileBase	./sim/cxx_config.hh	/^class CxxConfigFileBase$/;"	c
CxxConfigManager	./sim/cxx_manager.cc	/^CxxConfigManager::CxxConfigManager(CxxConfigFileBase &configFile_) :$/;"	f	class:CxxConfigManager
CxxConfigManager	./sim/cxx_manager.hh	/^class CxxConfigManager$/;"	c
CxxConfigParams	./sim/cxx_config.hh	/^    CxxConfigParams() { }$/;"	f	class:CxxConfigParams
CxxConfigParams	./sim/cxx_config.hh	/^class CxxConfigParams$/;"	c
CxxIniFile	./sim/cxx_config_ini.hh	/^    CxxIniFile() { }$/;"	f	class:CxxIniFile
CxxIniFile	./sim/cxx_config_ini.hh	/^class CxxIniFile : public CxxConfigFileBase$/;"	c
Cycles	./base/types.hh	/^    Cycles() : c(0) { }$/;"	f	class:Cycles
Cycles	./base/types.hh	/^    explicit Cycles(uint64_t _c) : c(_c) { }$/;"	f	class:Cycles
Cycles	./base/types.hh	/^    explicit constexpr Cycles(uint64_t _c) : c(_c) { }$/;"	f	class:Cycles
Cycles	./base/types.hh	/^class Cycles$/;"	c
Cycles	./python/m5/params.py	/^class Cycles(CheckedInt):$/;"	c
D0	./arch/mips/pagetable.hh	/^    bool D0;    \/\/ Even entry Dirty Bit$/;"	m	struct:MipsISA::PTE
D0	./arch/power/pagetable.hh	/^    bool D0;   \/\/ Even entry Dirty Bit$/;"	m	struct:PowerISA::PTE
D1	./arch/mips/pagetable.hh	/^    bool D1;    \/\/ Odd entry Dirty Bit$/;"	m	struct:MipsISA::PTE
D1	./arch/power/pagetable.hh	/^    bool D1;   \/\/ Odd entry Dirty Bit$/;"	m	struct:PowerISA::PTE
DATA_INITIAL	./mem/mem_checker.hh	/^    static const uint8_t DATA_INITIAL   = 0x00;$/;"	m	class:MemChecker
DATA_OFFSET	./dev/storage/ide_disk.hh	98;"	d
DATA_VNET_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum VNET_type {CTRL_VNET_, DATA_VNET_, NULL_VNET_, NUM_VNET_TYPE_};$/;"	e	enum:VNET_type
DDR3_1600_x64	./mem/DRAMCtrl.py	/^class DDR3_1600_x64(DRAMCtrl):$/;"	c
DDR3_2133_x64	./mem/DRAMCtrl.py	/^class DDR3_2133_x64(DDR3_1600_x64):$/;"	c
DDR4_2400_x64	./mem/DRAMCtrl.py	/^class DDR4_2400_x64(DRAMCtrl):$/;"	c
DDUMP	./base/trace.hh	166;"	d
DDUMP	./base/trace.hh	211;"	d
DDUMPN	./base/trace.hh	196;"	d
DDUMPN	./base/trace.hh	215;"	d
DEBUG	./mem/dramsim2_wrapper.cc	48;"	d	file:
DEBit	./arch/x86/regs/misc.hh	/^        DEBit = 1 << 1,$/;"	e	enum:X86ISA::X87StatusBit
DEFAULT	./sim/initparam_keys.hh	/^    static constexpr const char *DEFAULT = "";$/;"	m	struct:PseudoInst::InitParamKey
DESC_CTRL_CP_STS	./dev/pci/copy_engine_defs.hh	/^const uint32_t DESC_CTRL_CP_STS     = 0x00000008;$/;"	m	namespace:CopyEngineReg
DESC_CTRL_DST_SN	./dev/pci/copy_engine_defs.hh	/^const uint32_t DESC_CTRL_DST_SN     = 0x00000004;$/;"	m	namespace:CopyEngineReg
DESC_CTRL_FRAME	./dev/pci/copy_engine_defs.hh	/^const uint32_t DESC_CTRL_FRAME      = 0x00000010;$/;"	m	namespace:CopyEngineReg
DESC_CTRL_INT_GEN	./dev/pci/copy_engine_defs.hh	/^const uint32_t DESC_CTRL_INT_GEN    = 0x00000001;$/;"	m	namespace:CopyEngineReg
DESC_CTRL_NULL	./dev/pci/copy_engine_defs.hh	/^const uint32_t DESC_CTRL_NULL       = 0x00000020;$/;"	m	namespace:CopyEngineReg
DESC_CTRL_SRC_SN	./dev/pci/copy_engine_defs.hh	/^const uint32_t DESC_CTRL_SRC_SN     = 0x00000002;$/;"	m	namespace:CopyEngineReg
DEV	./python/m5/util/dot_writer.py	/^    DEV = 4$/;"	v	class:NodeType
DEV0	./dev/storage/ide_disk.hh	123;"	d
DEV1	./dev/storage/ide_disk.hh	124;"	d
DFBit	./arch/x86/regs/misc.hh	/^        DFBit = 1 << 10,$/;"	e	enum:X86ISA::CondFlagBit
DIOD_RFD	./dev/virtio/fs9p.cc	369;"	d	file:
DIOD_WFD	./dev/virtio/fs9p.cc	370;"	d	file:
DIST_RANK	./sim/initparam_keys.hh	/^    static constexpr const char *DIST_RANK = "dist-rank";$/;"	m	struct:PseudoInst::InitParamKey
DIST_SIZE	./dev/arm/gic_pl390.hh	/^    static const int DIST_SIZE  = 0xfff;$/;"	m	class:Pl390
DIST_SIZE	./sim/initparam_keys.hh	/^    static constexpr const char *DIST_SIZE = "dist-size";$/;"	m	struct:PseudoInst::InitParamKey
DLAB	./dev/uart8250.hh	/^    uint8_t IER, DLAB, LCR, MCR;$/;"	m	class:Uart8250
DLT_EN10MB	./dev/net/etherdump.cc	53;"	d	file:
DMA	./mem/request.hh	/^        DMA = 1023, \/* Mostly Table Walker *\/$/;"	e	enum:ContextSwitchTaskId::TaskId
DMARead	./dev/pci/copy_engine.hh	/^            DMARead,$/;"	e	enum:CopyEngine::CopyEngineChannel::ChannelState
DMARequest	./mem/ruby/system/DMASequencer.hh	/^struct DMARequest$/;"	s
DMASequencer	./mem/ruby/system/DMASequencer.cc	/^DMASequencer::DMASequencer(const Params *p)$/;"	f	class:DMASequencer
DMASequencer	./mem/ruby/system/DMASequencer.hh	/^class DMASequencer : public MemObject$/;"	c
DMASequencer	./mem/ruby/system/Sequencer.py	/^class DMASequencer(MemObject):$/;"	c
DMAWrite	./dev/pci/copy_engine.hh	/^            DMAWrite,$/;"	e	enum:CopyEngine::CopyEngineChannel::ChannelState
DMA_ADDR_MASK	./dev/alpha/tsunami_pchip.cc	250;"	d	file:
DMA_BACKOFF_PERIOD	./dev/storage/ide_disk.hh	61;"	d
DNR	./base/loader/coff_sym.h	/^} DNR, *pDNR;$/;"	t	typeref:struct:__anon114
DOMAIN_ID	./dev/arm/energy_ctrl.hh	/^        DOMAIN_ID,$/;"	e	enum:EnergyCtrl::Registers
DOUBLE_TO_LONG	./arch/arm/types.hh	/^        DOUBLE_TO_LONG,$/;"	e	enum:ArmISA::ConvertType
DOUBLE_TO_LONG	./arch/mips/types.hh	/^    DOUBLE_TO_LONG,$/;"	e	enum:MipsISA::ConvertType
DOUBLE_TO_SINGLE	./arch/arm/types.hh	/^        DOUBLE_TO_SINGLE,$/;"	e	enum:ArmISA::ConvertType
DOUBLE_TO_SINGLE	./arch/mips/types.hh	/^    DOUBLE_TO_SINGLE,$/;"	e	enum:MipsISA::ConvertType
DOUBLE_TO_WORD	./arch/arm/types.hh	/^        DOUBLE_TO_WORD,$/;"	e	enum:ArmISA::ConvertType
DOUBLE_TO_WORD	./arch/mips/types.hh	/^    DOUBLE_TO_WORD,$/;"	e	enum:MipsISA::ConvertType
DPRINTF	./base/trace.hh	172;"	d
DPRINTF	./base/trace.hh	212;"	d
DPRINTFN	./base/trace.hh	200;"	d
DPRINTFN	./base/trace.hh	216;"	d
DPRINTFNR	./base/trace.hh	204;"	d
DPRINTFNR	./base/trace.hh	217;"	d
DPRINTFR	./base/trace.hh	188;"	d
DPRINTFR	./base/trace.hh	214;"	d
DPRINTFS	./base/trace.hh	180;"	d
DPRINTFS	./base/trace.hh	213;"	d
DRAMCtrl	./mem/DRAMCtrl.py	/^class DRAMCtrl(AbstractMemory):$/;"	c
DRAMCtrl	./mem/dram_ctrl.cc	/^DRAMCtrl::DRAMCtrl(const DRAMCtrlParams* p) :$/;"	f	class:DRAMCtrl
DRAMCtrl	./mem/dram_ctrl.hh	/^class DRAMCtrl : public AbstractMemory$/;"	c
DRAMPacket	./mem/dram_ctrl.hh	/^        DRAMPacket(PacketPtr _pkt, bool is_read, uint8_t _rank, uint8_t _bank,$/;"	f	class:DRAMCtrl::DRAMPacket
DRAMPacket	./mem/dram_ctrl.hh	/^    class DRAMPacket {$/;"	c	class:DRAMCtrl
DRAMPower	./mem/drampower.cc	/^DRAMPower::DRAMPower(const DRAMCtrlParams* p, bool include_io) :$/;"	f	class:DRAMPower
DRAMPower	./mem/drampower.hh	/^class DRAMPower$/;"	c
DRAMSim	./mem/dramsim2_wrapper.hh	/^namespace DRAMSim {$/;"	n
DRAMSim2	./mem/DRAMSim2.py	/^class DRAMSim2(AbstractMemory):$/;"	c
DRAMSim2	./mem/dramsim2.cc	/^DRAMSim2::DRAMSim2(const Params* p) :$/;"	f	class:DRAMSim2
DRAMSim2	./mem/dramsim2.hh	/^class DRAMSim2 : public AbstractMemory$/;"	c
DRAMSim2Wrapper	./mem/dramsim2_wrapper.cc	/^DRAMSim2Wrapper::DRAMSim2Wrapper(const std::string& config_file,$/;"	f	class:DRAMSim2Wrapper
DRAMSim2Wrapper	./mem/dramsim2_wrapper.hh	/^class DRAMSim2Wrapper$/;"	c
DRIVE_LBA_BIT	./dev/storage/ide_disk.hh	121;"	d
DRIVE_OFFSET	./dev/storage/ide_disk.hh	106;"	d
DS	./arch/x86/decoder_tables.cc	/^    const uint8_t DS = DSOverride;$/;"	m	namespace:X86ISA	file:
DSOverride	./arch/x86/types.hh	/^        DSOverride,$/;"	e	enum:X86ISA::Prefixes
DSP_C	./arch/mips/dsp.hh	/^    DSP_C,         \/\/ carry bit$/;"	e	enum:MipsISA::__anon86
DSP_CCOND	./arch/mips/dsp.hh	/^    DSP_CCOND,     \/\/ condition code$/;"	e	enum:MipsISA::__anon86
DSP_CTL_MASK	./arch/mips/dsp.hh	/^const uint32_t DSP_CTL_MASK[DSP_NUM_FIELDS] =$/;"	m	namespace:MipsISA
DSP_CTL_POS	./arch/mips/dsp.hh	/^const uint32_t DSP_CTL_POS[DSP_NUM_FIELDS] = { 0, 7, 13, 16, 24, 14 };$/;"	m	namespace:MipsISA
DSP_EFI	./arch/mips/dsp.hh	/^    DSP_EFI,       \/\/ extract fail indicator bit$/;"	e	enum:MipsISA::__anon86
DSP_NUM_FIELDS	./arch/mips/dsp.hh	/^    DSP_NUM_FIELDS$/;"	e	enum:MipsISA::__anon86
DSP_OUFLAG	./arch/mips/dsp.hh	/^    DSP_OUFLAG,    \/\/ overflow-underflow flag$/;"	e	enum:MipsISA::__anon86
DSP_POS	./arch/mips/dsp.hh	/^    DSP_POS,       \/\/ insertion bitfield position$/;"	e	enum:MipsISA::__anon86
DSP_SCOUNT	./arch/mips/dsp.hh	/^    DSP_SCOUNT,    \/\/ insertion bitfield size$/;"	e	enum:MipsISA::__anon86
DTBWaitResponse	./cpu/simple/base.hh	/^        DTBWaitResponse,$/;"	e	enum:BaseSimpleCPU::Status
DTB_ASN_ASN	./arch/alpha/ev5.hh	/^inline int DTB_ASN_ASN(uint64_t reg) { return reg >> 57 & AsnMask; }$/;"	f	namespace:AlphaISA
DTB_CM_CM	./arch/alpha/ev5.hh	/^inline uint64_t DTB_CM_CM(uint64_t reg) { return reg >> 3 & 0x3; }$/;"	f	namespace:AlphaISA
DTB_PTE_ASMA	./arch/alpha/ev5.hh	/^inline int DTB_PTE_ASMA(uint64_t reg) { return reg >> 4 & 0x1; }$/;"	f	namespace:AlphaISA
DTB_PTE_FONR	./arch/alpha/ev5.hh	/^inline int DTB_PTE_FONR(uint64_t reg) { return reg >> 1 & 0x1; }$/;"	f	namespace:AlphaISA
DTB_PTE_FONW	./arch/alpha/ev5.hh	/^inline int DTB_PTE_FONW(uint64_t reg) { return reg >> 2 & 0x1; }$/;"	f	namespace:AlphaISA
DTB_PTE_GH	./arch/alpha/ev5.hh	/^inline int DTB_PTE_GH(uint64_t reg) { return reg >> 5 & 0x3; }$/;"	f	namespace:AlphaISA
DTB_PTE_PPN	./arch/alpha/ev5.hh	/^inline Addr DTB_PTE_PPN(uint64_t reg)$/;"	f	namespace:AlphaISA
DTB_PTE_XRE	./arch/alpha/ev5.hh	/^inline int DTB_PTE_XRE(uint64_t reg) { return reg >> 8 & 0xf; }$/;"	f	namespace:AlphaISA
DTB_PTE_XWE	./arch/alpha/ev5.hh	/^inline int DTB_PTE_XWE(uint64_t reg) { return reg >> 12 & 0xf; }$/;"	f	namespace:AlphaISA
DTRACE	./base/trace.hh	164;"	d
DTRACE	./base/trace.hh	210;"	d
DTickEvent	./cpu/simple/timing.hh	/^            DTickEvent(TimingSimpleCPU *_cpu)$/;"	f	struct:TimingSimpleCPU::DcachePort::DTickEvent
DTickEvent	./cpu/simple/timing.hh	/^        struct DTickEvent : public TickEvent$/;"	s	class:TimingSimpleCPU::DcachePort
DVFSHandler	./sim/DVFSHandler.py	/^class DVFSHandler(SimObject):$/;"	c
DVFSHandler	./sim/dvfs_handler.cc	/^DVFSHandler::DVFSHandler(const Params *p)$/;"	f	class:DVFSHandler
DVFSHandler	./sim/dvfs_handler.hh	/^class DVFSHandler : public SimObject$/;"	c
DVFS_DOMAINID_AT_INDEX	./dev/arm/energy_ctrl.hh	/^        DVFS_DOMAINID_AT_INDEX,$/;"	e	enum:EnergyCtrl::Registers
DVFS_HANDLER_STATUS	./dev/arm/energy_ctrl.hh	/^        DVFS_HANDLER_STATUS = 0,$/;"	e	enum:EnergyCtrl::Registers
DVFS_HANDLER_TRANS_LATENCY	./dev/arm/energy_ctrl.hh	/^        DVFS_HANDLER_TRANS_LATENCY,$/;"	e	enum:EnergyCtrl::Registers
DVFS_NUM_DOMAINS	./dev/arm/energy_ctrl.hh	/^        DVFS_NUM_DOMAINS,$/;"	e	enum:EnergyCtrl::Registers
DVFS_Update_Pri	./sim/eventq.hh	/^    static const Priority DVFS_Update_Pri =             31;$/;"	m	class:EventBase
DW	./arch/x86/decoder_tables.cc	/^        DW = DWordImm,$/;"	e	enum:X86ISA::SizeType	file:
DWordImm	./arch/x86/decoder_tables.cc	/^        DWordImm,$/;"	e	enum:X86ISA::SizeType	file:
Dah	./arch/micro_asm_test.py	/^class Dah(object):$/;"	c
Data	./python/m5/util/jobfile.py	/^class Data(object):$/;"	c
Data	./sim/arguments.hh	/^        Data(){}$/;"	f	class:Arguments::Data
Data	./sim/arguments.hh	/^    class Data$/;"	c	class:Arguments
DataAbort	./arch/arm/faults.hh	/^    DataAbort(Addr _addr, TlbEntry::DomainType _domain, bool _write, uint8_t _source,$/;"	f	class:ArmISA::DataAbort
DataAbort	./arch/arm/faults.hh	/^class DataAbort : public AbortFault<DataAbort>$/;"	c	namespace:ArmISA
DataAccessError	./arch/sparc/faults.hh	/^class DataAccessError : public SparcFault<DataAccessError> {};$/;"	c	namespace:SparcISA
DataAccessException	./arch/sparc/faults.hh	/^class DataAccessException : public SparcFault<DataAccessException> {};$/;"	c	namespace:SparcISA
DataAccessProtection	./arch/sparc/faults.hh	/^class DataAccessProtection : public SparcFault<DataAccessProtection> {};$/;"	c	namespace:SparcISA
DataBlock	./mem/ruby/common/DataBlock.cc	/^DataBlock::DataBlock(const DataBlock &cp)$/;"	f	class:DataBlock
DataBlock	./mem/ruby/common/DataBlock.hh	/^    DataBlock()$/;"	f	class:DataBlock
DataBlock	./mem/ruby/common/DataBlock.hh	/^class DataBlock$/;"	c
DataDistribution	./dev/arm/FlashDevice.py	/^class DataDistribution(Enum): vals = ['sequential', 'stripe']$/;"	c
DataDouble	./sim/insttracer.hh	/^        DataDouble = 3$/;"	e	enum:Trace::InstRecord::__anon111
DataEvent	./base/vnc/vncserver.cc	/^VncServer::DataEvent::DataEvent(VncServer *vs, int fd, int e)$/;"	f	class:VncServer::DataEvent
DataEvent	./base/vnc/vncserver.hh	/^    class DataEvent: public PollEvent$/;"	c	class:VncServer
DataEvent	./dev/terminal.cc	/^Terminal::DataEvent::DataEvent(Terminal *t, int fd, int e)$/;"	f	class:Terminal::DataEvent
DataEvent	./dev/terminal.hh	/^    class DataEvent : public PollEvent$/;"	c	class:Terminal
DataImmOp	./arch/arm/insts/pred_inst.hh	/^    DataImmOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::DataImmOp
DataImmOp	./arch/arm/insts/pred_inst.hh	/^class DataImmOp : public PredOp$/;"	c	namespace:ArmISA
DataInt16	./sim/insttracer.hh	/^        DataInt16 = 2,$/;"	e	enum:Trace::InstRecord::__anon111
DataInt32	./sim/insttracer.hh	/^        DataInt32 = 4,$/;"	e	enum:Trace::InstRecord::__anon111
DataInt64	./sim/insttracer.hh	/^        DataInt64 = 8,$/;"	e	enum:Trace::InstRecord::__anon111
DataInt8	./sim/insttracer.hh	/^        DataInt8 = 1,   \/\/ set to equal number of bytes$/;"	e	enum:Trace::InstRecord::__anon111
DataInvalid	./sim/insttracer.hh	/^        DataInvalid = 0,$/;"	e	enum:Trace::InstRecord::__anon111
DataInvalidTSBEntry	./arch/sparc/faults.hh	/^class DataInvalidTSBEntry : public SparcFault<DataInvalidTSBEntry> {};$/;"	c	namespace:SparcISA
DataMember	./mem/slicc/symbols/Type.py	/^class DataMember(Var):$/;"	c
DataRealTranslationMiss	./arch/sparc/faults.hh	/^class DataRealTranslationMiss : public SparcFault<DataRealTranslationMiss> {};$/;"	c	namespace:SparcISA
DataReg	./dev/arm/rtc_pl031.hh	/^        DataReg    = 0x00,$/;"	e	enum:PL031::__anon24
DataRegOp	./arch/arm/insts/pred_inst.hh	/^    DataRegOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::DataRegOp
DataRegOp	./arch/arm/insts/pred_inst.hh	/^class DataRegOp : public PredOp$/;"	c	namespace:ArmISA
DataRegRegOp	./arch/arm/insts/pred_inst.hh	/^    DataRegRegOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::DataRegRegOp
DataRegRegOp	./arch/arm/insts/pred_inst.hh	/^class DataRegRegOp : public PredOp$/;"	c	namespace:ArmISA
DataTranslation	./cpu/translation.hh	/^    DataTranslation(ExecContextPtr _xc, WholeTranslationState* _state)$/;"	f	class:DataTranslation
DataTranslation	./cpu/translation.hh	/^    DataTranslation(ExecContextPtr _xc, WholeTranslationState* _state,$/;"	f	class:DataTranslation
DataTranslation	./cpu/translation.hh	/^class DataTranslation : public BaseTLB::Translation$/;"	c
DataWrap	./base/statistics.hh	/^    DataWrap()$/;"	f	class:Stats::DataWrap
DataWrap	./base/statistics.hh	/^    DataWrap(const DataWrap &stat) {}$/;"	f	class:Stats::DataWrap
DataWrap	./base/statistics.hh	/^class DataWrap : public InfoAccess$/;"	c	namespace:Stats
DataWrapVec	./base/statistics.hh	/^    DataWrapVec()$/;"	f	class:Stats::DataWrapVec
DataWrapVec	./base/statistics.hh	/^    DataWrapVec(const DataWrapVec &ref)$/;"	f	class:Stats::DataWrapVec
DataWrapVec	./base/statistics.hh	/^class DataWrapVec : public DataWrap<Derived, InfoProxyType>$/;"	c	namespace:Stats
DataWrapVec2d	./base/statistics.hh	/^class DataWrapVec2d : public DataWrapVec<Derived, InfoProxyType>$/;"	c	namespace:Stats
DataX1Reg2ImmOp	./arch/arm/insts/data64.hh	/^    DataX1Reg2ImmOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::DataX1Reg2ImmOp
DataX1Reg2ImmOp	./arch/arm/insts/data64.hh	/^class DataX1Reg2ImmOp : public ArmStaticInst$/;"	c	namespace:ArmISA
DataX1RegImmOp	./arch/arm/insts/data64.hh	/^    DataX1RegImmOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::DataX1RegImmOp
DataX1RegImmOp	./arch/arm/insts/data64.hh	/^class DataX1RegImmOp : public ArmStaticInst$/;"	c	namespace:ArmISA
DataX1RegOp	./arch/arm/insts/data64.hh	/^    DataX1RegOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::DataX1RegOp
DataX1RegOp	./arch/arm/insts/data64.hh	/^class DataX1RegOp : public ArmStaticInst$/;"	c	namespace:ArmISA
DataX2RegImmOp	./arch/arm/insts/data64.hh	/^    DataX2RegImmOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::DataX2RegImmOp
DataX2RegImmOp	./arch/arm/insts/data64.hh	/^class DataX2RegImmOp : public ArmStaticInst$/;"	c	namespace:ArmISA
DataX2RegOp	./arch/arm/insts/data64.hh	/^    DataX2RegOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::DataX2RegOp
DataX2RegOp	./arch/arm/insts/data64.hh	/^class DataX2RegOp : public ArmStaticInst$/;"	c	namespace:ArmISA
DataX3RegOp	./arch/arm/insts/data64.hh	/^    DataX3RegOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::DataX3RegOp
DataX3RegOp	./arch/arm/insts/data64.hh	/^class DataX3RegOp : public ArmStaticInst$/;"	c	namespace:ArmISA
DataXCondCompImmOp	./arch/arm/insts/data64.hh	/^    DataXCondCompImmOp(const char *mnem, ExtMachInst _machInst,$/;"	f	class:ArmISA::DataXCondCompImmOp
DataXCondCompImmOp	./arch/arm/insts/data64.hh	/^class DataXCondCompImmOp : public ArmStaticInst$/;"	c	namespace:ArmISA
DataXCondCompRegOp	./arch/arm/insts/data64.hh	/^    DataXCondCompRegOp(const char *mnem, ExtMachInst _machInst,$/;"	f	class:ArmISA::DataXCondCompRegOp
DataXCondCompRegOp	./arch/arm/insts/data64.hh	/^class DataXCondCompRegOp : public ArmStaticInst$/;"	c	namespace:ArmISA
DataXCondSelOp	./arch/arm/insts/data64.hh	/^    DataXCondSelOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::DataXCondSelOp
DataXCondSelOp	./arch/arm/insts/data64.hh	/^class DataXCondSelOp : public ArmStaticInst$/;"	c	namespace:ArmISA
DataXERegOp	./arch/arm/insts/data64.hh	/^    DataXERegOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::DataXERegOp
DataXERegOp	./arch/arm/insts/data64.hh	/^class DataXERegOp : public ArmStaticInst$/;"	c	namespace:ArmISA
DataXImmOnlyOp	./arch/arm/insts/data64.hh	/^    DataXImmOnlyOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::DataXImmOnlyOp
DataXImmOnlyOp	./arch/arm/insts/data64.hh	/^class DataXImmOnlyOp : public ArmStaticInst$/;"	c	namespace:ArmISA
DataXImmOp	./arch/arm/insts/data64.hh	/^    DataXImmOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::DataXImmOp
DataXImmOp	./arch/arm/insts/data64.hh	/^class DataXImmOp : public ArmStaticInst$/;"	c	namespace:ArmISA
DataXSRegOp	./arch/arm/insts/data64.hh	/^    DataXSRegOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::DataXSRegOp
DataXSRegOp	./arch/arm/insts/data64.hh	/^class DataXSRegOp : public ArmStaticInst$/;"	c	namespace:ArmISA
Data_Ready_INTRQ_In	./dev/storage/ide_disk.hh	/^    Data_Ready_INTRQ_In,$/;"	e	enum:DevState
Data_Ready_INTRQ_Out	./dev/storage/ide_disk.hh	/^    Data_Ready_INTRQ_Out,$/;"	e	enum:DevState
DcachePort	./cpu/minor/lsq.hh	/^        DcachePort(std::string name, LSQ &lsq_, MinorCPU &cpu) :$/;"	f	class:Minor::LSQ::DcachePort
DcachePort	./cpu/minor/lsq.hh	/^    class DcachePort : public MinorCPU::MinorCPUPort$/;"	c	class:Minor::LSQ
DcachePort	./cpu/o3/cpu.hh	/^        DcachePort(LSQ<Impl> *_lsq, FullO3CPU<Impl>* _cpu)$/;"	f	class:FullO3CPU::DcachePort
DcachePort	./cpu/o3/cpu.hh	/^    class DcachePort : public MasterPort$/;"	c	class:FullO3CPU
DcachePort	./cpu/simple/timing.hh	/^        DcachePort(TimingSimpleCPU *_cpu)$/;"	f	class:TimingSimpleCPU::DcachePort
DcachePort	./cpu/simple/timing.hh	/^    class DcachePort : public TimingCPUPort$/;"	c	class:TimingSimpleCPU
DcachePort	./cpu/trace/trace_cpu.hh	/^        DcachePort(TraceCPU* _cpu)$/;"	f	class:TraceCPU::DcachePort
DcachePort	./cpu/trace/trace_cpu.hh	/^    class DcachePort : public MasterPort$/;"	c	class:TraceCPU
DcacheRetry	./cpu/simple/base.hh	/^        DcacheRetry,$/;"	e	enum:BaseSimpleCPU::Status
DcacheWaitResponse	./cpu/simple/base.hh	/^        DcacheWaitResponse,$/;"	e	enum:BaseSimpleCPU::Status
DcacheWaitSwitch	./cpu/simple/base.hh	/^        DcacheWaitSwitch,$/;"	e	enum:BaseSimpleCPU::Status
Debug	./base/debug.cc	/^namespace Debug {$/;"	n	file:
Debug	./base/debug.hh	/^namespace Debug {$/;"	n
DebugBreakEvent	./sim/debug.cc	/^DebugBreakEvent::DebugBreakEvent(Tick when)$/;"	f	class:DebugBreakEvent
DebugBreakEvent	./sim/debug.cc	/^struct DebugBreakEvent : public GlobalEvent$/;"	s	file:
DebugEvent	./arch/arm/faults.hh	/^        DebugEvent = PermissionLL + 4,$/;"	e	enum:ArmISA::ArmFault::FaultSource
DebugException	./arch/x86/faults.hh	/^        DebugException() :$/;"	f	class:X86ISA::DebugException
DebugException	./arch/x86/faults.hh	/^    class DebugException : public X86FaultBase$/;"	c	namespace:X86ISA
DebugFunc	./arch/generic/debugfaults.hh	/^    enum DebugFunc$/;"	g	class:GenericISA::M5DebugFault
DebugPrintfEvent	./kern/tru64/tru64_events.hh	/^    DebugPrintfEvent(PCEventQueue *q, const std::string &desc, Addr addr,$/;"	f	class:DebugPrintfEvent
DebugPrintfEvent	./kern/tru64/tru64_events.hh	/^class DebugPrintfEvent : public PCEvent$/;"	c
DebugPrintfrEvent	./kern/tru64/tru64_events.hh	/^    DebugPrintfrEvent(PCEventQueue *q, const std::string &desc, Addr addr)$/;"	f	class:DebugPrintfrEvent
DebugPrintfrEvent	./kern/tru64/tru64_events.hh	/^class DebugPrintfrEvent : public DebugPrintfEvent$/;"	c
DebugPrintkEvent	./kern/linux/events.hh	/^    DebugPrintkEvent(PCEventQueue *q, const std::string &desc, Addr addr)$/;"	f	class:Linux::DebugPrintkEvent
DebugPrintkEvent	./kern/linux/events.hh	/^class DebugPrintkEvent : public SkipFuncEvent$/;"	c	namespace:Linux
Debug_Break_Pri	./sim/eventq.hh	/^    static const Priority Debug_Break_Pri =           -100;$/;"	m	class:EventBase
Debug_Enable_Pri	./sim/eventq.hh	/^    static const Priority Debug_Enable_Pri =          -101;$/;"	m	class:EventBase
DeclAST	./mem/slicc/ast/DeclAST.py	/^class DeclAST(AST):$/;"	c
DeclListAST	./mem/slicc/ast/DeclListAST.py	/^class DeclListAST(AST):$/;"	c
Decode	./cpu/minor/decode.cc	/^Decode::Decode(const std::string &name,$/;"	f	class:Minor::Decode
Decode	./cpu/minor/decode.hh	/^class Decode : public Named$/;"	c	namespace:Minor
Decode	./cpu/o3/cpu_policy.hh	/^    typedef DefaultDecode<Impl> Decode;$/;"	t	struct:SimpleCPUPolicy
DecodeCache	./cpu/decode_cache.hh	/^namespace DecodeCache$/;"	n
DecodeIdx	./cpu/o3/cpu.hh	/^        DecodeIdx,$/;"	e	enum:FullO3CPU::StageIdx
DecodePages	./arch/x86/decoder.hh	/^    typedef DecodeCache::AddrMap<Decoder::InstBytes> DecodePages;$/;"	t	class:X86ISA::Decoder
DecodeStageId	./cpu/minor/pipeline.hh	/^        Fetch1StageId, Fetch2StageId, DecodeStageId, ExecuteStageId,$/;"	e	enum:Minor::Pipeline::StageId
DecodeStatus	./cpu/o3/decode.hh	/^    enum DecodeStatus {$/;"	g	class:DefaultDecode
DecodeStruct	./cpu/o3/cpu.hh	/^    typedef typename CPUPolicy::DecodeStruct DecodeStruct;$/;"	t	class:FullO3CPU
DecodeStruct	./cpu/o3/cpu_policy.hh	/^    typedef DefaultDecodeDefaultRename<Impl> DecodeStruct;$/;"	t	struct:SimpleCPUPolicy
DecodeStruct	./cpu/o3/decode.hh	/^    typedef typename CPUPol::DecodeStruct DecodeStruct;$/;"	t	class:DefaultDecode
DecodeStruct	./cpu/o3/rename.hh	/^    typedef typename CPUPol::DecodeStruct DecodeStruct;$/;"	t	class:DefaultRename
Decoder	./arch/alpha/decoder.hh	/^    Decoder(ISA* isa = nullptr) : instDone(false)$/;"	f	class:AlphaISA::Decoder
Decoder	./arch/alpha/decoder.hh	/^class Decoder$/;"	c	namespace:AlphaISA
Decoder	./arch/arm/decoder.cc	/^Decoder::Decoder(ISA* isa)$/;"	f	class:ArmISA::Decoder
Decoder	./arch/arm/decoder.hh	/^class Decoder$/;"	c	namespace:ArmISA
Decoder	./arch/mips/decoder.hh	/^    Decoder(ISA* isa = nullptr) : instDone(false)$/;"	f	class:MipsISA::Decoder
Decoder	./arch/mips/decoder.hh	/^class Decoder$/;"	c	namespace:MipsISA
Decoder	./arch/power/decoder.hh	/^    Decoder(ISA* isa = nullptr) : instDone(false)$/;"	f	class:PowerISA::Decoder
Decoder	./arch/power/decoder.hh	/^class Decoder$/;"	c	namespace:PowerISA
Decoder	./arch/sparc/decoder.hh	/^    Decoder(ISA* isa = nullptr) : instDone(false), asi(0)$/;"	f	class:SparcISA::Decoder
Decoder	./arch/sparc/decoder.hh	/^class Decoder$/;"	c	namespace:SparcISA
Decoder	./arch/x86/decoder.hh	/^    Decoder(ISA* isa = nullptr) : basePC(0), origPC(0), offset(0),$/;"	f	class:X86ISA::Decoder
Decoder	./arch/x86/decoder.hh	/^class Decoder$/;"	c	namespace:X86ISA
DecoderFaultInst	./arch/arm/insts/pseudo.cc	/^DecoderFaultInst::DecoderFaultInst(ExtMachInst _machInst)$/;"	f	class:DecoderFaultInst
DecoderFaultInst	./arch/arm/insts/pseudo.hh	/^class DecoderFaultInst : public ArmStaticInst$/;"	c
DecoderFlavour	./arch/arm/ArmISA.py	/^class DecoderFlavour(Enum): vals = ['Generic']$/;"	c
DecrementAfter	./arch/arm/insts/mem.hh	/^        DecrementAfter,$/;"	e	enum:ArmISA::RfeOp::AddrMode
DecrementAfter	./arch/arm/insts/mem.hh	/^        DecrementAfter,$/;"	e	enum:ArmISA::SrsOp::AddrMode
DecrementBefore	./arch/arm/insts/mem.hh	/^        DecrementBefore,$/;"	e	enum:ArmISA::RfeOp::AddrMode
DecrementBefore	./arch/arm/insts/mem.hh	/^        DecrementBefore,$/;"	e	enum:ArmISA::SrsOp::AddrMode
DefaultBTB	./cpu/pred/btb.cc	/^DefaultBTB::DefaultBTB(unsigned _numEntries,$/;"	f	class:DefaultBTB
DefaultBTB	./cpu/pred/btb.hh	/^class DefaultBTB$/;"	c
DefaultCommit	./cpu/o3/commit.hh	/^class DefaultCommit$/;"	c
DefaultCommit	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::DefaultCommit(O3CPU *_cpu, DerivO3CPUParams *params)$/;"	f	class:DefaultCommit
DefaultDecode	./cpu/o3/decode.hh	/^class DefaultDecode$/;"	c
DefaultDecode	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::DefaultDecode(O3CPU *_cpu, DerivO3CPUParams *params)$/;"	f	class:DefaultDecode
DefaultDecodeDefaultRename	./cpu/o3/comm.hh	/^struct DefaultDecodeDefaultRename {$/;"	s
DefaultFUPool	./cpu/o3/FUPool.py	/^class DefaultFUPool(FUPool):$/;"	c
DefaultFetch	./cpu/o3/fetch.hh	/^class DefaultFetch$/;"	c
DefaultFetch	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::DefaultFetch(O3CPU *_cpu, DerivO3CPUParams *params)$/;"	f	class:DefaultFetch
DefaultFetchDefaultDecode	./cpu/o3/comm.hh	/^struct DefaultFetchDefaultDecode {$/;"	s
DefaultIEW	./cpu/o3/iew.hh	/^class DefaultIEW$/;"	c
DefaultIEW	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::DefaultIEW(O3CPU *_cpu, DerivO3CPUParams *params)$/;"	f	class:DefaultIEW
DefaultIEWDefaultCommit	./cpu/o3/comm.hh	/^struct DefaultIEWDefaultCommit {$/;"	s
DefaultRename	./cpu/o3/rename.hh	/^class DefaultRename$/;"	c
DefaultRename	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::DefaultRename(O3CPU *_cpu, DerivO3CPUParams *params)$/;"	f	class:DefaultRename
DefaultRenameDefaultIEW	./cpu/o3/comm.hh	/^struct DefaultRenameDefaultIEW {$/;"	s
Default_Pri	./sim/eventq.hh	/^    static const Priority Default_Pri =                  0;$/;"	m	class:EventBase
DefaultsAndDisable	./dev/x86/i8042.hh	/^        DefaultsAndDisable = 0xF6,$/;"	e	enum:X86ISA::PS2Keyboard::Command
DefaultsAndDisable	./dev/x86/i8042.hh	/^        DefaultsAndDisable = 0xF6,$/;"	e	enum:X86ISA::PS2Mouse::Command
DeferredPacket	./mem/bridge.hh	/^        DeferredPacket(PacketPtr _pkt, Tick _tick) : tick(_tick), pkt(_pkt)$/;"	f	class:Bridge::DeferredPacket
DeferredPacket	./mem/bridge.hh	/^    class DeferredPacket$/;"	c	class:Bridge
DeferredPacket	./mem/cache/prefetch/queued.hh	/^        DeferredPacket(Tick t, PacketPtr p) : tick(t), pkt(p) {}$/;"	f	struct:QueuedPrefetcher::DeferredPacket
DeferredPacket	./mem/cache/prefetch/queued.hh	/^    struct DeferredPacket {$/;"	s	class:QueuedPrefetcher
DeferredPacket	./mem/packet_queue.hh	/^        DeferredPacket(Tick t, PacketPtr p)$/;"	f	class:PacketQueue::DeferredPacket
DeferredPacket	./mem/packet_queue.hh	/^    class DeferredPacket {$/;"	c	class:PacketQueue
DeferredPacket	./mem/serial_link.hh	/^        DeferredPacket(PacketPtr _pkt, Tick _tick) : tick(_tick), pkt(_pkt)$/;"	f	class:SerialLink::DeferredPacket
DeferredPacket	./mem/serial_link.hh	/^    class DeferredPacket$/;"	c	class:SerialLink
DeferredPacket	./mem/simple_mem.hh	/^        DeferredPacket(PacketPtr _pkt, Tick _tick) : tick(_tick), pkt(_pkt)$/;"	f	class:SimpleMemory::DeferredPacket
DeferredPacket	./mem/simple_mem.hh	/^    class DeferredPacket$/;"	c	class:SimpleMemory
DeferredPacketList	./mem/packet_queue.hh	/^    typedef std::list<DeferredPacket> DeferredPacketList;$/;"	t	class:PacketQueue
DelayFunction	./sim/eventq.hh	/^DelayFunction(EventQueue *eventq, Tick when, T *object)$/;"	f
DelaySlotPCState	./arch/generic/types.hh	/^    DelaySlotPCState() {}$/;"	f	class:GenericISA::DelaySlotPCState
DelaySlotPCState	./arch/generic/types.hh	/^    DelaySlotPCState(Addr val) { set(val); }$/;"	f	class:GenericISA::DelaySlotPCState
DelaySlotPCState	./arch/generic/types.hh	/^class DelaySlotPCState : public SimplePCState<MachInst>$/;"	c	namespace:GenericISA
DelaySlotUPCState	./arch/generic/types.hh	/^    DelaySlotUPCState() {}$/;"	f	class:GenericISA::DelaySlotUPCState
DelaySlotUPCState	./arch/generic/types.hh	/^    DelaySlotUPCState(Addr val) { set(val); }$/;"	f	class:GenericISA::DelaySlotUPCState
DelaySlotUPCState	./arch/generic/types.hh	/^class DelaySlotUPCState : public DelaySlotPCState<MachInst>$/;"	c	namespace:GenericISA
Delayed_Writeback_Pri	./sim/eventq.hh	/^    static const Priority Delayed_Writeback_Pri =       -1;$/;"	m	class:EventBase
DeliveryMode	./arch/x86/intmessage.hh	/^    namespace DeliveryMode$/;"	n	namespace:X86ISA
DepEntry	./cpu/o3/dep_graph.hh	/^    typedef DependencyEntry<DynInstPtr> DepEntry;$/;"	t	class:DependencyGraph
DependenceTags	./arch/alpha/registers.hh	/^enum DependenceTags {$/;"	g	namespace:AlphaISA
DependenceTags	./arch/sparc/registers.hh	/^enum DependenceTags {$/;"	g	namespace:SparcISA
DependenceTags	./arch/x86/registers.hh	/^enum DependenceTags {$/;"	g	namespace:X86ISA
DependencyEntry	./cpu/o3/dep_graph.hh	/^    DependencyEntry()$/;"	f	class:DependencyEntry
DependencyEntry	./cpu/o3/dep_graph.hh	/^class DependencyEntry$/;"	c
DependencyGraph	./cpu/o3/dep_graph.hh	/^    DependencyGraph()$/;"	f	class:DependencyGraph
DependencyGraph	./cpu/o3/dep_graph.hh	/^class DependencyGraph$/;"	c
DerivO3CPU	./cpu/o3/O3CPU.py	/^class DerivO3CPU(BaseCPU):$/;"	c
DerivO3CPU	./cpu/o3/deriv.hh	/^    DerivO3CPU(DerivO3CPUParams *p)$/;"	f	class:DerivO3CPU
DerivO3CPU	./cpu/o3/deriv.hh	/^class DerivO3CPU : public FullO3CPU<O3CPUImpl>$/;"	c
DerivedClockDomain	./sim/ClockDomain.py	/^class DerivedClockDomain(ClockDomain):$/;"	c
DerivedClockDomain	./sim/clock_domain.cc	/^DerivedClockDomain::DerivedClockDomain(const Params *p) :$/;"	f	class:DerivedClockDomain
DerivedClockDomain	./sim/clock_domain.hh	/^class DerivedClockDomain: public ClockDomain$/;"	c
Desc	./dev/net/dist_iface.hh	/^            Desc() : sendTick(0), sendDelay(0) {}$/;"	f	struct:DistIface::RecvScheduler::Desc
Desc	./dev/net/dist_iface.hh	/^            Desc(EthPacketPtr p, Tick s, Tick d) :$/;"	f	struct:DistIface::RecvScheduler::Desc
Desc	./dev/net/dist_iface.hh	/^            Desc(const Desc &d) :$/;"	f	struct:DistIface::RecvScheduler::Desc
Desc	./dev/net/dist_iface.hh	/^        struct Desc : public Serializable$/;"	s	class:DistIface::RecvScheduler
DescCache	./dev/net/i8254xGBe.cc	/^IGbE::DescCache<T>::DescCache(IGbE *i, const std::string n, int s)$/;"	f	class:IGbE::DescCache
DescCache	./dev/net/i8254xGBe.hh	/^    class DescCache : public Serializable$/;"	c	class:IGbE
DescriptorBase	./arch/arm/table_walker.hh	/^    class DescriptorBase {$/;"	c	class:ArmISA::TableWalker
DescriptorFetch	./dev/pci/copy_engine.hh	/^            DescriptorFetch,$/;"	e	enum:CopyEngine::CopyEngineChannel::ChannelState
DevAction	./dev/storage/ide_disk.hh	/^typedef enum DevAction {$/;"	g
DevAction_t	./dev/storage/ide_disk.hh	/^} DevAction_t;$/;"	t	typeref:enum:DevAction
DevMondo	./arch/sparc/faults.hh	/^class DevMondo : public SparcFault<DevMondo> {};$/;"	c	namespace:SparcISA
DevState	./dev/storage/ide_disk.hh	/^typedef enum DevState {$/;"	g
DevState_t	./dev/storage/ide_disk.hh	/^} DevState_t;$/;"	t	typeref:enum:DevState
Deviation	./base/stats/info.hh	/^enum DistType { Deviation, Dist, Hist };$/;"	e	enum:Stats::DistType
Device	./arch/arm/pagetable.hh	/^        Device,$/;"	m	class:ArmISA::TlbEntry::MemoryType
Device	./dev/arm/rv_ctrl.hh	/^        Device(RealViewCtrl &parent, DeviceFunc func,$/;"	f	class:RealViewCtrl::Device
Device	./dev/arm/rv_ctrl.hh	/^    class Device$/;"	c	class:RealViewCtrl
Device	./dev/net/sinic.cc	/^Device::Device(const Params *p)$/;"	f	class:Sinic::Device
Device	./dev/net/sinic.hh	/^class Device : public Base$/;"	c	namespace:Sinic
DeviceFunc	./dev/arm/rv_ctrl.hh	/^    enum DeviceFunc {$/;"	g	class:RealViewCtrl
DeviceID	./dev/net/Ethernet.py	/^    DeviceID = 0x0022$/;"	v	class:NSGigE
DeviceID	./dev/net/Ethernet.py	/^    DeviceID = 0x1075$/;"	v	class:IGbE_e1000
DeviceID	./dev/net/Ethernet.py	/^    DeviceID = 0x10C9$/;"	v	class:IGbE_igb
DeviceID	./dev/net/Ethernet.py	/^    DeviceID = 0x1293$/;"	v	class:Sinic
DeviceID	./dev/pci/CopyEngine.py	/^    DeviceID = 0x1a38$/;"	v	class:CopyEngine
DeviceID	./dev/pci/PciDevice.py	/^    DeviceID = Param.UInt16("Device ID")$/;"	v	class:PciDevice
DeviceID	./dev/storage/Ide.py	/^    DeviceID = 0x7111$/;"	v	class:IdeController
DeviceID	./dev/virtio/VirtIO.py	/^    DeviceID = 0x1000$/;"	v	class:PciVirtIO
DeviceId	./dev/sparc/iob.hh	/^    enum DeviceId {$/;"	g	class:Iob
DeviceId	./dev/virtio/base.hh	/^    typedef uint16_t DeviceId;$/;"	t	class:VirtIODeviceBase
DeviceInterface	./dev/pci/host.cc	/^PciHost::DeviceInterface::DeviceInterface($/;"	f	class:PciHost::DeviceInterface
DeviceInterface	./dev/pci/host.hh	/^    class DeviceInterface$/;"	c	class:PciHost
DeviceNotAvailable	./arch/x86/faults.hh	/^        DeviceNotAvailable() :$/;"	f	class:X86ISA::DeviceNotAvailable
DeviceNotAvailable	./arch/x86/faults.hh	/^    class DeviceNotAvailable : public X86Fault$/;"	c	namespace:X86ISA
DeviceRegisterAddress	./dev/net/ns_gige_reg.h	/^enum DeviceRegisterAddress {$/;"	g
DeviceTiming	./dev/storage/ide_ctrl.cc	/^    DeviceTiming = 0x44,$/;"	e	enum:ConfRegOffset	file:
Device_Dma_Abort	./dev/storage/ide_disk.hh	/^    Device_Dma_Abort$/;"	e	enum:DevState
Device_Idle_NS	./dev/storage/ide_disk.hh	/^    Device_Idle_NS,$/;"	e	enum:DevState
Device_Idle_S	./dev/storage/ide_disk.hh	/^    Device_Idle_S = 0,$/;"	e	enum:DevState
Device_Idle_SI	./dev/storage/ide_disk.hh	/^    Device_Idle_SI,$/;"	e	enum:DevState
Device_Srst	./dev/storage/ide_disk.hh	/^    Device_Srst,$/;"	e	enum:DevState
DiagnosticDump	./dev/x86/i8042.hh	/^        DiagnosticDump = 0xAC,$/;"	e	enum:X86ISA::I8042::Command
DiagnosticEcho	./dev/x86/i8042.hh	/^        DiagnosticEcho = 0xEE,$/;"	e	enum:X86ISA::PS2Keyboard::Command
DiodDataEvent	./dev/virtio/fs9p.hh	/^        DiodDataEvent(VirtIO9PDiod &_parent, int fd, int event)$/;"	f	class:VirtIO9PDiod::DiodDataEvent
DiodDataEvent	./dev/virtio/fs9p.hh	/^    class DiodDataEvent : public PollEvent$/;"	c	class:VirtIO9PDiod
DirectedGenerator	./cpu/testers/directedtest/DirectedGenerator.cc	/^DirectedGenerator::DirectedGenerator(const Params *p)$/;"	f	class:DirectedGenerator
DirectedGenerator	./cpu/testers/directedtest/DirectedGenerator.hh	/^class DirectedGenerator : public SimObject $/;"	c
DirectedGenerator	./cpu/testers/directedtest/RubyDirectedTester.py	/^class DirectedGenerator(SimObject):$/;"	c
DirectedStartEvent	./cpu/testers/directedtest/RubyDirectedTester.hh	/^        DirectedStartEvent(RubyDirectedTester *_tester)$/;"	f	class:RubyDirectedTester::DirectedStartEvent
DirectedStartEvent	./cpu/testers/directedtest/RubyDirectedTester.hh	/^    class DirectedStartEvent : public Event$/;"	c	class:RubyDirectedTester
Directive	./arch/micro_asm.py	/^class Directive(Statement):$/;"	c
DirectoryMemory	./mem/ruby/structures/DirectoryMemory.cc	/^DirectoryMemory::DirectoryMemory(const Params *p)$/;"	f	class:DirectoryMemory
DirectoryMemory	./mem/ruby/structures/DirectoryMemory.hh	/^class DirectoryMemory : public SimObject$/;"	c
Disable	./dev/ps2.hh	/^    Disable         = 0xf5,$/;"	e	enum:Ps2::__anon4
Disable	./dev/x86/i8042.hh	/^        Disable = 0xF5,$/;"	e	enum:X86ISA::PS2Keyboard::Command
DisableA20	./dev/x86/i8042.hh	/^        DisableA20 = 0xDD,$/;"	e	enum:X86ISA::I8042::Command
DisableKeyboard	./dev/x86/i8042.hh	/^        DisableKeyboard = 0xAD,$/;"	e	enum:X86ISA::I8042::Command
DisableMouse	./dev/x86/i8042.hh	/^        DisableMouse = 0xA7,$/;"	e	enum:X86ISA::I8042::Command
DisableReporting	./dev/x86/i8042.hh	/^        DisableReporting = 0xF5,$/;"	e	enum:X86ISA::PS2Mouse::Command
DiskImage	./dev/storage/DiskImage.py	/^class DiskImage(SimObject):$/;"	c
DiskImage	./dev/storage/disk_image.hh	/^    DiskImage(const Params *p) : SimObject(p), initialized(false) {}$/;"	f	class:DiskImage
DiskImage	./dev/storage/disk_image.hh	/^class DiskImage : public SimObject$/;"	c
DisplacementState	./arch/x86/decoder.hh	/^        DisplacementState,$/;"	e	enum:X86ISA::Decoder::State
DisplayTimings	./dev/pixelpump.cc	/^DisplayTimings::DisplayTimings(unsigned _width, unsigned _height,$/;"	f	class:DisplayTimings
DisplayTimings	./dev/pixelpump.hh	/^struct DisplayTimings : public Serializable$/;"	s
Dist	./base/stats/info.hh	/^enum DistType { Deviation, Dist, Hist };$/;"	e	enum:Stats::DistType
DistBase	./base/statistics.hh	/^    DistBase() { }$/;"	f	class:Stats::DistBase
DistBase	./base/statistics.hh	/^class DistBase : public DataWrap<Derived, DistInfoProxy>$/;"	c	namespace:Stats
DistData	./base/stats/info.hh	/^struct DistData$/;"	s	namespace:Stats
DistEtherLink	./dev/net/Ethernet.py	/^class DistEtherLink(EtherObject):$/;"	c
DistEtherLink	./dev/net/dist_etherlink.cc	/^DistEtherLink::DistEtherLink(const Params *p)$/;"	f	class:DistEtherLink
DistEtherLink	./dev/net/dist_etherlink.hh	/^class DistEtherLink : public EtherObject$/;"	c
DistHeaderPkt	./dev/net/dist_packet.hh	/^    DistHeaderPkt() {}$/;"	f	class:DistHeaderPkt
DistHeaderPkt	./dev/net/dist_packet.hh	/^class DistHeaderPkt$/;"	c
DistIface	./dev/net/dist_iface.cc	/^DistIface::DistIface(unsigned dist_rank,$/;"	f	class:DistIface
DistIface	./dev/net/dist_iface.hh	/^class DistIface : public Drainable, public Serializable$/;"	c
DistInfo	./base/stats/info.hh	/^class DistInfo : public Info$/;"	c	namespace:Stats
DistInfoProxy	./base/statistics.hh	/^    DistInfoProxy(Stat &stat) : InfoProxy<Stat, DistInfo>(stat) {}$/;"	f	class:Stats::DistInfoProxy
DistInfoProxy	./base/statistics.hh	/^class DistInfoProxy : public InfoProxy<Stat, DistInfo>$/;"	c	namespace:Stats
DistParams	./base/statistics.hh	/^    DistParams(DistType t) : type(t) {}$/;"	f	struct:Stats::DistParams
DistParams	./base/statistics.hh	/^struct DistParams : public StorageParams$/;"	s	namespace:Stats
DistPrint	./base/stats/text.cc	/^DistPrint::DistPrint(const Text *text, const DistInfo &info)$/;"	f	class:Stats::DistPrint
DistPrint	./base/stats/text.cc	/^DistPrint::DistPrint(const Text *text, const VectorDistInfo &info, int i)$/;"	f	class:Stats::DistPrint
DistPrint	./base/stats/text.cc	/^struct DistPrint$/;"	s	namespace:Stats	file:
DistProxy	./base/statistics.hh	/^    DistProxy(Stat &s, off_type i)$/;"	f	class:Stats::DistProxy
DistProxy	./base/statistics.hh	/^    DistProxy(const DistProxy &sp)$/;"	f	class:Stats::DistProxy
DistProxy	./base/statistics.hh	/^class DistProxy$/;"	c	namespace:Stats
DistStor	./base/statistics.hh	/^    DistStor(Info *info)$/;"	f	class:Stats::DistStor
DistStor	./base/statistics.hh	/^class DistStor$/;"	c	namespace:Stats
DistType	./base/stats/info.hh	/^enum DistType { Deviation, Dist, Hist };$/;"	g	namespace:Stats
Distribution	./base/statistics.hh	/^class Distribution : public DistBase<Distribution, DistStor>$/;"	c	namespace:Stats
DivideByZero	./arch/mips/registers.hh	/^    DivideByZero,$/;"	e	enum:MipsISA::FCSRBits
DivideError	./arch/x86/faults.hh	/^        DivideError() :$/;"	f	class:X86ISA::DivideError
DivideError	./arch/x86/faults.hh	/^    class DivideError : public X86Fault$/;"	c	namespace:X86ISA
DivisionByZero	./arch/sparc/faults.hh	/^class DivisionByZero : public SparcFault<DivisionByZero> {};$/;"	c	namespace:SparcISA
DmaDesc	./dev/pci/copy_engine_defs.hh	/^struct DmaDesc {$/;"	s	namespace:CopyEngineReg
DmaDevice	./dev/Device.py	/^class DmaDevice(PioDevice):$/;"	c
DmaDevice	./dev/dma_device.cc	/^DmaDevice::DmaDevice(const Params *p)$/;"	f	class:DmaDevice
DmaDevice	./dev/dma_device.hh	/^class DmaDevice : public PioDevice$/;"	c
DmaDoneEvent	./dev/arm/pl111.hh	/^        DmaDoneEvent(Pl111 *_obj)$/;"	f	class:Pl111::DmaDoneEvent
DmaDoneEvent	./dev/arm/pl111.hh	/^    class DmaDoneEvent : public Event$/;"	c	class:Pl111
DmaDoneEvent	./dev/dma_device.cc	/^DmaReadFifo::DmaDoneEvent::DmaDoneEvent(DmaReadFifo *_parent,$/;"	f	class:DmaReadFifo::DmaDoneEvent
DmaDoneEvent	./dev/dma_device.hh	/^    class DmaDoneEvent : public Event$/;"	c	class:DmaReadFifo
DmaDoneEventUPtr	./dev/dma_device.hh	/^    typedef std::unique_ptr<DmaDoneEvent> DmaDoneEventUPtr;$/;"	t	class:DmaReadFifo
DmaEngine	./dev/arm/hdlcd.cc	/^HDLcd::DmaEngine::DmaEngine(HDLcd &_parent, size_t size,$/;"	f	class:HDLcd::DmaEngine
DmaEngine	./dev/arm/hdlcd.hh	/^    class DmaEngine : public DmaReadFifo$/;"	c	class:HDLcd
DmaPort	./dev/dma_device.cc	/^DmaPort::DmaPort(MemObject *dev, System *s)$/;"	f	class:DmaPort
DmaPort	./dev/dma_device.hh	/^class DmaPort : public MasterPort, public Drainable$/;"	c
DmaRead	./dev/storage/ide_disk.hh	/^    DmaRead,$/;"	e	enum:Events
DmaReadFifo	./dev/dma_device.cc	/^DmaReadFifo::DmaReadFifo(DmaPort &_port, size_t size,$/;"	f	class:DmaReadFifo
DmaReadFifo	./dev/dma_device.hh	/^class DmaReadFifo : public Drainable, public Serializable$/;"	c
DmaReqState	./dev/dma_device.hh	/^        DmaReqState(Event *ce, Addr tb, Tick _delay)$/;"	f	struct:DmaPort::DmaReqState
DmaReqState	./dev/dma_device.hh	/^    struct DmaReqState : public Packet::SenderState$/;"	s	class:DmaPort
DmaState	./dev/net/ns_gige.hh	/^    enum DmaState$/;"	g	class:NSGigE
DmaState	./dev/storage/ide_disk.hh	/^typedef enum DmaState {$/;"	g
DmaState_t	./dev/storage/ide_disk.hh	/^} DmaState_t;$/;"	t	typeref:enum:DmaState
DmaWrite	./dev/storage/ide_disk.hh	/^    DmaWrite$/;"	e	enum:Events
Dma_Idle	./dev/storage/ide_disk.hh	/^    Dma_Idle = 0,$/;"	e	enum:DmaState
Dma_Start	./dev/storage/ide_disk.hh	/^    Dma_Start,$/;"	e	enum:DmaState
Dma_Transfer	./dev/storage/ide_disk.hh	/^    Dma_Transfer$/;"	e	enum:DmaState
DomainID	./sim/clock_domain.hh	/^    typedef int32_t DomainID;$/;"	t	class:SrcClockDomain
DomainID	./sim/dvfs_handler.hh	/^    typedef SrcClockDomain::DomainID DomainID;$/;"	t	class:DVFSHandler
DomainLL	./arch/arm/faults.hh	/^        DomainLL = AccessFlagLL + 4,$/;"	e	enum:ArmISA::ArmFault::FaultSource
DomainType	./arch/arm/pagetable.hh	/^    enum class DomainType : std::uint8_t {$/;"	c	struct:ArmISA::TlbEntry
Domains	./sim/dvfs_handler.hh	/^    typedef std::map<DomainID, SrcClockDomain*> Domains;$/;"	t	class:DVFSHandler
DoneEvent	./dev/net/dist_etherlink.hh	/^        typedef EventWrapper<RxLink, &RxLink::rxDone> DoneEvent;$/;"	t	class:DistEtherLink::RxLink
DoneEvent	./dev/net/dist_etherlink.hh	/^        typedef EventWrapper<TxLink, &TxLink::txDone> DoneEvent;$/;"	t	class:DistEtherLink::TxLink
DoneEvent	./dev/net/etherbus.hh	/^        DoneEvent(EtherBus *b) : bus(b) {}$/;"	f	class:EtherBus::DoneEvent
DoneEvent	./dev/net/etherbus.hh	/^    class DoneEvent : public Event$/;"	c	class:EtherBus
DoneEvent	./dev/net/etherlink.hh	/^        typedef EventWrapper<Link, &Link::txDone> DoneEvent;$/;"	t	class:EtherLink::Link
DoubleFault	./arch/x86/faults.hh	/^        DoubleFault() :$/;"	f	class:X86ISA::DoubleFault
DoubleFault	./arch/x86/faults.hh	/^    class DoubleFault : public X86Abort$/;"	c	namespace:X86ISA
DrainAllInsts	./cpu/minor/execute.hh	/^        DrainAllInsts \/* Discarding all remaining insts *\/$/;"	e	enum:Minor::Execute::DrainState
DrainCurrentInst	./cpu/minor/execute.hh	/^        DrainCurrentInst, \/* Draining to end of inst\/macroop *\/$/;"	e	enum:Minor::Execute::DrainState
DrainHaltFetch	./cpu/minor/execute.hh	/^        DrainHaltFetch, \/* Halting Fetch after completing current inst *\/$/;"	e	enum:Minor::Execute::DrainState
DrainManager	./sim/drain.cc	/^DrainManager::DrainManager()$/;"	f	class:DrainManager
DrainManager	./sim/drain.hh	/^class DrainManager$/;"	c
DrainState	./cpu/minor/execute.hh	/^    enum DrainState$/;"	g	class:Minor::Execute
DrainState	./sim/drain.hh	/^enum class DrainState {$/;"	c
Drainable	./sim/drain.cc	/^Drainable::Drainable()$/;"	f	class:Drainable
Drainable	./sim/drain.hh	/^class Drainable$/;"	c
Draining	./sim/drain.hh	/^    Draining, \/** Draining buffers pending serialization\/handover *\/$/;"	m	class:DrainState
DramGen	./cpu/testers/traffic_gen/generators.hh	/^    DramGen(const std::string& _name, MasterID master_id, Tick _duration,$/;"	f	class:DramGen
DramGen	./cpu/testers/traffic_gen/generators.hh	/^class DramGen : public RandomGen$/;"	c
DramRotGen	./cpu/testers/traffic_gen/generators.hh	/^    DramRotGen(const std::string& _name, MasterID master_id, Tick _duration,$/;"	f	class:DramRotGen
DramRotGen	./cpu/testers/traffic_gen/generators.hh	/^class DramRotGen : public DramGen$/;"	c
DspStateDisabledFault	./arch/mips/faults.hh	/^class DspStateDisabledFault : public MipsFault<DspStateDisabledFault> {};$/;"	c	namespace:MipsISA
DtbAcvFault	./arch/alpha/faults.hh	/^    DtbAcvFault(VAddr vaddr, Request::Flags reqFlags, uint64_t flags)$/;"	f	class:AlphaISA::DtbAcvFault
DtbAcvFault	./arch/alpha/faults.hh	/^class DtbAcvFault : public DtbFault$/;"	c	namespace:AlphaISA
DtbAlignmentFault	./arch/alpha/faults.hh	/^    DtbAlignmentFault(VAddr vaddr, Request::Flags reqFlags, uint64_t flags)$/;"	f	class:AlphaISA::DtbAlignmentFault
DtbAlignmentFault	./arch/alpha/faults.hh	/^class DtbAlignmentFault : public DtbFault$/;"	c	namespace:AlphaISA
DtbFault	./arch/alpha/faults.hh	/^    DtbFault(VAddr _vaddr, Request::Flags _reqFlags, uint64_t _flags)$/;"	f	class:AlphaISA::DtbFault
DtbFault	./arch/alpha/faults.hh	/^class DtbFault : public AlphaFault$/;"	c	namespace:AlphaISA
DtbObject	./base/loader/dtb_object.cc	/^DtbObject::DtbObject(const std::string &_filename, size_t _len, uint8_t *_data,$/;"	f	class:DtbObject
DtbObject	./base/loader/dtb_object.hh	/^class DtbObject : public ObjectFile$/;"	c
DtbPageFault	./arch/alpha/faults.hh	/^    DtbPageFault(VAddr vaddr, Request::Flags reqFlags, uint64_t flags)$/;"	f	class:AlphaISA::DtbPageFault
DtbPageFault	./arch/alpha/faults.hh	/^class DtbPageFault : public DtbFault$/;"	c	namespace:AlphaISA
DumbTOD	./dev/sparc/T1000.py	/^class DumbTOD(BasicPioDevice):$/;"	c
DumbTOD	./dev/sparc/dtod.cc	/^DumbTOD::DumbTOD(const Params *p)$/;"	f	class:DumbTOD
DumbTOD	./dev/sparc/dtod.hh	/^class DumbTOD : public BasicPioDevice$/;"	c
DummyChecker	./cpu/DummyChecker.py	/^class DummyChecker(CheckerCPU):$/;"	c
DummyChecker	./cpu/dummy_checker.hh	/^    DummyChecker(Params *p)$/;"	f	class:DummyChecker
DummyChecker	./cpu/dummy_checker.hh	/^class DummyChecker : public CheckerCPU$/;"	c
DummyISADevice	./arch/arm/isa_device.hh	/^    DummyISADevice()$/;"	f	class:ArmISA::DummyISADevice
DummyISADevice	./arch/arm/isa_device.hh	/^class DummyISADevice : public BaseISADevice$/;"	c	namespace:ArmISA
DumpMbuf	./kern/tru64/dump_mbuf.cc	/^DumpMbuf(Arguments args)$/;"	f	namespace:tru64
DumpMbufEvent	./kern/tru64/tru64_events.hh	/^    DumpMbufEvent(PCEventQueue *q, const std::string &desc, Addr addr)$/;"	f	class:DumpMbufEvent
DumpMbufEvent	./kern/tru64/tru64_events.hh	/^class DumpMbufEvent : public PCEvent$/;"	c
DumpStatsPCEvent	./arch/arm/linux/system.hh	/^    DumpStatsPCEvent(PCEventQueue *q, const std::string &desc, Addr addr)$/;"	f	class:DumpStatsPCEvent
DumpStatsPCEvent	./arch/arm/linux/system.hh	/^class DumpStatsPCEvent : public PCEvent$/;"	c
DumpStatsPCEventF	./arch/arm/freebsd/system.hh	/^    DumpStatsPCEventF(PCEventQueue *q, const std::string &desc, Addr addr)$/;"	f	class:DumpStatsPCEventF
DumpStatsPCEventF	./arch/arm/freebsd/system.hh	/^class DumpStatsPCEventF : public PCEvent$/;"	c
DynInst	./cpu/o3/fetch.hh	/^    typedef typename Impl::DynInst DynInst;$/;"	t	class:DefaultFetch
DynInst	./cpu/o3/impl.hh	/^    typedef BaseO3DynInst<O3CPUImpl> DynInst;$/;"	t	struct:O3CPUImpl
DynInstPtr	./cpu/base_dyn_inst.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:BaseDynInst
DynInstPtr	./cpu/checker/cpu.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:Checker
DynInstPtr	./cpu/o3/comm.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	struct:DefaultDecodeDefaultRename
DynInstPtr	./cpu/o3/comm.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	struct:DefaultFetchDefaultDecode
DynInstPtr	./cpu/o3/comm.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	struct:DefaultIEWDefaultCommit
DynInstPtr	./cpu/o3/comm.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	struct:DefaultRenameDefaultIEW
DynInstPtr	./cpu/o3/comm.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	struct:IssueStruct
DynInstPtr	./cpu/o3/comm.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	struct:TimeBufStruct
DynInstPtr	./cpu/o3/commit.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:DefaultCommit
DynInstPtr	./cpu/o3/cpu.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:FullO3CPU
DynInstPtr	./cpu/o3/decode.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:DefaultDecode
DynInstPtr	./cpu/o3/fetch.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:DefaultFetch
DynInstPtr	./cpu/o3/iew.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:DefaultIEW
DynInstPtr	./cpu/o3/impl.hh	/^    typedef RefCountingPtr<DynInst> DynInstPtr;$/;"	t	struct:O3CPUImpl
DynInstPtr	./cpu/o3/inst_queue.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:InstructionQueue
DynInstPtr	./cpu/o3/lsq.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:LSQ
DynInstPtr	./cpu/o3/lsq_unit.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:LSQUnit
DynInstPtr	./cpu/o3/mem_dep_unit.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:MemDepUnit
DynInstPtr	./cpu/o3/probe/elastic_trace.hh	/^    typedef typename O3CPUImpl::DynInstPtr DynInstPtr;$/;"	t	class:ElasticTrace
DynInstPtr	./cpu/o3/rename.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:DefaultRename
DynInstPtr	./cpu/o3/rob.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:ROB
Dynamic	./cpu/o3/inst_queue.hh	/^        Dynamic,$/;"	e	enum:InstructionQueue::IQPolicy
Dynamic	./cpu/o3/lsq.hh	/^        Dynamic,$/;"	e	enum:LSQ::LSQPolicy
Dynamic	./cpu/o3/rob.hh	/^        Dynamic,$/;"	e	enum:ROB::ROBPolicy
E	./arch/x86/regs/int.hh	/^        Bitfield<31,0> E;$/;"	m	namespace:X86ISA
E820Entry	./arch/x86/bios/e820.hh	/^        E820Entry(Params *p) :$/;"	f	class:X86ISA::E820Entry
E820Entry	./arch/x86/bios/e820.hh	/^    class E820Entry : public SimObject$/;"	c	namespace:X86ISA
E820Table	./arch/x86/bios/e820.hh	/^        E820Table(Params *p) : SimObject(p), entries(p->entries)$/;"	f	class:X86ISA::E820Table
E820Table	./arch/x86/bios/e820.hh	/^    class E820Table : public SimObject$/;"	c	namespace:X86ISA
EACalcDone	./cpu/base_dyn_inst.hh	/^        EACalcDone,$/;"	e	enum:BaseDynInst::Flags
ECF	./arch/x86/insts/microop.hh	/^            ECF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
ECFBit	./arch/x86/regs/misc.hh	/^        ECFBit = 1 << 3,$/;"	e	enum:X86ISA::CondFlagBit
ECOFF_BADMAG	./arch/alpha/ecoff_machdep.h	61;"	d
ECOFF_BLOCK_ALIGN	./base/loader/exec_ecoff.h	91;"	d
ECOFF_DATOFF	./base/loader/exec_ecoff.h	100;"	d
ECOFF_FLAG_EXEC	./arch/alpha/ecoff_machdep.h	65;"	d
ECOFF_FLAG_OBJECT_TYPE_MASK	./arch/alpha/ecoff_machdep.h	69;"	d
ECOFF_HDR_SIZE	./base/loader/exec_ecoff.h	82;"	d
ECOFF_LDPGSZ	./arch/alpha/ecoff_machdep.h	49;"	d
ECOFF_MACHDEP	./arch/alpha/ecoff_machdep.h	54;"	d
ECOFF_MACHDEP	./base/loader/exec_ecoff.h	/^        ECOFF_MACHDEP;$/;"	m	struct:ecoff_aouthdr
ECOFF_MAGIC_ALPHA	./arch/alpha/ecoff_machdep.h	59;"	d
ECOFF_MAGIC_NETBSD_ALPHA	./arch/alpha/ecoff_machdep.h	60;"	d
ECOFF_NMAGIC	./base/loader/exec_ecoff.h	85;"	d
ECOFF_OBJECT_TYPE_CALL_SHARED	./arch/alpha/ecoff_machdep.h	72;"	d
ECOFF_OBJECT_TYPE_NO_SHARED	./arch/alpha/ecoff_machdep.h	70;"	d
ECOFF_OBJECT_TYPE_SHARABLE	./arch/alpha/ecoff_machdep.h	71;"	d
ECOFF_OMAGIC	./base/loader/exec_ecoff.h	84;"	d
ECOFF_PAD	./arch/alpha/ecoff_machdep.h	51;"	d
ECOFF_ROUND	./base/loader/exec_ecoff.h	88;"	d
ECOFF_SEGMENT_ALIGN	./base/loader/exec_ecoff.h	103;"	d
ECOFF_SEGMENT_ALIGNMENT	./arch/alpha/ecoff_machdep.h	66;"	d
ECOFF_TXTOFF	./base/loader/exec_ecoff.h	95;"	d
ECOFF_ZMAGIC	./base/loader/exec_ecoff.h	86;"	d
EC_DATA_ABORT_CURR_EL	./arch/arm/types.hh	/^        EC_DATA_ABORT_CURR_EL      = 0x25,  \/\/ AArch64 alias$/;"	e	enum:ArmISA::ExceptionClass
EC_DATA_ABORT_FROM_HYP	./arch/arm/types.hh	/^        EC_DATA_ABORT_FROM_HYP     = 0x25,$/;"	e	enum:ArmISA::ExceptionClass
EC_DATA_ABORT_LOWER_EL	./arch/arm/types.hh	/^        EC_DATA_ABORT_LOWER_EL     = 0x24,  \/\/ AArch64 alias$/;"	e	enum:ArmISA::ExceptionClass
EC_DATA_ABORT_TO_HYP	./arch/arm/types.hh	/^        EC_DATA_ABORT_TO_HYP       = 0x24,$/;"	e	enum:ArmISA::ExceptionClass
EC_FP_EXCEPTION	./arch/arm/types.hh	/^        EC_FP_EXCEPTION            = 0x28,$/;"	e	enum:ArmISA::ExceptionClass
EC_FP_EXCEPTION_64	./arch/arm/types.hh	/^        EC_FP_EXCEPTION_64         = 0x2C,$/;"	e	enum:ArmISA::ExceptionClass
EC_HVC	./arch/arm/types.hh	/^        EC_HVC                     = 0x12,$/;"	e	enum:ArmISA::ExceptionClass
EC_HVC_64	./arch/arm/types.hh	/^        EC_HVC_64                  = 0x16,$/;"	e	enum:ArmISA::ExceptionClass
EC_ILLEGAL_INST	./arch/arm/types.hh	/^        EC_ILLEGAL_INST            = 0xE,$/;"	e	enum:ArmISA::ExceptionClass
EC_INVALID	./arch/arm/types.hh	/^        EC_INVALID                 = -1,$/;"	e	enum:ArmISA::ExceptionClass
EC_PC_ALIGNMENT	./arch/arm/types.hh	/^        EC_PC_ALIGNMENT            = 0x22,$/;"	e	enum:ArmISA::ExceptionClass
EC_PREFETCH_ABORT_CURR_EL	./arch/arm/types.hh	/^        EC_PREFETCH_ABORT_CURR_EL  = 0x21,  \/\/ AArch64 alias$/;"	e	enum:ArmISA::ExceptionClass
EC_PREFETCH_ABORT_FROM_HYP	./arch/arm/types.hh	/^        EC_PREFETCH_ABORT_FROM_HYP = 0x21,$/;"	e	enum:ArmISA::ExceptionClass
EC_PREFETCH_ABORT_LOWER_EL	./arch/arm/types.hh	/^        EC_PREFETCH_ABORT_LOWER_EL = 0x20,  \/\/ AArch64 alias$/;"	e	enum:ArmISA::ExceptionClass
EC_PREFETCH_ABORT_TO_HYP	./arch/arm/types.hh	/^        EC_PREFETCH_ABORT_TO_HYP   = 0x20,$/;"	e	enum:ArmISA::ExceptionClass
EC_SERROR	./arch/arm/types.hh	/^        EC_SERROR                  = 0x2F$/;"	e	enum:ArmISA::ExceptionClass
EC_SMC	./arch/arm/types.hh	/^        EC_SMC                     = 0x13,  \/\/ AArch64 alias$/;"	e	enum:ArmISA::ExceptionClass
EC_SMC_64	./arch/arm/types.hh	/^        EC_SMC_64                  = 0x17,$/;"	e	enum:ArmISA::ExceptionClass
EC_SMC_TO_HYP	./arch/arm/types.hh	/^        EC_SMC_TO_HYP              = 0x13,$/;"	e	enum:ArmISA::ExceptionClass
EC_STACK_PTR_ALIGNMENT	./arch/arm/types.hh	/^        EC_STACK_PTR_ALIGNMENT     = 0x26,$/;"	e	enum:ArmISA::ExceptionClass
EC_SVC	./arch/arm/types.hh	/^        EC_SVC                     = 0x11,  \/\/ AArch64 alias$/;"	e	enum:ArmISA::ExceptionClass
EC_SVC_64	./arch/arm/types.hh	/^        EC_SVC_64                  = 0x15,$/;"	e	enum:ArmISA::ExceptionClass
EC_SVC_TO_HYP	./arch/arm/types.hh	/^        EC_SVC_TO_HYP              = 0x11,$/;"	e	enum:ArmISA::ExceptionClass
EC_TRAPPED_BXJ	./arch/arm/types.hh	/^        EC_TRAPPED_BXJ             = 0xA,$/;"	e	enum:ArmISA::ExceptionClass
EC_TRAPPED_CP10_MRC_VMRS	./arch/arm/types.hh	/^        EC_TRAPPED_CP10_MRC_VMRS   = 0x8,$/;"	e	enum:ArmISA::ExceptionClass
EC_TRAPPED_CP14_LDC_STC	./arch/arm/types.hh	/^        EC_TRAPPED_CP14_LDC_STC    = 0x6,$/;"	e	enum:ArmISA::ExceptionClass
EC_TRAPPED_CP14_MCRR_MRRC	./arch/arm/types.hh	/^        EC_TRAPPED_CP14_MCRR_MRRC  = 0xC,$/;"	e	enum:ArmISA::ExceptionClass
EC_TRAPPED_CP14_MCR_MRC	./arch/arm/types.hh	/^        EC_TRAPPED_CP14_MCR_MRC    = 0x5,$/;"	e	enum:ArmISA::ExceptionClass
EC_TRAPPED_CP15_MCRR_MRRC	./arch/arm/types.hh	/^        EC_TRAPPED_CP15_MCRR_MRRC  = 0x4,$/;"	e	enum:ArmISA::ExceptionClass
EC_TRAPPED_CP15_MCR_MRC	./arch/arm/types.hh	/^        EC_TRAPPED_CP15_MCR_MRC    = 0x3,$/;"	e	enum:ArmISA::ExceptionClass
EC_TRAPPED_HCPTR	./arch/arm/types.hh	/^        EC_TRAPPED_HCPTR           = 0x7,$/;"	e	enum:ArmISA::ExceptionClass
EC_TRAPPED_MSR_MRS_64	./arch/arm/types.hh	/^        EC_TRAPPED_MSR_MRS_64      = 0x18,$/;"	e	enum:ArmISA::ExceptionClass
EC_TRAPPED_SIMD_FP	./arch/arm/types.hh	/^        EC_TRAPPED_SIMD_FP         = 0x7,   \/\/ AArch64 alias$/;"	e	enum:ArmISA::ExceptionClass
EC_TRAPPED_WFI_WFE	./arch/arm/types.hh	/^        EC_TRAPPED_WFI_WFE         = 0x1,$/;"	e	enum:ArmISA::ExceptionClass
EC_UNKNOWN	./arch/arm/types.hh	/^        EC_UNKNOWN                 = 0x0,$/;"	e	enum:ArmISA::ExceptionClass
EECD	./dev/net/i8254xGBe_defs.hh	/^    struct EECD : public Reg<uint32_t> { \/\/ 0x0010 EECD Register$/;"	s	struct:iGbReg::Regs
EEPROMAccessRegister	./dev/net/ns_gige_reg.h	/^enum EEPROMAccessRegister {$/;"	g
EEPROMState	./dev/net/ns_gige.hh	/^    enum EEPROMState$/;"	g	class:NSGigE
EEPROM_CSUM	./dev/net/i8254xGBe_defs.hh	/^const uint16_t EEPROM_CSUM              = 0xBABA;$/;"	m	namespace:iGbReg
EEPROM_PMATCH0_ADDR	./dev/net/ns_gige.hh	/^const uint8_t  EEPROM_PMATCH0_ADDR = 0xC; \/\/ EEPROM Address of PMATCH word 0$/;"	v
EEPROM_PMATCH1_ADDR	./dev/net/ns_gige.hh	/^const uint8_t  EEPROM_PMATCH1_ADDR = 0xB; \/\/ EEPROM Address of PMATCH word 1$/;"	v
EEPROM_PMATCH2_ADDR	./dev/net/ns_gige.hh	/^const uint8_t  EEPROM_PMATCH2_ADDR = 0xA; \/\/ EEPROM Address of PMATCH word 2$/;"	v
EEPROM_RDSR_OPCODE_SPI	./dev/net/i8254xGBe_defs.hh	/^const uint8_t EEPROM_RDSR_OPCODE_SPI    = 0x05;$/;"	m	namespace:iGbReg
EEPROM_READ	./dev/net/ns_gige.hh	/^const uint8_t  EEPROM_READ = 0x2;$/;"	v
EEPROM_READ_OPCODE_SPI	./dev/net/i8254xGBe_defs.hh	/^const uint8_t EEPROM_READ_OPCODE_SPI    = 0x03;$/;"	m	namespace:iGbReg
EEPROM_SIZE	./dev/net/i8254xGBe_defs.hh	/^const uint8_t EEPROM_SIZE               = 64;$/;"	m	namespace:iGbReg
EEPROM_SIZE	./dev/net/ns_gige.hh	/^const uint8_t  EEPROM_SIZE = 64; \/\/ Size in words of NSC93C46 EEPROM$/;"	v
EERD	./dev/net/i8254xGBe_defs.hh	/^    struct EERD : public Reg<uint32_t> { \/\/ 0x0014 EERD Register$/;"	s	struct:iGbReg::Regs
EL0	./arch/arm/types.hh	/^        EL0 = 0,$/;"	e	enum:ArmISA::ExceptionLevel
EL1	./arch/arm/types.hh	/^        EL1,$/;"	e	enum:ArmISA::ExceptionLevel
EL2	./arch/arm/types.hh	/^        EL2,$/;"	e	enum:ArmISA::ExceptionLevel
EL3	./arch/arm/types.hh	/^        EL3$/;"	e	enum:ArmISA::ExceptionLevel
ELIs64	./arch/arm/utility.cc	/^ELIs64(ThreadContext *tc, ExceptionLevel el)$/;"	f	namespace:ArmISA
EN	./arch/x86/decoder_tables.cc	/^        EN = Enter,$/;"	e	enum:X86ISA::SizeType	file:
EOI	./dev/arm/vgic.hh	/^    Bitfield<19> EOI;$/;"	m	class:VGic
EOICount	./dev/arm/vgic.hh	/^    Bitfield<31,27> EOICount;$/;"	m	class:VGic
EOImode	./dev/arm/vgic.hh	/^    Bitfield<9> EOImode;$/;"	m	class:VGic
ERROR_OFFSET	./dev/storage/ide_disk.hh	99;"	d
ES	./arch/x86/decoder_tables.cc	/^    const uint8_t ES = ESOverride;$/;"	m	namespace:X86ISA	file:
ESOverride	./arch/x86/types.hh	/^        ESOverride,$/;"	e	enum:X86ISA::Prefixes
EXPECTED_KVM_API_VERSION	./cpu/kvm/vm.cc	56;"	d	file:
EXPECT_EQ	./unittest/unittest.hh	112;"	d
EXPECT_FALSE	./unittest/unittest.hh	108;"	d
EXPECT_TRUE	./unittest/unittest.hh	105;"	d
EXTR	./base/loader/coff_sym.h	/^} EXTR, *pEXTR;$/;"	t	typeref:struct:ecoff_extsym
EXTRACT_FIELD	./arch/arm/kvm/arm_cpu.cc	57;"	d	file:
EXTRACT_FIELD	./arch/arm/kvm/armv8_cpu.cc	57;"	d	file:
EXTSTS_IPERR	./dev/net/ns_gige_reg.h	/^     EXTSTS_IPERR =     0x00040000,$/;"	e	enum:ExtendedFlagsForDescriptors
EXTSTS_IPPKT	./dev/net/ns_gige_reg.h	/^     EXTSTS_IPPKT =     0x00020000$/;"	e	enum:ExtendedFlagsForDescriptors
EXTSTS_TCPERR	./dev/net/ns_gige_reg.h	/^     EXTSTS_TCPERR =    0x00100000,$/;"	e	enum:ExtendedFlagsForDescriptors
EXTSTS_TCPPKT	./dev/net/ns_gige_reg.h	/^     EXTSTS_TCPPKT =    0x00080000,$/;"	e	enum:ExtendedFlagsForDescriptors
EXTSTS_UDPERR	./dev/net/ns_gige_reg.h	/^     EXTSTS_UDPERR =    0x00400000,$/;"	e	enum:ExtendedFlagsForDescriptors
EXTSTS_UDPPKT	./dev/net/ns_gige_reg.h	/^     EXTSTS_UDPPKT =    0x00200000,$/;"	e	enum:ExtendedFlagsForDescriptors
EZF	./arch/x86/insts/microop.hh	/^            EZF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
EZFBit	./arch/x86/regs/misc.hh	/^        EZFBit = 1 << 5,$/;"	e	enum:X86ISA::CondFlagBit
EcoffObject	./base/loader/ecoff_object.cc	/^EcoffObject::EcoffObject(const string &_filename, size_t _len, uint8_t *_data,$/;"	f	class:EcoffObject
EcoffObject	./base/loader/ecoff_object.hh	/^class EcoffObject : public ObjectFile$/;"	c
EffAddrValid	./cpu/base_dyn_inst.hh	/^        EffAddrValid,$/;"	e	enum:BaseDynInst::Flags
ElasticDataGen	./cpu/trace/trace_cpu.hh	/^        ElasticDataGen(TraceCPU& _owner, const std::string& _name,$/;"	f	class:TraceCPU::ElasticDataGen
ElasticDataGen	./cpu/trace/trace_cpu.hh	/^    class ElasticDataGen$/;"	c	class:TraceCPU
ElasticTrace	./cpu/o3/probe/ElasticTrace.py	/^class ElasticTrace(ProbeListenerObject):$/;"	c
ElasticTrace	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::ElasticTrace(const ElasticTraceParams* params)$/;"	f	class:ElasticTrace
ElasticTrace	./cpu/o3/probe/elastic_trace.hh	/^class ElasticTrace : public ProbeListenerObject$/;"	c
ElfObject	./base/loader/elf_object.cc	/^ElfObject::ElfObject(const string &_filename, size_t _len, uint8_t *_data,$/;"	f	class:ElfObject
ElfObject	./base/loader/elf_object.hh	/^class ElfObject : public ObjectFile$/;"	c
EmbeddedPython	./sim/init.cc	/^EmbeddedPython::EmbeddedPython(const char *filename, const char *abspath,$/;"	f	class:EmbeddedPython
EmbeddedPython	./sim/init.hh	/^struct EmbeddedPython$/;"	s
EmbeddedSwig	./sim/init.cc	/^EmbeddedSwig::EmbeddedSwig(void (*init_func)())$/;"	f	class:EmbeddedSwig
EmbeddedSwig	./sim/init.hh	/^struct EmbeddedSwig$/;"	s
EmptyPGE	./arch/alpha/linux/system.hh	/^    Addr EmptyPGE() const  { return KernelStart + 0x08000; }$/;"	f	class:LinuxAlphaSystem
EmptyPGE	./arch/mips/linux/system.hh	/^    Addr EmptyPGE() const  { return KernelStart + 0x08000; }$/;"	f	class:LinuxMipsSystem
EmptyPGT	./arch/alpha/linux/system.hh	/^    Addr EmptyPGT() const  { return KernelStart + 0x04000; }$/;"	f	class:LinuxAlphaSystem
EmptyPGT	./arch/mips/linux/system.hh	/^    Addr EmptyPGT() const  { return KernelStart + 0x04000; }$/;"	f	class:LinuxMipsSystem
EmulEnv	./arch/x86/emulenv.hh	/^        EmulEnv(RegIndex _reg, RegIndex _regm,$/;"	f	struct:X86ISA::EmulEnv
EmulEnv	./arch/x86/emulenv.hh	/^    struct EmulEnv$/;"	s	namespace:X86ISA
EmulatedDriver	./sim/Process.py	/^class EmulatedDriver(SimObject):$/;"	c
EmulatedDriver	./sim/emul_driver.hh	/^    EmulatedDriver(EmulatedDriverParams *p)$/;"	f	class:EmulatedDriver
EmulatedDriver	./sim/emul_driver.hh	/^class EmulatedDriver : public SimObject$/;"	c
En	./dev/arm/vgic.hh	/^    Bitfield<0> En;     \/\/ This gets written to enable, not group 1.$/;"	m	class:VGic
En	./dev/arm/vgic.hh	/^    Bitfield<0> En;$/;"	m	class:VGic
EnGrp1	./dev/arm/vgic.hh	/^    Bitfield<1> EnGrp1;$/;"	m	class:VGic
Enable	./dev/ps2.hh	/^    Enable          = 0xf4,$/;"	e	enum:Ps2::__anon4
Enable	./dev/x86/i8042.hh	/^        Enable = 0xF4,$/;"	e	enum:X86ISA::PS2Keyboard::Command
EnableA20	./dev/x86/i8042.hh	/^        EnableA20 = 0xDF,$/;"	e	enum:X86ISA::I8042::Command
EnableKeyboard	./dev/x86/i8042.hh	/^        EnableKeyboard = 0xAE,$/;"	e	enum:X86ISA::I8042::Command
EnableMouse	./dev/x86/i8042.hh	/^        EnableMouse = 0xA8,$/;"	e	enum:X86ISA::I8042::Command
EnableReporting	./dev/x86/i8042.hh	/^        EnableReporting = 0xF4,$/;"	e	enum:X86ISA::PS2Mouse::Command
Enable_Field	./arch/mips/registers.hh	/^    Enable_Field = 6,$/;"	e	enum:MipsISA::FCSRFields
EncodingCopyRect	./base/vnc/vncserver.hh	/^        EncodingCopyRect    = 1,$/;"	e	enum:VncServer::EncodingTypes
EncodingDesktopSize	./base/vnc/vncserver.hh	/^        EncodingDesktopSize = -223$/;"	e	enum:VncServer::EncodingTypes
EncodingHextile	./base/vnc/vncserver.hh	/^        EncodingHextile     = 5,$/;"	e	enum:VncServer::EncodingTypes
EncodingRaw	./base/vnc/vncserver.hh	/^        EncodingRaw         = 0,$/;"	e	enum:VncServer::EncodingTypes
EncodingTypes	./base/vnc/vncserver.hh	/^    enum EncodingTypes {$/;"	g	class:VncServer
EndBitUnion	./base/bitunion.hh	281;"	d
EndQuiesceEvent	./cpu/quiesce_event.cc	/^EndQuiesceEvent::EndQuiesceEvent(ThreadContext *_tc)$/;"	f	class:EndQuiesceEvent
EndQuiesceEvent	./cpu/quiesce_event.hh	/^class EndQuiesceEvent : public Event$/;"	c
EndSubBitUnion	./base/bitunion.hh	305;"	d
EndVAddrHole	./arch/sparc/isa_traits.hh	/^const Addr EndVAddrHole = ULL(0xFFFF7FFFFFFFFFFF);$/;"	m	namespace:SparcISA
EnergyCtrl	./dev/arm/EnergyCtrl.py	/^class EnergyCtrl(BasicPioDevice):$/;"	c
EnergyCtrl	./dev/arm/energy_ctrl.cc	/^EnergyCtrl::EnergyCtrl(const Params *p)$/;"	f	class:EnergyCtrl
EnergyCtrl	./dev/arm/energy_ctrl.hh	/^class EnergyCtrl : public BasicPioDevice$/;"	c
EnqueueStatementAST	./mem/slicc/ast/EnqueueStatementAST.py	/^class EnqueueStatementAST(StatementAST):$/;"	c
Enter	./arch/x86/decoder_tables.cc	/^        Enter,$/;"	e	enum:X86ISA::SizeType	file:
Entry	./base/inifile.hh	/^        Entry(const std::string &v)$/;"	f	class:IniFile::Entry
Entry	./base/inifile.hh	/^    class Entry$/;"	c	class:IniFile
EntryCache	./arch/alpha/tlb.hh	/^    TlbEntry *EntryCache[3];$/;"	m	class:AlphaISA::TLB
EntryList	./arch/x86/tlb.hh	/^        typedef std::list<TlbEntry *> EntryList;$/;"	t	class:X86ISA::TLB
EntryTable	./base/inifile.hh	/^        typedef std::unordered_map<std::string, Entry *> EntryTable;$/;"	t	class:IniFile::Section
EntryType	./arch/arm/table_walker.hh	/^        enum EntryType {$/;"	g	class:ArmISA::TableWalker::L1Descriptor
EntryType	./arch/arm/table_walker.hh	/^        enum EntryType {$/;"	g	class:ArmISA::TableWalker::LongDescriptor
EntryType	./arch/sparc/pagetable.hh	/^    enum EntryType {$/;"	g	class:SparcISA::PageTableEntry
Enum	./python/m5/params.py	/^class Enum(ParamValue):$/;"	c
EnumDeclAST	./mem/slicc/ast/EnumDeclAST.py	/^class EnumDeclAST(DeclAST):$/;"	c
EnumExprAST	./mem/slicc/ast/EnumExprAST.py	/^class EnumExprAST(ExprAST):$/;"	c
EnumeratedFault	./arch/sparc/faults.hh	/^    EnumeratedFault(uint32_t n) : SparcFault<T>(), _n(n) {}$/;"	f	class:SparcISA::EnumeratedFault
EnumeratedFault	./arch/sparc/faults.hh	/^class EnumeratedFault : public SparcFault<T>$/;"	c	namespace:SparcISA
Enumeration	./mem/slicc/symbols/Type.py	/^class Enumeration(PairContainer):$/;"	c
ErrSummaryBit	./arch/x86/regs/misc.hh	/^        ErrSummaryBit = 1 << 7,$/;"	e	enum:X86ISA::X87StatusBit
Error	./dev/sparc/iob.hh	/^        Error = 1,$/;"	e	enum:Iob::DeviceId
ErrorState	./arch/x86/decoder.hh	/^        ErrorState$/;"	e	enum:X86ISA::Decoder::State
EthAddr	./base/inet.cc	/^EthAddr::EthAddr()$/;"	f	class:Net::EthAddr
EthAddr	./base/inet.cc	/^EthAddr::EthAddr(const eth_addr &ea)$/;"	f	class:Net::EthAddr
EthAddr	./base/inet.cc	/^EthAddr::EthAddr(const std::string &addr)$/;"	f	class:Net::EthAddr
EthAddr	./base/inet.cc	/^EthAddr::EthAddr(const uint8_t ea[ETH_ADDR_LEN])$/;"	f	class:Net::EthAddr
EthAddr	./base/inet.hh	/^struct EthAddr : protected eth_addr$/;"	s	namespace:Net
EthHdr	./base/inet.hh	/^struct EthHdr : public eth_hdr$/;"	s	namespace:Net
EthPacketData	./dev/net/etherpkt.hh	/^    EthPacketData()$/;"	f	class:EthPacketData
EthPacketData	./dev/net/etherpkt.hh	/^    explicit EthPacketData(unsigned size)$/;"	f	class:EthPacketData
EthPacketData	./dev/net/etherpkt.hh	/^class EthPacketData$/;"	c
EthPacketPtr	./dev/net/etherpkt.hh	/^typedef std::shared_ptr<EthPacketData> EthPacketPtr;$/;"	t
EthPtr	./base/inet.hh	/^    EthPtr() {}$/;"	f	class:Net::EthPtr
EthPtr	./base/inet.hh	/^    EthPtr(const EthPacketPtr &ptr) : p(ptr) { }$/;"	f	class:Net::EthPtr
EthPtr	./base/inet.hh	/^class EthPtr$/;"	c	namespace:Net
EtherBus	./dev/net/Ethernet.py	/^class EtherBus(EtherObject):$/;"	c
EtherBus	./dev/net/etherbus.cc	/^EtherBus::EtherBus(const Params *p)$/;"	f	class:EtherBus
EtherBus	./dev/net/etherbus.hh	/^class EtherBus : public EtherObject$/;"	c
EtherDevBase	./dev/net/Ethernet.py	/^class EtherDevBase(EtherDevice):$/;"	c
EtherDevBase	./dev/net/etherdevice.hh	/^    EtherDevBase(const EtherDevBaseParams *params)$/;"	f	class:EtherDevBase
EtherDevBase	./dev/net/etherdevice.hh	/^class EtherDevBase : public EtherDevice$/;"	c
EtherDevice	./dev/net/Ethernet.py	/^class EtherDevice(PciDevice):$/;"	c
EtherDevice	./dev/net/etherdevice.hh	/^    EtherDevice(const Params *params)$/;"	f	class:EtherDevice
EtherDevice	./dev/net/etherdevice.hh	/^class EtherDevice : public PciDevice$/;"	c
EtherDump	./dev/net/Ethernet.py	/^class EtherDump(SimObject):$/;"	c
EtherDump	./dev/net/etherdump.cc	/^EtherDump::EtherDump(const Params *p)$/;"	f	class:EtherDump
EtherDump	./dev/net/etherdump.hh	/^class EtherDump : public SimObject$/;"	c
EtherInt	./dev/net/etherint.hh	/^    EtherInt(const std::string &name)$/;"	f	class:EtherInt
EtherInt	./dev/net/etherint.hh	/^class EtherInt$/;"	c
EtherLink	./dev/net/Ethernet.py	/^class EtherLink(EtherObject):$/;"	c
EtherLink	./dev/net/etherlink.cc	/^EtherLink::EtherLink(const Params *p)$/;"	f	class:EtherLink
EtherLink	./dev/net/etherlink.hh	/^class EtherLink : public EtherObject$/;"	c
EtherObject	./dev/net/Ethernet.py	/^class EtherObject(SimObject):$/;"	c
EtherObject	./dev/net/etherobject.hh	/^    EtherObject(const Params *params)$/;"	f	class:EtherObject
EtherObject	./dev/net/etherobject.hh	/^class EtherObject : public SimObject$/;"	c
EtherTap	./dev/net/Ethernet.py	/^class EtherTap(EtherObject):$/;"	c
EtherTap	./dev/net/ethertap.cc	/^EtherTap::EtherTap(const Params *p)$/;"	f	class:EtherTap
EtherTap	./dev/net/ethertap.hh	/^class EtherTap : public EtherObject$/;"	c
EtherTapInt	./dev/net/ethertap.hh	/^    EtherTapInt(const std::string &name, EtherTap *t)$/;"	f	class:EtherTapInt
EtherTapInt	./dev/net/ethertap.hh	/^class EtherTapInt : public EtherInt$/;"	c
EthernetAddr	./python/m5/params.py	/^class EthernetAddr(ParamValue):$/;"	c
Event	./dev/net/ethertap.cc	/^        Event(TapListener *l, int fd, int e)$/;"	f	class:TapListener::Event
Event	./dev/net/ethertap.cc	/^    class Event : public PollEvent$/;"	c	class:TapListener	file:
Event	./mem/slicc/symbols/Event.py	/^class Event(Symbol):$/;"	c
Event	./python/m5/event.py	/^class Event(PythonEvent):$/;"	c
Event	./sim/eventq.hh	/^    Event(Priority p = Default_Pri, Flags f = 0)$/;"	f	class:Event
Event	./sim/eventq.hh	/^class Event : public EventBase, public Serializable$/;"	c
EventBase	./sim/eventq.hh	/^class EventBase$/;"	c
EventManager	./sim/eventq.hh	/^    EventManager(EventManager &em) : eventq(em.eventq) {}$/;"	f	class:EventManager
EventManager	./sim/eventq.hh	/^    EventManager(EventManager *em) : eventq(em->eventq) {}$/;"	f	class:EventManager
EventManager	./sim/eventq.hh	/^    EventManager(EventQueue *eq) : eventq(eq) {}$/;"	f	class:EventManager
EventManager	./sim/eventq.hh	/^class EventManager$/;"	c
EventQueue	./sim/eventq.cc	/^EventQueue::EventQueue(const string &n)$/;"	f	class:EventQueue
EventQueue	./sim/eventq.hh	/^class EventQueue$/;"	c
EventType	./arch/arm/pmu.hh	/^        EventType(SimObject *_obj, const std::string &_name)$/;"	f	struct:ArmISA::PMU::EventType
EventType	./arch/arm/pmu.hh	/^    struct EventType {$/;"	s	class:ArmISA::PMU
EventTypeId	./arch/arm/pmu.hh	/^    typedef unsigned int EventTypeId;$/;"	t	class:ArmISA::PMU
EventWrapper	./sim/eventq.hh	/^    EventWrapper(T &obj, bool del = false, Priority p = Default_Pri)$/;"	f	class:EventWrapper
EventWrapper	./sim/eventq.hh	/^    EventWrapper(T *obj, bool del = false, Priority p = Default_Pri)$/;"	f	class:EventWrapper
EventWrapper	./sim/eventq.hh	/^class EventWrapper : public Event$/;"	c
Events	./dev/storage/ide_disk.hh	/^typedef enum Events {$/;"	g
Events_t	./dev/storage/ide_disk.hh	/^} Events_t;$/;"	t	typeref:enum:Events
ExcCode	./arch/mips/faults.hh	/^enum ExcCode {$/;"	g	namespace:MipsISA
ExcCodeAdEL	./arch/mips/faults.hh	/^    ExcCodeAdEL = 4,$/;"	e	enum:MipsISA::ExcCode
ExcCodeAdES	./arch/mips/faults.hh	/^    ExcCodeAdES = 5,$/;"	e	enum:MipsISA::ExcCode
ExcCodeBp	./arch/mips/faults.hh	/^    ExcCodeBp = 9,$/;"	e	enum:MipsISA::ExcCode
ExcCodeC2E	./arch/mips/faults.hh	/^    ExcCodeC2E = 18,$/;"	e	enum:MipsISA::ExcCode
ExcCodeCacheErr	./arch/mips/faults.hh	/^    ExcCodeCacheErr = 30$/;"	e	enum:MipsISA::ExcCode
ExcCodeCpU	./arch/mips/faults.hh	/^    ExcCodeCpU = 11,$/;"	e	enum:MipsISA::ExcCode
ExcCodeDBE	./arch/mips/faults.hh	/^    ExcCodeDBE = 7,$/;"	e	enum:MipsISA::ExcCode
ExcCodeDummy	./arch/mips/faults.hh	/^    ExcCodeDummy = 0,$/;"	e	enum:MipsISA::ExcCode
ExcCodeIBE	./arch/mips/faults.hh	/^    ExcCodeIBE = 6,$/;"	e	enum:MipsISA::ExcCode
ExcCodeInt	./arch/mips/faults.hh	/^    ExcCodeInt = 0,$/;"	e	enum:MipsISA::ExcCode
ExcCodeMCheck	./arch/mips/faults.hh	/^    ExcCodeMCheck = 24,$/;"	e	enum:MipsISA::ExcCode
ExcCodeMDMX	./arch/mips/faults.hh	/^    ExcCodeMDMX = 22,$/;"	e	enum:MipsISA::ExcCode
ExcCodeMod	./arch/mips/faults.hh	/^    ExcCodeMod = 1,$/;"	e	enum:MipsISA::ExcCode
ExcCodeOv	./arch/mips/faults.hh	/^    ExcCodeOv = 12,$/;"	e	enum:MipsISA::ExcCode
ExcCodeRI	./arch/mips/faults.hh	/^    ExcCodeRI = 10,$/;"	e	enum:MipsISA::ExcCode
ExcCodeSys	./arch/mips/faults.hh	/^    ExcCodeSys = 8,$/;"	e	enum:MipsISA::ExcCode
ExcCodeThread	./arch/mips/faults.hh	/^    ExcCodeThread = 25,$/;"	e	enum:MipsISA::ExcCode
ExcCodeTlbL	./arch/mips/faults.hh	/^    ExcCodeTlbL = 2,$/;"	e	enum:MipsISA::ExcCode
ExcCodeTlbS	./arch/mips/faults.hh	/^    ExcCodeTlbS = 3,$/;"	e	enum:MipsISA::ExcCode
ExcCodeTr	./arch/mips/faults.hh	/^    ExcCodeTr = 13,$/;"	e	enum:MipsISA::ExcCode
ExcCodeWatch	./arch/mips/faults.hh	/^    ExcCodeWatch = 23,$/;"	e	enum:MipsISA::ExcCode
Exception	./sim/cxx_manager.hh	/^        Exception(const std::string &name_, const std::string &message_) :$/;"	f	class:CxxConfigManager::Exception
Exception	./sim/cxx_manager.hh	/^    class Exception : public std::exception$/;"	c	class:CxxConfigManager
ExceptionClass	./arch/arm/types.hh	/^    enum ExceptionClass {$/;"	g	namespace:ArmISA
ExceptionLevel	./arch/arm/types.hh	/^    enum ExceptionLevel {$/;"	g	namespace:ArmISA
ExeTracer	./cpu/CPUTracers.py	/^class ExeTracer(InstTracer):$/;"	c
ExeTracer	./cpu/exetrace.hh	/^    ExeTracer(const Params *params) : InstTracer(params)$/;"	f	class:Trace::ExeTracer
ExeTracer	./cpu/exetrace.hh	/^class ExeTracer : public InstTracer$/;"	c	namespace:Trace
ExeTracerRecord	./cpu/exetrace.hh	/^    ExeTracerRecord(Tick _when, ThreadContext *_thread,$/;"	f	class:Trace::ExeTracerRecord
ExeTracerRecord	./cpu/exetrace.hh	/^class ExeTracerRecord : public InstRecord$/;"	c	namespace:Trace
ExecContext	./cpu/exec_context.hh	/^class ExecContext {$/;"	c
ExecContext	./cpu/minor/exec_context.hh	/^    ExecContext ($/;"	f	class:Minor::ExecContext
ExecContext	./cpu/minor/exec_context.hh	/^class ExecContext : public ::ExecContext$/;"	c	namespace:Minor
Execute	./arch/generic/tlb.hh	/^    enum Mode { Read, Write, Execute };$/;"	e	enum:BaseTLB::Mode
Execute	./cpu/minor/execute.cc	/^Execute::Execute(const std::string &name_,$/;"	f	class:Minor::Execute
Execute	./cpu/minor/execute.hh	/^class Execute : public Named$/;"	c	namespace:Minor
ExecuteStageId	./cpu/minor/pipeline.hh	/^        Fetch1StageId, Fetch2StageId, DecodeStageId, ExecuteStageId,$/;"	e	enum:Minor::Pipeline::StageId
Executed	./cpu/base_dyn_inst.hh	/^        Executed,                \/\/\/ Instruction has executed$/;"	e	enum:BaseDynInst::Status
ExpansionROM	./dev/pci/PciDevice.py	/^    ExpansionROM = Param.UInt32(0x00, "Expansion ROM Base Address")$/;"	v	class:PciDevice
ExprAST	./mem/slicc/ast/ExprAST.py	/^class ExprAST(AST):$/;"	c
ExprStatementAST	./mem/slicc/ast/ExprStatementAST.py	/^class ExprStatementAST(StatementAST):$/;"	c
ExtCharacteristic	./arch/x86/bios/SMBios.py	/^class ExtCharacteristic(Enum):$/;"	c
ExtConfigEntry	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::ExtConfigEntry::ExtConfigEntry(Params * p,$/;"	f	class:X86ISA::IntelMP::ExtConfigEntry
ExtConfigEntry	./arch/x86/bios/intelmp.hh	/^class ExtConfigEntry : public SimObject$/;"	c	namespace:X86ISA::IntelMP
ExtInt	./arch/x86/intmessage.hh	/^            ExtInt = 7,$/;"	e	enum:X86ISA::DeliveryMode::IntDeliveryMode
ExtMachInst	./arch/alpha/types.hh	/^typedef uint64_t ExtMachInst;$/;"	t	namespace:AlphaISA
ExtMachInst	./arch/mips/types.hh	/^typedef uint64_t ExtMachInst;$/;"	t	namespace:MipsISA
ExtMachInst	./arch/sparc/types.hh	/^typedef uint64_t ExtMachInst;$/;"	t	namespace:SparcISA
ExtMachInst	./arch/x86/types.hh	/^    struct ExtMachInst$/;"	s	namespace:X86ISA
ExtMachInst	./cpu/o3/dyn_inst.hh	/^    typedef TheISA::ExtMachInst ExtMachInst;$/;"	t	class:BaseO3DynInst
ExtMachInst	./cpu/o3/fetch.hh	/^    typedef TheISA::ExtMachInst ExtMachInst;$/;"	t	class:DefaultFetch
ExtMachInst	./cpu/static_inst.hh	/^    typedef TheISA::ExtMachInst ExtMachInst;$/;"	t	class:StaticInst
ExtendedCpuidFunctions	./arch/x86/cpuid.cc	/^    enum ExtendedCpuidFunctions {$/;"	g	namespace:X86ISA	file:
ExtendedFlagsForDescriptors	./dev/net/ns_gige_reg.h	/^enum ExtendedFlagsForDescriptors {$/;"	g
ExtendedKey	./dev/ps2.cc	/^const uint8_t ExtendedKey = 0xe0;$/;"	m	namespace:Ps2	file:
ExternalInterrupt	./arch/x86/faults.hh	/^        ExternalInterrupt(uint8_t _vector) :$/;"	f	class:X86ISA::ExternalInterrupt
ExternalInterrupt	./arch/x86/faults.hh	/^    class ExternalInterrupt : public X86Interrupt$/;"	c	namespace:X86ISA
ExternalMaster	./mem/ExternalMaster.py	/^class ExternalMaster(MemObject):$/;"	c
ExternalMaster	./mem/external_master.cc	/^ExternalMaster::ExternalMaster(ExternalMasterParams *params) :$/;"	f	class:ExternalMaster
ExternalMaster	./mem/external_master.hh	/^class ExternalMaster : public MemObject$/;"	c
ExternalSlave	./mem/ExternalSlave.py	/^class ExternalSlave(MemObject):$/;"	c
ExternalSlave	./mem/external_slave.cc	/^ExternalSlave::ExternalSlave(ExternalSlaveParams *params) :$/;"	f	class:ExternalSlave
ExternalSlave	./mem/external_slave.hh	/^class ExternalSlave : public MemObject$/;"	c
ExternallyInitiatedReset	./arch/sparc/faults.hh	/^class ExternallyInitiatedReset : public SparcFault<ExternallyInitiatedReset> {};$/;"	c	namespace:SparcISA
F64_stat	./kern/tru64/tru64.hh	/^    struct F64_stat {$/;"	s	class:Tru64_F64
F64_statfs	./kern/tru64/tru64.hh	/^    struct F64_statfs {$/;"	s	class:Tru64
FALRU	./mem/cache/tags/Tags.py	/^class FALRU(BaseTags):$/;"	c
FALRU	./mem/cache/tags/fa_lru.cc	/^FALRU::FALRU(const Params *p)$/;"	f	class:FALRU
FALRU	./mem/cache/tags/fa_lru.hh	/^class FALRU : public BaseTags$/;"	c
FALRUBlk	./mem/cache/tags/fa_lru.hh	/^class FALRUBlk : public CacheBlk$/;"	c
FCRTH	./dev/net/i8254xGBe_defs.hh	/^    struct FCRTH : public Reg<uint32_t> { \/\/ 0x2168 FCRTL Register$/;"	s	struct:iGbReg::Regs
FCRTL	./dev/net/i8254xGBe_defs.hh	/^    struct FCRTL : public Reg<uint32_t> { \/\/ 0x2160 FCRTL Register$/;"	s	struct:iGbReg::Regs
FCSRBits	./arch/mips/registers.hh	/^enum FCSRBits {$/;"	g	namespace:MipsISA
FCSRFields	./arch/mips/registers.hh	/^enum FCSRFields {$/;"	g	namespace:MipsISA
FCTTV	./dev/net/i8254xGBe_defs.hh	/^    struct FCTTV : public Reg<uint32_t> { \/\/ 0x0170 FCTTV$/;"	s	struct:iGbReg::Regs
FDEntry	./sim/fd_entry.hh	/^    FDEntry()$/;"	f	class:FDEntry
FDEntry	./sim/fd_entry.hh	/^class FDEntry : public Serializable$/;"	c
FDR	./base/loader/coff_sym.h	/^} FDR, *pFDR;$/;"	t	typeref:struct:ecoff_fdr
FEATURES_OFFSET	./dev/storage/ide_disk.hh	100;"	d
FHASH_ADDR	./dev/net/ns_gige.hh	/^const uint16_t FHASH_ADDR  = 0x100;$/;"	v
FHASH_SIZE	./dev/net/ns_gige.hh	/^const uint16_t FHASH_SIZE  = 0x100;$/;"	v
FIND	./unittest/initest.cc	111;"	d	file:
FIONREAD_	./arch/arm/linux/linux.hh	/^    static const unsigned FIONREAD_   = 0x4004667f;$/;"	m	class:ArmLinux64
FIQEn	./dev/arm/vgic.hh	/^    Bitfield<3> FIQEn;$/;"	m	class:VGic
FIT	./base/loader/coff_sym.h	/^typedef coff_int FIT, *pFIT;$/;"	t
FIXED_B_SMAX	./arch/mips/dsp.hh	/^const uint64_t FIXED_B_SMAX = ULL(0x000000000000007f);$/;"	m	namespace:MipsISA
FIXED_B_SMIN	./arch/mips/dsp.hh	/^const uint64_t FIXED_B_SMIN = ULL(0xffffffffffffff80);$/;"	m	namespace:MipsISA
FIXED_B_UMAX	./arch/mips/dsp.hh	/^const uint64_t FIXED_B_UMAX = ULL(0x00000000000000ff);$/;"	m	namespace:MipsISA
FIXED_B_UMIN	./arch/mips/dsp.hh	/^const uint64_t FIXED_B_UMIN = ULL(0x0000000000000000);$/;"	m	namespace:MipsISA
FIXED_H_SMAX	./arch/mips/dsp.hh	/^const uint64_t FIXED_H_SMAX = ULL(0x0000000000007fff);$/;"	m	namespace:MipsISA
FIXED_H_SMIN	./arch/mips/dsp.hh	/^const uint64_t FIXED_H_SMIN = ULL(0xffffffffffff8000);$/;"	m	namespace:MipsISA
FIXED_H_UMAX	./arch/mips/dsp.hh	/^const uint64_t FIXED_H_UMAX = ULL(0x000000000000ffff);$/;"	m	namespace:MipsISA
FIXED_H_UMIN	./arch/mips/dsp.hh	/^const uint64_t FIXED_H_UMIN = ULL(0x0000000000000000);$/;"	m	namespace:MipsISA
FIXED_L_SMAX	./arch/mips/dsp.hh	/^const uint64_t FIXED_L_SMAX = ULL(0x7fffffffffffffff);$/;"	m	namespace:MipsISA
FIXED_L_SMIN	./arch/mips/dsp.hh	/^const uint64_t FIXED_L_SMIN = ULL(0x8000000000000000);$/;"	m	namespace:MipsISA
FIXED_L_UMAX	./arch/mips/dsp.hh	/^const uint64_t FIXED_L_UMAX = ULL(0xffffffffffffffff);$/;"	m	namespace:MipsISA
FIXED_L_UMIN	./arch/mips/dsp.hh	/^const uint64_t FIXED_L_UMIN = ULL(0x0000000000000000);$/;"	m	namespace:MipsISA
FIXED_SMAX	./arch/mips/dsp.hh	/^const uint64_t FIXED_SMAX[SIMD_NUM_FMTS] =$/;"	m	namespace:MipsISA
FIXED_SMIN	./arch/mips/dsp.hh	/^const uint64_t FIXED_SMIN[SIMD_NUM_FMTS] =$/;"	m	namespace:MipsISA
FIXED_UMAX	./arch/mips/dsp.hh	/^const uint64_t FIXED_UMAX[SIMD_NUM_FMTS] =$/;"	m	namespace:MipsISA
FIXED_UMIN	./arch/mips/dsp.hh	/^const uint64_t FIXED_UMIN[SIMD_NUM_FMTS] =$/;"	m	namespace:MipsISA
FIXED_W_SMAX	./arch/mips/dsp.hh	/^const uint64_t FIXED_W_SMAX = ULL(0x000000007fffffff);$/;"	m	namespace:MipsISA
FIXED_W_SMIN	./arch/mips/dsp.hh	/^const uint64_t FIXED_W_SMIN = ULL(0xffffffff80000000);$/;"	m	namespace:MipsISA
FIXED_W_UMAX	./arch/mips/dsp.hh	/^const uint64_t FIXED_W_UMAX = ULL(0x00000000ffffffff);$/;"	m	namespace:MipsISA
FIXED_W_UMIN	./arch/mips/dsp.hh	/^const uint64_t FIXED_W_UMIN = ULL(0x0000000000000000);$/;"	m	namespace:MipsISA
FLOATREG_FCCR	./arch/mips/registers.hh	/^   FLOATREG_FCCR,$/;"	e	enum:MipsISA::FPControlRegNums
FLOATREG_FCSR	./arch/mips/registers.hh	/^   FLOATREG_FCSR$/;"	e	enum:MipsISA::FPControlRegNums
FLOATREG_FENR	./arch/mips/registers.hh	/^   FLOATREG_FENR,$/;"	e	enum:MipsISA::FPControlRegNums
FLOATREG_FEXR	./arch/mips/registers.hh	/^   FLOATREG_FEXR,$/;"	e	enum:MipsISA::FPControlRegNums
FLOATREG_FIR	./arch/mips/registers.hh	/^   FLOATREG_FIR = NumFloatArchRegs,$/;"	e	enum:MipsISA::FPControlRegNums
FLOATREG_FPR	./arch/x86/regs/float.hh	/^    FLOATREG_FPR(int index)$/;"	f	namespace:X86ISA
FLOATREG_FPR0	./arch/x86/regs/float.hh	/^        FLOATREG_FPR0 = FLOATREG_FPR_BASE,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_FPR1	./arch/x86/regs/float.hh	/^        FLOATREG_FPR1,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_FPR2	./arch/x86/regs/float.hh	/^        FLOATREG_FPR2,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_FPR3	./arch/x86/regs/float.hh	/^        FLOATREG_FPR3,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_FPR4	./arch/x86/regs/float.hh	/^        FLOATREG_FPR4,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_FPR5	./arch/x86/regs/float.hh	/^        FLOATREG_FPR5,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_FPR6	./arch/x86/regs/float.hh	/^        FLOATREG_FPR6,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_FPR7	./arch/x86/regs/float.hh	/^        FLOATREG_FPR7,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_FPR_BASE	./arch/x86/regs/float.hh	/^        FLOATREG_FPR_BASE = FLOATREG_MMX_BASE,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_MICROFP	./arch/x86/regs/float.hh	/^    FLOATREG_MICROFP(int index)$/;"	f	namespace:X86ISA
FLOATREG_MICROFP0	./arch/x86/regs/float.hh	/^        FLOATREG_MICROFP0 = FLOATREG_MICROFP_BASE,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_MICROFP1	./arch/x86/regs/float.hh	/^        FLOATREG_MICROFP1,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_MICROFP2	./arch/x86/regs/float.hh	/^        FLOATREG_MICROFP2,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_MICROFP3	./arch/x86/regs/float.hh	/^        FLOATREG_MICROFP3,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_MICROFP4	./arch/x86/regs/float.hh	/^        FLOATREG_MICROFP4,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_MICROFP5	./arch/x86/regs/float.hh	/^        FLOATREG_MICROFP5,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_MICROFP6	./arch/x86/regs/float.hh	/^        FLOATREG_MICROFP6,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_MICROFP7	./arch/x86/regs/float.hh	/^        FLOATREG_MICROFP7,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_MICROFP_BASE	./arch/x86/regs/float.hh	/^        FLOATREG_MICROFP_BASE = FLOATREG_XMM_BASE + 2 * NumXMMRegs,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_MMX	./arch/x86/regs/float.hh	/^    FLOATREG_MMX(int index)$/;"	f	namespace:X86ISA
FLOATREG_MMX0	./arch/x86/regs/float.hh	/^        FLOATREG_MMX0 = FLOATREG_MMX_BASE,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_MMX1	./arch/x86/regs/float.hh	/^        FLOATREG_MMX1,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_MMX2	./arch/x86/regs/float.hh	/^        FLOATREG_MMX2,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_MMX3	./arch/x86/regs/float.hh	/^        FLOATREG_MMX3,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_MMX4	./arch/x86/regs/float.hh	/^        FLOATREG_MMX4,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_MMX5	./arch/x86/regs/float.hh	/^        FLOATREG_MMX5,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_MMX6	./arch/x86/regs/float.hh	/^        FLOATREG_MMX6,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_MMX7	./arch/x86/regs/float.hh	/^        FLOATREG_MMX7,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_MMX_BASE	./arch/x86/regs/float.hh	/^        FLOATREG_MMX_BASE,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_STACK	./arch/x86/regs/float.hh	/^    FLOATREG_STACK(int index, int top)$/;"	f	namespace:X86ISA
FLOATREG_XMM0_HIGH	./arch/x86/regs/float.hh	/^        FLOATREG_XMM0_HIGH,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM0_LOW	./arch/x86/regs/float.hh	/^        FLOATREG_XMM0_LOW = FLOATREG_XMM_BASE,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM10_HIGH	./arch/x86/regs/float.hh	/^        FLOATREG_XMM10_HIGH,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM10_LOW	./arch/x86/regs/float.hh	/^        FLOATREG_XMM10_LOW,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM11_HIGH	./arch/x86/regs/float.hh	/^        FLOATREG_XMM11_HIGH,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM11_LOW	./arch/x86/regs/float.hh	/^        FLOATREG_XMM11_LOW,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM12_HIGH	./arch/x86/regs/float.hh	/^        FLOATREG_XMM12_HIGH,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM12_LOW	./arch/x86/regs/float.hh	/^        FLOATREG_XMM12_LOW,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM13_HIGH	./arch/x86/regs/float.hh	/^        FLOATREG_XMM13_HIGH,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM13_LOW	./arch/x86/regs/float.hh	/^        FLOATREG_XMM13_LOW,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM14_HIGH	./arch/x86/regs/float.hh	/^        FLOATREG_XMM14_HIGH,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM14_LOW	./arch/x86/regs/float.hh	/^        FLOATREG_XMM14_LOW,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM15_HIGH	./arch/x86/regs/float.hh	/^        FLOATREG_XMM15_HIGH,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM15_LOW	./arch/x86/regs/float.hh	/^        FLOATREG_XMM15_LOW,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM1_HIGH	./arch/x86/regs/float.hh	/^        FLOATREG_XMM1_HIGH,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM1_LOW	./arch/x86/regs/float.hh	/^        FLOATREG_XMM1_LOW,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM2_HIGH	./arch/x86/regs/float.hh	/^        FLOATREG_XMM2_HIGH,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM2_LOW	./arch/x86/regs/float.hh	/^        FLOATREG_XMM2_LOW,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM3_HIGH	./arch/x86/regs/float.hh	/^        FLOATREG_XMM3_HIGH,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM3_LOW	./arch/x86/regs/float.hh	/^        FLOATREG_XMM3_LOW,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM4_HIGH	./arch/x86/regs/float.hh	/^        FLOATREG_XMM4_HIGH,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM4_LOW	./arch/x86/regs/float.hh	/^        FLOATREG_XMM4_LOW,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM5_HIGH	./arch/x86/regs/float.hh	/^        FLOATREG_XMM5_HIGH,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM5_LOW	./arch/x86/regs/float.hh	/^        FLOATREG_XMM5_LOW,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM6_HIGH	./arch/x86/regs/float.hh	/^        FLOATREG_XMM6_HIGH,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM6_LOW	./arch/x86/regs/float.hh	/^        FLOATREG_XMM6_LOW,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM7_HIGH	./arch/x86/regs/float.hh	/^        FLOATREG_XMM7_HIGH,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM7_LOW	./arch/x86/regs/float.hh	/^        FLOATREG_XMM7_LOW,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM8_HIGH	./arch/x86/regs/float.hh	/^        FLOATREG_XMM8_HIGH,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM8_LOW	./arch/x86/regs/float.hh	/^        FLOATREG_XMM8_LOW,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM9_HIGH	./arch/x86/regs/float.hh	/^        FLOATREG_XMM9_HIGH,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM9_LOW	./arch/x86/regs/float.hh	/^        FLOATREG_XMM9_LOW,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM_BASE	./arch/x86/regs/float.hh	/^        FLOATREG_XMM_BASE = FLOATREG_MMX_BASE + NumMMXRegs,$/;"	e	enum:X86ISA::FloatRegIndex
FLOATREG_XMM_HIGH	./arch/x86/regs/float.hh	/^    FLOATREG_XMM_HIGH(int index)$/;"	f	namespace:X86ISA
FLOATREG_XMM_LOW	./arch/x86/regs/float.hh	/^    FLOATREG_XMM_LOW(int index)$/;"	f	namespace:X86ISA
FL_BAD	./base/cp_annotate.hh	/^        FL_BAD      = 0x02,$/;"	e	enum:CPA::flags
FL_HW	./base/cp_annotate.hh	/^        FL_HW       = 0x01,$/;"	e	enum:CPA::flags
FL_LINK	./base/cp_annotate.hh	/^        FL_LINK     = 0x10,$/;"	e	enum:CPA::flags
FL_NONE	./base/cp_annotate.hh	/^        FL_NONE     = 0x00,$/;"	e	enum:CPA::flags
FL_QOPP	./base/cp_annotate.hh	/^        FL_QOPP     = 0x04,$/;"	e	enum:CPA::flags
FL_RESET	./base/cp_annotate.hh	/^        FL_RESET    = 0x20$/;"	e	enum:CPA::flags
FL_WAIT	./base/cp_annotate.hh	/^        FL_WAIT     = 0x08,$/;"	e	enum:CPA::flags
FOREACH_DREG	./cpu/kvm/x86_cpu.cc	134;"	d	file:
FOREACH_DTABLE	./cpu/kvm/x86_cpu.cc	156;"	d	file:
FOREACH_IREG	./cpu/kvm/x86_cpu.cc	103;"	d	file:
FOREACH_SEGMENT	./cpu/kvm/x86_cpu.cc	144;"	d	file:
FOREACH_SREG	./cpu/kvm/x86_cpu.cc	123;"	d	file:
FPCRRounding	./arch/arm/insts/fplib.hh	/^FPCRRounding(FPSCR &fpscr)$/;"	f	namespace:ArmISA
FPControlRegNums	./arch/mips/registers.hh	/^enum FPControlRegNums {$/;"	g	namespace:MipsISA
FPLIB_AHP	./arch/arm/insts/fplib.cc	56;"	d	file:
FPLIB_DN	./arch/arm/insts/fplib.cc	55;"	d	file:
FPLIB_DZC	./arch/arm/insts/fplib.cc	62;"	d	file:
FPLIB_FZ	./arch/arm/insts/fplib.cc	54;"	d	file:
FPLIB_IDC	./arch/arm/insts/fplib.cc	58;"	d	file:
FPLIB_IOC	./arch/arm/insts/fplib.cc	63;"	d	file:
FPLIB_IXC	./arch/arm/insts/fplib.cc	59;"	d	file:
FPLIB_OFC	./arch/arm/insts/fplib.cc	61;"	d	file:
FPLIB_RM	./arch/arm/insts/fplib.cc	52;"	d	file:
FPLIB_RN	./arch/arm/insts/fplib.cc	50;"	d	file:
FPLIB_RP	./arch/arm/insts/fplib.cc	51;"	d	file:
FPLIB_RZ	./arch/arm/insts/fplib.cc	53;"	d	file:
FPLIB_UFC	./arch/arm/insts/fplib.cc	60;"	d	file:
FPRounding	./arch/arm/insts/fplib.hh	/^enum FPRounding {$/;"	g	namespace:ArmISA
FPRounding_NEGINF	./arch/arm/insts/fplib.hh	/^    FPRounding_NEGINF = 2,$/;"	e	enum:ArmISA::FPRounding
FPRounding_ODD	./arch/arm/insts/fplib.hh	/^    FPRounding_ODD = 5$/;"	e	enum:ArmISA::FPRounding
FPRounding_POSINF	./arch/arm/insts/fplib.hh	/^    FPRounding_POSINF = 1,$/;"	e	enum:ArmISA::FPRounding
FPRounding_TIEAWAY	./arch/arm/insts/fplib.hh	/^    FPRounding_TIEAWAY = 4,$/;"	e	enum:ArmISA::FPRounding
FPRounding_TIEEVEN	./arch/arm/insts/fplib.hh	/^    FPRounding_TIEEVEN = 0,$/;"	e	enum:ArmISA::FPRounding
FPRounding_ZERO	./arch/arm/insts/fplib.hh	/^    FPRounding_ZERO = 3,$/;"	e	enum:ArmISA::FPRounding
FPToFixed_32	./arch/arm/insts/fplib.cc	/^FPToFixed_32(int sgn, int exp, uint64_t mnt, bool u, FPRounding rounding,$/;"	f	namespace:ArmISA
FPToFixed_64	./arch/arm/insts/fplib.cc	/^FPToFixed_64(int sgn, int exp, uint64_t mnt, bool u, FPRounding rounding,$/;"	f	namespace:ArmISA
FP_ALU	./cpu/o3/FuncUnitConfig.py	/^class FP_ALU(FUDesc):$/;"	c
FP_MultDiv	./cpu/o3/FuncUnitConfig.py	/^class FP_MultDiv(FUDesc):$/;"	c
FP_REGS_PER_VFP_REG	./arch/arm/kvm/armv8_cpu.cc	96;"	d	file:
FP_Reg_Base	./arch/alpha/registers.hh	/^    FP_Reg_Base = NumIntRegs,$/;"	e	enum:AlphaISA::DependenceTags
FP_Reg_Base	./arch/arm/registers.hh	/^const int FP_Reg_Base = NumIntRegs * (MODE_MAXMODE + 1);$/;"	m	namespace:ArmISA
FP_Reg_Base	./arch/mips/registers.hh	/^const int FP_Reg_Base = NumIntRegs;$/;"	m	namespace:MipsISA
FP_Reg_Base	./arch/power/registers.hh	/^const int FP_Reg_Base = NumIntRegs;$/;"	m	namespace:PowerISA
FP_Reg_Base	./arch/sparc/registers.hh	/^    FP_Reg_Base = NumIntRegs,$/;"	e	enum:SparcISA::DependenceTags
FP_Reg_Base	./arch/x86/registers.hh	/^    FP_Reg_Base = 128,$/;"	e	enum:X86ISA::DependenceTags
FRAME_SIZE	./dev/arm/gic_v2m.hh	/^    static const int FRAME_SIZE         = 0x10000;$/;"	m	class:Gicv2m
FREQ_AT_PERF_LEVEL	./dev/arm/energy_ctrl.hh	/^        FREQ_AT_PERF_LEVEL,$/;"	e	enum:EnergyCtrl::Registers
FS	./arch/x86/decoder_tables.cc	/^    const uint8_t FS = FSOverride;$/;"	m	namespace:X86ISA	file:
FSOverride	./arch/x86/types.hh	/^        FSOverride,$/;"	e	enum:X86ISA::Prefixes
FSQueue	./dev/virtio/fs9p.hh	/^        FSQueue(PortProxy &proxy, uint16_t size, VirtIO9PBase &_parent)$/;"	f	class:VirtIO9PBase::FSQueue
FSQueue	./dev/virtio/fs9p.hh	/^    class FSQueue : public VirtQueue$/;"	c	class:VirtIO9PBase
FSTranslatingPortProxy	./mem/fs_translating_port_proxy.cc	/^FSTranslatingPortProxy::FSTranslatingPortProxy(MasterPort &port,$/;"	f	class:FSTranslatingPortProxy
FSTranslatingPortProxy	./mem/fs_translating_port_proxy.cc	/^FSTranslatingPortProxy::FSTranslatingPortProxy(ThreadContext *tc)$/;"	f	class:FSTranslatingPortProxy
FSTranslatingPortProxy	./mem/fs_translating_port_proxy.hh	/^class FSTranslatingPortProxy : public PortProxy$/;"	c
FUCompletion	./cpu/o3/inst_queue.hh	/^    class FUCompletion : public Event {$/;"	c	class:InstructionQueue
FUCompletion	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::FUCompletion::FUCompletion(DynInstPtr &_inst,$/;"	f	class:InstructionQueue::FUCompletion
FUDDiterator	./cpu/func_unit.hh	/^typedef std::vector<FUDesc *>::const_iterator FUDDiterator;$/;"	t
FUDesc	./cpu/FuncUnit.py	/^class FUDesc(SimObject):$/;"	c
FUDesc	./cpu/func_unit.hh	/^    FUDesc(const FUDescParams *p)$/;"	f	class:FUDesc
FUDesc	./cpu/func_unit.hh	/^class FUDesc : public SimObject$/;"	c
FUIdxQueue	./cpu/o3/fu_pool.hh	/^        FUIdxQueue()$/;"	f	class:FUPool::FUIdxQueue
FUIdxQueue	./cpu/o3/fu_pool.hh	/^    class FUIdxQueue {$/;"	c	class:FUPool
FUList	./cpu/o3/FUPool.py	/^    FUList = VectorParam.FUDesc("list of FU's for this pool")$/;"	v	class:FUPool
FUList	./cpu/o3/FUPool.py	/^    FUList = [ IntALU(), IntMultDiv(), FP_ALU(), FP_MultDiv(), ReadPort(),$/;"	v	class:DefaultFUPool
FUNC_AMP	./dev/arm/rv_ctrl.hh	/^        FUNC_AMP      = 3,$/;"	e	enum:RealViewCtrl::DeviceFunc
FUNC_DVIMODE	./dev/arm/rv_ctrl.hh	/^        FUNC_DVIMODE  = 11,$/;"	e	enum:RealViewCtrl::DeviceFunc
FUNC_ENERGY	./dev/arm/rv_ctrl.hh	/^        FUNC_ENERGY   = 13,$/;"	e	enum:RealViewCtrl::DeviceFunc
FUNC_MUXFPGA	./dev/arm/rv_ctrl.hh	/^        FUNC_MUXFPGA  = 7,$/;"	e	enum:RealViewCtrl::DeviceFunc
FUNC_OSC	./dev/arm/rv_ctrl.hh	/^        FUNC_OSC      = 1,$/;"	e	enum:RealViewCtrl::DeviceFunc
FUNC_POWER	./dev/arm/rv_ctrl.hh	/^        FUNC_POWER    = 12,$/;"	e	enum:RealViewCtrl::DeviceFunc
FUNC_REBOOT	./dev/arm/rv_ctrl.hh	/^        FUNC_REBOOT   = 9,$/;"	e	enum:RealViewCtrl::DeviceFunc
FUNC_RESET	./dev/arm/rv_ctrl.hh	/^        FUNC_RESET    = 5,$/;"	e	enum:RealViewCtrl::DeviceFunc
FUNC_SCC	./dev/arm/rv_ctrl.hh	/^        FUNC_SCC      = 6,$/;"	e	enum:RealViewCtrl::DeviceFunc
FUNC_SHUTDOWN	./dev/arm/rv_ctrl.hh	/^        FUNC_SHUTDOWN = 8,$/;"	e	enum:RealViewCtrl::DeviceFunc
FUNC_TEMP	./dev/arm/rv_ctrl.hh	/^        FUNC_TEMP     = 4,$/;"	e	enum:RealViewCtrl::DeviceFunc
FUNC_VOLT	./dev/arm/rv_ctrl.hh	/^        FUNC_VOLT     = 2,$/;"	e	enum:RealViewCtrl::DeviceFunc
FUPipeline	./cpu/minor/func_unit.cc	/^FUPipeline::FUPipeline(const std::string &name, const MinorFU &description_,$/;"	f	class:Minor::FUPipeline
FUPipeline	./cpu/minor/func_unit.hh	/^class FUPipeline : public FUPipelineBase, public FuncUnit$/;"	c	namespace:Minor
FUPipelineBase	./cpu/minor/func_unit.hh	/^    ReportTraitsAdaptor<QueuedInst> > FUPipelineBase;$/;"	t	namespace:Minor
FUPool	./cpu/o3/FUPool.py	/^class FUPool(SimObject):$/;"	c
FUPool	./cpu/o3/fu_pool.cc	/^FUPool::FUPool(const Params *p)$/;"	f	class:FUPool
FUPool	./cpu/o3/fu_pool.hh	/^class FUPool : public SimObject$/;"	c
FWSM	./dev/net/i8254xGBe_defs.hh	/^    struct FWSM : public Reg<uint32_t> { \/\/ 0x5B54 FWSM register$/;"	s	struct:iGbReg::Regs
FXSave	./cpu/kvm/x86_cpu.cc	/^struct FXSave$/;"	s	file:
F_BLK_SIZE	./dev/virtio/block.hh	/^    static const FeatureBits F_BLK_SIZE = (1 << 6);$/;"	m	class:VirtIOBlock
F_GEOMETRY	./dev/virtio/block.hh	/^    static const FeatureBits F_GEOMETRY = (1 << 4);$/;"	m	class:VirtIOBlock
F_MOUNT_TAG	./dev/virtio/fs9p.hh	/^    static const FeatureBits F_MOUNT_TAG = 0x01;$/;"	m	class:VirtIO9PBase
F_MULTIPORT	./dev/virtio/console.hh	/^    static const FeatureBits F_MULTIPORT = 0x02;$/;"	m	class:VirtIOConsole
F_RO	./dev/virtio/block.hh	/^    static const FeatureBits F_RO = (1 << 5);$/;"	m	class:VirtIOBlock
F_SEG_MAX	./dev/virtio/block.hh	/^    static const FeatureBits F_SEG_MAX = (1 << 2);$/;"	m	class:VirtIOBlock
F_SIZE	./dev/virtio/console.hh	/^    static const FeatureBits F_SIZE = 0x01;$/;"	m	class:VirtIOConsole
F_SIZE_MAX	./dev/virtio/block.hh	/^    static const FeatureBits F_SIZE_MAX = (1 << 1);$/;"	m	class:VirtIOBlock
F_TOPOLOGY	./dev/virtio/block.hh	/^    static const FeatureBits F_TOPOLOGY = (1 << 10);$/;"	m	class:VirtIOBlock
FailUnimplemented	./arch/arm/insts/pseudo.cc	/^FailUnimplemented::FailUnimplemented(const char *_mnemonic,$/;"	f	class:FailUnimplemented
FailUnimplemented	./arch/arm/insts/pseudo.hh	/^class FailUnimplemented : public ArmStaticInst$/;"	c
Failed	./cpu/minor/lsq.hh	/^            Failed, \/* The starting start of FailedDataRequests *\/$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
FailedDataRequest	./cpu/minor/lsq.hh	/^        FailedDataRequest(LSQ &port_, MinorDynInstPtr inst_) :$/;"	f	class:Minor::LSQ::FailedDataRequest
FailedDataRequest	./cpu/minor/lsq.hh	/^    class FailedDataRequest : public SpecialDataRequest$/;"	c	class:Minor::LSQ
False	./arch/x86/insts/microop.hh	/^            False,$/;"	e	enum:X86ISA::ConditionTests::CondTest
FamilyModelStepping	./arch/x86/cpuid.cc	/^        FamilyModelStepping,$/;"	e	enum:X86ISA::StandardCpuidFunction	file:
FamilyModelSteppingBrandFeatures	./arch/x86/cpuid.cc	/^        FamilyModelSteppingBrandFeatures,$/;"	e	enum:X86ISA::ExtendedCpuidFunctions	file:
FarIndex	./arch/arm/faults.hh	/^    static const MiscRegIndex FarIndex  = MISCREG_DFAR;$/;"	m	class:ArmISA::DataAbort
FarIndex	./arch/arm/faults.hh	/^    static const MiscRegIndex FarIndex  = MISCREG_DFAR;$/;"	m	class:ArmISA::VirtualDataAbort
FarIndex	./arch/arm/faults.hh	/^    static const MiscRegIndex FarIndex  = MISCREG_IFAR;$/;"	m	class:ArmISA::PrefetchAbort
FastDataAccessMMUMiss	./arch/sparc/faults.hh	/^    FastDataAccessMMUMiss() : vaddr(0)$/;"	f	class:SparcISA::FastDataAccessMMUMiss
FastDataAccessMMUMiss	./arch/sparc/faults.hh	/^    FastDataAccessMMUMiss(Addr addr) : vaddr(addr)$/;"	f	class:SparcISA::FastDataAccessMMUMiss
FastDataAccessMMUMiss	./arch/sparc/faults.hh	/^class FastDataAccessMMUMiss : public SparcFault<FastDataAccessMMUMiss>$/;"	c	namespace:SparcISA
FastDataAccessProtection	./arch/sparc/faults.hh	/^class FastDataAccessProtection : public SparcFault<FastDataAccessProtection> {};$/;"	c	namespace:SparcISA
FastInstructionAccessMMUMiss	./arch/sparc/faults.hh	/^    FastInstructionAccessMMUMiss() : vaddr(0)$/;"	f	class:SparcISA::FastInstructionAccessMMUMiss
FastInstructionAccessMMUMiss	./arch/sparc/faults.hh	/^    FastInstructionAccessMMUMiss(Addr addr) : vaddr(addr)$/;"	f	class:SparcISA::FastInstructionAccessMMUMiss
FastInstructionAccessMMUMiss	./arch/sparc/faults.hh	/^class FastInstructionAccessMMUMiss :$/;"	c	namespace:SparcISA
FastInterrupt	./arch/arm/faults.hh	/^class FastInterrupt : public ArmFaultVals<FastInterrupt>$/;"	c	namespace:ArmISA
FatalFunc	./arch/generic/debugfaults.hh	/^        FatalFunc,$/;"	e	enum:GenericISA::M5DebugFault::DebugFunc
Fault	./base/types.hh	/^typedef std::shared_ptr<FaultBase> Fault;$/;"	t
FaultBase	./sim/faults.hh	/^class FaultBase$/;"	c
FaultModel	./mem/ruby/network/fault_model/FaultModel.cc	/^FaultModel::FaultModel(const Params *p) : SimObject(p)$/;"	f	class:FaultModel
FaultModel	./mem/ruby/network/fault_model/FaultModel.hh	/^class FaultModel : public SimObject$/;"	c
FaultModel	./mem/ruby/network/fault_model/FaultModel.py	/^class FaultModel(SimObject):$/;"	c
FaultName	./sim/faults.hh	/^typedef const char * FaultName;$/;"	t
FaultOffset	./arch/arm/faults.hh	/^typedef Addr FaultOffset;$/;"	t	namespace:ArmISA
FaultPriority	./arch/sparc/faults.hh	/^typedef uint32_t FaultPriority;$/;"	t	namespace:SparcISA
FaultSource	./arch/arm/faults.hh	/^    enum FaultSource$/;"	g	class:ArmISA::ArmFault
FaultSourceInvalid	./arch/arm/faults.hh	/^        FaultSourceInvalid = 0xff$/;"	e	enum:ArmISA::ArmFault::FaultSource
FaultStat	./sim/faults.hh	/^typedef Stats::Scalar FaultStat;$/;"	t
FaultTypes	./arch/sparc/tlb.hh	/^    enum FaultTypes {$/;"	g	class:SparcISA::TLB
FaultVals	./arch/arm/faults.hh	/^    struct FaultVals$/;"	s	class:ArmISA::ArmFault
FaultVals	./arch/mips/faults.cc	/^typedef MipsFaultBase::FaultVals FaultVals;$/;"	t	namespace:MipsISA	file:
FaultVals	./arch/mips/faults.hh	/^    struct FaultVals$/;"	s	class:MipsISA::MipsFaultBase
FaultVals	./arch/sparc/faults.hh	/^    struct FaultVals$/;"	s	class:SparcISA::SparcFaultBase
FaultVect	./arch/alpha/faults.hh	/^typedef Addr FaultVect;$/;"	t	namespace:AlphaISA
FaultVect	./arch/mips/faults.hh	/^typedef Addr FaultVect;$/;"	t	namespace:MipsISA
Faulting	./cpu/simple/base.hh	/^        Faulting,$/;"	e	enum:BaseSimpleCPU::Status
Fb_Base	./dev/arm/hdlcd.hh	/^        Fb_Base          = 0x0100,$/;"	e	enum:HDLcd::RegisterOffset
Fb_Line_Count	./dev/arm/hdlcd.hh	/^        Fb_Line_Count    = 0x0108,$/;"	e	enum:HDLcd::RegisterOffset
Fb_Line_Length	./dev/arm/hdlcd.hh	/^        Fb_Line_Length   = 0x0104,$/;"	e	enum:HDLcd::RegisterOffset
Fb_Line_Pitch	./dev/arm/hdlcd.hh	/^        Fb_Line_Pitch    = 0x010C,$/;"	e	enum:HDLcd::RegisterOffset
FeAllExceptions	./arch/arm/insts/vfp.hh	/^    FeAllExceptions = FE_ALL_EXCEPT$/;"	e	enum:ArmISA::FeExceptionBit
FeDivByZero	./arch/arm/insts/vfp.hh	/^    FeDivByZero = FE_DIVBYZERO,$/;"	e	enum:ArmISA::FeExceptionBit
FeExceptionBit	./arch/arm/insts/vfp.hh	/^enum FeExceptionBit$/;"	g	namespace:ArmISA
FeInexact	./arch/arm/insts/vfp.hh	/^    FeInexact = FE_INEXACT,$/;"	e	enum:ArmISA::FeExceptionBit
FeInvalid	./arch/arm/insts/vfp.hh	/^    FeInvalid = FE_INVALID,$/;"	e	enum:ArmISA::FeExceptionBit
FeOverflow	./arch/arm/insts/vfp.hh	/^    FeOverflow = FE_OVERFLOW,$/;"	e	enum:ArmISA::FeExceptionBit
FeRoundDown	./arch/arm/insts/vfp.hh	/^    FeRoundDown = FE_DOWNWARD,$/;"	e	enum:ArmISA::FeRoundingMode
FeRoundNearest	./arch/arm/insts/vfp.hh	/^    FeRoundNearest = FE_TONEAREST,$/;"	e	enum:ArmISA::FeRoundingMode
FeRoundUpward	./arch/arm/insts/vfp.hh	/^    FeRoundUpward = FE_UPWARD$/;"	e	enum:ArmISA::FeRoundingMode
FeRoundZero	./arch/arm/insts/vfp.hh	/^    FeRoundZero = FE_TOWARDZERO,$/;"	e	enum:ArmISA::FeRoundingMode
FeRoundingMode	./arch/arm/insts/vfp.hh	/^enum FeRoundingMode$/;"	g	namespace:ArmISA
FeUnderflow	./arch/arm/insts/vfp.hh	/^    FeUnderflow = FE_UNDERFLOW,$/;"	e	enum:ArmISA::FeExceptionBit
FeatureBits	./dev/virtio/base.hh	/^    typedef uint32_t FeatureBits;$/;"	t	class:VirtIODeviceBase
Fetch	./cpu/o3/commit.hh	/^    typedef typename CPUPol::Fetch Fetch;$/;"	t	class:DefaultCommit
Fetch	./cpu/o3/cpu_policy.hh	/^    typedef DefaultFetch<Impl> Fetch;$/;"	t	struct:SimpleCPUPolicy
Fetch1	./cpu/minor/fetch1.cc	/^Fetch1::Fetch1(const std::string &name_,$/;"	f	class:Minor::Fetch1
Fetch1	./cpu/minor/fetch1.hh	/^class Fetch1 : public Named$/;"	c	namespace:Minor
Fetch1StageId	./cpu/minor/pipeline.hh	/^        Fetch1StageId, Fetch2StageId, DecodeStageId, ExecuteStageId,$/;"	e	enum:Minor::Pipeline::StageId
Fetch2	./cpu/minor/fetch2.cc	/^Fetch2::Fetch2(const std::string &name,$/;"	f	class:Minor::Fetch2
Fetch2	./cpu/minor/fetch2.hh	/^class Fetch2 : public Named$/;"	c	namespace:Minor
Fetch2StageId	./cpu/minor/pipeline.hh	/^        Fetch1StageId, Fetch2StageId, DecodeStageId, ExecuteStageId,$/;"	e	enum:Minor::Pipeline::StageId
FetchEvent	./cpu/simple/timing.hh	/^    typedef EventWrapper<TimingSimpleCPU, &TimingSimpleCPU::fetch> FetchEvent;$/;"	t	class:TimingSimpleCPU
FetchHalted	./cpu/minor/fetch1.hh	/^        FetchHalted, \/* Not fetching, waiting to be woken by transition$/;"	e	enum:Minor::Fetch1::FetchState
FetchIdx	./cpu/o3/cpu.hh	/^        FetchIdx,$/;"	e	enum:FullO3CPU::StageIdx
FetchPriority	./cpu/o3/fetch.hh	/^    enum FetchPriority {$/;"	g	class:DefaultFetch
FetchQueue	./cpu/minor/fetch1.hh	/^        FetchQueue;$/;"	t	class:Minor::Fetch1
FetchRequest	./cpu/minor/fetch1.hh	/^        FetchRequest(Fetch1 &fetch_, InstId id_, TheISA::PCState pc_) :$/;"	f	class:Minor::Fetch1::FetchRequest
FetchRequest	./cpu/minor/fetch1.hh	/^    class FetchRequest :$/;"	c	class:Minor::Fetch1
FetchRequestPtr	./cpu/minor/fetch1.hh	/^    typedef FetchRequest *FetchRequestPtr;$/;"	t	class:Minor::Fetch1
FetchRequestState	./cpu/minor/fetch1.hh	/^        enum FetchRequestState$/;"	g	class:Minor::Fetch1::FetchRequest
FetchRunning	./cpu/minor/fetch1.hh	/^        FetchRunning \/* Try to fetch, when possible *\/$/;"	e	enum:Minor::Fetch1::FetchState
FetchState	./cpu/minor/fetch1.hh	/^    enum FetchState$/;"	g	class:Minor::Fetch1
FetchStatus	./cpu/o3/fetch.hh	/^    enum FetchStatus {$/;"	g	class:DefaultFetch
FetchStruct	./cpu/o3/commit.hh	/^    typedef typename CPUPol::FetchStruct FetchStruct;$/;"	t	class:DefaultCommit
FetchStruct	./cpu/o3/cpu.hh	/^    typedef typename CPUPolicy::FetchStruct FetchStruct;$/;"	t	class:FullO3CPU
FetchStruct	./cpu/o3/cpu_policy.hh	/^    typedef DefaultFetchDefaultDecode<Impl> FetchStruct;$/;"	t	struct:SimpleCPUPolicy
FetchStruct	./cpu/o3/decode.hh	/^    typedef typename CPUPol::FetchStruct FetchStruct;$/;"	t	class:DefaultDecode
FetchStruct	./cpu/o3/fetch.hh	/^    typedef typename CPUPol::FetchStruct FetchStruct;$/;"	t	class:DefaultFetch
FetchTranslation	./cpu/o3/fetch.hh	/^        FetchTranslation(DefaultFetch<Impl> *_fetch)$/;"	f	class:DefaultFetch::FetchTranslation
FetchTranslation	./cpu/o3/fetch.hh	/^    class FetchTranslation : public BaseTLB::Translation$/;"	c	class:DefaultFetch
FetchTranslation	./cpu/simple/timing.hh	/^        FetchTranslation(TimingSimpleCPU *_cpu)$/;"	f	class:TimingSimpleCPU::FetchTranslation
FetchTranslation	./cpu/simple/timing.hh	/^    class FetchTranslation : public BaseTLB::Translation$/;"	c	class:TimingSimpleCPU
FetchTrapPending	./cpu/o3/commit.hh	/^        FetchTrapPending,$/;"	e	enum:DefaultCommit::ThreadStatus
FetchWaitingForPC	./cpu/minor/fetch1.hh	/^        FetchWaitingForPC, \/* Not fetching, waiting for stream change.$/;"	e	enum:Minor::Fetch1::FetchState
Fetching	./cpu/o3/fetch.hh	/^        Fetching,$/;"	e	enum:DefaultFetch::ThreadStatus
Fifo	./base/circlebuf.hh	/^    Fifo(size_t size)$/;"	f	class:Fifo
Fifo	./base/circlebuf.hh	/^class Fifo$/;"	c
FileHeader	./base/bitmap.hh	/^    struct FileHeader {$/;"	s	class:Bitmap
FillNNormal	./arch/sparc/faults.hh	/^    FillNNormal(uint32_t n) : EnumeratedFault<FillNNormal>(n)$/;"	f	class:SparcISA::FillNNormal
FillNNormal	./arch/sparc/faults.hh	/^class FillNNormal : public EnumeratedFault<FillNNormal>$/;"	c	namespace:SparcISA
FillNOther	./arch/sparc/faults.hh	/^    FillNOther(uint32_t n) : EnumeratedFault<FillNOther>(n)$/;"	f	class:SparcISA::FillNOther
FillNOther	./arch/sparc/faults.hh	/^class FillNOther : public EnumeratedFault<FillNOther>$/;"	c	namespace:SparcISA
FinishTranslationEvent	./cpu/o3/fetch.hh	/^        FinishTranslationEvent(DefaultFetch<Impl> *_fetch)$/;"	f	class:DefaultFetch::FinishTranslationEvent
FinishTranslationEvent	./cpu/o3/fetch.hh	/^    class FinishTranslationEvent : public Event$/;"	c	class:DefaultFetch
FirstArgumentReg	./arch/alpha/registers.hh	/^const RegIndex FirstArgumentReg = 16;$/;"	m	namespace:AlphaISA
FirstArgumentReg	./arch/mips/registers.hh	/^const int FirstArgumentReg = 4;$/;"	m	namespace:MipsISA
FirstArgumentReg	./arch/sparc/process.cc	/^static const int FirstArgumentReg = 8;$/;"	v	file:
Fixed	./arch/x86/intmessage.hh	/^            Fixed = 0,$/;"	e	enum:X86ISA::DeliveryMode::IntDeliveryMode
FixedRetryGen	./cpu/trace/trace_cpu.hh	/^        FixedRetryGen(TraceCPU& _owner, const std::string& _name,$/;"	f	class:TraceCPU::FixedRetryGen
FixedRetryGen	./cpu/trace/trace_cpu.hh	/^    class FixedRetryGen$/;"	c	class:TraceCPU
Flag	./base/debug.cc	/^Flag::Flag(const char *name, const char *desc)$/;"	f	class:Debug::Flag
Flag	./base/debug.hh	/^class Flag$/;"	c	namespace:Debug
FlagBit	./arch/x86/ldstflags.hh	/^    enum FlagBit {$/;"	g	namespace:X86ISA
FlagBits	./arch/arm/types.hh	/^        enum FlagBits {$/;"	g	class:ArmISA::PCState
FlagShift	./arch/x86/ldstflags.hh	/^    const int FlagShift = 4;$/;"	m	namespace:X86ISA
Flag_Field	./arch/mips/registers.hh	/^    Flag_Field = 1,$/;"	e	enum:MipsISA::FCSRFields
Flags	./base/flags.hh	/^    Flags() : _flags(0) {}$/;"	f	class:Flags
Flags	./base/flags.hh	/^    Flags(Type flags) : _flags(flags) {}$/;"	f	class:Flags
Flags	./base/flags.hh	/^class Flags$/;"	c
Flags	./base/stats/info.hh	/^typedef ::Flags<FlagsType> Flags;$/;"	t	namespace:Stats
Flags	./cpu/base_dyn_inst.hh	/^    enum Flags {$/;"	g	class:BaseDynInst
Flags	./dev/arm/rv_ctrl.hh	/^        Flags      = 0x30,$/;"	e	enum:RealViewCtrl::__anon19
Flags	./dev/virtio/base.hh	/^        typedef uint16_t Flags;$/;"	t	class:VirtQueue::VirtRing
Flags	./mem/packet.hh	/^    typedef ::Flags<FlagsType> Flags;$/;"	t	class:Packet
Flags	./mem/request.hh	/^    typedef ::Flags<FlagsType> Flags;$/;"	t	class:Request
Flags	./sim/cxx_config.hh	/^    typedef ::Flags<FlagsType> Flags;$/;"	t	class:CxxConfigParams
Flags	./sim/eventq.hh	/^    typedef ::Flags<FlagsType> Flags;$/;"	t	class:EventBase
Flags	./sim/syscall_emul.hh	/^    enum Flags {$/;"	g	class:SyscallDesc
FlagsClr	./dev/arm/rv_ctrl.hh	/^        FlagsClr   = 0x34,$/;"	e	enum:RealViewCtrl::__anon19
FlagsMap	./base/debug.hh	/^typedef std::map<std::string, Flag *> FlagsMap;$/;"	t	namespace:Debug
FlagsType	./base/stats/info.hh	/^typedef uint16_t FlagsType;$/;"	t	namespace:Stats
FlagsType	./mem/packet.hh	/^    typedef uint32_t FlagsType;$/;"	t	class:Packet
FlagsType	./mem/request.hh	/^    typedef uint32_t FlagsType;$/;"	t	class:Request
FlagsType	./sim/cxx_config.hh	/^    typedef uint32_t FlagsType;$/;"	t	class:CxxConfigParams
FlagsType	./sim/eventq.hh	/^    typedef unsigned short FlagsType;$/;"	t	class:EventBase
Flash	./dev/arm/rv_ctrl.hh	/^        Flash      = 0x4C,$/;"	e	enum:RealViewCtrl::__anon19
FlashDevice	./dev/arm/FlashDevice.py	/^class FlashDevice(AbstractNVM):$/;"	c
FlashDevice	./dev/arm/flash_device.cc	/^FlashDevice::FlashDevice(const FlashDeviceParams* p):$/;"	f	class:FlashDevice
FlashDevice	./dev/arm/flash_device.hh	/^class FlashDevice : public AbstractNVM$/;"	c
FlashDeviceStats	./dev/arm/flash_device.hh	/^    struct FlashDeviceStats {$/;"	s	class:FlashDevice
FlexibleConsumer	./mem/ruby/network/garnet/flexible-pipeline/FlexibleConsumer.hh	/^    FlexibleConsumer(ClockedObject *em) : Consumer(em) {}$/;"	f	class:FlexibleConsumer
FlexibleConsumer	./mem/ruby/network/garnet/flexible-pipeline/FlexibleConsumer.hh	/^class FlexibleConsumer : public Consumer$/;"	c
Float	./python/m5/params.py	/^class Float(ParamValue, float):$/;"	c
Float	./sim/core.cc	/^namespace Float {$/;"	n	namespace:SimClock	file:
Float	./sim/core.hh	/^namespace Float {$/;"	n	namespace:SimClock
FloatAddOp	./cpu/op_class.hh	/^static const OpClass FloatAddOp = Enums::FloatAdd;$/;"	v
FloatCmpOp	./cpu/op_class.hh	/^static const OpClass FloatCmpOp = Enums::FloatCmp;$/;"	v
FloatCvtOp	./cpu/op_class.hh	/^static const OpClass FloatCvtOp = Enums::FloatCvt;$/;"	v
FloatDivOp	./cpu/op_class.hh	/^static const OpClass FloatDivOp = Enums::FloatDiv;$/;"	v
FloatEnableFault	./arch/alpha/faults.hh	/^class FloatEnableFault : public AlphaFault$/;"	c	namespace:AlphaISA
FloatMultOp	./cpu/op_class.hh	/^static const OpClass FloatMultOp = Enums::FloatMult;$/;"	v
FloatOp	./arch/power/insts/floating.hh	/^    FloatOp(const char *mnem, MachInst _machInst, OpClass __opClass)$/;"	f	class:PowerISA::FloatOp
FloatOp	./arch/power/insts/floating.hh	/^class FloatOp : public PowerStaticInst$/;"	c	namespace:PowerISA
FloatReg	./arch/alpha/registers.hh	/^typedef double FloatReg;$/;"	t	namespace:AlphaISA
FloatReg	./arch/arm/registers.hh	/^typedef float FloatReg;$/;"	t	namespace:ArmISA
FloatReg	./arch/mips/registers.hh	/^typedef float FloatReg;$/;"	t	namespace:MipsISA
FloatReg	./arch/null/registers.hh	/^typedef float FloatReg;$/;"	t	namespace:NullISA
FloatReg	./arch/power/registers.hh	/^typedef double FloatReg;$/;"	t	namespace:PowerISA
FloatReg	./arch/sparc/registers.hh	/^typedef float FloatReg;$/;"	t	namespace:SparcISA
FloatReg	./arch/x86/registers.hh	/^typedef double FloatReg;$/;"	t	namespace:X86ISA
FloatReg	./cpu/checker/cpu.hh	/^    typedef TheISA::FloatReg FloatReg;$/;"	t	class:CheckerCPU
FloatReg	./cpu/exec_context.hh	/^    typedef TheISA::FloatReg FloatReg;$/;"	t	class:ExecContext
FloatReg	./cpu/o3/dyn_inst.hh	/^    typedef TheISA::FloatReg FloatReg;$/;"	t	class:BaseO3DynInst
FloatReg	./cpu/o3/regfile.hh	/^    typedef TheISA::FloatReg FloatReg;$/;"	t	class:PhysRegFile
FloatReg	./cpu/simple/exec_context.hh	/^    typedef TheISA::FloatReg FloatReg;$/;"	t	class:SimpleExecContext
FloatReg	./cpu/simple_thread.hh	/^    typedef TheISA::FloatReg FloatReg;$/;"	t	class:SimpleThread
FloatReg	./cpu/thread_context.hh	/^    typedef TheISA::FloatReg FloatReg;$/;"	t	class:ThreadContext
FloatRegBits	./arch/alpha/registers.hh	/^typedef uint64_t FloatRegBits;$/;"	t	namespace:AlphaISA
FloatRegBits	./arch/arm/registers.hh	/^typedef uint32_t FloatRegBits;$/;"	t	namespace:ArmISA
FloatRegBits	./arch/mips/registers.hh	/^typedef uint32_t FloatRegBits;$/;"	t	namespace:MipsISA
FloatRegBits	./arch/null/registers.hh	/^typedef uint32_t FloatRegBits;$/;"	t	namespace:NullISA
FloatRegBits	./arch/power/registers.hh	/^typedef uint64_t FloatRegBits;$/;"	t	namespace:PowerISA
FloatRegBits	./arch/sparc/registers.hh	/^typedef uint32_t FloatRegBits;$/;"	t	namespace:SparcISA
FloatRegBits	./arch/x86/registers.hh	/^typedef uint64_t FloatRegBits;$/;"	t	namespace:X86ISA
FloatRegBits	./cpu/checker/cpu.hh	/^    typedef TheISA::FloatRegBits FloatRegBits;$/;"	t	class:CheckerCPU
FloatRegBits	./cpu/exec_context.hh	/^    typedef TheISA::FloatRegBits FloatRegBits;$/;"	t	class:ExecContext
FloatRegBits	./cpu/o3/dyn_inst.hh	/^    typedef TheISA::FloatRegBits FloatRegBits;$/;"	t	class:BaseO3DynInst
FloatRegBits	./cpu/o3/regfile.hh	/^    typedef TheISA::FloatRegBits FloatRegBits;$/;"	t	class:PhysRegFile
FloatRegBits	./cpu/simple/exec_context.hh	/^    typedef TheISA::FloatRegBits FloatRegBits;$/;"	t	class:SimpleExecContext
FloatRegBits	./cpu/simple_thread.hh	/^    typedef TheISA::FloatRegBits FloatRegBits;$/;"	t	class:SimpleThread
FloatRegBits	./cpu/thread_context.hh	/^    typedef TheISA::FloatRegBits FloatRegBits;$/;"	t	class:ThreadContext
FloatRegClass	./cpu/reg_class.hh	/^    FloatRegClass,      \/\/\/< Floating-point register$/;"	e	enum:RegClass
FloatRegIndex	./arch/x86/regs/float.hh	/^    enum FloatRegIndex$/;"	g	namespace:X86ISA
FloatRegOperand	./arch/isa_parser.py	/^class FloatRegOperand(Operand):$/;"	c
FloatSqrtOp	./cpu/op_class.hh	/^static const OpClass FloatSqrtOp = Enums::FloatSqrt;$/;"	v
FloatingPointer	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::FloatingPointer::FloatingPointer(Params * p) :$/;"	f	class:X86ISA::IntelMP::FloatingPointer
FloatingPointer	./arch/x86/bios/intelmp.hh	/^class FloatingPointer : public SimObject$/;"	c	namespace:X86ISA::IntelMP
FlushPipe	./arch/arm/faults.hh	/^    FlushPipe() {}$/;"	f	class:ArmISA::FlushPipe
FlushPipe	./arch/arm/faults.hh	/^class FlushPipe : public ArmFaultVals<FlushPipe>$/;"	c	namespace:ArmISA
FlushPipeInst	./arch/arm/insts/pseudo.cc	/^FlushPipeInst::FlushPipeInst(const char *_mnemonic, ExtMachInst _machInst)$/;"	f	class:FlushPipeInst
FlushPipeInst	./arch/arm/insts/pseudo.hh	/^class FlushPipeInst : public ArmStaticInst$/;"	c
FlushReq	./mem/packet.hh	/^        FlushReq,      \/\/request for a cache flush$/;"	e	enum:MemCmd::Command
Foo	./python/m5/util/code_formatter.py	/^    class Foo(dict):$/;"	c	class:code_formatter
FormalParamAST	./mem/slicc/ast/FormalParamAST.py	/^class FormalParamAST(AST):$/;"	c
Format	./arch/isa_parser.py	/^class Format(object):$/;"	c
Format	./base/cprintf_formats.hh	/^    Format() { clear(); }$/;"	f	struct:cp::Format
Format	./base/cprintf_formats.hh	/^struct Format$/;"	s	namespace:cp
Formula	./base/statistics.cc	/^Formula::Formula()$/;"	f	class:Stats::Formula
Formula	./base/statistics.cc	/^Formula::Formula(Temp r)$/;"	f	class:Stats::Formula
Formula	./base/statistics.hh	/^class Formula : public DataWrapVec<Formula, FormulaInfoProxy>$/;"	c	namespace:Stats
FormulaInfo	./base/stats/info.hh	/^class FormulaInfo : public VectorInfo$/;"	c	namespace:Stats
FormulaInfoProxy	./base/statistics.hh	/^    FormulaInfoProxy(Stat &stat) : InfoProxy<Stat, FormulaInfo>(stat) {}$/;"	f	class:Stats::FormulaInfoProxy
FormulaInfoProxy	./base/statistics.hh	/^class FormulaInfoProxy : public InfoProxy<Stat, FormulaInfo>$/;"	c	namespace:Stats
FormulaNode	./base/statistics.hh	/^    FormulaNode(const Formula &f) : formula(f) {}$/;"	f	class:Stats::FormulaNode
FormulaNode	./base/statistics.hh	/^class FormulaNode : public Node$/;"	c	namespace:Stats
ForwardInstData	./cpu/minor/pipe_data.cc	/^ForwardInstData::ForwardInstData(const ForwardInstData &src)$/;"	f	class:Minor::ForwardInstData
ForwardInstData	./cpu/minor/pipe_data.cc	/^ForwardInstData::ForwardInstData(unsigned int width) :$/;"	f	class:Minor::ForwardInstData
ForwardInstData	./cpu/minor/pipe_data.hh	/^class ForwardInstData \/* : public ReportIF, public BubbleIF *\/$/;"	c	namespace:Minor
ForwardLineData	./cpu/minor/pipe_data.hh	/^    ForwardLineData() :$/;"	f	class:Minor::ForwardLineData
ForwardLineData	./cpu/minor/pipe_data.hh	/^class ForwardLineData \/* : public ReportIF, public BubbleIF *\/$/;"	c	namespace:Minor
FpCondCodesMask	./arch/arm/miscregs.hh	/^    static const uint32_t FpCondCodesMask = 0xF0000000;$/;"	m	namespace:ArmISA
FpCondCompRegOp	./arch/arm/insts/vfp.hh	/^    FpCondCompRegOp(const char *mnem, ExtMachInst _machInst,$/;"	f	class:ArmISA::FpCondCompRegOp
FpCondCompRegOp	./arch/arm/insts/vfp.hh	/^class FpCondCompRegOp : public FpOp$/;"	c	namespace:ArmISA
FpCondSelOp	./arch/arm/insts/vfp.hh	/^    FpCondSelOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::FpCondSelOp
FpCondSelOp	./arch/arm/insts/vfp.hh	/^class FpCondSelOp : public FpOp$/;"	c	namespace:ArmISA
FpDisabled	./arch/sparc/faults.hh	/^class FpDisabled : public SparcFault<FpDisabled> {};$/;"	c	namespace:SparcISA
FpExceptionIEEE754	./arch/sparc/faults.hh	/^class FpExceptionIEEE754 : public SparcFault<FpExceptionIEEE754> {};$/;"	c	namespace:SparcISA
FpExceptionOther	./arch/sparc/faults.hh	/^class FpExceptionOther : public SparcFault<FpExceptionOther> {};$/;"	c	namespace:SparcISA
FpOp	./arch/arm/insts/vfp.hh	/^    FpOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass) :$/;"	f	class:ArmISA::FpOp
FpOp	./arch/arm/insts/vfp.hh	/^class FpOp : public PredOp$/;"	c	namespace:ArmISA
FpOp	./arch/x86/insts/microfpop.hh	/^        FpOp(ExtMachInst _machInst,$/;"	f	class:X86ISA::FpOp
FpOp	./arch/x86/insts/microfpop.hh	/^    class FpOp : public X86MicroopBase$/;"	c	namespace:X86ISA
FpRegImmOp	./arch/arm/insts/vfp.hh	/^    FpRegImmOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::FpRegImmOp
FpRegImmOp	./arch/arm/insts/vfp.hh	/^class FpRegImmOp : public FpOp$/;"	c	namespace:ArmISA
FpRegRegImmOp	./arch/arm/insts/vfp.hh	/^    FpRegRegImmOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::FpRegRegImmOp
FpRegRegImmOp	./arch/arm/insts/vfp.hh	/^class FpRegRegImmOp : public FpOp$/;"	c	namespace:ArmISA
FpRegRegOp	./arch/arm/insts/vfp.hh	/^    FpRegRegOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::FpRegRegOp
FpRegRegOp	./arch/arm/insts/vfp.hh	/^class FpRegRegOp : public FpOp$/;"	c	namespace:ArmISA
FpRegRegRegImmOp	./arch/arm/insts/vfp.hh	/^    FpRegRegRegImmOp(const char *mnem, ExtMachInst _machInst,$/;"	f	class:ArmISA::FpRegRegRegImmOp
FpRegRegRegImmOp	./arch/arm/insts/vfp.hh	/^class FpRegRegRegImmOp : public FpOp$/;"	c	namespace:ArmISA
FpRegRegRegOp	./arch/arm/insts/vfp.hh	/^    FpRegRegRegOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::FpRegRegRegOp
FpRegRegRegOp	./arch/arm/insts/vfp.hh	/^class FpRegRegRegOp : public FpOp$/;"	c	namespace:ArmISA
FpRegRegRegRegOp	./arch/arm/insts/vfp.hh	/^    FpRegRegRegRegOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::FpRegRegRegRegOp
FpRegRegRegRegOp	./arch/arm/insts/vfp.hh	/^class FpRegRegRegRegOp : public FpOp$/;"	c	namespace:ArmISA
FpscrExcMask	./arch/arm/miscregs.hh	/^    static const uint32_t FpscrExcMask = 0x0000009F;$/;"	m	namespace:ArmISA
FpscrQcMask	./arch/arm/miscregs.hh	/^    static const uint32_t FpscrQcMask = 0x08000000;$/;"	m	namespace:ArmISA
FrameBuffer	./base/framebuffer.cc	/^FrameBuffer::FrameBuffer()$/;"	f	class:FrameBuffer
FrameBuffer	./base/framebuffer.cc	/^FrameBuffer::FrameBuffer(unsigned width, unsigned height)$/;"	f	class:FrameBuffer
FrameBuffer	./base/framebuffer.hh	/^class FrameBuffer : public Serializable$/;"	c
FrameBufferRect	./base/vnc/vncserver.hh	/^    struct FrameBufferRect {$/;"	s	class:VncServer
FrameBufferUpdate	./base/vnc/vncserver.hh	/^    struct FrameBufferUpdate {$/;"	s	class:VncServer
FrameBufferUpdateReq	./base/vnc/vncinput.hh	/^    struct FrameBufferUpdateReq {$/;"	s	class:VncInput
FramePointerReg	./arch/alpha/registers.hh	/^const RegIndex FramePointerReg = 15;$/;"	m	namespace:AlphaISA
FramePointerReg	./arch/arm/registers.hh	/^const int FramePointerReg = 11;$/;"	m	namespace:ArmISA
FramePointerReg	./arch/mips/registers.hh	/^const int FramePointerReg = 30;$/;"	m	namespace:MipsISA
FramePointerReg	./arch/power/registers.hh	/^const int FramePointerReg = 31;$/;"	m	namespace:PowerISA
FramePointerReg	./arch/sparc/registers.hh	/^const int FramePointerReg = 30;$/;"	m	namespace:SparcISA
FramePointerReg	./arch/x86/registers.hh	/^const int FramePointerReg = INTREG_RBP;$/;"	m	namespace:X86ISA
FreeBSD	./arch/generic/freebsd/threadinfo.hh	/^namespace FreeBSD {$/;"	n
FreeBSD	./base/loader/object_file.hh	/^        FreeBSD$/;"	e	enum:ObjectFile::OpSys
FreeBSD	./kern/freebsd/events.cc	/^namespace FreeBSD {$/;"	n	file:
FreeBSD	./kern/freebsd/events.hh	/^namespace FreeBSD {$/;"	n
FreeBSD	./kern/freebsd/freebsd.hh	/^class FreeBSD : public OperatingSystem$/;"	c
FreeEntries	./cpu/o3/rename.hh	/^    struct FreeEntries {$/;"	s	class:DefaultRename
FreeList	./cpu/o3/cpu_policy.hh	/^    typedef UnifiedFreeList FreeList;$/;"	t	struct:SimpleCPUPolicy
FreeList	./cpu/o3/rename.hh	/^    typedef typename CPUPol::FreeList FreeList;$/;"	t	class:DefaultRename
FreebsdAlphaSystem	./arch/alpha/AlphaSystem.py	/^class FreebsdAlphaSystem(AlphaSystem):$/;"	c
FreebsdAlphaSystem	./arch/alpha/freebsd/system.cc	/^FreebsdAlphaSystem::FreebsdAlphaSystem(Params *p)$/;"	f	class:FreebsdAlphaSystem
FreebsdAlphaSystem	./arch/alpha/freebsd/system.hh	/^class FreebsdAlphaSystem : public AlphaSystem$/;"	c
FreebsdArmSystem	./arch/arm/ArmSystem.py	/^class FreebsdArmSystem(GenericArmSystem):$/;"	c
FreebsdArmSystem	./arch/arm/freebsd/system.cc	/^FreebsdArmSystem::FreebsdArmSystem(Params *p)$/;"	f	class:FreebsdArmSystem
FreebsdArmSystem	./arch/arm/freebsd/system.hh	/^class FreebsdArmSystem : public GenericArmSystem$/;"	c
Frequency	./python/m5/params.py	/^class Frequency(TickParamValue):$/;"	c
Frequency	./sim/core.cc	/^Tick Frequency;$/;"	m	namespace:SimClock	file:
FromCPU	./mem/cache/mshr.hh	/^            FromCPU,$/;"	e	enum:MSHR::Target::Source
FromCacheState	./arch/x86/decoder.hh	/^        FromCacheState,$/;"	e	enum:X86ISA::Decoder::State
FromPrefetcher	./mem/cache/mshr.hh	/^            FromPrefetcher$/;"	e	enum:MSHR::Target::Source
FromSnoop	./mem/cache/mshr.hh	/^            FromSnoop,$/;"	e	enum:MSHR::Target::Source
FsrIndex	./arch/arm/faults.hh	/^    static const MiscRegIndex FsrIndex  = MISCREG_DFSR;$/;"	m	class:ArmISA::DataAbort
FsrIndex	./arch/arm/faults.hh	/^    static const MiscRegIndex FsrIndex  = MISCREG_DFSR;$/;"	m	class:ArmISA::VirtualDataAbort
FsrIndex	./arch/arm/faults.hh	/^    static const MiscRegIndex FsrIndex  = MISCREG_IFSR;$/;"	m	class:ArmISA::PrefetchAbort
FullAddrRangeCoverage	./cpu/minor/lsq.hh	/^        FullAddrRangeCoverage, \/* One range fully covers another *\/$/;"	e	enum:Minor::LSQ::AddrRangeCoverage
FullO3CPU	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::FullO3CPU(DerivO3CPUParams *params)$/;"	f	class:FullO3CPU
FullO3CPU	./cpu/o3/cpu.hh	/^class FullO3CPU : public BaseO3CPU$/;"	c
FullSource	./cpu/o3/rename.hh	/^    enum FullSource {$/;"	g	class:DefaultRename
FullSystem	./sim/root.cc	/^bool FullSystem;$/;"	v
FullSystemInt	./sim/root.cc	/^unsigned int FullSystemInt;$/;"	v
Func	./mem/slicc/symbols/Func.py	/^class Func(Symbol):$/;"	c
FuncCallExprAST	./mem/slicc/ast/FuncCallExprAST.py	/^class FuncCallExprAST(ExprAST):$/;"	c
FuncDeclAST	./mem/slicc/ast/FuncDeclAST.py	/^class FuncDeclAST(DeclAST):$/;"	c
FuncPageTable	./mem/page_table.cc	/^FuncPageTable::FuncPageTable(const std::string &__name,$/;"	f	class:FuncPageTable
FuncPageTable	./mem/page_table.hh	/^class FuncPageTable : public PageTableBase$/;"	c
FuncPtr	./sim/syscall_emul.hh	/^    typedef SyscallReturn (*FuncPtr)(SyscallDesc *, int num,$/;"	t	class:SyscallDesc
FuncUnit	./cpu/func_unit.cc	/^FuncUnit::FuncUnit()$/;"	f	class:FuncUnit
FuncUnit	./cpu/func_unit.cc	/^FuncUnit::FuncUnit(const FuncUnit &fu)$/;"	f	class:FuncUnit
FuncUnit	./cpu/func_unit.hh	/^class FuncUnit$/;"	c
FunctionProfile	./cpu/profile.cc	/^FunctionProfile::FunctionProfile(const SymbolTable *_symtab)$/;"	f	class:FunctionProfile
FunctionProfile	./cpu/profile.hh	/^class FunctionProfile$/;"	c
FunctionalReadError	./mem/packet.hh	/^        FunctionalReadError, \/\/ unable to fulfill functional read$/;"	e	enum:MemCmd::Command
FunctionalWriteError	./mem/packet.hh	/^        FunctionalWriteError, \/\/ unable to fulfill functional write$/;"	e	enum:MemCmd::Command
FunctorProxy	./base/statistics.hh	/^    FunctorProxy(T &func) : functor(&func) {}$/;"	f	class:Stats::FunctorProxy
FunctorProxy	./base/statistics.hh	/^class FunctorProxy : public ProxyInfo$/;"	c	namespace:Stats
G	./arch/mips/pagetable.hh	/^    bool G;$/;"	m	struct:MipsISA::PTE
G	./arch/power/pagetable.hh	/^    bool G;$/;"	m	struct:PowerISA::PTE
GCActivePercentage	./dev/arm/flash_device.hh	/^    const uint32_t GCActivePercentage;$/;"	m	class:FlashDevice
GC_active	./dev/arm/FlashDevice.py	/^        that the GC is activated if a block is full")$/;"	v	class:FlashDevice
GDBAsyncCont	./base/remote_gdb.hh	/^    GDBAsyncCont           = 'C', \/\/ continue with signal$/;"	e	enum:GDBCommands
GDBAsyncStep	./base/remote_gdb.hh	/^    GDBAsyncStep           = 'S', \/\/ signal and step$/;"	e	enum:GDBCommands
GDBBadP	./base/remote_gdb.hh	/^const char GDBBadP = '-';$/;"	v
GDBBinaryDload	./base/remote_gdb.hh	/^    GDBBinaryDload         = 'X', \/\/ write memory$/;"	e	enum:GDBCommands
GDBClrHwBkpt	./base/remote_gdb.hh	/^    GDBClrHwBkpt           = 'z', \/\/ remove breakpoint or watchpoint$/;"	e	enum:GDBCommands
GDBCommands	./base/remote_gdb.hh	/^enum GDBCommands$/;"	g
GDBCont	./base/remote_gdb.hh	/^    GDBCont                = 'c', \/\/ resume$/;"	e	enum:GDBCommands
GDBCycleStep	./base/remote_gdb.hh	/^    GDBCycleStep           = 'i', \/\/ step a single cycle$/;"	e	enum:GDBCommands
GDBDebug	./base/remote_gdb.hh	/^    GDBDebug               = 'd', \/\/ toggle debug flags (deprecated)$/;"	e	enum:GDBCommands
GDBDetach	./base/remote_gdb.hh	/^    GDBDetach              = 'D', \/\/ detach remote gdb$/;"	e	enum:GDBCommands
GDBEnd	./base/remote_gdb.hh	/^const char GDBEnd = '#';$/;"	v
GDBGoodP	./base/remote_gdb.hh	/^const char GDBGoodP = '+';$/;"	v
GDBKill	./base/remote_gdb.hh	/^    GDBKill                = 'k', \/\/ kill program$/;"	e	enum:GDBCommands
GDBListener	./base/remote_gdb.cc	/^GDBListener::GDBListener(BaseRemoteGDB *g, int p)$/;"	f	class:GDBListener
GDBListener	./base/remote_gdb.hh	/^class GDBListener$/;"	c
GDBMemR	./base/remote_gdb.hh	/^    GDBMemR                = 'm', \/\/ read memory$/;"	e	enum:GDBCommands
GDBMemW	./base/remote_gdb.hh	/^    GDBMemW                = 'M', \/\/ write memory$/;"	e	enum:GDBCommands
GDBPacketBufLen	./base/remote_gdb.hh	/^const int GDBPacketBufLen = 1024;$/;"	v
GDBQueryVar	./base/remote_gdb.hh	/^    GDBQueryVar            = 'q', \/\/ query variable$/;"	e	enum:GDBCommands
GDBReadReg	./base/remote_gdb.hh	/^    GDBReadReg             = 'p', \/\/ read register$/;"	e	enum:GDBCommands
GDBRegR	./base/remote_gdb.hh	/^    GDBRegR                = 'g', \/\/ read general registers$/;"	e	enum:GDBCommands
GDBRegW	./base/remote_gdb.hh	/^    GDBRegW                = 'G', \/\/ write general registers$/;"	e	enum:GDBCommands
GDBReset	./base/remote_gdb.hh	/^    GDBReset               = 'r', \/\/ reset system.  (Deprecated)$/;"	e	enum:GDBCommands
GDBSetBaud	./base/remote_gdb.hh	/^    GDBSetBaud             = 'b', \/\/ set baud (depracated)$/;"	e	enum:GDBCommands
GDBSetBreak	./base/remote_gdb.hh	/^    GDBSetBreak            = 'B', \/\/ set breakpoint (depracated)$/;"	e	enum:GDBCommands
GDBSetHwBkpt	./base/remote_gdb.hh	/^    GDBSetHwBkpt           = 'Z'  \/\/ insert breakpoint or watchpoint$/;"	e	enum:GDBCommands
GDBSetReg	./base/remote_gdb.hh	/^    GDBSetReg              = 'P', \/\/ write register$/;"	e	enum:GDBCommands
GDBSetThread	./base/remote_gdb.hh	/^    GDBSetThread           = 'H', \/\/ set thread$/;"	e	enum:GDBCommands
GDBSetVar	./base/remote_gdb.hh	/^    GDBSetVar              = 'Q', \/\/ set variable$/;"	e	enum:GDBCommands
GDBSigCycleStep	./base/remote_gdb.hh	/^    GDBSigCycleStep        = 'I', \/\/ signal then cycle step$/;"	e	enum:GDBCommands
GDBSignal	./base/remote_gdb.hh	/^    GDBSignal              = '?', \/\/ last signal$/;"	e	enum:GDBCommands
GDBStart	./base/remote_gdb.hh	/^const char GDBStart = '$';$/;"	v
GDBStep	./base/remote_gdb.hh	/^    GDBStep                = 's', \/\/ step$/;"	e	enum:GDBCommands
GDBTargetExit	./base/remote_gdb.hh	/^    GDBTargetExit          = 'W', \/\/ target exited$/;"	e	enum:GDBCommands
GDBThreadAlive	./base/remote_gdb.hh	/^    GDBThreadAlive         = 'T', \/\/ find out if the thread is alive$/;"	e	enum:GDBCommands
GDDR5_4000_x64	./mem/DRAMCtrl.py	/^class GDDR5_4000_x64(DRAMCtrl):$/;"	c
GDTPhysAddr	./arch/x86/system.hh	/^    const uint64_t GDTPhysAddr = 0x61000;$/;"	m	namespace:X86ISA
GDTVirtAddr	./arch/x86/system.hh	/^    const uint64_t GDTVirtAddr = 0xffff800000001000;$/;"	m	namespace:X86ISA
GEN_ATTNSTATUS	./dev/pci/copy_engine_defs.hh	/^const uint32_t GEN_ATTNSTATUS   = 0x04;$/;"	m	namespace:CopyEngineReg
GEN_CHANCOUNT	./dev/pci/copy_engine_defs.hh	/^const uint32_t GEN_CHANCOUNT    = 0x00;$/;"	m	namespace:CopyEngineReg
GEN_INTRCTRL	./dev/pci/copy_engine_defs.hh	/^const uint32_t GEN_INTRCTRL     = 0x03;$/;"	m	namespace:CopyEngineReg
GEN_XFERCAP	./dev/pci/copy_engine_defs.hh	/^const uint32_t GEN_XFERCAP      = 0x01;$/;"	m	namespace:CopyEngineReg
GHZ	./sim/core.cc	/^double GHZ;$/;"	m	namespace:SimClock::Float	file:
GICH_APR0	./dev/arm/vgic.hh	/^    static const int GICH_APR0          = 0x0f0;$/;"	m	class:VGic
GICH_EISR0	./dev/arm/vgic.hh	/^    static const int GICH_EISR0         = 0x020;$/;"	m	class:VGic
GICH_EISR1	./dev/arm/vgic.hh	/^    static const int GICH_EISR1         = 0x024;$/;"	m	class:VGic
GICH_ELSR0	./dev/arm/vgic.hh	/^    static const int GICH_ELSR0         = 0x030;$/;"	m	class:VGic
GICH_ELSR1	./dev/arm/vgic.hh	/^    static const int GICH_ELSR1         = 0x034;$/;"	m	class:VGic
GICH_HCR	./dev/arm/vgic.hh	/^    static const int GICH_HCR           = 0x000;$/;"	m	class:VGic
GICH_LR0	./dev/arm/vgic.hh	/^    static const int GICH_LR0           = 0x100;$/;"	m	class:VGic
GICH_LR1	./dev/arm/vgic.hh	/^    static const int GICH_LR1           = 0x104;$/;"	m	class:VGic
GICH_LR2	./dev/arm/vgic.hh	/^    static const int GICH_LR2           = 0x108;$/;"	m	class:VGic
GICH_LR3	./dev/arm/vgic.hh	/^    static const int GICH_LR3           = 0x10c;$/;"	m	class:VGic
GICH_MISR	./dev/arm/vgic.hh	/^    static const int GICH_MISR          = 0x010;$/;"	m	class:VGic
GICH_REG_SIZE	./dev/arm/vgic.hh	/^    static const int GICH_REG_SIZE      = 0x2000;$/;"	m	class:VGic
GICH_SIZE	./dev/arm/vgic.hh	/^    static const int GICH_SIZE          = 0x200;$/;"	m	class:VGic
GICH_VMCR	./dev/arm/vgic.hh	/^    static const int GICH_VMCR          = 0x008;$/;"	m	class:VGic
GICH_VTR	./dev/arm/vgic.hh	/^    static const int GICH_VTR           = 0x004;$/;"	m	class:VGic
GICV_ABPR	./dev/arm/vgic.hh	/^    static const int GICV_ABPR          = 0x01c;$/;"	m	class:VGic
GICV_AEOIR	./dev/arm/vgic.hh	/^    static const int GICV_AEOIR         = 0x024;$/;"	m	class:VGic
GICV_AHPPIR	./dev/arm/vgic.hh	/^    static const int GICV_AHPPIR        = 0x028;$/;"	m	class:VGic
GICV_AIAR	./dev/arm/vgic.hh	/^    static const int GICV_AIAR          = 0x020;$/;"	m	class:VGic
GICV_APR0	./dev/arm/vgic.hh	/^    static const int GICV_APR0          = 0x0d0;$/;"	m	class:VGic
GICV_BPR	./dev/arm/vgic.hh	/^    static const int GICV_BPR           = 0x008;$/;"	m	class:VGic
GICV_CTLR	./dev/arm/vgic.hh	/^    static const int GICV_CTLR          = 0x000;$/;"	m	class:VGic
GICV_DIR	./dev/arm/vgic.hh	/^    static const int GICV_DIR           = 0x1000;$/;"	m	class:VGic
GICV_EOIR	./dev/arm/vgic.hh	/^    static const int GICV_EOIR          = 0x010;$/;"	m	class:VGic
GICV_HPPIR	./dev/arm/vgic.hh	/^    static const int GICV_HPPIR         = 0x018;$/;"	m	class:VGic
GICV_IAR	./dev/arm/vgic.hh	/^    static const int GICV_IAR           = 0x00c;$/;"	m	class:VGic
GICV_IIDR	./dev/arm/vgic.hh	/^    static const int GICV_IIDR          = 0x0fc;$/;"	m	class:VGic
GICV_PMR	./dev/arm/vgic.hh	/^    static const int GICV_PMR           = 0x004;$/;"	m	class:VGic
GICV_RPR	./dev/arm/vgic.hh	/^    static const int GICV_RPR           = 0x014;$/;"	m	class:VGic
GICV_SIZE	./dev/arm/vgic.hh	/^    static const int GICV_SIZE          = 0x2000;$/;"	m	class:VGic
GLEVEL_0	./base/loader/coff_symconst.h	62;"	d
GLEVEL_1	./base/loader/coff_symconst.h	63;"	d
GLEVEL_2	./base/loader/coff_symconst.h	64;"	d
GLEVEL_3	./base/loader/coff_symconst.h	65;"	d
GPIOR	./dev/net/ns_gige_reg.h	/^    GPIOR =             0x2c,$/;"	e	enum:DeviceRegisterAddress
GPIOR_GP1_IN	./dev/net/ns_gige_reg.h	/^     GPIOR_GP1_IN =     0x00000400,$/;"	e	enum:GeneralPurposeIOControlRegister
GPIOR_GP1_OE	./dev/net/ns_gige_reg.h	/^     GPIOR_GP1_OE =     0x00000020,$/;"	e	enum:GeneralPurposeIOControlRegister
GPIOR_GP1_OUT	./dev/net/ns_gige_reg.h	/^     GPIOR_GP1_OUT =    0x00000001$/;"	e	enum:GeneralPurposeIOControlRegister
GPIOR_GP2_IN	./dev/net/ns_gige_reg.h	/^     GPIOR_GP2_IN =     0x00000800,$/;"	e	enum:GeneralPurposeIOControlRegister
GPIOR_GP2_OE	./dev/net/ns_gige_reg.h	/^     GPIOR_GP2_OE =     0x00000040,$/;"	e	enum:GeneralPurposeIOControlRegister
GPIOR_GP2_OUT	./dev/net/ns_gige_reg.h	/^     GPIOR_GP2_OUT =    0x00000002,$/;"	e	enum:GeneralPurposeIOControlRegister
GPIOR_GP3_IN	./dev/net/ns_gige_reg.h	/^     GPIOR_GP3_IN =     0x00001000,$/;"	e	enum:GeneralPurposeIOControlRegister
GPIOR_GP3_OE	./dev/net/ns_gige_reg.h	/^     GPIOR_GP3_OE =     0x00000080,$/;"	e	enum:GeneralPurposeIOControlRegister
GPIOR_GP3_OUT	./dev/net/ns_gige_reg.h	/^     GPIOR_GP3_OUT =    0x00000004,$/;"	e	enum:GeneralPurposeIOControlRegister
GPIOR_GP4_IN	./dev/net/ns_gige_reg.h	/^     GPIOR_GP4_IN =     0x00002000,$/;"	e	enum:GeneralPurposeIOControlRegister
GPIOR_GP4_OE	./dev/net/ns_gige_reg.h	/^     GPIOR_GP4_OE =     0x00000100,$/;"	e	enum:GeneralPurposeIOControlRegister
GPIOR_GP4_OUT	./dev/net/ns_gige_reg.h	/^     GPIOR_GP4_OUT =    0x00000008,$/;"	e	enum:GeneralPurposeIOControlRegister
GPIOR_GP5_IN	./dev/net/ns_gige_reg.h	/^     GPIOR_GP5_IN =     0x00004000,$/;"	e	enum:GeneralPurposeIOControlRegister
GPIOR_GP5_OE	./dev/net/ns_gige_reg.h	/^     GPIOR_GP5_OE =     0x00000200,$/;"	e	enum:GeneralPurposeIOControlRegister
GPIOR_GP5_OUT	./dev/net/ns_gige_reg.h	/^     GPIOR_GP5_OUT =    0x00000010,$/;"	e	enum:GeneralPurposeIOControlRegister
GPIOR_UNUSED	./dev/net/ns_gige_reg.h	/^     GPIOR_UNUSED =     0xffff8000,$/;"	e	enum:GeneralPurposeIOControlRegister
GS	./arch/x86/decoder_tables.cc	/^    const uint8_t GS = GSOverride;$/;"	m	namespace:X86ISA	file:
GSI_CLK_TCK	./arch/alpha/linux/linux.hh	/^    static const unsigned GSI_CLK_TCK       = 42; \/\/!< clock freq in Hz$/;"	m	class:AlphaLinux
GSI_CLK_TCK	./arch/alpha/tru64/tru64.hh	/^    static const unsigned GSI_CLK_TCK = 42;      \/\/!< clock freq in Hz$/;"	m	class:AlphaTru64
GSI_CLK_TCK	./arch/mips/linux/linux.hh	/^    static const unsigned GSI_CLK_TCK = 42;        \/\/!< clock freq in Hz$/;"	m	class:MipsLinux
GSI_CPUS_IN_BOX	./arch/alpha/linux/linux.hh	/^    static const unsigned GSI_CPUS_IN_BOX   = 55; \/\/!< number of CPUs in system$/;"	m	class:AlphaLinux
GSI_CPUS_IN_BOX	./arch/alpha/tru64/tru64.hh	/^    static const unsigned GSI_CPUS_IN_BOX = 55;  \/\/!< number of CPUs in system$/;"	m	class:AlphaTru64
GSI_CPUS_IN_BOX	./arch/mips/linux/linux.hh	/^    static const unsigned GSI_CPUS_IN_BOX = 55;    \/\/!< number of CPUs in system$/;"	m	class:MipsLinux
GSI_CPU_INFO	./arch/alpha/linux/linux.hh	/^    static const unsigned GSI_CPU_INFO      = 59; \/\/!< CPU information$/;"	m	class:AlphaLinux
GSI_CPU_INFO	./arch/alpha/tru64/tru64.hh	/^    static const unsigned GSI_CPU_INFO = 59;     \/\/!< CPU information$/;"	m	class:AlphaTru64
GSI_CPU_INFO	./arch/mips/linux/linux.hh	/^    static const unsigned GSI_CPU_INFO = 59;       \/\/!< CPU information$/;"	m	class:MipsLinux
GSI_IEEE_FP_CONTROL	./arch/alpha/linux/linux.hh	/^    static const unsigned GSI_IEEE_FP_CONTROL = 45;$/;"	m	class:AlphaLinux
GSI_MAX_CPU	./arch/alpha/linux/linux.hh	/^    static const unsigned GSI_MAX_CPU       = 30; \/\/!< max # CPUs on machine$/;"	m	class:AlphaLinux
GSI_MAX_CPU	./arch/alpha/tru64/tru64.hh	/^    static const unsigned GSI_MAX_CPU = 30;      \/\/!< max # CPUs on machine$/;"	m	class:AlphaTru64
GSI_MAX_CPU	./arch/mips/linux/linux.hh	/^    static const unsigned GSI_MAX_CPU = 30;        \/\/!< max # cpu's on this machine$/;"	m	class:MipsLinux
GSI_PHYSMEM	./arch/alpha/linux/linux.hh	/^    static const unsigned GSI_PHYSMEM       = 19; \/\/!< Physical memory in KB$/;"	m	class:AlphaLinux
GSI_PHYSMEM	./arch/alpha/tru64/tru64.hh	/^    static const unsigned GSI_PHYSMEM = 19;      \/\/!< Physical memory in KB$/;"	m	class:AlphaTru64
GSI_PHYSMEM	./arch/mips/linux/linux.hh	/^    static const unsigned GSI_PHYSMEM = 19;        \/\/!< Physical memory in KB$/;"	m	class:MipsLinux
GSI_PLATFORM_NAME	./arch/alpha/linux/linux.hh	/^    static const unsigned GSI_PLATFORM_NAME = 103; \/\/!< platform name as string$/;"	m	class:AlphaLinux
GSI_PLATFORM_NAME	./arch/alpha/tru64/tru64.hh	/^    static const unsigned GSI_PLATFORM_NAME = 103; \/\/!< platform name string$/;"	m	class:AlphaTru64
GSI_PLATFORM_NAME	./arch/mips/linux/linux.hh	/^    static const unsigned GSI_PLATFORM_NAME = 103; \/\/!< platform name as string$/;"	m	class:MipsLinux
GSI_PROC_TYPE	./arch/alpha/linux/linux.hh	/^    static const unsigned GSI_PROC_TYPE     = 60; \/\/!< get proc_type$/;"	m	class:AlphaLinux
GSI_PROC_TYPE	./arch/alpha/tru64/tru64.hh	/^    static const unsigned GSI_PROC_TYPE = 60;    \/\/!< get proc_type$/;"	m	class:AlphaTru64
GSI_PROC_TYPE	./arch/mips/linux/linux.hh	/^    static const unsigned GSI_PROC_TYPE = 60;      \/\/!< get proc_type$/;"	m	class:MipsLinux
GSOverride	./arch/x86/types.hh	/^        GSOverride,$/;"	e	enum:X86ISA::Prefixes
GarnetExtLink	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.cc	/^GarnetExtLink::GarnetExtLink(const Params *p)$/;"	f	class:GarnetExtLink
GarnetExtLink	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.hh	/^class GarnetExtLink : public BasicLink$/;"	c
GarnetExtLink	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.py	/^class GarnetExtLink(BasicExtLink):$/;"	c
GarnetExtLink_d	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.cc	/^GarnetExtLink_d::GarnetExtLink_d(const Params *p)$/;"	f	class:GarnetExtLink_d
GarnetExtLink_d	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.hh	/^class GarnetExtLink_d : public BasicLink$/;"	c
GarnetExtLink_d	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^class GarnetExtLink_d(BasicExtLink):$/;"	c
GarnetIntLink	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.cc	/^GarnetIntLink::GarnetIntLink(const Params *p)$/;"	f	class:GarnetIntLink
GarnetIntLink	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.hh	/^class GarnetIntLink : public BasicLink$/;"	c
GarnetIntLink	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.py	/^class GarnetIntLink(BasicIntLink):$/;"	c
GarnetIntLink_d	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.cc	/^GarnetIntLink_d::GarnetIntLink_d(const Params *p)$/;"	f	class:GarnetIntLink_d
GarnetIntLink_d	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.hh	/^class GarnetIntLink_d : public BasicLink$/;"	c
GarnetIntLink_d	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^class GarnetIntLink_d(BasicIntLink):$/;"	c
GarnetNetwork	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.cc	/^GarnetNetwork::GarnetNetwork(const Params *p)$/;"	f	class:GarnetNetwork
GarnetNetwork	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.hh	/^class GarnetNetwork : public BaseGarnetNetwork$/;"	c
GarnetNetwork	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.py	/^class GarnetNetwork(BaseGarnetNetwork):$/;"	c
GarnetNetworkInterface	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.py	/^class GarnetNetworkInterface(ClockedObject):$/;"	c
GarnetNetworkInterface_d	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.py	/^class GarnetNetworkInterface_d(ClockedObject):$/;"	c
GarnetNetwork_d	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.cc	/^GarnetNetwork_d::GarnetNetwork_d(const Params *p)$/;"	f	class:GarnetNetwork_d
GarnetNetwork_d	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.hh	/^class GarnetNetwork_d : public BaseGarnetNetwork$/;"	c
GarnetNetwork_d	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.py	/^class GarnetNetwork_d(BaseGarnetNetwork):$/;"	c
GarnetRouter	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.py	/^class GarnetRouter(BasicRouter):$/;"	c
GarnetRouter_d	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.py	/^class GarnetRouter_d(BasicRouter):$/;"	c
GenCode	./arch/isa_parser.py	/^class GenCode(object):$/;"	c
GenFunc	./arch/x86/microcode_rom.hh	/^        typedef StaticInstPtr (*GenFunc)(StaticInstPtr);$/;"	t	class:X86ISAInst::MicrocodeRom
GeneralProtection	./arch/x86/faults.hh	/^        GeneralProtection(uint32_t _errorCode) :$/;"	f	class:X86ISA::GeneralProtection
GeneralProtection	./arch/x86/faults.hh	/^    class GeneralProtection : public X86Fault$/;"	c	namespace:X86ISA
GeneralPurposeIOControlRegister	./dev/net/ns_gige_reg.h	/^enum GeneralPurposeIOControlRegister {$/;"	g
GenericAlignmentFault	./sim/faults.hh	/^    GenericAlignmentFault(Addr va) : vaddr(va) {}$/;"	f	class:GenericAlignmentFault
GenericAlignmentFault	./sim/faults.hh	/^class GenericAlignmentFault : public FaultBase$/;"	c
GenericArmSystem	./arch/arm/ArmSystem.py	/^class GenericArmSystem(ArmSystem):$/;"	c
GenericArmSystem	./arch/arm/system.hh	/^    GenericArmSystem(Params *p) : ArmSystem(p) {};$/;"	f	class:GenericArmSystem
GenericArmSystem	./arch/arm/system.hh	/^class GenericArmSystem : public ArmSystem$/;"	c
GenericISA	./arch/generic/debugfaults.hh	/^namespace GenericISA$/;"	n
GenericISA	./arch/generic/decode_cache.cc	/^namespace GenericISA$/;"	n	file:
GenericISA	./arch/generic/decode_cache.hh	/^namespace GenericISA$/;"	n
GenericISA	./arch/generic/mmapped_ipr.hh	/^namespace GenericISA$/;"	n
GenericISA	./arch/generic/pseudo_inst.hh	/^namespace GenericISA {$/;"	n
GenericISA	./arch/generic/types.hh	/^namespace GenericISA$/;"	n
GenericPageTableFault	./sim/faults.hh	/^    GenericPageTableFault(Addr va) : vaddr(va) {}$/;"	f	class:GenericPageTableFault
GenericPageTableFault	./sim/faults.hh	/^class GenericPageTableFault : public FaultBase$/;"	c
GenericPciHost	./dev/pci/PciHost.py	/^class GenericPciHost(PciHost):$/;"	c
GenericPciHost	./dev/pci/host.cc	/^GenericPciHost::GenericPciHost(const GenericPciHostParams *p)$/;"	f	class:GenericPciHost
GenericPciHost	./dev/pci/host.hh	/^class GenericPciHost : public PciHost$/;"	c
GenericTLB	./arch/generic/tlb.hh	/^    GenericTLB(const Params *p)$/;"	f	class:GenericTLB
GenericTLB	./arch/generic/tlb.hh	/^class GenericTLB : public BaseTLB$/;"	c
GenericTimer	./dev/arm/RealView.py	/^class GenericTimer(SimObject):$/;"	c
GenericTimer	./dev/arm/generic_timer.cc	/^GenericTimer::GenericTimer(GenericTimerParams *p)$/;"	f	class:GenericTimer
GenericTimer	./dev/arm/generic_timer.hh	/^class GenericTimer : public SimObject$/;"	c
GenericTimerISA	./dev/arm/generic_timer.hh	/^    GenericTimerISA(GenericTimer &_parent, unsigned _cpu)$/;"	f	class:GenericTimerISA
GenericTimerISA	./dev/arm/generic_timer.hh	/^class GenericTimerISA : public ArmISA::BaseISADevice$/;"	c
GenericTimerMem	./dev/arm/RealView.py	/^class GenericTimerMem(PioDevice):$/;"	c
GenericTimerMem	./dev/arm/generic_timer.cc	/^GenericTimerMem::GenericTimerMem(GenericTimerMemParams *p)$/;"	f	class:GenericTimerMem
GenericTimerMem	./dev/arm/generic_timer.hh	/^class GenericTimerMem : public PioDevice$/;"	c
GetCommandByte	./dev/x86/i8042.hh	/^        GetCommandByte = 0x20,$/;"	e	enum:X86ISA::I8042::Command
GetStatus	./dev/x86/i8042.hh	/^        GetStatus = 0xE9,$/;"	e	enum:X86ISA::PS2Mouse::Command
GetTsbPtr	./arch/sparc/tlb.cc	/^TLB::GetTsbPtr(ThreadContext *tc, Addr addr, int ctx, Addr *ptrs)$/;"	f	class:SparcISA::TLB
Gicv2m	./dev/arm/Gic.py	/^class Gicv2m(PioDevice):$/;"	c
Gicv2m	./dev/arm/gic_v2m.cc	/^Gicv2m::Gicv2m(const Params *p)$/;"	f	class:Gicv2m
Gicv2m	./dev/arm/gic_v2m.hh	/^class Gicv2m : public PioDevice$/;"	c
Gicv2mFrame	./dev/arm/Gic.py	/^class Gicv2mFrame(SimObject):$/;"	c
Gicv2mFrame	./dev/arm/gic_v2m.hh	/^    Gicv2mFrame(const Params *p) :$/;"	f	class:Gicv2mFrame
Gicv2mFrame	./dev/arm/gic_v2m.hh	/^class Gicv2mFrame : public SimObject$/;"	c
Global	./sim/stat_control.cc	/^Global::Global()$/;"	f	class:Stats::Global
Global	./sim/stat_control.cc	/^struct Global$/;"	s	namespace:Stats	file:
GlobalEvent	./sim/global_event.hh	/^    GlobalEvent(Priority p, Flags f)$/;"	f	class:GlobalEvent
GlobalEvent	./sim/global_event.hh	/^    GlobalEvent(Tick when, Priority p, Flags f)$/;"	f	class:GlobalEvent
GlobalEvent	./sim/global_event.hh	/^class GlobalEvent : public BaseGlobalEventTemplate<GlobalEvent>$/;"	c
GlobalPointerReg	./arch/alpha/registers.hh	/^const RegIndex GlobalPointerReg = 29;$/;"	m	namespace:AlphaISA
GlobalPointerReg	./arch/mips/registers.hh	/^const int GlobalPointerReg = 28;$/;"	m	namespace:MipsISA
GlobalSimLoopExitEvent	./sim/sim_events.cc	/^GlobalSimLoopExitEvent::GlobalSimLoopExitEvent(Tick when,$/;"	f	class:GlobalSimLoopExitEvent
GlobalSimLoopExitEvent	./sim/sim_events.hh	/^class GlobalSimLoopExitEvent : public GlobalEvent$/;"	c
GlobalSyncEvent	./sim/global_event.hh	/^    GlobalSyncEvent(Priority p, Flags f)$/;"	f	class:GlobalSyncEvent
GlobalSyncEvent	./sim/global_event.hh	/^    GlobalSyncEvent(Tick when, Tick _repeat, Priority p, Flags f)$/;"	f	class:GlobalSyncEvent
GlobalSyncEvent	./sim/global_event.hh	/^class GlobalSyncEvent : public BaseGlobalEventTemplate<GlobalSyncEvent>$/;"	c
Globals	./sim/serialize.cc	/^    Globals()$/;"	f	class:Globals
Globals	./sim/serialize.cc	/^class Globals : public Serializable$/;"	c	file:
Grain16KB	./arch/arm/table_walker.hh	/^        Grain16KB = 14,$/;"	e	enum:ArmISA::TableWalker::GrainSize
Grain4KB	./arch/arm/table_walker.hh	/^        Grain4KB  = 12,$/;"	e	enum:ArmISA::TableWalker::GrainSize
Grain64KB	./arch/arm/table_walker.hh	/^        Grain64KB = 16,$/;"	e	enum:ArmISA::TableWalker::GrainSize
GrainSize	./arch/arm/table_walker.hh	/^    enum GrainSize {$/;"	g	class:ArmISA::TableWalker
Grammar	./python/m5/util/grammar.py	/^class Grammar(object):$/;"	c
GraphNode	./cpu/trace/trace_cpu.hh	/^        class GraphNode {$/;"	c	class:TraceCPU::ElasticDataGen
Green_Select	./dev/arm/hdlcd.hh	/^        Green_Select     = 0x0248,$/;"	e	enum:HDLcd::RegisterOffset
Group	./python/m5/util/jobfile.py	/^class Group(Data):$/;"	c
Grp1	./dev/arm/vgic.hh	/^    Bitfield<30> Grp1;$/;"	m	class:VGic
GuestByteOrder	./sim/byteswap.hh	/^    const ByteOrder GuestByteOrder = BigEndianByteOrder;$/;"	m	namespace:BigEndianGuest
GuestByteOrder	./sim/byteswap.hh	/^    const ByteOrder GuestByteOrder = LittleEndianByteOrder;$/;"	m	namespace:LittleEndianGuest
H	./arch/sparc/faults.hh	/^        H, Hyperprivileged = H,$/;"	e	enum:SparcISA::SparcFaultBase::PrivilegeLevel
H	./arch/x86/regs/int.hh	/^        Bitfield<15,8> H;$/;"	m	namespace:X86ISA
H3	./mem/ruby/filters/H3BloomFilter.cc	/^static int H3[64][16] = {$/;"	v	file:
H3BloomFilter	./mem/ruby/filters/H3BloomFilter.cc	/^H3BloomFilter::H3BloomFilter(int size, int hashes, bool parallel)$/;"	f	class:H3BloomFilter
H3BloomFilter	./mem/ruby/filters/H3BloomFilter.hh	/^class H3BloomFilter : public AbstractBloomFilter$/;"	c
HANDLE_ARRAY	./cpu/kvm/base.cc	819;"	d	file:
HANDLE_ARRAY	./cpu/kvm/base.cc	843;"	d	file:
HANDLE_INTTYPE	./cpu/kvm/base.cc	812;"	d	file:
HANDLE_INTTYPE	./cpu/kvm/base.cc	842;"	d	file:
HBM_1000_4H_x128	./mem/DRAMCtrl.py	/^class HBM_1000_4H_x128(DRAMCtrl):$/;"	c
HBM_1000_4H_x64	./mem/DRAMCtrl.py	/^class HBM_1000_4H_x64(HBM_1000_4H_x128):$/;"	c
HCCAP	./dev/arm/ufs_device.hh	/^        uint32_t HCCAP;$/;"	m	struct:UFSHostDevice::HCIMem
HCHCDDID	./dev/arm/ufs_device.hh	/^        uint32_t HCHCDDID;$/;"	m	struct:UFSHostDevice::HCIMem
HCHCPMID	./dev/arm/ufs_device.hh	/^        uint32_t HCHCPMID;$/;"	m	struct:UFSHostDevice::HCIMem
HCIMem	./dev/arm/ufs_device.hh	/^    struct HCIMem {$/;"	s	class:UFSHostDevice
HCYL_OFFSET	./dev/storage/ide_disk.hh	104;"	d
HCversion	./dev/arm/ufs_device.hh	/^        uint32_t HCversion;$/;"	m	struct:UFSHostDevice::HCIMem
HDLcd	./dev/arm/RealView.py	/^class HDLcd(AmbaDmaDevice):$/;"	c
HDLcd	./dev/arm/hdlcd.cc	/^HDLcd::HDLcd(const HDLcdParams *p)$/;"	f	class:HDLcd
HDLcd	./dev/arm/hdlcd.hh	/^class HDLcd: public AmbaDmaDevice$/;"	c
HDRR	./base/loader/coff_sym.h	/^} HDRR, *pHDRR;$/;"	t	typeref:struct:ecoff_symhdr
HEAD_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum flit_type {HEAD_, BODY_, TAIL_, HEAD_TAIL_, NUM_FLIT_TYPE_};$/;"	e	enum:flit_type
HEAD_TAIL_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum flit_type {HEAD_, BODY_, TAIL_, HEAD_TAIL_, NUM_FLIT_TYPE_};$/;"	e	enum:flit_type
HFarIndex	./arch/arm/faults.hh	/^    static const MiscRegIndex HFarIndex = MISCREG_HDFAR;$/;"	m	class:ArmISA::DataAbort
HFarIndex	./arch/arm/faults.hh	/^    static const MiscRegIndex HFarIndex = MISCREG_HDFAR;$/;"	m	class:ArmISA::VirtualDataAbort
HFarIndex	./arch/arm/faults.hh	/^    static const MiscRegIndex HFarIndex = MISCREG_HIFAR;$/;"	m	class:ArmISA::PrefetchAbort
HMCController	./mem/HMCController.py	/^class HMCController(NoncoherentXBar):$/;"	c
HMCController	./mem/hmc_controller.cc	/^HMCController::HMCController(const HMCControllerParams* p) :$/;"	f	class:HMCController
HMCController	./mem/hmc_controller.hh	/^class HMCController : public NoncoherentXBar$/;"	c
HMC_2500_x32	./mem/DRAMCtrl.py	/^class HMC_2500_x32(DDR3_1600_x64):$/;"	c
HOME_ADDRESS_OPTION	./base/inet.hh	463;"	d
HSTickCompareEvent	./arch/sparc/isa.hh	/^            &ISA::processHSTickCompare> HSTickCompareEvent;$/;"	t	class:SparcISA::ISA
HW	./dev/arm/vgic.hh	/^    Bitfield<31> HW;$/;"	m	class:VGic
H_Back_Porch	./dev/arm/hdlcd.hh	/^        H_Back_Porch     = 0x0214,$/;"	e	enum:HDLcd::RegisterOffset
H_Data	./dev/arm/hdlcd.hh	/^        H_Data           = 0x0218,$/;"	e	enum:HDLcd::RegisterOffset
H_Front_Porch	./dev/arm/hdlcd.hh	/^        H_Front_Porch    = 0x021C,$/;"	e	enum:HDLcd::RegisterOffset
H_Sync	./dev/arm/hdlcd.hh	/^        H_Sync           = 0x0210,$/;"	e	enum:HDLcd::RegisterOffset
HaltFetch	./cpu/minor/pipe_data.hh	/^        HaltFetch$/;"	e	enum:Minor::BranchData::Reason
Halted	./cpu/o3/cpu.hh	/^        Halted,$/;"	e	enum:FullO3CPU::Status
Halted	./cpu/thread_context.hh	/^        Halted$/;"	e	enum:ThreadContext::Status
Handle	./base/trie.hh	/^    typedef Node *Handle;$/;"	t	class:Trie
Handler	./base/statistics.hh	/^typedef void (*Handler)();$/;"	t	namespace:Stats
Handler	./mem/external_master.hh	/^    class Handler$/;"	c	class:ExternalMaster
Handler	./mem/external_slave.hh	/^    class Handler$/;"	c	class:ExternalSlave
HardBreakpoint	./base/remote_gdb.cc	/^BaseRemoteGDB::HardBreakpoint::HardBreakpoint(BaseRemoteGDB *_gdb, Addr pc)$/;"	f	class:BaseRemoteGDB::HardBreakpoint
HardBreakpoint	./base/remote_gdb.hh	/^    class HardBreakpoint : public PCEvent$/;"	c	class:BaseRemoteGDB
HardPFReq	./mem/packet.hh	/^        HardPFReq,$/;"	e	enum:MemCmd::Command
HardPFResp	./mem/packet.hh	/^        HardPFResp,$/;"	e	enum:MemCmd::Command
HardwareResource	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::HardwareResource::HardwareResource($/;"	f	class:TraceCPU::ElasticDataGen::HardwareResource
HardwareResource	./cpu/trace/trace_cpu.hh	/^        class HardwareResource$/;"	c	class:TraceCPU::ElasticDataGen
HardwareStrobe	./dev/intel_8254_timer.hh	/^        HardwareStrobe$/;"	e	enum:Intel8254Timer::ModeVal
HasData	./mem/packet.hh	/^        HasData,        \/\/!< There is an associated payload$/;"	e	enum:MemCmd::Attribute
HasUnalignedMemAcc	./arch/alpha/isa_traits.hh	/^const bool HasUnalignedMemAcc = false;$/;"	m	namespace:AlphaISA
HasUnalignedMemAcc	./arch/arm/isa_traits.hh	/^    const bool HasUnalignedMemAcc = true;$/;"	m	namespace:ArmISA
HasUnalignedMemAcc	./arch/mips/isa_traits.hh	/^const bool HasUnalignedMemAcc = true;$/;"	m	namespace:MipsISA
HasUnalignedMemAcc	./arch/power/isa_traits.hh	/^const bool HasUnalignedMemAcc = true;$/;"	m	namespace:PowerISA
HasUnalignedMemAcc	./arch/sparc/isa_traits.hh	/^const bool HasUnalignedMemAcc = false;$/;"	m	namespace:SparcISA
HasUnalignedMemAcc	./arch/x86/isa_traits.hh	/^    const bool HasUnalignedMemAcc = true;$/;"	m	namespace:X86ISA
Header	./dev/net/dist_iface.hh	/^    typedef DistHeaderPkt::Header Header;$/;"	t	class:DistIface
Header	./dev/net/dist_packet.hh	/^    struct Header$/;"	s	class:DistHeaderPkt
Header	./dev/virtio/base.hh	/^        struct Header {$/;"	s	class:VirtQueue::VirtRing
HeaderType	./dev/pci/PciDevice.py	/^    HeaderType = Param.UInt8(0, "PCI Header Type")$/;"	v	class:PciDevice
Height	./base/bitmap.hh	/^        uint32_t Height;$/;"	m	struct:Bitmap::InfoHeaderV1
HexFile	./base/loader/hex_file.cc	/^HexFile::HexFile(const string _filename)$/;"	f	class:HexFile
HexFile	./base/loader/hex_file.hh	/^class HexFile$/;"	c
HighVecs	./arch/arm/isa_traits.hh	/^    const uint32_t HighVecs = 0xFFFF0000;$/;"	m	namespace:ArmISA
Hist	./base/stats/info.hh	/^enum DistType { Deviation, Dist, Hist };$/;"	e	enum:Stats::DistType
HistStor	./base/statistics.hh	/^    HistStor(Info *info)$/;"	f	class:Stats::HistStor
HistStor	./base/statistics.hh	/^class HistStor$/;"	c	namespace:Stats
Histogram	./base/statistics.hh	/^class Histogram : public DistBase<Histogram, HistStor>$/;"	c	namespace:Stats
Histogram	./mem/ruby/common/Histogram.cc	/^Histogram::Histogram(int binsize, uint32_t bins)$/;"	f	class:Histogram
Histogram	./mem/ruby/common/Histogram.hh	/^class Histogram$/;"	c
History	./cpu/pred/bpred_unit.hh	/^    typedef std::deque<PredictorHistory> History;$/;"	t	class:BPredUnit
HitExternalSnoop	./cpu/base_dyn_inst.hh	/^        HitExternalSnoop,$/;"	e	enum:BaseDynInst::Flags
Hoop	./arch/micro_asm_test.py	/^class Hoop(object):$/;"	c
HostByteOrder	./sim/byteswap.hh	/^const ByteOrder HostByteOrder = BigEndianByteOrder;$/;"	v
HostByteOrder	./sim/byteswap.hh	/^const ByteOrder HostByteOrder = LittleEndianByteOrder;$/;"	v
HstickMatch	./arch/sparc/faults.hh	/^class HstickMatch : public SparcFault<HstickMatch> {};$/;"	c	namespace:SparcISA
HwAddr	./dev/net/sinic.hh	/^        uint64_t HwAddr;       \/\/ 0x70$/;"	m	struct:Sinic::Device::__anon11
HypMode	./arch/arm/tlb.hh	/^        HypMode = 0x2,$/;"	e	enum:ArmISA::TLB::ArmTranslationType
Hyperprivileged	./arch/sparc/faults.hh	/^        H, Hyperprivileged = H,$/;"	e	enum:SparcISA::SparcFaultBase::PrivilegeLevel
HypervisorCall	./arch/arm/faults.cc	/^HypervisorCall::HypervisorCall(ExtMachInst _machInst, uint32_t _imm) :$/;"	f	class:ArmISA::HypervisorCall
HypervisorCall	./arch/arm/faults.hh	/^class HypervisorCall : public ArmFaultVals<HypervisorCall>$/;"	c	namespace:ArmISA
HypervisorTrap	./arch/arm/faults.hh	/^    HypervisorTrap(ExtMachInst _machInst, uint32_t _iss,$/;"	f	class:ArmISA::HypervisorTrap
HypervisorTrap	./arch/arm/faults.hh	/^class HypervisorTrap : public ArmFaultVals<HypervisorTrap>$/;"	c	namespace:ArmISA
Hz	./sim/core.cc	/^double Hz;$/;"	m	namespace:SimClock::Float	file:
I2CBus	./dev/i2c/I2C.py	/^class I2CBus(BasicPioDevice):$/;"	c
I2CBus	./dev/i2c/bus.cc	/^I2CBus::I2CBus(const I2CBusParams *p)$/;"	f	class:I2CBus
I2CBus	./dev/i2c/bus.hh	/^class I2CBus : public BasicPioDevice$/;"	c
I2CDevice	./dev/i2c/I2C.py	/^class I2CDevice(SimObject):$/;"	c
I2CDevice	./dev/i2c/device.hh	/^    I2CDevice(const I2CDeviceParams* p)$/;"	f	class:I2CDevice
I2CDevice	./dev/i2c/device.hh	/^class I2CDevice : public SimObject$/;"	c
I2CState	./dev/i2c/bus.hh	/^    enum I2CState {$/;"	g	class:I2CBus
I386	./base/loader/object_file.hh	/^        I386,$/;"	e	enum:ObjectFile::Arch
I386LinuxProcess	./arch/x86/linux/process.cc	/^I386LinuxProcess::I386LinuxProcess(LiveProcessParams * params,$/;"	f	class:I386LinuxProcess
I386LinuxProcess	./arch/x86/linux/process.hh	/^class I386LinuxProcess : public I386LiveProcess$/;"	c	namespace:X86ISA
I386LiveProcess	./arch/x86/process.cc	/^I386LiveProcess::I386LiveProcess(LiveProcessParams *params,$/;"	f	class:I386LiveProcess
I386LiveProcess	./arch/x86/process.hh	/^    class I386LiveProcess : public X86LiveProcess$/;"	c	namespace:X86ISA
I8042	./dev/x86/I8042.py	/^class I8042(BasicPioDevice):$/;"	c
I8042	./dev/x86/i8042.cc	/^X86ISA::I8042::I8042(Params *p)$/;"	f	class:X86ISA::I8042
I8042	./dev/x86/i8042.hh	/^class I8042 : public BasicPioDevice$/;"	c	namespace:X86ISA
I82094AA	./dev/x86/I82094AA.py	/^class I82094AA(BasicPioDevice):$/;"	c
I82094AA	./dev/x86/i82094aa.cc	/^X86ISA::I82094AA::I82094AA(Params *p)$/;"	f	class:X86ISA::I82094AA
I82094AA	./dev/x86/i82094aa.hh	/^class I82094AA : public BasicPioDevice, public IntDevice$/;"	c	namespace:X86ISA
I8237	./dev/x86/I8237.py	/^class I8237(BasicPioDevice):$/;"	c
I8237	./dev/x86/i8237.hh	/^    I8237(Params *p) : BasicPioDevice(p, 16), latency(p->pio_latency), maskReg(0)$/;"	f	class:X86ISA::I8237
I8237	./dev/x86/i8237.hh	/^class I8237 : public BasicPioDevice$/;"	c	namespace:X86ISA
I8254	./dev/x86/I8254.py	/^class I8254(BasicPioDevice):$/;"	c
I8254	./dev/x86/i8254.hh	/^    I8254(Params *p) : BasicPioDevice(p, 4), latency(p->pio_latency),$/;"	f	class:X86ISA::I8254
I8254	./dev/x86/i8254.hh	/^class I8254 : public BasicPioDevice$/;"	c	namespace:X86ISA
I8259	./dev/x86/I8259.py	/^class I8259(BasicPioDevice):$/;"	c
I8259	./dev/x86/i8259.cc	/^X86ISA::I8259::I8259(Params * p)$/;"	f	class:X86ISA::I8259
I8259	./dev/x86/i8259.hh	/^class I8259 : public BasicPioDevice, public IntDevice$/;"	c	namespace:X86ISA
ICCABPR	./dev/arm/gic_pl390.hh	/^    static const int ICCABPR = 0x1c; \/\/ aliased binary point$/;"	m	class:Pl390
ICCBPR	./dev/arm/gic_pl390.hh	/^    static const int ICCBPR  = 0x08; \/\/ binary point register$/;"	m	class:Pl390
ICCEOIR	./dev/arm/gic_pl390.hh	/^    static const int ICCEOIR = 0x10; \/\/ end of interrupt$/;"	m	class:Pl390
ICCHPIR	./dev/arm/gic_pl390.hh	/^    static const int ICCHPIR = 0x18; \/\/ highest pending interrupt$/;"	m	class:Pl390
ICCIAR	./dev/arm/gic_pl390.hh	/^    static const int ICCIAR  = 0x0C; \/\/ interrupt ack register$/;"	m	class:Pl390
ICCICR	./dev/arm/gic_pl390.hh	/^    static const int ICCICR  = 0x00; \/\/ CPU control register$/;"	m	class:Pl390
ICCIIDR	./dev/arm/gic_pl390.hh	/^    static const int ICCIIDR = 0xfc; \/\/ cpu interface id register$/;"	m	class:Pl390
ICCPMR	./dev/arm/gic_pl390.hh	/^    static const int ICCPMR  = 0x04; \/\/ Interrupt priority mask$/;"	m	class:Pl390
ICCRPR	./dev/arm/gic_pl390.hh	/^    static const int ICCRPR  = 0x14; \/\/ runing priority$/;"	m	class:Pl390
ICDABR_ED	./dev/arm/gic_pl390.hh	/^    static const int ICDABR_ED  = 0x37c;$/;"	m	class:Pl390
ICDABR_ST	./dev/arm/gic_pl390.hh	/^    static const int ICDABR_ST  = 0x300; \/\/ active bit registers$/;"	m	class:Pl390
ICDDCR	./dev/arm/gic_pl390.hh	/^    static const int ICDDCR     = 0x000; \/\/ control register$/;"	m	class:Pl390
ICDICER_ED	./dev/arm/gic_pl390.hh	/^    static const int ICDICER_ED = 0x1fc;$/;"	m	class:Pl390
ICDICER_ST	./dev/arm/gic_pl390.hh	/^    static const int ICDICER_ST = 0x180; \/\/ interrupt clear enable$/;"	m	class:Pl390
ICDICFR_ED	./dev/arm/gic_pl390.hh	/^    static const int ICDICFR_ED = 0xcfc;$/;"	m	class:Pl390
ICDICFR_ST	./dev/arm/gic_pl390.hh	/^    static const int ICDICFR_ST = 0xc00; \/\/ interrupt config registers$/;"	m	class:Pl390
ICDICPR_ED	./dev/arm/gic_pl390.hh	/^    static const int ICDICPR_ED = 0x2fc;$/;"	m	class:Pl390
ICDICPR_ST	./dev/arm/gic_pl390.hh	/^    static const int ICDICPR_ST = 0x280; \/\/ clear pending interrupt$/;"	m	class:Pl390
ICDICTR	./dev/arm/gic_pl390.hh	/^    static const int ICDICTR    = 0x004; \/\/ controller type$/;"	m	class:Pl390
ICDIIDR	./dev/arm/gic_pl390.hh	/^    static const int ICDIIDR    = 0x008; \/\/ implementer id$/;"	m	class:Pl390
ICDIPR_ED	./dev/arm/gic_pl390.hh	/^    static const int ICDIPR_ED  = 0x7f8;$/;"	m	class:Pl390
ICDIPR_ST	./dev/arm/gic_pl390.hh	/^    static const int ICDIPR_ST  = 0x400; \/\/ interrupt priority registers$/;"	m	class:Pl390
ICDIPTR_ED	./dev/arm/gic_pl390.hh	/^    static const int ICDIPTR_ED = 0xbf8;$/;"	m	class:Pl390
ICDIPTR_ST	./dev/arm/gic_pl390.hh	/^    static const int ICDIPTR_ST = 0x800; \/\/ processor target registers$/;"	m	class:Pl390
ICDISER_ED	./dev/arm/gic_pl390.hh	/^    static const int ICDISER_ED = 0x17c;$/;"	m	class:Pl390
ICDISER_ST	./dev/arm/gic_pl390.hh	/^    static const int ICDISER_ST = 0x100; \/\/ interrupt set enable$/;"	m	class:Pl390
ICDISPR_ED	./dev/arm/gic_pl390.hh	/^    static const int ICDISPR_ED = 0x27c;$/;"	m	class:Pl390
ICDISPR_ST	./dev/arm/gic_pl390.hh	/^    static const int ICDISPR_ST = 0x200; \/\/ set pending interrupt$/;"	m	class:Pl390
ICDSGIR	./dev/arm/gic_pl390.hh	/^    static const int ICDSGIR    = 0xf00; \/\/ software generated interrupt$/;"	m	class:Pl390
ICM_CM	./arch/alpha/ev5.hh	/^inline uint64_t ICM_CM(uint64_t reg) { return reg >> 3 & 0x3; }$/;"	f	namespace:AlphaISA
ICR	./dev/net/i8254xGBe_defs.hh	/^    struct ICR : public Reg<uint32_t> { \/\/ 0x00C0 ICR Register$/;"	s	struct:iGbReg::Regs
ICSR_FPE	./arch/alpha/ev5.hh	/^inline bool ICSR_FPE(uint64_t reg) { return reg >> 26 & 0x1; }$/;"	f	namespace:AlphaISA
ICSR_SDE	./arch/alpha/ev5.hh	/^inline bool ICSR_SDE(uint64_t reg) { return reg >> 30 & 0x1; }$/;"	f	namespace:AlphaISA
ICSR_SPE	./arch/alpha/ev5.hh	/^inline int ICSR_SPE(uint64_t reg) { return reg >> 28 & 0x3; }$/;"	f	namespace:AlphaISA
ID	./dev/x86/i8042.cc	/^const uint8_t X86ISA::PS2Keyboard::ID[] = {0xab, 0x83};$/;"	m	class:X86ISA::PS2Keyboard	file:
ID	./dev/x86/i8042.cc	/^const uint8_t X86ISA::PS2Mouse::ID[] = {0x00};$/;"	m	class:X86ISA::PS2Mouse	file:
ID	./dev/x86/i8042.hh	/^    static const uint8_t ID[];$/;"	m	class:X86ISA::PS2Keyboard
ID	./dev/x86/i8042.hh	/^    static const uint8_t ID[];$/;"	m	class:X86ISA::PS2Mouse
IDBit	./arch/x86/regs/misc.hh	/^        IDBit = 1 << 21$/;"	e	enum:X86ISA::RFLAGBit
IDD0	./mem/DRAMCtrl.py	/^    IDD0 = '15mA'$/;"	v	class:LPDDR2_S4_1066_x32
IDD0	./mem/DRAMCtrl.py	/^    IDD0 = '64mA'$/;"	v	class:DDR4_2400_x64
IDD0	./mem/DRAMCtrl.py	/^    IDD0 = '70mA'$/;"	v	class:DDR3_2133_x64
IDD0	./mem/DRAMCtrl.py	/^    IDD0 = '75mA'$/;"	v	class:DDR3_1600_x64
IDD0	./mem/DRAMCtrl.py	/^    IDD0 = '8mA'$/;"	v	class:LPDDR3_1600_x32
IDD0	./mem/DRAMCtrl.py	/^    IDD0 = Param.Current("0mA", "Active precharge current")$/;"	v	class:DRAMCtrl
IDD02	./mem/DRAMCtrl.py	/^    IDD02 = '4mA'$/;"	v	class:DDR4_2400_x64
IDD02	./mem/DRAMCtrl.py	/^    IDD02 = '60mA'$/;"	v	class:LPDDR3_1600_x32
IDD02	./mem/DRAMCtrl.py	/^    IDD02 = '70mA'$/;"	v	class:LPDDR2_S4_1066_x32
IDD02	./mem/DRAMCtrl.py	/^    IDD02 = Param.Current("0mA", "Active precharge current VDD2")$/;"	v	class:DRAMCtrl
IDD2N	./mem/DRAMCtrl.py	/^    IDD2N = '0.8mA'$/;"	v	class:LPDDR3_1600_x32
IDD2N	./mem/DRAMCtrl.py	/^    IDD2N = '2mA'$/;"	v	class:LPDDR2_S4_1066_x32
IDD2N	./mem/DRAMCtrl.py	/^    IDD2N = '37mA'$/;"	v	class:DDR3_2133_x64
IDD2N	./mem/DRAMCtrl.py	/^    IDD2N = '50mA'$/;"	v	class:DDR3_1600_x64
IDD2N	./mem/DRAMCtrl.py	/^    IDD2N = '50mA'$/;"	v	class:DDR4_2400_x64
IDD2N	./mem/DRAMCtrl.py	/^    IDD2N = Param.Current("0mA", "Precharge Standby current")$/;"	v	class:DRAMCtrl
IDD2N2	./mem/DRAMCtrl.py	/^    IDD2N2 = '26mA'$/;"	v	class:LPDDR3_1600_x32
IDD2N2	./mem/DRAMCtrl.py	/^    IDD2N2 = '30mA'$/;"	v	class:LPDDR2_S4_1066_x32
IDD2N2	./mem/DRAMCtrl.py	/^    IDD2N2 = Param.Current("0mA", "Precharge Standby current VDD2")$/;"	v	class:DRAMCtrl
IDD2P0	./mem/DRAMCtrl.py	/^    IDD2P0 = Param.Current("0mA", "Precharge Powerdown slow")$/;"	v	class:DRAMCtrl
IDD2P02	./mem/DRAMCtrl.py	/^    IDD2P02 = Param.Current("0mA", "Precharge Powerdown slow VDD2")$/;"	v	class:DRAMCtrl
IDD2P1	./mem/DRAMCtrl.py	/^    IDD2P1 = Param.Current("0mA", "Precharge Powerdown fast")$/;"	v	class:DRAMCtrl
IDD2P12	./mem/DRAMCtrl.py	/^    IDD2P12 = Param.Current("0mA", "Precharge Powerdown fast VDD2")$/;"	v	class:DRAMCtrl
IDD3N	./mem/DRAMCtrl.py	/^    IDD3N = '2.5mA'$/;"	v	class:LPDDR2_S4_1066_x32
IDD3N	./mem/DRAMCtrl.py	/^    IDD3N = '2mA'$/;"	v	class:LPDDR3_1600_x32
IDD3N	./mem/DRAMCtrl.py	/^    IDD3N = '44mA'$/;"	v	class:DDR3_2133_x64
IDD3N	./mem/DRAMCtrl.py	/^    IDD3N = '57mA'$/;"	v	class:DDR3_1600_x64
IDD3N	./mem/DRAMCtrl.py	/^    IDD3N = '67mA'$/;"	v	class:DDR4_2400_x64
IDD3N	./mem/DRAMCtrl.py	/^    IDD3N = Param.Current("0mA", "Active Standby current")$/;"	v	class:DRAMCtrl
IDD3N2	./mem/DRAMCtrl.py	/^    IDD3N2 = '30mA'$/;"	v	class:LPDDR2_S4_1066_x32
IDD3N2	./mem/DRAMCtrl.py	/^    IDD3N2 = '34mA'$/;"	v	class:LPDDR3_1600_x32
IDD3N2	./mem/DRAMCtrl.py	/^    IDD3N2 = '3mA'$/;"	v	class:DDR4_2400_x64
IDD3N2	./mem/DRAMCtrl.py	/^    IDD3N2 = Param.Current("0mA", "Active Standby current VDD2")$/;"	v	class:DRAMCtrl
IDD3P0	./mem/DRAMCtrl.py	/^    IDD3P0 = Param.Current("0mA", "Active Powerdown slow")$/;"	v	class:DRAMCtrl
IDD3P02	./mem/DRAMCtrl.py	/^    IDD3P02 = Param.Current("0mA", "Active Powerdown slow VDD2")$/;"	v	class:DRAMCtrl
IDD3P1	./mem/DRAMCtrl.py	/^    IDD3P1 = Param.Current("0mA", "Active Powerdown fast")$/;"	v	class:DRAMCtrl
IDD3P12	./mem/DRAMCtrl.py	/^    IDD3P12 = Param.Current("0mA", "Active Powerdown fast VDD2")$/;"	v	class:DRAMCtrl
IDD4R	./mem/DRAMCtrl.py	/^    IDD4R = '160mA'$/;"	v	class:DDR4_2400_x64
IDD4R	./mem/DRAMCtrl.py	/^    IDD4R = '187mA'$/;"	v	class:DDR3_1600_x64
IDD4R	./mem/DRAMCtrl.py	/^    IDD4R = '191mA'$/;"	v	class:DDR3_2133_x64
IDD4R	./mem/DRAMCtrl.py	/^    IDD4R = '2mA'$/;"	v	class:LPDDR3_1600_x32
IDD4R	./mem/DRAMCtrl.py	/^    IDD4R = '3mA'$/;"	v	class:LPDDR2_S4_1066_x32
IDD4R	./mem/DRAMCtrl.py	/^    IDD4R = Param.Current("0mA", "READ current")$/;"	v	class:DRAMCtrl
IDD4R2	./mem/DRAMCtrl.py	/^    IDD4R2 = '220mA'$/;"	v	class:LPDDR2_S4_1066_x32
IDD4R2	./mem/DRAMCtrl.py	/^    IDD4R2 = '230mA'$/;"	v	class:LPDDR3_1600_x32
IDD4R2	./mem/DRAMCtrl.py	/^    IDD4R2 = Param.Current("0mA", "READ current VDD2")$/;"	v	class:DRAMCtrl
IDD4W	./mem/DRAMCtrl.py	/^    IDD4W = '10mA'$/;"	v	class:LPDDR2_S4_1066_x32
IDD4W	./mem/DRAMCtrl.py	/^    IDD4W = '157mA'$/;"	v	class:DDR3_2133_x64
IDD4W	./mem/DRAMCtrl.py	/^    IDD4W = '165mA'$/;"	v	class:DDR3_1600_x64
IDD4W	./mem/DRAMCtrl.py	/^    IDD4W = '180mA'$/;"	v	class:DDR4_2400_x64
IDD4W	./mem/DRAMCtrl.py	/^    IDD4W = '2mA'$/;"	v	class:LPDDR3_1600_x32
IDD4W	./mem/DRAMCtrl.py	/^    IDD4W = Param.Current("0mA", "WRITE current")$/;"	v	class:DRAMCtrl
IDD4W2	./mem/DRAMCtrl.py	/^    IDD4W2 = '190mA'$/;"	v	class:LPDDR2_S4_1066_x32
IDD4W2	./mem/DRAMCtrl.py	/^    IDD4W2 = '190mA'$/;"	v	class:LPDDR3_1600_x32
IDD4W2	./mem/DRAMCtrl.py	/^    IDD4W2 = Param.Current("0mA", "WRITE current VDD2")$/;"	v	class:DRAMCtrl
IDD5	./mem/DRAMCtrl.py	/^    IDD5 = '192mA'$/;"	v	class:DDR4_2400_x64
IDD5	./mem/DRAMCtrl.py	/^    IDD5 = '220mA'$/;"	v	class:DDR3_1600_x64
IDD5	./mem/DRAMCtrl.py	/^    IDD5 = '250mA'$/;"	v	class:DDR3_2133_x64
IDD5	./mem/DRAMCtrl.py	/^    IDD5 = '28mA'$/;"	v	class:LPDDR3_1600_x32
IDD5	./mem/DRAMCtrl.py	/^    IDD5 = '40mA'$/;"	v	class:LPDDR2_S4_1066_x32
IDD5	./mem/DRAMCtrl.py	/^    IDD5 = Param.Current("0mA", "Refresh current")$/;"	v	class:DRAMCtrl
IDD52	./mem/DRAMCtrl.py	/^    IDD52 = '150mA'$/;"	v	class:LPDDR2_S4_1066_x32
IDD52	./mem/DRAMCtrl.py	/^    IDD52 = '150mA'$/;"	v	class:LPDDR3_1600_x32
IDD52	./mem/DRAMCtrl.py	/^    IDD52 = Param.Current("0mA", "Refresh current VDD2")$/;"	v	class:DRAMCtrl
IDD6	./mem/DRAMCtrl.py	/^    IDD6 = Param.Current("0mA", "Self-refresh Current")$/;"	v	class:DRAMCtrl
IDD62	./mem/DRAMCtrl.py	/^    IDD62 = Param.Current("0mA", "Self-refresh Current VDD2")$/;"	v	class:DRAMCtrl
IDEConfig	./dev/storage/ide_ctrl.cc	/^    IDEConfig = 0x54$/;"	e	enum:ConfRegOffset	file:
IDLE	./dev/i2c/bus.hh	/^        IDLE,$/;"	e	enum:I2CBus::I2CState
IDLE	./mem/xbar.hh	/^        enum State { IDLE, BUSY, RETRY };$/;"	e	enum:BaseXBar::Layer::State
IDLECOUNT_MAX_VALUE	./mem/ruby/structures/RubyMemoryControl.cc	130;"	d	file:
IDLE_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum VC_state_type {IDLE_, VC_AB_, ACTIVE_, NUM_VC_STATE_TYPE_};$/;"	e	enum:VC_state_type
IDTPhysAddr	./arch/x86/system.hh	/^    const uint64_t IDTPhysAddr = 0x62000;$/;"	m	namespace:X86ISA
IDTVirtAddr	./arch/x86/system.hh	/^    const uint64_t IDTVirtAddr = 0xffff800000002000;$/;"	m	namespace:X86ISA
IDToInt	./mem/ruby/slicc_interface/RubySlicc_Util.hh	/^IDToInt(NodeID id)$/;"	f
ID_9P	./dev/virtio/fs9p.hh	/^    static const DeviceId ID_9P = 0x09;$/;"	m	class:VirtIO9PBase
ID_BLOCK	./dev/virtio/block.hh	/^    static const DeviceId ID_BLOCK = 0x02;$/;"	m	class:VirtIOBlock
ID_CONSOLE	./dev/virtio/console.hh	/^    static const DeviceId ID_CONSOLE = 0x03;$/;"	m	class:VirtIOConsole
IEBit	./arch/x86/regs/misc.hh	/^        IEBit = 1 << 0,$/;"	e	enum:X86ISA::X87StatusBit
IER	./dev/net/ns_gige_reg.h	/^    IER =               0x18,$/;"	e	enum:DeviceRegisterAddress
IER	./dev/uart8250.hh	/^    uint8_t IER, DLAB, LCR, MCR;$/;"	m	class:Uart8250
IEW	./cpu/o3/commit.hh	/^    typedef typename CPUPol::IEW IEW;$/;"	t	class:DefaultCommit
IEW	./cpu/o3/cpu_policy.hh	/^    typedef DefaultIEW<Impl> IEW;$/;"	t	struct:SimpleCPUPolicy
IEW	./cpu/o3/inst_queue.hh	/^    typedef typename Impl::CPUPol::IEW IEW;$/;"	t	class:InstructionQueue
IEW	./cpu/o3/lsq.hh	/^    typedef typename Impl::CPUPol::IEW IEW;$/;"	t	class:LSQ
IEW	./cpu/o3/lsq_unit.hh	/^    typedef typename Impl::CPUPol::IEW IEW;$/;"	t	class:LSQUnit
IEW	./cpu/o3/rename.hh	/^    typedef typename CPUPol::IEW IEW;$/;"	t	class:DefaultRename
IEWIdx	./cpu/o3/cpu.hh	/^        IEWIdx,$/;"	e	enum:FullO3CPU::StageIdx
IEWStruct	./cpu/o3/commit.hh	/^    typedef typename CPUPol::IEWStruct IEWStruct;$/;"	t	class:DefaultCommit
IEWStruct	./cpu/o3/cpu.hh	/^    typedef typename CPUPolicy::IEWStruct IEWStruct;$/;"	t	class:FullO3CPU
IEWStruct	./cpu/o3/cpu_policy.hh	/^    typedef DefaultIEWDefaultCommit<Impl> IEWStruct;$/;"	t	struct:SimpleCPUPolicy
IEWStruct	./cpu/o3/iew.hh	/^    typedef typename CPUPol::IEWStruct IEWStruct;$/;"	t	class:DefaultIEW
IFBit	./arch/x86/regs/misc.hh	/^        IFBit = 1 << 9,$/;"	e	enum:X86ISA::RFLAGBit
IGbE	./dev/net/Ethernet.py	/^class IGbE(EtherDevice):$/;"	c
IGbE	./dev/net/i8254xGBe.cc	/^IGbE::IGbE(const Params *p)$/;"	f	class:IGbE
IGbE	./dev/net/i8254xGBe.hh	/^class IGbE : public EtherDevice$/;"	c
IGbEInt	./dev/net/i8254xGBe.hh	/^    IGbEInt(const std::string &name, IGbE *d)$/;"	f	class:IGbEInt
IGbEInt	./dev/net/i8254xGBe.hh	/^class IGbEInt : public EtherInt$/;"	c
IGbE_e1000	./dev/net/Ethernet.py	/^class IGbE_e1000(IGbE):$/;"	c
IGbE_igb	./dev/net/Ethernet.py	/^class IGbE_igb(IGbE):$/;"	c
IHR	./dev/net/ns_gige_reg.h	/^    IHR =               0x1c,$/;"	e	enum:DeviceRegisterAddress
IIR_LINE	./dev/uart8250.hh	/^const uint8_t IIR_LINE  = 0x06; \/* Rx Line Status (highest priority)*\/$/;"	v
IIR_MODEM	./dev/uart8250.hh	/^const uint8_t IIR_MODEM = 0x00; \/* Modem Status (lowest priority) *\/$/;"	v
IIR_NOPEND	./dev/uart8250.hh	/^const uint8_t IIR_NOPEND = 0x1;$/;"	v
IIR_RXID	./dev/uart8250.hh	/^const uint8_t IIR_RXID  = 0x04; \/* Rx Data *\/$/;"	v
IIR_TXID	./dev/uart8250.hh	/^const uint8_t IIR_TXID  = 0x02; \/* Tx Data *\/$/;"	v
IMR	./dev/net/ns_gige_reg.h	/^    IMR =               0x14,$/;"	e	enum:DeviceRegisterAddress
IMR	./dev/x86/i8259.hh	/^    uint8_t IMR;$/;"	m	class:X86ISA::I8259
IMap	./base/cp_annotate.hh	/^    typedef std::map<int,int> IMap;$/;"	t	class:CPA
INFINITE_	./mem/ruby/network/garnet/NetworkHeader.hh	39;"	d
INFINITE_LATENCY	./mem/ruby/network/Topology.cc	/^const int INFINITE_LATENCY = 10000; \/\/ Yes, this is a big hack$/;"	v
INIT	./arch/x86/intmessage.hh	/^            INIT = 5,$/;"	e	enum:X86ISA::DeliveryMode::IntDeliveryMode
INSTANTIATE_PARAM_TEMPLATES	./sim/serialize.cc	430;"	d	file:
INTA	./dev/pci/types.hh	/^    INTA,$/;"	m	class:PciIntPin
INTB	./dev/pci/types.hh	/^    INTB,$/;"	m	class:PciIntPin
INTC	./dev/pci/types.hh	/^    INTC,$/;"	m	class:PciIntPin
INTERRUPT_ID	./arch/arm/kvm/arm_cpu.cc	176;"	d	file:
INTERRUPT_ID	./arch/arm/kvm/base_cpu.cc	48;"	d	file:
INTERRUPT_VCPU_FIQ	./arch/arm/kvm/arm_cpu.cc	184;"	d	file:
INTERRUPT_VCPU_FIQ	./arch/arm/kvm/base_cpu.cc	56;"	d	file:
INTERRUPT_VCPU_IRQ	./arch/arm/kvm/arm_cpu.cc	181;"	d	file:
INTERRUPT_VCPU_IRQ	./arch/arm/kvm/base_cpu.cc	53;"	d	file:
INTINDEX_ETHERNET	./arch/alpha/isa_traits.hh	/^    INTINDEX_ETHERNET = 0,$/;"	e	enum:AlphaISA::InterruptLevels
INTINDEX_ETHERNET	./arch/mips/isa_traits.hh	/^    INTINDEX_ETHERNET = 0,$/;"	e	enum:MipsISA::InterruptLevels
INTINDEX_SCSI	./arch/alpha/isa_traits.hh	/^    INTINDEX_SCSI = 1,$/;"	e	enum:AlphaISA::InterruptLevels
INTINDEX_SCSI	./arch/mips/isa_traits.hh	/^    INTINDEX_SCSI = 1,$/;"	e	enum:MipsISA::InterruptLevels
INTLEVEL_EXTERNAL_MAX	./arch/alpha/isa_traits.hh	/^    INTLEVEL_EXTERNAL_MAX = 34,$/;"	e	enum:AlphaISA::InterruptLevels
INTLEVEL_EXTERNAL_MAX	./arch/mips/isa_traits.hh	/^    INTLEVEL_EXTERNAL_MAX = 34,$/;"	e	enum:MipsISA::InterruptLevels
INTLEVEL_EXTERNAL_MIN	./arch/alpha/isa_traits.hh	/^    INTLEVEL_EXTERNAL_MIN = 20,$/;"	e	enum:AlphaISA::InterruptLevels
INTLEVEL_EXTERNAL_MIN	./arch/mips/isa_traits.hh	/^    INTLEVEL_EXTERNAL_MIN = 20,$/;"	e	enum:MipsISA::InterruptLevels
INTLEVEL_IRQ0	./arch/alpha/isa_traits.hh	/^    INTLEVEL_IRQ0 = 20,$/;"	e	enum:AlphaISA::InterruptLevels
INTLEVEL_IRQ0	./arch/mips/isa_traits.hh	/^    INTLEVEL_IRQ0 = 20,$/;"	e	enum:MipsISA::InterruptLevels
INTLEVEL_IRQ1	./arch/alpha/isa_traits.hh	/^    INTLEVEL_IRQ1 = 21,$/;"	e	enum:AlphaISA::InterruptLevels
INTLEVEL_IRQ1	./arch/mips/isa_traits.hh	/^    INTLEVEL_IRQ1 = 21,$/;"	e	enum:MipsISA::InterruptLevels
INTLEVEL_IRQ2	./arch/alpha/isa_traits.hh	/^    INTLEVEL_IRQ2 = 22,$/;"	e	enum:AlphaISA::InterruptLevels
INTLEVEL_IRQ2	./arch/mips/isa_traits.hh	/^    INTLEVEL_IRQ2 = 22,$/;"	e	enum:MipsISA::InterruptLevels
INTLEVEL_IRQ3	./arch/alpha/isa_traits.hh	/^    INTLEVEL_IRQ3 = 23,$/;"	e	enum:AlphaISA::InterruptLevels
INTLEVEL_IRQ3	./arch/mips/isa_traits.hh	/^    INTLEVEL_IRQ3 = 23,$/;"	e	enum:MipsISA::InterruptLevels
INTLEVEL_SERIAL	./arch/alpha/isa_traits.hh	/^    INTLEVEL_SERIAL = 33,$/;"	e	enum:AlphaISA::InterruptLevels
INTLEVEL_SERIAL	./arch/mips/isa_traits.hh	/^    INTLEVEL_SERIAL = 33,$/;"	e	enum:MipsISA::InterruptLevels
INTLEVEL_SOFTWARE_MAX	./arch/alpha/isa_traits.hh	/^    INTLEVEL_SOFTWARE_MAX = 19,$/;"	e	enum:AlphaISA::InterruptLevels
INTLEVEL_SOFTWARE_MAX	./arch/mips/isa_traits.hh	/^    INTLEVEL_SOFTWARE_MAX = 19,$/;"	e	enum:MipsISA::InterruptLevels
INTLEVEL_SOFTWARE_MIN	./arch/alpha/isa_traits.hh	/^    INTLEVEL_SOFTWARE_MIN = 4,$/;"	e	enum:AlphaISA::InterruptLevels
INTLEVEL_SOFTWARE_MIN	./arch/mips/isa_traits.hh	/^    INTLEVEL_SOFTWARE_MIN = 4,$/;"	e	enum:MipsISA::InterruptLevels
INTRCTRL	./dev/pci/copy_engine_defs.hh	/^    struct INTRCTRL : public Reg<uint8_t> { \/\/ 0x03$/;"	s	struct:CopyEngineReg::Regs
INTREG_ABT	./arch/arm/intregs.hh	/^INTREG_ABT(unsigned index)$/;"	f	namespace:ArmISA
INTREG_AH	./arch/x86/regs/int.hh	/^        INTREG_AH = INTREG_RSP,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_AL	./arch/x86/regs/int.hh	/^        INTREG_AL = INTREG_RAX,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_AX	./arch/x86/regs/int.hh	/^        INTREG_AX = INTREG_RAX,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_BH	./arch/x86/regs/int.hh	/^        INTREG_BH = INTREG_RDI,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_BL	./arch/x86/regs/int.hh	/^        INTREG_BL = INTREG_RBX,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_BP	./arch/x86/regs/int.hh	/^        INTREG_BP = INTREG_RBP,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_BPL	./arch/x86/regs/int.hh	/^        INTREG_BPL = INTREG_RBP,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_BX	./arch/x86/regs/int.hh	/^        INTREG_BX = INTREG_RBX,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_CH	./arch/x86/regs/int.hh	/^        INTREG_CH = INTREG_RBP,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_CL	./arch/x86/regs/int.hh	/^        INTREG_CL = INTREG_RCX,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_CR	./arch/power/registers.hh	/^    INTREG_CR = NumIntArchRegs,$/;"	e	enum:PowerISA::MiscIntRegNums
INTREG_CTR	./arch/power/registers.hh	/^    INTREG_CTR,$/;"	e	enum:PowerISA::MiscIntRegNums
INTREG_CX	./arch/x86/regs/int.hh	/^        INTREG_CX = INTREG_RCX,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_DH	./arch/x86/regs/int.hh	/^        INTREG_DH = INTREG_RSI,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_DI	./arch/x86/regs/int.hh	/^        INTREG_DI = INTREG_RDI,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_DIL	./arch/x86/regs/int.hh	/^        INTREG_DIL = INTREG_RDI,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_DL	./arch/x86/regs/int.hh	/^        INTREG_DL = INTREG_RDX,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_DSP_ACX0	./arch/mips/registers.hh	/^   INTREG_DSP_ACX0,$/;"	e	enum:MipsISA::MiscIntRegNums
INTREG_DSP_ACX1	./arch/mips/registers.hh	/^   INTREG_DSP_ACX1,$/;"	e	enum:MipsISA::MiscIntRegNums
INTREG_DSP_ACX2	./arch/mips/registers.hh	/^   INTREG_DSP_ACX2,$/;"	e	enum:MipsISA::MiscIntRegNums
INTREG_DSP_ACX3	./arch/mips/registers.hh	/^   INTREG_DSP_ACX3,$/;"	e	enum:MipsISA::MiscIntRegNums
INTREG_DSP_CONTROL	./arch/mips/registers.hh	/^   INTREG_DSP_CONTROL$/;"	e	enum:MipsISA::MiscIntRegNums
INTREG_DSP_HI0	./arch/mips/registers.hh	/^   INTREG_DSP_HI0 = INTREG_HI,$/;"	e	enum:MipsISA::MiscIntRegNums
INTREG_DSP_HI1	./arch/mips/registers.hh	/^   INTREG_DSP_HI1,$/;"	e	enum:MipsISA::MiscIntRegNums
INTREG_DSP_HI2	./arch/mips/registers.hh	/^   INTREG_DSP_HI2,$/;"	e	enum:MipsISA::MiscIntRegNums
INTREG_DSP_HI3	./arch/mips/registers.hh	/^   INTREG_DSP_HI3,$/;"	e	enum:MipsISA::MiscIntRegNums
INTREG_DSP_LO0	./arch/mips/registers.hh	/^   INTREG_DSP_LO0 = INTREG_LO,$/;"	e	enum:MipsISA::MiscIntRegNums
INTREG_DSP_LO1	./arch/mips/registers.hh	/^   INTREG_DSP_LO1,$/;"	e	enum:MipsISA::MiscIntRegNums
INTREG_DSP_LO2	./arch/mips/registers.hh	/^   INTREG_DSP_LO2,$/;"	e	enum:MipsISA::MiscIntRegNums
INTREG_DSP_LO3	./arch/mips/registers.hh	/^   INTREG_DSP_LO3,$/;"	e	enum:MipsISA::MiscIntRegNums
INTREG_DUMMY	./arch/arm/intregs.hh	/^    INTREG_DUMMY, \/\/ Dummy reg used to throw away int reg results$/;"	e	enum:ArmISA::IntRegIndex
INTREG_DX	./arch/x86/regs/int.hh	/^        INTREG_DX = INTREG_RDX,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_EAX	./arch/x86/regs/int.hh	/^        INTREG_EAX = INTREG_RAX,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_EBP	./arch/x86/regs/int.hh	/^        INTREG_EBP = INTREG_RBP,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_EBX	./arch/x86/regs/int.hh	/^        INTREG_EBX = INTREG_RBX,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_ECX	./arch/x86/regs/int.hh	/^        INTREG_ECX = INTREG_RCX,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_EDI	./arch/x86/regs/int.hh	/^        INTREG_EDI = INTREG_RDI,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_EDX	./arch/x86/regs/int.hh	/^        INTREG_EDX = INTREG_RDX,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_ESI	./arch/x86/regs/int.hh	/^        INTREG_ESI = INTREG_RSI,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_ESP	./arch/x86/regs/int.hh	/^        INTREG_ESP = INTREG_RSP,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_FIQ	./arch/arm/intregs.hh	/^INTREG_FIQ(unsigned index)$/;"	f	namespace:ArmISA
INTREG_FOLDED	./arch/x86/regs/int.hh	/^    INTREG_FOLDED(int index, int foldBit)$/;"	f	namespace:X86ISA
INTREG_FPSCR	./arch/power/registers.hh	/^    INTREG_FPSCR,$/;"	e	enum:PowerISA::MiscIntRegNums
INTREG_HI	./arch/mips/registers.hh	/^   INTREG_HI,$/;"	e	enum:MipsISA::MiscIntRegNums
INTREG_HYP	./arch/arm/intregs.hh	/^INTREG_HYP(unsigned index)$/;"	f	namespace:ArmISA
INTREG_IMPLICIT	./arch/x86/regs/int.hh	/^    INTREG_IMPLICIT(int index)$/;"	f	namespace:X86ISA
INTREG_IRQ	./arch/arm/intregs.hh	/^INTREG_IRQ(unsigned index)$/;"	f	namespace:ArmISA
INTREG_LO	./arch/mips/registers.hh	/^   INTREG_LO = NumIntArchRegs,$/;"	e	enum:MipsISA::MiscIntRegNums
INTREG_LR	./arch/arm/intregs.hh	/^    INTREG_LR = INTREG_R14,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_LR	./arch/power/registers.hh	/^    INTREG_LR,$/;"	e	enum:PowerISA::MiscIntRegNums
INTREG_LR_ABT	./arch/arm/intregs.hh	/^    INTREG_LR_ABT = INTREG_R14_ABT,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_LR_FIQ	./arch/arm/intregs.hh	/^    INTREG_LR_FIQ = INTREG_R14_FIQ,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_LR_HYP	./arch/arm/intregs.hh	/^    INTREG_LR_HYP = INTREG_LR,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_LR_IRQ	./arch/arm/intregs.hh	/^    INTREG_LR_IRQ = INTREG_R14_IRQ,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_LR_MON	./arch/arm/intregs.hh	/^    INTREG_LR_MON = INTREG_R14_MON,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_LR_SVC	./arch/arm/intregs.hh	/^    INTREG_LR_SVC = INTREG_R14_SVC,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_LR_UND	./arch/arm/intregs.hh	/^    INTREG_LR_UND = INTREG_R14_UND,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_LR_USR	./arch/arm/intregs.hh	/^    INTREG_LR_USR = INTREG_LR,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_MICRO	./arch/x86/regs/int.hh	/^    INTREG_MICRO(int index)$/;"	f	namespace:X86ISA
INTREG_MON	./arch/arm/intregs.hh	/^INTREG_MON(unsigned index)$/;"	f	namespace:ArmISA
INTREG_PC	./arch/arm/intregs.hh	/^    INTREG_PC = INTREG_R15,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_PC_ABT	./arch/arm/intregs.hh	/^    INTREG_PC_ABT = INTREG_PC,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_PC_FIQ	./arch/arm/intregs.hh	/^    INTREG_PC_FIQ = INTREG_PC,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_PC_HYP	./arch/arm/intregs.hh	/^    INTREG_PC_HYP = INTREG_PC,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_PC_IRQ	./arch/arm/intregs.hh	/^    INTREG_PC_IRQ = INTREG_PC,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_PC_MON	./arch/arm/intregs.hh	/^    INTREG_PC_MON = INTREG_PC,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_PC_SVC	./arch/arm/intregs.hh	/^    INTREG_PC_SVC = INTREG_PC,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_PC_UND	./arch/arm/intregs.hh	/^    INTREG_PC_UND = INTREG_PC,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_PC_USR	./arch/arm/intregs.hh	/^    INTREG_PC_USR = INTREG_PC,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R0	./arch/arm/intregs.hh	/^    INTREG_R0,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R0_ABT	./arch/arm/intregs.hh	/^    INTREG_R0_ABT = INTREG_R0,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R0_FIQ	./arch/arm/intregs.hh	/^    INTREG_R0_FIQ = INTREG_R0,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R0_HYP	./arch/arm/intregs.hh	/^    INTREG_R0_HYP = INTREG_R0,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R0_IRQ	./arch/arm/intregs.hh	/^    INTREG_R0_IRQ = INTREG_R0,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R0_MON	./arch/arm/intregs.hh	/^    INTREG_R0_MON = INTREG_R0,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R0_SVC	./arch/arm/intregs.hh	/^    INTREG_R0_SVC = INTREG_R0,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R0_UND	./arch/arm/intregs.hh	/^    INTREG_R0_UND = INTREG_R0,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R0_USR	./arch/arm/intregs.hh	/^    INTREG_R0_USR = INTREG_R0,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R1	./arch/arm/intregs.hh	/^    INTREG_R1,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R10	./arch/arm/intregs.hh	/^    INTREG_R10,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R10	./arch/x86/regs/int.hh	/^        INTREG_R10,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R10B	./arch/x86/regs/int.hh	/^        INTREG_R10B = INTREG_R10,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R10D	./arch/x86/regs/int.hh	/^        INTREG_R10D = INTREG_R10,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R10W	./arch/x86/regs/int.hh	/^        INTREG_R10W = INTREG_R10,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R10_ABT	./arch/arm/intregs.hh	/^    INTREG_R10_ABT = INTREG_R10,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R10_FIQ	./arch/arm/intregs.hh	/^    INTREG_R10_FIQ,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R10_HYP	./arch/arm/intregs.hh	/^    INTREG_R10_HYP = INTREG_R10,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R10_IRQ	./arch/arm/intregs.hh	/^    INTREG_R10_IRQ = INTREG_R10,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R10_MON	./arch/arm/intregs.hh	/^    INTREG_R10_MON = INTREG_R10,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R10_SVC	./arch/arm/intregs.hh	/^    INTREG_R10_SVC = INTREG_R10,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R10_UND	./arch/arm/intregs.hh	/^    INTREG_R10_UND = INTREG_R10,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R10_USR	./arch/arm/intregs.hh	/^    INTREG_R10_USR = INTREG_R10,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R11	./arch/arm/intregs.hh	/^    INTREG_R11,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R11	./arch/x86/regs/int.hh	/^        INTREG_R11,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R11B	./arch/x86/regs/int.hh	/^        INTREG_R11B = INTREG_R11,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R11D	./arch/x86/regs/int.hh	/^        INTREG_R11D = INTREG_R11,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R11W	./arch/x86/regs/int.hh	/^        INTREG_R11W = INTREG_R11,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R11_ABT	./arch/arm/intregs.hh	/^    INTREG_R11_ABT = INTREG_R11,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R11_FIQ	./arch/arm/intregs.hh	/^    INTREG_R11_FIQ,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R11_HYP	./arch/arm/intregs.hh	/^    INTREG_R11_HYP = INTREG_R11,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R11_IRQ	./arch/arm/intregs.hh	/^    INTREG_R11_IRQ = INTREG_R11,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R11_MON	./arch/arm/intregs.hh	/^    INTREG_R11_MON = INTREG_R11,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R11_SVC	./arch/arm/intregs.hh	/^    INTREG_R11_SVC = INTREG_R11,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R11_UND	./arch/arm/intregs.hh	/^    INTREG_R11_UND = INTREG_R11,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R11_USR	./arch/arm/intregs.hh	/^    INTREG_R11_USR = INTREG_R11,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R12	./arch/arm/intregs.hh	/^    INTREG_R12,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R12	./arch/x86/regs/int.hh	/^        INTREG_R12,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R12B	./arch/x86/regs/int.hh	/^        INTREG_R12B = INTREG_R12,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R12D	./arch/x86/regs/int.hh	/^        INTREG_R12D = INTREG_R12,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R12W	./arch/x86/regs/int.hh	/^        INTREG_R12W = INTREG_R12,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R12_ABT	./arch/arm/intregs.hh	/^    INTREG_R12_ABT = INTREG_R12,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R12_FIQ	./arch/arm/intregs.hh	/^    INTREG_R12_FIQ,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R12_HYP	./arch/arm/intregs.hh	/^    INTREG_R12_HYP = INTREG_R12,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R12_IRQ	./arch/arm/intregs.hh	/^    INTREG_R12_IRQ = INTREG_R12,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R12_MON	./arch/arm/intregs.hh	/^    INTREG_R12_MON = INTREG_R12,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R12_SVC	./arch/arm/intregs.hh	/^    INTREG_R12_SVC = INTREG_R12,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R12_UND	./arch/arm/intregs.hh	/^    INTREG_R12_UND = INTREG_R12,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R12_USR	./arch/arm/intregs.hh	/^    INTREG_R12_USR = INTREG_R12,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R13	./arch/arm/intregs.hh	/^    INTREG_R13,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R13	./arch/x86/regs/int.hh	/^        INTREG_R13,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R13B	./arch/x86/regs/int.hh	/^        INTREG_R13B = INTREG_R13,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R13D	./arch/x86/regs/int.hh	/^        INTREG_R13D = INTREG_R13,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R13W	./arch/x86/regs/int.hh	/^        INTREG_R13W = INTREG_R13,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R13_ABT	./arch/arm/intregs.hh	/^    INTREG_R13_ABT,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R13_FIQ	./arch/arm/intregs.hh	/^    INTREG_R13_FIQ,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R13_HYP	./arch/arm/intregs.hh	/^    INTREG_R13_HYP,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R13_IRQ	./arch/arm/intregs.hh	/^    INTREG_R13_IRQ,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R13_MON	./arch/arm/intregs.hh	/^    INTREG_R13_MON,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R13_SVC	./arch/arm/intregs.hh	/^    INTREG_R13_SVC,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R13_UND	./arch/arm/intregs.hh	/^    INTREG_R13_UND,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R13_USR	./arch/arm/intregs.hh	/^    INTREG_R13_USR = INTREG_R13,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R14	./arch/arm/intregs.hh	/^    INTREG_R14,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R14	./arch/x86/regs/int.hh	/^        INTREG_R14,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R14B	./arch/x86/regs/int.hh	/^        INTREG_R14B = INTREG_R14,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R14D	./arch/x86/regs/int.hh	/^        INTREG_R14D = INTREG_R14,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R14W	./arch/x86/regs/int.hh	/^        INTREG_R14W = INTREG_R14,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R14_ABT	./arch/arm/intregs.hh	/^    INTREG_R14_ABT,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R14_FIQ	./arch/arm/intregs.hh	/^    INTREG_R14_FIQ,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R14_HYP	./arch/arm/intregs.hh	/^    INTREG_R14_HYP = INTREG_R14,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R14_IRQ	./arch/arm/intregs.hh	/^    INTREG_R14_IRQ,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R14_MON	./arch/arm/intregs.hh	/^    INTREG_R14_MON,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R14_SVC	./arch/arm/intregs.hh	/^    INTREG_R14_SVC,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R14_UND	./arch/arm/intregs.hh	/^    INTREG_R14_UND,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R14_USR	./arch/arm/intregs.hh	/^    INTREG_R14_USR = INTREG_R14,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R15	./arch/arm/intregs.hh	/^    INTREG_R15,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R15	./arch/x86/regs/int.hh	/^        INTREG_R15,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R15B	./arch/x86/regs/int.hh	/^        INTREG_R15B = INTREG_R15,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R15D	./arch/x86/regs/int.hh	/^        INTREG_R15D = INTREG_R15,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R15W	./arch/x86/regs/int.hh	/^        INTREG_R15W = INTREG_R15,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R15_ABT	./arch/arm/intregs.hh	/^    INTREG_R15_ABT = INTREG_R15,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R15_FIQ	./arch/arm/intregs.hh	/^    INTREG_R15_FIQ = INTREG_R15$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R15_HYP	./arch/arm/intregs.hh	/^    INTREG_R15_HYP = INTREG_R15,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R15_IRQ	./arch/arm/intregs.hh	/^    INTREG_R15_IRQ = INTREG_R15,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R15_MON	./arch/arm/intregs.hh	/^    INTREG_R15_MON = INTREG_R15,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R15_SVC	./arch/arm/intregs.hh	/^    INTREG_R15_SVC = INTREG_R15,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R15_UND	./arch/arm/intregs.hh	/^    INTREG_R15_UND = INTREG_R15,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R15_USR	./arch/arm/intregs.hh	/^    INTREG_R15_USR = INTREG_R15,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R1_ABT	./arch/arm/intregs.hh	/^    INTREG_R1_ABT = INTREG_R1,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R1_FIQ	./arch/arm/intregs.hh	/^    INTREG_R1_FIQ = INTREG_R1,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R1_HYP	./arch/arm/intregs.hh	/^    INTREG_R1_HYP = INTREG_R1,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R1_IRQ	./arch/arm/intregs.hh	/^    INTREG_R1_IRQ = INTREG_R1,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R1_MON	./arch/arm/intregs.hh	/^    INTREG_R1_MON = INTREG_R1,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R1_SVC	./arch/arm/intregs.hh	/^    INTREG_R1_SVC = INTREG_R1,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R1_UND	./arch/arm/intregs.hh	/^    INTREG_R1_UND = INTREG_R1,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R1_USR	./arch/arm/intregs.hh	/^    INTREG_R1_USR = INTREG_R1,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R2	./arch/arm/intregs.hh	/^    INTREG_R2,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R2_ABT	./arch/arm/intregs.hh	/^    INTREG_R2_ABT = INTREG_R2,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R2_FIQ	./arch/arm/intregs.hh	/^    INTREG_R2_FIQ = INTREG_R2,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R2_HYP	./arch/arm/intregs.hh	/^    INTREG_R2_HYP = INTREG_R2,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R2_IRQ	./arch/arm/intregs.hh	/^    INTREG_R2_IRQ = INTREG_R2,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R2_MON	./arch/arm/intregs.hh	/^    INTREG_R2_MON = INTREG_R2,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R2_SVC	./arch/arm/intregs.hh	/^    INTREG_R2_SVC = INTREG_R2,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R2_UND	./arch/arm/intregs.hh	/^    INTREG_R2_UND = INTREG_R2,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R2_USR	./arch/arm/intregs.hh	/^    INTREG_R2_USR = INTREG_R2,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R3	./arch/arm/intregs.hh	/^    INTREG_R3,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R3_ABT	./arch/arm/intregs.hh	/^    INTREG_R3_ABT = INTREG_R3,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R3_FIQ	./arch/arm/intregs.hh	/^    INTREG_R3_FIQ = INTREG_R3,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R3_HYP	./arch/arm/intregs.hh	/^    INTREG_R3_HYP = INTREG_R3,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R3_IRQ	./arch/arm/intregs.hh	/^    INTREG_R3_IRQ = INTREG_R3,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R3_MON	./arch/arm/intregs.hh	/^    INTREG_R3_MON = INTREG_R3,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R3_SVC	./arch/arm/intregs.hh	/^    INTREG_R3_SVC = INTREG_R3,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R3_UND	./arch/arm/intregs.hh	/^    INTREG_R3_UND = INTREG_R3,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R3_USR	./arch/arm/intregs.hh	/^    INTREG_R3_USR = INTREG_R3,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R4	./arch/arm/intregs.hh	/^    INTREG_R4,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R4_ABT	./arch/arm/intregs.hh	/^    INTREG_R4_ABT = INTREG_R4,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R4_FIQ	./arch/arm/intregs.hh	/^    INTREG_R4_FIQ = INTREG_R4,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R4_HYP	./arch/arm/intregs.hh	/^    INTREG_R4_HYP = INTREG_R4,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R4_IRQ	./arch/arm/intregs.hh	/^    INTREG_R4_IRQ = INTREG_R4,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R4_MON	./arch/arm/intregs.hh	/^    INTREG_R4_MON = INTREG_R4,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R4_SVC	./arch/arm/intregs.hh	/^    INTREG_R4_SVC = INTREG_R4,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R4_UND	./arch/arm/intregs.hh	/^    INTREG_R4_UND = INTREG_R4,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R4_USR	./arch/arm/intregs.hh	/^    INTREG_R4_USR = INTREG_R4,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R5	./arch/arm/intregs.hh	/^    INTREG_R5,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R5_ABT	./arch/arm/intregs.hh	/^    INTREG_R5_ABT = INTREG_R5,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R5_FIQ	./arch/arm/intregs.hh	/^    INTREG_R5_FIQ = INTREG_R5,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R5_HYP	./arch/arm/intregs.hh	/^    INTREG_R5_HYP = INTREG_R5,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R5_IRQ	./arch/arm/intregs.hh	/^    INTREG_R5_IRQ = INTREG_R5,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R5_MON	./arch/arm/intregs.hh	/^    INTREG_R5_MON = INTREG_R5,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R5_SVC	./arch/arm/intregs.hh	/^    INTREG_R5_SVC = INTREG_R5,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R5_UND	./arch/arm/intregs.hh	/^    INTREG_R5_UND = INTREG_R5,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R5_USR	./arch/arm/intregs.hh	/^    INTREG_R5_USR = INTREG_R5,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R6	./arch/arm/intregs.hh	/^    INTREG_R6,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R6_ABT	./arch/arm/intregs.hh	/^    INTREG_R6_ABT = INTREG_R6,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R6_FIQ	./arch/arm/intregs.hh	/^    INTREG_R6_FIQ = INTREG_R6,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R6_HYP	./arch/arm/intregs.hh	/^    INTREG_R6_HYP = INTREG_R6,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R6_IRQ	./arch/arm/intregs.hh	/^    INTREG_R6_IRQ = INTREG_R6,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R6_MON	./arch/arm/intregs.hh	/^    INTREG_R6_MON = INTREG_R6,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R6_SVC	./arch/arm/intregs.hh	/^    INTREG_R6_SVC = INTREG_R6,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R6_UND	./arch/arm/intregs.hh	/^    INTREG_R6_UND = INTREG_R6,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R6_USR	./arch/arm/intregs.hh	/^    INTREG_R6_USR = INTREG_R6,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R7	./arch/arm/intregs.hh	/^    INTREG_R7,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R7_ABT	./arch/arm/intregs.hh	/^    INTREG_R7_ABT = INTREG_R7,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R7_FIQ	./arch/arm/intregs.hh	/^    INTREG_R7_FIQ = INTREG_R7,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R7_HYP	./arch/arm/intregs.hh	/^    INTREG_R7_HYP = INTREG_R7,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R7_IRQ	./arch/arm/intregs.hh	/^    INTREG_R7_IRQ = INTREG_R7,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R7_MON	./arch/arm/intregs.hh	/^    INTREG_R7_MON = INTREG_R7,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R7_SVC	./arch/arm/intregs.hh	/^    INTREG_R7_SVC = INTREG_R7,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R7_UND	./arch/arm/intregs.hh	/^    INTREG_R7_UND = INTREG_R7,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R7_USR	./arch/arm/intregs.hh	/^    INTREG_R7_USR = INTREG_R7,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R8	./arch/arm/intregs.hh	/^    INTREG_R8,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R8	./arch/x86/regs/int.hh	/^        INTREG_R8,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R8B	./arch/x86/regs/int.hh	/^        INTREG_R8B = INTREG_R8,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R8D	./arch/x86/regs/int.hh	/^        INTREG_R8D = INTREG_R8,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R8W	./arch/x86/regs/int.hh	/^        INTREG_R8W = INTREG_R8,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R8_ABT	./arch/arm/intregs.hh	/^    INTREG_R8_ABT = INTREG_R8,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R8_FIQ	./arch/arm/intregs.hh	/^    INTREG_R8_FIQ,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R8_HYP	./arch/arm/intregs.hh	/^    INTREG_R8_HYP = INTREG_R8,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R8_IRQ	./arch/arm/intregs.hh	/^    INTREG_R8_IRQ = INTREG_R8,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R8_MON	./arch/arm/intregs.hh	/^    INTREG_R8_MON = INTREG_R8,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R8_SVC	./arch/arm/intregs.hh	/^    INTREG_R8_SVC = INTREG_R8,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R8_UND	./arch/arm/intregs.hh	/^    INTREG_R8_UND = INTREG_R8,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R8_USR	./arch/arm/intregs.hh	/^    INTREG_R8_USR = INTREG_R8,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R9	./arch/arm/intregs.hh	/^    INTREG_R9,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R9	./arch/x86/regs/int.hh	/^        INTREG_R9,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R9B	./arch/x86/regs/int.hh	/^        INTREG_R9B = INTREG_R9,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R9D	./arch/x86/regs/int.hh	/^        INTREG_R9D = INTREG_R9,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R9W	./arch/x86/regs/int.hh	/^        INTREG_R9W = INTREG_R9,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_R9_ABT	./arch/arm/intregs.hh	/^    INTREG_R9_ABT = INTREG_R9,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R9_FIQ	./arch/arm/intregs.hh	/^    INTREG_R9_FIQ,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R9_HYP	./arch/arm/intregs.hh	/^    INTREG_R9_HYP = INTREG_R9,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R9_IRQ	./arch/arm/intregs.hh	/^    INTREG_R9_IRQ = INTREG_R9,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R9_MON	./arch/arm/intregs.hh	/^    INTREG_R9_MON = INTREG_R9,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R9_SVC	./arch/arm/intregs.hh	/^    INTREG_R9_SVC = INTREG_R9,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R9_UND	./arch/arm/intregs.hh	/^    INTREG_R9_UND = INTREG_R9,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_R9_USR	./arch/arm/intregs.hh	/^    INTREG_R9_USR = INTREG_R9,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_RAX	./arch/x86/regs/int.hh	/^        INTREG_RAX,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_RBP	./arch/x86/regs/int.hh	/^        INTREG_RBP,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_RBX	./arch/x86/regs/int.hh	/^        INTREG_RBX,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_RCX	./arch/x86/regs/int.hh	/^        INTREG_RCX,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_RDI	./arch/x86/regs/int.hh	/^        INTREG_RDI,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_RDX	./arch/x86/regs/int.hh	/^        INTREG_RDX,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_RSI	./arch/x86/regs/int.hh	/^        INTREG_RSI,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_RSP	./arch/x86/regs/int.hh	/^        INTREG_RSP,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_RSV	./arch/power/registers.hh	/^    INTREG_RSV,$/;"	e	enum:PowerISA::MiscIntRegNums
INTREG_RSV_ADDR	./arch/power/registers.hh	/^    INTREG_RSV_ADDR$/;"	e	enum:PowerISA::MiscIntRegNums
INTREG_RSV_LEN	./arch/power/registers.hh	/^    INTREG_RSV_LEN,$/;"	e	enum:PowerISA::MiscIntRegNums
INTREG_SI	./arch/x86/regs/int.hh	/^        INTREG_SI = INTREG_RSI,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_SIL	./arch/x86/regs/int.hh	/^        INTREG_SIL = INTREG_RSI,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_SP	./arch/arm/intregs.hh	/^    INTREG_SP = INTREG_R13,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_SP	./arch/x86/regs/int.hh	/^        INTREG_SP = INTREG_RSP,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_SP0	./arch/arm/intregs.hh	/^    INTREG_SP0,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_SP1	./arch/arm/intregs.hh	/^    INTREG_SP1,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_SP2	./arch/arm/intregs.hh	/^    INTREG_SP2,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_SP3	./arch/arm/intregs.hh	/^    INTREG_SP3,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_SPL	./arch/x86/regs/int.hh	/^        INTREG_SPL = INTREG_RSP,$/;"	e	enum:X86ISA::IntRegIndex
INTREG_SPX	./arch/arm/intregs.hh	/^    INTREG_SPX = NUM_INTREGS,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_SP_ABT	./arch/arm/intregs.hh	/^    INTREG_SP_ABT = INTREG_R13_ABT,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_SP_FIQ	./arch/arm/intregs.hh	/^    INTREG_SP_FIQ = INTREG_R13_FIQ,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_SP_HYP	./arch/arm/intregs.hh	/^    INTREG_SP_HYP = INTREG_R13_HYP,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_SP_IRQ	./arch/arm/intregs.hh	/^    INTREG_SP_IRQ = INTREG_R13_IRQ,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_SP_MON	./arch/arm/intregs.hh	/^    INTREG_SP_MON = INTREG_R13_MON,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_SP_SVC	./arch/arm/intregs.hh	/^    INTREG_SP_SVC = INTREG_R13_SVC,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_SP_UND	./arch/arm/intregs.hh	/^    INTREG_SP_UND = INTREG_R13_UND,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_SP_USR	./arch/arm/intregs.hh	/^    INTREG_SP_USR = INTREG_SP,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_SVC	./arch/arm/intregs.hh	/^INTREG_SVC(unsigned index)$/;"	f	namespace:ArmISA
INTREG_UND	./arch/arm/intregs.hh	/^INTREG_UND(unsigned index)$/;"	f	namespace:ArmISA
INTREG_UREG0	./arch/arm/intregs.hh	/^    INTREG_UREG0,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_UREG1	./arch/arm/intregs.hh	/^    INTREG_UREG1,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_UREG2	./arch/arm/intregs.hh	/^    INTREG_UREG2,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_USR	./arch/arm/intregs.hh	/^INTREG_USR(unsigned index)$/;"	f	namespace:ArmISA
INTREG_X0	./arch/arm/intregs.hh	/^    INTREG_X0 = 0,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X1	./arch/arm/intregs.hh	/^    INTREG_X1,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X10	./arch/arm/intregs.hh	/^    INTREG_X10,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X11	./arch/arm/intregs.hh	/^    INTREG_X11,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X12	./arch/arm/intregs.hh	/^    INTREG_X12,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X13	./arch/arm/intregs.hh	/^    INTREG_X13,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X14	./arch/arm/intregs.hh	/^    INTREG_X14,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X15	./arch/arm/intregs.hh	/^    INTREG_X15,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X16	./arch/arm/intregs.hh	/^    INTREG_X16,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X17	./arch/arm/intregs.hh	/^    INTREG_X17,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X18	./arch/arm/intregs.hh	/^    INTREG_X18,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X19	./arch/arm/intregs.hh	/^    INTREG_X19,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X2	./arch/arm/intregs.hh	/^    INTREG_X2,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X20	./arch/arm/intregs.hh	/^    INTREG_X20,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X21	./arch/arm/intregs.hh	/^    INTREG_X21,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X22	./arch/arm/intregs.hh	/^    INTREG_X22,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X23	./arch/arm/intregs.hh	/^    INTREG_X23,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X24	./arch/arm/intregs.hh	/^    INTREG_X24,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X25	./arch/arm/intregs.hh	/^    INTREG_X25,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X26	./arch/arm/intregs.hh	/^    INTREG_X26,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X27	./arch/arm/intregs.hh	/^    INTREG_X27,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X28	./arch/arm/intregs.hh	/^    INTREG_X28,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X29	./arch/arm/intregs.hh	/^    INTREG_X29,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X3	./arch/arm/intregs.hh	/^    INTREG_X3,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X30	./arch/arm/intregs.hh	/^    INTREG_X30,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X31	./arch/arm/intregs.hh	/^    INTREG_X31,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X4	./arch/arm/intregs.hh	/^    INTREG_X4,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X5	./arch/arm/intregs.hh	/^    INTREG_X5,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X6	./arch/arm/intregs.hh	/^    INTREG_X6,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X7	./arch/arm/intregs.hh	/^    INTREG_X7,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X8	./arch/arm/intregs.hh	/^    INTREG_X8,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_X9	./arch/arm/intregs.hh	/^    INTREG_X9,$/;"	e	enum:ArmISA::IntRegIndex
INTREG_XER	./arch/power/registers.hh	/^    INTREG_XER,$/;"	e	enum:PowerISA::MiscIntRegNums
INTREG_ZERO	./arch/arm/intregs.hh	/^    INTREG_ZERO,$/;"	e	enum:ArmISA::IntRegIndex
INT_ABT	./arch/arm/isa_traits.hh	/^        INT_ABT,$/;"	e	enum:ArmISA::InterruptTypes
INT_BITS_MAX	./dev/arm/gic_pl390.hh	/^    static const int INT_BITS_MAX = 32;$/;"	m	class:Pl390
INT_BUS_ERROR	./dev/arm/hdlcd.hh	/^    static constexpr uint32_t INT_BUS_ERROR = (1UL << 1);$/;"	m	class:HDLcd
INT_DMA_END	./dev/arm/hdlcd.hh	/^    static constexpr uint32_t INT_DMA_END = (1UL << 0);$/;"	m	class:HDLcd
INT_FIQ	./arch/arm/isa_traits.hh	/^        INT_FIQ,$/;"	e	enum:ArmISA::InterruptTypes
INT_IRQ	./arch/arm/isa_traits.hh	/^        INT_IRQ,$/;"	e	enum:ArmISA::InterruptTypes
INT_LINES_MAX	./dev/arm/gic_pl390.hh	/^    static const int INT_LINES_MAX = 1020;$/;"	m	class:Pl390
INT_MASK_M	./arch/arm/interrupts.hh	/^        INT_MASK_M, \/\/ masked (subject to PSTATE.{A,I,F} mask bit$/;"	e	enum:ArmISA::Interrupts::InterruptMask
INT_MASK_P	./arch/arm/interrupts.hh	/^        INT_MASK_P  \/\/ pending$/;"	e	enum:ArmISA::Interrupts::InterruptMask
INT_MASK_T	./arch/arm/interrupts.hh	/^        INT_MASK_T, \/\/ taken regardless of mask$/;"	e	enum:ArmISA::Interrupts::InterruptMask
INT_REG	./arch/arm/kvm/armv8_cpu.cc	65;"	d	file:
INT_RST	./arch/arm/isa_traits.hh	/^        INT_RST,$/;"	e	enum:ArmISA::InterruptTypes
INT_SEV	./arch/arm/isa_traits.hh	/^        INT_SEV, \/\/ Special interrupt for recieving SEV's$/;"	e	enum:ArmISA::InterruptTypes
INT_UNDERRUN	./dev/arm/hdlcd.hh	/^    static constexpr uint32_t INT_UNDERRUN = (1UL << 3);$/;"	m	class:HDLcd
INT_VIRT_FIQ	./arch/arm/isa_traits.hh	/^        INT_VIRT_FIQ,$/;"	e	enum:ArmISA::InterruptTypes
INT_VIRT_IRQ	./arch/arm/isa_traits.hh	/^        INT_VIRT_IRQ,$/;"	e	enum:ArmISA::InterruptTypes
INT_VSYNC	./dev/arm/hdlcd.hh	/^    static constexpr uint32_t INT_VSYNC = (1UL << 2);$/;"	m	class:HDLcd
IN_RANGE	./dev/net/i8254xGBe.cc	167;"	d	file:
IOAPIC	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::IOAPIC::IOAPIC(Params * p) : BaseConfigEntry(p, 2),$/;"	f	class:X86ISA::IntelMP::IOAPIC
IOAPIC	./arch/x86/bios/intelmp.hh	/^class IOAPIC : public BaseConfigEntry$/;"	c	namespace:X86ISA::IntelMP
IOIntAssignment	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::IOIntAssignment::IOIntAssignment(Params * p) :$/;"	f	class:X86ISA::IntelMP::IOIntAssignment
IOIntAssignment	./arch/x86/bios/intelmp.hh	/^class IOIntAssignment : public IntAssignment$/;"	c	namespace:X86ISA::IntelMP
IOXBar	./mem/XBar.py	/^class IOXBar(NoncoherentXBar):$/;"	c
IO_PCI_CONF_ADDR	./cpu/kvm/x86_cpu.cc	53;"	d	file:
IO_PCI_CONF_DATA_BASE	./cpu/kvm/x86_cpu.cc	54;"	d	file:
IP6_EXTENSION	./base/inet.cc	280;"	d	file:
IPR_ALT_MODE	./arch/alpha/ipr.hh	/^    IPR_ALT_MODE,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_ASTER	./arch/alpha/ipr.hh	/^    IPR_ASTER,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_ASTRR	./arch/alpha/ipr.hh	/^    IPR_ASTRR,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_CC	./arch/alpha/ipr.hh	/^    IPR_CC,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_CC_CTL	./arch/alpha/ipr.hh	/^    IPR_CC_CTL,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_CLASS_PSEUDO_INST	./arch/generic/mmapped_ipr.hh	/^    const Addr IPR_CLASS_PSEUDO_INST = 0x0;$/;"	m	namespace:GenericISA
IPR_CLASS_SHIFT	./arch/generic/mmapped_ipr.hh	/^    const int IPR_CLASS_SHIFT = 48;$/;"	m	namespace:GenericISA
IPR_DC_FLUSH	./arch/alpha/ipr.hh	/^    IPR_DC_FLUSH,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_DC_MODE	./arch/alpha/ipr.hh	/^    IPR_DC_MODE,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_DC_PERR_STAT	./arch/alpha/ipr.hh	/^    IPR_DC_PERR_STAT,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_DC_TEST_CTL	./arch/alpha/ipr.hh	/^    IPR_DC_TEST_CTL,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_DC_TEST_TAG	./arch/alpha/ipr.hh	/^    IPR_DC_TEST_TAG,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_DC_TEST_TAG_TEMP	./arch/alpha/ipr.hh	/^    IPR_DC_TEST_TAG_TEMP,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_DTB_ASN	./arch/alpha/ipr.hh	/^    IPR_DTB_ASN,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_DTB_CM	./arch/alpha/ipr.hh	/^    IPR_DTB_CM,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_DTB_IA	./arch/alpha/ipr.hh	/^    IPR_DTB_IA,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_DTB_IAP	./arch/alpha/ipr.hh	/^    IPR_DTB_IAP,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_DTB_IS	./arch/alpha/ipr.hh	/^    IPR_DTB_IS,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_DTB_PTE	./arch/alpha/ipr.hh	/^    IPR_DTB_PTE,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_DTB_PTE_TEMP	./arch/alpha/ipr.hh	/^    IPR_DTB_PTE_TEMP = MaxReadOnlyIpr,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_DTB_TAG	./arch/alpha/ipr.hh	/^    IPR_DTB_TAG,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_EXC_ADDR	./arch/alpha/ipr.hh	/^    IPR_EXC_ADDR,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_EXC_MASK	./arch/alpha/ipr.hh	/^    IPR_EXC_MASK,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_EXC_SUM	./arch/alpha/ipr.hh	/^    IPR_EXC_SUM,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_HWINT_CLR	./arch/alpha/ipr.hh	/^    IPR_HWINT_CLR = MinWriteOnlyIpr,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_ICM	./arch/alpha/ipr.hh	/^    IPR_ICM,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_ICSR	./arch/alpha/ipr.hh	/^    IPR_ICSR,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_IC_FLUSH	./arch/alpha/ipr.hh	/^    IPR_IC_FLUSH,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_IC_PERR_STAT	./arch/alpha/ipr.hh	/^    IPR_IC_PERR_STAT,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_IFAULT_VA_FORM	./arch/alpha/ipr.hh	/^    IPR_IFAULT_VA_FORM,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_INTID	./arch/alpha/ipr.hh	/^    IPR_INTID = MinReadOnlyIpr,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_IN_CLASS_MASK	./arch/generic/mmapped_ipr.hh	/^    const Addr IPR_IN_CLASS_MASK = ULL(0x0000FFFFFFFFFFFF);$/;"	m	namespace:GenericISA
IPR_IPLR	./arch/alpha/ipr.hh	/^    IPR_IPLR,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_ISR	./arch/alpha/ipr.hh	/^    IPR_ISR,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_ITB_ASN	./arch/alpha/ipr.hh	/^    IPR_ITB_ASN,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_ITB_IA	./arch/alpha/ipr.hh	/^    IPR_ITB_IA,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_ITB_IAP	./arch/alpha/ipr.hh	/^    IPR_ITB_IAP = MaxWriteOnlyIpr,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_ITB_IS	./arch/alpha/ipr.hh	/^    IPR_ITB_IS,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_ITB_PTE	./arch/alpha/ipr.hh	/^    IPR_ITB_PTE,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_ITB_PTE_TEMP	./arch/alpha/ipr.hh	/^    IPR_ITB_PTE_TEMP,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_ITB_TAG	./arch/alpha/ipr.hh	/^    IPR_ITB_TAG,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_IVPTBR	./arch/alpha/ipr.hh	/^    IPR_IVPTBR,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_MAF_MODE	./arch/alpha/ipr.hh	/^    IPR_MAF_MODE,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_MCSR	./arch/alpha/ipr.hh	/^    IPR_MCSR,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_MM_STAT	./arch/alpha/ipr.hh	/^    IPR_MM_STAT,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_MVPTBR	./arch/alpha/ipr.hh	/^    IPR_MVPTBR,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PAL_BASE	./arch/alpha/ipr.hh	/^    IPR_PAL_BASE,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp0	./arch/alpha/ipr.hh	/^    IPR_PALtemp0,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp1	./arch/alpha/ipr.hh	/^    IPR_PALtemp1,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp10	./arch/alpha/ipr.hh	/^    IPR_PALtemp10,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp11	./arch/alpha/ipr.hh	/^    IPR_PALtemp11,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp12	./arch/alpha/ipr.hh	/^    IPR_PALtemp12,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp13	./arch/alpha/ipr.hh	/^    IPR_PALtemp13,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp14	./arch/alpha/ipr.hh	/^    IPR_PALtemp14,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp15	./arch/alpha/ipr.hh	/^    IPR_PALtemp15,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp16	./arch/alpha/ipr.hh	/^    IPR_PALtemp16,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp17	./arch/alpha/ipr.hh	/^    IPR_PALtemp17,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp18	./arch/alpha/ipr.hh	/^    IPR_PALtemp18,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp19	./arch/alpha/ipr.hh	/^    IPR_PALtemp19,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp2	./arch/alpha/ipr.hh	/^    IPR_PALtemp2,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp20	./arch/alpha/ipr.hh	/^    IPR_PALtemp20,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp21	./arch/alpha/ipr.hh	/^    IPR_PALtemp21,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp22	./arch/alpha/ipr.hh	/^    IPR_PALtemp22,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp23	./arch/alpha/ipr.hh	/^    IPR_PALtemp23,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp3	./arch/alpha/ipr.hh	/^    IPR_PALtemp3,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp4	./arch/alpha/ipr.hh	/^    IPR_PALtemp4,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp5	./arch/alpha/ipr.hh	/^    IPR_PALtemp5,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp6	./arch/alpha/ipr.hh	/^    IPR_PALtemp6,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp7	./arch/alpha/ipr.hh	/^    IPR_PALtemp7,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp8	./arch/alpha/ipr.hh	/^    IPR_PALtemp8,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PALtemp9	./arch/alpha/ipr.hh	/^    IPR_PALtemp9,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_PMCTR	./arch/alpha/ipr.hh	/^    IPR_PMCTR,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_SIRR	./arch/alpha/ipr.hh	/^    IPR_SIRR,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_SL_RCV	./arch/alpha/ipr.hh	/^    IPR_SL_RCV,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_SL_XMIT	./arch/alpha/ipr.hh	/^    IPR_SL_XMIT,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_VA	./arch/alpha/ipr.hh	/^    IPR_VA,$/;"	e	enum:AlphaISA::MiscRegIpr
IPR_VA_FORM	./arch/alpha/ipr.hh	/^    IPR_VA_FORM,$/;"	e	enum:AlphaISA::MiscRegIpr
IQ	./cpu/o3/cpu_policy.hh	/^    typedef InstructionQueue<Impl> IQ;$/;"	t	struct:SimpleCPUPolicy
IQ	./cpu/o3/fetch.hh	/^        IQ,$/;"	e	enum:DefaultFetch::FetchPriority
IQ	./cpu/o3/iew.hh	/^    typedef typename CPUPol::IQ IQ;$/;"	t	class:DefaultIEW
IQ	./cpu/o3/rename.hh	/^        IQ,$/;"	e	enum:DefaultRename::FullSource
IQPolicy	./cpu/o3/inst_queue.hh	/^    enum IQPolicy {$/;"	g	class:InstructionQueue
IRR	./dev/x86/i8259.hh	/^    uint8_t IRR;$/;"	m	class:X86ISA::I8259
IRRV	./arch/x86/interrupts.hh	/^    uint8_t IRRV;$/;"	m	class:X86ISA::Interrupts
ISA	./arch/alpha/isa.cc	/^ISA::ISA(Params *p)$/;"	f	class:AlphaISA::ISA
ISA	./arch/alpha/isa.hh	/^    class ISA : public SimObject$/;"	c	namespace:AlphaISA
ISA	./arch/arm/isa.cc	/^ISA::ISA(Params *p)$/;"	f	class:ArmISA::ISA
ISA	./arch/arm/isa.hh	/^    class ISA : public SimObject$/;"	c	namespace:ArmISA
ISA	./arch/mips/isa.cc	/^ISA::ISA(Params *p)$/;"	f	class:MipsISA::ISA
ISA	./arch/mips/isa.hh	/^    class ISA : public SimObject$/;"	c	namespace:MipsISA
ISA	./arch/power/isa.cc	/^ISA::ISA(Params *p)$/;"	f	class:PowerISA::ISA
ISA	./arch/power/isa.hh	/^class ISA : public SimObject$/;"	c	namespace:PowerISA
ISA	./arch/sparc/isa.cc	/^ISA::ISA(Params *p)$/;"	f	class:SparcISA::ISA
ISA	./arch/sparc/isa.hh	/^class ISA : public SimObject$/;"	c	namespace:SparcISA
ISA	./arch/x86/isa.cc	/^ISA::ISA(Params *p)$/;"	f	class:X86ISA::ISA
ISA	./arch/x86/isa.hh	/^    class ISA : public SimObject$/;"	c	namespace:X86ISA
ISAParser	./arch/isa_parser.py	/^class ISAParser(Grammar):$/;"	c
ISAParserError	./arch/isa_parser.py	/^class ISAParserError(Exception):$/;"	c
ISA_HAS_CC_REGS	./arch/arm/registers.hh	87;"	d
ISA_HAS_CC_REGS	./arch/x86/registers.hh	61;"	d
ISA_HAS_DELAY_SLOT	./arch/alpha/isa_traits.hh	49;"	d
ISA_HAS_DELAY_SLOT	./arch/arm/isa_traits.hh	61;"	d
ISA_HAS_DELAY_SLOT	./arch/mips/isa_traits.hh	51;"	d
ISA_HAS_DELAY_SLOT	./arch/power/isa_traits.hh	52;"	d
ISA_HAS_DELAY_SLOT	./arch/sparc/isa_traits.hh	48;"	d
ISA_HAS_DELAY_SLOT	./arch/x86/isa_traits.hh	56;"	d
ISR	./dev/net/ns_gige_reg.h	/^    ISR =               0x10,$/;"	e	enum:DeviceRegisterAddress
ISR	./dev/x86/i8259.hh	/^    uint8_t ISR;$/;"	m	class:X86ISA::I8259
ISRV	./arch/x86/interrupts.hh	/^    uint8_t ISRV;$/;"	m	class:X86ISA::Interrupts
ISR_ALL	./dev/net/ns_gige_reg.h	/^     ISR_ALL =          0x7FFFFFFF,$/;"	e	enum:InterruptStatusRegister
ISR_DELAY	./dev/net/ns_gige_reg.h	/^     ISR_DELAY =        (ISR_TXIDLE|ISR_TXDESC|ISR_TXOK|$/;"	e	enum:InterruptStatusRegister
ISR_DPERR	./dev/net/ns_gige_reg.h	/^     ISR_DPERR =        0x00100000,$/;"	e	enum:InterruptStatusRegister
ISR_HIBINT	./dev/net/ns_gige_reg.h	/^     ISR_HIBINT =       0x00008000,$/;"	e	enum:InterruptStatusRegister
ISR_IMPL	./dev/net/ns_gige_reg.h	/^     ISR_IMPL =         (ISR_SWI|ISR_TXIDLE|ISR_TXDESC|ISR_TXOK|ISR_RXORN|$/;"	e	enum:InterruptStatusRegister
ISR_MIB	./dev/net/ns_gige_reg.h	/^     ISR_MIB =          0x00000800,$/;"	e	enum:InterruptStatusRegister
ISR_NODELAY	./dev/net/ns_gige_reg.h	/^     ISR_NODELAY =      (ISR_ALL & ~ISR_DELAY),$/;"	e	enum:InterruptStatusRegister
ISR_NOIMPL	./dev/net/ns_gige_reg.h	/^     ISR_NOIMPL =       (ISR_ALL & ~ISR_IMPL)$/;"	e	enum:InterruptStatusRegister
ISR_PHY	./dev/net/ns_gige_reg.h	/^     ISR_PHY =          0x00004000,$/;"	e	enum:InterruptStatusRegister
ISR_PME	./dev/net/ns_gige_reg.h	/^     ISR_PME =          0x00002000,$/;"	e	enum:InterruptStatusRegister
ISR_RESERVE	./dev/net/ns_gige_reg.h	/^     ISR_RESERVE =      0x80000000,$/;"	e	enum:InterruptStatusRegister
ISR_RMABT	./dev/net/ns_gige_reg.h	/^     ISR_RMABT =        0x00040000,$/;"	e	enum:InterruptStatusRegister
ISR_RTAB	./dev/net/ns_gige_reg.h	/^     ISR_RTAB =         0x00020000,$/;"	e	enum:InterruptStatusRegister
ISR_RXDESC	./dev/net/ns_gige_reg.h	/^     ISR_RXDESC =       0x00000002,$/;"	e	enum:InterruptStatusRegister
ISR_RXDESC0	./dev/net/ns_gige_reg.h	/^     ISR_RXDESC0 =      0x00800000,$/;"	e	enum:InterruptStatusRegister
ISR_RXDESC1	./dev/net/ns_gige_reg.h	/^     ISR_RXDESC1 =      0x01000000,$/;"	e	enum:InterruptStatusRegister
ISR_RXDESC2	./dev/net/ns_gige_reg.h	/^     ISR_RXDESC2 =      0x02000000,$/;"	e	enum:InterruptStatusRegister
ISR_RXDESC3	./dev/net/ns_gige_reg.h	/^     ISR_RXDESC3 =      0x04000000,$/;"	e	enum:InterruptStatusRegister
ISR_RXEARLY	./dev/net/ns_gige_reg.h	/^     ISR_RXEARLY =      0x00000008,$/;"	e	enum:InterruptStatusRegister
ISR_RXERR	./dev/net/ns_gige_reg.h	/^     ISR_RXERR =        0x00000004,$/;"	e	enum:InterruptStatusRegister
ISR_RXIDLE	./dev/net/ns_gige_reg.h	/^     ISR_RXIDLE =       0x00000010,$/;"	e	enum:InterruptStatusRegister
ISR_RXOK	./dev/net/ns_gige_reg.h	/^     ISR_RXOK =         0x00000001,$/;"	e	enum:InterruptStatusRegister
ISR_RXORN	./dev/net/ns_gige_reg.h	/^     ISR_RXORN =        0x00000020,$/;"	e	enum:InterruptStatusRegister
ISR_RXRCMP	./dev/net/ns_gige_reg.h	/^     ISR_RXRCMP =       0x00200000,$/;"	e	enum:InterruptStatusRegister
ISR_RXSOVR	./dev/net/ns_gige_reg.h	/^     ISR_RXSOVR =       0x00010000,$/;"	e	enum:InterruptStatusRegister
ISR_SSERR	./dev/net/ns_gige_reg.h	/^     ISR_SSERR =        0x00080000,$/;"	e	enum:InterruptStatusRegister
ISR_SWI	./dev/net/ns_gige_reg.h	/^     ISR_SWI =          0x00001000,$/;"	e	enum:InterruptStatusRegister
ISR_TXDESC	./dev/net/ns_gige_reg.h	/^     ISR_TXDESC =       0x00000080,$/;"	e	enum:InterruptStatusRegister
ISR_TXDESC0	./dev/net/ns_gige_reg.h	/^     ISR_TXDESC0 =      0x08000000,$/;"	e	enum:InterruptStatusRegister
ISR_TXDESC1	./dev/net/ns_gige_reg.h	/^     ISR_TXDESC1 =      0x10000000,$/;"	e	enum:InterruptStatusRegister
ISR_TXDESC2	./dev/net/ns_gige_reg.h	/^     ISR_TXDESC2 =      0x20000000,$/;"	e	enum:InterruptStatusRegister
ISR_TXDESC3	./dev/net/ns_gige_reg.h	/^     ISR_TXDESC3 =      0x40000000,$/;"	e	enum:InterruptStatusRegister
ISR_TXERR	./dev/net/ns_gige_reg.h	/^     ISR_TXERR =        0x00000100,$/;"	e	enum:InterruptStatusRegister
ISR_TXIDLE	./dev/net/ns_gige_reg.h	/^     ISR_TXIDLE =       0x00000200,$/;"	e	enum:InterruptStatusRegister
ISR_TXOK	./dev/net/ns_gige_reg.h	/^     ISR_TXOK =         0x00000040,$/;"	e	enum:InterruptStatusRegister
ISR_TXRCMP	./dev/net/ns_gige_reg.h	/^     ISR_TXRCMP =       0x00400000,$/;"	e	enum:InterruptStatusRegister
ISR_TXURN	./dev/net/ns_gige_reg.h	/^     ISR_TXURN =        0x00000400,$/;"	e	enum:InterruptStatusRegister
IST	./arch/x86/regs/misc.hh	/^        Bitfield<35, 32> IST; \/\/ IST pointer to TSS -- new stack for exception handling$/;"	m	namespace:X86ISA
ISTPhysAddr	./arch/x86/system.hh	/^    const uint64_t ISTPhysAddr = 0x64000;$/;"	m	namespace:X86ISA
ISTVirtAddr	./arch/x86/system.hh	/^    const uint64_t ISTVirtAddr = 0xffff800000004000;$/;"	m	namespace:X86ISA
ITBWaitResponse	./cpu/simple/base.hh	/^        ITBWaitResponse,$/;"	e	enum:BaseSimpleCPU::Status
ITB_ASN_ASN	./arch/alpha/ev5.hh	/^inline int ITB_ASN_ASN(uint64_t reg) { return reg >> 4 & AsnMask; }$/;"	f	namespace:AlphaISA
ITB_PTE_ASMA	./arch/alpha/ev5.hh	/^inline bool ITB_PTE_ASMA(uint64_t reg) { return reg >> 4 & 0x1; }$/;"	f	namespace:AlphaISA
ITB_PTE_FONR	./arch/alpha/ev5.hh	/^inline bool ITB_PTE_FONR(uint64_t reg) { return reg >> 1 & 0x1; }$/;"	f	namespace:AlphaISA
ITB_PTE_FONW	./arch/alpha/ev5.hh	/^inline bool ITB_PTE_FONW(uint64_t reg) { return reg >> 2 & 0x1; }$/;"	f	namespace:AlphaISA
ITB_PTE_GH	./arch/alpha/ev5.hh	/^inline int ITB_PTE_GH(uint64_t reg) { return reg >> 5 & 0x3; }$/;"	f	namespace:AlphaISA
ITB_PTE_PPN	./arch/alpha/ev5.hh	/^inline Addr ITB_PTE_PPN(uint64_t reg)$/;"	f	namespace:AlphaISA
ITB_PTE_XRE	./arch/alpha/ev5.hh	/^inline int ITB_PTE_XRE(uint64_t reg) { return reg >> 8 & 0xf; }$/;"	f	namespace:AlphaISA
ITOUCH_ANNOTE	./arch/alpha/types.hh	/^    ITOUCH_ANNOTE = 0xffffffff$/;"	e	enum:AlphaISA::annotes
ITOUCH_ANNOTE	./arch/mips/isa_traits.hh	/^const uint32_t ITOUCH_ANNOTE = 0xffffffff;$/;"	m	namespace:MipsISA
ITR	./dev/net/i8254xGBe_defs.hh	/^    struct ITR : public Reg<uint32_t> { \/\/ 0x00C4 ITR Register$/;"	s	struct:iGbReg::Regs
IT_ACK	./dev/net/i8254xGBe_defs.hh	/^    IT_ACK     = 0x20000$/;"	e	enum:iGbReg::IntTypes
IT_CPU_MONDO	./arch/sparc/isa_traits.hh	/^    IT_CPU_MONDO,$/;"	e	enum:SparcISA::InterruptTypes
IT_DEV_MONDO	./arch/sparc/isa_traits.hh	/^    IT_DEV_MONDO,$/;"	e	enum:SparcISA::InterruptTypes
IT_GPI0	./dev/net/i8254xGBe_defs.hh	/^    IT_GPI0    = 0x02000,$/;"	e	enum:iGbReg::IntTypes
IT_GPI1	./dev/net/i8254xGBe_defs.hh	/^    IT_GPI1    = 0x04000,$/;"	e	enum:iGbReg::IntTypes
IT_HINTP	./arch/sparc/isa_traits.hh	/^    IT_HINTP,$/;"	e	enum:SparcISA::InterruptTypes
IT_INT_VEC	./arch/sparc/isa_traits.hh	/^    IT_INT_VEC,$/;"	e	enum:SparcISA::InterruptTypes
IT_LSC	./dev/net/i8254xGBe_defs.hh	/^    IT_LSC     = 0x00004,$/;"	e	enum:iGbReg::IntTypes
IT_MADC	./dev/net/i8254xGBe_defs.hh	/^    IT_MADC    = 0x00200,$/;"	e	enum:iGbReg::IntTypes
IT_NONE	./dev/net/i8254xGBe_defs.hh	/^    IT_NONE    = 0x00000, \/\/dummy value$/;"	e	enum:iGbReg::IntTypes
IT_RES_ERROR	./arch/sparc/isa_traits.hh	/^    IT_RES_ERROR,$/;"	e	enum:SparcISA::InterruptTypes
IT_RXCFG	./dev/net/i8254xGBe_defs.hh	/^    IT_RXCFG   = 0x00400,$/;"	e	enum:iGbReg::IntTypes
IT_RXDMT	./dev/net/i8254xGBe_defs.hh	/^    IT_RXDMT   = 0x00010,$/;"	e	enum:iGbReg::IntTypes
IT_RXO	./dev/net/i8254xGBe_defs.hh	/^    IT_RXO     = 0x00040,$/;"	e	enum:iGbReg::IntTypes
IT_RXSEQ	./dev/net/i8254xGBe_defs.hh	/^    IT_RXSEQ   = 0x00008,$/;"	e	enum:iGbReg::IntTypes
IT_RXT	./dev/net/i8254xGBe_defs.hh	/^    IT_RXT     = 0x00080,$/;"	e	enum:iGbReg::IntTypes
IT_SOFT_INT	./arch/sparc/isa_traits.hh	/^    IT_SOFT_INT,$/;"	e	enum:SparcISA::InterruptTypes
IT_SRPD	./dev/net/i8254xGBe_defs.hh	/^    IT_SRPD    = 0x10000,$/;"	e	enum:iGbReg::IntTypes
IT_TRAP_LEVEL_ZERO	./arch/sparc/isa_traits.hh	/^    IT_TRAP_LEVEL_ZERO,$/;"	e	enum:SparcISA::InterruptTypes
IT_TXDLOW	./dev/net/i8254xGBe_defs.hh	/^    IT_TXDLOW  = 0x08000,$/;"	e	enum:iGbReg::IntTypes
IT_TXDW	./dev/net/i8254xGBe_defs.hh	/^    IT_TXDW    = 0x00001,$/;"	e	enum:iGbReg::IntTypes
IT_TXQE	./dev/net/i8254xGBe_defs.hh	/^    IT_TXQE    = 0x00002,$/;"	e	enum:iGbReg::IntTypes
ITickEvent	./cpu/simple/timing.hh	/^            ITickEvent(TimingSimpleCPU *_cpu)$/;"	f	struct:TimingSimpleCPU::IcachePort::ITickEvent
ITickEvent	./cpu/simple/timing.hh	/^        struct ITickEvent : public TickEvent$/;"	s	class:TimingSimpleCPU::IcachePort
I_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum flit_stage {I_, VA_, SA_, ST_, LT_, NUM_FLIT_STAGE_};$/;"	e	enum:flit_stage
IcacheAccessComplete	./cpu/o3/fetch.hh	/^        IcacheAccessComplete,$/;"	e	enum:DefaultFetch::ThreadStatus
IcacheNeedsRetry	./cpu/minor/fetch1.hh	/^        IcacheNeedsRetry \/* Request rejected, will be asked to retry *\/$/;"	e	enum:Minor::Fetch1::IcacheState
IcachePort	./cpu/minor/fetch1.hh	/^        IcachePort(std::string name, Fetch1 &fetch_, MinorCPU &cpu) :$/;"	f	class:Minor::Fetch1::IcachePort
IcachePort	./cpu/minor/fetch1.hh	/^    class IcachePort : public MinorCPU::MinorCPUPort$/;"	c	class:Minor::Fetch1
IcachePort	./cpu/o3/cpu.hh	/^        IcachePort(DefaultFetch<Impl> *_fetch, FullO3CPU<Impl>* _cpu)$/;"	f	class:FullO3CPU::IcachePort
IcachePort	./cpu/o3/cpu.hh	/^    class IcachePort : public MasterPort$/;"	c	class:FullO3CPU
IcachePort	./cpu/simple/timing.hh	/^        IcachePort(TimingSimpleCPU *_cpu)$/;"	f	class:TimingSimpleCPU::IcachePort
IcachePort	./cpu/simple/timing.hh	/^    class IcachePort : public TimingCPUPort$/;"	c	class:TimingSimpleCPU
IcachePort	./cpu/trace/trace_cpu.hh	/^        IcachePort(TraceCPU* _cpu)$/;"	f	class:TraceCPU::IcachePort
IcachePort	./cpu/trace/trace_cpu.hh	/^    class IcachePort : public MasterPort$/;"	c	class:TraceCPU
IcacheRetry	./cpu/simple/base.hh	/^        IcacheRetry,$/;"	e	enum:BaseSimpleCPU::Status
IcacheRunning	./cpu/minor/fetch1.hh	/^        IcacheRunning, \/* Default. Step icache queues when possible *\/$/;"	e	enum:Minor::Fetch1::IcacheState
IcacheState	./cpu/minor/fetch1.hh	/^    enum IcacheState$/;"	g	class:Minor::Fetch1
IcacheWaitResponse	./cpu/o3/fetch.hh	/^        IcacheWaitResponse,$/;"	e	enum:DefaultFetch::ThreadStatus
IcacheWaitResponse	./cpu/simple/base.hh	/^        IcacheWaitResponse,$/;"	e	enum:BaseSimpleCPU::Status
IcacheWaitRetry	./cpu/o3/fetch.hh	/^        IcacheWaitRetry,$/;"	e	enum:DefaultFetch::ThreadStatus
IcacheWaitSwitch	./cpu/simple/base.hh	/^        IcacheWaitSwitch,$/;"	e	enum:BaseSimpleCPU::Status
Id	./base/cp_annotate.hh	/^    typedef std::pair<std::string, uint64_t> Id;$/;"	t	class:CPA
IdCache	./base/cp_annotate.hh	/^    typedef std::vector<IdHCache> IdCache;$/;"	t	class:CPA
IdHCache	./base/cp_annotate.hh	/^    typedef std::unordered_map<Id, int> IdHCache;$/;"	t	class:CPA
IdMap	./base/cp_annotate.hh	/^    typedef std::vector<std::pair<int, Id> > IdMap;$/;"	t	class:CPA
IdReg	./dev/arm/rv_ctrl.hh	/^        IdReg      = 0x00,$/;"	e	enum:RealViewCtrl::__anon19
IdeController	./dev/storage/Ide.py	/^class IdeController(PciDevice):$/;"	c
IdeController	./dev/storage/ide_ctrl.cc	/^IdeController::IdeController(Params *p)$/;"	f	class:IdeController
IdeController	./dev/storage/ide_ctrl.hh	/^class IdeController : public PciDevice$/;"	c
IdeDisk	./dev/storage/Ide.py	/^class IdeDisk(SimObject):$/;"	c
IdeDisk	./dev/storage/ide_disk.cc	/^IdeDisk::IdeDisk(const Params *p)$/;"	f	class:IdeDisk
IdeDisk	./dev/storage/ide_disk.hh	/^class IdeDisk : public SimObject$/;"	c
IdeID	./dev/storage/Ide.py	/^class IdeID(Enum): vals = ['master', 'slave']$/;"	c
Idle	./cpu/kvm/base.hh	/^        Idle,$/;"	e	enum:BaseKvmCPU::Status
Idle	./cpu/o3/commit.hh	/^        Idle,$/;"	e	enum:DefaultCommit::ThreadStatus
Idle	./cpu/o3/cpu.hh	/^        Idle,$/;"	e	enum:FullO3CPU::Status
Idle	./cpu/o3/decode.hh	/^        Idle,$/;"	e	enum:DefaultDecode::ThreadStatus
Idle	./cpu/o3/fetch.hh	/^        Idle,$/;"	e	enum:DefaultFetch::ThreadStatus
Idle	./cpu/o3/iew.hh	/^        Idle,$/;"	e	enum:DefaultIEW::StageStatus
Idle	./cpu/o3/rename.hh	/^        Idle,$/;"	e	enum:DefaultRename::ThreadStatus
Idle	./cpu/o3/rob.hh	/^        Idle,$/;"	e	enum:ROB::Status
Idle	./cpu/simple/base.hh	/^        Idle,$/;"	e	enum:BaseSimpleCPU::Status
Idle	./dev/pci/copy_engine.hh	/^            Idle,$/;"	e	enum:CopyEngine::CopyEngineChannel::ChannelState
Idle	./dev/sparc/iob.hh	/^        Idle,$/;"	e	enum:Iob::Type
IdleGen	./cpu/testers/traffic_gen/generators.hh	/^    IdleGen(const std::string& _name, MasterID master_id, Tick _duration)$/;"	f	class:IdleGen
IdleGen	./cpu/testers/traffic_gen/generators.hh	/^class IdleGen : public BaseGen$/;"	c
IdleStartEvent	./arch/alpha/idle_event.hh	/^    IdleStartEvent(PCEventQueue *q, const std::string &desc, Addr addr)$/;"	f	class:IdleStartEvent
IdleStartEvent	./arch/alpha/idle_event.hh	/^class IdleStartEvent : public PCEvent$/;"	c
IdleStartEvent	./arch/mips/idle_event.hh	/^    IdleStartEvent(PCEventQueue *q, const std::string &desc, Addr addr)$/;"	f	class:IdleStartEvent
IdleStartEvent	./arch/mips/idle_event.hh	/^class IdleStartEvent : public PCEvent$/;"	c
IfStatementAST	./mem/slicc/ast/IfStatementAST.py	/^class IfStatementAST(StatementAST):$/;"	c
Ignore	./arch/arm/table_walker.hh	/^            Ignore,$/;"	e	enum:ArmISA::TableWalker::L1Descriptor::EntryType
IllegalAsi	./arch/sparc/tlb.hh	/^        IllegalAsi = 0x8,$/;"	e	enum:SparcISA::TLB::FaultTypes
IllegalInstSetStateFault	./arch/arm/faults.cc	/^IllegalInstSetStateFault::IllegalInstSetStateFault()$/;"	f	class:ArmISA::IllegalInstSetStateFault
IllegalInstSetStateFault	./arch/arm/faults.hh	/^class IllegalInstSetStateFault : public ArmFaultVals<IllegalInstSetStateFault>$/;"	c	namespace:ArmISA
IllegalInstruction	./arch/sparc/faults.hh	/^class IllegalInstruction : public SparcFault<IllegalInstruction> {};$/;"	c	namespace:SparcISA
ImmOp	./arch/arm/insts/misc.hh	/^    ImmOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ImmOp
ImmOp	./arch/arm/insts/misc.hh	/^class ImmOp : public PredOp$/;"	c
ImmediateState	./arch/x86/decoder.hh	/^        ImmediateState,$/;"	e	enum:X86ISA::Decoder::State
ImmediateTypeOneByte	./arch/x86/decoder.hh	/^    static ByteTable ImmediateTypeOneByte;$/;"	m	class:X86ISA::Decoder
ImmediateTypeOneByte	./arch/x86/decoder_tables.cc	/^    const Decoder::ByteTable Decoder::ImmediateTypeOneByte =$/;"	m	class:X86ISA::Decoder	file:
ImmediateTypeThreeByte0F38	./arch/x86/decoder.hh	/^    static ByteTable ImmediateTypeThreeByte0F38;$/;"	m	class:X86ISA::Decoder
ImmediateTypeThreeByte0F38	./arch/x86/decoder_tables.cc	/^    const Decoder::ByteTable Decoder::ImmediateTypeThreeByte0F38 =$/;"	m	class:X86ISA::Decoder	file:
ImmediateTypeThreeByte0F3A	./arch/x86/decoder.hh	/^    static ByteTable ImmediateTypeThreeByte0F3A;$/;"	m	class:X86ISA::Decoder
ImmediateTypeThreeByte0F3A	./arch/x86/decoder_tables.cc	/^    const Decoder::ByteTable Decoder::ImmediateTypeThreeByte0F3A =$/;"	m	class:X86ISA::Decoder	file:
ImmediateTypeTwoByte	./arch/x86/decoder.hh	/^    static ByteTable ImmediateTypeTwoByte;$/;"	m	class:X86ISA::Decoder
ImmediateTypeTwoByte	./arch/x86/decoder_tables.cc	/^    const Decoder::ByteTable Decoder::ImmediateTypeTwoByte =$/;"	m	class:X86ISA::Decoder	file:
ImmediateTypeVex	./arch/x86/decoder.hh	/^    static ByteTable ImmediateTypeVex[10];$/;"	m	class:X86ISA::Decoder
ImmediateTypeVex	./arch/x86/decoder_tables.cc	/^    const Decoder::ByteTable Decoder::ImmediateTypeVex[10] =$/;"	m	class:X86ISA::Decoder	file:
ImplBits	./arch/alpha/pagetable.hh	/^    static const int ImplBits = 43;$/;"	m	struct:AlphaISA::VAddr
ImplBits	./arch/power/pagetable.hh	/^    static const int ImplBits = 43;$/;"	m	struct:PowerISA::VAddr
ImplCPU	./cpu/base_dyn_inst.hh	/^    typedef typename Impl::CPUType ImplCPU;$/;"	t	class:BaseDynInst
ImplMask	./arch/alpha/pagetable.hh	/^    static const Addr ImplMask = (ULL(1) << ImplBits) - 1;$/;"	m	struct:AlphaISA::VAddr
ImplMask	./arch/power/pagetable.hh	/^    static const Addr ImplMask = (ULL(1) << ImplBits) - 1;$/;"	m	struct:PowerISA::VAddr
ImplState	./cpu/base_dyn_inst.hh	/^    typedef typename ImplCPU::ImplState ImplState;$/;"	t	class:BaseDynInst
ImplState	./cpu/o3/cpu.hh	/^    typedef O3ThreadState<Impl> ImplState;$/;"	t	class:FullO3CPU
InPortDeclAST	./mem/slicc/ast/InPortDeclAST.py	/^class InPortDeclAST(DeclAST):$/;"	c
InTranslation	./cpu/minor/fetch1.hh	/^            InTranslation, \/* Issued to ITLB, must wait for reqply *\/$/;"	e	enum:Minor::Fetch1::FetchRequest::FetchRequestState
InTranslation	./cpu/minor/lsq.hh	/^            InTranslation, \/* TLB accessed, no reply yet *\/$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
InVcState	./mem/ruby/network/garnet/flexible-pipeline/InVcState.cc	/^InVcState::InVcState(int id)$/;"	f	class:InVcState
InVcState	./mem/ruby/network/garnet/flexible-pipeline/InVcState.hh	/^class InVcState$/;"	c
Inactive	./cpu/o3/commit.hh	/^        Inactive$/;"	e	enum:DefaultCommit::CommitStatus
Inactive	./cpu/o3/decode.hh	/^        Inactive$/;"	e	enum:DefaultDecode::DecodeStatus
Inactive	./cpu/o3/fetch.hh	/^        Inactive$/;"	e	enum:DefaultFetch::FetchStatus
Inactive	./cpu/o3/iew.hh	/^        Inactive$/;"	e	enum:DefaultIEW::Status
Inactive	./cpu/o3/rename.hh	/^        Inactive$/;"	e	enum:DefaultRename::RenameStatus
IncEthernetAddr	./python/m5/params.py	/^def IncEthernetAddr(addr, val = 1):$/;"	f
IncrementAfter	./arch/arm/insts/mem.hh	/^        IncrementAfter,$/;"	e	enum:ArmISA::RfeOp::AddrMode
IncrementAfter	./arch/arm/insts/mem.hh	/^        IncrementAfter,$/;"	e	enum:ArmISA::SrsOp::AddrMode
IncrementBefore	./arch/arm/insts/mem.hh	/^        IncrementBefore$/;"	e	enum:ArmISA::RfeOp::AddrMode
IncrementBefore	./arch/arm/insts/mem.hh	/^        IncrementBefore$/;"	e	enum:ArmISA::SrsOp::AddrMode
Index	./cpu/minor/scoreboard.hh	/^    typedef unsigned short int Index;$/;"	t	class:Minor::Scoreboard
Index	./dev/virtio/base.hh	/^        typedef uint16_t Index;$/;"	t	class:VirtQueue::VirtRing
Index	./dev/virtio/base.hh	/^    typedef uint16_t Index;$/;"	t	class:VirtDescriptor
IndexNodeMap	./mem/stack_dist_calc.hh	/^    typedef std::map<uint64_t, Node*> IndexNodeMap;$/;"	t	class:StackDistCalc
Inexact	./arch/mips/registers.hh	/^    Inexact = 1,$/;"	e	enum:MipsISA::FCSRBits
Infinity	./mem/stack_dist_calc.hh	/^    static constexpr uint64_t Infinity = std::numeric_limits<uint64_t>::max();$/;"	m	class:StackDistCalc
InfixOperatorExprAST	./mem/slicc/ast/OperatorExprAST.py	/^class InfixOperatorExprAST(ExprAST):$/;"	c
Info	./base/statistics.cc	/^Info::Info()$/;"	f	class:Stats::Info
Info	./base/statistics.hh	/^    typedef DistInfoProxy<Derived> Info;$/;"	t	class:Stats::DistBase
Info	./base/statistics.hh	/^    typedef InfoProxyType<Derived> Info;$/;"	t	class:Stats::DataWrap
Info	./base/statistics.hh	/^    typedef InfoProxyType<Derived> Info;$/;"	t	class:Stats::DataWrapVec
Info	./base/statistics.hh	/^    typedef InfoProxyType<Derived> Info;$/;"	t	class:Stats::DataWrapVec2d
Info	./base/statistics.hh	/^    typedef SparseHistInfoProxy<Derived> Info;$/;"	t	class:Stats::SparseHistBase
Info	./base/statistics.hh	/^    typedef Vector2dInfoProxy<Derived> Info;$/;"	t	class:Stats::Vector2dBase
Info	./base/statistics.hh	/^    typedef VectorDistInfoProxy<Derived> Info;$/;"	t	class:Stats::VectorDistBase
Info	./base/stats/info.hh	/^class Info$/;"	c	namespace:Stats
Info	./dev/net/sinicreg.hh	/^struct Info$/;"	s	namespace:Sinic::Regs
InfoAccess	./base/statistics.hh	/^class InfoAccess$/;"	c	namespace:Stats
InfoHeaderV1	./base/bitmap.hh	/^    struct InfoHeaderV1 { \/* Aka DIB header *\/$/;"	s	class:Bitmap
InfoProxy	./base/statistics.hh	/^    InfoProxy(Stat &stat) : s(stat) {}$/;"	f	class:Stats::InfoProxy
InfoProxy	./base/statistics.hh	/^class InfoProxy : public Base$/;"	c	namespace:Stats
IniFile	./base/inifile.cc	/^IniFile::IniFile()$/;"	f	class:IniFile
IniFile	./base/inifile.hh	/^class IniFile$/;"	c
InitInterrupt	./arch/x86/faults.hh	/^        InitInterrupt(uint8_t _vector) :$/;"	f	class:X86ISA::InitInterrupt
InitInterrupt	./arch/x86/faults.hh	/^    class InitInterrupt : public X86Interrupt$/;"	c	namespace:X86ISA
InitMask	./sim/eventq.hh	/^    static const FlagsType InitMask      = 0xffc0; \/\/ mask for init bits$/;"	m	class:EventBase
InitParamKey	./sim/initparam_keys.hh	/^struct InitParamKey$/;"	s	namespace:PseudoInst
InitStack	./arch/alpha/linux/system.hh	/^    Addr InitStack() const { return KernelStart + 0x02000; }$/;"	f	class:LinuxAlphaSystem
InitStack	./arch/mips/linux/system.hh	/^    Addr InitStack() const { return KernelStart + 0x02000; }$/;"	f	class:LinuxMipsSystem
InitTc	./dev/intel_8254_timer.hh	/^        InitTc,$/;"	e	enum:Intel8254Timer::ModeVal
InitializationPhase	./base/vnc/vncserver.hh	/^        InitializationPhase,$/;"	e	enum:VncServer::ConnectionState
Initialized	./sim/eventq.hh	/^    static const FlagsType Initialized   = 0x7a40; \/\/ somewhat random bits$/;"	m	class:EventBase
InitrdSize	./arch/alpha/linux/system.hh	/^    Addr InitrdSize() const { return Param() + 0x108; }$/;"	f	class:LinuxAlphaSystem
InitrdSize	./arch/mips/linux/system.hh	/^    Addr InitrdSize() const { return Param() + 0x108; }$/;"	f	class:LinuxMipsSystem
InitrdStart	./arch/alpha/linux/system.hh	/^    Addr InitrdStart() const { return Param() + 0x100; }$/;"	f	class:LinuxAlphaSystem
InitrdStart	./arch/mips/linux/system.hh	/^    Addr InitrdStart() const { return Param() + 0x100; }$/;"	f	class:LinuxMipsSystem
Input	./cpu/minor/buffers.hh	/^        Input(typename Buffer::wire input_wire) :$/;"	f	class:Minor::Latch::Input
Input	./cpu/minor/buffers.hh	/^    class Input$/;"	c	class:Minor::Latch
InputBuffer	./cpu/minor/buffers.hh	/^    InputBuffer(const std::string &name, const std::string &data_name,$/;"	f	class:Minor::InputBuffer
InputBuffer	./cpu/minor/buffers.hh	/^class InputBuffer : public Reservable$/;"	c	namespace:Minor
InputEvent	./base/remote_gdb.cc	/^BaseRemoteGDB::InputEvent::InputEvent(BaseRemoteGDB *g, int fd, int e)$/;"	f	class:BaseRemoteGDB::InputEvent
InputEvent	./base/remote_gdb.cc	/^GDBListener::InputEvent::InputEvent(GDBListener *l, int fd, int e)$/;"	f	class:GDBListener::InputEvent
InputEvent	./base/remote_gdb.hh	/^    class InputEvent : public PollEvent$/;"	c	class:BaseRemoteGDB
InputEvent	./base/remote_gdb.hh	/^    class InputEvent : public PollEvent$/;"	c	class:GDBListener
InputStream	./cpu/testers/traffic_gen/generators.cc	/^TraceGen::InputStream::InputStream(const std::string& filename)$/;"	f	class:TraceGen::InputStream
InputStream	./cpu/testers/traffic_gen/generators.hh	/^    class InputStream$/;"	c	class:TraceGen
InputStream	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::InputStream::InputStream(const std::string& filename)$/;"	f	class:TraceCPU::ElasticDataGen::InputStream
InputStream	./cpu/trace/trace_cpu.cc	/^TraceCPU::FixedRetryGen::InputStream::InputStream(const std::string& filename)$/;"	f	class:TraceCPU::FixedRetryGen::InputStream
InputStream	./cpu/trace/trace_cpu.hh	/^        class InputStream$/;"	c	class:TraceCPU::ElasticDataGen
InputStream	./cpu/trace/trace_cpu.hh	/^        class InputStream$/;"	c	class:TraceCPU::FixedRetryGen
InputUnit_d	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.cc	/^InputUnit_d::InputUnit_d(int id, Router_d *router) : Consumer(router)$/;"	f	class:InputUnit_d
InputUnit_d	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^class InputUnit_d : public Consumer$/;"	c
InstBytes	./arch/x86/decoder.hh	/^        InstBytes() : lastOffset(0)$/;"	f	struct:X86ISA::Decoder::InstBytes
InstBytes	./arch/x86/decoder.hh	/^    struct InstBytes$/;"	s	class:X86ISA::Decoder
InstCacheMap	./arch/x86/decoder.hh	/^    typedef std::unordered_map<CacheKey, DecodeCache::InstMap *> InstCacheMap;$/;"	t	class:X86ISA::Decoder
InstExecInfo	./cpu/o3/probe/elastic_trace.hh	/^        InstExecInfo()$/;"	f	struct:ElasticTrace::InstExecInfo
InstExecInfo	./cpu/o3/probe/elastic_trace.hh	/^    struct InstExecInfo$/;"	s	class:ElasticTrace
InstId	./cpu/minor/dyn_inst.hh	/^    InstId($/;"	f	class:Minor::InstId
InstId	./cpu/minor/dyn_inst.hh	/^class InstId$/;"	c	namespace:Minor
InstIntRegOffsets	./arch/sparc/isa.hh	/^    enum InstIntRegOffsets {$/;"	g	class:SparcISA::ISA
InstIt	./cpu/o3/rob.hh	/^    typedef typename std::list<DynInstPtr>::iterator InstIt;$/;"	t	class:ROB
InstListIt	./cpu/checker/cpu.hh	/^    typedef typename std::list<DynInstPtr>::iterator InstListIt;$/;"	t	class:Checker
InstMap	./cpu/decode_cache.hh	/^typedef std::unordered_map<TheISA::ExtMachInst, StaticInstPtr> InstMap;$/;"	t	namespace:DecodeCache
InstObjParams	./arch/isa_parser.py	/^class InstObjParams(object):$/;"	c
InstPBTrace	./cpu/InstPBTrace.py	/^class InstPBTrace(InstTracer):$/;"	c
InstPBTrace	./cpu/inst_pb_trace.cc	/^InstPBTrace::InstPBTrace(const InstPBTraceParams *p)$/;"	f	class:Trace::InstPBTrace
InstPBTrace	./cpu/inst_pb_trace.hh	/^class InstPBTrace : public InstTracer$/;"	c	namespace:Trace
InstPBTraceRecord	./cpu/inst_pb_trace.hh	/^    InstPBTraceRecord(InstPBTrace& _tracer, Tick when, ThreadContext *tc,$/;"	f	class:Trace::InstPBTraceRecord
InstPBTraceRecord	./cpu/inst_pb_trace.hh	/^class InstPBTraceRecord : public InstRecord$/;"	c	namespace:Trace
InstPrefetchOp	./cpu/op_class.hh	/^static const OpClass InstPrefetchOp = Enums::InstPrefetch;$/;"	v
InstQueue	./cpu/o3/rename.hh	/^    typedef std::deque<DynInstPtr> InstQueue;$/;"	t	class:DefaultRename
InstRecord	./sim/insttracer.hh	/^    InstRecord(Tick _when, ThreadContext *_thread,$/;"	f	class:Trace::InstRecord
InstRecord	./sim/insttracer.hh	/^class InstRecord$/;"	c	namespace:Trace
InstRegIndex	./arch/x86/insts/static_inst.hh	/^        explicit InstRegIndex(RegIndex _idx) : idx(_idx)$/;"	f	struct:X86ISA::InstRegIndex
InstRegIndex	./arch/x86/insts/static_inst.hh	/^    struct InstRegIndex$/;"	s	namespace:X86ISA
InstSeqNum	./cpu/inst_seq.hh	/^typedef uint64_t InstSeqNum;$/;"	t
InstTag	./cpu/inst_seq.hh	/^typedef unsigned int InstTag;$/;"	t
InstTracer	./sim/InstTracer.py	/^class InstTracer(SimObject):$/;"	c
InstTracer	./sim/insttracer.hh	/^    InstTracer(const Params *p) : SimObject(p)$/;"	f	class:Trace::InstTracer
InstTracer	./sim/insttracer.hh	/^class InstTracer : public SimObject$/;"	c	namespace:Trace
InstructionAccessError	./arch/sparc/faults.hh	/^class InstructionAccessError : public SparcFault<InstructionAccessError> {};$/;"	c	namespace:SparcISA
InstructionAccessException	./arch/sparc/faults.hh	/^class InstructionAccessException : public SparcFault<InstructionAccessException> {};$/;"	c	namespace:SparcISA
InstructionBreakpoint	./arch/sparc/faults.hh	/^class InstructionBreakpoint : public SparcFault<InstructionBreakpoint> {};$/;"	c	namespace:SparcISA
InstructionCacheMaintenance	./arch/arm/faults.hh	/^        InstructionCacheMaintenance,  \/\/ Short-desc. format only$/;"	e	enum:ArmISA::ArmFault::FaultSource
InstructionInvalidTSBEntry	./arch/sparc/faults.hh	/^class InstructionInvalidTSBEntry :$/;"	c	namespace:SparcISA
InstructionQueue	./cpu/o3/inst_queue.hh	/^class InstructionQueue$/;"	c
InstructionQueue	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::InstructionQueue(O3CPU *cpu_ptr, IEW *iew_ptr,$/;"	f	class:InstructionQueue
InstructionRealTranslationMiss	./arch/sparc/faults.hh	/^class InstructionRealTranslationMiss :$/;"	c	namespace:SparcISA
Int	./python/m5/params.py	/^class Int(CheckedInt):      cxx_type = 'int';      size = 32; unsigned = False$/;"	c
Int	./sim/core.cc	/^namespace Int {$/;"	n	namespace:SimClock	file:
Int	./sim/core.hh	/^namespace Int {$/;"	n	namespace:SimClock
Int16	./python/m5/params.py	/^class Int16(CheckedInt):    cxx_type =  'int16_t'; size = 16; unsigned = False$/;"	c
Int32	./python/m5/params.py	/^class Int32(CheckedInt):    cxx_type =  'int32_t'; size = 32; unsigned = False$/;"	c
Int64	./python/m5/params.py	/^class Int64(CheckedInt):    cxx_type =  'int64_t'; size = 64; unsigned = False$/;"	c
Int8	./python/m5/params.py	/^class Int8(CheckedInt):     cxx_type =   'int8_t'; size =  8; unsigned = False$/;"	c
IntALU	./cpu/o3/FuncUnitConfig.py	/^class IntALU(FUDesc):$/;"	c
IntAddrPrefixCPUID	./arch/x86/x86_traits.hh	/^    const Addr IntAddrPrefixCPUID = ULL(0x100000000);$/;"	m	namespace:X86ISA
IntAddrPrefixIO	./arch/x86/x86_traits.hh	/^    const Addr IntAddrPrefixIO = ULL(0x300000000);$/;"	m	namespace:X86ISA
IntAddrPrefixMSR	./arch/x86/x86_traits.hh	/^    const Addr IntAddrPrefixMSR = ULL(0x200000000);$/;"	m	namespace:X86ISA
IntAddrPrefixMask	./arch/x86/x86_traits.hh	/^    const Addr IntAddrPrefixMask = ULL(0xffffffff00000000);$/;"	m	namespace:X86ISA
IntAluOp	./cpu/op_class.hh	/^static const OpClass IntAluOp = Enums::IntAlu;$/;"	v
IntAssignment	./arch/x86/bios/intelmp.hh	/^    IntAssignment(X86IntelMPBaseConfigEntryParams * p,$/;"	f	class:X86ISA::IntelMP::IntAssignment
IntAssignment	./arch/x86/bios/intelmp.hh	/^class IntAssignment : public BaseConfigEntry$/;"	c	namespace:X86ISA::IntelMP
IntBusy	./dev/sparc/iob.hh	/^    struct IntBusy {$/;"	s	class:Iob
IntClear	./dev/arm/rtc_pl031.hh	/^        IntClear   = 0x1C,$/;"	e	enum:PL031::__anon24
IntClear	./dev/arm/timer_sp804.hh	/^            IntClear   = 0x0C,$/;"	e	enum:Sp804::Timer::__anon21
IntCtl	./dev/sparc/iob.hh	/^    struct IntCtl {$/;"	s	class:Iob
IntCtlAddr	./dev/sparc/iob.hh	/^const Addr IntCtlAddr       = 0x0400;$/;"	v
IntCtlMask	./dev/sparc/iob.hh	/^const uint64_t IntCtlMask   = 0x00006;$/;"	v
IntCtlSize	./dev/sparc/iob.hh	/^const Addr IntCtlSize       = 0x0020;$/;"	v
IntDeliveryMode	./arch/x86/intmessage.hh	/^        enum IntDeliveryMode {$/;"	g	namespace:X86ISA::DeliveryMode
IntDevice	./dev/x86/intdev.hh	/^    IntDevice(MemObject * parent, Tick latency = 0) :$/;"	f	class:X86ISA::IntDevice
IntDevice	./dev/x86/intdev.hh	/^class IntDevice$/;"	c	namespace:X86ISA
IntDivOp	./cpu/op_class.hh	/^static const OpClass IntDivOp = Enums::IntDiv;$/;"	v
IntFoldBit	./arch/x86/regs/int.hh	/^    static const IntRegIndex IntFoldBit = (IntRegIndex)(1 << 6);$/;"	m	namespace:X86ISA
IntImmOp	./arch/power/insts/integer.hh	/^    IntImmOp(const char *mnem, MachInst _machInst, OpClass __opClass)$/;"	f	class:PowerISA::IntImmOp
IntImmOp	./arch/power/insts/integer.hh	/^class IntImmOp : public IntOp$/;"	c	namespace:PowerISA
IntLine	./dev/x86/intdev.hh	/^    IntLine(Params *p) : SimObject(p), source(p->source), sink(p->sink)$/;"	f	class:X86ISA::IntLine
IntLine	./dev/x86/intdev.hh	/^class IntLine : public SimObject$/;"	c	namespace:X86ISA
IntMan	./dev/sparc/iob.hh	/^    struct IntMan {$/;"	s	class:Iob
IntManAddr	./dev/sparc/iob.hh	/^const Addr IntManAddr       = 0x0000;$/;"	v
IntManMask	./dev/sparc/iob.hh	/^const uint64_t IntManMask   = 0x01F3F;$/;"	v
IntManSize	./dev/sparc/iob.hh	/^const Addr IntManSize       = 0x0020;$/;"	v
IntMask	./dev/arm/rtc_pl031.hh	/^        IntMask    = 0x10,$/;"	e	enum:PL031::__anon24
IntMasterPort	./dev/x86/intdev.hh	/^        IntMasterPort(const std::string& _name, MemObject* _parent,$/;"	f	class:X86ISA::IntDevice::IntMasterPort
IntMasterPort	./dev/x86/intdev.hh	/^    class IntMasterPort : public MessageMasterPort$/;"	c	class:X86ISA::IntDevice
IntMultDiv	./cpu/o3/FuncUnitConfig.py	/^class IntMultDiv(FUDesc):$/;"	c
IntMultOp	./cpu/op_class.hh	/^static const OpClass IntMultOp = Enums::IntMult;$/;"	v
IntOp	./arch/power/insts/integer.hh	/^    IntOp(const char *mnem, MachInst _machInst, OpClass __opClass)$/;"	f	class:PowerISA::IntOp
IntOp	./arch/power/insts/integer.hh	/^class IntOp : public PowerStaticInst$/;"	c	namespace:PowerISA
IntReg	./arch/alpha/registers.hh	/^typedef uint64_t IntReg;$/;"	t	namespace:AlphaISA
IntReg	./arch/arm/registers.hh	/^typedef uint64_t IntReg;$/;"	t	namespace:ArmISA
IntReg	./arch/mips/registers.hh	/^typedef uint32_t IntReg;$/;"	t	namespace:MipsISA
IntReg	./arch/null/registers.hh	/^typedef uint64_t IntReg;$/;"	t	namespace:NullISA
IntReg	./arch/power/registers.hh	/^typedef uint64_t IntReg;$/;"	t	namespace:PowerISA
IntReg	./arch/sparc/registers.hh	/^typedef uint64_t IntReg;$/;"	t	namespace:SparcISA
IntReg	./arch/x86/registers.hh	/^typedef uint64_t IntReg;$/;"	t	namespace:X86ISA
IntReg	./cpu/exec_context.hh	/^    typedef TheISA::IntReg IntReg;$/;"	t	class:ExecContext
IntReg	./cpu/o3/dyn_inst.hh	/^    typedef TheISA::IntReg   IntReg;$/;"	t	class:BaseO3DynInst
IntReg	./cpu/o3/regfile.hh	/^    typedef TheISA::IntReg IntReg;$/;"	t	class:PhysRegFile
IntReg	./cpu/thread_context.hh	/^    typedef TheISA::IntReg IntReg;$/;"	t	class:ThreadContext
IntReg64Map	./arch/arm/intregs.hh	/^const IntRegMap IntReg64Map = {$/;"	m	namespace:ArmISA
IntRegAbtMap	./arch/arm/intregs.hh	/^const IntRegMap IntRegAbtMap = {$/;"	m	namespace:ArmISA
IntRegClass	./cpu/reg_class.hh	/^    IntRegClass,        \/\/\/< Integer register$/;"	e	enum:RegClass
IntRegFiqMap	./arch/arm/intregs.hh	/^const IntRegMap IntRegFiqMap = {$/;"	m	namespace:ArmISA
IntRegHypMap	./arch/arm/intregs.hh	/^const IntRegMap IntRegHypMap = {$/;"	m	namespace:ArmISA
IntRegIndex	./arch/arm/intregs.hh	/^enum IntRegIndex$/;"	g	namespace:ArmISA
IntRegIndex	./arch/x86/regs/int.hh	/^    enum IntRegIndex$/;"	g	namespace:X86ISA
IntRegInfo	./arch/arm/kvm/armv8_cpu.hh	/^        IntRegInfo(uint64_t _kvm, IntRegIndex _idx, const char *_name)$/;"	f	struct:ArmV8KvmCPU::IntRegInfo
IntRegInfo	./arch/arm/kvm/armv8_cpu.hh	/^    struct IntRegInfo {$/;"	s	class:ArmV8KvmCPU
IntRegIrqMap	./arch/arm/intregs.hh	/^const IntRegMap IntRegIrqMap = {$/;"	m	namespace:ArmISA
IntRegMap	./arch/arm/intregs.hh	/^typedef IntRegIndex IntRegMap[NUM_ARCH_INTREGS];$/;"	t	namespace:ArmISA
IntRegMonMap	./arch/arm/intregs.hh	/^const IntRegMap IntRegMonMap = {$/;"	m	namespace:ArmISA
IntRegOperand	./arch/isa_parser.py	/^class IntRegOperand(Operand):$/;"	c
IntRegSvcMap	./arch/arm/intregs.hh	/^const IntRegMap IntRegSvcMap = {$/;"	m	namespace:ArmISA
IntRegUndMap	./arch/arm/intregs.hh	/^const IntRegMap IntRegUndMap = {$/;"	m	namespace:ArmISA
IntRegUsrMap	./arch/arm/intregs.hh	/^const IntRegMap IntRegUsrMap = {$/;"	m	namespace:ArmISA
IntRotateOp	./arch/power/insts/integer.hh	/^    IntRotateOp(const char *mnem, MachInst _machInst, OpClass __opClass)$/;"	f	class:PowerISA::IntRotateOp
IntRotateOp	./arch/power/insts/integer.hh	/^class IntRotateOp : public IntShiftOp$/;"	c	namespace:PowerISA
IntShiftOp	./arch/power/insts/integer.hh	/^    IntShiftOp(const char *mnem, MachInst _machInst, OpClass __opClass)$/;"	f	class:PowerISA::IntShiftOp
IntShiftOp	./arch/power/insts/integer.hh	/^class IntShiftOp : public IntOp$/;"	c	namespace:PowerISA
IntSinkPin	./dev/x86/intdev.hh	/^    IntSinkPin(Params *p) : SimObject(p),$/;"	f	class:X86ISA::IntSinkPin
IntSinkPin	./dev/x86/intdev.hh	/^class IntSinkPin : public SimObject$/;"	c	namespace:X86ISA
IntSlavePort	./dev/x86/intdev.hh	/^        IntSlavePort(const std::string& _name, MemObject* _parent,$/;"	f	class:X86ISA::IntDevice::IntSlavePort
IntSlavePort	./dev/x86/intdev.hh	/^    class IntSlavePort : public MessageSlavePort$/;"	c	class:X86ISA::IntDevice
IntSourcePin	./dev/x86/intdev.hh	/^    IntSourcePin(Params *p) : SimObject(p)$/;"	f	class:X86ISA::IntSourcePin
IntSourcePin	./dev/x86/intdev.hh	/^class IntSourcePin : public SimObject$/;"	c	namespace:X86ISA
IntTypes	./dev/net/i8254xGBe_defs.hh	/^enum IntTypes$/;"	g	namespace:iGbReg
IntVec	./mem/ruby/common/IntVec.hh	/^typedef std::vector<int> IntVec;$/;"	t
IntVecDis	./dev/sparc/iob.hh	/^const uint64_t IntVecDis    = 0x31F3F;$/;"	v
IntVecDisAddr	./dev/sparc/iob.hh	/^const Addr IntVecDisAddr    = 0x0800;$/;"	v
IntVecDisSize	./dev/sparc/iob.hh	/^const Addr IntVecDisSize    = 0x0100;$/;"	v
Int_Clear	./dev/arm/hdlcd.hh	/^        Int_Clear        = 0x0014,$/;"	e	enum:HDLcd::RegisterOffset
Int_Mask	./dev/arm/hdlcd.hh	/^        Int_Mask         = 0x0018,$/;"	e	enum:HDLcd::RegisterOffset
Int_RawStat	./dev/arm/hdlcd.hh	/^        Int_RawStat      = 0x0010,$/;"	e	enum:HDLcd::RegisterOffset
Int_Status	./dev/arm/hdlcd.hh	/^        Int_Status       = 0x001C,$/;"	e	enum:HDLcd::RegisterOffset
IntegerOverflowFault	./arch/alpha/faults.hh	/^class IntegerOverflowFault : public AlphaFault$/;"	c	namespace:AlphaISA
IntegerOverflowFault	./arch/mips/faults.hh	/^class IntegerOverflowFault : public MipsFault<IntegerOverflowFault> {};$/;"	c	namespace:MipsISA
Intel8254Timer	./dev/intel_8254_timer.cc	/^Intel8254Timer::Intel8254Timer(EventManager *em, const string &name) :$/;"	f	class:Intel8254Timer
Intel8254Timer	./dev/intel_8254_timer.cc	/^Intel8254Timer::Intel8254Timer(EventManager *em, const string &name,$/;"	f	class:Intel8254Timer
Intel8254Timer	./dev/intel_8254_timer.hh	/^class Intel8254Timer : public EventManager$/;"	c
IntelMP	./arch/x86/bios/intelmp.hh	/^namespace IntelMP$/;"	n	namespace:X86ISA
IntelMP	./arch/x86/system.hh	/^    namespace IntelMP$/;"	n	namespace:X86ISA
IntelTrace	./cpu/CPUTracers.py	/^class IntelTrace(InstTracer):$/;"	c
IntelTrace	./cpu/inteltrace.hh	/^    IntelTrace(const IntelTraceParams *p) : InstTracer(p)$/;"	f	class:Trace::IntelTrace
IntelTrace	./cpu/inteltrace.hh	/^class IntelTrace : public InstTracer$/;"	c	namespace:Trace
IntelTraceRecord	./cpu/inteltrace.hh	/^    IntelTraceRecord(Tick _when, ThreadContext *_thread,$/;"	f	class:Trace::IntelTraceRecord
IntelTraceRecord	./cpu/inteltrace.hh	/^class IntelTraceRecord : public InstRecord$/;"	c	namespace:Trace
Interal	./dev/sparc/iob.hh	/^        Interal = 0,$/;"	e	enum:Iob::DeviceId
Interface	./dev/net/etherlink.cc	/^EtherLink::Interface::Interface(const string &name, Link *tx, Link *rx)$/;"	f	class:EtherLink::Interface
Interface	./dev/net/etherlink.hh	/^    class Interface : public EtherInt$/;"	c	class:EtherLink
Interface	./dev/net/sinic.hh	/^    Interface(const std::string &name, Device *d)$/;"	f	class:Sinic::Interface
Interface	./dev/net/sinic.hh	/^class Interface : public EtherInt$/;"	c	namespace:Sinic
InterfaceTest	./dev/x86/i8042.hh	/^        InterfaceTest = 0xAB,$/;"	e	enum:X86ISA::I8042::Command
IntermediateHeader	./arch/x86/bios/smbios.hh	/^            IntermediateHeader() : tableAddr(0)$/;"	f	struct:X86ISA::SMBios::SMBiosTable::SMBiosHeader::IntermediateHeader
IntermediateHeader	./arch/x86/bios/smbios.hh	/^        struct IntermediateHeader$/;"	s	struct:X86ISA::SMBios::SMBiosTable::SMBiosHeader
InternalProcReg	./arch/alpha/isa.hh	/^        typedef uint64_t InternalProcReg;$/;"	t	class:AlphaISA::ISA
InternalProcessorError	./arch/sparc/faults.hh	/^class InternalProcessorError :$/;"	c	namespace:SparcISA
Interrupt	./arch/arm/faults.hh	/^class Interrupt : public ArmFaultVals<Interrupt>$/;"	c	namespace:ArmISA
Interrupt	./cpu/minor/pipe_data.hh	/^        Interrupt,$/;"	e	enum:Minor::BranchData::Reason
Interrupt	./dev/arm/generic_timer.hh	/^        Interrupt(BaseGic &gic, unsigned irq)$/;"	f	class:ArchTimer::Interrupt
Interrupt	./dev/arm/generic_timer.hh	/^        Interrupt(BaseGic &gic, unsigned irq, unsigned cpu)$/;"	f	class:ArchTimer::Interrupt
Interrupt	./dev/arm/generic_timer.hh	/^    class Interrupt$/;"	c	class:ArchTimer
Interrupt	./dev/sparc/iob.hh	/^        Interrupt,$/;"	e	enum:Iob::Type
InterruptFault	./arch/alpha/faults.hh	/^class InterruptFault : public AlphaFault$/;"	c	namespace:AlphaISA
InterruptFault	./arch/mips/faults.hh	/^class InterruptFault : public MipsFault<InterruptFault>$/;"	c	namespace:MipsISA
InterruptLevel	./arch/sparc/interrupts.hh	/^    InterruptLevel(uint64_t softint)$/;"	f	class:SparcISA::Interrupts
InterruptLevelN	./arch/sparc/faults.hh	/^    InterruptLevelN(uint32_t n) : EnumeratedFault<InterruptLevelN>(n) {;}$/;"	f	class:SparcISA::InterruptLevelN
InterruptLevelN	./arch/sparc/faults.hh	/^class InterruptLevelN : public EnumeratedFault<InterruptLevelN>$/;"	c	namespace:SparcISA
InterruptLevels	./arch/alpha/isa_traits.hh	/^enum InterruptLevels$/;"	g	namespace:AlphaISA
InterruptLevels	./arch/mips/isa_traits.hh	/^enum InterruptLevels$/;"	g	namespace:MipsISA
InterruptLine	./dev/net/Ethernet.py	/^    InterruptLine = 0x1e$/;"	v	class:IGbE
InterruptLine	./dev/net/Ethernet.py	/^    InterruptLine = 0x1e$/;"	v	class:NSGigE
InterruptLine	./dev/net/Ethernet.py	/^    InterruptLine = 0x1e$/;"	v	class:Sinic
InterruptLine	./dev/pci/CopyEngine.py	/^    InterruptLine = 0x20$/;"	v	class:CopyEngine
InterruptLine	./dev/pci/PciDevice.py	/^    InterruptLine = Param.UInt8(0x00, "Interrupt Line")$/;"	v	class:PciDevice
InterruptLine	./dev/storage/Ide.py	/^    InterruptLine = 0x1f$/;"	v	class:IdeController
InterruptMask	./arch/arm/interrupts.hh	/^    enum InterruptMask {$/;"	g	class:ArmISA::Interrupts
InterruptPin	./dev/net/Ethernet.py	/^    InterruptPin = 0x01$/;"	v	class:IGbE
InterruptPin	./dev/net/Ethernet.py	/^    InterruptPin = 0x01$/;"	v	class:NSGigE
InterruptPin	./dev/net/Ethernet.py	/^    InterruptPin = 0x01$/;"	v	class:Sinic
InterruptPin	./dev/pci/CopyEngine.py	/^    InterruptPin = 0x01$/;"	v	class:CopyEngine
InterruptPin	./dev/pci/PciDevice.py	/^    InterruptPin = Param.UInt8(0x00, "Interrupt Pin")$/;"	v	class:PciDevice
InterruptPin	./dev/storage/Ide.py	/^    InterruptPin = 0x01$/;"	v	class:IdeController
InterruptPin	./dev/virtio/VirtIO.py	/^    InterruptPin = 0x01 # Use #INTA$/;"	v	class:PciVirtIO
InterruptStatusRegister	./dev/net/ns_gige_reg.h	/^enum InterruptStatusRegister {$/;"	g
InterruptTypes	./arch/arm/isa_traits.hh	/^    enum InterruptTypes$/;"	g	namespace:ArmISA
InterruptTypes	./arch/sparc/isa_traits.hh	/^enum InterruptTypes$/;"	g	namespace:SparcISA
InterruptVector	./arch/sparc/faults.hh	/^class InterruptVector : public SparcFault<InterruptVector> {};$/;"	c	namespace:SparcISA
Interrupts	./arch/alpha/interrupts.hh	/^    Interrupts(Params * p) : SimObject(p), cpu(NULL)$/;"	f	class:AlphaISA::Interrupts
Interrupts	./arch/alpha/interrupts.hh	/^class Interrupts : public SimObject$/;"	c	namespace:AlphaISA
Interrupts	./arch/arm/interrupts.hh	/^    Interrupts(Params * p) : SimObject(p), cpu(NULL)$/;"	f	class:ArmISA::Interrupts
Interrupts	./arch/arm/interrupts.hh	/^class Interrupts : public SimObject$/;"	c	namespace:ArmISA
Interrupts	./arch/mips/interrupts.hh	/^    Interrupts(Params * p) : SimObject(p)$/;"	f	class:MipsISA::Interrupts
Interrupts	./arch/mips/interrupts.hh	/^class Interrupts : public SimObject$/;"	c	namespace:MipsISA
Interrupts	./arch/power/interrupts.hh	/^    Interrupts(Params * p) : SimObject(p), cpu(NULL)$/;"	f	class:PowerISA::Interrupts
Interrupts	./arch/power/interrupts.hh	/^class Interrupts : public SimObject$/;"	c	namespace:PowerISA
Interrupts	./arch/sparc/interrupts.hh	/^    Interrupts(Params * p) : SimObject(p), cpu(NULL)$/;"	f	class:SparcISA::Interrupts
Interrupts	./arch/sparc/interrupts.hh	/^class Interrupts : public SimObject$/;"	c	namespace:SparcISA
Interrupts	./arch/x86/interrupts.cc	/^X86ISA::Interrupts::Interrupts(Params * p)$/;"	f	class:X86ISA::Interrupts
Interrupts	./arch/x86/interrupts.hh	/^class Interrupts : public BasicPioDevice, IntDevice$/;"	c	namespace:X86ISA
IntrControl	./cpu/IntrControl.py	/^class IntrControl(SimObject):$/;"	c
IntrControl	./cpu/intr_control.cc	/^IntrControl::IntrControl(const Params *p)$/;"	f	class:IntrControl
IntrControl	./cpu/intr_control.hh	/^class IntrControl : public SimObject$/;"	c
IntrControl	./cpu/intr_control_noisa.cc	/^IntrControl::IntrControl(const Params *p)$/;"	f	class:IntrControl
IntrEvent	./dev/net/ns_gige.hh	/^    typedef EventWrapper<NSGigE, &NSGigE::cpuInterrupt> IntrEvent;$/;"	t	class:NSGigE
IntrEvent	./dev/net/sinic.hh	/^    typedef EventWrapper<Base, &Base::cpuInterrupt> IntrEvent;$/;"	t	class:Sinic::Base
IntrEvent	./dev/uart8250.cc	/^Uart8250::IntrEvent::IntrEvent(Uart8250 *u, int bit)$/;"	f	class:Uart8250::IntrEvent
IntrEvent	./dev/uart8250.hh	/^    class IntrEvent : public Event$/;"	c	class:Uart8250
IntrMask	./dev/net/sinic.hh	/^        uint32_t IntrMask;     \/\/ 0x0c$/;"	m	struct:Sinic::Device::__anon11
IntrStatus	./dev/net/sinic.hh	/^        uint32_t IntrStatus;   \/\/ 0x08$/;"	m	struct:Sinic::Device::__anon11
Invalid	./arch/arm/table_walker.hh	/^            Invalid,$/;"	e	enum:ArmISA::TableWalker::LongDescriptor::EntryType
Invalid	./arch/mips/registers.hh	/^    Invalid,$/;"	e	enum:MipsISA::FCSRBits
InvalidCmd	./mem/packet.hh	/^        InvalidCmd,$/;"	e	enum:MemCmd::Command
InvalidContextID	./base/types.hh	/^const ContextID InvalidContextID = (ContextID)-1;$/;"	v
InvalidDestError	./mem/packet.hh	/^        InvalidDestError,  \/\/ packet dest field invalid$/;"	e	enum:MemCmd::Command
InvalidOpcode	./arch/x86/faults.hh	/^        InvalidOpcode() :$/;"	f	class:X86ISA::InvalidOpcode
InvalidOpcode	./arch/x86/faults.hh	/^    class InvalidOpcode : public X86Fault$/;"	c	namespace:X86ISA
InvalidPortID	./base/types.hh	/^const PortID InvalidPortID = (PortID)-1;$/;"	v
InvalidTSS	./arch/x86/faults.hh	/^        InvalidTSS(uint32_t _errorCode) :$/;"	f	class:X86ISA::InvalidTSS
InvalidTSS	./arch/x86/faults.hh	/^    class InvalidTSS : public X86Fault$/;"	c	namespace:X86ISA
InvalidThreadID	./base/types.hh	/^const ThreadID InvalidThreadID = (ThreadID)-1;$/;"	v
InvalidateGenerator	./cpu/testers/directedtest/InvalidateGenerator.cc	/^InvalidateGenerator::InvalidateGenerator(const Params *p)$/;"	f	class:InvalidateGenerator
InvalidateGenerator	./cpu/testers/directedtest/InvalidateGenerator.hh	/^class InvalidateGenerator : public DirectedGenerator $/;"	c
InvalidateGenerator	./cpu/testers/directedtest/RubyDirectedTester.py	/^class InvalidateGenerator(DirectedGenerator):$/;"	c
InvalidateReq	./mem/packet.hh	/^        InvalidateReq,   \/\/ request for address to be invalidated$/;"	e	enum:MemCmd::Command
InvalidateResp	./mem/packet.hh	/^        InvalidateResp,$/;"	e	enum:MemCmd::Command
IoSel	./dev/arm/rv_ctrl.hh	/^        IoSel      = 0x70,$/;"	e	enum:RealViewCtrl::__anon19
Iob	./dev/sparc/T1000.py	/^class Iob(PioDevice):$/;"	c
Iob	./dev/sparc/iob.cc	/^Iob::Iob(const Params *p)$/;"	f	class:Iob
Iob	./dev/sparc/iob.hh	/^class Iob : public PioDevice$/;"	c
Ip6Hdr	./base/inet.hh	/^struct Ip6Hdr : public ip6_hdr$/;"	s	namespace:Net
Ip6Opt	./base/inet.hh	/^struct Ip6Opt : public ip6_opt_hdr$/;"	s	namespace:Net
Ip6Ptr	./base/inet.hh	/^    Ip6Ptr() : p(0), eth_hdr_vlan(false) {}$/;"	f	class:Net::Ip6Ptr
Ip6Ptr	./base/inet.hh	/^    Ip6Ptr(const EthPacketPtr &ptr) : p(0), eth_hdr_vlan(false) { set(ptr); }$/;"	f	class:Net::Ip6Ptr
Ip6Ptr	./base/inet.hh	/^    Ip6Ptr(const EthPtr &ptr) : p(0), eth_hdr_vlan(false) { set(ptr.p); }$/;"	f	class:Net::Ip6Ptr
Ip6Ptr	./base/inet.hh	/^    Ip6Ptr(const Ip6Ptr &ptr) : p(ptr.p), eth_hdr_vlan(ptr.eth_hdr_vlan) { }$/;"	f	class:Net::Ip6Ptr
Ip6Ptr	./base/inet.hh	/^class Ip6Ptr$/;"	c	namespace:Net
IpAddress	./base/inet.hh	/^    IpAddress() : _ip(0)$/;"	f	struct:Net::IpAddress
IpAddress	./base/inet.hh	/^    IpAddress(const uint32_t __ip) : _ip(__ip)$/;"	f	struct:Net::IpAddress
IpAddress	./base/inet.hh	/^struct IpAddress$/;"	s	namespace:Net
IpAddress	./python/m5/params.py	/^class IpAddress(ParamValue):$/;"	c
IpHdr	./base/inet.hh	/^struct IpHdr : public ip_hdr$/;"	s	namespace:Net
IpNetmask	./base/inet.hh	/^    IpNetmask() : IpAddress(), _netmask(0)$/;"	f	struct:Net::IpNetmask
IpNetmask	./base/inet.hh	/^    IpNetmask(const uint32_t __ip, const uint8_t __netmask) :$/;"	f	struct:Net::IpNetmask
IpNetmask	./base/inet.hh	/^struct IpNetmask : public IpAddress$/;"	s	namespace:Net
IpNetmask	./python/m5/params.py	/^class IpNetmask(IpAddress):$/;"	c
IpOpt	./base/inet.hh	/^struct IpOpt : public ip_opt$/;"	s	namespace:Net
IpPtr	./base/inet.hh	/^    IpPtr() : p(0), eth_hdr_vlan(false) {}$/;"	f	class:Net::IpPtr
IpPtr	./base/inet.hh	/^    IpPtr(const EthPacketPtr &ptr) : p(0), eth_hdr_vlan(false) { set(ptr); }$/;"	f	class:Net::IpPtr
IpPtr	./base/inet.hh	/^    IpPtr(const EthPtr &ptr) : p(0), eth_hdr_vlan(false) { set(ptr.p); }$/;"	f	class:Net::IpPtr
IpPtr	./base/inet.hh	/^    IpPtr(const IpPtr &ptr) : p(ptr.p), eth_hdr_vlan(ptr.eth_hdr_vlan) { }$/;"	f	class:Net::IpPtr
IpPtr	./base/inet.hh	/^class IpPtr$/;"	c	namespace:Net
IpWithPort	./base/inet.hh	/^    IpWithPort() : IpAddress(), _port(0)$/;"	f	struct:Net::IpWithPort
IpWithPort	./base/inet.hh	/^    IpWithPort(const uint32_t __ip, const uint16_t __port) :$/;"	f	struct:Net::IpWithPort
IpWithPort	./base/inet.hh	/^struct IpWithPort : public IpAddress$/;"	s	namespace:Net
IpWithPort	./python/m5/params.py	/^class IpWithPort(IpAddress):$/;"	c
IprAccessOp	./cpu/op_class.hh	/^static const OpClass IprAccessOp = Enums::IprAccess;$/;"	v
IprEvent	./cpu/simple/timing.cc	/^TimingSimpleCPU::IprEvent::IprEvent(Packet *_pkt, TimingSimpleCPU *_cpu,$/;"	f	class:TimingSimpleCPU::IprEvent
IprEvent	./cpu/simple/timing.hh	/^    struct IprEvent : Event {$/;"	s	class:TimingSimpleCPU
IprIsReadable	./arch/alpha/ipr.hh	/^IprIsReadable(int index)$/;"	f	namespace:AlphaISA
IprIsWritable	./arch/alpha/ipr.hh	/^IprIsWritable(int index)$/;"	f	namespace:AlphaISA
IprPort	./cpu/o3/FuncUnitConfig.py	/^class IprPort(FUDesc):$/;"	c
IprToMiscRegIndex	./arch/alpha/ipr.cc	/^int IprToMiscRegIndex[MaxInternalProcRegs];$/;"	m	namespace:AlphaISA	file:
IqEntry	./cpu/base_dyn_inst.hh	/^        IqEntry,                 \/\/\/ Instruction is in the IQ$/;"	e	enum:BaseDynInst::Status
IsError	./mem/packet.hh	/^        IsError,        \/\/!< Error response$/;"	e	enum:MemCmd::Attribute
IsEviction	./mem/packet.hh	/^        IsEviction,$/;"	e	enum:MemCmd::Attribute
IsExitEvent	./sim/eventq.hh	/^    static const FlagsType IsExitEvent   = 0x0010; \/\/ special exit event$/;"	m	class:EventBase
IsFlush	./mem/packet.hh	/^        IsFlush,        \/\/!< Flush the address from caches$/;"	e	enum:MemCmd::Attribute
IsHWPrefetch	./mem/packet.hh	/^        IsHWPrefetch,$/;"	e	enum:MemCmd::Attribute
IsInvalidate	./mem/packet.hh	/^        IsInvalidate,$/;"	e	enum:MemCmd::Attribute
IsK0Seg	./arch/alpha/utility.hh	/^inline bool IsK0Seg(Addr a) { return K0SegBase <= a && a <= K0SegEnd; }$/;"	f	namespace:AlphaISA
IsK1Seg	./arch/alpha/utility.hh	/^inline bool IsK1Seg(Addr a) { return K1SegBase <= a && a <= K1SegEnd; }$/;"	f	namespace:AlphaISA
IsLlsc	./mem/packet.hh	/^        IsLlsc,         \/\/!< Alpha\/MIPS LL or SC access$/;"	e	enum:MemCmd::Attribute
IsMainQueue	./sim/eventq.hh	/^    static const FlagsType IsMainQueue   = 0x0020; \/\/ on main event queue$/;"	m	class:EventBase
IsPrint	./mem/packet.hh	/^        IsPrint,        \/\/!< Print state matching address (for debugging)$/;"	e	enum:MemCmd::Attribute
IsRead	./mem/packet.hh	/^        IsRead,         \/\/!< Data flows from responder to requester$/;"	e	enum:MemCmd::Attribute
IsRequest	./mem/packet.hh	/^        IsRequest,      \/\/!< Issued by requester$/;"	e	enum:MemCmd::Attribute
IsResponse	./mem/packet.hh	/^        IsResponse,     \/\/!< Issue by responder$/;"	e	enum:MemCmd::Attribute
IsSWPrefetch	./mem/packet.hh	/^        IsSWPrefetch,$/;"	e	enum:MemCmd::Attribute
IsStrictlyOrdered	./cpu/base_dyn_inst.hh	/^        IsStrictlyOrdered,$/;"	e	enum:BaseDynInst::Flags
IsUSeg	./arch/alpha/utility.hh	/^inline bool IsUSeg(Addr a) { assert(USegBase == 0); return a <= USegEnd; }$/;"	f	namespace:AlphaISA
IsUpgrade	./mem/packet.hh	/^        IsUpgrade,$/;"	e	enum:MemCmd::Attribute
IsValidPtrExprAST	./mem/slicc/ast/IsValidPtrExprAST.py	/^class IsValidPtrExprAST(ExprAST):$/;"	c
IsWrite	./mem/packet.hh	/^        IsWrite,        \/\/!< Data flows from requester to responder$/;"	e	enum:MemCmd::Attribute
IsaFake	./dev/Device.py	/^class IsaFake(BasicPioDevice):$/;"	c
IsaFake	./dev/isa_fake.cc	/^IsaFake::IsaFake(Params *p)$/;"	f	class:IsaFake
IsaFake	./dev/isa_fake.hh	/^class IsaFake : public BasicPioDevice$/;"	c
IssFSb	./base/loader/coff_sym.h	286;"	d
IssueStruct	./cpu/o3/comm.hh	/^struct IssueStruct {$/;"	s
IssueStruct	./cpu/o3/cpu_policy.hh	/^    typedef ::IssueStruct<Impl> IssueStruct;$/;"	t	struct:SimpleCPUPolicy
IssueStruct	./cpu/o3/iew.hh	/^    typedef typename CPUPol::IssueStruct IssueStruct;$/;"	t	class:DefaultIEW
IssueStruct	./cpu/o3/inst_queue.hh	/^    typedef typename Impl::CPUPol::IssueStruct IssueStruct;$/;"	t	class:InstructionQueue
IssueStruct	./cpu/o3/lsq_unit.hh	/^    typedef typename Impl::CPUPol::IssueStruct IssueStruct;$/;"	t	class:LSQUnit
Issued	./cpu/base_dyn_inst.hh	/^        Issued,                  \/\/\/ Instruction has issued$/;"	e	enum:BaseDynInst::Status
ItbAcvFault	./arch/alpha/faults.hh	/^    ItbAcvFault(Addr pc) : ItbFault(pc) { }$/;"	f	class:AlphaISA::ItbAcvFault
ItbAcvFault	./arch/alpha/faults.hh	/^class ItbAcvFault : public ItbFault$/;"	c	namespace:AlphaISA
ItbFault	./arch/alpha/faults.hh	/^    ItbFault(Addr _pc) : pc(_pc) { }$/;"	f	class:AlphaISA::ItbFault
ItbFault	./arch/alpha/faults.hh	/^class ItbFault : public AlphaFault$/;"	c	namespace:AlphaISA
ItbPageFault	./arch/alpha/faults.hh	/^    ItbPageFault(Addr pc) : ItbFault(pc) { }$/;"	f	class:AlphaISA::ItbPageFault
ItbPageFault	./arch/alpha/faults.hh	/^class ItbPageFault : public ItbFault$/;"	c	namespace:AlphaISA
Iterator	./mem/cache/mshr.hh	/^    typedef List::iterator Iterator;$/;"	t	class:MSHR
ItlbWait	./cpu/o3/fetch.hh	/^        ItlbWait,$/;"	e	enum:DefaultFetch::ThreadStatus
JIntABusyAddr	./dev/sparc/iob.hh	/^const Addr JIntABusyAddr   = 0x0B00;$/;"	v
JIntBusyAddr	./dev/sparc/iob.hh	/^const Addr JIntBusyAddr    = 0x0900;$/;"	v
JIntBusyMask	./dev/sparc/iob.hh	/^const uint64_t JIntBusyMask = 0x0003F;$/;"	v
JIntBusySize	./dev/sparc/iob.hh	/^const Addr JIntBusySize    = 0x0100;$/;"	v
JIntData0Addr	./dev/sparc/iob.hh	/^const Addr JIntData0Addr   = 0x0400;$/;"	v
JIntData1Addr	./dev/sparc/iob.hh	/^const Addr JIntData1Addr   = 0x0500;$/;"	v
JIntDataA0Addr	./dev/sparc/iob.hh	/^const Addr JIntDataA0Addr  = 0x0600;$/;"	v
JIntDataA1Addr	./dev/sparc/iob.hh	/^const Addr JIntDataA1Addr  = 0x0700;$/;"	v
JIntVecAddr	./dev/sparc/iob.hh	/^const Addr JIntVecAddr      = 0x0A00;$/;"	v
JIntVecMask	./dev/sparc/iob.hh	/^const uint64_t JIntVecMask  = 0x0003F;$/;"	v
JazelleBit	./arch/arm/types.hh	/^            JazelleBit = (1 << 1),$/;"	e	enum:ArmISA::PCState::FlagBits
Job	./python/m5/util/jobfile.py	/^class Job(Data):$/;"	c
JobFile	./python/m5/util/jobfile.py	/^def JobFile(jobfile):$/;"	f
K0Seg2Phys	./arch/alpha/utility.hh	/^inline Addr K0Seg2Phys(Addr addr) { return addr & ~K0SegBase; }$/;"	f	namespace:AlphaISA
K0SegBase	./arch/alpha/isa_traits.hh	/^const Addr K0SegBase = ULL(0xfffffc0000000000);$/;"	m	namespace:AlphaISA
K0SegEnd	./arch/alpha/isa_traits.hh	/^const Addr K0SegEnd = ULL(0xfffffdffffffffff);$/;"	m	namespace:AlphaISA
K1SegBase	./arch/alpha/isa_traits.hh	/^const Addr K1SegBase = ULL(0xfffffe0000000000);$/;"	m	namespace:AlphaISA
K1SegEnd	./arch/alpha/isa_traits.hh	/^const Addr K1SegEnd = ULL(0xffffffffffffffff);$/;"	m	namespace:AlphaISA
KERN_NOT_IN_SET	./kern/tru64/tru64.hh	/^        KERN_NOT_IN_SET = 12$/;"	e	enum:Tru64::__anon105
KERN_NOT_RECEIVER	./kern/tru64/tru64.hh	/^        KERN_NOT_RECEIVER = 7,$/;"	e	enum:Tru64::__anon105
KSSegBase	./arch/mips/isa_traits.hh	/^const Addr KSSegBase = ULL(0xC0000000);$/;"	m	namespace:MipsISA
KSSegEnd	./arch/mips/isa_traits.hh	/^const Addr KSSegEnd = ULL(0xDFFFFFFF);$/;"	m	namespace:MipsISA
KSeg0Base	./arch/mips/isa_traits.hh	/^const Addr KSeg0Base =  ULL(0x80000000);$/;"	m	namespace:MipsISA
KSeg0End	./arch/mips/isa_traits.hh	/^const Addr KSeg0End = ULL(0x9FFFFFFF);$/;"	m	namespace:MipsISA
KSeg0Mask	./arch/mips/isa_traits.hh	/^const Addr KSeg0Mask = ULL(0x1FFFFFFF);$/;"	m	namespace:MipsISA
KSeg1Base	./arch/mips/isa_traits.hh	/^const Addr KSeg1Base = ULL(0xA0000000);$/;"	m	namespace:MipsISA
KSeg1End	./arch/mips/isa_traits.hh	/^const Addr KSeg1End = ULL(0xBFFFFFFF);$/;"	m	namespace:MipsISA
KSeg1Mask	./arch/mips/isa_traits.hh	/^const Addr KSeg1Mask = ULL(0x1FFFFFFF);$/;"	m	namespace:MipsISA
KSeg3Base	./arch/mips/isa_traits.hh	/^const Addr KSeg3Base = ULL(0xE0000000);$/;"	m	namespace:MipsISA
KSeg3End	./arch/mips/isa_traits.hh	/^const Addr KSeg3End = ULL(0xFFFFFFFF);$/;"	m	namespace:MipsISA
KVMCpuPort	./cpu/kvm/base.hh	/^        KVMCpuPort(const std::string &_name, BaseKvmCPU *_cpu)$/;"	f	class:BaseKvmCPU::KVMCpuPort
KVMCpuPort	./cpu/kvm/base.hh	/^    class KVMCpuPort : public MasterPort$/;"	c	class:BaseKvmCPU
KVM_KICK_SIGNAL	./cpu/kvm/base.hh	56;"	d
Kernel	./arch/alpha/kernel_stats.cc	/^namespace Kernel {$/;"	n	namespace:AlphaISA	file:
Kernel	./arch/alpha/kernel_stats.hh	/^namespace Kernel {$/;"	n	namespace:AlphaISA
Kernel	./arch/arm/kernel_stats.hh	/^namespace Kernel {$/;"	n	namespace:ArmISA
Kernel	./arch/mips/kernel_stats.hh	/^namespace Kernel {$/;"	n	namespace:MipsISA
Kernel	./arch/power/kernel_stats.hh	/^namespace Kernel {$/;"	n	namespace:PowerISA
Kernel	./arch/sparc/kernel_stats.hh	/^namespace Kernel {$/;"	n	namespace:SparcISA
Kernel	./arch/x86/kernel_stats.hh	/^namespace Kernel {$/;"	n	namespace:X86ISA
Kernel	./cpu/checker/thread_context.hh	/^    namespace Kernel {$/;"	n	namespace:TheISA
Kernel	./cpu/o3/thread_context.hh	/^namespace Kernel {$/;"	n
Kernel	./cpu/simple_thread.hh	/^    namespace Kernel {$/;"	n	namespace:TheISA
Kernel	./cpu/thread_context.hh	/^    namespace Kernel {$/;"	n	namespace:TheISA
Kernel	./cpu/thread_state.hh	/^    namespace Kernel {$/;"	n	namespace:TheISA
Kernel	./kern/kernel_stats.cc	/^namespace Kernel {$/;"	n	file:
Kernel	./kern/kernel_stats.hh	/^namespace Kernel {$/;"	n
KernelReg0	./arch/mips/registers.hh	/^const int KernelReg0 = 26;$/;"	m	namespace:MipsISA
KernelReg1	./arch/mips/registers.hh	/^const int KernelReg1 = 27;$/;"	m	namespace:MipsISA
KernelStart	./arch/alpha/linux/system.hh	/^    Addr KernelStart; \/\/ Lookup the symbol swapper_pg_dir$/;"	m	class:LinuxAlphaSystem
KernelStart	./arch/mips/linux/system.hh	/^    Addr KernelStart; \/\/ Lookup the symbol swapper_pg_dir$/;"	m	class:LinuxMipsSystem
KeyEventMessage	./base/vnc/vncinput.hh	/^    struct KeyEventMessage {$/;"	s	class:VncInput
KeyToMakeOnly	./dev/x86/i8042.hh	/^        KeyToMakeOnly = 0xFD,$/;"	e	enum:X86ISA::PS2Keyboard::Command
KeyToMakeRelease	./dev/x86/i8042.hh	/^        KeyToMakeRelease = 0xFC,$/;"	e	enum:X86ISA::PS2Keyboard::Command
KeyToTypematic	./dev/x86/i8042.hh	/^        KeyToTypematic = 0xFB,$/;"	e	enum:X86ISA::PS2Keyboard::Command
KeyboardId	./dev/ps2.hh	/^    KeyboardId      = 0xab,$/;"	e	enum:Ps2::__anon4
Kvm	./cpu/kvm/vm.cc	/^Kvm::Kvm()$/;"	f	class:Kvm
Kvm	./cpu/kvm/vm.hh	/^class Kvm$/;"	c
KvmCoreMiscRegInfo	./arch/arm/kvm/arm_cpu.hh	/^    struct KvmCoreMiscRegInfo {$/;"	s	class:ArmKvmCPU
KvmDevice	./cpu/kvm/device.cc	/^KvmDevice::KvmDevice(int _fd)$/;"	f	class:KvmDevice
KvmDevice	./cpu/kvm/device.hh	/^class KvmDevice$/;"	c
KvmFPReg	./arch/arm/kvm/armv8_cpu.cc	/^union KvmFPReg {$/;"	u	file:
KvmGic	./arch/arm/kvm/KvmGic.py	/^class KvmGic(BaseGic):$/;"	c
KvmGic	./arch/arm/kvm/gic.cc	/^KvmGic::KvmGic(const KvmGicParams *p)$/;"	f	class:KvmGic
KvmGic	./arch/arm/kvm/gic.hh	/^class KvmGic : public BaseGic$/;"	c
KvmIntRegInfo	./arch/arm/kvm/arm_cpu.hh	/^    struct KvmIntRegInfo {$/;"	s	class:ArmKvmCPU
KvmMSRVector	./cpu/kvm/x86_cpu.hh	/^    typedef std::vector<struct kvm_msr_entry> KvmMSRVector;$/;"	t	class:X86KvmCPU
KvmVM	./cpu/kvm/KvmVM.py	/^class KvmVM(SimObject):$/;"	c
KvmVM	./cpu/kvm/vm.cc	/^KvmVM::KvmVM(KvmVMParams *params)$/;"	f	class:KvmVM
KvmVM	./cpu/kvm/vm.hh	/^class KvmVM : public SimObject$/;"	c
L	./arch/x86/regs/int.hh	/^        Bitfield<7, 0> L;$/;"	m	namespace:X86ISA
L0	./arch/arm/pagetable.hh	/^    L0 = 0,  \/\/ AArch64 only$/;"	e	enum:ArmISA::LookupLevel
L1	./arch/arm/pagetable.hh	/^    L1,$/;"	e	enum:ArmISA::LookupLevel
L1CacheAndTLB	./arch/x86/cpuid.cc	/^        L1CacheAndTLB,$/;"	e	enum:X86ISA::ExtendedCpuidFunctions	file:
L1Descriptor	./arch/arm/table_walker.hh	/^        L1Descriptor() : data(0), _dirty(false)$/;"	f	class:ArmISA::TableWalker::L1Descriptor
L1Descriptor	./arch/arm/table_walker.hh	/^    class L1Descriptor : public DescriptorBase {$/;"	c	class:ArmISA::TableWalker
L2	./arch/arm/pagetable.hh	/^    L2,$/;"	e	enum:ArmISA::LookupLevel
L2Descriptor	./arch/arm/table_walker.hh	/^        L2Descriptor() : data(0), l1Parent(nullptr), _dirty(false)$/;"	f	class:ArmISA::TableWalker::L2Descriptor
L2Descriptor	./arch/arm/table_walker.hh	/^        L2Descriptor(L1Descriptor &parent) : data(0), l1Parent(&parent),$/;"	f	class:ArmISA::TableWalker::L2Descriptor
L2Descriptor	./arch/arm/table_walker.hh	/^    class L2Descriptor : public DescriptorBase {$/;"	c	class:ArmISA::TableWalker
L2L3CacheAndL2TLB	./arch/x86/cpuid.cc	/^        L2L3CacheAndL2TLB,$/;"	e	enum:X86ISA::ExtendedCpuidFunctions	file:
L2XBar	./mem/XBar.py	/^class L2XBar(CoherentXBar):$/;"	c
L3	./arch/arm/pagetable.hh	/^    L3,$/;"	e	enum:ArmISA::LookupLevel
LAST	./dev/net/ns_gige_reg.h	/^    LAST =              0xf8,$/;"	e	enum:DeviceRegisterAddress
LCR	./dev/uart8250.hh	/^    uint8_t IER, DLAB, LCR, MCR;$/;"	m	class:Uart8250
LCYL_OFFSET	./dev/storage/ide_disk.hh	103;"	d
LDDFMemAddressNotAligned	./arch/sparc/faults.hh	/^class LDDFMemAddressNotAligned : public SparcFault<LDDFMemAddressNotAligned> {};$/;"	c	namespace:SparcISA
LDQFMemAddressNotAligned	./arch/sparc/faults.hh	/^class LDQFMemAddressNotAligned : public SparcFault<LDQFMemAddressNotAligned> {};$/;"	c	namespace:SparcISA
LEDWrite	./dev/x86/i8042.hh	/^        LEDWrite = 0xED,$/;"	e	enum:X86ISA::PS2Keyboard::Command
LFST	./cpu/o3/store_set.hh	/^    std::vector<InstSeqNum> LFST;$/;"	m	class:StoreSet
LFSTSize	./cpu/o3/O3CPU.py	/^    LFSTSize = Param.Unsigned(1024, "Last fetched store table size")$/;"	v	class:DerivO3CPU
LFSTSize	./cpu/o3/store_set.hh	/^    int LFSTSize;$/;"	m	class:StoreSet
LINER	./base/loader/coff_sym.h	/^typedef coff_int LINER, *pLINER;$/;"	t
LITTLE_ENDIAN	./dev/storage/ide_atareg.h	53;"	d
LITTLE_ENDIAN	./dev/storage/ide_atareg.h	56;"	d
LL	./base/types.hh	52;"	d
LO	./arch/x86/decoder_tables.cc	/^    const uint8_t LO = Lock;$/;"	m	namespace:X86ISA	file:
LONG_TO_DOUBLE	./arch/arm/types.hh	/^        LONG_TO_DOUBLE,$/;"	e	enum:ArmISA::ConvertType
LONG_TO_DOUBLE	./arch/mips/types.hh	/^    LONG_TO_DOUBLE,$/;"	e	enum:MipsISA::ConvertType
LONG_TO_PS	./arch/arm/types.hh	/^        LONG_TO_PS,$/;"	e	enum:ArmISA::ConvertType
LONG_TO_PS	./arch/mips/types.hh	/^    LONG_TO_PS,$/;"	e	enum:MipsISA::ConvertType
LONG_TO_SINGLE	./arch/arm/types.hh	/^        LONG_TO_SINGLE,$/;"	e	enum:ArmISA::ConvertType
LONG_TO_SINGLE	./arch/mips/types.hh	/^    LONG_TO_SINGLE,$/;"	e	enum:MipsISA::ConvertType
LONG_TO_WORD	./arch/arm/types.hh	/^        LONG_TO_WORD,$/;"	e	enum:ArmISA::ConvertType
LONG_TO_WORD	./arch/mips/types.hh	/^    LONG_TO_WORD,$/;"	e	enum:MipsISA::ConvertType
LPDDR2_S4_1066_x32	./mem/DRAMCtrl.py	/^class LPDDR2_S4_1066_x32(DRAMCtrl):$/;"	c
LPDDR3_1600_x32	./mem/DRAMCtrl.py	/^class LPDDR3_1600_x32(DRAMCtrl):$/;"	c
LQ	./cpu/o3/rename.hh	/^        LQ,$/;"	e	enum:DefaultRename::FullSource
LQEntries	./cpu/o3/O3CPU.py	/^    LQEntries = Param.Unsigned(32, "Number of load queue entries")$/;"	v	class:DerivO3CPU
LQEntries	./cpu/o3/lsq.hh	/^    unsigned LQEntries;$/;"	m	class:LSQ
LQEntries	./cpu/o3/lsq_unit.hh	/^    unsigned LQEntries;$/;"	m	class:LSQUnit
LR	./dev/arm/vgic.hh	/^        std::array<ListReg, NUM_LR> LR;$/;"	m	struct:VGic::vcpuIntData
LRENPIE	./dev/arm/vgic.hh	/^    Bitfield<2> LRENPIE;$/;"	m	class:VGic
LRU	./mem/cache/tags/Tags.py	/^class LRU(BaseSetAssoc):$/;"	c
LRU	./mem/cache/tags/lru.cc	/^LRU::LRU(const Params *p)$/;"	f	class:LRU
LRU	./mem/cache/tags/lru.hh	/^class LRU : public BaseSetAssoc$/;"	c
LRUPolicy	./mem/ruby/structures/LRUPolicy.cc	/^LRUPolicy::LRUPolicy(const Params * p)$/;"	f	class:LRUPolicy
LRUPolicy	./mem/ruby/structures/LRUPolicy.hh	/^class LRUPolicy : public AbstractReplacementPolicy$/;"	c
LRUReplacementPolicy	./mem/ruby/structures/LRUReplacementPolicy.py	/^class LRUReplacementPolicy(ReplacementPolicy):$/;"	c
LR_ACTIVE	./dev/arm/vgic.hh	/^    static const uint32_t LR_ACTIVE     = 2;$/;"	m	class:VGic
LR_PENDING	./dev/arm/vgic.hh	/^    static const uint32_t LR_PENDING    = 1;$/;"	m	class:VGic
LSB	./dev/intel_8254_timer.hh	/^        enum {LSB, MSB};$/;"	e	enum:Intel8254Timer::Counter::__anon25
LSB_CountingBloomFilter	./mem/ruby/filters/LSB_CountingBloomFilter.cc	/^LSB_CountingBloomFilter::LSB_CountingBloomFilter(int head, int tail)$/;"	f	class:LSB_CountingBloomFilter
LSB_CountingBloomFilter	./mem/ruby/filters/LSB_CountingBloomFilter.hh	/^class LSB_CountingBloomFilter : public AbstractBloomFilter$/;"	c
LSL	./arch/arm/types.hh	/^        LSL = 0,$/;"	e	enum:ArmISA::ArmShiftType
LSQ	./cpu/minor/lsq.cc	/^LSQ::LSQ(std::string name_, std::string dcache_port_name_,$/;"	f	class:Minor::LSQ
LSQ	./cpu/minor/lsq.hh	/^class LSQ : public Named$/;"	c	namespace:Minor
LSQ	./cpu/o3/cpu_policy.hh	/^    typedef ::LSQ<Impl> LSQ;$/;"	t	struct:SimpleCPUPolicy
LSQ	./cpu/o3/fetch.hh	/^        LSQ$/;"	e	enum:DefaultFetch::FetchPriority
LSQ	./cpu/o3/iew.hh	/^    typedef typename CPUPol::LSQ LSQ;$/;"	t	class:DefaultIEW
LSQ	./cpu/o3/lsq.hh	/^class LSQ {$/;"	c
LSQ	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::LSQ(O3CPU *cpu_ptr, IEW *iew_ptr, DerivO3CPUParams *params)$/;"	f	class:LSQ
LSQ	./cpu/o3/lsq_unit.hh	/^    typedef typename Impl::CPUPol::LSQ LSQ;$/;"	t	class:LSQUnit
LSQCheckLoads	./cpu/o3/O3CPU.py	/^    LSQCheckLoads = Param.Bool(True,$/;"	v	class:DerivO3CPU
LSQDepCheckShift	./cpu/o3/O3CPU.py	/^    LSQDepCheckShift = Param.Unsigned(4, "Number of places to shift addr before check")$/;"	v	class:DerivO3CPU
LSQPolicy	./cpu/o3/lsq.hh	/^    enum LSQPolicy {$/;"	g	class:LSQ
LSQQueue	./cpu/minor/lsq.hh	/^        LSQQueue;$/;"	t	class:Minor::LSQ
LSQRequest	./cpu/minor/lsq.cc	/^LSQ::LSQRequest::LSQRequest(LSQ &port_, MinorDynInstPtr inst_, bool isLoad_,$/;"	f	class:Minor::LSQ::LSQRequest
LSQRequest	./cpu/minor/lsq.hh	/^    class LSQRequest :$/;"	c	class:Minor::LSQ
LSQRequestPtr	./cpu/minor/lsq.hh	/^    typedef LSQRequest *LSQRequestPtr;$/;"	t	class:Minor::LSQ
LSQRequestState	./cpu/minor/lsq.hh	/^        enum LSQRequestState$/;"	g	class:Minor::LSQ::LSQRequest
LSQSenderState	./cpu/o3/lsq_unit.hh	/^        LSQSenderState()$/;"	f	class:LSQUnit::LSQSenderState
LSQSenderState	./cpu/o3/lsq_unit.hh	/^    class LSQSenderState : public Packet::SenderState$/;"	c	class:LSQUnit
LSQUnit	./cpu/o3/cpu_policy.hh	/^    typedef ::LSQUnit<Impl> LSQUnit;$/;"	t	struct:SimpleCPUPolicy
LSQUnit	./cpu/o3/lsq.hh	/^    typedef typename Impl::CPUPol::LSQUnit LSQUnit;$/;"	t	class:LSQ
LSQUnit	./cpu/o3/lsq_unit.hh	/^class LSQUnit {$/;"	c
LSQUnit	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::LSQUnit()$/;"	f	class:LSQUnit
LSR	./arch/arm/types.hh	/^        LSR,$/;"	e	enum:ArmISA::ArmShiftType
LT_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum flit_stage {I_, VA_, SA_, ST_, LT_, NUM_FLIT_STAGE_};$/;"	e	enum:flit_stage
LUN	./dev/arm/ufs_device.hh	/^        uint32_t LUN;$/;"	m	struct:UFSHostDevice::writeToDiskBurst
LUN	./dev/arm/ufs_device.hh	/^        uint8_t LUN;$/;"	m	struct:UFSHostDevice::SCSIReply
LUNInfo	./dev/arm/ufs_device.hh	/^    struct LUNInfo {$/;"	s	class:UFSHostDevice
LUNSignal	./dev/arm/ufs_device.cc	/^UFSHostDevice::LUNSignal()$/;"	f	class:UFSHostDevice
Label	./arch/micro_asm.py	/^class Label(object):$/;"	c
LabelStack	./mem/packet.hh	/^        typedef std::list<LabelStackEntry> LabelStack;$/;"	t	class:Packet::PrintReqState
LabelStackEntry	./mem/packet.cc	/^LabelStackEntry::LabelStackEntry(const string &_label, string *_prefix)$/;"	f	class:Packet::PrintReqState::LabelStackEntry
LabelStackEntry	./mem/packet.hh	/^        struct LabelStackEntry$/;"	s	class:Packet::PrintReqState
LargestRead	./arch/alpha/types.hh	/^typedef uint64_t LargestRead;$/;"	t	namespace:AlphaISA
LargestRead	./arch/arm/types.hh	/^    typedef uint64_t LargestRead;$/;"	t	namespace:ArmISA
LargestRead	./arch/mips/types.hh	/^typedef uint64_t LargestRead;$/;"	t	namespace:MipsISA
LargestRead	./arch/sparc/types.hh	/^typedef Twin64_t LargestRead;$/;"	t	namespace:SparcISA
LargestRead	./arch/x86/registers.hh	/^typedef uint64_t LargestRead;$/;"	t	namespace:X86ISA
Latch	./cpu/minor/buffers.hh	/^    Latch(const std::string &name,$/;"	f	class:Minor::Latch
Latch	./cpu/minor/buffers.hh	/^class Latch$/;"	c	namespace:Minor
LatchCommand	./dev/intel_8254_timer.hh	/^        LatchCommand,$/;"	e	enum:Intel8254Timer::ReadWriteVal
Latency	./python/m5/params.py	/^class Latency(TickParamValue):$/;"	c
LatencyTimer	./dev/pci/PciDevice.py	/^    LatencyTimer = Param.UInt8(0, "PCI Latency Timer")$/;"	v	class:PciDevice
Layer	./mem/xbar.cc	/^BaseXBar::Layer<SrcType,DstType>::Layer(DstType& _port, BaseXBar& _xbar,$/;"	f	class:BaseXBar::Layer
Layer	./mem/xbar.cc	/^template class BaseXBar::Layer<MasterPort,SlavePort>;$/;"	m	class:BaseXBar	typeref:class:BaseXBar::	file:
Layer	./mem/xbar.cc	/^template class BaseXBar::Layer<SlavePort,MasterPort>;$/;"	m	class:BaseXBar	typeref:class:BaseXBar::	file:
Layer	./mem/xbar.hh	/^    class Layer : public Drainable$/;"	c	class:BaseXBar
LcdControl	./dev/arm/pl111.hh	/^    static const int LcdControl       = 0x018;$/;"	m	class:Pl111
LcdIcr	./dev/arm/pl111.hh	/^    static const int LcdIcr           = 0x028;$/;"	m	class:Pl111
LcdImsc	./dev/arm/pl111.hh	/^    static const int LcdImsc          = 0x01C;$/;"	m	class:Pl111
LcdLpBase	./dev/arm/pl111.hh	/^    static const int LcdLpBase        = 0x014;$/;"	m	class:Pl111
LcdLpCurr	./dev/arm/pl111.hh	/^    static const int LcdLpCurr        = 0x030;$/;"	m	class:Pl111
LcdMaxHeight	./dev/arm/pl111.hh	/^    static const int LcdMaxHeight     = 768;  \/\/ lines per panel$/;"	m	class:Pl111
LcdMaxWidth	./dev/arm/pl111.hh	/^    static const int LcdMaxWidth      = 1024; \/\/ pixels per line$/;"	m	class:Pl111
LcdMis	./dev/arm/pl111.hh	/^    static const int LcdMis           = 0x024;$/;"	m	class:Pl111
LcdMode	./dev/arm/pl111.hh	/^    enum LcdMode {$/;"	g	class:Pl111
LcdPalette	./dev/arm/pl111.hh	/^    static const int LcdPalette       = 0x200;$/;"	m	class:Pl111
LcdPaletteSize	./dev/arm/pl111.hh	/^    static const int LcdPaletteSize   = 128;$/;"	m	class:Pl111
LcdRis	./dev/arm/pl111.hh	/^    static const int LcdRis           = 0x020;$/;"	m	class:Pl111
LcdTiming0	./dev/arm/pl111.hh	/^    static const int LcdTiming0       = 0x000;$/;"	m	class:Pl111
LcdTiming1	./dev/arm/pl111.hh	/^    static const int LcdTiming1       = 0x004;$/;"	m	class:Pl111
LcdTiming2	./dev/arm/pl111.hh	/^    static const int LcdTiming2       = 0x008;$/;"	m	class:Pl111
LcdTiming3	./dev/arm/pl111.hh	/^    static const int LcdTiming3       = 0x00C;$/;"	m	class:Pl111
LcdUpBase	./dev/arm/pl111.hh	/^    static const int LcdUpBase        = 0x010;$/;"	m	class:Pl111
LcdUpCurr	./dev/arm/pl111.hh	/^    static const int LcdUpCurr        = 0x02C;$/;"	m	class:Pl111
LdStOp	./arch/x86/insts/microldstop.hh	/^        LdStOp(ExtMachInst _machInst,$/;"	f	class:X86ISA::LdStOp
LdStOp	./arch/x86/insts/microldstop.hh	/^    class LdStOp : public X86MicroopBase$/;"	c	namespace:X86ISA
Led	./dev/arm/rv_ctrl.hh	/^        Led        = 0x08,$/;"	e	enum:RealViewCtrl::__anon19
LegacyIOBase	./dev/pci/PciDevice.py	/^    LegacyIOBase = Param.Addr(0x0, "Base Address for Legacy IO")$/;"	v	class:PciDevice
LegacyMode	./arch/x86/types.hh	/^        LegacyMode$/;"	e	enum:X86ISA::X86Mode
LineTracker	./arch/isa_parser.py	/^class LineTracker(object):$/;"	c
LinearGen	./cpu/testers/traffic_gen/generators.hh	/^    LinearGen(const std::string& _name, MasterID master_id, Tick _duration,$/;"	f	class:LinearGen
LinearGen	./cpu/testers/traffic_gen/generators.hh	/^class LinearGen : public BaseGen$/;"	c
Link	./dev/net/dist_etherlink.hh	/^        Link(const std::string &name, DistEtherLink *p,$/;"	f	class:DistEtherLink::Link
Link	./dev/net/dist_etherlink.hh	/^    class Link : public Serializable$/;"	c	class:DistEtherLink
Link	./dev/net/etherlink.cc	/^EtherLink::Link::Link(const string &name, EtherLink *p, int num,$/;"	f	class:EtherLink::Link
Link	./dev/net/etherlink.hh	/^    class Link$/;"	c	class:EtherLink
LinkEntry	./mem/ruby/network/Topology.hh	/^struct LinkEntry $/;"	s
LinkID	./mem/ruby/common/TypeDefines.hh	/^typedef unsigned int LinkID;$/;"	t
LinkMap	./base/cp_annotate.hh	/^    typedef std::map<int, int> LinkMap;$/;"	t	class:CPA
LinkMap	./mem/ruby/network/Topology.hh	/^typedef std::map<std::pair<SwitchID, SwitchID>, LinkEntry> LinkMap;$/;"	t
LinkOrder	./mem/ruby/network/simple/PerfectSwitch.hh	/^struct LinkOrder$/;"	s
Linux	./arch/generic/linux/threadinfo.hh	/^namespace Linux {$/;"	n
Linux	./arch/mips/linux/hwrpb.hh	/^namespace Linux {$/;"	n
Linux	./arch/mips/linux/thread_info.hh	/^namespace Linux {$/;"	n
Linux	./base/loader/object_file.hh	/^        Linux,$/;"	e	enum:ObjectFile::OpSys
Linux	./kern/linux/events.cc	/^namespace Linux {$/;"	n	file:
Linux	./kern/linux/events.hh	/^namespace Linux {$/;"	n
Linux	./kern/linux/linux.hh	/^class Linux : public OperatingSystem$/;"	c
LinuxAlphaSystem	./arch/alpha/AlphaSystem.py	/^class LinuxAlphaSystem(AlphaSystem):$/;"	c
LinuxAlphaSystem	./arch/alpha/linux/system.cc	/^LinuxAlphaSystem::LinuxAlphaSystem(Params *p)$/;"	f	class:LinuxAlphaSystem
LinuxAlphaSystem	./arch/alpha/linux/system.hh	/^class LinuxAlphaSystem : public AlphaSystem$/;"	c
LinuxArmOABI	./base/loader/object_file.hh	/^        LinuxArmOABI,$/;"	e	enum:ObjectFile::OpSys
LinuxArmSystem	./arch/arm/ArmSystem.py	/^class LinuxArmSystem(GenericArmSystem):$/;"	c
LinuxArmSystem	./arch/arm/linux/system.cc	/^LinuxArmSystem::LinuxArmSystem(Params *p)$/;"	f	class:LinuxArmSystem
LinuxArmSystem	./arch/arm/linux/system.hh	/^class LinuxArmSystem : public GenericArmSystem$/;"	c
LinuxMipsSystem	./arch/mips/MipsSystem.py	/^class LinuxMipsSystem(MipsSystem):$/;"	c
LinuxMipsSystem	./arch/mips/linux/system.cc	/^LinuxMipsSystem::LinuxMipsSystem(Params *p)$/;"	f	class:LinuxMipsSystem
LinuxMipsSystem	./arch/mips/linux/system.hh	/^class LinuxMipsSystem : public MipsSystem$/;"	c
LinuxX86System	./arch/x86/X86System.py	/^class LinuxX86System(X86System):$/;"	c
LinuxX86System	./arch/x86/linux/system.cc	/^LinuxX86System::LinuxX86System(Params *p)$/;"	f	class:LinuxX86System
LinuxX86System	./arch/x86/linux/system.hh	/^class LinuxX86System : public X86System$/;"	c
List	./mem/cache/mshr.hh	/^    typedef std::list<MSHR *> List;$/;"	t	class:MSHR
ListIt	./cpu/base_dyn_inst.hh	/^    typedef typename std::list<DynInstPtr>::iterator ListIt;$/;"	t	class:BaseDynInst
ListIt	./cpu/o3/cpu.hh	/^    typedef typename std::list<DynInstPtr>::iterator ListIt;$/;"	t	class:FullO3CPU
ListIt	./cpu/o3/inst_queue.hh	/^    typedef typename std::list<DynInstPtr>::iterator ListIt;$/;"	t	class:InstructionQueue
ListIt	./cpu/o3/mem_dep_unit.hh	/^    typedef typename std::list<DynInstPtr>::iterator ListIt;$/;"	t	class:MemDepUnit
ListOrderEntry	./cpu/o3/inst_queue.hh	/^    struct ListOrderEntry {$/;"	s	class:InstructionQueue
ListOrderIt	./cpu/o3/inst_queue.hh	/^    typedef typename std::list<ListOrderEntry>::iterator ListOrderIt;$/;"	t	class:InstructionQueue
ListenEvent	./base/vnc/vncserver.cc	/^VncServer::ListenEvent::ListenEvent(VncServer *vs, int fd, int e)$/;"	f	class:VncServer::ListenEvent
ListenEvent	./base/vnc/vncserver.hh	/^    class ListenEvent: public PollEvent$/;"	c	class:VncServer
ListenEvent	./dev/terminal.cc	/^Terminal::ListenEvent::ListenEvent(Terminal *t, int fd, int e)$/;"	f	class:Terminal::ListenEvent
ListenEvent	./dev/terminal.hh	/^    class ListenEvent : public PollEvent$/;"	c	class:Terminal
ListenSocket	./base/socket.cc	/^ListenSocket::ListenSocket()$/;"	f	class:ListenSocket
ListenSocket	./base/socket.hh	/^class ListenSocket$/;"	c
LiteralExprAST	./mem/slicc/ast/LiteralExprAST.py	/^class LiteralExprAST(ExprAST):$/;"	c
LittleEndianByteOrder	./base/types.hh	/^    LittleEndianByteOrder$/;"	e	enum:ByteOrder
LittleEndianGuest	./arch/alpha/isa_traits.hh	/^namespace LittleEndianGuest {}$/;"	n
LittleEndianGuest	./arch/arm/isa_traits.hh	/^namespace LittleEndianGuest {}$/;"	n
LittleEndianGuest	./arch/mips/isa_traits.hh	/^namespace LittleEndianGuest {}$/;"	n
LittleEndianGuest	./arch/null/isa_traits.hh	/^namespace LittleEndianGuest {}$/;"	n
LittleEndianGuest	./arch/x86/isa_traits.hh	/^namespace LittleEndianGuest {}$/;"	n
LittleEndianGuest	./sim/byteswap.hh	/^namespace LittleEndianGuest$/;"	n
LiveList	./unittest/refcnttest.cc	/^typedef list<TestRC *> LiveList;$/;"	t	namespace:__anon3	file:
LiveProcess	./sim/Process.py	/^class LiveProcess(Process):$/;"	c
LiveProcess	./sim/process.cc	/^LiveProcess::LiveProcess(LiveProcessParams *params, ObjectFile *_objFile)$/;"	f	class:LiveProcess
LiveProcess	./sim/process.hh	/^class LiveProcess : public Process$/;"	c
LoadFromNfo	./arch/sparc/tlb.hh	/^        LoadFromNfo = 0x10,$/;"	e	enum:SparcISA::TLB::FaultTypes
LoadLockedReq	./mem/packet.hh	/^        LoadLockedReq,$/;"	e	enum:MemCmd::Command
LoadPassword	./dev/x86/i8042.hh	/^        LoadPassword = 0xA5,$/;"	e	enum:X86ISA::I8042::Command
LoadReg	./dev/arm/rtc_pl031.hh	/^        LoadReg    = 0x08,$/;"	e	enum:PL031::__anon24
LoadReg	./dev/arm/timer_sp804.hh	/^            LoadReg    = 0x00,$/;"	e	enum:Sp804::Timer::__anon21
LocalBP	./cpu/pred/2bit_local.cc	/^LocalBP::LocalBP(const LocalBPParams *params)$/;"	f	class:LocalBP
LocalBP	./cpu/pred/2bit_local.hh	/^class LocalBP : public BPredUnit$/;"	c
LocalBP	./cpu/pred/BranchPredictor.py	/^class LocalBP(BranchPredictor):$/;"	c
LocalIface	./dev/net/dist_etherlink.cc	/^DistEtherLink::LocalIface::LocalIface(const std::string &name,$/;"	f	class:DistEtherLink::LocalIface
LocalIface	./dev/net/dist_etherlink.hh	/^    class LocalIface : public EtherInt$/;"	c	class:DistEtherLink
LocalIntAssignment	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::LocalIntAssignment::LocalIntAssignment(Params * p) :$/;"	f	class:X86ISA::IntelMP::LocalIntAssignment
LocalIntAssignment	./arch/x86/bios/intelmp.hh	/^class LocalIntAssignment : public IntAssignment$/;"	c	namespace:X86ISA::IntelMP
LocalSimLoopExitEvent	./sim/sim_events.cc	/^LocalSimLoopExitEvent::LocalSimLoopExitEvent(const std::string &_cause, int c,$/;"	f	class:LocalSimLoopExitEvent
LocalSimLoopExitEvent	./sim/sim_events.hh	/^class LocalSimLoopExitEvent : public Event$/;"	c
LocalVariableAST	./mem/slicc/ast/LocalVariableAST.py	/^class LocalVariableAST(StatementAST):$/;"	c
Location	./mem/slicc/util.py	/^class Location(object):$/;"	c
Lock	./arch/x86/types.hh	/^        Lock,$/;"	e	enum:X86ISA::Prefixes
Lock	./dev/arm/rv_ctrl.hh	/^        Lock       = 0x20,$/;"	e	enum:RealViewCtrl::__anon19
Lock	./mem/cache/blk.hh	/^        Lock(const RequestPtr req)$/;"	f	class:CacheBlk::Lock
Lock	./mem/cache/blk.hh	/^    class Lock {$/;"	c	class:CacheBlk
LockedAddr	./mem/abstract_mem.hh	/^    LockedAddr(Addr _addr, int _cid) : addr(_addr), contextId(_cid)$/;"	f	class:LockedAddr
LockedAddr	./mem/abstract_mem.hh	/^    LockedAddr(Request *req) : addr(mask(req->getPaddr())),$/;"	f	class:LockedAddr
LockedAddr	./mem/abstract_mem.hh	/^class LockedAddr {$/;"	c
Logger	./base/trace.hh	/^class Logger$/;"	c	namespace:Trace
LongDescriptor	./arch/arm/table_walker.hh	/^    class LongDescriptor : public DescriptorBase {$/;"	c	class:ArmISA::TableWalker
LongMode	./arch/x86/types.hh	/^        LongMode,$/;"	e	enum:X86ISA::X86Mode
LongModeAddressSize	./arch/x86/cpuid.cc	/^        LongModeAddressSize,$/;"	e	enum:X86ISA::ExtendedCpuidFunctions	file:
LongPD	./arch/x86/pagetable_walker.hh	/^                LongPML4, LongPDP, LongPD, LongPTE,$/;"	e	enum:X86ISA::Walker::WalkerState::State
LongPDP	./arch/x86/pagetable_walker.hh	/^                LongPML4, LongPDP, LongPD, LongPTE,$/;"	e	enum:X86ISA::Walker::WalkerState::State
LongPML4	./arch/x86/pagetable_walker.hh	/^                LongPML4, LongPDP, LongPD, LongPTE,$/;"	e	enum:X86ISA::Walker::WalkerState::State
LongPTE	./arch/x86/pagetable_walker.hh	/^                LongPML4, LongPDP, LongPD, LongPTE,$/;"	e	enum:X86ISA::Walker::WalkerState::State
LookupLevel	./arch/arm/pagetable.hh	/^enum LookupLevel {$/;"	g	namespace:ArmISA
LowestPriority	./arch/x86/intmessage.hh	/^            LowestPriority = 1,$/;"	e	enum:X86ISA::DeliveryMode::IntDeliveryMode
LpaeTran	./arch/arm/faults.hh	/^        LpaeTran,$/;"	e	enum:ArmISA::ArmFault::TranMethod
LsbOnly	./dev/intel_8254_timer.hh	/^        LsbOnly,$/;"	e	enum:Intel8254Timer::ReadWriteVal
LsqEntry	./cpu/base_dyn_inst.hh	/^        LsqEntry,                \/\/\/ Instruction is in the LSQ$/;"	e	enum:BaseDynInst::Status
M5ControlRegister	./dev/net/ns_gige_reg.h	/^enum M5ControlRegister {$/;"	g
M5DebugFault	./arch/generic/debugfaults.hh	/^    M5DebugFault(DebugFunc _func, std::string _message) :$/;"	f	class:GenericISA::M5DebugFault
M5DebugFault	./arch/generic/debugfaults.hh	/^class M5DebugFault : public FaultBase$/;"	c	namespace:GenericISA
M5FatalFault	./arch/generic/debugfaults.hh	/^typedef M5VarArgsFault<M5DebugFault::FatalFunc> M5FatalFault;$/;"	t	namespace:GenericISA
M5PanicFault	./arch/generic/debugfaults.hh	/^typedef M5VarArgsFault<M5DebugFault::PanicFunc> M5PanicFault;$/;"	t	namespace:GenericISA
M5REG	./dev/net/ns_gige_reg.h	/^    M5REG =             0xf8,$/;"	e	enum:DeviceRegisterAddress
M5REG_RESERVED	./dev/net/ns_gige_reg.h	/^     M5REG_RESERVED =   0xfffffffc,$/;"	e	enum:M5ControlRegister
M5REG_RSS	./dev/net/ns_gige_reg.h	/^     M5REG_RSS =        0x00000004,$/;"	e	enum:M5ControlRegister
M5REG_RX_THREAD	./dev/net/ns_gige_reg.h	/^     M5REG_RX_THREAD =  0x00000002,$/;"	e	enum:M5ControlRegister
M5REG_TX_THREAD	./dev/net/ns_gige_reg.h	/^     M5REG_TX_THREAD =  0x00000001$/;"	e	enum:M5ControlRegister
M5VarArgsFault	./arch/generic/debugfaults.hh	/^    M5VarArgsFault(const std::string &format, const Args &...args) :$/;"	f	class:GenericISA::M5VarArgsFault
M5VarArgsFault	./arch/generic/debugfaults.hh	/^class M5VarArgsFault : public M5DebugFault$/;"	c	namespace:GenericISA
M5WarnFault	./arch/generic/debugfaults.hh	/^typedef M5VarArgsFault<M5DebugFault::WarnFunc> M5WarnFault;$/;"	t	namespace:GenericISA
M5WarnOnceFault	./arch/generic/debugfaults.hh	/^typedef M5VarArgsFault<M5DebugFault::WarnOnceFunc> M5WarnOnceFault;$/;"	t	namespace:GenericISA
M5_ATTR_NORETURN	./base/compiler.hh	49;"	d
M5_ATTR_NORETURN	./dev/arm/gpu_nomali.hh	/^    static void gpuPanic(nomali_error_t err, const char *msg) M5_ATTR_NORETURN;$/;"	m	class:NoMaliGpu
M5_ATTR_PACKED	./base/bitmap.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:Bitmap	typeref:struct:Bitmap::BmpPixel32
M5_ATTR_PACKED	./base/bitmap.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:Bitmap	typeref:struct:Bitmap::CompleteV1Header
M5_ATTR_PACKED	./base/bitmap.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:Bitmap	typeref:struct:Bitmap::FileHeader
M5_ATTR_PACKED	./base/bitmap.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:Bitmap	typeref:struct:Bitmap::InfoHeaderV1
M5_ATTR_PACKED	./base/compiler.hh	52;"	d
M5_ATTR_PACKED	./base/vnc/vncinput.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:VncInput	typeref:struct:VncInput::ClientCutTextMessage
M5_ATTR_PACKED	./base/vnc/vncinput.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:VncInput	typeref:struct:VncInput::FrameBufferUpdateReq
M5_ATTR_PACKED	./base/vnc/vncinput.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:VncInput	typeref:struct:VncInput::KeyEventMessage
M5_ATTR_PACKED	./base/vnc/vncinput.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:VncInput	typeref:struct:VncInput::PixelEncodingsMessage
M5_ATTR_PACKED	./base/vnc/vncinput.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:VncInput	typeref:struct:VncInput::PixelFormat
M5_ATTR_PACKED	./base/vnc/vncinput.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:VncInput	typeref:struct:VncInput::PixelFormatMessage
M5_ATTR_PACKED	./base/vnc/vncinput.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:VncInput	typeref:struct:VncInput::PointerEventMessage
M5_ATTR_PACKED	./base/vnc/vncserver.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:VncServer	typeref:struct:VncServer::FrameBufferRect
M5_ATTR_PACKED	./base/vnc/vncserver.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:VncServer	typeref:struct:VncServer::FrameBufferUpdate
M5_ATTR_PACKED	./base/vnc/vncserver.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:VncServer	typeref:struct:VncServer::ServerCutText
M5_ATTR_PACKED	./base/vnc/vncserver.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:VncServer	typeref:struct:VncServer::ServerInitMsg
M5_ATTR_PACKED	./cpu/kvm/x86_cpu.cc	/^} M5_ATTR_PACKED;$/;"	v	typeref:struct:FXSave
M5_ATTR_PACKED	./dev/virtio/base.hh	/^        } M5_ATTR_PACKED;$/;"	m	class:VirtQueue::VirtRing	typeref:struct:VirtQueue::VirtRing::Header
M5_ATTR_PACKED	./dev/virtio/block.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:VirtIOBlock	typeref:struct:VirtIOBlock::BlkRequest
M5_ATTR_PACKED	./dev/virtio/block.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:VirtIOBlock	typeref:struct:VirtIOBlock::Config
M5_ATTR_PACKED	./dev/virtio/console.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:VirtIOConsole	typeref:struct:VirtIOConsole::Config
M5_ATTR_PACKED	./dev/virtio/fs9p.hh	/^    } M5_ATTR_PACKED;$/;"	m	class:VirtIO9PBase	typeref:struct:VirtIO9PBase::Config
M5_ATTR_PACKED	./dev/virtio/fs9p.hh	/^} M5_ATTR_PACKED;$/;"	v	typeref:struct:P9MsgHeader
M5_AT_BASE	./sim/process.hh	/^        M5_AT_BASE = 7,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_CLKTCK	./sim/process.hh	/^        M5_AT_CLKTCK = 17,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_EGID	./sim/process.hh	/^        M5_AT_EGID = 14,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_ENTRY	./sim/process.hh	/^        M5_AT_ENTRY = 9,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_EUID	./sim/process.hh	/^        M5_AT_EUID = 12,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_EXECFD	./sim/process.hh	/^        M5_AT_EXECFD = 2,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_EXECFN	./sim/process.hh	/^        M5_AT_EXECFN = 31,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_FLAGS	./sim/process.hh	/^        M5_AT_FLAGS = 8,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_GID	./sim/process.hh	/^        M5_AT_GID = 13,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_HWCAP	./sim/process.hh	/^        M5_AT_HWCAP = 16,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_IGNORE	./sim/process.hh	/^        M5_AT_IGNORE = 1,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_NOTELF	./sim/process.hh	/^        M5_AT_NOTELF = 10,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_NULL	./sim/process.hh	/^        M5_AT_NULL = 0,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_PAGESZ	./sim/process.hh	/^        M5_AT_PAGESZ = 6,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_PHDR	./sim/process.hh	/^        M5_AT_PHDR = 3,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_PHENT	./sim/process.hh	/^        M5_AT_PHENT = 4,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_PHNUM	./sim/process.hh	/^        M5_AT_PHNUM = 5,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_PLATFORM	./sim/process.hh	/^        M5_AT_PLATFORM = 15,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_RANDOM	./sim/process.hh	/^        M5_AT_RANDOM = 25,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_SECURE	./sim/process.hh	/^        M5_AT_SECURE = 23,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_SYSINFO	./arch/x86/process.hh	/^        M5_AT_SYSINFO = 32,$/;"	e	enum:X86ISA::X86AuxiliaryVectorTypes
M5_AT_SYSINFO_EHDR	./arch/x86/process.hh	/^        M5_AT_SYSINFO_EHDR = 33$/;"	e	enum:X86ISA::X86AuxiliaryVectorTypes
M5_AT_UID	./sim/process.hh	/^        M5_AT_UID = 11,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_AT_VECTOR_SIZE	./sim/process.hh	/^        M5_AT_VECTOR_SIZE = 44$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_BASE_PLATFORM	./sim/process.hh	/^        M5_BASE_PLATFORM = 24,$/;"	e	enum:LiveProcess::AuxiliaryVectorType
M5_CLASS_VAR_USED	./base/compiler.hh	59;"	d
M5_CLASS_VAR_USED	./base/compiler.hh	61;"	d
M5_DEPRECATED	./base/compiler.hh	54;"	d
M5_DEPRECATED_MSG	./base/compiler.hh	55;"	d
M5_DUMMY_RETURN	./base/compiler.hh	50;"	d
M5_FE_DOWNWARD	./base/fenv.hh	36;"	d
M5_FE_TONEAREST	./base/fenv.hh	37;"	d
M5_FE_TOWARDZERO	./base/fenv.hh	38;"	d
M5_FE_UPWARD	./base/fenv.hh	39;"	d
M5_NO_INLINE	./base/compiler.hh	53;"	d
M5_SC_CLK_TCK	./kern/freebsd/freebsd.hh	/^    static const int M5_SC_CLK_TCK = 100;$/;"	m	class:FreeBSD
M5_SC_CLK_TCK	./kern/linux/linux.hh	/^    static const int M5_SC_CLK_TCK = 100;$/;"	m	class:Linux
M5_VAR_USED	./arch/x86/isa_traits.hh	/^    const ExtMachInst NoopMachInst M5_VAR_USED = {$/;"	m	namespace:X86ISA
M5_VAR_USED	./base/compiler.hh	51;"	d
M5_pid	./sim/process.hh	/^    uint64_t M5_pid;$/;"	m	class:Process
MANC	./dev/net/i8254xGBe_defs.hh	/^    struct MANC : public Reg<uint32_t> { \/\/ 0x5820 MANC Register$/;"	s	struct:iGbReg::Regs
MAP_NORESERVE	./mem/physical.cc	67;"	d	file:
MAX	./mem/ruby/network/fault_model/FaultModel.cc	52;"	d	file:
MAX_ASI	./arch/sparc/asi.hh	/^    MAX_ASI = 0xFF$/;"	e	enum:SparcISA::ASI
MAX_BUFFERS_per_VC	./mem/ruby/network/fault_model/FaultModel.hh	45;"	d
MAX_BURST_LEN	./dev/arm/hdlcd.hh	/^    static constexpr size_t MAX_BURST_LEN = 16;$/;"	m	class:HDLcd
MAX_DMA_SIZE	./dev/storage/ide_disk.hh	63;"	d
MAX_FORWARD_INSTS	./cpu/minor/pipe_data.hh	/^const unsigned int MAX_FORWARD_INSTS = 16;$/;"	m	namespace:Minor
MAX_LOOKUP_LEVELS	./arch/arm/pagetable.hh	/^    MAX_LOOKUP_LEVELS$/;"	e	enum:ArmISA::LookupLevel
MAX_MULTSECT	./dev/storage/ide_disk.hh	65;"	d
MAX_PF_INFLIGHT	./mem/ruby/structures/Prefetcher.hh	46;"	d
MAX_PIXEL_SIZE	./dev/arm/hdlcd.hh	/^    static constexpr size_t MAX_PIXEL_SIZE = 4;$/;"	m	class:HDLcd
MAX_SINGLE_DMA_SIZE	./dev/storage/ide_disk.hh	64;"	d
MAX_VCs	./mem/ruby/network/fault_model/FaultModel.hh	44;"	d
MC146818	./dev/mc146818.cc	/^MC146818::MC146818(EventManager *em, const string &n, const struct tm time,$/;"	f	class:MC146818
MC146818	./dev/mc146818.hh	/^class MC146818 : public EventManager$/;"	c
MCGCP	./arch/x86/regs/misc.hh	/^        Bitfield<8> MCGCP; \/\/ MCG_CTL register present.$/;"	m	namespace:X86ISA
MCR	./dev/uart8250.hh	/^    uint8_t IER, DLAB, LCR, MCR;$/;"	m	class:Uart8250
MCSR_SP	./arch/alpha/ev5.hh	/^inline uint64_t MCSR_SP(uint64_t reg) { return reg >> 1 & 0x3; }$/;"	f	namespace:AlphaISA
MCounter	./base/stats/types.hh	/^typedef std::map<Counter, int> MCounter;$/;"	t	namespace:Stats
MDIC	./dev/net/i8254xGBe_defs.hh	/^    struct MDIC : public Reg<uint32_t> { \/\/ 0x0020 MDIC Register$/;"	s	struct:iGbReg::Regs
MEAR	./dev/net/ns_gige_reg.h	/^    MEAR =              0x08,$/;"	e	enum:DeviceRegisterAddress
MEAR_EECLK	./dev/net/ns_gige_reg.h	/^     MEAR_EECLK =       0x00000004,$/;"	e	enum:EEPROMAccessRegister
MEAR_EEDI	./dev/net/ns_gige_reg.h	/^     MEAR_EEDI =        0x00000001,$/;"	e	enum:EEPROMAccessRegister
MEAR_EEDO	./dev/net/ns_gige_reg.h	/^     MEAR_EEDO =        0x00000002,$/;"	e	enum:EEPROMAccessRegister
MEAR_EESEL	./dev/net/ns_gige_reg.h	/^     MEAR_EESEL =       0x00000008,$/;"	e	enum:EEPROMAccessRegister
MEAR_MDC	./dev/net/ns_gige_reg.h	/^     MEAR_MDC =         0x00000040,$/;"	e	enum:EEPROMAccessRegister
MEAR_MDDIR	./dev/net/ns_gige_reg.h	/^     MEAR_MDDIR =       0x00000020,$/;"	e	enum:EEPROMAccessRegister
MEAR_MDIO	./dev/net/ns_gige_reg.h	/^     MEAR_MDIO =        0x00000010,$/;"	e	enum:EEPROMAccessRegister
MEM	./python/m5/util/dot_writer.py	/^    MEM = 3$/;"	v	class:NodeType
MESSAGE_SIZE_MULTIPLIER	./mem/ruby/network/simple/Throttle.cc	/^const int MESSAGE_SIZE_MULTIPLIER = 1000;$/;"	v
MH	./kern/tru64/mbuf.hh	/^        } MH;$/;"	m	union:tru64::mbuf::__anon99	typeref:struct:tru64::mbuf::__anon99::__anon100
MH_dat	./kern/tru64/mbuf.hh	/^            } MH_dat;$/;"	m	struct:tru64::mbuf::__anon99::__anon100	typeref:union:tru64::mbuf::__anon99::__anon100::__anon101
MH_databuf	./kern/tru64/mbuf.hh	/^                char    MH_databuf[1];$/;"	m	union:tru64::mbuf::__anon99::__anon100::__anon101
MH_ext	./kern/tru64/mbuf.hh	/^                struct  m_ext MH_ext;$/;"	m	union:tru64::mbuf::__anon99::__anon100::__anon101	typeref:struct:tru64::mbuf::__anon99::__anon100::__anon101::m_ext
MH_pkthdr	./kern/tru64/mbuf.hh	/^            struct      pkthdr MH_pkthdr;$/;"	m	struct:tru64::mbuf::__anon99::__anon100	typeref:struct:tru64::mbuf::__anon99::__anon100::pkthdr
MHz	./sim/core.cc	/^double MHz;$/;"	m	namespace:SimClock::Float	file:
MIBC	./dev/net/ns_gige_reg.h	/^    MIBC =              0x5c,$/;"	e	enum:DeviceRegisterAddress
MIBC_ACLR	./dev/net/ns_gige_reg.h	/^     MIBC_ACLR =        0x00000004,$/;"	e	enum:ManagementInformationBaseControlRegister
MIBC_FRZ	./dev/net/ns_gige_reg.h	/^     MIBC_FRZ =         0x00000002,$/;"	e	enum:ManagementInformationBaseControlRegister
MIBC_MIBS	./dev/net/ns_gige_reg.h	/^     MIBC_MIBS =        0x00000008,$/;"	e	enum:ManagementInformationBaseControlRegister
MIBC_WRN	./dev/net/ns_gige_reg.h	/^     MIBC_WRN =         0x00000001$/;"	e	enum:ManagementInformationBaseControlRegister
MIB_END	./dev/net/ns_gige_reg.h	/^    MIB_END =           0x88,$/;"	e	enum:DeviceRegisterAddress
MIB_START	./dev/net/ns_gige_reg.h	/^    MIB_START =         0x60,$/;"	e	enum:DeviceRegisterAddress
MINORINST	./cpu/minor/trace.hh	66;"	d
MINORLINE	./cpu/minor/trace.hh	70;"	d
MINORTRACE	./cpu/minor/trace.hh	62;"	d
MIN_HOST_CYCLES	./cpu/kvm/timer.cc	/^static const uint64_t MIN_HOST_CYCLES = 1000;$/;"	v	file:
MIPS32_QNAN	./arch/mips/registers.hh	/^const uint32_t MIPS32_QNAN = 0x7fbfffff;$/;"	m	namespace:MipsISA
MIPS64_QNAN	./arch/mips/registers.hh	/^const uint64_t MIPS64_QNAN = ULL(0x7ff7ffffffffffff);$/;"	m	namespace:MipsISA
MIPS_ACCESS_VERSION	./dev/mips/access.h	38;"	d
MISCREG_A64_UNIMPL	./arch/arm/miscregs.hh	/^        MISCREG_A64_UNIMPL,             \/\/ 604$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ACTLR	./arch/arm/miscregs.hh	/^        MISCREG_ACTLR,                  \/\/ 111$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ACTLR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ACTLR_EL1,              \/\/ 399$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ACTLR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_ACTLR_EL2,              \/\/ 402$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ACTLR_EL3	./arch/arm/miscregs.hh	/^        MISCREG_ACTLR_EL3,              \/\/ 409$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ACTLR_NS	./arch/arm/miscregs.hh	/^        MISCREG_ACTLR_NS,               \/\/ 112$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ACTLR_S	./arch/arm/miscregs.hh	/^        MISCREG_ACTLR_S,                \/\/ 113$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ADFSR	./arch/arm/miscregs.hh	/^        MISCREG_ADFSR,                  \/\/ 145$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ADFSR_NS	./arch/arm/miscregs.hh	/^        MISCREG_ADFSR_NS,               \/\/ 146$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ADFSR_S	./arch/arm/miscregs.hh	/^        MISCREG_ADFSR_S,                \/\/ 147$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AFSR0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_AFSR0_EL1,              \/\/ 445$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AFSR0_EL2	./arch/arm/miscregs.hh	/^        MISCREG_AFSR0_EL2,              \/\/ 449$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AFSR0_EL3	./arch/arm/miscregs.hh	/^        MISCREG_AFSR0_EL3,              \/\/ 453$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AFSR1_EL1	./arch/arm/miscregs.hh	/^        MISCREG_AFSR1_EL1,              \/\/ 446$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AFSR1_EL2	./arch/arm/miscregs.hh	/^        MISCREG_AFSR1_EL2,              \/\/ 450$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AFSR1_EL3	./arch/arm/miscregs.hh	/^        MISCREG_AFSR1_EL3,              \/\/ 454$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AIDR	./arch/arm/miscregs.hh	/^        MISCREG_AIDR,                   \/\/ 102$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AIDR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_AIDR_EL1,               \/\/ 392$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AIFSR	./arch/arm/miscregs.hh	/^        MISCREG_AIFSR,                  \/\/ 148$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AIFSR_NS	./arch/arm/miscregs.hh	/^        MISCREG_AIFSR_NS,               \/\/ 149$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AIFSR_S	./arch/arm/miscregs.hh	/^        MISCREG_AIFSR_S,                \/\/ 150$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AMAIR0	./arch/arm/miscregs.hh	/^        MISCREG_AMAIR0,                 \/\/ 252$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AMAIR0_NS	./arch/arm/miscregs.hh	/^        MISCREG_AMAIR0_NS,              \/\/ 253$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AMAIR0_S	./arch/arm/miscregs.hh	/^        MISCREG_AMAIR0_S,               \/\/ 254$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AMAIR1	./arch/arm/miscregs.hh	/^        MISCREG_AMAIR1,                 \/\/ 255$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AMAIR1_NS	./arch/arm/miscregs.hh	/^        MISCREG_AMAIR1_NS,              \/\/ 256$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AMAIR1_S	./arch/arm/miscregs.hh	/^        MISCREG_AMAIR1_S,               \/\/ 257$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AMAIR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_AMAIR_EL1,              \/\/ 533$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AMAIR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_AMAIR_EL2,              \/\/ 535$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AMAIR_EL3	./arch/arm/miscregs.hh	/^        MISCREG_AMAIR_EL3,              \/\/ 537$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_APIC_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_APIC_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_ASI	./arch/sparc/miscregs.hh	/^    MISCREG_ASI,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_ATS12NSOPR	./arch/arm/miscregs.hh	/^        MISCREG_ATS12NSOPR,             \/\/ 179$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ATS12NSOPW	./arch/arm/miscregs.hh	/^        MISCREG_ATS12NSOPW,             \/\/ 180$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ATS12NSOUR	./arch/arm/miscregs.hh	/^        MISCREG_ATS12NSOUR,             \/\/ 181$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ATS12NSOUW	./arch/arm/miscregs.hh	/^        MISCREG_ATS12NSOUW,             \/\/ 182$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ATS1CPR	./arch/arm/miscregs.hh	/^        MISCREG_ATS1CPR,                \/\/ 175$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ATS1CPW	./arch/arm/miscregs.hh	/^        MISCREG_ATS1CPW,                \/\/ 176$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ATS1CUR	./arch/arm/miscregs.hh	/^        MISCREG_ATS1CUR,                \/\/ 177$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ATS1CUW	./arch/arm/miscregs.hh	/^        MISCREG_ATS1CUW,                \/\/ 178$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ATS1HR	./arch/arm/miscregs.hh	/^        MISCREG_ATS1HR,                 \/\/ 190$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ATS1HW	./arch/arm/miscregs.hh	/^        MISCREG_ATS1HW,                 \/\/ 191$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AT_S12E0R_Xt	./arch/arm/miscregs.hh	/^        MISCREG_AT_S12E0R_Xt,           \/\/ 480$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AT_S12E0W_Xt	./arch/arm/miscregs.hh	/^        MISCREG_AT_S12E0W_Xt,           \/\/ 481$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AT_S12E1R_Xt	./arch/arm/miscregs.hh	/^        MISCREG_AT_S12E1R_Xt,           \/\/ 478$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AT_S12E1W_Xt	./arch/arm/miscregs.hh	/^        MISCREG_AT_S12E1W_Xt,           \/\/ 479$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AT_S1E0R_Xt	./arch/arm/miscregs.hh	/^        MISCREG_AT_S1E0R_Xt,            \/\/ 467$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AT_S1E0W_Xt	./arch/arm/miscregs.hh	/^        MISCREG_AT_S1E0W_Xt,            \/\/ 468$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AT_S1E1R_Xt	./arch/arm/miscregs.hh	/^        MISCREG_AT_S1E1R_Xt,            \/\/ 465$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AT_S1E1W_Xt	./arch/arm/miscregs.hh	/^        MISCREG_AT_S1E1W_Xt,            \/\/ 466$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AT_S1E2R_Xt	./arch/arm/miscregs.hh	/^        MISCREG_AT_S1E2R_Xt,            \/\/ 476$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AT_S1E2W_Xt	./arch/arm/miscregs.hh	/^        MISCREG_AT_S1E2W_Xt,            \/\/ 477$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AT_S1E3R_Xt	./arch/arm/miscregs.hh	/^        MISCREG_AT_S1E3R_Xt,            \/\/ 482$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_AT_S1E3W_Xt	./arch/arm/miscregs.hh	/^        MISCREG_AT_S1E3W_Xt,            \/\/ 483$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_BADVADDR	./arch/mips/registers.hh	/^    MISCREG_BADVADDR = 64,       \/\/Bank 8: 64-71$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_BANKED	./arch/arm/miscregs.hh	/^        MISCREG_BANKED,  \/\/ True if the register is banked between the two$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_BANKED_CHILD	./arch/arm/miscregs.hh	/^        MISCREG_BANKED_CHILD, \/\/ The entry is one of the child registers that$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_BPIALL	./arch/arm/miscregs.hh	/^        MISCREG_BPIALL,                 \/\/ 171$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_BPIALLIS	./arch/arm/miscregs.hh	/^        MISCREG_BPIALLIS,               \/\/ 164$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_BPIMVA	./arch/arm/miscregs.hh	/^        MISCREG_BPIMVA,                 \/\/ 172$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CACHEERR0	./arch/mips/registers.hh	/^    MISCREG_CACHEERR0 = 216,   \/\/Bank 27: 216-223$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_CACHEERR1	./arch/mips/registers.hh	/^    MISCREG_CACHEERR1,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_CACHEERR2	./arch/mips/registers.hh	/^    MISCREG_CACHEERR2,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_CACHEERR3	./arch/mips/registers.hh	/^    MISCREG_CACHEERR3,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_CAUSE	./arch/mips/registers.hh	/^    MISCREG_CAUSE = 104,         \/\/Bank 13: 104-111$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_CBAR	./arch/arm/miscregs.hh	/^        MISCREG_CBAR,                   \/\/ 307$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CBAR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_CBAR_EL1,               \/\/ 598$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CCSIDR	./arch/arm/miscregs.hh	/^        MISCREG_CCSIDR,                 \/\/ 100$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CCSIDR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_CCSIDR_EL1,             \/\/ 390$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CLIDR	./arch/arm/miscregs.hh	/^        MISCREG_CLIDR,                  \/\/ 101$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CLIDR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_CLIDR_EL1,              \/\/ 391$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTFRQ	./arch/arm/miscregs.hh	/^        MISCREG_CNTFRQ,                 \/\/ 283$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTFRQ_EL0	./arch/arm/miscregs.hh	/^        MISCREG_CNTFRQ_EL0,             \/\/ 555$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTHCTL	./arch/arm/miscregs.hh	/^        MISCREG_CNTHCTL,                \/\/ 293$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTHCTL_EL2	./arch/arm/miscregs.hh	/^        MISCREG_CNTHCTL_EL2,            \/\/ 577$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTHP_CTL	./arch/arm/miscregs.hh	/^        MISCREG_CNTHP_CTL,              \/\/ 295$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTHP_CTL_EL2	./arch/arm/miscregs.hh	/^        MISCREG_CNTHP_CTL_EL2,          \/\/ 579$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTHP_CVAL	./arch/arm/miscregs.hh	/^        MISCREG_CNTHP_CVAL,             \/\/ 317$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTHP_CVAL_EL2	./arch/arm/miscregs.hh	/^        MISCREG_CNTHP_CVAL_EL2,         \/\/ 580$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTHP_TVAL	./arch/arm/miscregs.hh	/^        MISCREG_CNTHP_TVAL,             \/\/ 294$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTHP_TVAL_EL2	./arch/arm/miscregs.hh	/^        MISCREG_CNTHP_TVAL_EL2,         \/\/ 578$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTKCTL	./arch/arm/miscregs.hh	/^        MISCREG_CNTKCTL,                \/\/ 284$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTKCTL_EL1	./arch/arm/miscregs.hh	/^        MISCREG_CNTKCTL_EL1,            \/\/ 554$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTPCT	./arch/arm/miscregs.hh	/^        MISCREG_CNTPCT,                 \/\/ 310$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTPCT_EL0	./arch/arm/miscregs.hh	/^        MISCREG_CNTPCT_EL0,             \/\/ 556$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTPS_CTL_EL1	./arch/arm/miscregs.hh	/^        MISCREG_CNTPS_CTL_EL1,          \/\/ 582$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTPS_CVAL_EL1	./arch/arm/miscregs.hh	/^        MISCREG_CNTPS_CVAL_EL1,         \/\/ 583$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTPS_TVAL_EL1	./arch/arm/miscregs.hh	/^        MISCREG_CNTPS_TVAL_EL1,         \/\/ 581$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTP_CTL	./arch/arm/miscregs.hh	/^        MISCREG_CNTP_CTL,               \/\/ 288$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTP_CTL_EL0	./arch/arm/miscregs.hh	/^        MISCREG_CNTP_CTL_EL0,           \/\/ 559$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTP_CTL_NS	./arch/arm/miscregs.hh	/^        MISCREG_CNTP_CTL_NS,            \/\/ 289$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTP_CTL_S	./arch/arm/miscregs.hh	/^        MISCREG_CNTP_CTL_S,             \/\/ 290$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTP_CVAL	./arch/arm/miscregs.hh	/^        MISCREG_CNTP_CVAL,              \/\/ 312$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTP_CVAL_EL0	./arch/arm/miscregs.hh	/^        MISCREG_CNTP_CVAL_EL0,          \/\/ 560$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTP_CVAL_NS	./arch/arm/miscregs.hh	/^        MISCREG_CNTP_CVAL_NS,           \/\/ 313$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTP_CVAL_S	./arch/arm/miscregs.hh	/^        MISCREG_CNTP_CVAL_S,            \/\/ 314$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTP_TVAL	./arch/arm/miscregs.hh	/^        MISCREG_CNTP_TVAL,              \/\/ 285$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTP_TVAL_EL0	./arch/arm/miscregs.hh	/^        MISCREG_CNTP_TVAL_EL0,          \/\/ 558$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTP_TVAL_NS	./arch/arm/miscregs.hh	/^        MISCREG_CNTP_TVAL_NS,           \/\/ 286$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTP_TVAL_S	./arch/arm/miscregs.hh	/^        MISCREG_CNTP_TVAL_S,            \/\/ 287$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTVCT	./arch/arm/miscregs.hh	/^        MISCREG_CNTVCT,                 \/\/ 311$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTVCT_EL0	./arch/arm/miscregs.hh	/^        MISCREG_CNTVCT_EL0,             \/\/ 557$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTVOFF	./arch/arm/miscregs.hh	/^        MISCREG_CNTVOFF,                \/\/ 316$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTVOFF_EL2	./arch/arm/miscregs.hh	/^        MISCREG_CNTVOFF_EL2,            \/\/ 576$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTV_CTL	./arch/arm/miscregs.hh	/^        MISCREG_CNTV_CTL,               \/\/ 292$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTV_CTL_EL0	./arch/arm/miscregs.hh	/^        MISCREG_CNTV_CTL_EL0,           \/\/ 562$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTV_CVAL	./arch/arm/miscregs.hh	/^        MISCREG_CNTV_CVAL,              \/\/ 315$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTV_CVAL_EL0	./arch/arm/miscregs.hh	/^        MISCREG_CNTV_CVAL_EL0,          \/\/ 563$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTV_TVAL	./arch/arm/miscregs.hh	/^        MISCREG_CNTV_TVAL,              \/\/ 291$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CNTV_TVAL_EL0	./arch/arm/miscregs.hh	/^        MISCREG_CNTV_TVAL_EL0,          \/\/ 561$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_COMPARE	./arch/mips/registers.hh	/^    MISCREG_COMPARE = 88,        \/\/Bank 11: 88-95$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_CONFIG	./arch/mips/registers.hh	/^    MISCREG_CONFIG = 128,        \/\/Bank 16: 128-135$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_CONFIG1	./arch/mips/registers.hh	/^    MISCREG_CONFIG1,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_CONFIG2	./arch/mips/registers.hh	/^    MISCREG_CONFIG2,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_CONFIG3	./arch/mips/registers.hh	/^    MISCREG_CONFIG3,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_CONFIG4	./arch/mips/registers.hh	/^    MISCREG_CONFIG4,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_CONFIG5	./arch/mips/registers.hh	/^    MISCREG_CONFIG5,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_CONFIG6	./arch/mips/registers.hh	/^    MISCREG_CONFIG6,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_CONFIG7	./arch/mips/registers.hh	/^    MISCREG_CONFIG7,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_CONTEXT	./arch/mips/registers.hh	/^    MISCREG_CONTEXT = 32,    \/\/ Bank 4: 32 - 33$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_CONTEXTIDR	./arch/arm/miscregs.hh	/^        MISCREG_CONTEXTIDR,             \/\/ 270$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CONTEXTIDR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_CONTEXTIDR_EL1,         \/\/ 548$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CONTEXTIDR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_CONTEXTIDR_EL2,         \/\/ 599$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CONTEXTIDR_NS	./arch/arm/miscregs.hh	/^        MISCREG_CONTEXTIDR_NS,          \/\/ 271$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CONTEXTIDR_S	./arch/arm/miscregs.hh	/^        MISCREG_CONTEXTIDR_S,           \/\/ 272$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CONTEXT_CONFIG	./arch/mips/registers.hh	/^    MISCREG_CONTEXT_CONFIG,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_COUNT	./arch/mips/registers.hh	/^    MISCREG_COUNT = 72,          \/\/Bank 9: 72-79$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_CP0_RANDOM	./arch/mips/registers.hh	/^    MISCREG_CP0_RANDOM = 8,      \/\/Bank 1: 8 - 15$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_CP14_UNIMPL	./arch/arm/miscregs.hh	/^        MISCREG_CP14_UNIMPL,            \/\/ 602$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CP15DMB	./arch/arm/miscregs.hh	/^        MISCREG_CP15DMB,                \/\/ 186$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CP15DSB	./arch/arm/miscregs.hh	/^        MISCREG_CP15DSB,                \/\/ 185$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CP15ISB	./arch/arm/miscregs.hh	/^        MISCREG_CP15ISB,                \/\/ 170$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CP15_UNIMPL	./arch/arm/miscregs.hh	/^        MISCREG_CP15_UNIMPL,            \/\/ 603$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CPACR	./arch/arm/miscregs.hh	/^        MISCREG_CPACR,                  \/\/ 114$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CPACR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_CPACR_EL1,              \/\/ 400$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CPSR	./arch/arm/miscregs.hh	/^        MISCREG_CPSR = 0,               \/\/   0$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CPSR_MODE	./arch/arm/miscregs.hh	/^        MISCREG_CPSR_MODE,              \/\/  15$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CPSR_Q	./arch/arm/miscregs.hh	/^        MISCREG_CPSR_Q,                 \/\/  16$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CPTR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_CPTR_EL2,               \/\/ 405$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CPTR_EL3	./arch/arm/miscregs.hh	/^        MISCREG_CPTR_EL3,               \/\/ 412$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CPUACTLR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_CPUACTLR_EL1,           \/\/ 594$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CPUECTLR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_CPUECTLR_EL1,           \/\/ 595$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CPUMERRSR	./arch/arm/miscregs.hh	/^        MISCREG_CPUMERRSR,              \/\/ 318$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CPUMERRSR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_CPUMERRSR_EL1,          \/\/ 596$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CR	./arch/x86/regs/misc.hh	/^    MISCREG_CR(int index)$/;"	f	namespace:X86ISA
MISCREG_CR0	./arch/x86/regs/misc.hh	/^        MISCREG_CR0 = MISCREG_CR_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CR1	./arch/x86/regs/misc.hh	/^        MISCREG_CR1,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CR10	./arch/x86/regs/misc.hh	/^        MISCREG_CR10,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CR11	./arch/x86/regs/misc.hh	/^        MISCREG_CR11,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CR12	./arch/x86/regs/misc.hh	/^        MISCREG_CR12,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CR13	./arch/x86/regs/misc.hh	/^        MISCREG_CR13,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CR14	./arch/x86/regs/misc.hh	/^        MISCREG_CR14,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CR15	./arch/x86/regs/misc.hh	/^        MISCREG_CR15,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CR2	./arch/x86/regs/misc.hh	/^        MISCREG_CR2,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CR3	./arch/x86/regs/misc.hh	/^        MISCREG_CR3,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CR4	./arch/x86/regs/misc.hh	/^        MISCREG_CR4,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CR5	./arch/x86/regs/misc.hh	/^        MISCREG_CR5,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CR6	./arch/x86/regs/misc.hh	/^        MISCREG_CR6,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CR7	./arch/x86/regs/misc.hh	/^        MISCREG_CR7,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CR8	./arch/x86/regs/misc.hh	/^        MISCREG_CR8,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CR9	./arch/x86/regs/misc.hh	/^        MISCREG_CR9,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CR_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_CR_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CS	./arch/x86/regs/misc.hh	/^        MISCREG_CS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CSSELR	./arch/arm/miscregs.hh	/^        MISCREG_CSSELR,                 \/\/ 103$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CSSELR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_CSSELR_EL1,             \/\/ 393$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CSSELR_NS	./arch/arm/miscregs.hh	/^        MISCREG_CSSELR_NS,              \/\/ 104$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CSSELR_S	./arch/arm/miscregs.hh	/^        MISCREG_CSSELR_S,               \/\/ 105$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CSTAR	./arch/x86/regs/misc.hh	/^        MISCREG_CSTAR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CS_ATTR	./arch/x86/regs/misc.hh	/^        MISCREG_CS_ATTR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CS_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_CS_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CS_EFF_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_CS_EFF_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CS_LIMIT	./arch/x86/regs/misc.hh	/^        MISCREG_CS_LIMIT,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_CTR	./arch/arm/miscregs.hh	/^        MISCREG_CTR,                    \/\/  81$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CTR_EL0	./arch/arm/miscregs.hh	/^        MISCREG_CTR_EL0,                \/\/ 394$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CURRENTEL	./arch/arm/miscregs.hh	/^        MISCREG_CURRENTEL,              \/\/ 428$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_CWP	./arch/sparc/miscregs.hh	/^    MISCREG_CWP,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_DACR	./arch/arm/miscregs.hh	/^        MISCREG_DACR,                   \/\/ 136$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DACR32_EL2	./arch/arm/miscregs.hh	/^        MISCREG_DACR32_EL2,             \/\/ 423$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DACR_NS	./arch/arm/miscregs.hh	/^        MISCREG_DACR_NS,                \/\/ 137$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DACR_S	./arch/arm/miscregs.hh	/^        MISCREG_DACR_S,                 \/\/ 138$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DAIF	./arch/arm/miscregs.hh	/^        MISCREG_DAIF,                   \/\/ 430$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DATAHI1	./arch/mips/registers.hh	/^    MISCREG_DATAHI1,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_DATAHI3	./arch/mips/registers.hh	/^    MISCREG_DATAHI3,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_DATAHI5	./arch/mips/registers.hh	/^    MISCREG_DATAHI5,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_DATAHI7	./arch/mips/registers.hh	/^    MISCREG_DATAHI7,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_DATALO1	./arch/mips/registers.hh	/^    MISCREG_DATALO1,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_DATALO3	./arch/mips/registers.hh	/^    MISCREG_DATALO3,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_DATALO5	./arch/mips/registers.hh	/^    MISCREG_DATALO5,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_DATALO7	./arch/mips/registers.hh	/^    MISCREG_DATALO7,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_DBGAUTHSTATUS	./arch/arm/miscregs.hh	/^        MISCREG_DBGAUTHSTATUS,          \/\/  71$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGAUTHSTATUS_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGAUTHSTATUS_EL1,      \/\/ 357$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBCR0	./arch/arm/miscregs.hh	/^        MISCREG_DBGBCR0,                \/\/  47$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBCR0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGBCR0_EL1,            \/\/ 331$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBCR1	./arch/arm/miscregs.hh	/^        MISCREG_DBGBCR1,                \/\/  48$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBCR1_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGBCR1_EL1,            \/\/ 332$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBCR2	./arch/arm/miscregs.hh	/^        MISCREG_DBGBCR2,                \/\/  49$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBCR2_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGBCR2_EL1,            \/\/ 333$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBCR3	./arch/arm/miscregs.hh	/^        MISCREG_DBGBCR3,                \/\/  50$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBCR3_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGBCR3_EL1,            \/\/ 334$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBCR4	./arch/arm/miscregs.hh	/^        MISCREG_DBGBCR4,                \/\/  51$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBCR4_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGBCR4_EL1,            \/\/ 335$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBCR5	./arch/arm/miscregs.hh	/^        MISCREG_DBGBCR5,                \/\/  52$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBCR5_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGBCR5_EL1,            \/\/ 336$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBVR0	./arch/arm/miscregs.hh	/^        MISCREG_DBGBVR0,                \/\/  41$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBVR0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGBVR0_EL1,            \/\/ 325$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBVR1	./arch/arm/miscregs.hh	/^        MISCREG_DBGBVR1,                \/\/  42$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBVR1_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGBVR1_EL1,            \/\/ 326$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBVR2	./arch/arm/miscregs.hh	/^        MISCREG_DBGBVR2,                \/\/  43$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBVR2_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGBVR2_EL1,            \/\/ 327$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBVR3	./arch/arm/miscregs.hh	/^        MISCREG_DBGBVR3,                \/\/  44$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBVR3_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGBVR3_EL1,            \/\/ 328$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBVR4	./arch/arm/miscregs.hh	/^        MISCREG_DBGBVR4,                \/\/  45$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBVR4_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGBVR4_EL1,            \/\/ 329$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBVR5	./arch/arm/miscregs.hh	/^        MISCREG_DBGBVR5,                \/\/  46$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBVR5_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGBVR5_EL1,            \/\/ 330$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBXVR4	./arch/arm/miscregs.hh	/^        MISCREG_DBGBXVR4,               \/\/  62$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGBXVR5	./arch/arm/miscregs.hh	/^        MISCREG_DBGBXVR5,               \/\/  63$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGCLAIMCLR	./arch/arm/miscregs.hh	/^        MISCREG_DBGCLAIMCLR,            \/\/  70$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGCLAIMCLR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGCLAIMCLR_EL1,        \/\/ 356$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGCLAIMSET	./arch/arm/miscregs.hh	/^        MISCREG_DBGCLAIMSET,            \/\/  69$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGCLAIMSET_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGCLAIMSET_EL1,        \/\/ 355$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGDCCINT	./arch/arm/miscregs.hh	/^        MISCREG_DBGDCCINT,              \/\/  32$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGDEVID0	./arch/arm/miscregs.hh	/^        MISCREG_DBGDEVID0,              \/\/  74$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGDEVID1	./arch/arm/miscregs.hh	/^        MISCREG_DBGDEVID1,              \/\/  73$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGDEVID2	./arch/arm/miscregs.hh	/^        MISCREG_DBGDEVID2,              \/\/  72$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGDIDR	./arch/arm/miscregs.hh	/^        MISCREG_DBGDIDR,                \/\/  30$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGDRAR	./arch/arm/miscregs.hh	/^        MISCREG_DBGDRAR,                \/\/  61$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGDSAR	./arch/arm/miscregs.hh	/^        MISCREG_DBGDSAR,                \/\/  68$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGDSCRext	./arch/arm/miscregs.hh	/^        MISCREG_DBGDSCRext,             \/\/  38$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGDSCRint	./arch/arm/miscregs.hh	/^        MISCREG_DBGDSCRint,             \/\/  31$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGDTRRXext	./arch/arm/miscregs.hh	/^        MISCREG_DBGDTRRXext,            \/\/  37$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGDTRRXint	./arch/arm/miscregs.hh	/^        MISCREG_DBGDTRRXint,            \/\/  34$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGDTRTXext	./arch/arm/miscregs.hh	/^        MISCREG_DBGDTRTXext,            \/\/  39$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGDTRTXint	./arch/arm/miscregs.hh	/^        MISCREG_DBGDTRTXint,            \/\/  33$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGOSDLR	./arch/arm/miscregs.hh	/^        MISCREG_DBGOSDLR,               \/\/  66$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGOSECCR	./arch/arm/miscregs.hh	/^        MISCREG_DBGOSECCR,              \/\/  40$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGOSLAR	./arch/arm/miscregs.hh	/^        MISCREG_DBGOSLAR,               \/\/  64$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGOSLSR	./arch/arm/miscregs.hh	/^        MISCREG_DBGOSLSR,               \/\/  65$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGPRCR	./arch/arm/miscregs.hh	/^        MISCREG_DBGPRCR,                \/\/  67$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGPRCR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGPRCR_EL1,            \/\/ 354$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGVCR	./arch/arm/miscregs.hh	/^        MISCREG_DBGVCR,                 \/\/  36$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGVCR32_EL2	./arch/arm/miscregs.hh	/^        MISCREG_DBGVCR32_EL2,           \/\/ 349$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGWCR0	./arch/arm/miscregs.hh	/^        MISCREG_DBGWCR0,                \/\/  57$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGWCR0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGWCR0_EL1,            \/\/ 341$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGWCR1	./arch/arm/miscregs.hh	/^        MISCREG_DBGWCR1,                \/\/  58$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGWCR1_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGWCR1_EL1,            \/\/ 342$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGWCR2	./arch/arm/miscregs.hh	/^        MISCREG_DBGWCR2,                \/\/  59$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGWCR2_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGWCR2_EL1,            \/\/ 343$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGWCR3	./arch/arm/miscregs.hh	/^        MISCREG_DBGWCR3,                \/\/  60$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGWCR3_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGWCR3_EL1,            \/\/ 344$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGWFAR	./arch/arm/miscregs.hh	/^        MISCREG_DBGWFAR,                \/\/  35$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGWVR0	./arch/arm/miscregs.hh	/^        MISCREG_DBGWVR0,                \/\/  53$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGWVR0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGWVR0_EL1,            \/\/ 337$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGWVR1	./arch/arm/miscregs.hh	/^        MISCREG_DBGWVR1,                \/\/  54$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGWVR1_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGWVR1_EL1,            \/\/ 338$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGWVR2	./arch/arm/miscregs.hh	/^        MISCREG_DBGWVR2,                \/\/  55$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGWVR2_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGWVR2_EL1,            \/\/ 339$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGWVR3	./arch/arm/miscregs.hh	/^        MISCREG_DBGWVR3,                \/\/  56$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DBGWVR3_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DBGWVR3_EL1,            \/\/ 340$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DCCIMVAC	./arch/arm/miscregs.hh	/^        MISCREG_DCCIMVAC,               \/\/ 188$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DCCISW	./arch/arm/miscregs.hh	/^        MISCREG_DCCISW,                 \/\/ 189$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DCCMVAC	./arch/arm/miscregs.hh	/^        MISCREG_DCCMVAC,                \/\/ 183$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DCCMVAU	./arch/arm/miscregs.hh	/^        MISCREG_DCCMVAU,                \/\/ 187$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DCCSW	./arch/arm/miscregs.hh	/^        MISCREG_DCCSW,                  \/\/ 184$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DCIMVAC	./arch/arm/miscregs.hh	/^        MISCREG_DCIMVAC,                \/\/ 173$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DCISW	./arch/arm/miscregs.hh	/^        MISCREG_DCISW,                  \/\/ 174$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DCZID_EL0	./arch/arm/miscregs.hh	/^        MISCREG_DCZID_EL0,              \/\/ 395$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DC_CISW_Xt	./arch/arm/miscregs.hh	/^        MISCREG_DC_CISW_Xt,             \/\/ 470$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DC_CIVAC_Xt	./arch/arm/miscregs.hh	/^        MISCREG_DC_CIVAC_Xt,            \/\/ 475$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DC_CSW_Xt	./arch/arm/miscregs.hh	/^        MISCREG_DC_CSW_Xt,              \/\/ 469$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DC_CVAC_Xt	./arch/arm/miscregs.hh	/^        MISCREG_DC_CVAC_Xt,             \/\/ 473$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DC_CVAU_Xt	./arch/arm/miscregs.hh	/^        MISCREG_DC_CVAU_Xt,             \/\/ 474$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DC_ISW_Xt	./arch/arm/miscregs.hh	/^        MISCREG_DC_ISW_Xt,              \/\/ 464$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DC_IVAC_Xt	./arch/arm/miscregs.hh	/^        MISCREG_DC_IVAC_Xt,             \/\/ 463$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DC_ZVA_Xt	./arch/arm/miscregs.hh	/^        MISCREG_DC_ZVA_Xt,              \/\/ 471$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DEBUG	./arch/mips/registers.hh	/^    MISCREG_DEBUG = 184,       \/\/Bank 23: 184-191$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_DEBUG_CTL_MSR	./arch/x86/regs/misc.hh	/^        MISCREG_DEBUG_CTL_MSR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_DEF_TYPE	./arch/x86/regs/misc.hh	/^        MISCREG_DEF_TYPE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_DEPC	./arch/mips/registers.hh	/^    MISCREG_DEPC = 192,        \/\/Bank 24: 192-199$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_DESAVE	./arch/mips/registers.hh	/^    MISCREG_DESAVE = 248,       \/\/Bank 31: 248-256$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_DFAR	./arch/arm/miscregs.hh	/^        MISCREG_DFAR,                   \/\/ 154$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DFAR_NS	./arch/arm/miscregs.hh	/^        MISCREG_DFAR_NS,                \/\/ 155$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DFAR_S	./arch/arm/miscregs.hh	/^        MISCREG_DFAR_S,                 \/\/ 156$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DFSR	./arch/arm/miscregs.hh	/^        MISCREG_DFSR,                   \/\/ 139$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DFSR_NS	./arch/arm/miscregs.hh	/^        MISCREG_DFSR_NS,                \/\/ 140$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DFSR_S	./arch/arm/miscregs.hh	/^        MISCREG_DFSR_S,                 \/\/ 141$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DL1DATA0	./arch/arm/miscregs.hh	/^        MISCREG_DL1DATA0,               \/\/ 300$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DL1DATA0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DL1DATA0_EL1,           \/\/ 588$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DL1DATA1	./arch/arm/miscregs.hh	/^        MISCREG_DL1DATA1,               \/\/ 301$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DL1DATA1_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DL1DATA1_EL1,           \/\/ 589$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DL1DATA2	./arch/arm/miscregs.hh	/^        MISCREG_DL1DATA2,               \/\/ 302$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DL1DATA2_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DL1DATA2_EL1,           \/\/ 590$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DL1DATA3	./arch/arm/miscregs.hh	/^        MISCREG_DL1DATA3,               \/\/ 303$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DL1DATA3_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DL1DATA3_EL1,           \/\/ 591$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DL1DATA4	./arch/arm/miscregs.hh	/^        MISCREG_DL1DATA4,               \/\/ 304$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DL1DATA4_EL1	./arch/arm/miscregs.hh	/^        MISCREG_DL1DATA4_EL1,           \/\/ 592$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DLR_EL0	./arch/arm/miscregs.hh	/^        MISCREG_DLR_EL0,                \/\/ 434$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DR	./arch/x86/regs/misc.hh	/^    MISCREG_DR(int index)$/;"	f	namespace:X86ISA
MISCREG_DR0	./arch/x86/regs/misc.hh	/^        MISCREG_DR0 = MISCREG_DR_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_DR1	./arch/x86/regs/misc.hh	/^        MISCREG_DR1,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_DR2	./arch/x86/regs/misc.hh	/^        MISCREG_DR2,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_DR3	./arch/x86/regs/misc.hh	/^        MISCREG_DR3,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_DR4	./arch/x86/regs/misc.hh	/^        MISCREG_DR4,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_DR5	./arch/x86/regs/misc.hh	/^        MISCREG_DR5,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_DR6	./arch/x86/regs/misc.hh	/^        MISCREG_DR6,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_DR7	./arch/x86/regs/misc.hh	/^        MISCREG_DR7,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_DR_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_DR_BASE = MISCREG_CR_BASE + NumCRegs,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_DS	./arch/x86/regs/misc.hh	/^        MISCREG_DS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_DSPSR_EL0	./arch/arm/miscregs.hh	/^        MISCREG_DSPSR_EL0,              \/\/ 433$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DS_ATTR	./arch/x86/regs/misc.hh	/^        MISCREG_DS_ATTR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_DS_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_DS_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_DS_EFF_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_DS_EFF_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_DS_LIMIT	./arch/x86/regs/misc.hh	/^        MISCREG_DS_LIMIT,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_DTLBIALL	./arch/arm/miscregs.hh	/^        MISCREG_DTLBIALL,               \/\/ 201$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DTLBIASID	./arch/arm/miscregs.hh	/^        MISCREG_DTLBIASID,              \/\/ 203$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_DTLBIMVA	./arch/arm/miscregs.hh	/^        MISCREG_DTLBIMVA,               \/\/ 202$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_EBASE	./arch/mips/registers.hh	/^    MISCREG_EBASE,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_EFER	./arch/x86/regs/misc.hh	/^        MISCREG_EFER = MISCREG_MC_MISC_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_ELR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ELR_EL1,                \/\/ 425$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ELR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_ELR_EL2,                \/\/ 436$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ELR_EL3	./arch/arm/miscregs.hh	/^        MISCREG_ELR_EL3,                \/\/ 443$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ELR_HYP	./arch/arm/miscregs.hh	/^        MISCREG_ELR_HYP,                \/\/   9$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ENTRYHI	./arch/mips/registers.hh	/^    MISCREG_ENTRYHI = 80,        \/\/Bank 10: 80-87$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_ENTRYLO0	./arch/mips/registers.hh	/^    MISCREG_ENTRYLO0 = 16,   \/\/Bank 2: 16 - 23$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_ENTRYLO1	./arch/mips/registers.hh	/^    MISCREG_ENTRYLO1 = 24,   \/\/ Bank 3: 24$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_EPC	./arch/mips/registers.hh	/^    MISCREG_EPC = 112,           \/\/Bank 14: 112-119$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_ERRCTL	./arch/mips/registers.hh	/^    MISCREG_ERRCTL = 208,      \/\/Bank 26: 208-215$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_ERROR_EPC	./arch/mips/registers.hh	/^    MISCREG_ERROR_EPC = 240,    \/\/Bank 30: 240-247$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_ES	./arch/x86/regs/misc.hh	/^        MISCREG_ES = MISCREG_SEG_SEL_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_ESR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ESR_EL1,                \/\/ 447$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ESR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_ESR_EL2,                \/\/ 451$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ESR_EL3	./arch/arm/miscregs.hh	/^        MISCREG_ESR_EL3,                \/\/ 455$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ES_ATTR	./arch/x86/regs/misc.hh	/^        MISCREG_ES_ATTR = MISCREG_SEG_ATTR_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_ES_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_ES_BASE = MISCREG_SEG_BASE_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_ES_EFF_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_ES_EFF_BASE = MISCREG_SEG_EFF_BASE_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_ES_LIMIT	./arch/x86/regs/misc.hh	/^        MISCREG_ES_LIMIT = MISCREG_SEG_LIMIT_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_FAR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_FAR_EL1,                \/\/ 456$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_FAR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_FAR_EL2,                \/\/ 457$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_FAR_EL3	./arch/arm/miscregs.hh	/^        MISCREG_FAR_EL3,                \/\/ 459$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_FCSEIDR	./arch/arm/miscregs.hh	/^        MISCREG_FCSEIDR,                \/\/ 269$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_FCW	./arch/x86/regs/misc.hh	/^        MISCREG_FCW,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_FIOFF	./arch/x86/regs/misc.hh	/^        MISCREG_FIOFF,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_FISEG	./arch/x86/regs/misc.hh	/^        MISCREG_FISEG,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_FOOFF	./arch/x86/regs/misc.hh	/^        MISCREG_FOOFF,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_FOP	./arch/x86/regs/misc.hh	/^        MISCREG_FOP,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_FOSEG	./arch/x86/regs/misc.hh	/^        MISCREG_FOSEG,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_FPCR	./arch/alpha/registers.hh	/^    MISCREG_FPCR = NumInternalProcRegs,$/;"	e	enum:AlphaISA::MiscRegIndex
MISCREG_FPCR	./arch/arm/miscregs.hh	/^        MISCREG_FPCR,                   \/\/ 431$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_FPEXC	./arch/arm/miscregs.hh	/^        MISCREG_FPEXC,                  \/\/  14$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_FPEXC32_EL2	./arch/arm/miscregs.hh	/^        MISCREG_FPEXC32_EL2,            \/\/ 452$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_FPRS	./arch/sparc/miscregs.hh	/^    MISCREG_FPRS,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_FPSCR	./arch/arm/miscregs.hh	/^        MISCREG_FPSCR,                  \/\/  11$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_FPSCR_EXC	./arch/arm/miscregs.hh	/^        MISCREG_FPSCR_EXC,              \/\/  17$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_FPSCR_QC	./arch/arm/miscregs.hh	/^        MISCREG_FPSCR_QC,               \/\/  18$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_FPSID	./arch/arm/miscregs.hh	/^        MISCREG_FPSID,                  \/\/  10$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_FPSR	./arch/arm/miscregs.hh	/^        MISCREG_FPSR,                   \/\/ 432$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_FS	./arch/x86/regs/misc.hh	/^        MISCREG_FS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_FSR	./arch/sparc/miscregs.hh	/^    MISCREG_FSR,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_FSW	./arch/x86/regs/misc.hh	/^        MISCREG_FSW,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_FS_ATTR	./arch/x86/regs/misc.hh	/^        MISCREG_FS_ATTR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_FS_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_FS_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_FS_EFF_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_FS_EFF_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_FS_LIMIT	./arch/x86/regs/misc.hh	/^        MISCREG_FS_LIMIT,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_FTAG	./arch/x86/regs/misc.hh	/^        MISCREG_FTAG,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_FTW	./arch/x86/regs/misc.hh	/^        MISCREG_FTW,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_GL	./arch/sparc/miscregs.hh	/^    MISCREG_GL,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_GS	./arch/x86/regs/misc.hh	/^        MISCREG_GS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_GSR	./arch/sparc/miscregs.hh	/^    MISCREG_GSR,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_GS_ATTR	./arch/x86/regs/misc.hh	/^        MISCREG_GS_ATTR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_GS_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_GS_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_GS_EFF_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_GS_EFF_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_GS_LIMIT	./arch/x86/regs/misc.hh	/^        MISCREG_GS_LIMIT,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_HACR	./arch/arm/miscregs.hh	/^        MISCREG_HACR,                   \/\/ 124$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HACR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_HACR_EL2,               \/\/ 407$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HACTLR	./arch/arm/miscregs.hh	/^        MISCREG_HACTLR,                 \/\/ 119$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HADFSR	./arch/arm/miscregs.hh	/^        MISCREG_HADFSR,                 \/\/ 151$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HAIFSR	./arch/arm/miscregs.hh	/^        MISCREG_HAIFSR,                 \/\/ 152$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HAMAIR0	./arch/arm/miscregs.hh	/^        MISCREG_HAMAIR0,                \/\/ 260$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HAMAIR1	./arch/arm/miscregs.hh	/^        MISCREG_HAMAIR1,                \/\/ 261$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HCPTR	./arch/arm/miscregs.hh	/^        MISCREG_HCPTR,                  \/\/ 122$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HCR	./arch/arm/miscregs.hh	/^        MISCREG_HCR,                    \/\/ 120$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HCR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_HCR_EL2,                \/\/ 403$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HDCR	./arch/arm/miscregs.hh	/^        MISCREG_HDCR,                   \/\/ 121$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HDFAR	./arch/arm/miscregs.hh	/^        MISCREG_HDFAR,                  \/\/ 160$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HIFAR	./arch/arm/miscregs.hh	/^        MISCREG_HIFAR,                  \/\/ 161$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HINTP	./arch/sparc/miscregs.hh	/^    MISCREG_HINTP,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_HMAIR0	./arch/arm/miscregs.hh	/^        MISCREG_HMAIR0,                 \/\/ 258$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HMAIR1	./arch/arm/miscregs.hh	/^        MISCREG_HMAIR1,                 \/\/ 259$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HPFAR	./arch/arm/miscregs.hh	/^        MISCREG_HPFAR,                  \/\/ 162$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HPFAR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_HPFAR_EL2,              \/\/ 458$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HPSTATE	./arch/sparc/miscregs.hh	/^    MISCREG_HPSTATE, \/* 30 *\/$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_HS	./arch/x86/regs/misc.hh	/^        MISCREG_HS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_HSCTLR	./arch/arm/miscregs.hh	/^        MISCREG_HSCTLR,                 \/\/ 118$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HSR	./arch/arm/miscregs.hh	/^        MISCREG_HSR,                    \/\/ 153$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HSTICK_CMPR	./arch/sparc/miscregs.hh	/^    MISCREG_HSTICK_CMPR,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_HSTR	./arch/arm/miscregs.hh	/^        MISCREG_HSTR,                   \/\/ 123$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HSTR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_HSTR_EL2,               \/\/ 406$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HS_ATTR	./arch/x86/regs/misc.hh	/^        MISCREG_HS_ATTR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_HS_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_HS_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_HS_EFF_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_HS_EFF_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_HS_LIMIT	./arch/x86/regs/misc.hh	/^        MISCREG_HS_LIMIT,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_HTBA	./arch/sparc/miscregs.hh	/^    MISCREG_HTBA,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_HTCR	./arch/arm/miscregs.hh	/^        MISCREG_HTCR,                   \/\/ 134$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HTPIDR	./arch/arm/miscregs.hh	/^        MISCREG_HTPIDR,                 \/\/ 282$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HTSTATE	./arch/sparc/miscregs.hh	/^    MISCREG_HTSTATE,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_HTTBR	./arch/arm/miscregs.hh	/^        MISCREG_HTTBR,                  \/\/ 308$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HVBAR	./arch/arm/miscregs.hh	/^        MISCREG_HVBAR,                  \/\/ 268$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_HVER	./arch/sparc/miscregs.hh	/^    MISCREG_HVER,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_HWRENA	./arch/mips/registers.hh	/^    MISCREG_HWRENA = 56,         \/\/Bank 7: 56-63$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_HYP_RD	./arch/arm/miscregs.hh	/^        MISCREG_HYP_RD,$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_HYP_WR	./arch/arm/miscregs.hh	/^        MISCREG_HYP_WR,$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_ICIALLU	./arch/arm/miscregs.hh	/^        MISCREG_ICIALLU,                \/\/ 168$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ICIALLUIS	./arch/arm/miscregs.hh	/^        MISCREG_ICIALLUIS,              \/\/ 163$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ICIMVAU	./arch/arm/miscregs.hh	/^        MISCREG_ICIMVAU,                \/\/ 169$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IC_IALLU	./arch/arm/miscregs.hh	/^        MISCREG_IC_IALLU,               \/\/ 462$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IC_IALLUIS	./arch/arm/miscregs.hh	/^        MISCREG_IC_IALLUIS,             \/\/ 460$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IC_IVAU_Xt	./arch/arm/miscregs.hh	/^        MISCREG_IC_IVAU_Xt,             \/\/ 472$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IDTR	./arch/x86/regs/misc.hh	/^        MISCREG_IDTR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_IDTR_ATTR	./arch/x86/regs/misc.hh	/^        MISCREG_IDTR_ATTR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_IDTR_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_IDTR_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_IDTR_EFF_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_IDTR_EFF_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_IDTR_LIMIT	./arch/x86/regs/misc.hh	/^        MISCREG_IDTR_LIMIT,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_ID_AA64AFR0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_AA64AFR0_EL1,        \/\/ 384$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_AA64AFR1_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_AA64AFR1_EL1,        \/\/ 385$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_AA64DFR0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_AA64DFR0_EL1,        \/\/ 382$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_AA64DFR1_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_AA64DFR1_EL1,        \/\/ 383$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_AA64ISAR0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_AA64ISAR0_EL1,       \/\/ 386$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_AA64ISAR1_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_AA64ISAR1_EL1,       \/\/ 387$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_AA64MMFR0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_AA64MMFR0_EL1,       \/\/ 388$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_AA64MMFR1_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_AA64MMFR1_EL1,       \/\/ 389$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_AA64PFR0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_AA64PFR0_EL1,        \/\/ 380$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_AA64PFR1_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_AA64PFR1_EL1,        \/\/ 381$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_AFR0	./arch/arm/miscregs.hh	/^        MISCREG_ID_AFR0,                \/\/  89$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_AFR0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_AFR0_EL1,            \/\/ 366$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_DFR0	./arch/arm/miscregs.hh	/^        MISCREG_ID_DFR0,                \/\/  88$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_DFR0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_DFR0_EL1,            \/\/ 365$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_ISAR0	./arch/arm/miscregs.hh	/^        MISCREG_ID_ISAR0,               \/\/  94$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_ISAR0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_ISAR0_EL1,           \/\/ 371$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_ISAR1	./arch/arm/miscregs.hh	/^        MISCREG_ID_ISAR1,               \/\/  95$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_ISAR1_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_ISAR1_EL1,           \/\/ 372$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_ISAR2	./arch/arm/miscregs.hh	/^        MISCREG_ID_ISAR2,               \/\/  96$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_ISAR2_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_ISAR2_EL1,           \/\/ 373$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_ISAR3	./arch/arm/miscregs.hh	/^        MISCREG_ID_ISAR3,               \/\/  97$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_ISAR3_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_ISAR3_EL1,           \/\/ 374$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_ISAR4	./arch/arm/miscregs.hh	/^        MISCREG_ID_ISAR4,               \/\/  98$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_ISAR4_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_ISAR4_EL1,           \/\/ 375$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_ISAR5	./arch/arm/miscregs.hh	/^        MISCREG_ID_ISAR5,               \/\/  99$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_ISAR5_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_ISAR5_EL1,           \/\/ 376$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_MMFR0	./arch/arm/miscregs.hh	/^        MISCREG_ID_MMFR0,               \/\/  90$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_MMFR0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_MMFR0_EL1,           \/\/ 367$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_MMFR1	./arch/arm/miscregs.hh	/^        MISCREG_ID_MMFR1,               \/\/  91$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_MMFR1_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_MMFR1_EL1,           \/\/ 368$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_MMFR2	./arch/arm/miscregs.hh	/^        MISCREG_ID_MMFR2,               \/\/  92$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_MMFR2_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_MMFR2_EL1,           \/\/ 369$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_MMFR3	./arch/arm/miscregs.hh	/^        MISCREG_ID_MMFR3,               \/\/  93$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_MMFR3_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_MMFR3_EL1,           \/\/ 370$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_PFR0	./arch/arm/miscregs.hh	/^        MISCREG_ID_PFR0,                \/\/  86$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_PFR0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_PFR0_EL1,            \/\/ 363$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_PFR1	./arch/arm/miscregs.hh	/^        MISCREG_ID_PFR1,                \/\/  87$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ID_PFR1_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ID_PFR1_EL1,            \/\/ 364$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IFAR	./arch/arm/miscregs.hh	/^        MISCREG_IFAR,                   \/\/ 157$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IFAR_NS	./arch/arm/miscregs.hh	/^        MISCREG_IFAR_NS,                \/\/ 158$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IFAR_S	./arch/arm/miscregs.hh	/^        MISCREG_IFAR_S,                 \/\/ 159$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IFSR	./arch/arm/miscregs.hh	/^        MISCREG_IFSR,                   \/\/ 142$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IFSR32_EL2	./arch/arm/miscregs.hh	/^        MISCREG_IFSR32_EL2,             \/\/ 448$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IFSR_NS	./arch/arm/miscregs.hh	/^        MISCREG_IFSR_NS,                \/\/ 143$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IFSR_S	./arch/arm/miscregs.hh	/^        MISCREG_IFSR_S,                 \/\/ 144$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IGNNE	./arch/x86/regs/misc.hh	/^        MISCREG_IGNNE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_IL1DATA0	./arch/arm/miscregs.hh	/^        MISCREG_IL1DATA0,               \/\/ 296$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IL1DATA0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_IL1DATA0_EL1,           \/\/ 584$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IL1DATA1	./arch/arm/miscregs.hh	/^        MISCREG_IL1DATA1,               \/\/ 297$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IL1DATA1_EL1	./arch/arm/miscregs.hh	/^        MISCREG_IL1DATA1_EL1,           \/\/ 585$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IL1DATA2	./arch/arm/miscregs.hh	/^        MISCREG_IL1DATA2,               \/\/ 298$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IL1DATA2_EL1	./arch/arm/miscregs.hh	/^        MISCREG_IL1DATA2_EL1,           \/\/ 586$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IL1DATA3	./arch/arm/miscregs.hh	/^        MISCREG_IL1DATA3,               \/\/ 299$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IL1DATA3_EL1	./arch/arm/miscregs.hh	/^        MISCREG_IL1DATA3_EL1,           \/\/ 587$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_IMPLEMENTED	./arch/arm/miscregs.hh	/^        MISCREG_IMPLEMENTED,$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_INDEX	./arch/mips/registers.hh	/^    MISCREG_INDEX = 0,       \/\/Bank 0: 0 - 3$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_INTCTL	./arch/mips/registers.hh	/^    MISCREG_INTCTL,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_INTR	./arch/alpha/registers.hh	/^    MISCREG_INTR,$/;"	e	enum:AlphaISA::MiscRegIndex
MISCREG_IORR_BASE	./arch/x86/regs/misc.hh	/^    MISCREG_IORR_BASE(int index)$/;"	f	namespace:X86ISA
MISCREG_IORR_BASE0	./arch/x86/regs/misc.hh	/^        MISCREG_IORR_BASE0 = MISCREG_IORR_BASE_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_IORR_BASE1	./arch/x86/regs/misc.hh	/^        MISCREG_IORR_BASE1,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_IORR_BASE_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_IORR_BASE_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_IORR_BASE_END	./arch/x86/regs/misc.hh	/^        MISCREG_IORR_BASE_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_IORR_MASK	./arch/x86/regs/misc.hh	/^    MISCREG_IORR_MASK(int index)$/;"	f	namespace:X86ISA
MISCREG_IORR_MASK0	./arch/x86/regs/misc.hh	/^        MISCREG_IORR_MASK0 = MISCREG_IORR_MASK_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_IORR_MASK1	./arch/x86/regs/misc.hh	/^        MISCREG_IORR_MASK1,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_IORR_MASK_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_IORR_MASK_BASE = MISCREG_IORR_BASE_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_IORR_MASK_END	./arch/x86/regs/misc.hh	/^        MISCREG_IORR_MASK_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_ISR	./arch/arm/miscregs.hh	/^        MISCREG_ISR,                    \/\/ 267$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ISR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_ISR_EL1,                \/\/ 542$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ITLBIALL	./arch/arm/miscregs.hh	/^        MISCREG_ITLBIALL,               \/\/ 198$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ITLBIASID	./arch/arm/miscregs.hh	/^        MISCREG_ITLBIASID,              \/\/ 200$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_ITLBIMVA	./arch/arm/miscregs.hh	/^        MISCREG_ITLBIMVA,               \/\/ 199$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_JIDR	./arch/arm/miscregs.hh	/^        MISCREG_JIDR,                   \/\/  76$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_JMCR	./arch/arm/miscregs.hh	/^        MISCREG_JMCR,                   \/\/  79$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_JOSCR	./arch/arm/miscregs.hh	/^        MISCREG_JOSCR,                  \/\/  78$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_KERNEL_GS_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_KERNEL_GS_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_L2ACTLR	./arch/arm/miscregs.hh	/^        MISCREG_L2ACTLR,                \/\/ 306$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_L2ACTLR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_L2ACTLR_EL1,            \/\/ 593$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_L2CTLR	./arch/arm/miscregs.hh	/^        MISCREG_L2CTLR,                 \/\/ 238$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_L2CTLR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_L2CTLR_EL1,             \/\/ 538$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_L2ECTLR	./arch/arm/miscregs.hh	/^        MISCREG_L2ECTLR,                \/\/ 239$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_L2ECTLR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_L2ECTLR_EL1,            \/\/ 539$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_L2MERRSR	./arch/arm/miscregs.hh	/^        MISCREG_L2MERRSR,               \/\/ 319$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_L2MERRSR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_L2MERRSR_EL1,           \/\/ 597$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_LAST_BRANCH_FROM_IP	./arch/x86/regs/misc.hh	/^        MISCREG_LAST_BRANCH_FROM_IP,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_LAST_BRANCH_TO_IP	./arch/x86/regs/misc.hh	/^        MISCREG_LAST_BRANCH_TO_IP,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_LAST_EXCEPTION_FROM_IP	./arch/x86/regs/misc.hh	/^        MISCREG_LAST_EXCEPTION_FROM_IP,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_LAST_EXCEPTION_TO_IP	./arch/x86/regs/misc.hh	/^        MISCREG_LAST_EXCEPTION_TO_IP,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_LLADDR	./arch/mips/registers.hh	/^    MISCREG_LLADDR = 136,        \/\/Bank 17: 136-143$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_LLFLAG	./arch/mips/registers.hh	/^    MISCREG_LLFLAG = 257,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_LOCKADDR	./arch/alpha/registers.hh	/^    MISCREG_LOCKADDR,$/;"	e	enum:AlphaISA::MiscRegIndex
MISCREG_LOCKADDR	./arch/arm/miscregs.hh	/^        MISCREG_LOCKADDR,               \/\/  19$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_LOCKFLAG	./arch/alpha/registers.hh	/^    MISCREG_LOCKFLAG,$/;"	e	enum:AlphaISA::MiscRegIndex
MISCREG_LOCKFLAG	./arch/arm/miscregs.hh	/^        MISCREG_LOCKFLAG,               \/\/  20$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_LS	./arch/x86/regs/misc.hh	/^        MISCREG_LS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_LSTAR	./arch/x86/regs/misc.hh	/^        MISCREG_LSTAR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_LS_ATTR	./arch/x86/regs/misc.hh	/^        MISCREG_LS_ATTR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_LS_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_LS_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_LS_EFF_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_LS_EFF_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_LS_LIMIT	./arch/x86/regs/misc.hh	/^        MISCREG_LS_LIMIT,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_M5_REG	./arch/x86/regs/misc.hh	/^        MISCREG_M5_REG,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MAIR0	./arch/arm/miscregs.hh	/^        MISCREG_MAIR0,                  \/\/ 243$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MAIR0_NS	./arch/arm/miscregs.hh	/^        MISCREG_MAIR0_NS,               \/\/ 244$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MAIR0_S	./arch/arm/miscregs.hh	/^        MISCREG_MAIR0_S,                \/\/ 245$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MAIR1	./arch/arm/miscregs.hh	/^        MISCREG_MAIR1,                  \/\/ 249$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MAIR1_NS	./arch/arm/miscregs.hh	/^        MISCREG_MAIR1_NS,               \/\/ 250$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MAIR1_S	./arch/arm/miscregs.hh	/^        MISCREG_MAIR1_S,                \/\/ 251$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MAIR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_MAIR_EL1,               \/\/ 532$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MAIR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_MAIR_EL2,               \/\/ 534$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MAIR_EL3	./arch/arm/miscregs.hh	/^        MISCREG_MAIR_EL3,               \/\/ 536$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MC0_ADDR	./arch/x86/regs/misc.hh	/^        MISCREG_MC0_ADDR = MISCREG_MC_ADDR_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC0_CTL	./arch/x86/regs/misc.hh	/^        MISCREG_MC0_CTL = MISCREG_MC_CTL_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC0_MISC	./arch/x86/regs/misc.hh	/^        MISCREG_MC0_MISC = MISCREG_MC_MISC_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC0_STATUS	./arch/x86/regs/misc.hh	/^        MISCREG_MC0_STATUS = MISCREG_MC_STATUS_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC1_ADDR	./arch/x86/regs/misc.hh	/^        MISCREG_MC1_ADDR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC1_CTL	./arch/x86/regs/misc.hh	/^        MISCREG_MC1_CTL,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC1_MISC	./arch/x86/regs/misc.hh	/^        MISCREG_MC1_MISC,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC1_STATUS	./arch/x86/regs/misc.hh	/^        MISCREG_MC1_STATUS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC2_ADDR	./arch/x86/regs/misc.hh	/^        MISCREG_MC2_ADDR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC2_CTL	./arch/x86/regs/misc.hh	/^        MISCREG_MC2_CTL,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC2_MISC	./arch/x86/regs/misc.hh	/^        MISCREG_MC2_MISC,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC2_STATUS	./arch/x86/regs/misc.hh	/^        MISCREG_MC2_STATUS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC3_ADDR	./arch/x86/regs/misc.hh	/^        MISCREG_MC3_ADDR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC3_CTL	./arch/x86/regs/misc.hh	/^        MISCREG_MC3_CTL,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC3_MISC	./arch/x86/regs/misc.hh	/^        MISCREG_MC3_MISC,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC3_STATUS	./arch/x86/regs/misc.hh	/^        MISCREG_MC3_STATUS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC4_ADDR	./arch/x86/regs/misc.hh	/^        MISCREG_MC4_ADDR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC4_CTL	./arch/x86/regs/misc.hh	/^        MISCREG_MC4_CTL,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC4_MISC	./arch/x86/regs/misc.hh	/^        MISCREG_MC4_MISC,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC4_STATUS	./arch/x86/regs/misc.hh	/^        MISCREG_MC4_STATUS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC5_ADDR	./arch/x86/regs/misc.hh	/^        MISCREG_MC5_ADDR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC5_CTL	./arch/x86/regs/misc.hh	/^        MISCREG_MC5_CTL,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC5_MISC	./arch/x86/regs/misc.hh	/^        MISCREG_MC5_MISC,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC5_STATUS	./arch/x86/regs/misc.hh	/^        MISCREG_MC5_STATUS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC6_ADDR	./arch/x86/regs/misc.hh	/^        MISCREG_MC6_ADDR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC6_CTL	./arch/x86/regs/misc.hh	/^        MISCREG_MC6_CTL,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC6_MISC	./arch/x86/regs/misc.hh	/^        MISCREG_MC6_MISC,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC6_STATUS	./arch/x86/regs/misc.hh	/^        MISCREG_MC6_STATUS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC7_ADDR	./arch/x86/regs/misc.hh	/^        MISCREG_MC7_ADDR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC7_CTL	./arch/x86/regs/misc.hh	/^        MISCREG_MC7_CTL,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC7_MISC	./arch/x86/regs/misc.hh	/^        MISCREG_MC7_MISC,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC7_STATUS	./arch/x86/regs/misc.hh	/^        MISCREG_MC7_STATUS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MCG_CAP	./arch/x86/regs/misc.hh	/^        MISCREG_MCG_CAP,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MCG_CTL	./arch/x86/regs/misc.hh	/^        MISCREG_MCG_CTL,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MCG_STATUS	./arch/x86/regs/misc.hh	/^        MISCREG_MCG_STATUS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC_ADDR	./arch/x86/regs/misc.hh	/^    MISCREG_MC_ADDR(int index)$/;"	f	namespace:X86ISA
MISCREG_MC_ADDR_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_MC_ADDR_BASE = MISCREG_MC_STATUS_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC_ADDR_END	./arch/x86/regs/misc.hh	/^        MISCREG_MC_ADDR_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC_CTL	./arch/x86/regs/misc.hh	/^    MISCREG_MC_CTL(int index)$/;"	f	namespace:X86ISA
MISCREG_MC_CTL_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_MC_CTL_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC_CTL_END	./arch/x86/regs/misc.hh	/^        MISCREG_MC_CTL_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC_MISC	./arch/x86/regs/misc.hh	/^    MISCREG_MC_MISC(int index)$/;"	f	namespace:X86ISA
MISCREG_MC_MISC_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_MC_MISC_BASE = MISCREG_MC_ADDR_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC_MISC_END	./arch/x86/regs/misc.hh	/^        MISCREG_MC_MISC_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC_STATUS	./arch/x86/regs/misc.hh	/^    MISCREG_MC_STATUS(int index)$/;"	f	namespace:X86ISA
MISCREG_MC_STATUS_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_MC_STATUS_BASE = MISCREG_MC_CTL_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MC_STATUS_END	./arch/x86/regs/misc.hh	/^        MISCREG_MC_STATUS_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MDCCINT_EL1	./arch/arm/miscregs.hh	/^        MISCREG_MDCCINT_EL1,            \/\/ 320$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MDCCSR_EL0	./arch/arm/miscregs.hh	/^        MISCREG_MDCCSR_EL0,             \/\/ 345$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MDCR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_MDCR_EL2,               \/\/ 404$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MDCR_EL3	./arch/arm/miscregs.hh	/^        MISCREG_MDCR_EL3,               \/\/ 413$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MDDTRRX_EL0	./arch/arm/miscregs.hh	/^        MISCREG_MDDTRRX_EL0,            \/\/ 348$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MDDTRTX_EL0	./arch/arm/miscregs.hh	/^        MISCREG_MDDTRTX_EL0,            \/\/ 347$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MDDTR_EL0	./arch/arm/miscregs.hh	/^        MISCREG_MDDTR_EL0,              \/\/ 346$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MDRAR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_MDRAR_EL1,              \/\/ 350$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MDSCR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_MDSCR_EL1,              \/\/ 322$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MIDR	./arch/arm/miscregs.hh	/^        MISCREG_MIDR,                   \/\/  80$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MIDR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_MIDR_EL1,               \/\/ 360$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MMU_LSU_CTRL	./arch/sparc/miscregs.hh	/^    MISCREG_MMU_LSU_CTRL,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_MMU_PART_ID	./arch/sparc/miscregs.hh	/^    MISCREG_MMU_PART_ID,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_MMU_P_CONTEXT	./arch/sparc/miscregs.hh	/^    MISCREG_MMU_P_CONTEXT,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_MMU_S_CONTEXT	./arch/sparc/miscregs.hh	/^    MISCREG_MMU_S_CONTEXT, \/* 40 *\/$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_MON_NS0_RD	./arch/arm/miscregs.hh	/^        MISCREG_MON_NS0_RD,$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_MON_NS0_WR	./arch/arm/miscregs.hh	/^        MISCREG_MON_NS0_WR,$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_MON_NS1_RD	./arch/arm/miscregs.hh	/^        MISCREG_MON_NS1_RD,$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_MON_NS1_WR	./arch/arm/miscregs.hh	/^        MISCREG_MON_NS1_WR,$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_MPIDR	./arch/arm/miscregs.hh	/^        MISCREG_MPIDR,                  \/\/  84$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MPIDR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_MPIDR_EL1,              \/\/ 361$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MS	./arch/x86/regs/misc.hh	/^        MISCREG_MS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MS_ATTR	./arch/x86/regs/misc.hh	/^        MISCREG_MS_ATTR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MS_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_MS_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MS_EFF_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_MS_EFF_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MS_LIMIT	./arch/x86/regs/misc.hh	/^        MISCREG_MS_LIMIT,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRRCAP	./arch/x86/regs/misc.hh	/^        MISCREG_MTRRCAP,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_FIX_16K_80000	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_FIX_16K_80000,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_FIX_16K_A0000	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_FIX_16K_A0000,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_FIX_4K_C0000	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_FIX_4K_C0000,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_FIX_4K_C8000	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_FIX_4K_C8000,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_FIX_4K_D0000	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_FIX_4K_D0000,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_FIX_4K_D8000	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_FIX_4K_D8000,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_FIX_4K_E0000	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_FIX_4K_E0000,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_FIX_4K_E8000	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_FIX_4K_E8000,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_FIX_4K_F0000	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_FIX_4K_F0000,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_FIX_4K_F8000	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_FIX_4K_F8000,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_FIX_64K_00000	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_FIX_64K_00000 = MISCREG_MTRR_PHYS_MASK_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_BASE	./arch/x86/regs/misc.hh	/^    MISCREG_MTRR_PHYS_BASE(int index)$/;"	f	namespace:X86ISA
MISCREG_MTRR_PHYS_BASE_0	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_BASE_0 = MISCREG_MTRR_PHYS_BASE_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_BASE_1	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_BASE_1,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_BASE_2	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_BASE_2,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_BASE_3	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_BASE_3,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_BASE_4	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_BASE_4,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_BASE_5	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_BASE_5,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_BASE_6	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_BASE_6,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_BASE_7	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_BASE_7,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_BASE_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_BASE_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_BASE_END	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_BASE_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_MASK	./arch/x86/regs/misc.hh	/^    MISCREG_MTRR_PHYS_MASK(int index)$/;"	f	namespace:X86ISA
MISCREG_MTRR_PHYS_MASK_0	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_MASK_0 = MISCREG_MTRR_PHYS_MASK_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_MASK_1	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_MASK_1,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_MASK_2	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_MASK_2,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_MASK_3	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_MASK_3,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_MASK_4	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_MASK_4,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_MASK_5	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_MASK_5,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_MASK_6	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_MASK_6,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_MASK_7	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_MASK_7,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_MASK_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_MASK_BASE = MISCREG_MTRR_PHYS_BASE_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MTRR_PHYS_MASK_END	./arch/x86/regs/misc.hh	/^        MISCREG_MTRR_PHYS_MASK_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_MUTEX	./arch/arm/miscregs.hh	/^        MISCREG_MUTEX,  \/\/ True if the register corresponds to a pair of$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_MVBAR	./arch/arm/miscregs.hh	/^        MISCREG_MVBAR,                  \/\/ 265$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MVFR0	./arch/arm/miscregs.hh	/^        MISCREG_MVFR0,                  \/\/  13$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MVFR0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_MVFR0_EL1,              \/\/ 377$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MVFR1	./arch/arm/miscregs.hh	/^        MISCREG_MVFR1,                  \/\/  12$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MVFR1_EL1	./arch/arm/miscregs.hh	/^        MISCREG_MVFR1_EL1,              \/\/ 378$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MVFR2_EL1	./arch/arm/miscregs.hh	/^        MISCREG_MVFR2_EL1,              \/\/ 379$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_MVP_CONF0	./arch/mips/registers.hh	/^    MISCREG_MVP_CONF0,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_MVP_CONF1	./arch/mips/registers.hh	/^    MISCREG_MVP_CONF1,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_MVP_CONTROL	./arch/mips/registers.hh	/^    MISCREG_MVP_CONTROL,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_MXCSR	./arch/x86/regs/misc.hh	/^        MISCREG_MXCSR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_NMRR	./arch/arm/miscregs.hh	/^        MISCREG_NMRR,                   \/\/ 246$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_NMRR_MAIR1	./arch/arm/miscregs.hh	/^        MISCREG_NMRR_MAIR1,             \/\/  24$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_NMRR_MAIR1_NS	./arch/arm/miscregs.hh	/^        MISCREG_NMRR_MAIR1_NS,          \/\/  25$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_NMRR_MAIR1_S	./arch/arm/miscregs.hh	/^        MISCREG_NMRR_MAIR1_S,           \/\/  26$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_NMRR_NS	./arch/arm/miscregs.hh	/^        MISCREG_NMRR_NS,                \/\/ 247$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_NMRR_S	./arch/arm/miscregs.hh	/^        MISCREG_NMRR_S,                 \/\/ 248$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_NOP	./arch/arm/miscregs.hh	/^        MISCREG_NOP,                    \/\/ 600$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_NSACR	./arch/arm/miscregs.hh	/^        MISCREG_NSACR,                  \/\/ 117$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_NUMMISCREGS	./arch/sparc/miscregs.hh	/^    MISCREG_NUMMISCREGS$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_NUMREGS	./arch/mips/registers.hh	/^    MISCREG_NUMREGS$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_NZCV	./arch/arm/miscregs.hh	/^        MISCREG_NZCV,                   \/\/ 429$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_OSDLR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_OSDLR_EL1,              \/\/ 353$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_OSDTRRX_EL1	./arch/arm/miscregs.hh	/^        MISCREG_OSDTRRX_EL1,            \/\/ 321$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_OSDTRTX_EL1	./arch/arm/miscregs.hh	/^        MISCREG_OSDTRTX_EL1,            \/\/ 323$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_OSECCR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_OSECCR_EL1,             \/\/ 324$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_OSLAR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_OSLAR_EL1,              \/\/ 351$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_OSLSR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_OSLSR_EL1,              \/\/ 352$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PAGEGRAIN	./arch/mips/registers.hh	/^    MISCREG_PAGEGRAIN = 41,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_PAGEMASK	./arch/mips/registers.hh	/^    MISCREG_PAGEMASK = 40, \/\/Bank 5: 40 - 41$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_PAR	./arch/arm/miscregs.hh	/^        MISCREG_PAR,                    \/\/ 165$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PAR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_PAR_EL1,                \/\/ 461$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PAR_NS	./arch/arm/miscregs.hh	/^        MISCREG_PAR_NS,                 \/\/ 166$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PAR_S	./arch/arm/miscregs.hh	/^        MISCREG_PAR_S,                  \/\/ 167$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PAT	./arch/x86/regs/misc.hh	/^        MISCREG_PAT,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_PCI_CONFIG_ADDRESS	./arch/x86/regs/misc.hh	/^        MISCREG_PCI_CONFIG_ADDRESS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_PCR	./arch/sparc/miscregs.hh	/^    MISCREG_PCR,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_PERFCNT0	./arch/mips/registers.hh	/^    MISCREG_PERFCNT0 = 200,    \/\/Bank 25: 200-207$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_PERFCNT1	./arch/mips/registers.hh	/^    MISCREG_PERFCNT1,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_PERFCNT2	./arch/mips/registers.hh	/^    MISCREG_PERFCNT2,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_PERFCNT3	./arch/mips/registers.hh	/^    MISCREG_PERFCNT3,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_PERFCNT4	./arch/mips/registers.hh	/^    MISCREG_PERFCNT4,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_PERFCNT5	./arch/mips/registers.hh	/^    MISCREG_PERFCNT5,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_PERFCNT6	./arch/mips/registers.hh	/^    MISCREG_PERFCNT6,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_PERFCNT7	./arch/mips/registers.hh	/^    MISCREG_PERFCNT7,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_PERF_EVT_CTR	./arch/x86/regs/misc.hh	/^    MISCREG_PERF_EVT_CTR(int index)$/;"	f	namespace:X86ISA
MISCREG_PERF_EVT_CTR0	./arch/x86/regs/misc.hh	/^        MISCREG_PERF_EVT_CTR0 = MISCREG_PERF_EVT_CTR_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_PERF_EVT_CTR1	./arch/x86/regs/misc.hh	/^        MISCREG_PERF_EVT_CTR1,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_PERF_EVT_CTR2	./arch/x86/regs/misc.hh	/^        MISCREG_PERF_EVT_CTR2,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_PERF_EVT_CTR3	./arch/x86/regs/misc.hh	/^        MISCREG_PERF_EVT_CTR3,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_PERF_EVT_CTR_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_PERF_EVT_CTR_BASE = MISCREG_PERF_EVT_SEL_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_PERF_EVT_CTR_END	./arch/x86/regs/misc.hh	/^        MISCREG_PERF_EVT_CTR_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_PERF_EVT_SEL	./arch/x86/regs/misc.hh	/^    MISCREG_PERF_EVT_SEL(int index)$/;"	f	namespace:X86ISA
MISCREG_PERF_EVT_SEL0	./arch/x86/regs/misc.hh	/^        MISCREG_PERF_EVT_SEL0 = MISCREG_PERF_EVT_SEL_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_PERF_EVT_SEL1	./arch/x86/regs/misc.hh	/^        MISCREG_PERF_EVT_SEL1,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_PERF_EVT_SEL2	./arch/x86/regs/misc.hh	/^        MISCREG_PERF_EVT_SEL2,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_PERF_EVT_SEL3	./arch/x86/regs/misc.hh	/^        MISCREG_PERF_EVT_SEL3,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_PERF_EVT_SEL_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_PERF_EVT_SEL_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_PERF_EVT_SEL_END	./arch/x86/regs/misc.hh	/^        MISCREG_PERF_EVT_SEL_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_PIC	./arch/sparc/miscregs.hh	/^    MISCREG_PIC,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_PIL	./arch/sparc/miscregs.hh	/^    MISCREG_PIL,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_PMCCFILTR	./arch/arm/miscregs.hh	/^        MISCREG_PMCCFILTR,              \/\/ 232$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMCCFILTR_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMCCFILTR_EL0,          \/\/ 528$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMCCNTR	./arch/arm/miscregs.hh	/^        MISCREG_PMCCNTR,                \/\/ 230$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMCCNTR_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMCCNTR_EL0,            \/\/ 526$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMCEID0	./arch/arm/miscregs.hh	/^        MISCREG_PMCEID0,                \/\/ 228$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMCEID0_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMCEID0_EL0,            \/\/ 524$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMCEID1	./arch/arm/miscregs.hh	/^        MISCREG_PMCEID1,                \/\/ 229$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMCEID1_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMCEID1_EL0,            \/\/ 525$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMCNTENCLR	./arch/arm/miscregs.hh	/^        MISCREG_PMCNTENCLR,             \/\/ 224$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMCNTENCLR_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMCNTENCLR_EL0,         \/\/ 520$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMCNTENSET	./arch/arm/miscregs.hh	/^        MISCREG_PMCNTENSET,             \/\/ 223$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMCNTENSET_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMCNTENSET_EL0,         \/\/ 519$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMCR	./arch/arm/miscregs.hh	/^        MISCREG_PMCR,                   \/\/ 222$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMCR_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMCR_EL0,               \/\/ 518$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMEVCNTR0_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMEVCNTR0_EL0,          \/\/ 564$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMEVCNTR1_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMEVCNTR1_EL0,          \/\/ 565$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMEVCNTR2_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMEVCNTR2_EL0,          \/\/ 566$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMEVCNTR3_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMEVCNTR3_EL0,          \/\/ 567$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMEVCNTR4_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMEVCNTR4_EL0,          \/\/ 568$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMEVCNTR5_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMEVCNTR5_EL0,          \/\/ 569$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMEVTYPER0_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMEVTYPER0_EL0,         \/\/ 570$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMEVTYPER1_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMEVTYPER1_EL0,         \/\/ 571$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMEVTYPER2_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMEVTYPER2_EL0,         \/\/ 572$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMEVTYPER3_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMEVTYPER3_EL0,         \/\/ 573$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMEVTYPER4_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMEVTYPER4_EL0,         \/\/ 574$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMEVTYPER5_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMEVTYPER5_EL0,         \/\/ 575$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMINTENCLR	./arch/arm/miscregs.hh	/^        MISCREG_PMINTENCLR,             \/\/ 236$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMINTENCLR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_PMINTENCLR_EL1,         \/\/ 517$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMINTENSET	./arch/arm/miscregs.hh	/^        MISCREG_PMINTENSET,             \/\/ 235$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMINTENSET_EL1	./arch/arm/miscregs.hh	/^        MISCREG_PMINTENSET_EL1,         \/\/ 516$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMOVSCLR_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMOVSCLR_EL0,           \/\/ 521$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMOVSR	./arch/arm/miscregs.hh	/^        MISCREG_PMOVSR,                 \/\/ 225$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMOVSSET	./arch/arm/miscregs.hh	/^        MISCREG_PMOVSSET,               \/\/ 237$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMOVSSET_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMOVSSET_EL0,           \/\/ 531$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMSELR	./arch/arm/miscregs.hh	/^        MISCREG_PMSELR,                 \/\/ 227$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMSELR_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMSELR_EL0,             \/\/ 523$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMSWINC	./arch/arm/miscregs.hh	/^        MISCREG_PMSWINC,                \/\/ 226$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMSWINC_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMSWINC_EL0,            \/\/ 522$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMUSERENR	./arch/arm/miscregs.hh	/^        MISCREG_PMUSERENR,              \/\/ 234$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMUSERENR_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMUSERENR_EL0,          \/\/ 530$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMXEVCNTR	./arch/arm/miscregs.hh	/^        MISCREG_PMXEVCNTR,              \/\/ 233$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMXEVCNTR_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMXEVCNTR_EL0,          \/\/ 529$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMXEVTYPER	./arch/arm/miscregs.hh	/^        MISCREG_PMXEVTYPER,             \/\/ 231$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMXEVTYPER_EL0	./arch/arm/miscregs.hh	/^        MISCREG_PMXEVTYPER_EL0,         \/\/ 527$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PMXEVTYPER_PMCCFILTR	./arch/arm/miscregs.hh	/^        MISCREG_PMXEVTYPER_PMCCFILTR,   \/\/  27$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PRID	./arch/mips/registers.hh	/^    MISCREG_PRID = 120,          \/\/Bank 15: 120-127,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_PRIVTICK	./arch/sparc/miscregs.hh	/^    MISCREG_PRIVTICK,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_PRI_NS_RD	./arch/arm/miscregs.hh	/^        MISCREG_PRI_NS_RD,$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_PRI_NS_WR	./arch/arm/miscregs.hh	/^        MISCREG_PRI_NS_WR,$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_PRI_S_RD	./arch/arm/miscregs.hh	/^        MISCREG_PRI_S_RD,$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_PRI_S_WR	./arch/arm/miscregs.hh	/^        MISCREG_PRI_S_WR,$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_PRRR	./arch/arm/miscregs.hh	/^        MISCREG_PRRR,                   \/\/ 240$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PRRR_MAIR0	./arch/arm/miscregs.hh	/^        MISCREG_PRRR_MAIR0,             \/\/  21$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PRRR_MAIR0_NS	./arch/arm/miscregs.hh	/^        MISCREG_PRRR_MAIR0_NS,          \/\/  22$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PRRR_MAIR0_S	./arch/arm/miscregs.hh	/^        MISCREG_PRRR_MAIR0_S,           \/\/  23$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PRRR_NS	./arch/arm/miscregs.hh	/^        MISCREG_PRRR_NS,                \/\/ 241$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PRRR_S	./arch/arm/miscregs.hh	/^        MISCREG_PRRR_S,                 \/\/ 242$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_PSTATE	./arch/sparc/miscregs.hh	/^    MISCREG_PSTATE, \/* 20 *\/$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_QUEUE_CPU_MONDO_HEAD	./arch/sparc/miscregs.hh	/^    MISCREG_QUEUE_CPU_MONDO_HEAD,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_QUEUE_CPU_MONDO_TAIL	./arch/sparc/miscregs.hh	/^    MISCREG_QUEUE_CPU_MONDO_TAIL,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_QUEUE_DEV_MONDO_HEAD	./arch/sparc/miscregs.hh	/^    MISCREG_QUEUE_DEV_MONDO_HEAD, \/* 70 *\/$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_QUEUE_DEV_MONDO_TAIL	./arch/sparc/miscregs.hh	/^    MISCREG_QUEUE_DEV_MONDO_TAIL,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_QUEUE_NRES_ERROR_HEAD	./arch/sparc/miscregs.hh	/^    MISCREG_QUEUE_NRES_ERROR_HEAD,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_QUEUE_NRES_ERROR_TAIL	./arch/sparc/miscregs.hh	/^    MISCREG_QUEUE_NRES_ERROR_TAIL,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_QUEUE_RES_ERROR_HEAD	./arch/sparc/miscregs.hh	/^    MISCREG_QUEUE_RES_ERROR_HEAD,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_QUEUE_RES_ERROR_TAIL	./arch/sparc/miscregs.hh	/^    MISCREG_QUEUE_RES_ERROR_TAIL,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_RAMINDEX	./arch/arm/miscregs.hh	/^        MISCREG_RAMINDEX,               \/\/ 305$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_RAZ	./arch/arm/miscregs.hh	/^        MISCREG_RAZ,                    \/\/ 601$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_REVIDR	./arch/arm/miscregs.hh	/^        MISCREG_REVIDR,                 \/\/  85$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_REVIDR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_REVIDR_EL1,             \/\/ 362$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_RFLAGS	./arch/x86/regs/misc.hh	/^        MISCREG_RFLAGS = MISCREG_DR_BASE + NumDRegs,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_RMR	./arch/arm/miscregs.hh	/^        MISCREG_RMR,                    \/\/ 266$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_RMR_EL3	./arch/arm/miscregs.hh	/^        MISCREG_RMR_EL3,                \/\/ 547$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_RVBAR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_RVBAR_EL1,              \/\/ 541$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_RVBAR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_RVBAR_EL2,              \/\/ 544$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_RVBAR_EL3	./arch/arm/miscregs.hh	/^        MISCREG_RVBAR_EL3,              \/\/ 546$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SCR	./arch/arm/miscregs.hh	/^        MISCREG_SCR,                    \/\/ 115$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SCRATCHPAD_R0	./arch/sparc/miscregs.hh	/^    MISCREG_SCRATCHPAD_R0, \/* 60 *\/$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_SCRATCHPAD_R1	./arch/sparc/miscregs.hh	/^    MISCREG_SCRATCHPAD_R1,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_SCRATCHPAD_R2	./arch/sparc/miscregs.hh	/^    MISCREG_SCRATCHPAD_R2,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_SCRATCHPAD_R3	./arch/sparc/miscregs.hh	/^    MISCREG_SCRATCHPAD_R3,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_SCRATCHPAD_R4	./arch/sparc/miscregs.hh	/^    MISCREG_SCRATCHPAD_R4,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_SCRATCHPAD_R5	./arch/sparc/miscregs.hh	/^    MISCREG_SCRATCHPAD_R5,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_SCRATCHPAD_R6	./arch/sparc/miscregs.hh	/^    MISCREG_SCRATCHPAD_R6,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_SCRATCHPAD_R7	./arch/sparc/miscregs.hh	/^    MISCREG_SCRATCHPAD_R7,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_SCR_EL3	./arch/arm/miscregs.hh	/^        MISCREG_SCR_EL3,                \/\/ 410$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SCTLR	./arch/arm/miscregs.hh	/^        MISCREG_SCTLR,                  \/\/ 108$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SCTLR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_SCTLR_EL1,              \/\/ 398$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SCTLR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_SCTLR_EL2,              \/\/ 401$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SCTLR_EL3	./arch/arm/miscregs.hh	/^        MISCREG_SCTLR_EL3,              \/\/ 408$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SCTLR_NS	./arch/arm/miscregs.hh	/^        MISCREG_SCTLR_NS,               \/\/ 109$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SCTLR_RST	./arch/arm/miscregs.hh	/^        MISCREG_SCTLR_RST,              \/\/  28$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SCTLR_S	./arch/arm/miscregs.hh	/^        MISCREG_SCTLR_S,                \/\/ 110$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SDER	./arch/arm/miscregs.hh	/^        MISCREG_SDER,                   \/\/ 116$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SDER32_EL3	./arch/arm/miscregs.hh	/^        MISCREG_SDER32_EL3,             \/\/ 411$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SEG_ATTR	./arch/x86/regs/misc.hh	/^    MISCREG_SEG_ATTR(int index)$/;"	f	namespace:X86ISA
MISCREG_SEG_ATTR_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_SEG_ATTR_BASE = MISCREG_SEG_LIMIT_BASE + NUM_SEGMENTREGS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_SEG_BASE	./arch/x86/regs/misc.hh	/^    MISCREG_SEG_BASE(int index)$/;"	f	namespace:X86ISA
MISCREG_SEG_BASE_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_SEG_BASE_BASE = MISCREG_SEG_SEL_BASE + NUM_SEGMENTREGS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_SEG_EFF_BASE	./arch/x86/regs/misc.hh	/^    MISCREG_SEG_EFF_BASE(int index)$/;"	f	namespace:X86ISA
MISCREG_SEG_EFF_BASE_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_SEG_EFF_BASE_BASE = MISCREG_SEG_BASE_BASE + NUM_SEGMENTREGS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_SEG_LIMIT	./arch/x86/regs/misc.hh	/^    MISCREG_SEG_LIMIT(int index)$/;"	f	namespace:X86ISA
MISCREG_SEG_LIMIT_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_SEG_LIMIT_BASE = MISCREG_SEG_EFF_BASE_BASE + NUM_SEGMENTREGS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_SEG_SEL	./arch/x86/regs/misc.hh	/^    MISCREG_SEG_SEL(int index)$/;"	f	namespace:X86ISA
MISCREG_SEG_SEL_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_SEG_SEL_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_SEV_MAILBOX	./arch/arm/miscregs.hh	/^        MISCREG_SEV_MAILBOX,            \/\/  29$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SF_MASK	./arch/x86/regs/misc.hh	/^        MISCREG_SF_MASK,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_SMM_CTL	./arch/x86/regs/misc.hh	/^        MISCREG_SMM_CTL,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_SOFTINT	./arch/sparc/miscregs.hh	/^    MISCREG_SOFTINT, \/* 10 *\/$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_SOFTINT_CLR	./arch/sparc/miscregs.hh	/^    MISCREG_SOFTINT_CLR,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_SOFTINT_SET	./arch/sparc/miscregs.hh	/^    MISCREG_SOFTINT_SET,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_SPSEL	./arch/arm/miscregs.hh	/^        MISCREG_SPSEL,                  \/\/ 427$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SPSR	./arch/arm/miscregs.hh	/^        MISCREG_SPSR,                   \/\/   1$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SPSR_ABT	./arch/arm/miscregs.hh	/^        MISCREG_SPSR_ABT,               \/\/   6$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SPSR_ABT_AA64	./arch/arm/miscregs.hh	/^        MISCREG_SPSR_ABT_AA64,          \/\/ 439$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SPSR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_SPSR_EL1,               \/\/ 424$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SPSR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_SPSR_EL2,               \/\/ 435$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SPSR_EL3	./arch/arm/miscregs.hh	/^        MISCREG_SPSR_EL3,               \/\/ 442$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SPSR_FIQ	./arch/arm/miscregs.hh	/^        MISCREG_SPSR_FIQ,               \/\/   2$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SPSR_FIQ_AA64	./arch/arm/miscregs.hh	/^        MISCREG_SPSR_FIQ_AA64,          \/\/ 441$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SPSR_HYP	./arch/arm/miscregs.hh	/^        MISCREG_SPSR_HYP,               \/\/   7$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SPSR_IRQ	./arch/arm/miscregs.hh	/^        MISCREG_SPSR_IRQ,               \/\/   3$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SPSR_IRQ_AA64	./arch/arm/miscregs.hh	/^        MISCREG_SPSR_IRQ_AA64,          \/\/ 438$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SPSR_MON	./arch/arm/miscregs.hh	/^        MISCREG_SPSR_MON,               \/\/   5$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SPSR_SVC	./arch/arm/miscregs.hh	/^        MISCREG_SPSR_SVC,               \/\/   4$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SPSR_UND	./arch/arm/miscregs.hh	/^        MISCREG_SPSR_UND,               \/\/   8$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SPSR_UND_AA64	./arch/arm/miscregs.hh	/^        MISCREG_SPSR_UND_AA64,          \/\/ 440$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SP_EL0	./arch/arm/miscregs.hh	/^        MISCREG_SP_EL0,                 \/\/ 426$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SP_EL1	./arch/arm/miscregs.hh	/^        MISCREG_SP_EL1,                 \/\/ 437$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SP_EL2	./arch/arm/miscregs.hh	/^        MISCREG_SP_EL2,                 \/\/ 444$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_SRSCTL	./arch/mips/registers.hh	/^    MISCREG_SRSCTL,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_SRSMAP	./arch/mips/registers.hh	/^    MISCREG_SRSMAP,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_SRS_CONF0	./arch/mips/registers.hh	/^    MISCREG_SRS_CONF0,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_SRS_CONF1	./arch/mips/registers.hh	/^    MISCREG_SRS_CONF1,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_SRS_CONF2	./arch/mips/registers.hh	/^    MISCREG_SRS_CONF2,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_SRS_CONF3	./arch/mips/registers.hh	/^    MISCREG_SRS_CONF3,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_SRS_CONF4	./arch/mips/registers.hh	/^    MISCREG_SRS_CONF4,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_SS	./arch/x86/regs/misc.hh	/^        MISCREG_SS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_SS_ATTR	./arch/x86/regs/misc.hh	/^        MISCREG_SS_ATTR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_SS_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_SS_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_SS_EFF_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_SS_EFF_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_SS_LIMIT	./arch/x86/regs/misc.hh	/^        MISCREG_SS_LIMIT,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_STAR	./arch/x86/regs/misc.hh	/^        MISCREG_STAR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_STATUS	./arch/mips/registers.hh	/^    MISCREG_STATUS = 96,         \/\/Bank 12: 96-103$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_STICK	./arch/sparc/miscregs.hh	/^    MISCREG_STICK,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_STICK_CMPR	./arch/sparc/miscregs.hh	/^    MISCREG_STICK_CMPR,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_STRAND_STS_REG	./arch/sparc/miscregs.hh	/^    MISCREG_STRAND_STS_REG,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_SYSCFG	./arch/x86/regs/misc.hh	/^        MISCREG_SYSCFG = MISCREG_PERF_EVT_CTR_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_SYSENTER_CS	./arch/x86/regs/misc.hh	/^        MISCREG_SYSENTER_CS,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_SYSENTER_EIP	./arch/x86/regs/misc.hh	/^        MISCREG_SYSENTER_EIP,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_SYSENTER_ESP	./arch/x86/regs/misc.hh	/^        MISCREG_SYSENTER_ESP,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TAGHI0	./arch/mips/registers.hh	/^    MISCREG_TAGHI0 = 232,      \/\/Bank 29: 232-239$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TAGHI2	./arch/mips/registers.hh	/^    MISCREG_TAGHI2,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TAGHI4	./arch/mips/registers.hh	/^    MISCREG_TAGHI4,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TAGHI6	./arch/mips/registers.hh	/^    MISCREG_TAGHI6,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TAGLO0	./arch/mips/registers.hh	/^    MISCREG_TAGLO0 = 224,      \/\/Bank 28: 224-231$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TAGLO2	./arch/mips/registers.hh	/^    MISCREG_TAGLO2,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TAGLO4	./arch/mips/registers.hh	/^    MISCREG_TAGLO4,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TAGLO6	./arch/mips/registers.hh	/^    MISCREG_TAGLO6,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TBA	./arch/sparc/miscregs.hh	/^    MISCREG_TBA,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_TCMTR	./arch/arm/miscregs.hh	/^        MISCREG_TCMTR,                  \/\/  82$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TCR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_TCR_EL1,                \/\/ 416$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TCR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_TCR_EL2,                \/\/ 418$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TCR_EL3	./arch/arm/miscregs.hh	/^        MISCREG_TCR_EL3,                \/\/ 422$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TC_BIND	./arch/mips/registers.hh	/^    MISCREG_TC_BIND,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TC_CONTEXT	./arch/mips/registers.hh	/^    MISCREG_TC_CONTEXT,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TC_HALT	./arch/mips/registers.hh	/^    MISCREG_TC_HALT,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TC_RESTART	./arch/mips/registers.hh	/^    MISCREG_TC_RESTART,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TC_SCHEDULE	./arch/mips/registers.hh	/^    MISCREG_TC_SCHEDULE,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TC_SCHEFBACK	./arch/mips/registers.hh	/^    MISCREG_TC_SCHEFBACK,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TC_STATUS	./arch/mips/registers.hh	/^    MISCREG_TC_STATUS,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TEECR	./arch/arm/miscregs.hh	/^        MISCREG_TEECR,                  \/\/  75$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TEECR32_EL1	./arch/arm/miscregs.hh	/^        MISCREG_TEECR32_EL1,            \/\/ 358$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TEEHBR	./arch/arm/miscregs.hh	/^        MISCREG_TEEHBR,                 \/\/  77$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TEEHBR32_EL1	./arch/arm/miscregs.hh	/^        MISCREG_TEEHBR32_EL1,           \/\/ 359$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TICK	./arch/sparc/miscregs.hh	/^    MISCREG_TICK,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_TICK_CMPR	./arch/sparc/miscregs.hh	/^    MISCREG_TICK_CMPR,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_TL	./arch/sparc/miscregs.hh	/^    MISCREG_TL,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_TLBIALL	./arch/arm/miscregs.hh	/^        MISCREG_TLBIALL,                \/\/ 204$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIALLH	./arch/arm/miscregs.hh	/^        MISCREG_TLBIALLH,               \/\/ 218$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIALLHIS	./arch/arm/miscregs.hh	/^        MISCREG_TLBIALLHIS,             \/\/ 212$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIALLIS	./arch/arm/miscregs.hh	/^        MISCREG_TLBIALLIS,              \/\/ 192$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIALLNSNH	./arch/arm/miscregs.hh	/^        MISCREG_TLBIALLNSNH,            \/\/ 220$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIALLNSNHIS	./arch/arm/miscregs.hh	/^        MISCREG_TLBIALLNSNHIS,          \/\/ 214$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIASID	./arch/arm/miscregs.hh	/^        MISCREG_TLBIASID,               \/\/ 206$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIASIDIS	./arch/arm/miscregs.hh	/^        MISCREG_TLBIASIDIS,             \/\/ 194$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIIPAS2	./arch/arm/miscregs.hh	/^        MISCREG_TLBIIPAS2,              \/\/ 216$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIIPAS2IS	./arch/arm/miscregs.hh	/^        MISCREG_TLBIIPAS2IS,            \/\/ 210$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIIPAS2L	./arch/arm/miscregs.hh	/^        MISCREG_TLBIIPAS2L,             \/\/ 217$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIIPAS2LIS	./arch/arm/miscregs.hh	/^        MISCREG_TLBIIPAS2LIS,           \/\/ 211$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIMVA	./arch/arm/miscregs.hh	/^        MISCREG_TLBIMVA,                \/\/ 205$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIMVAA	./arch/arm/miscregs.hh	/^        MISCREG_TLBIMVAA,               \/\/ 207$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIMVAAIS	./arch/arm/miscregs.hh	/^        MISCREG_TLBIMVAAIS,             \/\/ 195$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIMVAAL	./arch/arm/miscregs.hh	/^        MISCREG_TLBIMVAAL,              \/\/ 209$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIMVAALIS	./arch/arm/miscregs.hh	/^        MISCREG_TLBIMVAALIS,            \/\/ 197$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIMVAH	./arch/arm/miscregs.hh	/^        MISCREG_TLBIMVAH,               \/\/ 219$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIMVAHIS	./arch/arm/miscregs.hh	/^        MISCREG_TLBIMVAHIS,             \/\/ 213$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIMVAIS	./arch/arm/miscregs.hh	/^        MISCREG_TLBIMVAIS,              \/\/ 193$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIMVAL	./arch/arm/miscregs.hh	/^        MISCREG_TLBIMVAL,               \/\/ 208$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIMVALH	./arch/arm/miscregs.hh	/^        MISCREG_TLBIMVALH,              \/\/ 221$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIMVALHIS	./arch/arm/miscregs.hh	/^        MISCREG_TLBIMVALHIS,            \/\/ 215$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBIMVALIS	./arch/arm/miscregs.hh	/^        MISCREG_TLBIMVALIS,             \/\/ 196$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_ALLE1	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_ALLE1,             \/\/ 507$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_ALLE1IS	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_ALLE1IS,           \/\/ 500$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_ALLE2	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_ALLE2,             \/\/ 505$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_ALLE2IS	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_ALLE2IS,           \/\/ 498$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_ALLE3	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_ALLE3,             \/\/ 513$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_ALLE3IS	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_ALLE3IS,           \/\/ 510$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_ASIDE1IS_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_ASIDE1IS_Xt,       \/\/ 486$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_ASIDE1_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_ASIDE1_Xt,         \/\/ 492$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_IPAS2E1IS_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_IPAS2E1IS_Xt,      \/\/ 496$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_IPAS2E1_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_IPAS2E1_Xt,        \/\/ 503$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_IPAS2LE1IS_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_IPAS2LE1IS_Xt,     \/\/ 497$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_IPAS2LE1_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_IPAS2LE1_Xt,       \/\/ 504$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VAAE1IS_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VAAE1IS_Xt,        \/\/ 487$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VAAE1_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VAAE1_Xt,          \/\/ 493$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VAALE1IS_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VAALE1IS_Xt,       \/\/ 489$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VAALE1_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VAALE1_Xt,         \/\/ 495$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VAE1IS_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VAE1IS_Xt,         \/\/ 485$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VAE1_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VAE1_Xt,           \/\/ 491$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VAE2IS_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VAE2IS_Xt,         \/\/ 499$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VAE2_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VAE2_Xt,           \/\/ 506$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VAE3IS_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VAE3IS_Xt,         \/\/ 511$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VAE3_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VAE3_Xt,           \/\/ 514$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VALE1IS_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VALE1IS_Xt,        \/\/ 488$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VALE1_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VALE1_Xt,          \/\/ 494$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VALE2IS_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VALE2IS_Xt,        \/\/ 501$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VALE2_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VALE2_Xt,          \/\/ 508$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VALE3IS_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VALE3IS_Xt,        \/\/ 512$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VALE3_Xt	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VALE3_Xt,          \/\/ 515$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VMALLE1	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VMALLE1,           \/\/ 490$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VMALLE1IS	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VMALLE1IS,         \/\/ 484$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VMALLS12E1	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VMALLS12E1,        \/\/ 509$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBI_VMALLS12E1IS	./arch/arm/miscregs.hh	/^        MISCREG_TLBI_VMALLS12E1IS,      \/\/ 502$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLBTR	./arch/arm/miscregs.hh	/^        MISCREG_TLBTR,                  \/\/  83$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TLB_DATA	./arch/sparc/miscregs.hh	/^    MISCREG_TLB_DATA,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_TNPC	./arch/sparc/miscregs.hh	/^    MISCREG_TNPC,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_TOP_MEM	./arch/x86/regs/misc.hh	/^        MISCREG_TOP_MEM = MISCREG_IORR_MASK_END,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TOP_MEM2	./arch/x86/regs/misc.hh	/^        MISCREG_TOP_MEM2,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TPC	./arch/sparc/miscregs.hh	/^    MISCREG_TPC,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_TPIDRPRW	./arch/arm/miscregs.hh	/^        MISCREG_TPIDRPRW,               \/\/ 279$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TPIDRPRW_NS	./arch/arm/miscregs.hh	/^        MISCREG_TPIDRPRW_NS,            \/\/ 280$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TPIDRPRW_S	./arch/arm/miscregs.hh	/^        MISCREG_TPIDRPRW_S,             \/\/ 281$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TPIDRRO_EL0	./arch/arm/miscregs.hh	/^        MISCREG_TPIDRRO_EL0,            \/\/ 551$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TPIDRURO	./arch/arm/miscregs.hh	/^        MISCREG_TPIDRURO,               \/\/ 276$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TPIDRURO_NS	./arch/arm/miscregs.hh	/^        MISCREG_TPIDRURO_NS,            \/\/ 277$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TPIDRURO_S	./arch/arm/miscregs.hh	/^        MISCREG_TPIDRURO_S,             \/\/ 278$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TPIDRURW	./arch/arm/miscregs.hh	/^        MISCREG_TPIDRURW,               \/\/ 273$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TPIDRURW_NS	./arch/arm/miscregs.hh	/^        MISCREG_TPIDRURW_NS,            \/\/ 274$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TPIDRURW_S	./arch/arm/miscregs.hh	/^        MISCREG_TPIDRURW_S,             \/\/ 275$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TPIDR_EL0	./arch/arm/miscregs.hh	/^        MISCREG_TPIDR_EL0,              \/\/ 550$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TPIDR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_TPIDR_EL1,              \/\/ 549$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TPIDR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_TPIDR_EL2,              \/\/ 552$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TPIDR_EL3	./arch/arm/miscregs.hh	/^        MISCREG_TPIDR_EL3,              \/\/ 553$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TP_VALUE	./arch/mips/registers.hh	/^    MISCREG_TP_VALUE,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TR	./arch/x86/regs/misc.hh	/^        MISCREG_TR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TRACE_BPC	./arch/mips/registers.hh	/^    MISCREG_TRACE_BPC,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TRACE_CONTROL1	./arch/mips/registers.hh	/^    MISCREG_TRACE_CONTROL1,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TRACE_CONTROL2	./arch/mips/registers.hh	/^    MISCREG_TRACE_CONTROL2,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_TR_ATTR	./arch/x86/regs/misc.hh	/^        MISCREG_TR_ATTR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TR_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_TR_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TR_EFF_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_TR_EFF_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TR_LIMIT	./arch/x86/regs/misc.hh	/^        MISCREG_TR_LIMIT,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TSC	./arch/x86/regs/misc.hh	/^        MISCREG_TSC,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TSC_AUX	./arch/x86/regs/misc.hh	/^        MISCREG_TSC_AUX,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TSG	./arch/x86/regs/misc.hh	/^        MISCREG_TSG,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TSG_ATTR	./arch/x86/regs/misc.hh	/^        MISCREG_TSG_ATTR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TSG_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_TSG_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TSG_EFF_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_TSG_EFF_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TSG_LIMIT	./arch/x86/regs/misc.hh	/^        MISCREG_TSG_LIMIT,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TSL	./arch/x86/regs/misc.hh	/^        MISCREG_TSL,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TSL_ATTR	./arch/x86/regs/misc.hh	/^        MISCREG_TSL_ATTR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TSL_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_TSL_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TSL_EFF_BASE	./arch/x86/regs/misc.hh	/^        MISCREG_TSL_EFF_BASE,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TSL_LIMIT	./arch/x86/regs/misc.hh	/^        MISCREG_TSL_LIMIT,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_TSTATE	./arch/sparc/miscregs.hh	/^    MISCREG_TSTATE,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_TT	./arch/sparc/miscregs.hh	/^    MISCREG_TT,$/;"	e	enum:SparcISA::MiscRegIndex
MISCREG_TTBCR	./arch/arm/miscregs.hh	/^        MISCREG_TTBCR,                  \/\/ 131$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TTBCR_NS	./arch/arm/miscregs.hh	/^        MISCREG_TTBCR_NS,               \/\/ 132$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TTBCR_S	./arch/arm/miscregs.hh	/^        MISCREG_TTBCR_S,                \/\/ 133$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TTBR0	./arch/arm/miscregs.hh	/^        MISCREG_TTBR0,                  \/\/ 125$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TTBR0_EL1	./arch/arm/miscregs.hh	/^        MISCREG_TTBR0_EL1,              \/\/ 414$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TTBR0_EL2	./arch/arm/miscregs.hh	/^        MISCREG_TTBR0_EL2,              \/\/ 417$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TTBR0_EL3	./arch/arm/miscregs.hh	/^        MISCREG_TTBR0_EL3,              \/\/ 421$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TTBR0_NS	./arch/arm/miscregs.hh	/^        MISCREG_TTBR0_NS,               \/\/ 126$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TTBR0_S	./arch/arm/miscregs.hh	/^        MISCREG_TTBR0_S,                \/\/ 127$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TTBR1	./arch/arm/miscregs.hh	/^        MISCREG_TTBR1,                  \/\/ 128$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TTBR1_EL1	./arch/arm/miscregs.hh	/^        MISCREG_TTBR1_EL1,              \/\/ 415$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TTBR1_NS	./arch/arm/miscregs.hh	/^        MISCREG_TTBR1_NS,               \/\/ 129$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_TTBR1_S	./arch/arm/miscregs.hh	/^        MISCREG_TTBR1_S,                \/\/ 130$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_UNIQ	./arch/alpha/registers.hh	/^    MISCREG_UNIQ,$/;"	e	enum:AlphaISA::MiscRegIndex
MISCREG_UNKNOWN	./arch/arm/miscregs.hh	/^        MISCREG_UNKNOWN,                \/\/ 605$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_UNVERIFIABLE	./arch/arm/miscregs.hh	/^        MISCREG_UNVERIFIABLE,   \/\/ Does the value change on every read (e.g. a$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_USER_TRACE_DATA	./arch/mips/registers.hh	/^    MISCREG_USER_TRACE_DATA,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_USR_NS_RD	./arch/arm/miscregs.hh	/^        MISCREG_USR_NS_RD,$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_USR_NS_WR	./arch/arm/miscregs.hh	/^        MISCREG_USR_NS_WR,$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_USR_S_RD	./arch/arm/miscregs.hh	/^        MISCREG_USR_S_RD,$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_USR_S_WR	./arch/arm/miscregs.hh	/^        MISCREG_USR_S_WR,$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_VBAR	./arch/arm/miscregs.hh	/^        MISCREG_VBAR,                   \/\/ 262$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_VBAR_EL1	./arch/arm/miscregs.hh	/^        MISCREG_VBAR_EL1,               \/\/ 540$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_VBAR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_VBAR_EL2,               \/\/ 543$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_VBAR_EL3	./arch/arm/miscregs.hh	/^        MISCREG_VBAR_EL3,               \/\/ 545$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_VBAR_NS	./arch/arm/miscregs.hh	/^        MISCREG_VBAR_NS,                \/\/ 263$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_VBAR_S	./arch/arm/miscregs.hh	/^        MISCREG_VBAR_S,                 \/\/ 264$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_VMPIDR	./arch/arm/miscregs.hh	/^        MISCREG_VMPIDR,                 \/\/ 107$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_VMPIDR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_VMPIDR_EL2,             \/\/ 397$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_VM_CR	./arch/x86/regs/misc.hh	/^        MISCREG_VM_CR,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_VM_HSAVE_PA	./arch/x86/regs/misc.hh	/^        MISCREG_VM_HSAVE_PA,$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_VPE_CONF0	./arch/mips/registers.hh	/^    MISCREG_VPE_CONF0,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_VPE_CONF1	./arch/mips/registers.hh	/^    MISCREG_VPE_CONF1,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_VPE_CONTROL	./arch/mips/registers.hh	/^    MISCREG_VPE_CONTROL,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_VPE_OPT	./arch/mips/registers.hh	/^    MISCREG_VPE_OPT,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_VPE_SCHEDULE	./arch/mips/registers.hh	/^    MISCREG_VPE_SCHEDULE,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_VPE_SCHEFBACK	./arch/mips/registers.hh	/^    MISCREG_VPE_SCHEFBACK,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_VPIDR	./arch/arm/miscregs.hh	/^        MISCREG_VPIDR,                  \/\/ 106$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_VPIDR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_VPIDR_EL2,              \/\/ 396$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_VTCR	./arch/arm/miscregs.hh	/^        MISCREG_VTCR,                   \/\/ 135$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_VTCR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_VTCR_EL2,               \/\/ 420$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_VTTBR	./arch/arm/miscregs.hh	/^        MISCREG_VTTBR,                  \/\/ 309$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_VTTBR_EL2	./arch/arm/miscregs.hh	/^        MISCREG_VTTBR_EL2,              \/\/ 419$/;"	e	enum:ArmISA::MiscRegIndex
MISCREG_WARN_NOT_FAIL	./arch/arm/miscregs.hh	/^        MISCREG_WARN_NOT_FAIL,  \/\/ If MISCREG_IMPLEMENTED is deasserted, it$/;"	e	enum:ArmISA::MiscRegInfo
MISCREG_WATCHHI0	./arch/mips/registers.hh	/^    MISCREG_WATCHHI0 = 152,     \/\/Bank 19: 152-159$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_WATCHHI1	./arch/mips/registers.hh	/^    MISCREG_WATCHHI1,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_WATCHHI2	./arch/mips/registers.hh	/^    MISCREG_WATCHHI2,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_WATCHHI3	./arch/mips/registers.hh	/^    MISCREG_WATCHHI3,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_WATCHHI4	./arch/mips/registers.hh	/^    MISCREG_WATCHHI4,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_WATCHHI5	./arch/mips/registers.hh	/^    MISCREG_WATCHHI5,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_WATCHHI6	./arch/mips/registers.hh	/^    MISCREG_WATCHHI6,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_WATCHHI7	./arch/mips/registers.hh	/^    MISCREG_WATCHHI7,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_WATCHLO0	./arch/mips/registers.hh	/^    MISCREG_WATCHLO0 = 144,      \/\/Bank 18: 144-151$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_WATCHLO1	./arch/mips/registers.hh	/^    MISCREG_WATCHLO1,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_WATCHLO2	./arch/mips/registers.hh	/^    MISCREG_WATCHLO2,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_WATCHLO3	./arch/mips/registers.hh	/^    MISCREG_WATCHLO3,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_WATCHLO4	./arch/mips/registers.hh	/^    MISCREG_WATCHLO4,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_WATCHLO5	./arch/mips/registers.hh	/^    MISCREG_WATCHLO5,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_WATCHLO6	./arch/mips/registers.hh	/^    MISCREG_WATCHLO6,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_WATCHLO7	./arch/mips/registers.hh	/^    MISCREG_WATCHLO7,$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_WIRED	./arch/mips/registers.hh	/^    MISCREG_WIRED = 48,          \/\/Bank 6:48-55$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_X87_TOP	./arch/x86/regs/misc.hh	/^        MISCREG_X87_TOP =$/;"	e	enum:X86ISA::MiscRegIndex
MISCREG_XCCONTEXT64	./arch/mips/registers.hh	/^    MISCREG_XCCONTEXT64 = 160, \/\/Bank 20: 160-167$/;"	e	enum:MipsISA::MiscRegIndex
MISCREG_YQMASK	./arch/mips/registers.hh	/^    MISCREG_YQMASK,$/;"	e	enum:MipsISA::MiscRegIndex
MMIORegionPhysAddr	./arch/x86/system.hh	/^    const uint64_t MMIORegionPhysAddr = 0xffff0000;$/;"	m	namespace:X86ISA
MMIORegionVirtAddr	./arch/x86/system.hh	/^    const uint64_t MMIORegionVirtAddr = 0xffffc90000000000;$/;"	m	namespace:X86ISA
MM_STAT_ACV_MASK	./arch/alpha/ev5.hh	/^const uint64_t MM_STAT_ACV_MASK = ULL(0x0002);$/;"	m	namespace:AlphaISA
MM_STAT_BAD_VA_MASK	./arch/alpha/ev5.hh	/^const uint64_t MM_STAT_BAD_VA_MASK = ULL(0x0020);$/;"	m	namespace:AlphaISA
MM_STAT_DTB_MISS_MASK	./arch/alpha/ev5.hh	/^const uint64_t MM_STAT_DTB_MISS_MASK = ULL(0x0010);$/;"	m	namespace:AlphaISA
MM_STAT_FONR_MASK	./arch/alpha/ev5.hh	/^const uint64_t MM_STAT_FONR_MASK = ULL(0x0004);$/;"	m	namespace:AlphaISA
MM_STAT_FONW_MASK	./arch/alpha/ev5.hh	/^const uint64_t MM_STAT_FONW_MASK = ULL(0x0008);$/;"	m	namespace:AlphaISA
MM_STAT_WR_MASK	./arch/alpha/ev5.hh	/^const uint64_t MM_STAT_WR_MASK = ULL(0x0001);$/;"	m	namespace:AlphaISA
MODE2MASK	./arch/alpha/tlb.cc	64;"	d	file:
MODE2MASK	./arch/power/tlb.cc	64;"	d	file:
MODE_ABORT	./arch/arm/types.hh	/^        MODE_ABORT = 23,$/;"	e	enum:ArmISA::OperatingMode
MODE_EL0T	./arch/arm/types.hh	/^        MODE_EL0T = 0x0,$/;"	e	enum:ArmISA::OperatingMode
MODE_EL1H	./arch/arm/types.hh	/^        MODE_EL1H = 0x5,$/;"	e	enum:ArmISA::OperatingMode
MODE_EL1T	./arch/arm/types.hh	/^        MODE_EL1T = 0x4,$/;"	e	enum:ArmISA::OperatingMode
MODE_EL2H	./arch/arm/types.hh	/^        MODE_EL2H = 0x9,$/;"	e	enum:ArmISA::OperatingMode
MODE_EL2T	./arch/arm/types.hh	/^        MODE_EL2T = 0x8,$/;"	e	enum:ArmISA::OperatingMode
MODE_EL3H	./arch/arm/types.hh	/^        MODE_EL3H = 0xD,$/;"	e	enum:ArmISA::OperatingMode
MODE_EL3T	./arch/arm/types.hh	/^        MODE_EL3T = 0xC,$/;"	e	enum:ArmISA::OperatingMode
MODE_FIQ	./arch/arm/types.hh	/^        MODE_FIQ = 17,$/;"	e	enum:ArmISA::OperatingMode
MODE_HYP	./arch/arm/types.hh	/^        MODE_HYP = 26,$/;"	e	enum:ArmISA::OperatingMode
MODE_IRQ	./arch/arm/types.hh	/^        MODE_IRQ = 18,$/;"	e	enum:ArmISA::OperatingMode
MODE_L	./arch/mips/dsp.hh	/^    MODE_L,        \/\/ left$/;"	e	enum:MipsISA::__anon88
MODE_LA	./arch/mips/dsp.hh	/^    MODE_LA,       \/\/ left-alternate$/;"	e	enum:MipsISA::__anon88
MODE_MAXMODE	./arch/arm/types.hh	/^        MODE_MAXMODE = MODE_SYSTEM$/;"	e	enum:ArmISA::OperatingMode
MODE_MON	./arch/arm/types.hh	/^        MODE_MON = 22,$/;"	e	enum:ArmISA::OperatingMode
MODE_R	./arch/mips/dsp.hh	/^    MODE_R,        \/\/ right$/;"	e	enum:MipsISA::__anon88
MODE_RA	./arch/mips/dsp.hh	/^    MODE_RA,       \/\/ right-alternate$/;"	e	enum:MipsISA::__anon88
MODE_SVC	./arch/arm/types.hh	/^        MODE_SVC = 19,$/;"	e	enum:ArmISA::OperatingMode
MODE_SYSTEM	./arch/arm/types.hh	/^        MODE_SYSTEM = 31,$/;"	e	enum:ArmISA::OperatingMode
MODE_UNDEFINED	./arch/arm/types.hh	/^        MODE_UNDEFINED = 27,$/;"	e	enum:ArmISA::OperatingMode
MODE_USER	./arch/arm/types.hh	/^        MODE_USER = 16,$/;"	e	enum:ArmISA::OperatingMode
MODE_X	./arch/mips/dsp.hh	/^    MODE_X         \/\/ cross$/;"	e	enum:MipsISA::__anon88
MORE_PENDING	./dev/terminal.cc	283;"	d	file:
MSB	./dev/intel_8254_timer.hh	/^        enum {LSB, MSB};$/;"	e	enum:Intel8254Timer::Counter::__anon25
MSG_NOSIGNAL	./dev/net/tcp_iface.cc	71;"	d	file:
MSHR	./mem/cache/mshr.cc	/^MSHR::MSHR() : readyTime(0), _isUncacheable(false), downstreamPending(false),$/;"	f	class:MSHR
MSHR	./mem/cache/mshr.hh	/^class MSHR : public Packet::SenderState, public Printable$/;"	c
MSHRQueue	./mem/cache/mshr_queue.cc	/^MSHRQueue::MSHRQueue(const std::string &_label,$/;"	f	class:MSHRQueue
MSHRQueue	./mem/cache/mshr_queue.hh	/^class MSHRQueue : public Drainable$/;"	c
MSHRQueueIndex	./mem/cache/base.hh	/^    enum MSHRQueueIndex {$/;"	g	class:BaseCache
MSHRQueue_MSHRs	./mem/cache/base.hh	/^        MSHRQueue_MSHRs,$/;"	e	enum:BaseCache::MSHRQueueIndex
MSHRQueue_WriteBuffer	./mem/cache/base.hh	/^        MSHRQueue_WriteBuffer$/;"	e	enum:BaseCache::MSHRQueueIndex
MSICAP	./dev/pci/pcireg.h	/^union MSICAP {$/;"	u
MSICAPBaseOffset	./dev/pci/PciDevice.py	/^        Param.UInt8(0x00, "Base offset of MSICAP in PCI Config space")$/;"	v	class:PciDevice
MSICAPCapId	./dev/pci/PciDevice.py	/^    MSICAPCapId = Param.UInt8(0x00, "Specifies this is the MSI Capability")$/;"	v	class:PciDevice
MSICAPMaskBits	./dev/pci/PciDevice.py	/^    MSICAPMaskBits = Param.UInt32(0x00000000, "MSI Interrupt Mask Bits")$/;"	v	class:PciDevice
MSICAPMsgAddr	./dev/pci/PciDevice.py	/^    MSICAPMsgAddr = Param.UInt32(0x00000000, "MSI Message Address")$/;"	v	class:PciDevice
MSICAPMsgCtrl	./dev/pci/PciDevice.py	/^    MSICAPMsgCtrl = Param.UInt16(0x0000, "MSI Message Control")$/;"	v	class:PciDevice
MSICAPMsgData	./dev/pci/PciDevice.py	/^    MSICAPMsgData = Param.UInt16(0x0000, "MSI Message Data")$/;"	v	class:PciDevice
MSICAPMsgUpperAddr	./dev/pci/PciDevice.py	/^    MSICAPMsgUpperAddr = Param.UInt32(0x00000000, "MSI Message Upper Address")$/;"	v	class:PciDevice
MSICAPNextCapability	./dev/pci/PciDevice.py	/^        Param.UInt8(0x00, "Pointer to next capability block")$/;"	v	class:PciDevice
MSICAPPendingBits	./dev/pci/PciDevice.py	/^    MSICAPPendingBits = Param.UInt32(0x00000000, "MSI Pending Bits")$/;"	v	class:PciDevice
MSICAP_BASE	./dev/pci/device.hh	/^    const int MSICAP_BASE;$/;"	m	class:PciDevice
MSICAP_ID	./dev/pci/pcireg.h	177;"	d
MSICAP_MA	./dev/pci/pcireg.h	179;"	d
MSICAP_MC	./dev/pci/pcireg.h	178;"	d
MSICAP_MD	./dev/pci/pcireg.h	181;"	d
MSICAP_MMASK	./dev/pci/pcireg.h	182;"	d
MSICAP_MPEND	./dev/pci/pcireg.h	183;"	d
MSICAP_MUA	./dev/pci/pcireg.h	180;"	d
MSICAP_SIZE	./dev/pci/pcireg.h	184;"	d
MSIXCAP	./dev/pci/pcireg.h	/^union MSIXCAP {$/;"	u
MSIXCAPBaseOffset	./dev/pci/PciDevice.py	/^        Param.UInt8(0x00, "Base offset of MSIXCAP in PCI Config space")$/;"	v	class:PciDevice
MSIXCAPCapId	./dev/pci/PciDevice.py	/^    MSIXCAPCapId = Param.UInt8(0x00, "Specifices this the MSI-X Capability")$/;"	v	class:PciDevice
MSIXCAPNextCapability	./dev/pci/PciDevice.py	/^        Param.UInt8(0x00, "Pointer to next capability block")$/;"	v	class:PciDevice
MSIXCAP_BASE	./dev/pci/device.hh	/^    const int MSIXCAP_BASE;$/;"	m	class:PciDevice
MSIXCAP_ID	./dev/pci/pcireg.h	186;"	d
MSIXCAP_ID_OFFSET	./dev/pci/device.hh	/^    const int MSIXCAP_ID_OFFSET;$/;"	m	class:PciDevice
MSIXCAP_MPBA	./dev/pci/pcireg.h	189;"	d
MSIXCAP_MPBA_OFFSET	./dev/pci/device.hh	/^    const int MSIXCAP_MPBA_OFFSET;$/;"	m	class:PciDevice
MSIXCAP_MTAB	./dev/pci/pcireg.h	188;"	d
MSIXCAP_MTAB_OFFSET	./dev/pci/device.hh	/^    const int MSIXCAP_MTAB_OFFSET;$/;"	m	class:PciDevice
MSIXCAP_MXC	./dev/pci/pcireg.h	187;"	d
MSIXCAP_MXC_OFFSET	./dev/pci/device.hh	/^    const int MSIXCAP_MXC_OFFSET;$/;"	m	class:PciDevice
MSIXCAP_SIZE	./dev/pci/pcireg.h	190;"	d
MSIXMsgCtrl	./dev/pci/PciDevice.py	/^    MSIXMsgCtrl = Param.UInt16(0x0000, "MSI-X Message Control")$/;"	v	class:PciDevice
MSIXPbaEntry	./dev/pci/pcireg.h	/^struct MSIXPbaEntry {$/;"	s
MSIXPbaOffset	./dev/pci/PciDevice.py	/^    MSIXPbaOffset = Param.UInt32(0x00000000, "MSI-X PBA Offset and PBA BIR")$/;"	v	class:PciDevice
MSIXTable	./dev/pci/pcireg.h	/^union MSIXTable {$/;"	u
MSIXTableOffset	./dev/pci/PciDevice.py	/^        Param.UInt32(0x00000000, "MSI-X Table Offset and Table BIR")$/;"	v	class:PciDevice
MSIXVECS_PER_PBA	./dev/pci/pcireg.h	298;"	d
MSIX_PBA_END	./dev/pci/device.hh	/^    int MSIX_PBA_END;$/;"	m	class:PciDevice
MSIX_PBA_OFFSET	./dev/pci/device.hh	/^    int MSIX_PBA_OFFSET;$/;"	m	class:PciDevice
MSIX_TABLE_END	./dev/pci/device.hh	/^    int MSIX_TABLE_END;$/;"	m	class:PciDevice
MSIX_TABLE_OFFSET	./dev/pci/device.hh	/^    int MSIX_TABLE_OFFSET;$/;"	m	class:PciDevice
MSI_SETSPI_NSR	./dev/arm/gic_v2m.hh	/^    static const int MSI_SETSPI_NSR     = 0x0040;$/;"	m	class:Gicv2m
MSI_TYPER	./dev/arm/gic_v2m.hh	/^    static const int MSI_TYPER          = 0x0008;$/;"	m	class:Gicv2m
MSRIndexVector	./cpu/kvm/vm.hh	/^    typedef std::vector<uint32_t> MSRIndexVector;$/;"	t	class:Kvm
MSR_TSC	./cpu/kvm/x86_cpu.cc	51;"	d	file:
MSTRC	./arch/x86/insts/microop.hh	/^            MSTRC,$/;"	e	enum:X86ISA::ConditionTests::CondTest
MSTRZ	./arch/x86/insts/microop.hh	/^            MSTRZ,$/;"	e	enum:X86ISA::ConditionTests::CondTest
MULTICAST_TABLE_SIZE	./dev/net/i8254xGBe_defs.hh	/^const uint8_t MULTICAST_TABLE_SIZE      = 128;$/;"	m	namespace:iGbReg
M_dat	./kern/tru64/mbuf.hh	/^    } M_dat;$/;"	m	struct:tru64::mbuf	typeref:union:tru64::mbuf::__anon99
M_databuf	./kern/tru64/mbuf.hh	/^        char    M_databuf[1];$/;"	m	union:tru64::mbuf::__anon99
MachInst	./arch/alpha/types.hh	/^typedef uint32_t MachInst;$/;"	t	namespace:AlphaISA
MachInst	./arch/arm/stacktrace.hh	/^    typedef ArmISA::MachInst MachInst;$/;"	t	class:ArmISA::StackTrace
MachInst	./arch/arm/types.hh	/^    typedef uint32_t MachInst;$/;"	t	namespace:ArmISA
MachInst	./arch/mips/stacktrace.hh	/^    typedef MipsISA::MachInst MachInst;$/;"	t	class:MipsISA::StackTrace
MachInst	./arch/mips/types.hh	/^typedef uint32_t MachInst;$/;"	t	namespace:MipsISA
MachInst	./arch/null/types.hh	/^    typedef uint32_t MachInst;$/;"	t	namespace:NullISA
MachInst	./arch/power/stacktrace.hh	/^    typedef TheISA::MachInst MachInst;$/;"	t	class:PowerISA::StackTrace
MachInst	./arch/power/types.hh	/^typedef uint32_t MachInst;$/;"	t	namespace:PowerISA
MachInst	./arch/sparc/types.hh	/^typedef uint32_t MachInst;$/;"	t	namespace:SparcISA
MachInst	./arch/x86/types.hh	/^    typedef uint64_t MachInst;$/;"	t	namespace:X86ISA
MachInst	./cpu/checker/cpu.hh	/^    typedef TheISA::MachInst MachInst;$/;"	t	class:CheckerCPU
MachInst	./cpu/o3/dyn_inst.hh	/^    typedef TheISA::MachInst MachInst;$/;"	t	class:BaseO3DynInst
MachInst	./cpu/o3/fetch.hh	/^    typedef TheISA::MachInst MachInst;$/;"	t	class:DefaultFetch
MachInst	./cpu/o3/impl.hh	/^    typedef TheISA::MachInst MachInst;$/;"	t	struct:O3CPUImpl
MachInst	./cpu/simple_thread.hh	/^    typedef TheISA::MachInst MachInst;$/;"	t	class:SimpleThread
MachInst	./cpu/thread_context.hh	/^    typedef TheISA::MachInst MachInst;$/;"	t	class:ThreadContext
MachNumber	./kern/tru64/tru64_syscalls.hh	/^        MachNumber$/;"	e	enum:SystemCalls::__anon103
MachineAST	./mem/slicc/ast/MachineAST.py	/^class MachineAST(DeclAST):$/;"	c
MachineBytes	./arch/alpha/isa_traits.hh	/^const int MachineBytes = 8;$/;"	m	namespace:AlphaISA
MachineBytes	./arch/arm/isa_traits.hh	/^    const int MachineBytes = 4;$/;"	m	namespace:ArmISA
MachineBytes	./arch/power/isa_traits.hh	/^const int MachineBytes = 4;$/;"	m	namespace:PowerISA
MachineCheck	./arch/x86/faults.hh	/^        MachineCheck() :$/;"	f	class:X86ISA::MachineCheck
MachineCheck	./arch/x86/faults.hh	/^    class MachineCheck : public X86Abort$/;"	c	namespace:X86ISA
MachineCheckFault	./arch/alpha/faults.hh	/^class MachineCheckFault : public AlphaFault$/;"	c	namespace:AlphaISA
MachineCheckFault	./arch/mips/faults.hh	/^class MachineCheckFault : public MipsFault<MachineCheckFault>$/;"	c	namespace:MipsISA
MachineCheckFault	./arch/power/faults.hh	/^    MachineCheckFault()$/;"	f	class:PowerISA::MachineCheckFault
MachineCheckFault	./arch/power/faults.hh	/^class MachineCheckFault : public PowerFault$/;"	c	namespace:PowerISA
MachineID	./mem/ruby/common/MachineID.hh	/^struct MachineID$/;"	s
MachineIDToString	./mem/ruby/common/MachineID.hh	/^MachineIDToString(MachineID machine)$/;"	f
MacroMemOp	./arch/arm/insts/macromem.cc	/^MacroMemOp::MacroMemOp(const char *mnem, ExtMachInst machInst,$/;"	f	class:ArmISA::MacroMemOp
MacroMemOp	./arch/arm/insts/macromem.hh	/^class MacroMemOp : public PredMacroOp$/;"	c	namespace:ArmISA
MacroVFPMemOp	./arch/arm/insts/macromem.cc	/^MacroVFPMemOp::MacroVFPMemOp(const char *mnem, ExtMachInst machInst,$/;"	f	class:ArmISA::MacroVFPMemOp
MacroVFPMemOp	./arch/arm/insts/macromem.hh	/^class MacroVFPMemOp : public PredMacroOp$/;"	c	namespace:ArmISA
MacroopBase	./arch/x86/insts/macroop.hh	/^    MacroopBase(const char *mnem, ExtMachInst _machInst,$/;"	f	class:X86ISA::MacroopBase
MacroopBase	./arch/x86/insts/macroop.hh	/^class MacroopBase : public X86StaticInst$/;"	c	namespace:X86ISA
MakeCallback	./base/callback.hh	/^    MakeCallback(T &o, bool auto_destroy = false)$/;"	f	class:MakeCallback
MakeCallback	./base/callback.hh	/^    MakeCallback(T *o, bool auto_destroy = false)$/;"	f	class:MakeCallback
MakeCallback	./base/callback.hh	/^class MakeCallback : public Callback$/;"	c
MakeTsbPtr	./arch/sparc/tlb.cc	/^TLB::MakeTsbPtr(TsbPageSize ps, uint64_t tag_access, uint64_t c0_tsb,$/;"	f	class:SparcISA::TLB
Malta	./dev/mips/Malta.py	/^class Malta(Platform):$/;"	c
Malta	./dev/mips/malta.cc	/^Malta::Malta(const Params *p)$/;"	f	class:Malta
Malta	./dev/mips/malta.hh	/^class Malta : public Platform$/;"	c
MaltaCChip	./dev/mips/Malta.py	/^class MaltaCChip(BasicPioDevice):$/;"	c
MaltaCChip	./dev/mips/malta_cchip.cc	/^MaltaCChip::MaltaCChip(Params *p)$/;"	f	class:MaltaCChip
MaltaCChip	./dev/mips/malta_cchip.hh	/^class MaltaCChip : public BasicPioDevice$/;"	c
MaltaIO	./dev/mips/Malta.py	/^class MaltaIO(BasicPioDevice):$/;"	c
MaltaIO	./dev/mips/malta_io.cc	/^MaltaIO::MaltaIO(const Params *p)$/;"	f	class:MaltaIO
MaltaIO	./dev/mips/malta_io.hh	/^class MaltaIO : public BasicPioDevice$/;"	c
ManagementInformationBaseControlRegister	./dev/net/ns_gige_reg.h	/^enum ManagementInformationBaseControlRegister {$/;"	g
MapCompare	./cpu/pc_event.hh	/^    class MapCompare {$/;"	c	class:PCEventQueue
MapIter	./arch/sparc/tlb.hh	/^    typedef TlbMap::iterator MapIter;$/;"	t	class:SparcISA::TLB
MapType	./base/statistics.hh	/^typedef std::map<const void *, Info *> MapType;$/;"	t	namespace:Stats
MapperMasterPort	./mem/addr_mapper.hh	/^        MapperMasterPort(const std::string& _name, AddrMapper& _mapper)$/;"	f	class:AddrMapper::MapperMasterPort
MapperMasterPort	./mem/addr_mapper.hh	/^    class MapperMasterPort : public MasterPort$/;"	c	class:AddrMapper
MapperSlavePort	./mem/addr_mapper.hh	/^        MapperSlavePort(const std::string& _name, AddrMapper& _mapper)$/;"	f	class:AddrMapper::MapperSlavePort
MapperSlavePort	./mem/addr_mapper.hh	/^    class MapperSlavePort : public SlavePort$/;"	c	class:AddrMapper
Mask	./arch/mips/pagetable.hh	/^    Addr Mask;$/;"	m	struct:MipsISA::PTE
Mask	./arch/power/pagetable.hh	/^    Addr Mask;$/;"	m	struct:PowerISA::PTE
MaskedISR	./dev/arm/rtc_pl031.hh	/^        MaskedISR  = 0x18,$/;"	e	enum:PL031::__anon24
MaskedISR	./dev/arm/timer_sp804.hh	/^            MaskedISR  = 0x14,$/;"	e	enum:Sp804::Timer::__anon21
MasterID	./mem/request.hh	/^typedef uint16_t MasterID;$/;"	t
MasterPort	./mem/port.cc	/^MasterPort::MasterPort(const std::string& name, MemObject* owner, PortID _id)$/;"	f	class:MasterPort
MasterPort	./mem/port.hh	/^class MasterPort : public BaseMasterPort$/;"	c
MasterPort	./python/m5/params.py	/^class MasterPort(Port):$/;"	c
MatchReg	./dev/arm/rtc_pl031.hh	/^        MatchReg   = 0x04,$/;"	e	enum:PL031::__anon24
Matrix	./mem/ruby/network/Topology.hh	/^typedef std::vector<std::vector<int> > Matrix;$/;"	t
MaxAddr	./base/types.hh	/^const Addr MaxAddr = (Addr)-1;$/;"	v
MaxAddr	./python/m5/params.py	/^MaxAddr = Addr.max$/;"	v
MaxBits	./base/trie.hh	/^    static const unsigned MaxBits = sizeof(Key) * 8;$/;"	m	class:Trie
MaxFlags	./cpu/base_dyn_inst.hh	/^        MaxFlags$/;"	e	enum:BaseDynInst::Flags
MaxGL	./arch/sparc/sparc_traits.hh	/^const int MaxGL  = 3;$/;"	m	namespace:SparcISA
MaxInstDestRegs	./cpu/base_dyn_inst.hh	/^        MaxInstDestRegs = TheISA::MaxInstDestRegs       \/\/\/ Max dest regs$/;"	e	enum:BaseDynInst::__anon34
MaxInstDestRegs	./cpu/o3/dyn_inst.hh	/^        MaxInstDestRegs = TheISA::MaxInstDestRegs       \/\/< Max dest regs$/;"	e	enum:BaseO3DynInst::__anon35
MaxInstDestRegs	./cpu/static_inst.hh	/^        MaxInstDestRegs = TheISA::MaxInstDestRegs       \/\/< Max dest regs$/;"	e	enum:StaticInst::__anon32
MaxInstSrcRegs	./arch/arm/registers.hh	/^const int MaxInstSrcRegs = ArmISAInst::MaxInstDestRegs +$/;"	m	namespace:ArmISA
MaxInstSrcRegs	./cpu/base_dyn_inst.hh	/^        MaxInstSrcRegs = TheISA::MaxInstSrcRegs,        \/\/\/ Max source regs$/;"	e	enum:BaseDynInst::__anon34
MaxInstSrcRegs	./cpu/o3/dyn_inst.hh	/^        MaxInstSrcRegs = TheISA::MaxInstSrcRegs,        \/\/< Max source regs$/;"	e	enum:BaseO3DynInst::__anon35
MaxInstSrcRegs	./cpu/static_inst.hh	/^        MaxInstSrcRegs = TheISA::MaxInstSrcRegs,        \/\/< Max source regs$/;"	e	enum:StaticInst::__anon32
MaxInternalProcRegs	./arch/alpha/ipr.hh	/^    MaxInternalProcRegs             \/\/ number of IPRs$/;"	e	enum:AlphaISA::md_ipr_names
MaxMiscDestRegs	./arch/alpha/registers.hh	/^const int MaxMiscDestRegs = AlphaISAInst::MaxMiscDestRegs + 1;$/;"	m	namespace:AlphaISA
MaxMiscDestRegs	./arch/power/registers.hh	/^const int MaxMiscDestRegs = PowerISAInst::MaxMiscDestRegs + 1;$/;"	m	namespace:PowerISA
MaxNiagaraProcs	./dev/sparc/iob.hh	/^const int  MaxNiagaraProcs = 32;$/;"	v
MaxNormalTaskId	./mem/request.hh	/^        MaxNormalTaskId = 1021, \/* Maximum number of normal tasks *\/$/;"	e	enum:ContextSwitchTaskId::TaskId
MaxPGL	./arch/sparc/sparc_traits.hh	/^const int MaxPGL = 2;$/;"	m	namespace:SparcISA
MaxPTL	./arch/sparc/sparc_traits.hh	/^const int MaxPTL = 2;$/;"	m	namespace:SparcISA
MaxPhysAddrRange	./arch/arm/isa_traits.hh	/^    const unsigned MaxPhysAddrRange = 48;$/;"	m	namespace:ArmISA
MaxReadOnlyIpr	./arch/alpha/ipr.hh	/^    MaxReadOnlyIpr,$/;"	e	enum:AlphaISA::MiscRegIpr
MaxShadowRegSets	./arch/mips/registers.hh	/^const int MaxShadowRegSets = 16; \/\/ Maximum number of shadow register sets$/;"	m	namespace:MipsISA
MaxTL	./arch/sparc/sparc_traits.hh	/^const int MaxTL  = 6;$/;"	m	namespace:SparcISA
MaxThreads	./cpu/o3/impl.hh	/^      MaxThreads = 4$/;"	e	enum:O3CPUImpl::__anon37
MaxTick	./base/types.hh	/^const Tick MaxTick = ULL(0xffffffffffffffff);$/;"	v
MaxTick	./python/m5/params.py	/^MaxTick = Tick.max$/;"	v
MaxTick	./python/m5/simulate.py	/^MaxTick = 2**64 - 1$/;"	v
MaxWidth	./cpu/o3/impl.hh	/^      MaxWidth = 8,$/;"	e	enum:O3CPUImpl::__anon37
MaxWriteOnlyIpr	./arch/alpha/ipr.hh	/^    MaxWriteOnlyIpr,$/;"	e	enum:AlphaISA::MiscRegIpr
Max_CPUs	./dev/alpha/tsunami.hh	/^    static const int Max_CPUs = 64;$/;"	m	class:Tsunami
Max_CPUs	./dev/mips/malta.hh	/^    static const int Max_CPUs = 64;$/;"	m	class:Malta
Max_Reg_Index	./arch/alpha/registers.hh	/^    Max_Reg_Index = Misc_Reg_Base + NumMiscRegs + NumInternalProcRegs$/;"	e	enum:AlphaISA::DependenceTags
Max_Reg_Index	./arch/arm/registers.hh	/^const int Max_Reg_Index = Misc_Reg_Base + NumMiscRegs;$/;"	m	namespace:ArmISA
Max_Reg_Index	./arch/mips/registers.hh	/^const int Max_Reg_Index = Misc_Reg_Base + NumMiscRegs;$/;"	m	namespace:MipsISA
Max_Reg_Index	./arch/power/registers.hh	/^const int Max_Reg_Index = Misc_Reg_Base + NumMiscRegs;$/;"	m	namespace:PowerISA
Max_Reg_Index	./arch/sparc/registers.hh	/^    Max_Reg_Index = Misc_Reg_Base + NumMiscRegs,$/;"	e	enum:SparcISA::DependenceTags
Max_Reg_Index	./arch/x86/registers.hh	/^    Max_Reg_Index = Misc_Reg_Base + NumMiscRegs$/;"	e	enum:X86ISA::DependenceTags
MaximumLatency	./dev/net/Ethernet.py	/^    MaximumLatency = 0x00$/;"	v	class:IGbE
MaximumLatency	./dev/net/Ethernet.py	/^    MaximumLatency = 0x34$/;"	v	class:NSGigE
MaximumLatency	./dev/net/Ethernet.py	/^    MaximumLatency = 0x34$/;"	v	class:Sinic
MaximumLatency	./dev/pci/CopyEngine.py	/^    MaximumLatency = 0x00$/;"	v	class:CopyEngine
MaximumLatency	./dev/pci/PciDevice.py	/^    MaximumLatency = Param.UInt8(0x00, "Maximum Latency")$/;"	v	class:PciDevice
Maximum_Pri	./sim/eventq.hh	/^    static const Priority Maximum_Pri =          SCHAR_MAX;$/;"	m	class:EventBase
MciCtl	./dev/arm/rv_ctrl.hh	/^        MciCtl     = 0x48,$/;"	e	enum:RealViewCtrl::__anon19
McrrOp	./arch/arm/insts/misc.hh	/^    McrrOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:McrrOp
McrrOp	./arch/arm/insts/misc.hh	/^class McrrOp : public PredOp$/;"	c
MediaFlag	./arch/x86/insts/micromediaop.hh	/^    enum MediaFlag {$/;"	g	namespace:X86ISA
MediaMultHiOp	./arch/x86/insts/micromediaop.hh	/^        MediaMultHiOp = 1,$/;"	e	enum:X86ISA::MediaFlag
MediaOpBase	./arch/x86/insts/micromediaop.hh	/^        MediaOpBase(ExtMachInst _machInst,$/;"	f	class:X86ISA::MediaOpBase
MediaOpBase	./arch/x86/insts/micromediaop.hh	/^    class MediaOpBase : public X86MicroopBase$/;"	c	namespace:X86ISA
MediaOpImm	./arch/x86/insts/micromediaop.hh	/^        MediaOpImm(ExtMachInst _machInst,$/;"	f	class:X86ISA::MediaOpImm
MediaOpImm	./arch/x86/insts/micromediaop.hh	/^    class MediaOpImm : public MediaOpBase$/;"	c	namespace:X86ISA
MediaOpReg	./arch/x86/insts/micromediaop.hh	/^        MediaOpReg(ExtMachInst _machInst,$/;"	f	class:X86ISA::MediaOpReg
MediaOpReg	./arch/x86/insts/micromediaop.hh	/^    class MediaOpReg : public MediaOpBase$/;"	c	namespace:X86ISA
MediaScalarOp	./arch/x86/insts/micromediaop.hh	/^        MediaScalarOp = 128$/;"	e	enum:X86ISA::MediaFlag
MediaSignedOp	./arch/x86/insts/micromediaop.hh	/^        MediaSignedOp = 64,$/;"	e	enum:X86ISA::MediaFlag
MemAddressNotAligned	./arch/sparc/faults.hh	/^class MemAddressNotAligned :$/;"	c	namespace:SparcISA
MemChecker	./mem/MemChecker.py	/^class MemChecker(SimObject):$/;"	c
MemChecker	./mem/mem_checker.hh	/^    MemChecker(const MemCheckerParams *p)$/;"	f	class:MemChecker
MemChecker	./mem/mem_checker.hh	/^class MemChecker : public SimObject$/;"	c
MemCheckerMonitor	./mem/MemChecker.py	/^class MemCheckerMonitor(MemObject):$/;"	c
MemCheckerMonitor	./mem/mem_checker_monitor.cc	/^MemCheckerMonitor::MemCheckerMonitor(Params* params)$/;"	f	class:MemCheckerMonitor
MemCheckerMonitor	./mem/mem_checker_monitor.hh	/^class MemCheckerMonitor : public MemObject$/;"	c
MemCheckerMonitorSenderState	./mem/mem_checker_monitor.hh	/^        MemCheckerMonitorSenderState(MemChecker::Serial _serial)$/;"	f	struct:MemCheckerMonitor::MemCheckerMonitorSenderState
MemCheckerMonitorSenderState	./mem/mem_checker_monitor.hh	/^    struct MemCheckerMonitorSenderState : public Packet::SenderState$/;"	s	class:MemCheckerMonitor
MemCmd	./mem/packet.hh	/^    MemCmd() : cmd(InvalidCmd) { }$/;"	f	class:MemCmd
MemCmd	./mem/packet.hh	/^    MemCmd(Command _cmd) : cmd(_cmd) { }$/;"	f	class:MemCmd
MemCmd	./mem/packet.hh	/^    MemCmd(int _cmd) : cmd((Command)_cmd) { }$/;"	f	class:MemCmd
MemCmd	./mem/packet.hh	/^class MemCmd$/;"	c
MemCntrlEvent	./mem/ruby/structures/RubyMemoryControl.hh	/^        MemCntrlEvent(RubyMemoryControl *_mem_cntrl)$/;"	f	class:RubyMemoryControl::MemCntrlEvent
MemCntrlEvent	./mem/ruby/structures/RubyMemoryControl.hh	/^    class MemCntrlEvent : public Event$/;"	c	class:RubyMemoryControl
MemCntrlProfiler	./mem/ruby/profiler/MemCntrlProfiler.cc	/^MemCntrlProfiler::MemCntrlProfiler(const string& description,$/;"	f	class:MemCntrlProfiler
MemCntrlProfiler	./mem/ruby/profiler/MemCntrlProfiler.hh	/^class MemCntrlProfiler$/;"	c
MemDepEntry	./cpu/o3/mem_dep_unit.hh	/^        MemDepEntry(DynInstPtr &new_inst)$/;"	f	class:MemDepUnit::MemDepEntry
MemDepEntry	./cpu/o3/mem_dep_unit.hh	/^    class MemDepEntry {$/;"	c	class:MemDepUnit
MemDepEntryPtr	./cpu/o3/mem_dep_unit.hh	/^    typedef std::shared_ptr<MemDepEntry> MemDepEntryPtr;$/;"	t	class:MemDepUnit
MemDepHash	./cpu/o3/mem_dep_unit.hh	/^    typedef std::unordered_map<InstSeqNum, MemDepEntryPtr, SNHash> MemDepHash;$/;"	t	class:MemDepUnit
MemDepHashIt	./cpu/o3/mem_dep_unit.hh	/^    typedef typename MemDepHash::iterator MemDepHashIt;$/;"	t	class:MemDepUnit
MemDepUnit	./cpu/o3/cpu_policy.hh	/^    typedef ::MemDepUnit<StoreSet, Impl> MemDepUnit;$/;"	t	struct:SimpleCPUPolicy
MemDepUnit	./cpu/o3/inst_queue.hh	/^    typedef typename Impl::CPUPol::MemDepUnit MemDepUnit;$/;"	t	class:InstructionQueue
MemDepUnit	./cpu/o3/mem_dep_unit.hh	/^class MemDepUnit$/;"	c
MemDepUnit	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::MemDepUnit()$/;"	f	class:MemDepUnit
MemDepUnit	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::MemDepUnit(DerivO3CPUParams *params)$/;"	f	class:MemDepUnit
MemDispOp	./arch/power/insts/mem.hh	/^    MemDispOp(const char *mnem, MachInst _machInst, OpClass __opClass,$/;"	f	class:PowerISA::MemDispOp
MemDispOp	./arch/power/insts/mem.hh	/^class MemDispOp : public MemOp$/;"	c	namespace:PowerISA
MemFenceReq	./mem/packet.hh	/^        MemFenceReq,$/;"	e	enum:MemCmd::Command
MemFenceResp	./mem/packet.hh	/^        MemFenceResp,$/;"	e	enum:MemCmd::Command
MemMasterPort	./mem/ruby/system/RubyPort.cc	/^RubyPort::MemMasterPort::MemMasterPort(const std::string &_name,$/;"	f	class:RubyPort::MemMasterPort
MemMasterPort	./mem/ruby/system/RubyPort.hh	/^    class MemMasterPort : public QueuedMasterPort$/;"	c	class:RubyPort
MemObject	./mem/MemObject.py	/^class MemObject(ClockedObject):$/;"	c
MemObject	./mem/mem_object.cc	/^MemObject::MemObject(const Params *params)$/;"	f	class:MemObject
MemObject	./mem/mem_object.hh	/^class MemObject : public ClockedObject$/;"	c
MemOp	./arch/power/insts/mem.hh	/^    MemOp(const char *mnem, MachInst _machInst, OpClass __opClass,$/;"	f	class:PowerISA::MemOp
MemOp	./arch/power/insts/mem.hh	/^class MemOp : public PowerStaticInst$/;"	c	namespace:PowerISA
MemOpDone	./cpu/base_dyn_inst.hh	/^        MemOpDone,$/;"	e	enum:BaseDynInst::Flags
MemOperand	./arch/isa_parser.py	/^class MemOperand(Operand):$/;"	c
MemReadOp	./cpu/op_class.hh	/^static const OpClass MemReadOp = Enums::MemRead;$/;"	v
MemSched	./mem/DRAMCtrl.py	/^class MemSched(Enum): vals = ['fcfs', 'frfcfs']$/;"	c
MemSidePort	./mem/cache/cache.cc	/^MemSidePort::MemSidePort(const std::string &_name, Cache *_cache,$/;"	f	class:Cache::MemSidePort
MemSidePort	./mem/cache/cache.hh	/^    class MemSidePort : public CacheMasterPort$/;"	c	class:Cache
MemSlavePort	./mem/ruby/system/DMASequencer.cc	/^DMASequencer::MemSlavePort::MemSlavePort(const std::string &_name,$/;"	f	class:DMASequencer::MemSlavePort
MemSlavePort	./mem/ruby/system/DMASequencer.hh	/^    class MemSlavePort : public QueuedSlavePort$/;"	c	class:DMASequencer
MemSlavePort	./mem/ruby/system/RubyPort.cc	/^RubyPort::MemSlavePort::MemSlavePort(const std::string &_name, RubyPort *_port,$/;"	f	class:RubyPort::MemSlavePort
MemSlavePort	./mem/ruby/system/RubyPort.hh	/^    class MemSlavePort : public QueuedSlavePort$/;"	c	class:RubyPort
MemSlot	./cpu/kvm/vm.hh	/^        MemSlot() : num(-1)$/;"	f	struct:KvmVM::MemSlot
MemSlot	./cpu/kvm/vm.hh	/^        MemSlot(uint32_t _num) : num(_num)$/;"	f	struct:KvmVM::MemSlot
MemSlot	./cpu/kvm/vm.hh	/^    struct MemSlot$/;"	s	class:KvmVM
MemTag	./arch/arm/linux/atag.hh	/^    MemTag    = 0x54410002,$/;"	e	enum:__anon73
MemTest	./cpu/testers/memtest/MemTest.py	/^class MemTest(MemObject):$/;"	c
MemTest	./cpu/testers/memtest/memtest.cc	/^MemTest::MemTest(const Params *p)$/;"	f	class:MemTest
MemTest	./cpu/testers/memtest/memtest.hh	/^class MemTest : public MemObject$/;"	c
MemTraceProbe	./mem/probes/MemTraceProbe.py	/^class MemTraceProbe(BaseMemProbe):$/;"	c
MemTraceProbe	./mem/probes/mem_trace.cc	/^MemTraceProbe::MemTraceProbe(MemTraceProbeParams *p)$/;"	f	class:MemTraceProbe
MemTraceProbe	./mem/probes/mem_trace.hh	/^class MemTraceProbe : public BaseMemProbe$/;"	c
MemWriteOp	./cpu/op_class.hh	/^static const OpClass MemWriteOp = Enums::MemWrite;$/;"	v
MemberExprAST	./mem/slicc/ast/MemberExprAST.py	/^class MemberExprAST(ExprAST):$/;"	c
MemberMethodCallExprAST	./mem/slicc/ast/MethodCallExprAST.py	/^class MemberMethodCallExprAST(MethodCallExprAST):$/;"	c
Memory	./arch/arm/insts/mem.hh	/^    Memory(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::Memory
Memory	./arch/arm/insts/mem.hh	/^class Memory : public MightBeMicro$/;"	c	namespace:ArmISA
Memory64	./arch/arm/insts/mem64.hh	/^    Memory64(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::Memory64
Memory64	./arch/arm/insts/mem64.hh	/^class Memory64 : public MightBeMicro64$/;"	c	namespace:ArmISA
MemoryBandwidth	./python/m5/params.py	/^class MemoryBandwidth(float,ParamValue):$/;"	c
MemoryDImm	./arch/arm/insts/mem.hh	/^    MemoryDImm(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::MemoryDImm
MemoryDImm	./arch/arm/insts/mem.hh	/^class MemoryDImm : public MemoryImm$/;"	c	namespace:ArmISA
MemoryDImm64	./arch/arm/insts/mem64.hh	/^    MemoryDImm64(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::MemoryDImm64
MemoryDImm64	./arch/arm/insts/mem64.hh	/^class MemoryDImm64 : public MemoryImm64$/;"	c	namespace:ArmISA
MemoryDImmEx64	./arch/arm/insts/mem64.hh	/^    MemoryDImmEx64(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::MemoryDImmEx64
MemoryDImmEx64	./arch/arm/insts/mem64.hh	/^class MemoryDImmEx64 : public MemoryDImm64$/;"	c	namespace:ArmISA
MemoryDReg	./arch/arm/insts/mem.hh	/^    MemoryDReg(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::MemoryDReg
MemoryDReg	./arch/arm/insts/mem.hh	/^class MemoryDReg : public MemoryReg$/;"	c	namespace:ArmISA
MemoryEx64	./arch/arm/insts/mem64.hh	/^    MemoryEx64(const char *mnem, ExtMachInst _machInst,$/;"	f	class:ArmISA::MemoryEx64
MemoryEx64	./arch/arm/insts/mem64.hh	/^class MemoryEx64 : public Memory64$/;"	c	namespace:ArmISA
MemoryExDImm	./arch/arm/insts/mem.hh	/^    MemoryExDImm(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::MemoryExDImm
MemoryExDImm	./arch/arm/insts/mem.hh	/^class MemoryExDImm : public MemoryDImm$/;"	c	namespace:ArmISA
MemoryExImm	./arch/arm/insts/mem.hh	/^    MemoryExImm(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::MemoryExImm
MemoryExImm	./arch/arm/insts/mem.hh	/^class MemoryExImm : public MemoryImm$/;"	c	namespace:ArmISA
MemoryImm	./arch/arm/insts/mem.hh	/^    MemoryImm(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::MemoryImm
MemoryImm	./arch/arm/insts/mem.hh	/^class MemoryImm : public Memory$/;"	c	namespace:ArmISA
MemoryImm64	./arch/arm/insts/mem64.hh	/^    MemoryImm64(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::MemoryImm64
MemoryImm64	./arch/arm/insts/mem64.hh	/^class MemoryImm64 : public Memory64$/;"	c	namespace:ArmISA
MemoryLiteral64	./arch/arm/insts/mem64.hh	/^    MemoryLiteral64(const char *mnem, ExtMachInst _machInst,$/;"	f	class:ArmISA::MemoryLiteral64
MemoryLiteral64	./arch/arm/insts/mem64.hh	/^class MemoryLiteral64 : public Memory64$/;"	c	namespace:ArmISA
MemoryMode	./sim/System.py	/^class MemoryMode(Enum): vals = ['invalid', 'atomic', 'timing',$/;"	c
MemoryNeedsRetry	./cpu/minor/lsq.hh	/^        MemoryNeedsRetry \/* Request rejected, will be asked to retry *\/$/;"	e	enum:Minor::LSQ::MemoryState
MemoryNode	./mem/ruby/structures/MemoryNode.hh	/^    MemoryNode(const Cycles& time, const PacketPtr p,$/;"	f	class:MemoryNode
MemoryNode	./mem/ruby/structures/MemoryNode.hh	/^    MemoryNode(const Cycles& time, int counter, const PacketPtr p,$/;"	f	class:MemoryNode
MemoryNode	./mem/ruby/structures/MemoryNode.hh	/^class MemoryNode$/;"	c
MemoryOffset	./arch/arm/insts/mem.hh	/^    MemoryOffset(const char *mnem, ExtMachInst _machInst,$/;"	f	class:ArmISA::MemoryOffset
MemoryOffset	./arch/arm/insts/mem.hh	/^class MemoryOffset : public Base$/;"	c	namespace:ArmISA
MemoryPort	./mem/dram_ctrl.cc	/^DRAMCtrl::MemoryPort::MemoryPort(const std::string& name, DRAMCtrl& _memory)$/;"	f	class:DRAMCtrl::MemoryPort
MemoryPort	./mem/dram_ctrl.hh	/^    class MemoryPort : public QueuedSlavePort$/;"	c	class:DRAMCtrl
MemoryPort	./mem/dramsim2.cc	/^DRAMSim2::MemoryPort::MemoryPort(const std::string& _name,$/;"	f	class:DRAMSim2::MemoryPort
MemoryPort	./mem/dramsim2.hh	/^    class MemoryPort : public SlavePort$/;"	c	class:DRAMSim2
MemoryPort	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::MemoryPort::MemoryPort(const std::string &_name,$/;"	f	class:AbstractController::MemoryPort
MemoryPort	./mem/ruby/slicc_interface/AbstractController.hh	/^    class MemoryPort : public QueuedMasterPort$/;"	c	class:AbstractController
MemoryPort	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::MemoryPort::MemoryPort(const std::string& name,$/;"	f	class:RubyMemoryControl::MemoryPort
MemoryPort	./mem/ruby/structures/RubyMemoryControl.hh	/^    class MemoryPort : public QueuedSlavePort$/;"	c	class:RubyMemoryControl
MemoryPort	./mem/simple_mem.cc	/^SimpleMemory::MemoryPort::MemoryPort(const std::string& _name,$/;"	f	class:SimpleMemory::MemoryPort
MemoryPort	./mem/simple_mem.hh	/^    class MemoryPort : public SlavePort$/;"	c	class:SimpleMemory
MemoryPostIndex	./arch/arm/insts/mem.hh	/^    MemoryPostIndex(const char *mnem, ExtMachInst _machInst,$/;"	f	class:ArmISA::MemoryPostIndex
MemoryPostIndex	./arch/arm/insts/mem.hh	/^class MemoryPostIndex : public Base$/;"	c	namespace:ArmISA
MemoryPostIndex64	./arch/arm/insts/mem64.hh	/^    MemoryPostIndex64(const char *mnem, ExtMachInst _machInst,$/;"	f	class:ArmISA::MemoryPostIndex64
MemoryPostIndex64	./arch/arm/insts/mem64.hh	/^class MemoryPostIndex64 : public MemoryImm64$/;"	c	namespace:ArmISA
MemoryPreIndex	./arch/arm/insts/mem.hh	/^    MemoryPreIndex(const char *mnem, ExtMachInst _machInst,$/;"	f	class:ArmISA::MemoryPreIndex
MemoryPreIndex	./arch/arm/insts/mem.hh	/^class MemoryPreIndex : public Base$/;"	c	namespace:ArmISA
MemoryPreIndex64	./arch/arm/insts/mem64.hh	/^    MemoryPreIndex64(const char *mnem, ExtMachInst _machInst,$/;"	f	class:ArmISA::MemoryPreIndex64
MemoryPreIndex64	./arch/arm/insts/mem64.hh	/^class MemoryPreIndex64 : public MemoryImm64$/;"	c	namespace:ArmISA
MemoryRaw64	./arch/arm/insts/mem64.hh	/^    MemoryRaw64(const char *mnem, ExtMachInst _machInst,$/;"	f	class:ArmISA::MemoryRaw64
MemoryRaw64	./arch/arm/insts/mem64.hh	/^class MemoryRaw64 : public Memory64$/;"	c	namespace:ArmISA
MemoryReg	./arch/arm/insts/mem.hh	/^    MemoryReg(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::MemoryReg
MemoryReg	./arch/arm/insts/mem.hh	/^class MemoryReg : public Memory$/;"	c	namespace:ArmISA
MemoryReg64	./arch/arm/insts/mem64.hh	/^    MemoryReg64(const char *mnem, ExtMachInst _machInst,$/;"	f	class:ArmISA::MemoryReg64
MemoryReg64	./arch/arm/insts/mem64.hh	/^class MemoryReg64 : public Memory64$/;"	c	namespace:ArmISA
MemoryRunning	./cpu/minor/lsq.hh	/^        MemoryRunning, \/* Default. Step dcache queues when possible. *\/$/;"	e	enum:Minor::LSQ::MemoryState
MemorySize	./python/m5/params.py	/^class MemorySize(CheckedInt):$/;"	c
MemorySize32	./python/m5/params.py	/^class MemorySize32(CheckedInt):$/;"	c
MemorySlot	./cpu/kvm/vm.hh	/^    class MemorySlot$/;"	c	class:KvmVM
MemoryState	./cpu/minor/lsq.hh	/^    enum MemoryState$/;"	g	class:Minor::LSQ
MemoryType	./arch/arm/pagetable.hh	/^    enum class MemoryType : std::uint8_t {$/;"	c	struct:ArmISA::TlbEntry
Message	./mem/ruby/slicc_interface/Message.hh	/^    Message(Tick curTime)$/;"	f	class:Message
Message	./mem/ruby/slicc_interface/Message.hh	/^    Message(const Message &other)$/;"	f	class:Message
Message	./mem/ruby/slicc_interface/Message.hh	/^class Message$/;"	c
MessageBuffer	./mem/ruby/network/MessageBuffer.cc	/^MessageBuffer::MessageBuffer(const Params *p)$/;"	f	class:MessageBuffer
MessageBuffer	./mem/ruby/network/MessageBuffer.hh	/^class MessageBuffer : public SimObject$/;"	c
MessageBuffer	./mem/ruby/network/MessageBuffer.py	/^class MessageBuffer(SimObject):$/;"	c
MessageMasterPort	./mem/mport.hh	/^    MessageMasterPort(const std::string &name, MemObject *owner) :$/;"	f	class:MessageMasterPort
MessageMasterPort	./mem/mport.hh	/^class MessageMasterPort : public QueuedMasterPort$/;"	c
MessageReq	./mem/packet.hh	/^        MessageReq,$/;"	e	enum:MemCmd::Command
MessageResp	./mem/packet.hh	/^        MessageResp,$/;"	e	enum:MemCmd::Command
MessageSizeType_to_int	./mem/ruby/network/Network.cc	/^Network::MessageSizeType_to_int(MessageSizeType size_type)$/;"	f	class:Network
MessageSlavePort	./mem/mport.hh	/^    MessageSlavePort(const std::string &name, MemObject *owner) :$/;"	f	class:MessageSlavePort
MessageSlavePort	./mem/mport.hh	/^class MessageSlavePort : public SimpleTimingPort$/;"	c
MetaEnum	./python/m5/params.py	/^class MetaEnum(MetaParamValue):$/;"	c
MetaParamValue	./python/m5/params.py	/^class MetaParamValue(type):$/;"	c
MetaSimObject	./python/m5/SimObject.py	/^class MetaSimObject(type):$/;"	c
MethodCallExprAST	./mem/slicc/ast/MethodCallExprAST.py	/^class MethodCallExprAST(ExprAST):$/;"	c
MethodProxy	./base/statistics.hh	/^    MethodProxy(T *obj, MethodPointer meth) : object(obj), method(meth) {}$/;"	f	class:Stats::MethodProxy
MethodProxy	./base/statistics.hh	/^class MethodProxy : public ProxyInfo$/;"	c	namespace:Stats
MicroAssembler	./arch/micro_asm.py	/^class MicroAssembler(object):$/;"	c
MicroIntImmOp	./arch/arm/insts/macromem.hh	/^    MicroIntImmOp(const char *mnem, ExtMachInst machInst, OpClass __opClass,$/;"	f	class:ArmISA::MicroIntImmOp
MicroIntImmOp	./arch/arm/insts/macromem.hh	/^class MicroIntImmOp : public MicroOp$/;"	c	namespace:ArmISA
MicroIntImmXOp	./arch/arm/insts/macromem.hh	/^    MicroIntImmXOp(const char *mnem, ExtMachInst machInst, OpClass __opClass,$/;"	f	class:ArmISA::MicroIntImmXOp
MicroIntImmXOp	./arch/arm/insts/macromem.hh	/^class MicroIntImmXOp : public MicroOpX$/;"	c	namespace:ArmISA
MicroIntMov	./arch/arm/insts/macromem.hh	/^    MicroIntMov(const char *mnem, ExtMachInst machInst, OpClass __opClass,$/;"	f	class:ArmISA::MicroIntMov
MicroIntMov	./arch/arm/insts/macromem.hh	/^class MicroIntMov : public MicroOp$/;"	c	namespace:ArmISA
MicroIntOffset	./arch/sparc/isa.hh	/^        MicroIntOffset = CurrentWindowOffset + NumWindowedRegs,$/;"	e	enum:SparcISA::ISA::InstIntRegOffsets
MicroIntOp	./arch/arm/insts/macromem.hh	/^    MicroIntOp(const char *mnem, ExtMachInst machInst, OpClass __opClass,$/;"	f	class:ArmISA::MicroIntOp
MicroIntOp	./arch/arm/insts/macromem.hh	/^class MicroIntOp : public MicroOp$/;"	c	namespace:ArmISA
MicroIntRegOp	./arch/arm/insts/macromem.hh	/^    MicroIntRegOp(const char *mnem, ExtMachInst machInst, OpClass __opClass,$/;"	f	class:ArmISA::MicroIntRegOp
MicroIntRegOp	./arch/arm/insts/macromem.hh	/^class MicroIntRegOp : public MicroOp$/;"	c	namespace:ArmISA
MicroIntRegXOp	./arch/arm/insts/macromem.hh	/^    MicroIntRegXOp(const char *mnem, ExtMachInst machInst, OpClass __opClass,$/;"	f	class:ArmISA::MicroIntRegXOp
MicroIntRegXOp	./arch/arm/insts/macromem.hh	/^class MicroIntRegXOp : public MicroOp$/;"	c	namespace:ArmISA
MicroMemOp	./arch/arm/insts/macromem.hh	/^    MicroMemOp(const char *mnem, ExtMachInst machInst, OpClass __opClass,$/;"	f	class:ArmISA::MicroMemOp
MicroMemOp	./arch/arm/insts/macromem.hh	/^class MicroMemOp : public MicroIntImmOp$/;"	c	namespace:ArmISA
MicroMemPairOp	./arch/arm/insts/macromem.hh	/^    MicroMemPairOp(const char *mnem, ExtMachInst machInst, OpClass __opClass,$/;"	f	class:ArmISA::MicroMemPairOp
MicroMemPairOp	./arch/arm/insts/macromem.hh	/^class MicroMemPairOp : public MicroOp$/;"	c	namespace:ArmISA
MicroNeonMemOp	./arch/arm/insts/macromem.hh	/^    MicroNeonMemOp(const char *mnem, ExtMachInst machInst, OpClass __opClass,$/;"	f	class:ArmISA::MicroNeonMemOp
MicroNeonMemOp	./arch/arm/insts/macromem.hh	/^class MicroNeonMemOp : public MicroOp$/;"	c	namespace:ArmISA
MicroNeonMixLaneOp	./arch/arm/insts/macromem.hh	/^    MicroNeonMixLaneOp(const char *mnem, ExtMachInst machInst,$/;"	f	class:ArmISA::MicroNeonMixLaneOp
MicroNeonMixLaneOp	./arch/arm/insts/macromem.hh	/^class MicroNeonMixLaneOp : public MicroNeonMixOp$/;"	c	namespace:ArmISA
MicroNeonMixLaneOp64	./arch/arm/insts/macromem.hh	/^    MicroNeonMixLaneOp64(const char *mnem, ExtMachInst machInst,$/;"	f	class:ArmISA::MicroNeonMixLaneOp64
MicroNeonMixLaneOp64	./arch/arm/insts/macromem.hh	/^class MicroNeonMixLaneOp64 : public MicroOp$/;"	c	namespace:ArmISA
MicroNeonMixOp	./arch/arm/insts/macromem.hh	/^    MicroNeonMixOp(const char *mnem, ExtMachInst machInst, OpClass __opClass,$/;"	f	class:ArmISA::MicroNeonMixOp
MicroNeonMixOp	./arch/arm/insts/macromem.hh	/^class MicroNeonMixOp : public MicroOp$/;"	c	namespace:ArmISA
MicroNeonMixOp64	./arch/arm/insts/macromem.hh	/^    MicroNeonMixOp64(const char *mnem, ExtMachInst machInst, OpClass __opClass,$/;"	f	class:ArmISA::MicroNeonMixOp64
MicroNeonMixOp64	./arch/arm/insts/macromem.hh	/^class MicroNeonMixOp64 : public MicroOp$/;"	c	namespace:ArmISA
MicroOp	./arch/arm/insts/macromem.hh	/^    MicroOp(const char *mnem, ExtMachInst machInst, OpClass __opClass)$/;"	f	class:ArmISA::MicroOp
MicroOp	./arch/arm/insts/macromem.hh	/^class MicroOp : public PredOp$/;"	c	namespace:ArmISA
MicroOpX	./arch/arm/insts/macromem.hh	/^    MicroOpX(const char *mnem, ExtMachInst machInst, OpClass __opClass)$/;"	f	class:ArmISA::MicroOpX
MicroOpX	./arch/arm/insts/macromem.hh	/^class MicroOpX : public ArmStaticInst$/;"	c	namespace:ArmISA
MicroPC	./base/types.hh	/^typedef uint16_t MicroPC;$/;"	t
MicroPCRomBit	./base/types.hh	/^static const MicroPC MicroPCRomBit = 1 << (sizeof(MicroPC) * 8 - 1);$/;"	v
MicroSetPCCPSR	./arch/arm/insts/macromem.hh	/^    MicroSetPCCPSR(const char *mnem, ExtMachInst machInst, OpClass __opClass,$/;"	f	class:ArmISA::MicroSetPCCPSR
MicroSetPCCPSR	./arch/arm/insts/macromem.hh	/^class MicroSetPCCPSR : public MicroOp$/;"	c	namespace:ArmISA
Micro_Container	./arch/micro_asm.py	/^class Micro_Container(object):$/;"	c
MicrocodeRom	./arch/x86/microcode_rom.hh	/^    class MicrocodeRom$/;"	c	namespace:X86ISAInst
MicrocodeRom	./sim/microcode_rom.hh	/^class MicrocodeRom$/;"	c
Microop	./arch/micro_asm.py	/^class Microop(Statement):$/;"	c
MightBeMicro	./arch/arm/insts/mem.hh	/^    MightBeMicro(const char *mnem, ExtMachInst _machInst, OpClass __opClass)$/;"	f	class:ArmISA::MightBeMicro
MightBeMicro	./arch/arm/insts/mem.hh	/^class MightBeMicro : public PredOp$/;"	c	namespace:ArmISA
MightBeMicro64	./arch/arm/insts/mem64.hh	/^    MightBeMicro64(const char *mnem, ExtMachInst _machInst, OpClass __opClass)$/;"	f	class:ArmISA::MightBeMicro64
MightBeMicro64	./arch/arm/insts/mem64.hh	/^class MightBeMicro64 : public ArmStaticInst$/;"	c	namespace:ArmISA
MinReadOnlyIpr	./arch/alpha/ipr.hh	/^    MinReadOnlyIpr,$/;"	e	enum:AlphaISA::MiscRegIpr
MinWriteOnlyIpr	./arch/alpha/ipr.hh	/^    MinWriteOnlyIpr,$/;"	e	enum:AlphaISA::MiscRegIpr
MinimumGrant	./dev/net/Ethernet.py	/^    MinimumGrant = 0xb0$/;"	v	class:NSGigE
MinimumGrant	./dev/net/Ethernet.py	/^    MinimumGrant = 0xb0$/;"	v	class:Sinic
MinimumGrant	./dev/net/Ethernet.py	/^    MinimumGrant = 0xff$/;"	v	class:IGbE
MinimumGrant	./dev/pci/CopyEngine.py	/^    MinimumGrant = 0xff$/;"	v	class:CopyEngine
MinimumGrant	./dev/pci/PciDevice.py	/^    MinimumGrant = Param.UInt8(0x00, "Minimum Grant")$/;"	v	class:PciDevice
Minimum_Pri	./sim/eventq.hh	/^    static const Priority Minimum_Pri =          SCHAR_MIN;$/;"	m	class:EventBase
Minor	./cpu/minor/activity.cc	/^namespace Minor$/;"	n	file:
Minor	./cpu/minor/activity.hh	/^namespace Minor$/;"	n
Minor	./cpu/minor/buffers.hh	/^namespace Minor$/;"	n
Minor	./cpu/minor/cpu.hh	/^namespace Minor$/;"	n
Minor	./cpu/minor/decode.cc	/^namespace Minor$/;"	n	file:
Minor	./cpu/minor/decode.hh	/^namespace Minor$/;"	n
Minor	./cpu/minor/dyn_inst.cc	/^namespace Minor$/;"	n	file:
Minor	./cpu/minor/dyn_inst.hh	/^namespace Minor$/;"	n
Minor	./cpu/minor/exec_context.hh	/^namespace Minor$/;"	n
Minor	./cpu/minor/execute.cc	/^namespace Minor$/;"	n	file:
Minor	./cpu/minor/execute.hh	/^namespace Minor$/;"	n
Minor	./cpu/minor/fetch1.cc	/^namespace Minor$/;"	n	file:
Minor	./cpu/minor/fetch1.hh	/^namespace Minor$/;"	n
Minor	./cpu/minor/fetch2.cc	/^namespace Minor$/;"	n	file:
Minor	./cpu/minor/fetch2.hh	/^namespace Minor$/;"	n
Minor	./cpu/minor/func_unit.cc	/^namespace Minor$/;"	n	file:
Minor	./cpu/minor/func_unit.hh	/^namespace Minor$/;"	n
Minor	./cpu/minor/lsq.cc	/^namespace Minor$/;"	n	file:
Minor	./cpu/minor/lsq.hh	/^namespace Minor$/;"	n
Minor	./cpu/minor/pipe_data.cc	/^namespace Minor$/;"	n	file:
Minor	./cpu/minor/pipe_data.hh	/^namespace Minor$/;"	n
Minor	./cpu/minor/pipeline.cc	/^namespace Minor$/;"	n	file:
Minor	./cpu/minor/pipeline.hh	/^namespace Minor$/;"	n
Minor	./cpu/minor/scoreboard.cc	/^namespace Minor$/;"	n	file:
Minor	./cpu/minor/scoreboard.hh	/^namespace Minor$/;"	n
Minor	./cpu/minor/stats.cc	/^namespace Minor$/;"	n	file:
Minor	./cpu/minor/stats.hh	/^namespace Minor$/;"	n
Minor	./cpu/minor/trace.hh	/^namespace Minor$/;"	n
MinorActivityRecorder	./cpu/minor/activity.hh	/^    MinorActivityRecorder(const std::string &name, int num_stages,$/;"	f	class:Minor::MinorActivityRecorder
MinorActivityRecorder	./cpu/minor/activity.hh	/^class MinorActivityRecorder : public ActivityRecorder$/;"	c	namespace:Minor
MinorBuffer	./cpu/minor/buffers.hh	/^    MinorBuffer(const std::string &name,$/;"	f	class:Minor::MinorBuffer
MinorBuffer	./cpu/minor/buffers.hh	/^class MinorBuffer : public Named, public TimeBuffer<ElemType>$/;"	c	namespace:Minor
MinorCPU	./cpu/minor/MinorCPU.py	/^class MinorCPU(BaseCPU):$/;"	c
MinorCPU	./cpu/minor/cpu.cc	/^MinorCPU::MinorCPU(MinorCPUParams *params) :$/;"	f	class:MinorCPU
MinorCPU	./cpu/minor/cpu.hh	/^class MinorCPU : public BaseCPU$/;"	c
MinorCPUPort	./cpu/minor/cpu.hh	/^        MinorCPUPort(const std::string& name_, MinorCPU &cpu_)$/;"	f	class:MinorCPU::MinorCPUPort
MinorCPUPort	./cpu/minor/cpu.hh	/^    class MinorCPUPort : public MasterPort$/;"	c	class:MinorCPU
MinorDefaultFUPool	./cpu/minor/MinorCPU.py	/^class MinorDefaultFUPool(MinorFUPool):$/;"	c
MinorDefaultFloatSimdFU	./cpu/minor/MinorCPU.py	/^class MinorDefaultFloatSimdFU(MinorFU):$/;"	c
MinorDefaultIntDivFU	./cpu/minor/MinorCPU.py	/^class MinorDefaultIntDivFU(MinorFU):$/;"	c
MinorDefaultIntFU	./cpu/minor/MinorCPU.py	/^class MinorDefaultIntFU(MinorFU):$/;"	c
MinorDefaultIntMulFU	./cpu/minor/MinorCPU.py	/^class MinorDefaultIntMulFU(MinorFU):$/;"	c
MinorDefaultMemFU	./cpu/minor/MinorCPU.py	/^class MinorDefaultMemFU(MinorFU):$/;"	c
MinorDefaultMiscFU	./cpu/minor/MinorCPU.py	/^class MinorDefaultMiscFU(MinorFU):$/;"	c
MinorDynInst	./cpu/minor/dyn_inst.hh	/^    MinorDynInst(InstId id_ = InstId(), Fault fault_ = NoFault) :$/;"	f	class:Minor::MinorDynInst
MinorDynInst	./cpu/minor/dyn_inst.hh	/^class MinorDynInst : public RefCounted$/;"	c	namespace:Minor
MinorDynInstPtr	./cpu/minor/dyn_inst.hh	/^typedef RefCountingPtr<MinorDynInst> MinorDynInstPtr;$/;"	t	namespace:Minor
MinorFU	./cpu/minor/MinorCPU.py	/^class MinorFU(SimObject):$/;"	c
MinorFU	./cpu/minor/func_unit.hh	/^    MinorFU(const MinorFUParams *params) :$/;"	f	class:MinorFU
MinorFU	./cpu/minor/func_unit.hh	/^class MinorFU : public SimObject$/;"	c
MinorFUPool	./cpu/minor/MinorCPU.py	/^class MinorFUPool(SimObject):$/;"	c
MinorFUPool	./cpu/minor/func_unit.hh	/^    MinorFUPool(const MinorFUPoolParams *params) :$/;"	f	class:MinorFUPool
MinorFUPool	./cpu/minor/func_unit.hh	/^class MinorFUPool : public SimObject$/;"	c
MinorFUTiming	./cpu/minor/MinorCPU.py	/^class MinorFUTiming(SimObject):$/;"	c
MinorFUTiming	./cpu/minor/func_unit.cc	/^MinorFUTiming::MinorFUTiming($/;"	f	class:MinorFUTiming
MinorFUTiming	./cpu/minor/func_unit.hh	/^class MinorFUTiming: public SimObject$/;"	c
MinorOpClass	./cpu/minor/MinorCPU.py	/^class MinorOpClass(SimObject):$/;"	c
MinorOpClass	./cpu/minor/func_unit.hh	/^    MinorOpClass(const MinorOpClassParams *params) :$/;"	f	class:MinorOpClass
MinorOpClass	./cpu/minor/func_unit.hh	/^class MinorOpClass : public SimObject$/;"	c
MinorOpClassSet	./cpu/minor/MinorCPU.py	/^class MinorOpClassSet(SimObject):$/;"	c
MinorOpClassSet	./cpu/minor/func_unit.cc	/^MinorOpClassSet::MinorOpClassSet(const MinorOpClassSetParams *params) :$/;"	f	class:MinorOpClassSet
MinorOpClassSet	./cpu/minor/func_unit.hh	/^class MinorOpClassSet : public SimObject$/;"	c
MinorStats	./cpu/minor/stats.cc	/^MinorStats::MinorStats()$/;"	f	class:Minor::MinorStats
MinorStats	./cpu/minor/stats.hh	/^class MinorStats$/;"	c	namespace:Minor
MinorThread	./cpu/minor/cpu.hh	/^typedef SimpleThread MinorThread;$/;"	t	namespace:Minor
Mips	./base/loader/object_file.hh	/^        Mips,$/;"	e	enum:ObjectFile::Arch
MipsAccess	./dev/mips/access.h	/^struct MipsAccess$/;"	s
MipsFault	./arch/mips/faults.hh	/^class MipsFault : public MipsFaultBase$/;"	c	namespace:MipsISA
MipsFaultBase	./arch/mips/faults.hh	/^class MipsFaultBase : public FaultBase$/;"	c	namespace:MipsISA
MipsGdbRegCache	./arch/mips/remote_gdb.hh	/^    class MipsGdbRegCache : public BaseGdbRegCache$/;"	c	class:MipsISA::RemoteGDB
MipsISA	./arch/mips/MipsISA.py	/^class MipsISA(SimObject):$/;"	c
MipsISA	./arch/mips/decoder.cc	/^namespace MipsISA$/;"	n	file:
MipsISA	./arch/mips/decoder.hh	/^namespace MipsISA$/;"	n
MipsISA	./arch/mips/dsp.hh	/^namespace MipsISA {$/;"	n
MipsISA	./arch/mips/dt_constants.hh	/^namespace MipsISA$/;"	n
MipsISA	./arch/mips/faults.cc	/^namespace MipsISA$/;"	n	file:
MipsISA	./arch/mips/faults.hh	/^namespace MipsISA$/;"	n
MipsISA	./arch/mips/interrupts.cc	/^namespace MipsISA$/;"	n	file:
MipsISA	./arch/mips/interrupts.hh	/^namespace MipsISA$/;"	n
MipsISA	./arch/mips/isa.cc	/^namespace MipsISA$/;"	n	file:
MipsISA	./arch/mips/isa.hh	/^namespace MipsISA$/;"	n
MipsISA	./arch/mips/isa_traits.hh	/^namespace MipsISA$/;"	n
MipsISA	./arch/mips/kernel_stats.hh	/^namespace MipsISA {$/;"	n
MipsISA	./arch/mips/locked_mem.hh	/^namespace MipsISA$/;"	n
MipsISA	./arch/mips/microcode_rom.hh	/^namespace MipsISA$/;"	n
MipsISA	./arch/mips/mmapped_ipr.hh	/^namespace MipsISA$/;"	n
MipsISA	./arch/mips/mt.hh	/^namespace MipsISA$/;"	n
MipsISA	./arch/mips/mt_constants.hh	/^namespace MipsISA$/;"	n
MipsISA	./arch/mips/pagetable.cc	/^namespace MipsISA$/;"	n	file:
MipsISA	./arch/mips/pagetable.hh	/^namespace MipsISA {$/;"	n
MipsISA	./arch/mips/pra_constants.hh	/^namespace MipsISA$/;"	n
MipsISA	./arch/mips/pseudo_inst.hh	/^namespace MipsISA {$/;"	n
MipsISA	./arch/mips/registers.hh	/^namespace MipsISA$/;"	n
MipsISA	./arch/mips/remote_gdb.hh	/^namespace MipsISA$/;"	n
MipsISA	./arch/mips/stacktrace.hh	/^namespace MipsISA$/;"	n
MipsISA	./arch/mips/tlb.hh	/^namespace MipsISA {$/;"	n
MipsISA	./arch/mips/types.hh	/^namespace MipsISA$/;"	n
MipsISA	./arch/mips/utility.cc	/^namespace MipsISA {$/;"	n	file:
MipsISA	./arch/mips/utility.hh	/^namespace MipsISA {$/;"	n
MipsISA	./arch/mips/vtophys.hh	/^namespace MipsISA {$/;"	n
MipsInterrupts	./arch/mips/MipsInterrupts.py	/^class MipsInterrupts(SimObject):$/;"	c
MipsLinux	./arch/mips/linux/linux.hh	/^class MipsLinux : public Linux$/;"	c
MipsLinuxProcess	./arch/mips/linux/process.cc	/^MipsLinuxProcess::MipsLinuxProcess(LiveProcessParams * params,$/;"	f	class:MipsLinuxProcess
MipsLinuxProcess	./arch/mips/linux/process.hh	/^class MipsLinuxProcess : public MipsLiveProcess$/;"	c
MipsLiveProcess	./arch/mips/process.cc	/^MipsLiveProcess::MipsLiveProcess(LiveProcessParams * params,$/;"	f	class:MipsLiveProcess
MipsLiveProcess	./arch/mips/process.hh	/^class MipsLiveProcess : public LiveProcess$/;"	c
MipsSystem	./arch/mips/MipsSystem.py	/^class MipsSystem(System):$/;"	c
MipsSystem	./arch/mips/system.cc	/^MipsSystem::MipsSystem(Params *p) : System(p)$/;"	f	class:MipsSystem
MipsSystem	./arch/mips/system.hh	/^class MipsSystem : public System$/;"	c
MipsTLB	./arch/mips/MipsTLB.py	/^class MipsTLB(BaseTLB):$/;"	c
Misc	./dev/arm/rv_ctrl.hh	/^        Misc       = 0x60,$/;"	e	enum:RealViewCtrl::__anon19
MiscIntRegNums	./arch/mips/registers.hh	/^enum MiscIntRegNums {$/;"	g	namespace:MipsISA
MiscIntRegNums	./arch/power/registers.hh	/^enum MiscIntRegNums {$/;"	g	namespace:PowerISA
MiscOp	./arch/power/insts/misc.hh	/^    MiscOp(const char *mnem, MachInst _machInst, OpClass __opClass)$/;"	f	class:PowerISA::MiscOp
MiscOp	./arch/power/insts/misc.hh	/^class MiscOp : public PowerStaticInst$/;"	c	namespace:PowerISA
MiscReg	./arch/alpha/registers.hh	/^typedef uint64_t MiscReg;$/;"	t	namespace:AlphaISA
MiscReg	./arch/arm/registers.hh	/^typedef uint64_t MiscReg;$/;"	t	namespace:ArmISA
MiscReg	./arch/mips/registers.hh	/^typedef uint64_t MiscReg;$/;"	t	namespace:MipsISA
MiscReg	./arch/null/registers.hh	/^typedef uint64_t MiscReg;$/;"	t	namespace:NullISA
MiscReg	./arch/power/registers.hh	/^typedef uint64_t MiscReg;$/;"	t	namespace:PowerISA
MiscReg	./arch/sparc/registers.hh	/^typedef uint64_t MiscReg;$/;"	t	namespace:SparcISA
MiscReg	./arch/x86/registers.hh	/^typedef uint64_t MiscReg;$/;"	t	namespace:X86ISA
MiscReg	./cpu/checker/cpu.hh	/^    typedef TheISA::MiscReg MiscReg;$/;"	t	class:CheckerCPU
MiscReg	./cpu/exec_context.hh	/^    typedef TheISA::MiscReg MiscReg;$/;"	t	class:ExecContext
MiscReg	./cpu/o3/dyn_inst.hh	/^    typedef TheISA::MiscReg  MiscReg;$/;"	t	class:BaseO3DynInst
MiscReg	./cpu/simple/exec_context.hh	/^    typedef TheISA::MiscReg MiscReg;$/;"	t	class:SimpleExecContext
MiscReg	./cpu/simple_thread.hh	/^    typedef TheISA::MiscReg MiscReg;$/;"	t	class:SimpleThread
MiscReg	./cpu/thread_context.hh	/^    typedef TheISA::MiscReg MiscReg;$/;"	t	class:ThreadContext
MiscRegClass	./cpu/reg_class.hh	/^    MiscRegClass        \/\/\/< Control (misc) register$/;"	e	enum:RegClass
MiscRegIndex	./arch/alpha/registers.hh	/^enum MiscRegIndex$/;"	g	namespace:AlphaISA
MiscRegIndex	./arch/arm/miscregs.hh	/^    enum MiscRegIndex {$/;"	g	namespace:ArmISA
MiscRegIndex	./arch/mips/registers.hh	/^enum MiscRegIndex{$/;"	g	namespace:MipsISA
MiscRegIndex	./arch/power/miscregs.hh	/^enum MiscRegIndex {$/;"	g	namespace:PowerISA
MiscRegIndex	./arch/sparc/miscregs.hh	/^enum MiscRegIndex$/;"	g	namespace:SparcISA
MiscRegIndex	./arch/x86/regs/misc.hh	/^    enum MiscRegIndex$/;"	g	namespace:X86ISA
MiscRegIndexToIpr	./arch/alpha/ipr.cc	/^md_ipr_names MiscRegIndexToIpr[NumInternalProcRegs] = {$/;"	m	namespace:AlphaISA	file:
MiscRegInfo	./arch/arm/kvm/armv8_cpu.hh	/^        MiscRegInfo(uint64_t _kvm, MiscRegIndex _idx, const char *_name)$/;"	f	struct:ArmV8KvmCPU::MiscRegInfo
MiscRegInfo	./arch/arm/kvm/armv8_cpu.hh	/^    struct MiscRegInfo {$/;"	s	class:ArmV8KvmCPU
MiscRegInfo	./arch/arm/miscregs.hh	/^    enum MiscRegInfo {$/;"	g	namespace:ArmISA
MiscRegInitializerEntry	./arch/arm/isa.hh	/^        struct MiscRegInitializerEntry {$/;"	s	class:ArmISA::ISA
MiscRegIpr	./arch/alpha/ipr.hh	/^enum MiscRegIpr$/;"	g	namespace:AlphaISA
MiscRegLUTEntry	./arch/arm/isa.hh	/^        struct MiscRegLUTEntry {$/;"	s	class:ArmISA::ISA
MiscRegRegImmOp	./arch/arm/insts/misc.hh	/^    MiscRegRegImmOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:MiscRegRegImmOp
MiscRegRegImmOp	./arch/arm/insts/misc.hh	/^class MiscRegRegImmOp : public PredOp$/;"	c
MiscRegSwitch	./arch/arm/isa.cc	/^    ISA::MiscRegSwitch[miscRegTranslateMax] = {$/;"	m	class:ArmISA::ISA	typeref:struct:ArmISA::ISA::	file:
MiscRegSwitch	./arch/arm/isa.hh	/^                            MiscRegSwitch[miscRegTranslateMax];$/;"	m	class:ArmISA::ISA	typeref:struct:ArmISA::ISA::MiscRegInitializerEntry
Misc_Reg_Base	./arch/alpha/registers.hh	/^    Misc_Reg_Base = CC_Reg_Base + NumCCRegs, \/\/ NumCCRegs == 0$/;"	e	enum:AlphaISA::DependenceTags
Misc_Reg_Base	./arch/arm/registers.hh	/^const int Misc_Reg_Base = CC_Reg_Base + NumCCRegs;$/;"	m	namespace:ArmISA
Misc_Reg_Base	./arch/mips/registers.hh	/^const int Misc_Reg_Base = CC_Reg_Base + NumCCRegs; \/\/ NumCCRegs == 0$/;"	m	namespace:MipsISA
Misc_Reg_Base	./arch/power/registers.hh	/^const int Misc_Reg_Base = CC_Reg_Base + NumCCRegs; \/\/ NumCCRegs == 0$/;"	m	namespace:PowerISA
Misc_Reg_Base	./arch/sparc/registers.hh	/^    Misc_Reg_Base = CC_Reg_Base + NumCCRegs, \/\/ NumCCRegs == 0$/;"	e	enum:SparcISA::DependenceTags
Misc_Reg_Base	./arch/x86/registers.hh	/^    Misc_Reg_Base = CC_Reg_Base + NumCCRegs,$/;"	e	enum:X86ISA::DependenceTags
MmDisk	./dev/sparc/T1000.py	/^class MmDisk(BasicPioDevice):$/;"	c
MmDisk	./dev/sparc/mm_disk.cc	/^MmDisk::MmDisk(const Params *p)$/;"	f	class:MmDisk
MmDisk	./dev/sparc/mm_disk.hh	/^class MmDisk : public BasicPioDevice$/;"	c
ModRMState	./arch/x86/decoder.hh	/^        ModRMState,$/;"	e	enum:X86ISA::Decoder::State
Mode	./arch/generic/tlb.hh	/^    enum Mode { Read, Write, Execute };$/;"	g	class:BaseTLB
ModeVal	./dev/intel_8254_timer.hh	/^    enum ModeVal {$/;"	g	class:Intel8254Timer
MonitorMasterPort	./mem/comm_monitor.hh	/^        MonitorMasterPort(const std::string& _name, CommMonitor& _mon)$/;"	f	class:CommMonitor::MonitorMasterPort
MonitorMasterPort	./mem/comm_monitor.hh	/^    class MonitorMasterPort : public MasterPort$/;"	c	class:CommMonitor
MonitorMasterPort	./mem/mem_checker_monitor.hh	/^        MonitorMasterPort(const std::string& _name, MemCheckerMonitor& _mon)$/;"	f	class:MemCheckerMonitor::MonitorMasterPort
MonitorMasterPort	./mem/mem_checker_monitor.hh	/^    class MonitorMasterPort : public MasterPort$/;"	c	class:MemCheckerMonitor
MonitorSlavePort	./mem/comm_monitor.hh	/^        MonitorSlavePort(const std::string& _name, CommMonitor& _mon)$/;"	f	class:CommMonitor::MonitorSlavePort
MonitorSlavePort	./mem/comm_monitor.hh	/^    class MonitorSlavePort : public SlavePort$/;"	c	class:CommMonitor
MonitorSlavePort	./mem/mem_checker_monitor.hh	/^        MonitorSlavePort(const std::string& _name, MemCheckerMonitor& _mon)$/;"	f	class:MemCheckerMonitor::MonitorSlavePort
MonitorSlavePort	./mem/mem_checker_monitor.hh	/^    class MonitorSlavePort : public SlavePort$/;"	c	class:MemCheckerMonitor
MonitorStats	./mem/comm_monitor.hh	/^        MonitorStats(const CommMonitorParams* params) :$/;"	f	struct:CommMonitor::MonitorStats
MonitorStats	./mem/comm_monitor.hh	/^    struct MonitorStats$/;"	s	class:CommMonitor
MouseEvents	./base/vnc/vncserver.hh	/^    enum MouseEvents {$/;"	g	class:VncServer
MouseId	./dev/ps2.hh	/^    MouseId         = 0x00,$/;"	e	enum:Ps2::__anon4
MouseLeftButton	./base/vnc/vncserver.hh	/^        MouseLeftButton     = 0x1,$/;"	e	enum:VncServer::MouseEvents
MouseMiddleButton	./base/vnc/vncserver.hh	/^        MouseMiddleButton   = 0x4$/;"	e	enum:VncServer::MouseEvents
MouseRightButton	./base/vnc/vncserver.hh	/^        MouseRightButton    = 0x2,$/;"	e	enum:VncServer::MouseEvents
MrrcOp	./arch/arm/insts/misc.hh	/^    MrrcOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:MrrcOp
MrrcOp	./arch/arm/insts/misc.hh	/^class MrrcOp : public PredOp$/;"	c
MrsOp	./arch/arm/insts/misc.hh	/^    MrsOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:MrsOp
MrsOp	./arch/arm/insts/misc.hh	/^class MrsOp : public PredOp$/;"	c
MsbOnly	./dev/intel_8254_timer.hh	/^        MsbOnly,$/;"	e	enum:Intel8254Timer::ReadWriteVal
MsgBufType	./mem/ruby/slicc_interface/AbstractController.hh	/^    typedef std::set<MessageBuffer*> MsgBufType;$/;"	t	class:AbstractController
MsgPtr	./mem/ruby/slicc_interface/Message.hh	/^typedef std::shared_ptr<Message> MsgPtr;$/;"	t
MsgType	./dev/net/dist_iface.hh	/^    typedef DistHeaderPkt::MsgType MsgType;$/;"	t	class:DistIface
MsgType	./dev/net/dist_packet.hh	/^    enum class MsgType$/;"	c	class:DistHeaderPkt
MsgVecType	./mem/ruby/slicc_interface/AbstractController.hh	/^    typedef std::vector<MessageBuffer*> MsgVecType;$/;"	t	class:AbstractController
MsrBase	./arch/arm/insts/misc.hh	/^    MsrBase(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:MsrBase
MsrBase	./arch/arm/insts/misc.hh	/^class MsrBase : public PredOp$/;"	c
MsrImmOp	./arch/arm/insts/misc.hh	/^    MsrImmOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:MsrImmOp
MsrImmOp	./arch/arm/insts/misc.hh	/^class MsrImmOp : public MsrBase$/;"	c
MsrMap	./arch/x86/regs/msr.hh	/^typedef std::unordered_map<Addr, MiscRegIndex> MsrMap;$/;"	t	namespace:X86ISA
MsrRegOp	./arch/arm/insts/misc.hh	/^    MsrRegOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:MsrRegOp
MsrRegOp	./arch/arm/insts/misc.hh	/^class MsrRegOp : public MsrBase$/;"	c
MsrVal	./arch/x86/regs/msr.cc	/^typedef MsrMap::value_type MsrVal;$/;"	t	namespace:X86ISA	file:
Mult3	./arch/arm/insts/mult.hh	/^    Mult3(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::Mult3
Mult3	./arch/arm/insts/mult.hh	/^class Mult3 : public PredOp$/;"	c	namespace:ArmISA
Mult4	./arch/arm/insts/mult.hh	/^    Mult4(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::Mult4
Mult4	./arch/arm/insts/mult.hh	/^class Mult4 : public Mult3$/;"	c	namespace:ArmISA
MultiBitSelBloomFilter	./mem/ruby/filters/MultiBitSelBloomFilter.cc	/^MultiBitSelBloomFilter::MultiBitSelBloomFilter(string str)$/;"	f	class:MultiBitSelBloomFilter
MultiBitSelBloomFilter	./mem/ruby/filters/MultiBitSelBloomFilter.hh	/^class MultiBitSelBloomFilter : public AbstractBloomFilter$/;"	c
MultiGrainBloomFilter	./mem/ruby/filters/MultiGrainBloomFilter.cc	/^MultiGrainBloomFilter::MultiGrainBloomFilter(int head, int tail)$/;"	f	class:MultiGrainBloomFilter
MultiGrainBloomFilter	./mem/ruby/filters/MultiGrainBloomFilter.hh	/^class MultiGrainBloomFilter : public AbstractBloomFilter$/;"	c
MultiLevelPageTable	./mem/multi_level_page_table.hh	/^class MultiLevelPageTable : public PageTableBase$/;"	c
MultiLevelPageTable	./mem/multi_level_page_table_impl.hh	/^MultiLevelPageTable<ISAOps>::MultiLevelPageTable(const std::string &__name,$/;"	f	class:MultiLevelPageTable
MustBeOne	./arch/arm/tlb.hh	/^        MustBeOne = 0x40$/;"	e	enum:ArmISA::TLB::ArmFlags
N	./arch/arm/pagetable.hh	/^    uint8_t N;              \/\/ Number of bits in pagesize$/;"	m	struct:ArmISA::TlbEntry
NAN	./base/stats/text.cc	60;"	d	file:
NDtbMissFault	./arch/alpha/faults.hh	/^    NDtbMissFault(VAddr vaddr, Request::Flags reqFlags, uint64_t flags)$/;"	f	class:AlphaISA::NDtbMissFault
NDtbMissFault	./arch/alpha/faults.hh	/^class NDtbMissFault : public DtbFault$/;"	c	namespace:AlphaISA
NI	./arch/x86/decoder_tables.cc	/^        NI = NoImm,$/;"	e	enum:X86ISA::SizeType	file:
NMAGIC	./base/loader/exec_aout.h	46;"	d
NMI	./arch/x86/intmessage.hh	/^            NMI = 4,$/;"	e	enum:X86ISA::DeliveryMode::IntDeliveryMode
NN_CONFIG_MASK	./dev/arm/gic_pl390.hh	/^    static const int NN_CONFIG_MASK = 0x55555555;$/;"	m	class:Pl390
NONE	./cpu/o3/rename.hh	/^        NONE$/;"	e	enum:DefaultRename::FullSource
NOROUND	./arch/mips/dsp.hh	/^enum { NOROUND, ROUND };$/;"	e	enum:MipsISA::__anon91
NOSATURATE	./arch/mips/dsp.hh	/^enum { NOSATURATE, SATURATE };$/;"	e	enum:MipsISA::__anon90
NO_INT	./dev/pci/types.hh	/^    NO_INT=0,$/;"	m	class:PciIntPin
NO_ROW	./mem/dram_ctrl.hh	/^        static const uint32_t NO_ROW = -1;$/;"	m	class:DRAMCtrl::Bank
NO_STAT64	./sim/syscall_emul.hh	48;"	d
NPIE	./dev/arm/vgic.hh	/^    Bitfield<3> NPIE;$/;"	m	class:VGic
NPtePage	./arch/alpha/isa_traits.hh	/^const Addr NPtePage = ULL(1) << NPtePageShift;$/;"	m	namespace:AlphaISA
NPtePage	./arch/arm/isa_traits.hh	/^    const Addr NPtePage = ULL(1) << NPtePageShift;$/;"	m	namespace:ArmISA
NPtePage	./arch/mips/isa_traits.hh	/^const Addr NPtePage = ULL(1) << NPtePageShift;$/;"	m	namespace:MipsISA
NPtePage	./arch/power/isa_traits.hh	/^const Addr NPtePage = ULL(1) << NPtePageShift;$/;"	m	namespace:PowerISA
NPtePageShift	./arch/alpha/isa_traits.hh	/^const Addr NPtePageShift = PageShift - PteShift;$/;"	m	namespace:AlphaISA
NPtePageShift	./arch/arm/isa_traits.hh	/^    const Addr NPtePageShift = PageShift - PteShift;$/;"	m	namespace:ArmISA
NPtePageShift	./arch/mips/isa_traits.hh	/^const Addr NPtePageShift = PageShift - PteShift;$/;"	m	namespace:MipsISA
NPtePageShift	./arch/power/isa_traits.hh	/^const Addr NPtePageShift = PageShift - PteShift;$/;"	m	namespace:PowerISA
NSECTOR_OFFSET	./dev/storage/ide_disk.hh	101;"	d
NSEC_PER_MSEC	./base/time.hh	/^    static const long NSEC_PER_MSEC = 1000 * 1000;$/;"	m	class:Time
NSEC_PER_SEC	./base/time.hh	/^    static const long NSEC_PER_SEC  = 1000 * 1000 * 1000;$/;"	m	class:Time
NSEC_PER_USEC	./base/time.hh	/^    static const long NSEC_PER_USEC = 1000;$/;"	m	class:Time
NSGigE	./dev/net/Ethernet.py	/^class NSGigE(EtherDevBase):$/;"	c
NSGigE	./dev/net/ns_gige.cc	/^NSGigE::NSGigE(Params *p)$/;"	f	class:NSGigE
NSGigE	./dev/net/ns_gige.hh	/^class NSGigE : public EtherDevBase$/;"	c
NSGigEInt	./dev/net/ns_gige.hh	/^    NSGigEInt(const std::string &name, NSGigE *d)$/;"	f	class:NSGigEInt
NSGigEInt	./dev/net/ns_gige.hh	/^class NSGigEInt : public EtherInt$/;"	c
NTBit	./arch/x86/regs/misc.hh	/^        NTBit = 1 << 14,$/;"	e	enum:X86ISA::RFLAGBit
NULL	./dev/arm/hdlcd.cc	/^      bmp(&pixelPump.fb), pic(NULL), conv(PixelConverter::rgba8888_le),$/;"	v
NULL	./python/m5/params.py	/^NULL = NullSimObject()$/;"	v
NULL_VNET_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum VNET_type {CTRL_VNET_, DATA_VNET_, NULL_VNET_, NUM_VNET_TYPE_};$/;"	e	enum:VNET_type
NUMBER_BITS_PER_SET	./mem/ruby/common/Set.hh	/^const int NUMBER_BITS_PER_SET = 64;$/;"	v
NUM_APIC_REGS	./arch/x86/regs/apic.hh	/^        NUM_APIC_REGS$/;"	e	enum:X86ISA::ApicRegIndex
NUM_ARCH_INTREGS	./arch/arm/intregs.hh	/^    NUM_ARCH_INTREGS = 32,$/;"	e	enum:ArmISA::IntRegIndex
NUM_BLOCKED_CAUSES	./mem/cache/base.hh	/^        NUM_BLOCKED_CAUSES$/;"	e	enum:BaseCache::BlockedCause
NUM_CCREGS	./arch/arm/ccregs.hh	/^    NUM_CCREGS$/;"	e	enum:ArmISA::ccRegIndex
NUM_CCREGS	./arch/x86/regs/ccr.hh	/^        NUM_CCREGS$/;"	e	enum:X86ISA::CCRegIndex
NUM_COMMAND_ATTRIBUTES	./mem/packet.hh	/^        NUM_COMMAND_ATTRIBUTES$/;"	e	enum:MemCmd::Attribute
NUM_FDS	./sim/process.hh	/^    static const int NUM_FDS = 1024;$/;"	m	class:Process
NUM_FLIT_STAGE_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum flit_stage {I_, VA_, SA_, ST_, LT_, NUM_FLIT_STAGE_};$/;"	e	enum:flit_stage
NUM_FLIT_TYPE_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum flit_type {HEAD_, BODY_, TAIL_, HEAD_TAIL_, NUM_FLIT_TYPE_};$/;"	e	enum:flit_type
NUM_FLOATREGS	./arch/x86/regs/float.hh	/^        NUM_FLOATREGS = FLOATREG_MICROFP_BASE + NumMicroFpRegs$/;"	e	enum:X86ISA::FloatRegIndex
NUM_INTREGS	./arch/arm/intregs.hh	/^    NUM_INTREGS,$/;"	e	enum:ArmISA::IntRegIndex
NUM_INTREGS	./arch/x86/regs/int.hh	/^        NUM_INTREGS$/;"	e	enum:X86ISA::IntRegIndex
NUM_LR	./dev/arm/vgic.hh	/^    static const int NUM_LR             = 4;$/;"	m	class:VGic
NUM_MEM_CMDS	./mem/packet.hh	/^        NUM_MEM_CMDS$/;"	e	enum:MemCmd::Command
NUM_MISCREGS	./arch/alpha/registers.hh	/^    NUM_MISCREGS$/;"	e	enum:AlphaISA::MiscRegIndex
NUM_MISCREGS	./arch/arm/miscregs.hh	/^        NUM_MISCREGS                    \/\/ 606$/;"	e	enum:ArmISA::MiscRegIndex
NUM_MISCREGS	./arch/arm/miscregs.hh	/^    static_assert(sizeof(miscRegName) \/ sizeof(*miscRegName) == NUM_MISCREGS,$/;"	m	namespace:ArmISA
NUM_MISCREGS	./arch/power/miscregs.hh	/^    NUM_MISCREGS = 0$/;"	e	enum:PowerISA::MiscRegIndex
NUM_MISCREGS	./arch/x86/regs/misc.hh	/^        NUM_MISCREGS$/;"	e	enum:X86ISA::MiscRegIndex
NUM_MISCREG_INFOS	./arch/arm/miscregs.hh	/^        NUM_MISCREG_INFOS$/;"	e	enum:ArmISA::MiscRegInfo
NUM_OF_PERF_LEVELS	./dev/arm/energy_ctrl.hh	/^        NUM_OF_PERF_LEVELS,$/;"	e	enum:EnergyCtrl::Registers
NUM_OPEN_FLAGS	./arch/alpha/linux/linux.cc	/^const int AlphaLinux::NUM_OPEN_FLAGS =$/;"	m	class:AlphaLinux	file:
NUM_OPEN_FLAGS	./arch/alpha/linux/linux.hh	/^    static const int NUM_OPEN_FLAGS;$/;"	m	class:AlphaLinux
NUM_OPEN_FLAGS	./arch/alpha/tru64/tru64.cc	/^const int AlphaTru64::NUM_OPEN_FLAGS =$/;"	m	class:AlphaTru64	file:
NUM_OPEN_FLAGS	./arch/alpha/tru64/tru64.hh	/^    static const int NUM_OPEN_FLAGS;$/;"	m	class:AlphaTru64
NUM_OPEN_FLAGS	./arch/arm/freebsd/freebsd.cc	/^const int ArmFreebsd32::NUM_OPEN_FLAGS = sizeof(ArmFreebsd32::openFlagTable) \/$/;"	m	class:ArmFreebsd32	file:
NUM_OPEN_FLAGS	./arch/arm/freebsd/freebsd.cc	/^const int ArmFreebsd64::NUM_OPEN_FLAGS = sizeof(ArmFreebsd64::openFlagTable) \/$/;"	m	class:ArmFreebsd64	file:
NUM_OPEN_FLAGS	./arch/arm/freebsd/freebsd.hh	/^    static const int NUM_OPEN_FLAGS;$/;"	m	class:ArmFreebsd32
NUM_OPEN_FLAGS	./arch/arm/freebsd/freebsd.hh	/^    static const int NUM_OPEN_FLAGS;$/;"	m	class:ArmFreebsd64
NUM_OPEN_FLAGS	./arch/arm/linux/linux.cc	/^const int ArmLinux32::NUM_OPEN_FLAGS = sizeof(ArmLinux32::openFlagTable) \/$/;"	m	class:ArmLinux32	file:
NUM_OPEN_FLAGS	./arch/arm/linux/linux.cc	/^const int ArmLinux64::NUM_OPEN_FLAGS = sizeof(ArmLinux64::openFlagTable) \/$/;"	m	class:ArmLinux64	file:
NUM_OPEN_FLAGS	./arch/arm/linux/linux.hh	/^    static const int NUM_OPEN_FLAGS;$/;"	m	class:ArmLinux32
NUM_OPEN_FLAGS	./arch/arm/linux/linux.hh	/^    static const int NUM_OPEN_FLAGS;$/;"	m	class:ArmLinux64
NUM_OPEN_FLAGS	./arch/mips/linux/linux.cc	/^const int MipsLinux::NUM_OPEN_FLAGS =$/;"	m	class:MipsLinux	file:
NUM_OPEN_FLAGS	./arch/mips/linux/linux.hh	/^    static const int NUM_OPEN_FLAGS;$/;"	m	class:MipsLinux
NUM_OPEN_FLAGS	./arch/power/linux/linux.cc	/^const int PowerLinux::NUM_OPEN_FLAGS =$/;"	m	class:PowerLinux	file:
NUM_OPEN_FLAGS	./arch/power/linux/linux.hh	/^    static const int NUM_OPEN_FLAGS;$/;"	m	class:PowerLinux
NUM_OPEN_FLAGS	./arch/sparc/linux/linux.cc	/^const int SparcLinux::NUM_OPEN_FLAGS =$/;"	m	class:SparcLinux	file:
NUM_OPEN_FLAGS	./arch/sparc/linux/linux.hh	/^    static const int NUM_OPEN_FLAGS;$/;"	m	class:SparcLinux
NUM_OPEN_FLAGS	./arch/sparc/solaris/solaris.cc	/^const int SparcSolaris::NUM_OPEN_FLAGS =$/;"	m	class:SparcSolaris	file:
NUM_OPEN_FLAGS	./arch/sparc/solaris/solaris.hh	/^    static const int NUM_OPEN_FLAGS;$/;"	m	class:SparcSolaris
NUM_OPEN_FLAGS	./arch/x86/linux/linux.cc	/^const int X86Linux32::NUM_OPEN_FLAGS =$/;"	m	class:X86Linux32	file:
NUM_OPEN_FLAGS	./arch/x86/linux/linux.cc	/^const int X86Linux64::NUM_OPEN_FLAGS =$/;"	m	class:X86Linux64	file:
NUM_OPEN_FLAGS	./arch/x86/linux/linux.hh	/^    static const int NUM_OPEN_FLAGS;$/;"	m	class:X86Linux32
NUM_OPEN_FLAGS	./arch/x86/linux/linux.hh	/^    static const int NUM_OPEN_FLAGS;$/;"	m	class:X86Linux64
NUM_QREGS	./arch/arm/kvm/armv8_cpu.cc	/^constexpr static unsigned NUM_QREGS = NumFloatV8ArchRegs \/ 4;$/;"	v	file:
NUM_ROOT_PROCS	./arch/mips/linux/linux.hh	/^    static const int NUM_ROOT_PROCS = 2;$/;"	m	class:MipsLinux
NUM_SEGMENTREGS	./arch/x86/regs/segment.hh	/^        NUM_SEGMENTREGS$/;"	e	enum:X86ISA::SegmentRegIndex
NUM_VC_STATE_TYPE_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum VC_state_type {IDLE_, VC_AB_, ACTIVE_, NUM_VC_STATE_TYPE_};$/;"	e	enum:VC_state_type
NUM_VNET_TYPE_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum VNET_type {CTRL_VNET_, DATA_VNET_, NULL_VNET_, NUM_VNET_TYPE_};$/;"	e	enum:VNET_type
NUM_XREGS	./arch/arm/kvm/armv8_cpu.cc	/^constexpr static unsigned NUM_XREGS = NUM_ARCH_INTREGS - 1;$/;"	v	file:
NWindows	./arch/sparc/sparc_traits.hh	/^const int NWindows = 8;$/;"	m	namespace:SparcISA
NXM_LIB_VERSION	./kern/tru64/tru64.hh	/^    const int NXM_LIB_VERSION = 301003;$/;"	m	class:Tru64
NXM_SLOT_AVAIL	./kern/tru64/tru64.hh	/^        NXM_SLOT_AVAIL,$/;"	e	enum:Tru64::nxm_slot_state_t
NXM_SLOT_BOUND	./kern/tru64/tru64.hh	/^        NXM_SLOT_BOUND,$/;"	e	enum:Tru64::nxm_slot_state_t
NXM_SLOT_EMPTY	./kern/tru64/tru64.hh	/^        NXM_SLOT_EMPTY$/;"	e	enum:Tru64::nxm_slot_state_t
NXM_SLOT_UNBOUND	./kern/tru64/tru64.hh	/^        NXM_SLOT_UNBOUND,$/;"	e	enum:Tru64::nxm_slot_state_t
NXM_TASK_INIT_VP	./kern/tru64/tru64.hh	/^    static const int NXM_TASK_INIT_VP = 2;      \/\/!< initial thread is VP$/;"	m	class:Tru64
NXM_TYPE_MANAGER	./kern/tru64/tru64.hh	/^        NXM_TYPE_MANAGER        = 2$/;"	e	enum:Tru64::nxm_thread_type
NXM_TYPE_SCS	./kern/tru64/tru64.hh	/^        NXM_TYPE_SCS    = 0,$/;"	e	enum:Tru64::nxm_thread_type
NXM_TYPE_VP	./kern/tru64/tru64.hh	/^        NXM_TYPE_VP             = 1,$/;"	e	enum:Tru64::nxm_thread_type
N_ALIGN	./base/loader/exec_aout.h	49;"	d
N_BADMAG	./base/loader/exec_aout.h	54;"	d
N_BADMAX	./arch/alpha/aout_machdep.h	59;"	d
N_BSSADDR	./arch/alpha/aout_machdep.h	63;"	d
N_DATADDR	./arch/alpha/aout_machdep.h	62;"	d
N_DATOFF	./arch/alpha/aout_machdep.h	68;"	d
N_GETMAGIC	./arch/alpha/aout_machdep.h	57;"	d
N_PAGSIZ	./base/loader/exec_aout.h	41;"	d
N_TXTADDR	./arch/alpha/aout_machdep.h	61;"	d
N_TXTOFF	./arch/alpha/aout_machdep.h	65;"	d
NameCache	./base/cp_annotate.hh	/^    typedef std::map<System*, std::pair<std::string, int> > NameCache;$/;"	t	class:CPA
NameMapType	./base/statistics.hh	/^typedef std::map<std::string, Info *> NameMapType;$/;"	t	namespace:Stats
NameString1	./arch/x86/cpuid.cc	/^        NameString1,$/;"	e	enum:X86ISA::ExtendedCpuidFunctions	file:
NameString2	./arch/x86/cpuid.cc	/^        NameString2,$/;"	e	enum:X86ISA::ExtendedCpuidFunctions	file:
NameString3	./arch/x86/cpuid.cc	/^        NameString3,$/;"	e	enum:X86ISA::ExtendedCpuidFunctions	file:
Named	./base/trace.hh	/^    Named(const std::string &name_) : _name(name_) { }$/;"	f	class:Named
Named	./base/trace.hh	/^class Named$/;"	c
NativeTrace	./cpu/CPUTracers.py	/^class NativeTrace(ExeTracer):$/;"	c
NativeTrace	./cpu/nativetrace.cc	/^NativeTrace::NativeTrace(const Params *p)$/;"	f	class:Trace::NativeTrace
NativeTrace	./cpu/nativetrace.hh	/^class NativeTrace : public ExeTracer$/;"	c	namespace:Trace
NativeTraceRecord	./cpu/nativetrace.hh	/^    NativeTraceRecord(NativeTrace * _parent,$/;"	f	class:Trace::NativeTraceRecord
NativeTraceRecord	./cpu/nativetrace.hh	/^class NativeTraceRecord : public ExeTracerRecord$/;"	c	namespace:Trace
NeedsResponse	./mem/packet.hh	/^        NeedsResponse,  \/\/!< Requester needs response from target$/;"	e	enum:MemCmd::Attribute
NeedsWritable	./mem/packet.hh	/^        NeedsWritable,  \/\/!< Requires writable copy to complete in-cache$/;"	e	enum:MemCmd::Attribute
Net	./base/inet.cc	/^namespace Net {$/;"	n	file:
Net	./base/inet.hh	/^namespace Net {$/;"	n
NetDest	./mem/ruby/common/NetDest.cc	/^NetDest::NetDest()$/;"	f	class:NetDest
NetDest	./mem/ruby/common/NetDest.hh	/^class NetDest$/;"	c
Network	./mem/ruby/network/Network.cc	/^Network::Network(const Params *p)$/;"	f	class:Network
Network	./mem/ruby/network/Network.hh	/^class Network : public ClockedObject$/;"	c
NetworkBandwidth	./python/m5/params.py	/^class NetworkBandwidth(float,ParamValue):$/;"	c
NetworkInterface	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.cc	/^NetworkInterface::NetworkInterface(const Params *p)$/;"	f	class:NetworkInterface
NetworkInterface	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	/^class NetworkInterface : public ClockedObject, public FlexibleConsumer$/;"	c
NetworkInterface_d	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.cc	/^NetworkInterface_d::NetworkInterface_d(const Params *p)$/;"	f	class:NetworkInterface_d
NetworkInterface_d	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^class NetworkInterface_d : public ClockedObject, public Consumer$/;"	c
NetworkLink	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.py	/^class NetworkLink(ClockedObject):$/;"	c
NetworkLink	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.cc	/^NetworkLink::NetworkLink(const Params *p)$/;"	f	class:NetworkLink
NetworkLink	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	/^class NetworkLink : public ClockedObject, public Consumer$/;"	c
NetworkLink_d	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^class NetworkLink_d(ClockedObject):$/;"	c
NetworkLink_d	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.cc	/^NetworkLink_d::NetworkLink_d(const Params *p)$/;"	f	class:NetworkLink_d
NetworkLink_d	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.hh	/^class NetworkLink_d : public ClockedObject, public Consumer$/;"	c
NetworkTest	./cpu/testers/networktest/NetworkTest.py	/^class NetworkTest(MemObject):$/;"	c
NetworkTest	./cpu/testers/networktest/networktest.cc	/^NetworkTest::NetworkTest(const Params *p)$/;"	f	class:NetworkTest
NetworkTest	./cpu/testers/networktest/networktest.hh	/^class NetworkTest : public MemObject$/;"	c
NetworkTestSenderState	./cpu/testers/networktest/networktest.hh	/^        NetworkTestSenderState(uint8_t *_data)$/;"	f	class:NetworkTest::NetworkTestSenderState
NetworkTestSenderState	./cpu/testers/networktest/networktest.hh	/^    class NetworkTestSenderState : public Packet::SenderState$/;"	c	class:NetworkTest
Never	./mem/se_translating_port_proxy.hh	/^        Never,$/;"	e	enum:SETranslatingPortProxy::AllocType
NewExprAST	./mem/slicc/ast/NewExprAST.py	/^class NewExprAST(ExprAST):$/;"	c
NextEthernetAddr	./python/m5/params.py	/^def NextEthernetAddr():$/;"	f
NextGlobalsOffset	./arch/sparc/isa.hh	/^        NextGlobalsOffset = MicroIntOffset + NumMicroIntRegs,$/;"	e	enum:SparcISA::ISA::InstIntRegOffsets
NextPage	./mem/se_translating_port_proxy.hh	/^        NextPage$/;"	e	enum:SETranslatingPortProxy::AllocType
NextWindowOffset	./arch/sparc/isa.hh	/^        NextWindowOffset = NextGlobalsOffset + NumGlobalRegs,$/;"	e	enum:SparcISA::ISA::InstIntRegOffsets
NoAccess	./arch/arm/pagetable.hh	/^        NoAccess = 0,$/;"	m	class:ArmISA::TlbEntry::DomainType
NoAddrRangeCoverage	./cpu/minor/lsq.hh	/^        NoAddrRangeCoverage \/* Two ranges are disjoint *\/$/;"	e	enum:Minor::LSQ::AddrRangeCoverage
NoArchPageTable	./mem/page_table.hh	/^    NoArchPageTable(const std::string &__name, uint64_t _pid, System *_sys,$/;"	f	class:NoArchPageTable
NoArchPageTable	./mem/page_table.hh	/^class NoArchPageTable : public FuncPageTable$/;"	c
NoBranch	./cpu/minor/pipe_data.hh	/^        NoBranch,$/;"	e	enum:Minor::BranchData::Reason
NoBubbleTraits	./cpu/minor/buffers.hh	/^class NoBubbleTraits$/;"	c	namespace:Minor
NoCommand	./dev/x86/i8042.hh	/^    static const uint16_t NoCommand = (uint16_t)(-1);$/;"	m	class:X86ISA::I8042
NoCommand	./dev/x86/i8042.hh	/^    static const uint16_t NoCommand = (uint16_t)(-1);$/;"	m	class:X86ISA::PS2Device
NoFormat	./arch/isa_parser.py	/^class NoFormat(object):$/;"	c
NoGoodAddr	./cpu/o3/fetch.hh	/^        NoGoodAddr$/;"	e	enum:DefaultFetch::ThreadStatus
NoImm	./arch/x86/decoder_tables.cc	/^        NoImm,$/;"	e	enum:X86ISA::SizeType	file:
NoMaliGpu	./dev/arm/NoMali.py	/^class NoMaliGpu(PioDevice):$/;"	c
NoMaliGpu	./dev/arm/gpu_nomali.cc	/^NoMaliGpu::NoMaliGpu(const NoMaliGpuParams *p)$/;"	f	class:NoMaliGpu
NoMaliGpu	./dev/arm/gpu_nomali.hh	/^class NoMaliGpu : public PioDevice$/;"	c
NoMaliGpuType	./dev/arm/NoMali.py	/^class NoMaliGpuType(Enum): vals = [$/;"	c
NoOverride	./arch/x86/types.hh	/^        NoOverride,$/;"	e	enum:X86ISA::Prefixes
Node	./base/statistics.hh	/^class Node$/;"	c	namespace:Stats
Node	./base/trie.hh	/^        Node(Key _key, Key _mask, Value *_val) :$/;"	f	struct:Trie::Node
Node	./base/trie.hh	/^    struct Node$/;"	s	class:Trie
Node	./mem/stack_dist_calc.hh	/^        Node() : sumLeft(0), sumRight(0), discardLeft(false),$/;"	f	struct:StackDistCalc::Node
Node	./mem/stack_dist_calc.hh	/^    struct Node{$/;"	s	class:StackDistCalc
NodeID	./mem/ruby/common/TypeDefines.hh	/^typedef unsigned int NodeID;$/;"	t
NodeInfo	./dev/net/tcp_iface.hh	/^    struct NodeInfo$/;"	s	class:TCPIface
NodePtr	./base/statistics.hh	/^typedef std::shared_ptr<Node> NodePtr;$/;"	t	namespace:Stats
NodeRobNum	./cpu/trace/trace_cpu.hh	/^        typedef uint64_t NodeRobNum;$/;"	t	class:TraceCPU::ElasticDataGen
NodeSeqNum	./cpu/trace/trace_cpu.hh	/^        typedef uint64_t NodeSeqNum;$/;"	t	class:TraceCPU::ElasticDataGen
NodeType	./python/m5/util/dot_writer.py	/^class NodeType:$/;"	c
NonCountingBloomFilter	./mem/ruby/filters/NonCountingBloomFilter.cc	/^NonCountingBloomFilter::NonCountingBloomFilter(int head, int tail)$/;"	f	class:NonCountingBloomFilter
NonCountingBloomFilter	./mem/ruby/filters/NonCountingBloomFilter.hh	/^class NonCountingBloomFilter : public AbstractBloomFilter$/;"	c
NonMaskableInterrupt	./arch/mips/faults.hh	/^class NonMaskableInterrupt : public MipsFault<NonMaskableInterrupt>$/;"	c	namespace:MipsISA
NonMaskableInterrupt	./arch/x86/faults.hh	/^        NonMaskableInterrupt(uint8_t _vector) :$/;"	f	class:X86ISA::NonMaskableInterrupt
NonMaskableInterrupt	./arch/x86/faults.hh	/^    class NonMaskableInterrupt : public X86Interrupt$/;"	c	namespace:X86ISA
NonSpecMapIt	./cpu/o3/inst_queue.hh	/^    typedef typename std::map<InstSeqNum, DynInstPtr>::iterator NonSpecMapIt;$/;"	t	class:InstructionQueue
NoncoherentXBar	./mem/XBar.py	/^class NoncoherentXBar(BaseXBar):$/;"	c
NoncoherentXBar	./mem/noncoherent_xbar.cc	/^NoncoherentXBar::NoncoherentXBar(const NoncoherentXBarParams *p)$/;"	f	class:NoncoherentXBar
NoncoherentXBar	./mem/noncoherent_xbar.hh	/^class NoncoherentXBar : public BaseXBar$/;"	c
NoncoherentXBarMasterPort	./mem/noncoherent_xbar.hh	/^        NoncoherentXBarMasterPort(const std::string &_name,$/;"	f	class:NoncoherentXBar::NoncoherentXBarMasterPort
NoncoherentXBarMasterPort	./mem/noncoherent_xbar.hh	/^    class NoncoherentXBarMasterPort : public MasterPort$/;"	c	class:NoncoherentXBar
NoncoherentXBarSlavePort	./mem/noncoherent_xbar.hh	/^        NoncoherentXBarSlavePort(const std::string &_name,$/;"	f	class:NoncoherentXBar::NoncoherentXBarSlavePort
NoncoherentXBarSlavePort	./mem/noncoherent_xbar.hh	/^    class NoncoherentXBarSlavePort : public QueuedSlavePort$/;"	c	class:NoncoherentXBar
None	./dev/storage/ide_disk.hh	/^    None = 0,$/;"	e	enum:Events
NoneTag	./arch/arm/linux/atag.hh	/^    NoneTag   = 0x00000000$/;"	e	enum:__anon73
NoopMachInst	./arch/alpha/isa_traits.hh	/^const ExtMachInst NoopMachInst = 0x2ffe0000;$/;"	m	namespace:AlphaISA
NoopMachInst	./arch/arm/isa_traits.hh	/^    const ExtMachInst NoopMachInst = 0x01E320F000ULL;$/;"	m	namespace:ArmISA
NoopMachInst	./arch/mips/isa_traits.hh	/^const ExtMachInst NoopMachInst = 0x00000000;$/;"	m	namespace:MipsISA
NoopMachInst	./arch/power/isa_traits.hh	/^const ExtMachInst NoopMachInst = 0x60000000;$/;"	m	namespace:PowerISA
NoopMachInst	./arch/sparc/isa_traits.hh	/^const MachInst NoopMachInst = 0x01000000;$/;"	m	namespace:SparcISA
NormalPhase	./base/vnc/vncserver.hh	/^        NormalPhase$/;"	e	enum:VncServer::ConnectionState
NormalTran	./arch/arm/tlb.hh	/^        NormalTran = 0,$/;"	e	enum:ArmISA::TLB::ArmTranslationType
NotCF	./arch/x86/insts/microop.hh	/^            NotCF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
NotCvZF	./arch/x86/insts/microop.hh	/^            NotCvZF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
NotDraining	./cpu/minor/execute.hh	/^        NotDraining, \/* Not draining, possibly running *\/$/;"	e	enum:Minor::Execute::DrainState
NotECF	./arch/x86/insts/microop.hh	/^            NotECF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
NotEZF	./arch/x86/insts/microop.hh	/^            NotEZF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
NotFalse	./arch/x86/insts/microop.hh	/^            NotFalse = True,$/;"	e	enum:X86ISA::ConditionTests::CondTest
NotIssued	./cpu/minor/fetch1.hh	/^            NotIssued, \/* Just been made *\/$/;"	e	enum:Minor::Fetch1::FetchRequest::FetchRequestState
NotIssued	./cpu/minor/lsq.hh	/^            NotIssued, \/* Newly created *\/$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
NotMSTRC	./arch/x86/insts/microop.hh	/^            NotMSTRC,$/;"	e	enum:X86ISA::ConditionTests::CondTest
NotMSTRZ	./arch/x86/insts/microop.hh	/^            NotMSTRZ,$/;"	e	enum:X86ISA::ConditionTests::CondTest
NotOF	./arch/x86/insts/microop.hh	/^            NotOF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
NotPF	./arch/x86/insts/microop.hh	/^            NotPF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
NotSF	./arch/x86/insts/microop.hh	/^            NotSF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
NotSTRZ	./arch/x86/insts/microop.hh	/^            NotSTRZ,$/;"	e	enum:X86ISA::ConditionTests::CondTest
NotSZnZF	./arch/x86/insts/microop.hh	/^            NotSZnZF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
NotSxOF	./arch/x86/insts/microop.hh	/^            NotSxOF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
NotSxOvZF	./arch/x86/insts/microop.hh	/^            NotSxOvZF$/;"	e	enum:X86ISA::ConditionTests::CondTest
NotTrue	./arch/x86/insts/microop.hh	/^            NotTrue = False,$/;"	e	enum:X86ISA::ConditionTests::CondTest
NotZF	./arch/x86/insts/microop.hh	/^            NotZF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
NsDmaState	./dev/net/ns_gige.cc	/^const char *NsDmaState[] =$/;"	v
NsRxStateStrings	./dev/net/ns_gige.cc	/^const char *NsRxStateStrings[] =$/;"	v
NsTxStateStrings	./dev/net/ns_gige.cc	/^const char *NsTxStateStrings[] =$/;"	v
Nucleus	./arch/sparc/tlb.hh	/^        Nucleus = 2$/;"	e	enum:SparcISA::TLB::ContextType
NullISA	./arch/null/isa_traits.hh	/^namespace NullISA$/;"	n
NullISA	./arch/null/registers.hh	/^namespace NullISA {$/;"	n
NullISA	./arch/null/types.hh	/^namespace NullISA$/;"	n
NullISA	./arch/null/utility.hh	/^namespace NullISA {$/;"	n
NullSimObject	./python/m5/params.py	/^class NullSimObject(object):$/;"	c
NumArgumentRegs	./arch/arm/registers.hh	/^const int NumArgumentRegs = 4;$/;"	m	namespace:ArmISA
NumArgumentRegs	./arch/x86/process.cc	/^static const int NumArgumentRegs = sizeof(ArgumentReg) \/ sizeof(const int);$/;"	v	file:
NumArgumentRegs32	./arch/x86/process.cc	/^static const int NumArgumentRegs32 = sizeof(ArgumentReg) \/ sizeof(const int);$/;"	v	file:
NumArgumentRegs64	./arch/arm/registers.hh	/^const int NumArgumentRegs64 = 8;$/;"	m	namespace:ArmISA
NumCCRegs	./arch/alpha/registers.hh	/^const int NumCCRegs = 0;$/;"	m	namespace:AlphaISA
NumCCRegs	./arch/arm/registers.hh	/^const int NumCCRegs = NUM_CCREGS;$/;"	m	namespace:ArmISA
NumCCRegs	./arch/mips/registers.hh	/^const int NumCCRegs = 0;$/;"	m	namespace:MipsISA
NumCCRegs	./arch/power/registers.hh	/^const int NumCCRegs = 0;$/;"	m	namespace:PowerISA
NumCCRegs	./arch/sparc/registers.hh	/^const int NumCCRegs = 0;$/;"	m	namespace:SparcISA
NumCCRegs	./arch/x86/registers.hh	/^const int NumCCRegs = NUM_CCREGS;$/;"	m	namespace:X86ISA
NumCRegs	./arch/x86/x86_traits.hh	/^    const int NumCRegs = 16;$/;"	m	namespace:X86ISA
NumCodes	./arch/alpha/osfpal.hh	/^        NumCodes$/;"	e	enum:PAL::__anon50
NumDRegs	./arch/x86/x86_traits.hh	/^    const int NumDRegs = 8;$/;"	m	namespace:X86ISA
NumDeviceIds	./dev/sparc/iob.hh	/^        NumDeviceIds$/;"	e	enum:Iob::DeviceId
NumExtendedCpuidFuncs	./arch/x86/cpuid.cc	/^        NumExtendedCpuidFuncs$/;"	e	enum:X86ISA::ExtendedCpuidFunctions	file:
NumFaultSources	./arch/arm/faults.cc	/^              ArmFault::NumFaultSources,$/;"	m	class:ArmISA::ArmFault	file:
NumFaultSources	./arch/arm/faults.hh	/^        NumFaultSources,$/;"	e	enum:ArmISA::ArmFault::FaultSource
NumFloatArchRegs	./arch/alpha/registers.hh	/^const int NumFloatArchRegs = 32;$/;"	m	namespace:AlphaISA
NumFloatArchRegs	./arch/mips/registers.hh	/^const int NumFloatArchRegs = 32;$/;"	m	namespace:MipsISA
NumFloatArchRegs	./arch/power/registers.hh	/^const int NumFloatArchRegs = 32;$/;"	m	namespace:PowerISA
NumFloatArchRegs	./arch/sparc/sparc_traits.hh	/^const int NumFloatArchRegs = NumFloatRegs;$/;"	m	namespace:SparcISA
NumFloatRegs	./arch/alpha/registers.hh	/^const int NumFloatRegs = NumFloatArchRegs;$/;"	m	namespace:AlphaISA
NumFloatRegs	./arch/arm/registers.hh	/^const int NumFloatRegs = NumFloatV8ArchRegs + NumFloatSpecialRegs;$/;"	m	namespace:ArmISA
NumFloatRegs	./arch/mips/registers.hh	/^const int NumFloatRegs = NumFloatArchRegs + NumFloatSpecialRegs;\/\/$/;"	m	namespace:MipsISA
NumFloatRegs	./arch/power/registers.hh	/^const int NumFloatRegs = NumFloatArchRegs + NumFloatSpecialRegs;$/;"	m	namespace:PowerISA
NumFloatRegs	./arch/sparc/sparc_traits.hh	/^const int NumFloatRegs = 64;$/;"	m	namespace:SparcISA
NumFloatRegs	./arch/x86/registers.hh	/^const int NumFloatRegs =$/;"	m	namespace:X86ISA
NumFloatSpecialRegs	./arch/arm/registers.hh	/^const int NumFloatSpecialRegs = 32;$/;"	m	namespace:ArmISA
NumFloatSpecialRegs	./arch/mips/registers.hh	/^const int NumFloatSpecialRegs = 5;$/;"	m	namespace:MipsISA
NumFloatSpecialRegs	./arch/power/registers.hh	/^const int NumFloatSpecialRegs = 0;$/;"	m	namespace:PowerISA
NumFloatV7ArchRegs	./arch/arm/registers.hh	/^const int NumFloatV7ArchRegs  = 64;$/;"	m	namespace:ArmISA
NumFloatV8ArchRegs	./arch/arm/registers.hh	/^const int NumFloatV8ArchRegs  = 128;$/;"	m	namespace:ArmISA
NumGlobalRegs	./arch/sparc/isa.hh	/^    static const int NumGlobalRegs = 8;$/;"	m	class:SparcISA::ISA
NumImplicitIntRegs	./arch/x86/x86_traits.hh	/^    const int NumImplicitIntRegs = 6;$/;"	m	namespace:X86ISA
NumIntArchRegs	./arch/alpha/registers.hh	/^const int NumIntArchRegs = 32;$/;"	m	namespace:AlphaISA
NumIntArchRegs	./arch/arm/registers.hh	/^const int NumIntArchRegs = NUM_ARCH_INTREGS;$/;"	m	namespace:ArmISA
NumIntArchRegs	./arch/mips/registers.hh	/^const int NumIntArchRegs = 32;$/;"	m	namespace:MipsISA
NumIntArchRegs	./arch/power/registers.hh	/^const int NumIntArchRegs = 32;$/;"	m	namespace:PowerISA
NumIntArchRegs	./arch/sparc/registers.hh	/^const int NumIntArchRegs = 32;$/;"	m	namespace:SparcISA
NumIntArchRegs	./arch/x86/registers.hh	/^const int NumIntArchRegs = NUM_INTREGS;$/;"	m	namespace:X86ISA
NumIntRegs	./arch/alpha/registers.hh	/^const int NumIntRegs = NumIntArchRegs + NumPALShadowRegs;$/;"	m	namespace:AlphaISA
NumIntRegs	./arch/arm/registers.hh	/^const int NumIntRegs = NUM_INTREGS;$/;"	m	namespace:ArmISA
NumIntRegs	./arch/mips/registers.hh	/^const int NumIntRegs = NumIntArchRegs + NumIntSpecialRegs;        \/\/HI & LO Regs$/;"	m	namespace:MipsISA
NumIntRegs	./arch/power/registers.hh	/^const int NumIntRegs = NumIntArchRegs + NumIntSpecialRegs;$/;"	m	namespace:PowerISA
NumIntRegs	./arch/sparc/registers.hh	/^const int NumIntRegs = (MaxGL + 1) * 8 + NWindows * 16 + NumMicroIntRegs;$/;"	m	namespace:SparcISA
NumIntRegs	./arch/x86/registers.hh	/^const int NumIntRegs = NumIntArchRegs + NumMicroIntRegs + NumImplicitIntRegs;$/;"	m	namespace:X86ISA
NumIntSpecialRegs	./arch/mips/registers.hh	/^const int NumIntSpecialRegs = 9;$/;"	m	namespace:MipsISA
NumIntSpecialRegs	./arch/power/registers.hh	/^const int NumIntSpecialRegs = 9;$/;"	m	namespace:PowerISA
NumInternalProcRegs	./arch/alpha/ipr.hh	/^    NumInternalProcRegs             \/\/ number of IPR registers$/;"	e	enum:AlphaISA::MiscRegIpr
NumInternalProcRegs	./arch/power/registers.hh	/^const int NumInternalProcRegs = 0;$/;"	m	namespace:PowerISA
NumInterruptLevels	./arch/alpha/isa_traits.hh	/^    NumInterruptLevels = INTLEVEL_EXTERNAL_MAX$/;"	e	enum:AlphaISA::InterruptLevels
NumInterruptLevels	./arch/mips/isa_traits.hh	/^    NumInterruptLevels = INTLEVEL_EXTERNAL_MAX$/;"	e	enum:MipsISA::InterruptLevels
NumInterruptTypes	./arch/arm/isa_traits.hh	/^        NumInterruptTypes$/;"	e	enum:ArmISA::InterruptTypes
NumInterruptTypes	./arch/sparc/isa_traits.hh	/^    NumInterruptTypes$/;"	e	enum:SparcISA::InterruptTypes
NumLevels	./arch/sparc/faults.hh	/^        NumLevels,$/;"	e	enum:SparcISA::SparcFaultBase::PrivilegeLevel
NumLines	./dev/x86/i8259.hh	/^    static const int NumLines = 8;$/;"	m	class:X86ISA::I8259
NumMMXRegs	./arch/x86/x86_traits.hh	/^    const int NumMMXRegs = 8;$/;"	m	namespace:X86ISA
NumMicroFpRegs	./arch/x86/x86_traits.hh	/^    const int NumMicroFpRegs = 8;$/;"	m	namespace:X86ISA
NumMicroIntRegs	./arch/sparc/sparc_traits.hh	/^const int NumMicroIntRegs = 9;$/;"	m	namespace:SparcISA
NumMicroIntRegs	./arch/x86/x86_traits.hh	/^    const int NumMicroIntRegs = 16;$/;"	m	namespace:X86ISA
NumMiscRegs	./arch/alpha/registers.hh	/^const int NumMiscRegs = NUM_MISCREGS;$/;"	m	namespace:AlphaISA
NumMiscRegs	./arch/arm/registers.hh	/^const int NumMiscRegs = NUM_MISCREGS;$/;"	m	namespace:ArmISA
NumMiscRegs	./arch/mips/registers.hh	/^const int NumMiscRegs = MISCREG_NUMREGS;$/;"	m	namespace:MipsISA
NumMiscRegs	./arch/power/registers.hh	/^const int NumMiscRegs = NUM_MISCREGS;$/;"	m	namespace:PowerISA
NumMiscRegs	./arch/sparc/miscregs.hh	/^const int NumMiscRegs = MISCREG_NUMMISCREGS;$/;"	m	namespace:SparcISA
NumMiscRegs	./arch/x86/registers.hh	/^const int NumMiscRegs = NUM_MISCREGS;$/;"	m	namespace:X86ISA
NumModes	./arch/x86/intmessage.hh	/^            NumModes$/;"	e	enum:X86ISA::DeliveryMode::IntDeliveryMode
NumOutputBits	./dev/x86/i8042.cc	/^const uint8_t NumOutputBits = 14;$/;"	v
NumPALShadowRegs	./arch/alpha/registers.hh	/^const int NumPALShadowRegs = 8;$/;"	m	namespace:AlphaISA
NumRegClasses	./cpu/reg_class.hh	/^const int NumRegClasses = MiscRegClass + 1;$/;"	v
NumSegments	./arch/x86/x86_traits.hh	/^    const int NumSegments = 6;$/;"	m	namespace:X86ISA
NumStages	./cpu/o3/cpu.hh	/^        NumStages };$/;"	e	enum:FullO3CPU::StageIdx
NumStandardCpuidFuncs	./arch/x86/cpuid.cc	/^        NumStandardCpuidFuncs$/;"	e	enum:X86ISA::StandardCpuidFunction	file:
NumStatus	./cpu/base_dyn_inst.hh	/^        NumStatus$/;"	e	enum:BaseDynInst::Status
NumSysSegments	./arch/x86/x86_traits.hh	/^    const int NumSysSegments = 4;$/;"	m	namespace:X86ISA
NumTaskId	./mem/request.hh	/^        NumTaskId$/;"	e	enum:ContextSwitchTaskId::TaskId
NumWindowedRegs	./arch/sparc/isa.hh	/^    static const int NumWindowedRegs = 24;$/;"	m	class:SparcISA::ISA
NumXMMRegs	./arch/x86/x86_traits.hh	/^    const int NumXMMRegs = 16;$/;"	m	namespace:X86ISA
Num_Mach_Syscall_Descs	./arch/alpha/tru64/process.hh	/^    const int Num_Mach_Syscall_Descs;$/;"	m	class:AlphaISA::AlphaTru64Process
Num_OpClasses	./cpu/op_class.hh	/^static const OpClass Num_OpClasses = Enums::Num_OpClass;$/;"	v
Num_StageId	./cpu/minor/pipeline.hh	/^        Num_StageId \/* Stage count *\/$/;"	e	enum:Minor::Pipeline::StageId
Num_Syscall32_Descs	./arch/sparc/linux/process.hh	/^    static const int Num_Syscall32_Descs;$/;"	m	class:SparcISA::SparcLinuxProcess
Num_Syscall32_Descs	./arch/sparc/linux/syscalls.cc	/^const int SparcLinuxProcess::Num_Syscall32_Descs =$/;"	m	class:SparcISA::SparcLinuxProcess	file:
Num_Syscall_Descs	./arch/alpha/linux/process.hh	/^    const int Num_Syscall_Descs;$/;"	m	class:AlphaISA::AlphaLinuxProcess
Num_Syscall_Descs	./arch/alpha/tru64/process.hh	/^    const int Num_Syscall_Descs;$/;"	m	class:AlphaISA::AlphaTru64Process
Num_Syscall_Descs	./arch/mips/linux/process.hh	/^    const int Num_Syscall_Descs;$/;"	m	class:MipsLinuxProcess
Num_Syscall_Descs	./arch/power/linux/process.hh	/^    const int Num_Syscall_Descs;$/;"	m	class:PowerLinuxProcess
Num_Syscall_Descs	./arch/sparc/linux/process.hh	/^    static const int Num_Syscall_Descs;$/;"	m	class:SparcISA::SparcLinuxProcess
Num_Syscall_Descs	./arch/sparc/linux/syscalls.cc	/^const int SparcLinuxProcess::Num_Syscall_Descs =$/;"	m	class:SparcISA::SparcLinuxProcess	file:
Num_Syscall_Descs	./arch/sparc/solaris/process.hh	/^    const int Num_Syscall_Descs;$/;"	m	class:SparcISA::SparcSolarisProcess
Number	./kern/tru64/tru64_syscalls.hh	/^    static const int Number = StandardNumber + MachNumber;$/;"	m	class:SystemCalls
NumericParamValue	./python/m5/params.py	/^class NumericParamValue(ParamValue):$/;"	c
NvFlags	./dev/arm/rv_ctrl.hh	/^        NvFlags    = 0x38,$/;"	e	enum:RealViewCtrl::__anon19
NvFlagsClr	./dev/arm/rv_ctrl.hh	/^        NvFlagsClr = 0x3C,$/;"	e	enum:RealViewCtrl::__anon19
O3CPU	./cpu/o3/commit.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:DefaultCommit
O3CPU	./cpu/o3/cpu.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:FullO3CPU
O3CPU	./cpu/o3/decode.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:DefaultDecode
O3CPU	./cpu/o3/dyn_inst.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:BaseO3DynInst
O3CPU	./cpu/o3/fetch.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:DefaultFetch
O3CPU	./cpu/o3/iew.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:DefaultIEW
O3CPU	./cpu/o3/impl.hh	/^    typedef FullO3CPU<O3CPUImpl> O3CPU;$/;"	t	struct:O3CPUImpl
O3CPU	./cpu/o3/inst_queue.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:InstructionQueue
O3CPU	./cpu/o3/lsq.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:LSQ
O3CPU	./cpu/o3/lsq_unit.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:LSQUnit
O3CPU	./cpu/o3/rename.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:DefaultRename
O3CPU	./cpu/o3/rob.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:ROB
O3CPU	./cpu/o3/thread_context.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:O3ThreadContext
O3CPU	./cpu/o3/thread_state.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	struct:O3ThreadState
O3CPUImpl	./cpu/o3/impl.hh	/^struct O3CPUImpl$/;"	s
O3Checker	./cpu/o3/O3Checker.py	/^class O3Checker(CheckerCPU):$/;"	c
O3Checker	./cpu/o3/checker.hh	/^    O3Checker(Params *p)$/;"	f	class:O3Checker
O3Checker	./cpu/o3/checker.hh	/^class O3Checker : public Checker<O3CPUImpl>$/;"	c
O3ThreadContext	./cpu/o3/thread_context.hh	/^class O3ThreadContext : public ThreadContext$/;"	c
O3ThreadState	./cpu/o3/thread_state.hh	/^    O3ThreadState(O3CPU *_cpu, int _thread_num, Process *_process)$/;"	f	struct:O3ThreadState
O3ThreadState	./cpu/o3/thread_state.hh	/^struct O3ThreadState : public ThreadState {$/;"	s
OEBit	./arch/x86/regs/misc.hh	/^        OEBit = 1 << 3,$/;"	e	enum:X86ISA::X87StatusBit
OF	./arch/x86/insts/microop.hh	/^            OF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
OFBit	./arch/x86/regs/misc.hh	/^        OFBit = 1 << 11$/;"	e	enum:X86ISA::CondFlagBit
OFF_DEVICE_FEATURES	./dev/virtio/pci.hh	/^    static const Addr OFF_DEVICE_FEATURES = 0x00;$/;"	m	class:PciVirtIO
OFF_DEVICE_STATUS	./dev/virtio/pci.hh	/^    static const Addr OFF_DEVICE_STATUS = 0x12;$/;"	m	class:PciVirtIO
OFF_GUEST_FEATURES	./dev/virtio/pci.hh	/^    static const Addr OFF_GUEST_FEATURES = 0x04;$/;"	m	class:PciVirtIO
OFF_ISR_STATUS	./dev/virtio/pci.hh	/^    static const Addr OFF_ISR_STATUS = 0x13;$/;"	m	class:PciVirtIO
OFF_QUEUE_ADDRESS	./dev/virtio/pci.hh	/^    static const Addr OFF_QUEUE_ADDRESS = 0x08;$/;"	m	class:PciVirtIO
OFF_QUEUE_NOTIFY	./dev/virtio/pci.hh	/^    static const Addr OFF_QUEUE_NOTIFY = 0x10;$/;"	m	class:PciVirtIO
OFF_QUEUE_SELECT	./dev/virtio/pci.hh	/^    static const Addr OFF_QUEUE_SELECT = 0x0E;$/;"	m	class:PciVirtIO
OFF_QUEUE_SIZE	./dev/virtio/pci.hh	/^    static const Addr OFF_QUEUE_SIZE = 0x0C;$/;"	m	class:PciVirtIO
OFF_VIO_DEVICE	./dev/virtio/pci.hh	/^    static const Addr OFF_VIO_DEVICE = 0x14;$/;"	m	class:PciVirtIO
OMAGIC	./base/loader/exec_aout.h	45;"	d
OO	./arch/x86/decoder_tables.cc	/^    const uint8_t OO = OperandSizeOverride;$/;"	m	namespace:X86ISA	file:
OPDDiterator	./cpu/func_unit.hh	/^typedef std::vector<OpDesc *>::const_iterator OPDDiterator;$/;"	t
OPTR	./base/loader/coff_sym.h	/^} OPTR, *pOPTR;$/;"	t	typeref:struct:__anon116
OP_BEGIN	./base/cp_annotate.hh	/^        OP_BEGIN           = 0x01,$/;"	e	enum:CPA::ops
OP_DEQUEUE	./base/cp_annotate.hh	/^        OP_DEQUEUE         = 0x05,$/;"	e	enum:CPA::ops
OP_IDENT	./base/cp_annotate.hh	/^        OP_IDENT           = 0x0B,$/;"	e	enum:CPA::ops
OP_LINK	./base/cp_annotate.hh	/^        OP_LINK            = 0x0A,$/;"	e	enum:CPA::ops
OP_PEEK	./base/cp_annotate.hh	/^        OP_PEEK            = 0x09,$/;"	e	enum:CPA::ops
OP_QUEUE	./base/cp_annotate.hh	/^        OP_QUEUE           = 0x04,$/;"	e	enum:CPA::ops
OP_RESERVE	./base/cp_annotate.hh	/^        OP_RESERVE         = 0x0C$/;"	e	enum:CPA::ops
OP_SIZE_QUEUE	./base/cp_annotate.hh	/^        OP_SIZE_QUEUE      = 0x08,$/;"	e	enum:CPA::ops
OP_WAIT_EMPTY	./base/cp_annotate.hh	/^        OP_WAIT_EMPTY      = 0x02,$/;"	e	enum:CPA::ops
OP_WAIT_FULL	./base/cp_annotate.hh	/^        OP_WAIT_FULL       = 0x03,$/;"	e	enum:CPA::ops
OR	./mem/ruby/common/NetDest.cc	/^NetDest::OR(const NetDest& orNetDest) const$/;"	f	class:NetDest
OR	./mem/ruby/common/Set.hh	/^    OR(const Set& obj) const$/;"	f	class:Set
ORHostControllerEnable	./dev/arm/ufs_device.hh	/^        uint32_t ORHostControllerEnable;$/;"	m	struct:UFSHostDevice::HCIMem
ORHostControllerStatus	./dev/arm/ufs_device.hh	/^        uint32_t ORHostControllerStatus;$/;"	m	struct:UFSHostDevice::HCIMem
ORInterruptEnable	./dev/arm/ufs_device.hh	/^        uint32_t ORInterruptEnable;$/;"	m	struct:UFSHostDevice::HCIMem
ORInterruptStatus	./dev/arm/ufs_device.hh	/^        uint32_t ORInterruptStatus;$/;"	m	struct:UFSHostDevice::HCIMem
ORUECDL	./dev/arm/ufs_device.hh	/^        uint32_t ORUECDL;$/;"	m	struct:UFSHostDevice::HCIMem
ORUECDME	./dev/arm/ufs_device.hh	/^        uint32_t ORUECDME;$/;"	m	struct:UFSHostDevice::HCIMem
ORUECN	./dev/arm/ufs_device.hh	/^        uint32_t ORUECN;$/;"	m	struct:UFSHostDevice::HCIMem
ORUECPA	./dev/arm/ufs_device.hh	/^        uint32_t ORUECPA;$/;"	m	struct:UFSHostDevice::HCIMem
ORUECT	./dev/arm/ufs_device.hh	/^        uint32_t ORUECT;$/;"	m	struct:UFSHostDevice::HCIMem
ORUTRIACR	./dev/arm/ufs_device.hh	/^        uint32_t ORUTRIACR;$/;"	m	struct:UFSHostDevice::HCIMem
OTHER	./python/m5/util/dot_writer.py	/^    OTHER = 5$/;"	v	class:NodeType
OUTVAL	./unittest/strnumtest.cc	49;"	d	file:
OVA	./arch/arm/faults.hh	/^        OVA,   \/\/ DataAbort, PrefetchAbort: stage 1 Virtual Address for stage 2 faults$/;"	e	enum:ArmISA::ArmFault::AnnotationIDs
OVAddr	./arch/arm/faults.hh	/^    Addr OVAddr;$/;"	m	class:ArmISA::AbortFault
OW	./arch/x86/decoder_tables.cc	/^        OW = OWordImm,$/;"	e	enum:X86ISA::SizeType	file:
OWordImm	./arch/x86/decoder_tables.cc	/^        OWordImm,$/;"	e	enum:X86ISA::SizeType	file:
ObjDeclAST	./mem/slicc/ast/ObjDeclAST.py	/^class ObjDeclAST(DeclAST):$/;"	c
ObjectFile	./base/loader/object_file.cc	/^ObjectFile::ObjectFile(const string &_filename,$/;"	f	class:ObjectFile
ObjectFile	./base/loader/object_file.hh	/^class ObjectFile$/;"	c
ObjectMatch	./base/match.cc	/^ObjectMatch::ObjectMatch()$/;"	f	class:ObjectMatch
ObjectMatch	./base/match.cc	/^ObjectMatch::ObjectMatch(const string &expr)$/;"	f	class:ObjectMatch
ObjectMatch	./base/match.hh	/^class ObjectMatch$/;"	c
OffsetMask	./arch/mips/pagetable.hh	/^    int OffsetMask;$/;"	m	struct:MipsISA::PTE
OffsetMask	./arch/power/pagetable.hh	/^    int OffsetMask;$/;"	m	struct:PowerISA::PTE
OldestReady	./cpu/o3/commit.hh	/^        OldestReady$/;"	e	enum:DefaultCommit::CommitPolicy
OneByteOpcode	./arch/x86/types.hh	/^        OneByteOpcode,$/;"	e	enum:X86ISA::OpcodeType
OneByteOpcodeState	./arch/x86/decoder.hh	/^        OneByteOpcodeState,$/;"	e	enum:X86ISA::Decoder::State
OneShot	./dev/intel_8254_timer.hh	/^        OneShot,$/;"	e	enum:Intel8254Timer::ModeVal
OodAST	./mem/slicc/ast/OodAST.py	/^class OodAST(ExprAST):$/;"	c
OpClass	./cpu/FuncUnit.py	/^class OpClass(Enum):$/;"	c
OpDesc	./cpu/FuncUnit.py	/^class OpDesc(SimObject):$/;"	c
OpDesc	./cpu/func_unit.hh	/^    OpDesc(const OpDescParams *p)$/;"	f	class:OpDesc
OpDesc	./cpu/func_unit.hh	/^class OpDesc : public SimObject$/;"	c
OpString	./base/statistics.hh	/^struct OpString<std::divides<Result> >$/;"	s	namespace:Stats
OpString	./base/statistics.hh	/^struct OpString<std::minus<Result> >$/;"	s	namespace:Stats
OpString	./base/statistics.hh	/^struct OpString<std::modulus<Result> >$/;"	s	namespace:Stats
OpString	./base/statistics.hh	/^struct OpString<std::multiplies<Result> >$/;"	s	namespace:Stats
OpString	./base/statistics.hh	/^struct OpString<std::negate<Result> >$/;"	s	namespace:Stats
OpString	./base/statistics.hh	/^struct OpString<std::plus<Result> >$/;"	s	namespace:Stats
OpSys	./base/loader/object_file.hh	/^    enum OpSys {$/;"	g	class:ObjectFile
Opcode	./arch/alpha/ev5.hh	/^inline int Opcode(MachInst inst) { return inst >> 26 & 0x3f; }$/;"	f	namespace:AlphaISA
OpcodeType	./arch/x86/types.hh	/^    enum OpcodeType {$/;"	g	namespace:X86ISA
OpenFlagTransTable	./kern/operatingsystem.hh	/^struct OpenFlagTransTable {$/;"	s
Operand	./arch/isa_parser.py	/^class Operand(object):$/;"	c
OperandList	./arch/isa_parser.py	/^class OperandList(object):$/;"	c
OperandSizeOverride	./arch/x86/types.hh	/^        OperandSizeOverride,$/;"	e	enum:X86ISA::Prefixes
OperatingMode	./arch/arm/types.hh	/^    enum OperatingMode {$/;"	g	namespace:ArmISA
OperatingSystem	./kern/operatingsystem.hh	/^class OperatingSystem {$/;"	c
Option	./python/m5/util/jobfile.py	/^class Option(Data):$/;"	c
OptionParser	./python/m5/options.py	/^class OptionParser(dict):$/;"	c
Osc	./dev/arm/RealView.py	/^    class Osc(RealViewOsc):$/;"	c	class:CoreTile2A15DCC
Osc	./dev/arm/RealView.py	/^    class Osc(RealViewOsc):$/;"	c	class:VExpressMCC
Osc0	./dev/arm/rv_ctrl.hh	/^        Osc0       = 0x0C,$/;"	e	enum:RealViewCtrl::__anon19
Osc1	./dev/arm/rv_ctrl.hh	/^        Osc1       = 0x10,$/;"	e	enum:RealViewCtrl::__anon19
Osc2	./dev/arm/rv_ctrl.hh	/^        Osc2       = 0x14,$/;"	e	enum:RealViewCtrl::__anon19
Osc3	./dev/arm/rv_ctrl.hh	/^        Osc3       = 0x18,$/;"	e	enum:RealViewCtrl::__anon19
Osc4	./dev/arm/rv_ctrl.hh	/^        Osc4       = 0x1C,$/;"	e	enum:RealViewCtrl::__anon19
OstreamLogger	./base/trace.hh	/^    OstreamLogger(std::ostream &stream_) : stream(stream_)$/;"	f	class:Trace::OstreamLogger
OstreamLogger	./base/trace.hh	/^class OstreamLogger : public Logger$/;"	c	namespace:Trace
OtherFault	./arch/sparc/tlb.hh	/^        OtherFault = 0,$/;"	e	enum:SparcISA::TLB::FaultTypes
OutPortDeclAST	./mem/slicc/ast/OutPortDeclAST.py	/^class OutPortDeclAST(DeclAST):$/;"	c
OutVcState	./mem/ruby/network/garnet/flexible-pipeline/OutVcState.cc	/^OutVcState::OutVcState(int id)$/;"	f	class:OutVcState
OutVcState	./mem/ruby/network/garnet/flexible-pipeline/OutVcState.hh	/^class OutVcState$/;"	c
OutVcState_d	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.cc	/^OutVcState_d::OutVcState_d(int id, GarnetNetwork_d *network_ptr)$/;"	f	class:OutVcState_d
OutVcState_d	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.hh	/^class OutVcState_d$/;"	c
Output	./base/stats/output.hh	/^struct Output$/;"	s	namespace:Stats
Output	./cpu/minor/buffers.hh	/^        Output(typename Buffer::wire output_wire) :$/;"	f	class:Minor::Latch::Output
Output	./cpu/minor/buffers.hh	/^    class Output$/;"	c	class:Minor::Latch
OutputDirectory	./base/output.cc	/^OutputDirectory::OutputDirectory()$/;"	f	class:OutputDirectory
OutputDirectory	./base/output.hh	/^class OutputDirectory$/;"	c
OutputUnit_d	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.cc	/^OutputUnit_d::OutputUnit_d(int id, Router_d *router)$/;"	f	class:OutputUnit_d
OutputUnit_d	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.hh	/^class OutputUnit_d : public Consumer$/;"	c
Overflow	./arch/mips/registers.hh	/^    Overflow,$/;"	e	enum:MipsISA::FCSRBits
OverflowTrap	./arch/x86/faults.hh	/^        OverflowTrap() :$/;"	f	class:X86ISA::OverflowTrap
OverflowTrap	./arch/x86/faults.hh	/^    class OverflowTrap : public X86Trap$/;"	c	namespace:X86ISA
P	./arch/sparc/faults.hh	/^        P, Privileged = P,$/;"	e	enum:SparcISA::SparcFaultBase::PrivilegeLevel
P9MSG	./dev/virtio/fs9p.cc	107;"	d	file:
P9MSG	./dev/virtio/fs9p.cc	66;"	d	file:
P9MsgHeader	./dev/virtio/fs9p.hh	/^struct P9MsgHeader {$/;"	s
P9MsgInfo	./dev/virtio/fs9p.cc	/^    P9MsgInfo(P9MsgType _type, std::string _name)$/;"	f	struct:P9MsgInfo
P9MsgInfo	./dev/virtio/fs9p.cc	/^struct P9MsgInfo {$/;"	s	file:
P9MsgInfoMap	./dev/virtio/fs9p.cc	/^typedef std::map<P9MsgType, P9MsgInfo> P9MsgInfoMap;$/;"	t	file:
P9MsgType	./dev/virtio/fs9p.hh	/^typedef uint8_t P9MsgType;$/;"	t
P9Tag	./dev/virtio/fs9p.hh	/^typedef uint16_t P9Tag;$/;"	t
PABits	./arch/arm/isa_traits.hh	/^    const unsigned PABits = 32; \/\/ Is this correct?$/;"	m	namespace:ArmISA
PABits	./arch/mips/isa_traits.hh	/^const unsigned PABits = 32; \/\/ Is this correct?$/;"	m	namespace:MipsISA
PAEPD	./arch/x86/pagetable_walker.hh	/^                PAEPDP, PAEPD, PAEPTE,$/;"	e	enum:X86ISA::Walker::WalkerState::State
PAEPDP	./arch/x86/pagetable_walker.hh	/^                PAEPDP, PAEPD, PAEPTE,$/;"	e	enum:X86ISA::Walker::WalkerState::State
PAEPTE	./arch/x86/pagetable_walker.hh	/^                PAEPDP, PAEPD, PAEPTE,$/;"	e	enum:X86ISA::Walker::WalkerState::State
PAGE_SIZE	./cpu/kvm/base.cc	64;"	d	file:
PAL	./arch/alpha/osfpal.hh	/^struct PAL$/;"	s
PATH_SEPARATOR	./base/output.hh	/^    static const char PATH_SEPARATOR = '\/';$/;"	m	class:OutputDirectory
PAWatchpoint	./arch/sparc/faults.hh	/^class PAWatchpoint : public SparcFault<PAWatchpoint> {};$/;"	c	namespace:SparcISA
PAddrImplBits	./arch/alpha/ev5.hh	/^const int PAddrImplBits = 44; \/\/ for Tsunami$/;"	m	namespace:AlphaISA
PAddrImplMask	./arch/alpha/ev5.hh	/^const Addr PAddrImplMask = (ULL(1) << PAddrImplBits) - 1;$/;"	m	namespace:AlphaISA
PAddrImplMask	./arch/arm/isa_traits.hh	/^    const Addr PAddrImplMask = (ULL(1) << PABits) - 1;$/;"	m	namespace:ArmISA
PAddrImplMask	./arch/mips/isa_traits.hh	/^const Addr PAddrImplMask = (ULL(1) << PABits) - 1;$/;"	m	namespace:MipsISA
PAddrImplMask	./arch/sparc/isa_traits.hh	/^const Addr PAddrImplMask = ULL(0x000000FFFFFFFFFF);$/;"	m	namespace:SparcISA
PAddrIprSpace	./arch/alpha/ev5.hh	/^inline bool PAddrIprSpace(Addr a) { return a >= ULL(0xFFFFFF00000); }$/;"	f	namespace:AlphaISA
PAddrUncachedBit39	./arch/alpha/ev5.hh	/^const Addr PAddrUncachedBit39 = ULL(0x8000000000);$/;"	m	namespace:AlphaISA
PAddrUncachedBit40	./arch/alpha/ev5.hh	/^const Addr PAddrUncachedBit40 = ULL(0x10000000000);$/;"	m	namespace:AlphaISA
PAddrUncachedBit43	./arch/alpha/ev5.hh	/^const Addr PAddrUncachedBit43 = ULL(0x80000000000);$/;"	m	namespace:AlphaISA
PAddrUncachedMask	./arch/alpha/ev5.hh	/^const Addr PAddrUncachedMask = ULL(0x807ffffffff); \/\/ Clear PA<42:35>$/;"	m	namespace:AlphaISA
PBA	./dev/net/i8254xGBe_defs.hh	/^    struct PBA : public Reg<uint32_t> { \/\/ 0x1000 PBA Register$/;"	s	struct:iGbReg::Regs
PCAP_VERSION_MAJOR	./dev/net/etherdump.cc	55;"	d	file:
PCAP_VERSION_MINOR	./dev/net/etherdump.cc	56;"	d	file:
PCAlignmentFault	./arch/arm/faults.hh	/^    PCAlignmentFault(Addr _faultPC) : faultPC(_faultPC)$/;"	f	class:ArmISA::PCAlignmentFault
PCAlignmentFault	./arch/arm/faults.hh	/^class PCAlignmentFault : public ArmFaultVals<PCAlignmentFault>$/;"	c	namespace:ArmISA
PCC	./python/swig/pyobject.cc	153;"	d	file:
PCDependentDisassembly	./arch/power/insts/branch.hh	/^    PCDependentDisassembly(const char *mnem, ExtMachInst _machInst,$/;"	f	class:PowerISA::PCDependentDisassembly
PCDependentDisassembly	./arch/power/insts/branch.hh	/^class PCDependentDisassembly : public PowerStaticInst$/;"	c	namespace:PowerISA
PCEvent	./cpu/pc_event.hh	/^PCEvent::PCEvent(PCEventQueue *q, const std::string &desc, Addr pc)$/;"	f	class:PCEvent
PCEvent	./cpu/pc_event.hh	/^class PCEvent$/;"	c
PCEventQueue	./cpu/pc_event.cc	/^PCEventQueue::PCEventQueue()$/;"	f	class:PCEventQueue
PCEventQueue	./cpu/pc_event.hh	/^class PCEventQueue$/;"	c
PCHIP_PCI0_IO	./dev/alpha/tsunamireg.h	143;"	d
PCHIP_PCI0_IO	./dev/mips/maltareg.h	154;"	d
PCHIP_PCI0_MEMORY	./dev/alpha/tsunamireg.h	142;"	d
PCHIP_PCI0_MEMORY	./dev/mips/maltareg.h	153;"	d
PCI0_BASE_ADDR0	./dev/pci/pcireg.h	109;"	d
PCI0_BASE_ADDR1	./dev/pci/pcireg.h	110;"	d
PCI0_BASE_ADDR2	./dev/pci/pcireg.h	111;"	d
PCI0_BASE_ADDR3	./dev/pci/pcireg.h	112;"	d
PCI0_BASE_ADDR4	./dev/pci/pcireg.h	113;"	d
PCI0_BASE_ADDR5	./dev/pci/pcireg.h	114;"	d
PCI0_CAP_PTR	./dev/pci/pcireg.h	119;"	d
PCI0_CIS	./dev/pci/pcireg.h	115;"	d
PCI0_INTERRUPT_LINE	./dev/pci/pcireg.h	121;"	d
PCI0_INTERRUPT_PIN	./dev/pci/pcireg.h	122;"	d
PCI0_MAXIMUM_LATENCY	./dev/pci/pcireg.h	124;"	d
PCI0_MINIMUM_GRANT	./dev/pci/pcireg.h	123;"	d
PCI0_RESERVED	./dev/pci/pcireg.h	120;"	d
PCI0_ROM_BASE_ADDR	./dev/pci/pcireg.h	118;"	d
PCI0_SUB_SYSTEM_ID	./dev/pci/pcireg.h	117;"	d
PCI0_SUB_VENDOR_ID	./dev/pci/pcireg.h	116;"	d
PCI1_BASE_ADDR0	./dev/pci/pcireg.h	127;"	d
PCI1_BASE_ADDR1	./dev/pci/pcireg.h	128;"	d
PCI1_BRIDGE_CTRL	./dev/pci/pcireg.h	148;"	d
PCI1_INTR_LINE	./dev/pci/pcireg.h	146;"	d
PCI1_INTR_PIN	./dev/pci/pcireg.h	147;"	d
PCI1_IO_BASE	./dev/pci/pcireg.h	133;"	d
PCI1_IO_BASE_UPPER	./dev/pci/pcireg.h	142;"	d
PCI1_IO_LIMIT	./dev/pci/pcireg.h	134;"	d
PCI1_IO_LIMIT_UPPER	./dev/pci/pcireg.h	143;"	d
PCI1_MEM_BASE	./dev/pci/pcireg.h	136;"	d
PCI1_MEM_LIMIT	./dev/pci/pcireg.h	137;"	d
PCI1_PRF_BASE_UPPER	./dev/pci/pcireg.h	140;"	d
PCI1_PRF_LIMIT_UPPER	./dev/pci/pcireg.h	141;"	d
PCI1_PRF_MEM_BASE	./dev/pci/pcireg.h	138;"	d
PCI1_PRF_MEM_LIMIT	./dev/pci/pcireg.h	139;"	d
PCI1_PRI_BUS_NUM	./dev/pci/pcireg.h	129;"	d
PCI1_RESERVED	./dev/pci/pcireg.h	144;"	d
PCI1_ROM_BASE_ADDR	./dev/pci/pcireg.h	145;"	d
PCI1_SECONDARY_STATUS	./dev/pci/pcireg.h	135;"	d
PCI1_SEC_BUS_NUM	./dev/pci/pcireg.h	130;"	d
PCI1_SEC_LAT_TIMER	./dev/pci/pcireg.h	132;"	d
PCI1_SUB_BUS_NUM	./dev/pci/pcireg.h	131;"	d
PCIConfig	./dev/pci/pcireg.h	/^union PCIConfig {$/;"	u
PCITestControlRegister	./dev/net/ns_gige_reg.h	/^enum PCITestControlRegister {$/;"	g
PCI_BASE_CLASS_CODE	./dev/pci/pcireg.h	97;"	d
PCI_BIST	./dev/pci/pcireg.h	101;"	d
PCI_CACHE_LINE_SIZE	./dev/pci/pcireg.h	98;"	d
PCI_CLASS_CODE	./dev/pci/pcireg.h	95;"	d
PCI_CMD_BME	./dev/pci/pcireg.h	104;"	d
PCI_CMD_IOSE	./dev/pci/pcireg.h	106;"	d
PCI_CMD_MSE	./dev/pci/pcireg.h	105;"	d
PCI_COMMAND	./dev/pci/pcireg.h	92;"	d
PCI_CONFIG_SIZE	./dev/pci/pcireg.h	152;"	d
PCI_DEVICE_ID	./dev/pci/pcireg.h	91;"	d
PCI_DEVICE_SPECIFIC	./dev/pci/pcireg.h	151;"	d
PCI_HEADER_TYPE	./dev/pci/pcireg.h	100;"	d
PCI_LATENCY_TIMER	./dev/pci/pcireg.h	99;"	d
PCI_PRODUCT_DEC_PZA	./dev/pci/pcireg.h	161;"	d
PCI_PRODUCT_NCR_810	./dev/pci/pcireg.h	162;"	d
PCI_PRODUCT_QLOGIC_ISP1020	./dev/pci/pcireg.h	163;"	d
PCI_PRODUCT_SIMOS_ETHER	./dev/pci/pcireg.h	165;"	d
PCI_PRODUCT_SIMOS_SIMOS	./dev/pci/pcireg.h	164;"	d
PCI_REVISION_ID	./dev/pci/pcireg.h	94;"	d
PCI_STATUS	./dev/pci/pcireg.h	93;"	d
PCI_SUB_CLASS_CODE	./dev/pci/pcireg.h	96;"	d
PCI_VENDOR_DEC	./dev/pci/pcireg.h	155;"	d
PCI_VENDOR_ID	./dev/pci/pcireg.h	90;"	d
PCI_VENDOR_NCR	./dev/pci/pcireg.h	156;"	d
PCI_VENDOR_QLOGIC	./dev/pci/pcireg.h	157;"	d
PCI_VENDOR_SIMOS	./dev/pci/pcireg.h	158;"	d
PCMask	./cpu/base.hh	/^    static const Addr PCMask = ~((Addr)sizeof(TheISA::MachInst) - 1);$/;"	m	class:BaseCPU
PCR	./dev/net/ns_gige_reg.h	/^    PCR =               0x44,$/;"	e	enum:DeviceRegisterAddress
PCR_FFHI_8K	./dev/net/ns_gige_reg.h	/^     PCR_FFHI_8K =      (3 << 21),$/;"	e	enum:PauseControlStatusRegister
PCR_FFLO_4K	./dev/net/ns_gige_reg.h	/^     PCR_FFLO_4K =      (1 << 21),$/;"	e	enum:PauseControlStatusRegister
PCR_PAUSE_CNT	./dev/net/ns_gige_reg.h	/^     PCR_PAUSE_CNT =    0xFFFE$/;"	e	enum:PauseControlStatusRegister
PCR_PSEN	./dev/net/ns_gige_reg.h	/^     PCR_PSEN =         (1 << 31),$/;"	e	enum:PauseControlStatusRegister
PCR_PS_DA	./dev/net/ns_gige_reg.h	/^     PCR_PS_DA =        (1 << 29),$/;"	e	enum:PauseControlStatusRegister
PCR_PS_MCAST	./dev/net/ns_gige_reg.h	/^     PCR_PS_MCAST =     (1 << 30),$/;"	e	enum:PauseControlStatusRegister
PCR_STHI_8	./dev/net/ns_gige_reg.h	/^     PCR_STHI_8 =       (3 << 23),$/;"	e	enum:PauseControlStatusRegister
PCR_STLO_4	./dev/net/ns_gige_reg.h	/^     PCR_STLO_4 =       (1 << 23),$/;"	e	enum:PauseControlStatusRegister
PCReg	./arch/arm/registers.hh	/^const int PCReg = INTREG_PC;$/;"	m	namespace:ArmISA
PCState	./arch/alpha/types.hh	/^typedef GenericISA::SimplePCState<MachInst> PCState;$/;"	t	namespace:AlphaISA
PCState	./arch/arm/types.hh	/^        PCState() : flags(0), nextFlags(0), _itstate(0), _nextItstate(0),$/;"	f	class:ArmISA::PCState
PCState	./arch/arm/types.hh	/^        PCState(Addr val) : flags(0), nextFlags(0), _itstate(0),$/;"	f	class:ArmISA::PCState
PCState	./arch/arm/types.hh	/^    class PCState : public GenericISA::UPCState<MachInst>$/;"	c	namespace:ArmISA
PCState	./arch/mips/types.hh	/^typedef GenericISA::DelaySlotPCState<MachInst> PCState;$/;"	t	namespace:MipsISA
PCState	./arch/null/types.hh	/^    class PCState : public GenericISA::UPCState<MachInst>$/;"	c	namespace:NullISA
PCState	./arch/power/types.hh	/^typedef GenericISA::SimplePCState<MachInst> PCState;$/;"	t	namespace:PowerISA
PCState	./arch/sparc/types.hh	/^typedef GenericISA::DelaySlotUPCState<MachInst> PCState;$/;"	t	namespace:SparcISA
PCState	./arch/x86/types.hh	/^        PCState() {}$/;"	f	class:X86ISA::PCState
PCState	./arch/x86/types.hh	/^        PCState(Addr val) { set(val); }$/;"	f	class:X86ISA::PCState
PCState	./arch/x86/types.hh	/^    class PCState : public GenericISA::UPCState<MachInst>$/;"	c	namespace:X86ISA
PCState	./cpu/exec_context.hh	/^    typedef TheISA::PCState PCState;$/;"	t	class:ExecContext
PCStateBase	./arch/generic/types.hh	/^    PCStateBase() : _pc(0), _npc(0) {}$/;"	f	class:GenericISA::PCStateBase
PCStateBase	./arch/generic/types.hh	/^    PCStateBase(Addr val) : _pc(0), _npc(0) { set(val); }$/;"	f	class:GenericISA::PCStateBase
PCStateBase	./arch/generic/types.hh	/^class PCStateBase : public Serializable$/;"	c	namespace:GenericISA
PCStateOperand	./arch/isa_parser.py	/^class PCStateOperand(Operand):$/;"	c
PCTable	./mem/cache/prefetch/stride.hh	/^        PCTable(int assoc, int sets, const std::string name) :$/;"	f	class:StridePrefetcher::PCTable
PCTable	./mem/cache/prefetch/stride.hh	/^    class PCTable$/;"	c	class:StridePrefetcher
PD	./arch/x86/pagetable_walker.hh	/^                PSEPD, PD, PTE$/;"	e	enum:X86ISA::Walker::WalkerState::State
PDR	./base/loader/coff_sym.h	/^} PDR, *pPDR;$/;"	t	typeref:struct:pdr
PDtbMissFault	./arch/alpha/faults.hh	/^    PDtbMissFault(VAddr vaddr, Request::Flags reqFlags, uint64_t flags)$/;"	f	class:AlphaISA::PDtbMissFault
PDtbMissFault	./arch/alpha/faults.hh	/^class PDtbMissFault : public DtbFault$/;"	c	namespace:AlphaISA
PEBit	./arch/x86/regs/misc.hh	/^        PEBit = 1 << 5,$/;"	e	enum:X86ISA::X87StatusBit
PERF_LEVEL	./dev/arm/energy_ctrl.hh	/^        PERF_LEVEL,$/;"	e	enum:EnergyCtrl::Registers
PERF_LEVEL_ACK	./dev/arm/energy_ctrl.hh	/^        PERF_LEVEL_ACK,$/;"	e	enum:EnergyCtrl::Registers
PERF_LEVEL_TO_READ	./dev/arm/energy_ctrl.hh	/^        PERF_LEVEL_TO_READ,$/;"	e	enum:EnergyCtrl::Registers
PER_ID4	./dev/arm/gic_v2m.hh	/^    static const int PER_ID4            = 0x0fd0;$/;"	m	class:Gicv2m
PF	./arch/x86/insts/microop.hh	/^            PF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
PFBit	./arch/x86/regs/misc.hh	/^        PFBit = 1 << 2,$/;"	e	enum:X86ISA::CondFlagBit
PFHandlerPhysAddr	./arch/x86/system.hh	/^    const uint64_t PFHandlerPhysAddr = 0x65000;$/;"	m	namespace:X86ISA
PFHandlerVirtAddr	./arch/x86/system.hh	/^    const uint64_t PFHandlerVirtAddr = 0xffff800000005000;$/;"	m	namespace:X86ISA
PFN0	./arch/mips/pagetable.hh	/^    Addr PFN0;  \/\/ Physical Frame Number - Even$/;"	m	struct:MipsISA::PTE
PFN0	./arch/power/pagetable.hh	/^    Addr PFN0; \/\/ Physical Frame Number - Even$/;"	m	struct:PowerISA::PTE
PFN1	./arch/mips/pagetable.hh	/^    Addr PFN1;  \/\/ Physical Frame Number - Odd$/;"	m	struct:MipsISA::PTE
PFN1	./arch/power/pagetable.hh	/^    Addr PFN1; \/\/ Physical Frame Number - Odd$/;"	m	struct:PowerISA::PTE
PHASE_ABORTED	./dev/storage/ide_wdcreg.h	195;"	d
PHASE_CMDOUT	./dev/storage/ide_wdcreg.h	191;"	d
PHASE_COMPLETED	./dev/storage/ide_wdcreg.h	194;"	d
PHASE_DATAIN	./dev/storage/ide_wdcreg.h	192;"	d
PHASE_DATAOUT	./dev/storage/ide_wdcreg.h	193;"	d
PHY_AGC	./dev/net/i8254xGBe_defs.hh	/^const uint8_t PHY_AGC           = 18;$/;"	m	namespace:iGbReg
PHY_EPID	./dev/net/i8254xGBe_defs.hh	/^const uint8_t PHY_EPID          = 0x3;$/;"	m	namespace:iGbReg
PHY_EPSTATUS	./dev/net/i8254xGBe_defs.hh	/^const uint8_t PHY_EPSTATUS      = 15;$/;"	m	namespace:iGbReg
PHY_GSTATUS	./dev/net/i8254xGBe_defs.hh	/^const uint8_t PHY_GSTATUS       = 10;$/;"	m	namespace:iGbReg
PHY_PID	./dev/net/i8254xGBe_defs.hh	/^const uint8_t PHY_PID           = 0x2;$/;"	m	namespace:iGbReg
PHY_PSTATUS	./dev/net/i8254xGBe_defs.hh	/^const uint8_t PHY_PSTATUS       = 0x1;$/;"	m	namespace:iGbReg
PIO_NUM_FIELDS	./dev/arm/energy_ctrl.hh	/^        PIO_NUM_FIELDS$/;"	e	enum:EnergyCtrl::Registers
PL031	./dev/arm/RealView.py	/^class PL031(AmbaIntDevice):$/;"	c
PL031	./dev/arm/rtc_pl031.cc	/^PL031::PL031(Params *p)$/;"	f	class:PL031
PL031	./dev/arm/rtc_pl031.hh	/^class PL031 : public AmbaIntDevice$/;"	c
PL_TO_SINGLE	./arch/arm/types.hh	/^        PL_TO_SINGLE,$/;"	e	enum:ArmISA::ConvertType
PL_TO_SINGLE	./arch/mips/types.hh	/^    PL_TO_SINGLE,$/;"	e	enum:MipsISA::ConvertType
PMCAP	./dev/pci/pcireg.h	/^union PMCAP {$/;"	u
PMCAPBaseOffset	./dev/pci/PciDevice.py	/^        Param.UInt8(0x00, "Base offset of PMCAP in PCI Config space")$/;"	v	class:PciDevice
PMCAPCapId	./dev/pci/PciDevice.py	/^        Param.UInt8(0x00, "Specifies this is the Power Management capability")$/;"	v	class:PciDevice
PMCAPCapabilities	./dev/pci/PciDevice.py	/^        Param.UInt16(0x0000, "PCI Power Management Capabilities Register")$/;"	v	class:PciDevice
PMCAPCtrlStatus	./dev/pci/PciDevice.py	/^        Param.UInt16(0x0000, "PCI Power Management Control and Status")$/;"	v	class:PciDevice
PMCAPNextCapability	./dev/pci/PciDevice.py	/^        Param.UInt8(0x00, "Pointer to next capability block")$/;"	v	class:PciDevice
PMCAP_BASE	./dev/pci/device.hh	/^    const int PMCAP_BASE;$/;"	m	class:PciDevice
PMCAP_ID	./dev/pci/pcireg.h	172;"	d
PMCAP_ID_OFFSET	./dev/pci/device.hh	/^    const int PMCAP_ID_OFFSET;$/;"	m	class:PciDevice
PMCAP_PC	./dev/pci/pcireg.h	173;"	d
PMCAP_PC_OFFSET	./dev/pci/device.hh	/^    const int PMCAP_PC_OFFSET;$/;"	m	class:PciDevice
PMCAP_PMCS	./dev/pci/pcireg.h	174;"	d
PMCAP_PMCS_OFFSET	./dev/pci/device.hh	/^    const int PMCAP_PMCS_OFFSET;$/;"	m	class:PciDevice
PMCAP_SIZE	./dev/pci/pcireg.h	175;"	d
PMCCNTR	./arch/arm/pmu.hh	/^    static const CounterId PMCCNTR = 31;$/;"	m	class:ArmISA::PMU
PMU	./arch/arm/pmu.cc	/^PMU::PMU(const ArmPMUParams *p)$/;"	f	class:ArmISA::PMU
PMU	./arch/arm/pmu.hh	/^class PMU : public SimObject, public ArmISA::BaseISADevice {$/;"	c	namespace:ArmISA
PMU	./sim/probe/pmu.hh	/^typedef ProbePointArg<uint64_t> PMU;$/;"	t	namespace:ProbePoints
PMUUPtr	./sim/probe/pmu.hh	/^typedef std::unique_ptr<PMU> PMUUPtr;$/;"	t	namespace:ProbePoints
PO	./arch/x86/decoder_tables.cc	/^        PO = Pointer$/;"	e	enum:X86ISA::SizeType	file:
PORTB_SPKR_HIGH	./dev/alpha/tsunamireg.h	150;"	d
PORTB_SPKR_HIGH	./dev/mips/maltareg.h	174;"	d
PPI_MAX	./dev/arm/gic_pl390.hh	/^    static const int PPI_MAX = 16;  \/\/ Number of Private Peripheral Interrupts$/;"	m	class:Pl390
PQCR	./dev/net/ns_gige_reg.h	/^    PQCR =              0x3c,$/;"	e	enum:DeviceRegisterAddress
PRDTable	./dev/arm/ufs_device.hh	/^        struct UFSHCDSGEntry PRDTable[128];$/;"	m	struct:UFSHostDevice::UTPTransferCMDDesc	typeref:struct:UFSHostDevice::UTPTransferCMDDesc::UFSHCDSGEntry
PRDTableLength	./dev/arm/ufs_device.hh	/^        uint16_t PRDTableLength;$/;"	m	struct:UFSHostDevice::UTPTransferReqDesc
PRDTableOffset	./dev/arm/ufs_device.hh	/^        uint16_t PRDTableOffset;$/;"	m	struct:UFSHostDevice::UTPTransferReqDesc
PRD_BASE_MASK	./dev/storage/ide_disk.hh	67;"	d
PRD_COUNT_MASK	./dev/storage/ide_disk.hh	68;"	d
PRD_EOT_MASK	./dev/storage/ide_disk.hh	69;"	d
PRIORITY_SWITCH_LIMIT	./mem/ruby/network/simple/PerfectSwitch.cc	/^const int PRIORITY_SWITCH_LIMIT = 128;$/;"	v
PRIORITY_SWITCH_LIMIT	./mem/ruby/network/simple/Throttle.cc	/^const int PRIORITY_SWITCH_LIMIT = 128;$/;"	v
PS2Device	./dev/x86/i8042.hh	/^    PS2Device() : lastCommand(NoCommand)$/;"	f	class:X86ISA::PS2Device
PS2Device	./dev/x86/i8042.hh	/^class PS2Device$/;"	c	namespace:X86ISA
PS2Keyboard	./dev/x86/i8042.hh	/^class PS2Keyboard : public PS2Device$/;"	c	namespace:X86ISA
PS2Mouse	./dev/x86/i8042.hh	/^    PS2Mouse() : PS2Device(), status(0), resolution(4), sampleRate(100)$/;"	f	class:X86ISA::PS2Mouse
PS2Mouse	./dev/x86/i8042.hh	/^class PS2Mouse : public PS2Device$/;"	c	namespace:X86ISA
PSEPD	./arch/x86/pagetable_walker.hh	/^                PSEPD, PD, PTE$/;"	e	enum:X86ISA::Walker::WalkerState::State
PTE	./arch/arm/pagetable.hh	/^struct PTE$/;"	s	namespace:ArmISA
PTE	./arch/mips/pagetable.hh	/^struct PTE$/;"	s	namespace:MipsISA
PTE	./arch/power/pagetable.hh	/^struct PTE$/;"	s	namespace:PowerISA
PTE	./arch/x86/pagetable_walker.hh	/^                PSEPD, PD, PTE$/;"	e	enum:X86ISA::Walker::WalkerState::State
PTEField	./arch/x86/pagetable.hh	/^    enum PTEField{$/;"	g	namespace:X86ISA
PTE_NotPresent	./arch/x86/pagetable.hh	/^        PTE_NotPresent  = 1,$/;"	e	enum:X86ISA::PTEField
PTE_ReadOnly	./arch/x86/pagetable.hh	/^        PTE_ReadOnly    = 4,$/;"	e	enum:X86ISA::PTEField
PTE_Supervisor	./arch/x86/pagetable.hh	/^        PTE_Supervisor  = 2,$/;"	e	enum:X86ISA::PTEField
PTE_Uncacheable	./arch/x86/pagetable.hh	/^        PTE_Uncacheable = 8,$/;"	e	enum:X86ISA::PTEField
PTSCR	./dev/net/ns_gige_reg.h	/^    PTSCR =             0x0c,$/;"	e	enum:DeviceRegisterAddress
PTSCR_EEBIST_EN	./dev/net/ns_gige_reg.h	/^     PTSCR_EEBIST_EN =          0x00000002,$/;"	e	enum:PCITestControlRegister
PTSCR_EEBIST_FAIL	./dev/net/ns_gige_reg.h	/^     PTSCR_EEBIST_FAIL =        0x00000001,$/;"	e	enum:PCITestControlRegister
PTSCR_EELOAD_EN	./dev/net/ns_gige_reg.h	/^     PTSCR_EELOAD_EN =          0x00000004,$/;"	e	enum:PCITestControlRegister
PTSCR_RBIST_DONE	./dev/net/ns_gige_reg.h	/^     PTSCR_RBIST_DONE =         0x00000200,$/;"	e	enum:PCITestControlRegister
PTSCR_RBIST_EN	./dev/net/ns_gige_reg.h	/^     PTSCR_RBIST_EN =           0x00000400,$/;"	e	enum:PCITestControlRegister
PTSCR_RBIST_FAIL	./dev/net/ns_gige_reg.h	/^     PTSCR_RBIST_FAIL =         0x000001b8,$/;"	e	enum:PCITestControlRegister
PTSCR_RBIST_RDONLY	./dev/net/ns_gige_reg.h	/^     PTSCR_RBIST_RDONLY =       0x000003f9$/;"	e	enum:PCITestControlRegister
PTSCR_RBIST_RST	./dev/net/ns_gige_reg.h	/^     PTSCR_RBIST_RST =          0x00002000,$/;"	e	enum:PCITestControlRegister
PTable	./mem/page_table.hh	/^    typedef std::unordered_map<Addr, TheISA::TlbEntry> PTable;$/;"	t	class:FuncPageTable
PTableItr	./mem/page_table.hh	/^    typedef PTable::iterator PTableItr;$/;"	t	class:FuncPageTable
PU_TO_SINGLE	./arch/arm/types.hh	/^        PU_TO_SINGLE$/;"	e	enum:ArmISA::ConvertType
PU_TO_SINGLE	./arch/mips/types.hh	/^    PU_TO_SINGLE$/;"	e	enum:MipsISA::ConvertType
PWR_ACT	./mem/dram_ctrl.hh	/^            PWR_ACT,$/;"	e	enum:DRAMCtrl::Rank::PowerState
PWR_ACT_PDN	./mem/dram_ctrl.hh	/^            PWR_ACT_PDN$/;"	e	enum:DRAMCtrl::Rank::PowerState
PWR_IDLE	./mem/dram_ctrl.hh	/^            PWR_IDLE = 0,$/;"	e	enum:DRAMCtrl::Rank::PowerState
PWR_PRE_PDN	./mem/dram_ctrl.hh	/^            PWR_PRE_PDN,$/;"	e	enum:DRAMCtrl::Rank::PowerState
PWR_REF	./mem/dram_ctrl.hh	/^            PWR_REF,$/;"	e	enum:DRAMCtrl::Rank::PowerState
PXCAP	./dev/pci/pcireg.h	/^struct PXCAP {$/;"	s
PXCAPBaseOffset	./dev/pci/PciDevice.py	/^        Param.UInt8(0x00, "Base offset of PXCAP in PCI Config space")$/;"	v	class:PciDevice
PXCAPCapId	./dev/pci/PciDevice.py	/^    PXCAPCapId = Param.UInt8(0x00, "Specifies this is the PCIe Capability")$/;"	v	class:PciDevice
PXCAPCapabilities	./dev/pci/PciDevice.py	/^    PXCAPCapabilities = Param.UInt16(0x0000, "PCIe Capabilities")$/;"	v	class:PciDevice
PXCAPDevCap2	./dev/pci/PciDevice.py	/^    PXCAPDevCap2 = Param.UInt32(0x00000000, "PCIe Device Capabilities 2")$/;"	v	class:PciDevice
PXCAPDevCapabilities	./dev/pci/PciDevice.py	/^    PXCAPDevCapabilities = Param.UInt32(0x00000000, "PCIe Device Capabilities")$/;"	v	class:PciDevice
PXCAPDevCtrl	./dev/pci/PciDevice.py	/^    PXCAPDevCtrl = Param.UInt16(0x0000, "PCIe Device Control")$/;"	v	class:PciDevice
PXCAPDevCtrl2	./dev/pci/PciDevice.py	/^    PXCAPDevCtrl2 = Param.UInt32(0x00000000, "PCIe Device Control 2")$/;"	v	class:PciDevice
PXCAPDevStatus	./dev/pci/PciDevice.py	/^    PXCAPDevStatus = Param.UInt16(0x0000, "PCIe Device Status")$/;"	v	class:PciDevice
PXCAPLinkCap	./dev/pci/PciDevice.py	/^    PXCAPLinkCap = Param.UInt32(0x00000000, "PCIe Link Capabilities")$/;"	v	class:PciDevice
PXCAPLinkCtrl	./dev/pci/PciDevice.py	/^    PXCAPLinkCtrl = Param.UInt16(0x0000, "PCIe Link Control")$/;"	v	class:PciDevice
PXCAPLinkStatus	./dev/pci/PciDevice.py	/^    PXCAPLinkStatus = Param.UInt16(0x0000, "PCIe Link Status")$/;"	v	class:PciDevice
PXCAPNextCapability	./dev/pci/PciDevice.py	/^    PXCAPNextCapability = Param.UInt8(0x00, "Pointer to next capability block")$/;"	v	class:PciDevice
PXCAP_BASE	./dev/pci/device.hh	/^    const int PXCAP_BASE;$/;"	m	class:PciDevice
PXCAP_ID	./dev/pci/pcireg.h	192;"	d
PXCAP_PXCAP	./dev/pci/pcireg.h	193;"	d
PXCAP_PXDC	./dev/pci/pcireg.h	195;"	d
PXCAP_PXDC2	./dev/pci/pcireg.h	201;"	d
PXCAP_PXDCAP	./dev/pci/pcireg.h	194;"	d
PXCAP_PXDCAP2	./dev/pci/pcireg.h	200;"	d
PXCAP_PXDS	./dev/pci/pcireg.h	196;"	d
PXCAP_PXLC	./dev/pci/pcireg.h	198;"	d
PXCAP_PXLCAP	./dev/pci/pcireg.h	197;"	d
PXCAP_PXLS	./dev/pci/pcireg.h	199;"	d
PXCAP_SIZE	./dev/pci/pcireg.h	202;"	d
Packet	./mem/packet.hh	/^    Packet(const PacketPtr pkt, bool clear_flags, bool alloc_data)$/;"	f	class:Packet
Packet	./mem/packet.hh	/^    Packet(const RequestPtr _req, MemCmd _cmd)$/;"	f	class:Packet
Packet	./mem/packet.hh	/^    Packet(const RequestPtr _req, MemCmd _cmd, int _blkSize)$/;"	f	class:Packet
Packet	./mem/packet.hh	/^class Packet : public Printable$/;"	c
Packet	./sim/probe/mem.hh	/^typedef ProbePointArg<PacketInfo> Packet;$/;"	t	namespace:ProbePoints
PacketDataPtr	./mem/packet.hh	/^typedef uint8_t* PacketDataPtr;$/;"	t
PacketFifo	./dev/net/pktfifo.hh	/^    explicit PacketFifo(int max)$/;"	f	class:PacketFifo
PacketFifo	./dev/net/pktfifo.hh	/^class PacketFifo$/;"	c
PacketFifoEntry	./dev/net/pktfifo.hh	/^    PacketFifoEntry()$/;"	f	struct:PacketFifoEntry
PacketFifoEntry	./dev/net/pktfifo.hh	/^    PacketFifoEntry(EthPacketPtr p, uint64_t n)$/;"	f	struct:PacketFifoEntry
PacketFifoEntry	./dev/net/pktfifo.hh	/^    PacketFifoEntry(const PacketFifoEntry &s)$/;"	f	struct:PacketFifoEntry
PacketFifoEntry	./dev/net/pktfifo.hh	/^struct PacketFifoEntry$/;"	s
PacketInfo	./sim/probe/mem.hh	/^    explicit PacketInfo(const PacketPtr& pkt) :$/;"	f	struct:ProbePoints::PacketInfo
PacketInfo	./sim/probe/mem.hh	/^struct PacketInfo {$/;"	s	namespace:ProbePoints
PacketList	./mem/packet.hh	/^typedef std::list<PacketPtr> PacketList;$/;"	t
PacketListener	./mem/probes/base.hh	/^        PacketListener(BaseMemProbe &_parent,$/;"	f	class:BaseMemProbe::PacketListener
PacketListener	./mem/probes/base.hh	/^    class PacketListener : public ProbeListenerArgBase<ProbePoints::PacketInfo>$/;"	c	class:BaseMemProbe
PacketPtr	./mem/packet.hh	/^typedef Packet *PacketPtr;$/;"	t
PacketQueue	./mem/packet_queue.cc	/^PacketQueue::PacketQueue(EventManager& _em, const std::string& _label,$/;"	f	class:PacketQueue
PacketQueue	./mem/packet_queue.hh	/^class PacketQueue : public Drainable$/;"	c
PacketUPtr	./sim/probe/mem.hh	/^typedef std::unique_ptr<Packet> PacketUPtr;$/;"	t	namespace:ProbePoints
Page	./arch/arm/table_walker.hh	/^            Page$/;"	e	enum:ArmISA::TableWalker::LongDescriptor::EntryType
PageBytes	./arch/alpha/isa_traits.hh	/^const Addr PageBytes = ULL(1) << PageShift;$/;"	m	namespace:AlphaISA
PageBytes	./arch/arm/isa_traits.hh	/^    const Addr PageBytes = ULL(1) << PageShift;$/;"	m	namespace:ArmISA
PageBytes	./arch/mips/isa_traits.hh	/^const Addr PageBytes = ULL(1) << PageShift;$/;"	m	namespace:MipsISA
PageBytes	./arch/null/isa_traits.hh	/^    const Addr PageBytes = ULL(1) << PageShift;$/;"	m	namespace:NullISA
PageBytes	./arch/power/isa_traits.hh	/^const Addr PageBytes = ULL(1) << PageShift;$/;"	m	namespace:PowerISA
PageBytes	./arch/sparc/isa_traits.hh	/^const Addr PageBytes = ULL(1) << PageShift;$/;"	m	namespace:SparcISA
PageBytes	./arch/x86/isa_traits.hh	/^    const Addr PageBytes = ULL(1) << PageShift;$/;"	m	namespace:X86ISA
PageFault	./arch/x86/faults.hh	/^        PageFault(Addr _addr, bool present, BaseTLB::Mode mode,$/;"	f	class:X86ISA::PageFault
PageFault	./arch/x86/faults.hh	/^        PageFault(Addr _addr, uint32_t _errorCode) :$/;"	f	class:X86ISA::PageFault
PageFault	./arch/x86/faults.hh	/^    class PageFault : public X86Fault$/;"	c	namespace:X86ISA
PageIt	./cpu/decode_cache.hh	/^    typedef typename PageMap::iterator PageIt;$/;"	t	class:DecodeCache::AddrMap
PageManage	./mem/DRAMCtrl.py	/^class PageManage(Enum): vals = ['open', 'open_adaptive', 'close',$/;"	c
PageMap	./cpu/decode_cache.hh	/^    typedef typename std::unordered_map<Addr, CachePage *> PageMap;$/;"	t	class:DecodeCache::AddrMap
PageMapEntry	./dev/arm/flash_device.hh	/^    struct PageMapEntry {$/;"	s	class:FlashDevice
PageMask	./arch/alpha/isa_traits.hh	/^const Addr PageMask = ~(PageBytes - 1);$/;"	m	namespace:AlphaISA
PageOffset	./arch/alpha/isa_traits.hh	/^const Addr PageOffset = PageBytes - 1;$/;"	m	namespace:AlphaISA
PageOffset	./arch/arm/isa_traits.hh	/^    const Addr PageOffset = PageBytes - 1;$/;"	m	namespace:ArmISA
PageOffset	./arch/mips/isa_traits.hh	/^const Addr PageOffset = PageBytes - 1;$/;"	m	namespace:MipsISA
PageOffset	./arch/power/isa_traits.hh	/^const Addr PageOffset = PageBytes - 1;$/;"	m	namespace:PowerISA
PageShift	./arch/alpha/isa_traits.hh	/^const Addr PageShift = 13;$/;"	m	namespace:AlphaISA
PageShift	./arch/arm/isa_traits.hh	/^    const Addr PageShift = 12;$/;"	m	namespace:ArmISA
PageShift	./arch/mips/isa_traits.hh	/^const Addr PageShift = 13;$/;"	m	namespace:MipsISA
PageShift	./arch/null/isa_traits.hh	/^    const Addr PageShift = 12;$/;"	m	namespace:NullISA
PageShift	./arch/power/isa_traits.hh	/^const Addr PageShift = 12;$/;"	m	namespace:PowerISA
PageShift	./arch/sparc/isa_traits.hh	/^const Addr PageShift = 13;$/;"	m	namespace:SparcISA
PageShift	./arch/x86/isa_traits.hh	/^    const Addr PageShift = 12;$/;"	m	namespace:X86ISA
PageTable	./arch/alpha/tlb.hh	/^    typedef std::multimap<Addr, int> PageTable;$/;"	t	class:AlphaISA::TLB
PageTable	./arch/arm/table_walker.hh	/^            PageTable,$/;"	e	enum:ArmISA::TableWalker::L1Descriptor::EntryType
PageTable	./arch/mips/tlb.hh	/^    typedef std::multimap<Addr, int> PageTable;$/;"	t	class:MipsISA::TLB
PageTable	./arch/power/tlb.hh	/^    typedef std::multimap<Addr, int> PageTable;$/;"	t	class:PowerISA::TLB
PageTableBase	./mem/page_table.hh	/^    PageTableBase(const std::string &__name, uint64_t _pid,$/;"	f	class:PageTableBase
PageTableBase	./mem/page_table.hh	/^class PageTableBase : public Serializable$/;"	c
PageTableEntry	./arch/alpha/pagetable.hh	/^    PageTableEntry(uint64_t e) : entry(e) {}$/;"	f	struct:AlphaISA::PageTableEntry
PageTableEntry	./arch/alpha/pagetable.hh	/^struct PageTableEntry$/;"	s	namespace:AlphaISA
PageTableEntry	./arch/sparc/pagetable.hh	/^    PageTableEntry() : entry(0), type(invalid), populated(false)$/;"	f	class:SparcISA::PageTableEntry
PageTableEntry	./arch/sparc/pagetable.hh	/^    PageTableEntry(uint64_t e, EntryType t = sun4u)$/;"	f	class:SparcISA::PageTableEntry
PageTableEntry	./arch/sparc/pagetable.hh	/^class PageTableEntry$/;"	c	namespace:SparcISA
PageTableLayout	./arch/x86/pagetable.hh	/^    const std::vector<uint8_t> PageTableLayout = {9, 9, 9, 9};$/;"	m	namespace:X86ISA
PageTableOps	./arch/x86/pagetable.hh	/^    class PageTableOps$/;"	c	namespace:X86ISA
Page_Mask	./arch/arm/isa_traits.hh	/^    const Addr Page_Mask = ~(PageBytes - 1);$/;"	m	namespace:ArmISA
Page_Mask	./arch/mips/isa_traits.hh	/^const Addr Page_Mask = ~(PageBytes - 1);$/;"	m	namespace:MipsISA
Page_Mask	./arch/power/isa_traits.hh	/^const Addr Page_Mask = ~(PageBytes - 1);$/;"	m	namespace:PowerISA
PairAST	./mem/slicc/ast/PairAST.py	/^class PairAST(AST):$/;"	c
PairContainer	./mem/slicc/util.py	/^class PairContainer(object):$/;"	c
PairListAST	./mem/slicc/ast/PairListAST.py	/^class PairListAST(AST):$/;"	c
PairMemOp	./arch/arm/insts/macromem.cc	/^PairMemOp::PairMemOp(const char *mnem, ExtMachInst machInst, OpClass __opClass,$/;"	f	class:ArmISA::PairMemOp
PairMemOp	./arch/arm/insts/macromem.hh	/^class PairMemOp : public PredMacroOp$/;"	c	namespace:ArmISA
PalBase	./arch/alpha/ev5.hh	/^const Addr PalBase = 0x4000;$/;"	m	namespace:AlphaISA
PalFault	./arch/alpha/faults.hh	/^class PalFault : public AlphaFault$/;"	c	namespace:AlphaISA
PalMax	./arch/alpha/ev5.hh	/^const Addr PalMax = 0x10000;$/;"	m	namespace:AlphaISA
PanicFunc	./arch/generic/debugfaults.hh	/^        PanicFunc,$/;"	e	enum:GenericISA::M5DebugFault::DebugFunc
PanicPCEvent	./cpu/pc_event.cc	/^PanicPCEvent::PanicPCEvent(PCEventQueue *q, const std::string &desc, Addr pc)$/;"	f	class:PanicPCEvent
PanicPCEvent	./cpu/pc_event.hh	/^class PanicPCEvent : public PCEvent$/;"	c
Param	./arch/alpha/linux/system.hh	/^    Addr Param() const { return ZeroPGE() + 0x0; }$/;"	f	class:LinuxAlphaSystem
Param	./arch/mips/linux/system.hh	/^    Addr Param() const { return ZeroPGE() + 0x0; }$/;"	f	class:LinuxMipsSystem
Param	./python/m5/params.py	/^Param = ParamFactory(ParamDesc)$/;"	v
ParamDesc	./python/m5/params.py	/^class ParamDesc(object):$/;"	c
ParamDesc	./sim/cxx_config.hh	/^        ParamDesc(const std::string &name_,$/;"	f	class:CxxConfigDirectoryEntry::ParamDesc
ParamDesc	./sim/cxx_config.hh	/^    class ParamDesc$/;"	c	class:CxxConfigDirectoryEntry
ParamFactory	./python/m5/params.py	/^class ParamFactory(object):$/;"	c
ParamInfo	./python/m5/SimObject.py	/^class ParamInfo(object):$/;"	c
ParamValue	./python/m5/params.py	/^class ParamValue(object):$/;"	c
Params	./arch/alpha/freebsd/system.hh	/^    typedef FreebsdAlphaSystemParams Params;$/;"	t	class:FreebsdAlphaSystem
Params	./arch/alpha/interrupts.hh	/^    typedef AlphaInterruptsParams Params;$/;"	t	class:AlphaISA::Interrupts
Params	./arch/alpha/isa.hh	/^        typedef AlphaISAParams Params;$/;"	t	class:AlphaISA::ISA
Params	./arch/alpha/linux/system.hh	/^    typedef LinuxAlphaSystemParams Params;$/;"	t	class:LinuxAlphaSystem
Params	./arch/alpha/system.hh	/^    typedef AlphaSystemParams Params;$/;"	t	class:AlphaSystem
Params	./arch/alpha/tlb.hh	/^    typedef AlphaTLBParams Params;$/;"	t	class:AlphaISA::TLB
Params	./arch/alpha/tru64/system.hh	/^    typedef Tru64AlphaSystemParams Params;$/;"	t	class:Tru64AlphaSystem
Params	./arch/arm/freebsd/system.hh	/^    typedef FreebsdArmSystemParams Params;$/;"	t	class:FreebsdArmSystem
Params	./arch/arm/interrupts.hh	/^    typedef ArmInterruptsParams Params;$/;"	t	class:ArmISA::Interrupts
Params	./arch/arm/isa.hh	/^        typedef ArmISAParams Params;$/;"	t	class:ArmISA::ISA
Params	./arch/arm/linux/system.hh	/^    typedef LinuxArmSystemParams Params;$/;"	t	class:LinuxArmSystem
Params	./arch/arm/nativetrace.hh	/^    typedef ArmNativeTraceParams Params;$/;"	t	class:Trace::ArmNativeTrace
Params	./arch/arm/stage2_mmu.hh	/^    typedef ArmStage2MMUParams Params;$/;"	t	class:ArmISA::Stage2MMU
Params	./arch/arm/system.hh	/^    typedef ArmSystemParams Params;$/;"	t	class:ArmSystem
Params	./arch/arm/system.hh	/^    typedef GenericArmSystemParams Params;$/;"	t	class:GenericArmSystem
Params	./arch/arm/table_walker.hh	/^   typedef ArmTableWalkerParams Params;$/;"	t	class:ArmISA::TableWalker
Params	./arch/mips/interrupts.hh	/^    typedef MipsInterruptsParams Params;$/;"	t	class:MipsISA::Interrupts
Params	./arch/mips/isa.hh	/^        typedef MipsISAParams Params;$/;"	t	class:MipsISA::ISA
Params	./arch/mips/linux/system.hh	/^    typedef LinuxMipsSystemParams Params;$/;"	t	class:LinuxMipsSystem
Params	./arch/mips/system.hh	/^    typedef MipsSystemParams Params;$/;"	t	class:MipsSystem
Params	./arch/mips/tlb.hh	/^    typedef MipsTLBParams Params;$/;"	t	class:MipsISA::TLB
Params	./arch/power/interrupts.hh	/^    typedef PowerInterruptsParams Params;$/;"	t	class:PowerISA::Interrupts
Params	./arch/power/isa.hh	/^    typedef PowerISAParams Params;$/;"	t	class:PowerISA::ISA
Params	./arch/power/tlb.hh	/^    typedef PowerTLBParams Params;$/;"	t	class:PowerISA::TLB
Params	./arch/sparc/interrupts.hh	/^    typedef SparcInterruptsParams Params;$/;"	t	class:SparcISA::Interrupts
Params	./arch/sparc/isa.hh	/^    typedef SparcISAParams Params;$/;"	t	class:SparcISA::ISA
Params	./arch/sparc/system.hh	/^    typedef SparcSystemParams Params;$/;"	t	class:SparcSystem
Params	./arch/sparc/tlb.hh	/^    typedef SparcTLBParams Params;$/;"	t	class:SparcISA::TLB
Params	./arch/x86/bios/acpi.hh	/^    typedef X86ACPIRSDPParams Params;$/;"	t	class:X86ISA::ACPI::RSDP
Params	./arch/x86/bios/acpi.hh	/^    typedef X86ACPIRSDTParams Params;$/;"	t	class:X86ISA::ACPI::RSDT
Params	./arch/x86/bios/acpi.hh	/^    typedef X86ACPISysDescTableParams Params;$/;"	t	class:X86ISA::ACPI::SysDescTable
Params	./arch/x86/bios/acpi.hh	/^    typedef X86ACPIXSDTParams Params;$/;"	t	class:X86ISA::ACPI::XSDT
Params	./arch/x86/bios/e820.hh	/^        typedef X86E820EntryParams Params;$/;"	t	class:X86ISA::E820Entry
Params	./arch/x86/bios/e820.hh	/^        typedef X86E820TableParams Params;$/;"	t	class:X86ISA::E820Table
Params	./arch/x86/bios/intelmp.hh	/^    typedef X86IntelMPAddrSpaceMappingParams Params;$/;"	t	class:X86ISA::IntelMP::AddrSpaceMapping
Params	./arch/x86/bios/intelmp.hh	/^    typedef X86IntelMPBaseConfigEntryParams Params;$/;"	t	class:X86ISA::IntelMP::BaseConfigEntry
Params	./arch/x86/bios/intelmp.hh	/^    typedef X86IntelMPBusHierarchyParams Params;$/;"	t	class:X86ISA::IntelMP::BusHierarchy
Params	./arch/x86/bios/intelmp.hh	/^    typedef X86IntelMPBusParams Params;$/;"	t	class:X86ISA::IntelMP::Bus
Params	./arch/x86/bios/intelmp.hh	/^    typedef X86IntelMPCompatAddrSpaceModParams Params;$/;"	t	class:X86ISA::IntelMP::CompatAddrSpaceMod
Params	./arch/x86/bios/intelmp.hh	/^    typedef X86IntelMPConfigTableParams Params;$/;"	t	class:X86ISA::IntelMP::ConfigTable
Params	./arch/x86/bios/intelmp.hh	/^    typedef X86IntelMPExtConfigEntryParams Params;$/;"	t	class:X86ISA::IntelMP::ExtConfigEntry
Params	./arch/x86/bios/intelmp.hh	/^    typedef X86IntelMPFloatingPointerParams Params;$/;"	t	class:X86ISA::IntelMP::FloatingPointer
Params	./arch/x86/bios/intelmp.hh	/^    typedef X86IntelMPIOAPICParams Params;$/;"	t	class:X86ISA::IntelMP::IOAPIC
Params	./arch/x86/bios/intelmp.hh	/^    typedef X86IntelMPIOIntAssignmentParams Params;$/;"	t	class:X86ISA::IntelMP::IOIntAssignment
Params	./arch/x86/bios/intelmp.hh	/^    typedef X86IntelMPLocalIntAssignmentParams Params;$/;"	t	class:X86ISA::IntelMP::LocalIntAssignment
Params	./arch/x86/bios/intelmp.hh	/^    typedef X86IntelMPProcessorParams Params;$/;"	t	class:X86ISA::IntelMP::Processor
Params	./arch/x86/bios/smbios.hh	/^    typedef X86SMBiosBiosInformationParams Params;$/;"	t	class:X86ISA::SMBios::BiosInformation
Params	./arch/x86/bios/smbios.hh	/^    typedef X86SMBiosSMBiosStructureParams Params;$/;"	t	class:X86ISA::SMBios::SMBiosStructure
Params	./arch/x86/bios/smbios.hh	/^    typedef X86SMBiosSMBiosTableParams Params;$/;"	t	class:X86ISA::SMBios::SMBiosTable
Params	./arch/x86/interrupts.hh	/^    typedef X86LocalApicParams Params;$/;"	t	class:X86ISA::Interrupts
Params	./arch/x86/isa.hh	/^        typedef X86ISAParams Params;$/;"	t	class:X86ISA::ISA
Params	./arch/x86/linux/system.hh	/^    typedef LinuxX86SystemParams Params;$/;"	t	class:LinuxX86System
Params	./arch/x86/pagetable_walker.hh	/^        typedef X86PagetableWalkerParams Params;$/;"	t	class:X86ISA::Walker
Params	./arch/x86/system.hh	/^    typedef X86SystemParams Params;$/;"	t	class:X86System
Params	./arch/x86/tlb.hh	/^        typedef X86TLBParams Params;$/;"	t	class:X86ISA::TLB
Params	./base/cp_annotate.hh	/^    typedef CPAParams Params;$/;"	t	class:CPA
Params	./base/statistics.hh	/^        Params() : DistParams(Deviation) {}$/;"	f	struct:Stats::AvgSampleStor::Params
Params	./base/statistics.hh	/^        Params() : DistParams(Deviation) {}$/;"	f	struct:Stats::SampleStor::Params
Params	./base/statistics.hh	/^        Params() : DistParams(Dist), min(0), max(0), bucket_size(0),$/;"	f	struct:Stats::DistStor::Params
Params	./base/statistics.hh	/^        Params() : DistParams(Hist) {}$/;"	f	struct:Stats::SparseHistStor::Params
Params	./base/statistics.hh	/^        Params() : DistParams(Hist), buckets(0) {}$/;"	f	struct:Stats::HistStor::Params
Params	./base/statistics.hh	/^    struct Params : public DistParams$/;"	s	class:Stats::AvgSampleStor
Params	./base/statistics.hh	/^    struct Params : public DistParams$/;"	s	class:Stats::DistStor
Params	./base/statistics.hh	/^    struct Params : public DistParams$/;"	s	class:Stats::HistStor
Params	./base/statistics.hh	/^    struct Params : public DistParams$/;"	s	class:Stats::SampleStor
Params	./base/statistics.hh	/^    struct Params : public DistParams$/;"	s	class:Stats::SparseHistStor
Params	./base/statistics.hh	/^    struct Params : public StorageParams {};$/;"	s	class:Stats::AvgStor
Params	./base/statistics.hh	/^    struct Params : public StorageParams {};$/;"	s	class:Stats::StatStor
Params	./base/statistics.hh	/^    typedef typename Stor::Params Params;$/;"	t	class:Stats::DistBase
Params	./base/statistics.hh	/^    typedef typename Stor::Params Params;$/;"	t	class:Stats::ScalarBase
Params	./base/statistics.hh	/^    typedef typename Stor::Params Params;$/;"	t	class:Stats::SparseHistBase
Params	./base/statistics.hh	/^    typedef typename Stor::Params Params;$/;"	t	class:Stats::Vector2dBase
Params	./base/statistics.hh	/^    typedef typename Stor::Params Params;$/;"	t	class:Stats::VectorBase
Params	./base/statistics.hh	/^    typedef typename Stor::Params Params;$/;"	t	class:Stats::VectorDistBase
Params	./base/vnc/vncinput.hh	/^    typedef VncInputParams Params;$/;"	t	class:VncInput
Params	./base/vnc/vncserver.hh	/^    typedef VncServerParams Params;$/;"	t	class:VncServer
Params	./cpu/base.hh	/^    typedef BaseCPUParams Params;$/;"	t	class:BaseCPU
Params	./cpu/checker/cpu.hh	/^    typedef CheckerCPUParams Params;$/;"	t	class:CheckerCPU
Params	./cpu/exetrace.hh	/^    typedef ExeTracerParams Params;$/;"	t	class:Trace::ExeTracer
Params	./cpu/intr_control.hh	/^    typedef IntrControlParams Params;$/;"	t	class:IntrControl
Params	./cpu/o3/fu_pool.hh	/^    typedef FUPoolParams Params;$/;"	t	class:FUPool
Params	./cpu/pred/bpred_unit.hh	/^      typedef BranchPredictorParams Params;$/;"	t	class:BPredUnit
Params	./cpu/testers/directedtest/DirectedGenerator.hh	/^    typedef DirectedGeneratorParams Params;$/;"	t	class:DirectedGenerator
Params	./cpu/testers/directedtest/InvalidateGenerator.hh	/^    typedef InvalidateGeneratorParams Params;$/;"	t	class:InvalidateGenerator
Params	./cpu/testers/directedtest/RubyDirectedTester.hh	/^    typedef RubyDirectedTesterParams Params;$/;"	t	class:RubyDirectedTester
Params	./cpu/testers/directedtest/SeriesRequestGenerator.hh	/^    typedef SeriesRequestGeneratorParams Params;$/;"	t	class:SeriesRequestGenerator
Params	./cpu/testers/memtest/memtest.hh	/^    typedef MemTestParams Params;$/;"	t	class:MemTest
Params	./cpu/testers/networktest/networktest.hh	/^    typedef NetworkTestParams Params;$/;"	t	class:NetworkTest
Params	./cpu/testers/rubytest/RubyTester.hh	/^    typedef RubyTesterParams Params;$/;"	t	class:RubyTester
Params	./dev/alpha/backdoor.hh	/^    typedef AlphaBackdoorParams Params;$/;"	t	class:AlphaBackdoor
Params	./dev/alpha/tsunami.hh	/^    typedef TsunamiParams Params;$/;"	t	class:Tsunami
Params	./dev/alpha/tsunami_cchip.hh	/^    typedef TsunamiCChipParams Params;$/;"	t	class:TsunamiCChip
Params	./dev/alpha/tsunami_io.hh	/^    typedef TsunamiIOParams Params;$/;"	t	class:TsunamiIO
Params	./dev/alpha/tsunami_pchip.hh	/^    typedef TsunamiPChipParams Params;$/;"	t	class:TsunamiPChip
Params	./dev/arm/a9scu.hh	/^    typedef A9SCUParams Params;$/;"	t	class:A9SCU
Params	./dev/arm/amba_device.hh	/^    typedef AmbaDmaDeviceParams Params;$/;"	t	class:AmbaDmaDevice
Params	./dev/arm/amba_device.hh	/^    typedef AmbaIntDeviceParams Params;$/;"	t	class:AmbaIntDevice
Params	./dev/arm/amba_device.hh	/^    typedef AmbaPioDeviceParams Params;$/;"	t	class:AmbaPioDevice
Params	./dev/arm/amba_fake.hh	/^   typedef AmbaFakeParams Params;$/;"	t	class:AmbaFake
Params	./dev/arm/base_gic.hh	/^    typedef struct BaseGicParams Params;$/;"	t	class:BaseGic	typeref:struct:BaseGic::BaseGicParams
Params	./dev/arm/energy_ctrl.hh	/^    typedef EnergyCtrlParams Params;$/;"	t	class:EnergyCtrl
Params	./dev/arm/gic_pl390.hh	/^    typedef Pl390Params Params;$/;"	t	class:Pl390
Params	./dev/arm/gic_v2m.hh	/^    typedef Gicv2mFrameParams Params;$/;"	t	class:Gicv2mFrame
Params	./dev/arm/gic_v2m.hh	/^    typedef Gicv2mParams Params;$/;"	t	class:Gicv2m
Params	./dev/arm/kmi.hh	/^    typedef Pl050Params Params;$/;"	t	class:Pl050
Params	./dev/arm/pl111.hh	/^    typedef Pl111Params Params;$/;"	t	class:Pl111
Params	./dev/arm/realview.hh	/^    typedef RealViewParams Params;$/;"	t	class:RealView
Params	./dev/arm/rtc_pl031.hh	/^    typedef PL031Params Params;$/;"	t	class:PL031
Params	./dev/arm/rv_ctrl.hh	/^    typedef RealViewCtrlParams Params;$/;"	t	class:RealViewCtrl
Params	./dev/arm/timer_cpulocal.hh	/^    typedef CpuLocalTimerParams Params;$/;"	t	class:CpuLocalTimer
Params	./dev/arm/timer_sp804.hh	/^    typedef Sp804Params Params;$/;"	t	class:Sp804
Params	./dev/arm/vgic.hh	/^   typedef VGicParams Params;$/;"	t	class:VGic
Params	./dev/baddev.hh	/^    typedef BadDeviceParams Params;$/;"	t	class:BadDevice
Params	./dev/dma_device.hh	/^    typedef DmaDeviceParams Params;$/;"	t	class:DmaDevice
Params	./dev/io_device.hh	/^    typedef BasicPioDeviceParams Params;$/;"	t	class:BasicPioDevice
Params	./dev/io_device.hh	/^    typedef PioDeviceParams Params;$/;"	t	class:PioDevice
Params	./dev/isa_fake.hh	/^    typedef IsaFakeParams Params;$/;"	t	class:IsaFake
Params	./dev/mips/malta.hh	/^    typedef MaltaParams Params;$/;"	t	class:Malta
Params	./dev/mips/malta_cchip.hh	/^    typedef MaltaCChipParams Params;$/;"	t	class:MaltaCChip
Params	./dev/mips/malta_io.hh	/^    typedef MaltaIOParams Params;$/;"	t	class:MaltaIO
Params	./dev/net/dist_etherlink.hh	/^    typedef DistEtherLinkParams Params;$/;"	t	class:DistEtherLink
Params	./dev/net/etherbus.hh	/^    typedef EtherBusParams Params;$/;"	t	class:EtherBus
Params	./dev/net/etherdevice.hh	/^    typedef EtherDeviceParams Params;$/;"	t	class:EtherDevice
Params	./dev/net/etherdump.hh	/^    typedef EtherDumpParams Params;$/;"	t	class:EtherDump
Params	./dev/net/etherlink.hh	/^    typedef EtherLinkParams Params;$/;"	t	class:EtherLink
Params	./dev/net/etherobject.hh	/^    typedef EtherObjectParams Params;$/;"	t	class:EtherObject
Params	./dev/net/ethertap.hh	/^    typedef EtherTapParams Params;$/;"	t	class:EtherTap
Params	./dev/net/i8254xGBe.hh	/^    typedef IGbEParams Params;$/;"	t	class:IGbE
Params	./dev/net/ns_gige.hh	/^    typedef NSGigEParams Params;$/;"	t	class:NSGigE
Params	./dev/net/sinic.hh	/^    typedef SinicParams Params;$/;"	t	class:Sinic::Base
Params	./dev/pci/copy_engine.hh	/^    typedef CopyEngineParams Params;$/;"	t	class:CopyEngine
Params	./dev/platform.hh	/^    typedef PlatformParams Params;$/;"	t	class:Platform
Params	./dev/sparc/dtod.hh	/^    typedef DumbTODParams Params;$/;"	t	class:DumbTOD
Params	./dev/sparc/iob.hh	/^    typedef IobParams Params;$/;"	t	class:Iob
Params	./dev/sparc/mm_disk.hh	/^    typedef MmDiskParams Params;$/;"	t	class:MmDisk
Params	./dev/sparc/t1000.hh	/^    typedef T1000Params Params;$/;"	t	class:T1000
Params	./dev/storage/disk_image.hh	/^    typedef CowDiskImageParams Params;$/;"	t	class:CowDiskImage
Params	./dev/storage/disk_image.hh	/^    typedef DiskImageParams Params;$/;"	t	class:DiskImage
Params	./dev/storage/disk_image.hh	/^    typedef RawDiskImageParams Params;$/;"	t	class:RawDiskImage
Params	./dev/storage/ide_ctrl.hh	/^    typedef IdeControllerParams Params;$/;"	t	class:IdeController
Params	./dev/storage/ide_disk.hh	/^    typedef IdeDiskParams Params;$/;"	t	class:IdeDisk
Params	./dev/storage/simple_disk.hh	/^    typedef SimpleDiskParams Params;$/;"	t	class:SimpleDisk
Params	./dev/terminal.hh	/^    typedef TerminalParams Params;$/;"	t	class:Terminal
Params	./dev/uart.hh	/^    typedef UartParams Params;$/;"	t	class:Uart
Params	./dev/uart8250.hh	/^    typedef Uart8250Params Params;$/;"	t	class:Uart8250
Params	./dev/virtio/base.hh	/^    typedef VirtIODeviceBaseParams Params;$/;"	t	class:VirtIODeviceBase
Params	./dev/virtio/block.hh	/^    typedef VirtIOBlockParams Params;$/;"	t	class:VirtIOBlock
Params	./dev/virtio/console.hh	/^    typedef VirtIOConsoleParams Params;$/;"	t	class:VirtIOConsole
Params	./dev/virtio/fs9p.hh	/^    typedef VirtIO9PBaseParams Params;$/;"	t	class:VirtIO9PBase
Params	./dev/virtio/fs9p.hh	/^    typedef VirtIO9PDiodParams Params;$/;"	t	class:VirtIO9PDiod
Params	./dev/virtio/fs9p.hh	/^    typedef VirtIO9PProxyParams Params;$/;"	t	class:VirtIO9PProxy
Params	./dev/virtio/fs9p.hh	/^    typedef VirtIO9PSocketParams Params;$/;"	t	class:VirtIO9PSocket
Params	./dev/virtio/pci.hh	/^    typedef PciVirtIOParams Params;$/;"	t	class:PciVirtIO
Params	./dev/x86/cmos.hh	/^    typedef CmosParams Params;$/;"	t	class:X86ISA::Cmos
Params	./dev/x86/i8042.hh	/^    typedef I8042Params Params;$/;"	t	class:X86ISA::I8042
Params	./dev/x86/i82094aa.hh	/^    typedef I82094AAParams Params;$/;"	t	class:X86ISA::I82094AA
Params	./dev/x86/i8237.hh	/^    typedef I8237Params Params;$/;"	t	class:X86ISA::I8237
Params	./dev/x86/i8254.hh	/^    typedef I8254Params Params;$/;"	t	class:X86ISA::I8254
Params	./dev/x86/i8259.hh	/^    typedef I8259Params Params;$/;"	t	class:X86ISA::I8259
Params	./dev/x86/intdev.hh	/^    typedef X86IntLineParams Params;$/;"	t	class:X86ISA::IntLine
Params	./dev/x86/intdev.hh	/^    typedef X86IntSinkPinParams Params;$/;"	t	class:X86ISA::IntSinkPin
Params	./dev/x86/intdev.hh	/^    typedef X86IntSourcePinParams Params;$/;"	t	class:X86ISA::IntSourcePin
Params	./dev/x86/pc.hh	/^    typedef PcParams Params;$/;"	t	class:Pc
Params	./dev/x86/south_bridge.hh	/^    typedef SouthBridgeParams Params;$/;"	t	class:SouthBridge
Params	./dev/x86/speaker.hh	/^    typedef PcSpeakerParams Params;$/;"	t	class:X86ISA::Speaker
Params	./mem/abstract_mem.hh	/^    typedef AbstractMemoryParams Params;$/;"	t	class:AbstractMemory
Params	./mem/bridge.hh	/^    typedef BridgeParams Params;$/;"	t	class:Bridge
Params	./mem/cache/tags/base.hh	/^    typedef BaseTagsParams Params;$/;"	t	class:BaseTags
Params	./mem/cache/tags/base_set_assoc.hh	/^     typedef BaseSetAssocParams Params;$/;"	t	class:BaseSetAssoc
Params	./mem/cache/tags/fa_lru.hh	/^    typedef FALRUParams Params;$/;"	t	class:FALRU
Params	./mem/cache/tags/lru.hh	/^    typedef LRUParams Params;$/;"	t	class:LRU
Params	./mem/cache/tags/random_repl.hh	/^    typedef RandomReplParams Params;$/;"	t	class:RandomRepl
Params	./mem/comm_monitor.hh	/^    typedef CommMonitorParams Params;$/;"	t	class:CommMonitor
Params	./mem/dramsim2.hh	/^    typedef DRAMSim2Params Params;$/;"	t	class:DRAMSim2
Params	./mem/mem_checker_monitor.hh	/^    typedef MemCheckerMonitorParams Params;$/;"	t	class:MemCheckerMonitor
Params	./mem/mem_object.hh	/^    typedef MemObjectParams Params;$/;"	t	class:MemObject
Params	./mem/ruby/network/BasicLink.hh	/^    typedef BasicExtLinkParams Params;$/;"	t	class:BasicExtLink
Params	./mem/ruby/network/BasicLink.hh	/^    typedef BasicIntLinkParams Params;$/;"	t	class:BasicIntLink
Params	./mem/ruby/network/BasicLink.hh	/^    typedef BasicLinkParams Params;$/;"	t	class:BasicLink
Params	./mem/ruby/network/BasicRouter.hh	/^    typedef BasicRouterParams Params;$/;"	t	class:BasicRouter
Params	./mem/ruby/network/MessageBuffer.hh	/^    typedef MessageBufferParams Params;$/;"	t	class:MessageBuffer
Params	./mem/ruby/network/Network.hh	/^    typedef RubyNetworkParams Params;$/;"	t	class:Network
Params	./mem/ruby/network/fault_model/FaultModel.hh	/^    typedef FaultModelParams Params;$/;"	t	class:FaultModel
Params	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    typedef BaseGarnetNetworkParams Params;$/;"	t	class:BaseGarnetNetwork
Params	./mem/ruby/network/garnet/fixed-pipeline/CreditLink_d.hh	/^    typedef CreditLink_dParams Params;$/;"	t	class:CreditLink_d
Params	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.hh	/^    typedef GarnetExtLink_dParams Params;$/;"	t	class:GarnetExtLink_d
Params	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.hh	/^    typedef GarnetIntLink_dParams Params;$/;"	t	class:GarnetIntLink_d
Params	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.hh	/^    typedef GarnetNetwork_dParams Params;$/;"	t	class:GarnetNetwork_d
Params	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    typedef GarnetNetworkInterface_dParams Params;$/;"	t	class:NetworkInterface_d
Params	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.hh	/^    typedef NetworkLink_dParams Params;$/;"	t	class:NetworkLink_d
Params	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    typedef GarnetRouter_dParams Params;$/;"	t	class:Router_d
Params	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.hh	/^    typedef GarnetExtLinkParams Params;$/;"	t	class:GarnetExtLink
Params	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.hh	/^    typedef GarnetIntLinkParams Params;$/;"	t	class:GarnetIntLink
Params	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.hh	/^    typedef GarnetNetworkParams Params;$/;"	t	class:GarnetNetwork
Params	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	/^    typedef GarnetNetworkInterfaceParams Params;$/;"	t	class:NetworkInterface
Params	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	/^    typedef NetworkLinkParams Params;$/;"	t	class:NetworkLink
Params	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    typedef GarnetRouterParams Params;$/;"	t	class:Router
Params	./mem/ruby/network/simple/SimpleLink.hh	/^    typedef SimpleExtLinkParams Params;$/;"	t	class:SimpleExtLink
Params	./mem/ruby/network/simple/SimpleLink.hh	/^    typedef SimpleIntLinkParams Params;$/;"	t	class:SimpleIntLink
Params	./mem/ruby/network/simple/SimpleNetwork.hh	/^    typedef SimpleNetworkParams Params;$/;"	t	class:SimpleNetwork
Params	./mem/ruby/network/simple/Switch.hh	/^    typedef SwitchParams Params;$/;"	t	class:Switch
Params	./mem/ruby/slicc_interface/AbstractController.hh	/^    typedef RubyControllerParams Params;$/;"	t	class:AbstractController
Params	./mem/ruby/structures/AbstractReplacementPolicy.hh	/^    typedef ReplacementPolicyParams Params;$/;"	t	class:AbstractReplacementPolicy
Params	./mem/ruby/structures/CacheMemory.hh	/^    typedef RubyCacheParams Params;$/;"	t	class:CacheMemory
Params	./mem/ruby/structures/DirectoryMemory.hh	/^    typedef RubyDirectoryMemoryParams Params;$/;"	t	class:DirectoryMemory
Params	./mem/ruby/structures/LRUPolicy.hh	/^    typedef LRUReplacementPolicyParams Params;$/;"	t	class:LRUPolicy
Params	./mem/ruby/structures/Prefetcher.hh	/^        typedef PrefetcherParams Params;$/;"	t	class:Prefetcher
Params	./mem/ruby/structures/PseudoLRUPolicy.hh	/^    typedef PseudoLRUReplacementPolicyParams Params;$/;"	t	class:PseudoLRUPolicy
Params	./mem/ruby/structures/RubyMemoryControl.hh	/^    typedef RubyMemoryControlParams Params;$/;"	t	class:RubyMemoryControl
Params	./mem/ruby/structures/WireBuffer.hh	/^    typedef RubyWireBufferParams Params;$/;"	t	class:WireBuffer
Params	./mem/ruby/system/DMASequencer.hh	/^    typedef DMASequencerParams Params;$/;"	t	class:DMASequencer
Params	./mem/ruby/system/RubyPort.hh	/^    typedef RubyPortParams Params;$/;"	t	class:RubyPort
Params	./mem/ruby/system/RubySystem.hh	/^    typedef RubySystemParams Params;$/;"	t	class:RubySystem
Params	./mem/ruby/system/Sequencer.hh	/^    typedef RubySequencerParams Params;$/;"	t	class:Sequencer
Params	./mem/serial_link.hh	/^    typedef SerialLinkParams Params;$/;"	t	class:SerialLink
Params	./sim/clock_domain.hh	/^    typedef ClockDomainParams Params;$/;"	t	class:ClockDomain
Params	./sim/clock_domain.hh	/^    typedef DerivedClockDomainParams Params;$/;"	t	class:DerivedClockDomain
Params	./sim/clock_domain.hh	/^    typedef SrcClockDomainParams Params;$/;"	t	class:SrcClockDomain
Params	./sim/dvfs_handler.hh	/^    typedef DVFSHandlerParams Params;$/;"	t	class:DVFSHandler
Params	./sim/root.hh	/^    typedef RootParams Params;$/;"	t	class:Root
Params	./sim/sim_object.hh	/^    typedef SimObjectParams Params;$/;"	t	class:SimObject
Params	./sim/system.hh	/^    typedef SystemParams Params;$/;"	t	class:System
Params	./sim/voltage_domain.hh	/^    typedef VoltageDomainParams Params;$/;"	t	class:VoltageDomain
Parent	./python/m5/proxy.py	/^Parent = ProxyFactory(search_self = False, search_up = True)$/;"	v
ParseError	./python/m5/util/grammar.py	/^class ParseError(Exception):$/;"	c
PartialAddrRangeCoverage	./cpu/minor/lsq.hh	/^        PartialAddrRangeCoverage, \/* Two ranges partly overlap *\/$/;"	e	enum:Minor::LSQ::AddrRangeCoverage
Partitioned	./cpu/o3/inst_queue.hh	/^        Partitioned,$/;"	e	enum:InstructionQueue::IQPolicy
Partitioned	./cpu/o3/lsq.hh	/^        Partitioned,$/;"	e	enum:LSQ::LSQPolicy
Partitioned	./cpu/o3/rob.hh	/^        Partitioned,$/;"	e	enum:ROB::ROBPolicy
PauseControlStatusRegister	./dev/net/ns_gige_reg.h	/^enum PauseControlStatusRegister {$/;"	g
Pc	./dev/x86/Pc.py	/^class Pc(Platform):$/;"	c
Pc	./dev/x86/pc.cc	/^Pc::Pc(const Params *p)$/;"	f	class:Pc
Pc	./dev/x86/pc.hh	/^class Pc : public Platform$/;"	c
PcPAL	./arch/alpha/utility.hh	/^inline bool PcPAL(Addr addr) { return addr & 0x3; }$/;"	f	namespace:AlphaISA
PcPciHost	./dev/x86/Pc.py	/^class PcPciHost(GenericPciHost):$/;"	c
PcSpeaker	./dev/x86/PcSpeaker.py	/^class PcSpeaker(BasicPioDevice):$/;"	c
PciBusAddr	./dev/pci/types.hh	/^    constexpr PciBusAddr(uint8_t _bus, uint8_t _dev, uint8_t _func)$/;"	f	struct:PciBusAddr
PciBusAddr	./dev/pci/types.hh	/^struct PciBusAddr$/;"	s
PciCtl	./dev/arm/rv_ctrl.hh	/^        PciCtl     = 0x44,$/;"	e	enum:RealViewCtrl::__anon19
PciDevice	./dev/pci/PciDevice.py	/^class PciDevice(DmaDevice):$/;"	c
PciDevice	./dev/pci/device.cc	/^PciDevice::PciDevice(const PciDeviceParams *p)$/;"	f	class:PciDevice
PciDevice	./dev/pci/device.hh	/^class PciDevice : public DmaDevice$/;"	c
PciHost	./dev/pci/PciHost.py	/^class PciHost(PioDevice):$/;"	c
PciHost	./dev/pci/host.cc	/^PciHost::PciHost(const PciHostParams *p)$/;"	f	class:PciHost
PciHost	./dev/pci/host.hh	/^class PciHost : public PioDevice$/;"	c
PciIntPin	./dev/pci/types.hh	/^enum class PciIntPin : uint8_t$/;"	c
PciVirtIO	./dev/virtio/VirtIO.py	/^class PciVirtIO(PciDevice):$/;"	c
PciVirtIO	./dev/virtio/pci.cc	/^PciVirtIO::PciVirtIO(const Params *params)$/;"	f	class:PciVirtIO
PciVirtIO	./dev/virtio/pci.hh	/^class PciVirtIO : public PciDevice$/;"	c
PeekStatementAST	./mem/slicc/ast/PeekStatementAST.py	/^class PeekStatementAST(StatementAST):$/;"	c
Percent	./python/m5/params.py	/^class Percent(CheckedInt):  cxx_type = 'int'; min = 0; max = 100$/;"	c
PerfKvmCounter	./cpu/kvm/perfevent.cc	/^PerfKvmCounter::PerfKvmCounter()$/;"	f	class:PerfKvmCounter
PerfKvmCounter	./cpu/kvm/perfevent.cc	/^PerfKvmCounter::PerfKvmCounter(PerfKvmCounterConfig &config, pid_t tid)$/;"	f	class:PerfKvmCounter
PerfKvmCounter	./cpu/kvm/perfevent.cc	/^PerfKvmCounter::PerfKvmCounter(PerfKvmCounterConfig &config,$/;"	f	class:PerfKvmCounter
PerfKvmCounter	./cpu/kvm/perfevent.hh	/^class PerfKvmCounter$/;"	c
PerfKvmCounterConfig	./cpu/kvm/perfevent.cc	/^PerfKvmCounterConfig::PerfKvmCounterConfig(uint32_t type, uint64_t config)$/;"	f	class:PerfKvmCounterConfig
PerfKvmCounterConfig	./cpu/kvm/perfevent.hh	/^class PerfKvmCounterConfig$/;"	c
PerfKvmTimer	./cpu/kvm/timer.cc	/^PerfKvmTimer::PerfKvmTimer(PerfKvmCounter &ctr,$/;"	f	class:PerfKvmTimer
PerfKvmTimer	./cpu/kvm/timer.hh	/^class PerfKvmTimer : public BaseKvmTimer$/;"	c
PerfLevel	./sim/clock_domain.hh	/^    typedef uint32_t PerfLevel;$/;"	t	class:SrcClockDomain
PerfLevel	./sim/dvfs_handler.hh	/^    typedef SrcClockDomain::PerfLevel PerfLevel;$/;"	t	class:DVFSHandler
PerfLevel	./sim/voltage_domain.hh	/^    typedef SrcClockDomain::PerfLevel PerfLevel;$/;"	t	class:VoltageDomain
PerfectCacheLineState	./mem/ruby/structures/PerfectCacheMemory.hh	/^    PerfectCacheLineState() { m_permission = AccessPermission_NUM; }$/;"	f	struct:PerfectCacheLineState
PerfectCacheLineState	./mem/ruby/structures/PerfectCacheMemory.hh	/^struct PerfectCacheLineState$/;"	s
PerfectCacheMemory	./mem/ruby/structures/PerfectCacheMemory.hh	/^PerfectCacheMemory<ENTRY>::PerfectCacheMemory()$/;"	f	class:PerfectCacheMemory
PerfectCacheMemory	./mem/ruby/structures/PerfectCacheMemory.hh	/^class PerfectCacheMemory$/;"	c
PerfectSwitch	./mem/ruby/network/simple/PerfectSwitch.cc	/^PerfectSwitch::PerfectSwitch(SwitchID sid, Switch *sw, uint32_t virt_nets)$/;"	f	class:PerfectSwitch
PerfectSwitch	./mem/ruby/network/simple/PerfectSwitch.hh	/^class PerfectSwitch : public Consumer$/;"	c
PermissionLL	./arch/arm/faults.hh	/^        PermissionLL = DomainLL + 4,$/;"	e	enum:ArmISA::ArmFault::FaultSource
PersistentTable	./mem/ruby/structures/PersistentTable.cc	/^PersistentTable::PersistentTable()$/;"	f	class:PersistentTable
PersistentTable	./mem/ruby/structures/PersistentTable.hh	/^class PersistentTable$/;"	c
PersistentTableEntry	./mem/ruby/structures/PersistentTable.hh	/^    PersistentTableEntry() {}$/;"	f	class:PersistentTableEntry
PersistentTableEntry	./mem/ruby/structures/PersistentTable.hh	/^class PersistentTableEntry$/;"	c
Phys2K0Seg	./arch/alpha/ev5.hh	/^Phys2K0Seg(Addr addr)$/;"	f	namespace:AlphaISA
Phys2K0Seg	./arch/mips/isa_traits.hh	/^inline Addr Phys2K0Seg(Addr addr)$/;"	f	namespace:MipsISA
PhysAddrAPICRangeSize	./arch/x86/x86_traits.hh	/^    const Addr PhysAddrAPICRangeSize = 1 << 12;$/;"	m	namespace:X86ISA
PhysAddrPrefixIO	./arch/x86/x86_traits.hh	/^    const Addr PhysAddrPrefixIO = ULL(0x8000000000000000);$/;"	m	namespace:X86ISA
PhysAddrPrefixInterrupts	./arch/x86/x86_traits.hh	/^    const Addr PhysAddrPrefixInterrupts = ULL(0xA000000000000000);$/;"	m	namespace:X86ISA
PhysAddrPrefixLocalAPIC	./arch/x86/x86_traits.hh	/^    const Addr PhysAddrPrefixLocalAPIC = ULL(0x2000000000000000);$/;"	m	namespace:X86ISA
PhysAddrPrefixPciConfig	./arch/x86/x86_traits.hh	/^    const Addr PhysAddrPrefixPciConfig = ULL(0xC000000000000000);$/;"	m	namespace:X86ISA
PhysFloatReg	./cpu/o3/regfile.hh	/^    } PhysFloatReg;$/;"	t	class:PhysRegFile	typeref:union:PhysRegFile::__anon36
PhysRegFile	./cpu/o3/regfile.cc	/^PhysRegFile::PhysRegFile(unsigned _numPhysicalIntRegs,$/;"	f	class:PhysRegFile
PhysRegFile	./cpu/o3/regfile.hh	/^class PhysRegFile$/;"	c
PhysRegIndex	./cpu/o3/comm.hh	/^typedef short int PhysRegIndex;$/;"	t
PhysicalMemory	./mem/physical.cc	/^PhysicalMemory::PhysicalMemory(const string& _name,$/;"	f	class:PhysicalMemory
PhysicalMemory	./mem/physical.hh	/^class PhysicalMemory : public Serializable$/;"	c
PioDevice	./dev/Device.py	/^class PioDevice(MemObject):$/;"	c
PioDevice	./dev/io_device.cc	/^PioDevice::PioDevice(const Params *p)$/;"	f	class:PioDevice
PioDevice	./dev/io_device.hh	/^class PioDevice : public MemObject$/;"	c
PioMasterPort	./mem/ruby/system/RubyPort.cc	/^RubyPort::PioMasterPort::PioMasterPort(const std::string &_name,$/;"	f	class:RubyPort::PioMasterPort
PioMasterPort	./mem/ruby/system/RubyPort.hh	/^    class PioMasterPort : public QueuedMasterPort$/;"	c	class:RubyPort
PioPort	./dev/io_device.cc	/^PioPort::PioPort(PioDevice *dev)$/;"	f	class:PioPort
PioPort	./dev/io_device.hh	/^class PioPort : public SimpleTimingPort$/;"	c
PioSlavePort	./mem/ruby/system/RubyPort.cc	/^RubyPort::PioSlavePort::PioSlavePort(const std::string &_name,$/;"	f	class:RubyPort::PioSlavePort
PioSlavePort	./mem/ruby/system/RubyPort.hh	/^    class PioSlavePort : public QueuedSlavePort$/;"	c	class:RubyPort
Pipeline	./cpu/minor/pipeline.cc	/^Pipeline::Pipeline(MinorCPU &cpu_, MinorCPUParams &params) :$/;"	f	class:Minor::Pipeline
Pipeline	./cpu/minor/pipeline.hh	/^class Pipeline : public Ticked$/;"	c	namespace:Minor
Pixel	./base/framebuffer.hh	/^    Pixel()$/;"	f	struct:Pixel
Pixel	./base/framebuffer.hh	/^    Pixel(uint8_t _red, uint8_t _green, uint8_t _blue)$/;"	f	struct:Pixel
Pixel	./base/framebuffer.hh	/^struct Pixel$/;"	s
PixelConverter	./base/framebuffer.cc	/^PixelConverter::PixelConverter(unsigned _length,$/;"	f	class:PixelConverter
PixelConverter	./base/framebuffer.hh	/^class PixelConverter$/;"	c
PixelEncodingsMessage	./base/vnc/vncinput.hh	/^    struct PixelEncodingsMessage {$/;"	s	class:VncInput
PixelEvent	./dev/pixelpump.cc	/^BasePixelPump::PixelEvent::PixelEvent($/;"	f	class:BasePixelPump::PixelEvent
PixelEvent	./dev/pixelpump.hh	/^    class PixelEvent : public Event, public Drainable$/;"	c	class:BasePixelPump
PixelFormat	./base/vnc/vncinput.hh	/^    struct PixelFormat {$/;"	s	class:VncInput
PixelFormatMessage	./base/vnc/vncinput.hh	/^    struct PixelFormatMessage {$/;"	s	class:VncInput
PixelPump	./dev/arm/hdlcd.hh	/^        PixelPump(HDLcd &p, ClockDomain &pxl_clk, unsigned pixel_chunk)$/;"	f	class:HDLcd::PixelPump
PixelPump	./dev/arm/hdlcd.hh	/^    class PixelPump : public BasePixelPump$/;"	c	class:HDLcd
PixelType	./base/bitmap.hh	/^    typedef BmpPixel32 PixelType;$/;"	t	class:Bitmap
Pixel_Format	./dev/arm/hdlcd.hh	/^        Pixel_Format     = 0x0240,$/;"	e	enum:HDLcd::RegisterOffset
Pl011	./dev/arm/RealView.py	/^class Pl011(Uart):$/;"	c
Pl011	./dev/arm/pl011.cc	/^Pl011::Pl011(const Pl011Params *p)$/;"	f	class:Pl011
Pl011	./dev/arm/pl011.hh	/^class Pl011 : public Uart, public AmbaDevice$/;"	c
Pl050	./dev/arm/RealView.py	/^class Pl050(AmbaIntDevice):$/;"	c
Pl050	./dev/arm/kmi.cc	/^Pl050::Pl050(const Params *p)$/;"	f	class:Pl050
Pl050	./dev/arm/kmi.hh	/^class Pl050 : public AmbaIntDevice, public VncKeyboard, public VncMouse$/;"	c
Pl111	./dev/arm/RealView.py	/^class Pl111(AmbaDmaDevice):$/;"	c
Pl111	./dev/arm/pl111.cc	/^Pl111::Pl111(const Params *p)$/;"	f	class:Pl111
Pl111	./dev/arm/pl111.hh	/^class Pl111: public AmbaDmaDevice$/;"	c
Pl390	./dev/arm/Gic.py	/^class Pl390(BaseGic):$/;"	c
Pl390	./dev/arm/gic_pl390.cc	/^Pl390::Pl390(const Params *p)$/;"	f	class:Pl390
Pl390	./dev/arm/gic_pl390.hh	/^class Pl390 : public BaseGic$/;"	c
Planes	./base/bitmap.hh	/^        uint16_t Planes;$/;"	m	struct:Bitmap::InfoHeaderV1
Platform	./dev/Platform.py	/^class Platform(SimObject):$/;"	c
Platform	./dev/platform.cc	/^Platform::Platform(const Params *p)$/;"	f	class:Platform
Platform	./dev/platform.hh	/^class Platform : public SimObject$/;"	c
Pointer	./arch/x86/decoder_tables.cc	/^        Pointer,$/;"	e	enum:X86ISA::SizeType	file:
PointerEventMessage	./base/vnc/vncinput.hh	/^    struct PointerEventMessage {$/;"	s	class:VncInput
Polarities	./dev/arm/hdlcd.hh	/^        Polarities       = 0x0220,$/;"	e	enum:HDLcd::RegisterOffset
PollEvent	./base/pollevent.cc	/^PollEvent::PollEvent(int _fd, int _events)$/;"	f	class:PollEvent
PollEvent	./base/pollevent.hh	/^class PollEvent : public Serializable$/;"	c
PollQueue	./base/pollevent.cc	/^PollQueue::PollQueue()$/;"	f	class:PollQueue
PollQueue	./base/pollevent.hh	/^class PollQueue$/;"	c
Port	./mem/external_master.hh	/^        Port(const std::string &name_,$/;"	f	class:ExternalMaster::Port
Port	./mem/external_master.hh	/^    class Port : public MasterPort$/;"	c	class:ExternalMaster
Port	./mem/external_slave.hh	/^        Port(const std::string &name_,$/;"	f	class:ExternalSlave::Port
Port	./mem/external_slave.hh	/^    class Port : public SlavePort$/;"	c	class:ExternalSlave
Port	./mem/port.cc	/^Port::Port(const std::string &_name, MemObject& _owner, PortID _id)$/;"	f	class:Port
Port	./mem/port.hh	/^class Port$/;"	c
Port	./python/m5/params.py	/^class Port(object):$/;"	c
PortCache	./mem/xbar.hh	/^    struct PortCache {$/;"	s	class:BaseXBar
PortDesc	./sim/cxx_config.hh	/^        PortDesc(const std::string &name_,$/;"	f	class:CxxConfigDirectoryEntry::PortDesc
PortDesc	./sim/cxx_config.hh	/^    class PortDesc$/;"	c	class:CxxConfigDirectoryEntry
PortID	./base/types.hh	/^typedef int16_t PortID;$/;"	t
PortParamDesc	./python/m5/params.py	/^class PortParamDesc(object):$/;"	c
PortProxy	./mem/port_proxy.hh	/^    PortProxy(MasterPort &port, unsigned int cacheLineSize) :$/;"	f	class:PortProxy
PortProxy	./mem/port_proxy.hh	/^class PortProxy$/;"	c
PortRef	./python/m5/params.py	/^class PortRef(object):$/;"	c
PosixKvmTimer	./cpu/kvm/timer.cc	/^PosixKvmTimer::PosixKvmTimer(int signo, clockid_t clockID,$/;"	f	class:PosixKvmTimer
PosixKvmTimer	./cpu/kvm/timer.hh	/^class PosixKvmTimer : public BaseKvmTimer$/;"	c
PossibleLoadViolation	./cpu/base_dyn_inst.hh	/^        PossibleLoadViolation,$/;"	e	enum:BaseDynInst::Flags
PostIntEvent	./dev/arm/gic_pl390.hh	/^        PostIntEvent( uint32_t c, Platform* p)$/;"	f	class:Pl390::PostIntEvent
PostIntEvent	./dev/arm/gic_pl390.hh	/^    class PostIntEvent : public Event$/;"	c	class:Pl390
PostVIntEvent	./dev/arm/vgic.hh	/^        PostVIntEvent( uint32_t c, Platform* p)$/;"	f	class:VGic::PostVIntEvent
PostVIntEvent	./dev/arm/vgic.hh	/^    class PostVIntEvent : public Event$/;"	c	class:VGic
Power	./base/loader/object_file.hh	/^        Power$/;"	e	enum:ObjectFile::Arch
PowerFault	./arch/power/faults.hh	/^    PowerFault(FaultName name)$/;"	f	class:PowerISA::PowerFault
PowerFault	./arch/power/faults.hh	/^class PowerFault : public FaultBase$/;"	c	namespace:PowerISA
PowerGdbRegCache	./arch/power/remote_gdb.hh	/^    class PowerGdbRegCache : public BaseGdbRegCache$/;"	c	class:PowerISA::RemoteGDB
PowerISA	./arch/power/PowerISA.py	/^class PowerISA(SimObject):$/;"	c
PowerISA	./arch/power/decoder.cc	/^namespace PowerISA$/;"	n	file:
PowerISA	./arch/power/decoder.hh	/^namespace PowerISA$/;"	n
PowerISA	./arch/power/faults.hh	/^namespace PowerISA$/;"	n
PowerISA	./arch/power/insts/branch.hh	/^namespace PowerISA$/;"	n
PowerISA	./arch/power/insts/condition.hh	/^namespace PowerISA$/;"	n
PowerISA	./arch/power/insts/floating.hh	/^namespace PowerISA$/;"	n
PowerISA	./arch/power/insts/integer.hh	/^namespace PowerISA$/;"	n
PowerISA	./arch/power/insts/mem.hh	/^namespace PowerISA$/;"	n
PowerISA	./arch/power/insts/misc.hh	/^namespace PowerISA$/;"	n
PowerISA	./arch/power/insts/static_inst.hh	/^namespace PowerISA$/;"	n
PowerISA	./arch/power/interrupts.hh	/^namespace PowerISA {$/;"	n
PowerISA	./arch/power/isa.cc	/^namespace PowerISA$/;"	n	file:
PowerISA	./arch/power/isa.hh	/^namespace PowerISA$/;"	n
PowerISA	./arch/power/isa_traits.hh	/^namespace PowerISA$/;"	n
PowerISA	./arch/power/kernel_stats.hh	/^namespace PowerISA {$/;"	n
PowerISA	./arch/power/locked_mem.hh	/^namespace PowerISA$/;"	n
PowerISA	./arch/power/microcode_rom.hh	/^namespace PowerISA$/;"	n
PowerISA	./arch/power/miscregs.hh	/^namespace PowerISA$/;"	n
PowerISA	./arch/power/mmapped_ipr.hh	/^namespace PowerISA$/;"	n
PowerISA	./arch/power/pagetable.cc	/^namespace PowerISA$/;"	n	file:
PowerISA	./arch/power/pagetable.hh	/^namespace PowerISA {$/;"	n
PowerISA	./arch/power/pseudo_inst.hh	/^namespace PowerISA {$/;"	n
PowerISA	./arch/power/registers.hh	/^namespace PowerISA {$/;"	n
PowerISA	./arch/power/remote_gdb.hh	/^namespace PowerISA$/;"	n
PowerISA	./arch/power/stacktrace.cc	/^namespace PowerISA {$/;"	n	file:
PowerISA	./arch/power/stacktrace.hh	/^namespace PowerISA$/;"	n
PowerISA	./arch/power/tlb.hh	/^namespace PowerISA {$/;"	n
PowerISA	./arch/power/types.hh	/^namespace PowerISA$/;"	n
PowerISA	./arch/power/utility.cc	/^namespace PowerISA {$/;"	n	file:
PowerISA	./arch/power/utility.hh	/^namespace PowerISA {$/;"	n
PowerISA	./arch/power/vtophys.hh	/^namespace PowerISA {$/;"	n
PowerInterrupts	./arch/power/PowerInterrupts.py	/^class PowerInterrupts(SimObject):$/;"	c
PowerLinux	./arch/power/linux/linux.hh	/^class PowerLinux : public Linux$/;"	c
PowerLinuxProcess	./arch/power/linux/process.cc	/^PowerLinuxProcess::PowerLinuxProcess(LiveProcessParams * params,$/;"	f	class:PowerLinuxProcess
PowerLinuxProcess	./arch/power/linux/process.hh	/^class PowerLinuxProcess : public PowerLiveProcess$/;"	c
PowerLiveProcess	./arch/power/process.cc	/^PowerLiveProcess::PowerLiveProcess(LiveProcessParams *params,$/;"	f	class:PowerLiveProcess
PowerLiveProcess	./arch/power/process.hh	/^class PowerLiveProcess : public LiveProcess$/;"	c
PowerOnReset	./arch/sparc/faults.hh	/^class PowerOnReset : public SparcFault<PowerOnReset>$/;"	c	namespace:SparcISA
PowerState	./mem/dram_ctrl.hh	/^        enum PowerState {$/;"	g	class:DRAMCtrl::Rank
PowerStaticInst	./arch/power/insts/static_inst.hh	/^    PowerStaticInst(const char *mnem, MachInst _machInst, OpClass __opClass)$/;"	f	class:PowerISA::PowerStaticInst
PowerStaticInst	./arch/power/insts/static_inst.hh	/^class PowerStaticInst : public StaticInst$/;"	c	namespace:PowerISA
PowerTLB	./arch/power/PowerTLB.py	/^class PowerTLB(SimObject):$/;"	c
PrdEntry	./dev/storage/ide_disk.hh	/^typedef struct PrdEntry {$/;"	s
PrdEntry_t	./dev/storage/ide_disk.hh	/^} PrdEntry_t;$/;"	t	typeref:struct:PrdEntry
PrdRead	./dev/storage/ide_disk.hh	/^    PrdRead,$/;"	e	enum:Events
PrdTableEntry	./dev/storage/ide_disk.hh	/^class PrdTableEntry {$/;"	c
PredImmOp	./arch/arm/insts/pred_inst.hh	/^    PredImmOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass) :$/;"	f	class:ArmISA::PredImmOp
PredImmOp	./arch/arm/insts/pred_inst.hh	/^class PredImmOp : public PredOp$/;"	c	namespace:ArmISA
PredIntOp	./arch/arm/insts/pred_inst.hh	/^    PredIntOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass) :$/;"	f	class:ArmISA::PredIntOp
PredIntOp	./arch/arm/insts/pred_inst.hh	/^class PredIntOp : public PredOp$/;"	c	namespace:ArmISA
PredMacroOp	./arch/arm/insts/pred_inst.hh	/^    PredMacroOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass) :$/;"	f	class:ArmISA::PredMacroOp
PredMacroOp	./arch/arm/insts/pred_inst.hh	/^class PredMacroOp : public PredOp$/;"	c	namespace:ArmISA
PredMicroop	./arch/arm/insts/pred_inst.hh	/^    PredMicroop(const char *mnem, ExtMachInst _machInst, OpClass __opClass) :$/;"	f	class:ArmISA::PredMicroop
PredMicroop	./arch/arm/insts/pred_inst.hh	/^class PredMicroop : public PredOp$/;"	c	namespace:ArmISA
PredOp	./arch/arm/insts/pred_inst.hh	/^    PredOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass) :$/;"	f	class:ArmISA::PredOp
PredOp	./arch/arm/insts/pred_inst.hh	/^class PredOp : public ArmStaticInst$/;"	c	namespace:ArmISA
PredTaken	./cpu/base_dyn_inst.hh	/^        PredTaken,$/;"	e	enum:BaseDynInst::Flags
Predicate	./cpu/base_dyn_inst.hh	/^        Predicate,$/;"	e	enum:BaseDynInst::Flags
PredictorHistory	./cpu/pred/bpred_unit.hh	/^        PredictorHistory(const InstSeqNum &seq_num, Addr instPC,$/;"	f	struct:BPredUnit::PredictorHistory
PredictorHistory	./cpu/pred/bpred_unit.hh	/^    struct PredictorHistory {$/;"	s	class:BPredUnit
PrefetchAbort	./arch/arm/faults.hh	/^    PrefetchAbort(Addr _addr, uint8_t _source, bool _stage2 = false,$/;"	f	class:ArmISA::PrefetchAbort
PrefetchAbort	./arch/arm/faults.hh	/^class PrefetchAbort : public AbortFault<PrefetchAbort>$/;"	c	namespace:ArmISA
PrefetchEntry	./mem/ruby/structures/Prefetcher.hh	/^        PrefetchEntry()$/;"	f	class:PrefetchEntry
PrefetchEntry	./mem/ruby/structures/Prefetcher.hh	/^class PrefetchEntry$/;"	c
PrefetchTLBMiss	./arch/arm/faults.hh	/^        PrefetchTLBMiss = AddressSizeLL + 4,$/;"	e	enum:ArmISA::ArmFault::FaultSource
PrefetchUncacheable	./arch/arm/faults.hh	/^        PrefetchUncacheable,$/;"	e	enum:ArmISA::ArmFault::FaultSource
Prefetcher	./mem/request.hh	/^        Prefetcher = 1022, \/* For cache lines brought in by prefetcher *\/$/;"	e	enum:ContextSwitchTaskId::TaskId
Prefetcher	./mem/ruby/structures/Prefetcher.cc	/^Prefetcher::Prefetcher(const Params *p)$/;"	f	class:Prefetcher
Prefetcher	./mem/ruby/structures/Prefetcher.hh	/^class Prefetcher : public SimObject$/;"	c
Prefetcher	./mem/ruby/structures/RubyPrefetcher.py	/^class Prefetcher(SimObject):$/;"	c
PrefixOperatorExprAST	./mem/slicc/ast/OperatorExprAST.py	/^class PrefixOperatorExprAST(ExprAST):$/;"	c
PrefixState	./arch/x86/decoder.hh	/^        PrefixState,$/;"	e	enum:X86ISA::Decoder::State
Prefixes	./arch/x86/decoder.hh	/^    static ByteTable Prefixes;$/;"	m	class:X86ISA::Decoder
Prefixes	./arch/x86/decoder_tables.cc	/^    const Decoder::ByteTable Decoder::Prefixes =$/;"	m	class:X86ISA::Decoder	file:
Prefixes	./arch/x86/types.hh	/^    enum Prefixes {$/;"	g	namespace:X86ISA
Prepare_Data_Dma	./dev/storage/ide_disk.hh	/^    Prepare_Data_Dma,$/;"	e	enum:DevState
Prepare_Data_In	./dev/storage/ide_disk.hh	/^    Prepare_Data_In,$/;"	e	enum:DevState
Prepare_Data_Out	./dev/storage/ide_disk.hh	/^    Prepare_Data_Out,$/;"	e	enum:DevState
PreviousGlobalsOffset	./arch/sparc/isa.hh	/^        PreviousGlobalsOffset = NextWindowOffset + NumWindowedRegs,$/;"	e	enum:SparcISA::ISA::InstIntRegOffsets
PreviousWindowOffset	./arch/sparc/isa.hh	/^        PreviousWindowOffset = PreviousGlobalsOffset + NumGlobalRegs,$/;"	e	enum:SparcISA::ISA::InstIntRegOffsets
Primary	./arch/sparc/tlb.hh	/^        Primary = 0,$/;"	e	enum:SparcISA::TLB::ContextType
PrimaryTiming	./dev/storage/ide_ctrl.cc	/^    PrimaryTiming = 0x40,$/;"	e	enum:ConfRegOffset	file:
Print	./base/cprintf.cc	/^Print::Print(std::ostream &stream, const char *format)$/;"	f	class:cp::Print
Print	./base/cprintf.cc	/^Print::Print(std::ostream &stream, const std::string &format)$/;"	f	class:cp::Print
Print	./base/cprintf.hh	/^struct Print$/;"	s	namespace:cp
PrintReq	./mem/packet.hh	/^        PrintReq,       \/\/ Print state matching address$/;"	e	enum:MemCmd::Command
PrintReqState	./mem/packet.cc	/^Packet::PrintReqState::PrintReqState(ostream &_os, int _verbosity)$/;"	f	class:Packet::PrintReqState
PrintReqState	./mem/packet.hh	/^    class PrintReqState : public SenderState$/;"	c	class:Packet
PrintThreadInfo	./arch/alpha/linux/system.hh	/^        PrintThreadInfo(PCEventQueue *q, const std::string &desc, Addr addr)$/;"	f	struct:LinuxAlphaSystem::PrintThreadInfo
PrintThreadInfo	./arch/alpha/linux/system.hh	/^    struct PrintThreadInfo : public PCEvent$/;"	s	class:LinuxAlphaSystem
PrintThreadInfo	./arch/mips/linux/system.hh	/^        PrintThreadInfo(PCEventQueue *q, const std::string &desc, Addr addr)$/;"	f	class:LinuxMipsSystem::PrintThreadInfo
PrintThreadInfo	./arch/mips/linux/system.hh	/^    class PrintThreadInfo : public PCEvent$/;"	c	class:LinuxMipsSystem
Printable	./base/printable.hh	/^    Printable() {}$/;"	f	class:Printable
Printable	./base/printable.hh	/^class Printable$/;"	c
Printf	./kern/tru64/printf.cc	/^Printf(Arguments args)$/;"	f	namespace:tru64
PrintfEvent	./kern/tru64/tru64_events.hh	/^    PrintfEvent(PCEventQueue *q, const std::string &desc, Addr addr)$/;"	f	class:PrintfEvent
PrintfEvent	./kern/tru64/tru64_events.hh	/^class PrintfEvent : public PCEvent$/;"	c
Printk	./kern/linux/printk.cc	/^Printk(stringstream &out, Arguments args)$/;"	f
Priority	./dev/arm/vgic.hh	/^    Bitfield<27,23> Priority;$/;"	m	class:VGic
Priority	./sim/eventq.hh	/^    typedef int8_t Priority;$/;"	t	class:EventBase
PrivViolation	./arch/sparc/tlb.hh	/^        PrivViolation = 0x1,$/;"	e	enum:SparcISA::TLB::FaultTypes
PrivateFlags	./mem/request.hh	/^    typedef ::Flags<PrivateFlagsType> PrivateFlags;$/;"	t	class:Request
PrivateFlagsType	./mem/request.hh	/^    typedef uint8_t PrivateFlagsType;$/;"	t	class:Request
PrivilegeLevel	./arch/sparc/faults.hh	/^    enum PrivilegeLevel$/;"	g	class:SparcISA::SparcFaultBase
Privileged	./arch/sparc/faults.hh	/^        P, Privileged = P,$/;"	e	enum:SparcISA::SparcFaultBase::PrivilegeLevel
PrivilegedAction	./arch/sparc/faults.hh	/^class PrivilegedAction : public SparcFault<PrivilegedAction> {};$/;"	c	namespace:SparcISA
PrivilegedOpcode	./arch/sparc/faults.hh	/^class PrivilegedOpcode : public SparcFault<PrivilegedOpcode> {};$/;"	c	namespace:SparcISA
ProbeListener	./arch/arm/pmu.hh	/^        ProbeListener(PMU &_pmu, CounterId _id,$/;"	f	class:ArmISA::PMU::ProbeListener
ProbeListener	./arch/arm/pmu.hh	/^    class ProbeListener : public ProbeListenerArgBase<uint64_t>$/;"	c	class:ArmISA::PMU
ProbeListener	./sim/probe/probe.cc	/^ProbeListener::ProbeListener(ProbeManager *_manager, const std::string &_name)$/;"	f	class:ProbeListener
ProbeListener	./sim/probe/probe.hh	/^class ProbeListener$/;"	c
ProbeListenerArg	./sim/probe/probe.hh	/^    ProbeListenerArg(T *obj, const std::string &name, void (T::* func)(const Arg &))$/;"	f	class:ProbeListenerArg
ProbeListenerArg	./sim/probe/probe.hh	/^class ProbeListenerArg : public ProbeListenerArgBase<Arg>$/;"	c
ProbeListenerArgBase	./sim/probe/probe.hh	/^    ProbeListenerArgBase(ProbeManager *pm, const std::string &name)$/;"	f	class:ProbeListenerArgBase
ProbeListenerArgBase	./sim/probe/probe.hh	/^class ProbeListenerArgBase : public ProbeListener$/;"	c
ProbeListenerObject	./sim/probe/Probe.py	/^class ProbeListenerObject(SimObject):$/;"	c
ProbeListenerObject	./sim/probe/probe.cc	/^ProbeListenerObject::ProbeListenerObject(const ProbeListenerObjectParams *params)$/;"	f	class:ProbeListenerObject
ProbeListenerObject	./sim/probe/probe.hh	/^class ProbeListenerObject : public SimObject$/;"	c
ProbeListenerUPtr	./arch/arm/pmu.hh	/^    typedef std::unique_ptr<ProbeListener> ProbeListenerUPtr;$/;"	t	class:ArmISA::PMU
ProbeManager	./sim/probe/probe.hh	/^    ProbeManager(SimObject *obj)$/;"	f	class:ProbeManager
ProbeManager	./sim/probe/probe.hh	/^class ProbeManager$/;"	c
ProbePoint	./sim/probe/probe.cc	/^ProbePoint::ProbePoint(ProbeManager *manager, const std::string& _name)$/;"	f	class:ProbePoint
ProbePoint	./sim/probe/probe.hh	/^class ProbePoint$/;"	c
ProbePointArg	./sim/probe/probe.hh	/^    ProbePointArg(ProbeManager *manager, std::string name)$/;"	f	class:ProbePointArg
ProbePointArg	./sim/probe/probe.hh	/^class ProbePointArg : public ProbePoint$/;"	c
ProbePoints	./sim/probe/mem.hh	/^namespace ProbePoints {$/;"	n
ProbePoints	./sim/probe/pmu.hh	/^namespace ProbePoints {$/;"	n
ProbePoints	./sim/probe/probe.hh	/^namespace ProbePoints {$/;"	n
ProcId0	./dev/arm/rv_ctrl.hh	/^        ProcId0    = 0x84,$/;"	e	enum:RealViewCtrl::__anon19
ProcId1	./dev/arm/rv_ctrl.hh	/^        ProcId1    = 0x88,$/;"	e	enum:RealViewCtrl::__anon19
ProcedureValueReg	./arch/alpha/registers.hh	/^const RegIndex ProcedureValueReg = 27;$/;"	m	namespace:AlphaISA
Process	./sim/Process.py	/^class Process(SimObject):$/;"	c
Process	./sim/process.cc	/^Process::Process(ProcessParams * params)$/;"	f	class:Process
Process	./sim/process.hh	/^class Process : public SimObject$/;"	c
ProcessInfo	./arch/alpha/stacktrace.cc	/^ProcessInfo::ProcessInfo(ThreadContext *_tc)$/;"	f	class:AlphaISA::ProcessInfo
ProcessInfo	./arch/alpha/stacktrace.hh	/^class ProcessInfo$/;"	c	namespace:AlphaISA
ProcessInfo	./arch/arm/stacktrace.cc	/^    ProcessInfo::ProcessInfo(ThreadContext *_tc)$/;"	f	class:ArmISA::ProcessInfo
ProcessInfo	./arch/arm/stacktrace.hh	/^class ProcessInfo$/;"	c	namespace:ArmISA
ProcessInfo	./arch/mips/stacktrace.cc	/^ProcessInfo::ProcessInfo(ThreadContext *_tc) : tc(_tc)$/;"	f	class:ProcessInfo
ProcessInfo	./arch/mips/stacktrace.hh	/^class ProcessInfo$/;"	c	namespace:MipsISA
ProcessInfo	./arch/power/stacktrace.cc	/^ProcessInfo::ProcessInfo(ThreadContext *_tc)$/;"	f	class:PowerISA::ProcessInfo
ProcessInfo	./arch/power/stacktrace.hh	/^class ProcessInfo$/;"	c	namespace:PowerISA
ProcessInfo	./arch/x86/stacktrace.cc	/^    ProcessInfo::ProcessInfo(ThreadContext *_tc)$/;"	f	class:X86ISA::ProcessInfo
ProcessInfo	./arch/x86/stacktrace.hh	/^    class ProcessInfo$/;"	c	namespace:X86ISA
Processor	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::Processor::Processor(Params * p) : BaseConfigEntry(p, 0),$/;"	f	class:X86ISA::IntelMP::Processor
Processor	./arch/x86/bios/intelmp.hh	/^class Processor : public BaseConfigEntry$/;"	c	namespace:X86ISA::IntelMP
ProfileEvent	./cpu/base.cc	/^BaseCPU::ProfileEvent::ProfileEvent(BaseCPU *_cpu, Tick _interval)$/;"	f	class:BaseCPU::ProfileEvent
ProfileEvent	./cpu/base.hh	/^    class ProfileEvent : public Event$/;"	c	class:BaseCPU
ProfileNode	./cpu/profile.cc	/^ProfileNode::ProfileNode()$/;"	f	class:ProfileNode
ProfileNode	./cpu/profile.hh	/^class ProfileNode$/;"	c
Profiler	./mem/ruby/profiler/Profiler.cc	/^Profiler::Profiler(const RubySystemParams *p, RubySystem *rs)$/;"	f	class:Profiler
Profiler	./mem/ruby/profiler/Profiler.hh	/^class Profiler$/;"	c
ProgIF	./dev/net/Ethernet.py	/^    ProgIF = 0x00$/;"	v	class:IGbE
ProgIF	./dev/net/Ethernet.py	/^    ProgIF = 0x00$/;"	v	class:NSGigE
ProgIF	./dev/net/Ethernet.py	/^    ProgIF = 0x00$/;"	v	class:Sinic
ProgIF	./dev/pci/CopyEngine.py	/^    ProgIF = 0x00$/;"	v	class:CopyEngine
ProgIF	./dev/pci/PciDevice.py	/^    ProgIF = Param.UInt8(0, "Programming Interface")$/;"	v	class:PciDevice
ProgIF	./dev/storage/Ide.py	/^    ProgIF = 0x85$/;"	v	class:IdeController
ProgressEvent	./python/m5/event.py	/^class ProgressEvent(Event):$/;"	c
Progress_Event_Pri	./sim/eventq.hh	/^    static const Priority Progress_Event_Pri =          95;$/;"	m	class:EventBase
ProtectedMode	./arch/x86/types.hh	/^        ProtectedMode,$/;"	e	enum:X86ISA::X86SubMode
ProtoInputStream	./proto/protoio.cc	/^ProtoInputStream::ProtoInputStream(const string& filename) :$/;"	f	class:ProtoInputStream
ProtoInputStream	./proto/protoio.hh	/^class ProtoInputStream : public ProtoStream$/;"	c
ProtoMessage	./cpu/inst_pb_trace.hh	/^namespace ProtoMessage {$/;"	n
ProtoOutputStream	./proto/protoio.cc	/^ProtoOutputStream::ProtoOutputStream(const string& filename) :$/;"	f	class:ProtoOutputStream
ProtoOutputStream	./proto/protoio.hh	/^class ProtoOutputStream : public ProtoStream$/;"	c
ProtoStream	./proto/protoio.hh	/^    ProtoStream() {}$/;"	f	class:ProtoStream
ProtoStream	./proto/protoio.hh	/^class ProtoStream$/;"	c
Proxy	./base/statistics.hh	/^    typedef DistProxy<Derived> Proxy;$/;"	t	class:Stats::VectorDistBase
Proxy	./base/statistics.hh	/^    typedef ScalarProxy<Derived> Proxy;$/;"	t	class:Stats::VectorBase
Proxy	./base/statistics.hh	/^    typedef VectorProxy<Derived> Proxy;$/;"	t	class:Stats::Vector2dBase
ProxyFactory	./python/m5/proxy.py	/^class ProxyFactory(object):$/;"	c
ProxyInfo	./base/statistics.hh	/^class ProxyInfo : public ScalarInfo$/;"	c	namespace:Stats
ProxyThreadContext	./cpu/thread_context.hh	/^    ProxyThreadContext(TC *actual_tc)$/;"	f	class:ProxyThreadContext
ProxyThreadContext	./cpu/thread_context.hh	/^class ProxyThreadContext : public ThreadContext$/;"	c
Ps0	./arch/sparc/tlb.hh	/^        Ps0,$/;"	e	enum:SparcISA::TLB::TsbPageSize
Ps1	./arch/sparc/tlb.hh	/^        Ps1$/;"	e	enum:SparcISA::TLB::TsbPageSize
Ps2	./dev/ps2.cc	/^namespace Ps2 {$/;"	n	file:
Ps2	./dev/ps2.hh	/^namespace Ps2 {$/;"	n
Ps2Reset	./dev/ps2.hh	/^    Ps2Reset        = 0xff,$/;"	e	enum:Ps2::__anon4
PseudoInst	./sim/initparam_keys.hh	/^namespace PseudoInst {$/;"	n
PseudoInst	./sim/pseudo_inst.cc	/^namespace PseudoInst {$/;"	n	file:
PseudoInst	./sim/pseudo_inst.hh	/^namespace PseudoInst {$/;"	n
PseudoLRUPolicy	./mem/ruby/structures/PseudoLRUPolicy.cc	/^PseudoLRUPolicy::PseudoLRUPolicy(const Params * p)$/;"	f	class:PseudoLRUPolicy
PseudoLRUPolicy	./mem/ruby/structures/PseudoLRUPolicy.hh	/^class PseudoLRUPolicy : public AbstractReplacementPolicy$/;"	c
PseudoLRUReplacementPolicy	./mem/ruby/structures/PseudoLRUReplacementPolicy.py	/^class PseudoLRUReplacementPolicy(ReplacementPolicy):$/;"	c
PstateMask	./arch/sparc/isa.cc	/^static const PSTATE PstateMask = buildPstateMask();$/;"	m	namespace:SparcISA	file:
PteAddr	./arch/alpha/utility.hh	/^inline Addr PteAddr(Addr a) { return (a & PteMask) << PteShift; }$/;"	f	namespace:AlphaISA
PteAddr	./arch/arm/vtophys.hh	/^    inline Addr PteAddr(Addr a) { return (a & PteMask) << PteShift; }$/;"	f	namespace:ArmISA
PteAddr	./arch/power/vtophys.hh	/^PteAddr(Addr a)$/;"	f	namespace:PowerISA
PteMask	./arch/alpha/isa_traits.hh	/^const Addr PteMask = NPtePage - 1;$/;"	m	namespace:AlphaISA
PteMask	./arch/arm/isa_traits.hh	/^    const Addr PteMask = NPtePage - 1;$/;"	m	namespace:ArmISA
PteMask	./arch/mips/isa_traits.hh	/^const Addr PteMask = NPtePage - 1;$/;"	m	namespace:MipsISA
PteMask	./arch/power/isa_traits.hh	/^const Addr PteMask = NPtePage - 1;$/;"	m	namespace:PowerISA
PteShift	./arch/alpha/isa_traits.hh	/^const Addr PteShift = 3;$/;"	m	namespace:AlphaISA
PteShift	./arch/arm/isa_traits.hh	/^    const Addr PteShift = 3;$/;"	m	namespace:ArmISA
PteShift	./arch/mips/isa_traits.hh	/^const Addr PteShift = 3;$/;"	m	namespace:MipsISA
PteShift	./arch/power/isa_traits.hh	/^const Addr PteShift = 3;$/;"	m	namespace:PowerISA
Ptr	./unittest/refcnttest.cc	/^typedef RefCountingPtr<TestRC> Ptr;$/;"	t	namespace:__anon3	file:
PublicRead	./sim/eventq.hh	/^    static const FlagsType PublicRead    = 0x003f; \/\/ public readable flags$/;"	m	class:EventBase
PublicWrite	./sim/eventq.hh	/^    static const FlagsType PublicWrite   = 0x001d; \/\/ public writable flags$/;"	m	class:EventBase
PulseOutputBitBase	./dev/x86/i8042.hh	/^        PulseOutputBitBase = 0xF0,$/;"	e	enum:X86ISA::I8042::Command
PyCC	./sim/init.cc	69;"	d	file:
PyObject	./sim/init.hh	/^typedef _object PyObject;$/;"	t
PythonEvent	./python/swig/pyevent.cc	/^PythonEvent::PythonEvent(PyObject *code, Priority priority)$/;"	f	class:PythonEvent
PythonEvent	./python/swig/pyevent.hh	/^class PythonEvent : public Event$/;"	c
PythonSimObjectResolver	./python/swig/pyobject.hh	/^class PythonSimObjectResolver : public SimObjectResolver$/;"	c
QW	./arch/x86/decoder_tables.cc	/^        QW = QWordImm,$/;"	e	enum:X86ISA::SizeType	file:
QWordImm	./arch/x86/decoder_tables.cc	/^        QWordImm,$/;"	e	enum:X86ISA::SizeType	file:
Queue	./cpu/minor/buffers.hh	/^    Queue(const std::string &name, const std::string &data_name,$/;"	f	class:Minor::Queue
Queue	./cpu/minor/buffers.hh	/^class Queue : public Named, public Reservable$/;"	c	namespace:Minor
QueueID	./dev/virtio/base.hh	/^    typedef uint16_t QueueID;$/;"	t	class:VirtIODeviceBase
QueuedInst	./cpu/minor/func_unit.hh	/^    QueuedInst(MinorDynInstPtr inst_ = MinorDynInst::bubble()) :$/;"	f	class:Minor::QueuedInst
QueuedInst	./cpu/minor/func_unit.hh	/^class QueuedInst$/;"	c	namespace:Minor
QueuedMasterPort	./mem/qport.hh	/^    QueuedMasterPort(const std::string& name, MemObject* owner,$/;"	f	class:QueuedMasterPort
QueuedMasterPort	./mem/qport.hh	/^class QueuedMasterPort : public MasterPort$/;"	c
QueuedPrefetcher	./mem/cache/prefetch/Prefetcher.py	/^class QueuedPrefetcher(BasePrefetcher):$/;"	c
QueuedPrefetcher	./mem/cache/prefetch/queued.cc	/^QueuedPrefetcher::QueuedPrefetcher(const QueuedPrefetcherParams *p)$/;"	f	class:QueuedPrefetcher
QueuedPrefetcher	./mem/cache/prefetch/queued.hh	/^class QueuedPrefetcher : public BasePrefetcher$/;"	c
QueuedSlavePort	./mem/qport.hh	/^    QueuedSlavePort(const std::string& name, MemObject* owner,$/;"	f	class:QueuedSlavePort
QueuedSlavePort	./mem/qport.hh	/^class QueuedSlavePort : public SlavePort$/;"	c
QuiescePending	./cpu/o3/fetch.hh	/^        QuiescePending,$/;"	e	enum:DefaultFetch::ThreadStatus
R	./arch/x86/regs/int.hh	/^        Bitfield<63,0> R;$/;"	m	namespace:X86ISA
RADV	./dev/net/i8254xGBe_defs.hh	/^    struct RADV : public Reg<uint32_t> { \/\/ 0x282C RADV Register$/;"	s	struct:iGbReg::Regs
RAS	./cpu/pred/bpred_unit.hh	/^    std::vector<ReturnAddrStack> RAS;$/;"	m	class:BPredUnit
RASIncorrect	./cpu/pred/bpred_unit.hh	/^    Stats::Scalar RASIncorrect;$/;"	m	class:BPredUnit
RASIndex	./cpu/pred/bpred_unit.hh	/^        unsigned RASIndex;$/;"	m	struct:BPredUnit::PredictorHistory
RASSize	./cpu/pred/BranchPredictor.py	/^    RASSize = Param.Unsigned(16, "RAS size")$/;"	v	class:BranchPredictor
RASTarget	./cpu/pred/bpred_unit.hh	/^        TheISA::PCState RASTarget;$/;"	m	struct:BPredUnit::PredictorHistory
RAW_IPR_ALT_MODE	./arch/alpha/ipr.hh	/^    RAW_IPR_ALT_MODE = 0x20c,       \/\/ alternate mode$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_ASTER	./arch/alpha/ipr.hh	/^    RAW_IPR_ASTER = 0x10a,          \/\/ asynchronous system trap enable$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_ASTRR	./arch/alpha/ipr.hh	/^    RAW_IPR_ASTRR = 0x109,          \/\/ asynchronous system trap request$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_CC	./arch/alpha/ipr.hh	/^    RAW_IPR_CC = 0x20d,             \/\/ cycle counter$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_CC_CTL	./arch/alpha/ipr.hh	/^    RAW_IPR_CC_CTL = 0x20e,         \/\/ cycle counter control$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_DC_FLUSH	./arch/alpha/ipr.hh	/^    RAW_IPR_DC_FLUSH = 0x210,$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_DC_MODE	./arch/alpha/ipr.hh	/^    RAW_IPR_DC_MODE = 0x216,        \/\/ Dcache mode$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_DC_PERR_STAT	./arch/alpha/ipr.hh	/^    RAW_IPR_DC_PERR_STAT = 0x212,   \/\/ Dcache parity error status$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_DC_TEST_CTL	./arch/alpha/ipr.hh	/^    RAW_IPR_DC_TEST_CTL = 0x213,    \/\/ Dcache test tag control$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_DC_TEST_TAG	./arch/alpha/ipr.hh	/^    RAW_IPR_DC_TEST_TAG = 0x214,    \/\/ Dcache test tag$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_DC_TEST_TAG_TEMP	./arch/alpha/ipr.hh	/^    RAW_IPR_DC_TEST_TAG_TEMP = 0x215, \/\/ Dcache test tag temporary$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_DTB_ASN	./arch/alpha/ipr.hh	/^    RAW_IPR_DTB_ASN = 0x200,        \/\/ DTLB address space number$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_DTB_CM	./arch/alpha/ipr.hh	/^    RAW_IPR_DTB_CM = 0x201,         \/\/ DTLB current mode$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_DTB_IA	./arch/alpha/ipr.hh	/^    RAW_IPR_DTB_IA = 0x20a,         \/\/ DTLB invalidate all$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_DTB_IAP	./arch/alpha/ipr.hh	/^    RAW_IPR_DTB_IAP = 0x209,        \/\/ DTLB invalidate all process$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_DTB_IS	./arch/alpha/ipr.hh	/^    RAW_IPR_DTB_IS = 0x20b,         \/\/ DTLB invalidate single$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_DTB_PTE	./arch/alpha/ipr.hh	/^    RAW_IPR_DTB_PTE = 0x203,        \/\/ DTLB page table entry$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_DTB_PTE_TEMP	./arch/alpha/ipr.hh	/^    RAW_IPR_DTB_PTE_TEMP = 0x204,   \/\/ DTLB page table entry temporary$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_DTB_TAG	./arch/alpha/ipr.hh	/^    RAW_IPR_DTB_TAG = 0x202,        \/\/ DTLB tag$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_EXC_ADDR	./arch/alpha/ipr.hh	/^    RAW_IPR_EXC_ADDR = 0x10b,       \/\/ exception address$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_EXC_MASK	./arch/alpha/ipr.hh	/^    RAW_IPR_EXC_MASK = 0x10d,       \/\/ exception mask$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_EXC_SUM	./arch/alpha/ipr.hh	/^    RAW_IPR_EXC_SUM = 0x10c,        \/\/ exception summary$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_HWINT_CLR	./arch/alpha/ipr.hh	/^    RAW_IPR_HWINT_CLR = 0x115,      \/\/ H\/W interrupt clear$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_ICM	./arch/alpha/ipr.hh	/^    RAW_IPR_ICM = 0x10f,            \/\/ instruction current mode$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_ICSR	./arch/alpha/ipr.hh	/^    RAW_IPR_ICSR = 0x118,           \/\/ instruction control and status$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_IC_FLUSH	./arch/alpha/ipr.hh	/^    RAW_IPR_IC_FLUSH = 0x119,       \/\/ instruction cache flush control$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_IC_PERR_STAT	./arch/alpha/ipr.hh	/^    RAW_IPR_IC_PERR_STAT = 0x11a,   \/\/ inst cache parity error status$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_IFAULT_VA_FORM	./arch/alpha/ipr.hh	/^    RAW_IPR_IFAULT_VA_FORM = 0x112, \/\/ formatted faulting virtual addr$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_INTID	./arch/alpha/ipr.hh	/^    RAW_IPR_INTID = 0x111,          \/\/ interrupt ID$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_IPLR	./arch/alpha/ipr.hh	/^    RAW_IPR_IPLR = 0x110,           \/\/ interrupt priority level$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_ISR	./arch/alpha/ipr.hh	/^    RAW_IPR_ISR = 0x100,            \/\/ interrupt summary$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_ITB_ASN	./arch/alpha/ipr.hh	/^    RAW_IPR_ITB_ASN = 0x103,        \/\/ ITLB address space$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_ITB_IA	./arch/alpha/ipr.hh	/^    RAW_IPR_ITB_IA = 0x105,         \/\/ ITLB invalidate all$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_ITB_IAP	./arch/alpha/ipr.hh	/^    RAW_IPR_ITB_IAP = 0x106,        \/\/ ITLB invalidate all process$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_ITB_IS	./arch/alpha/ipr.hh	/^    RAW_IPR_ITB_IS = 0x107,         \/\/ ITLB invalidate select$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_ITB_PTE	./arch/alpha/ipr.hh	/^    RAW_IPR_ITB_PTE = 0x102,        \/\/ ITLB page table entry$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_ITB_PTE_TEMP	./arch/alpha/ipr.hh	/^    RAW_IPR_ITB_PTE_TEMP = 0x104,   \/\/ ITLB page table entry temp$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_ITB_TAG	./arch/alpha/ipr.hh	/^    RAW_IPR_ITB_TAG = 0x101,        \/\/ ITLB tag$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_IVPTBR	./arch/alpha/ipr.hh	/^    RAW_IPR_IVPTBR = 0x113,         \/\/ virtual page table base$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_MAF_MODE	./arch/alpha/ipr.hh	/^    RAW_IPR_MAF_MODE = 0x217,       \/\/ miss address file mode$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_MCSR	./arch/alpha/ipr.hh	/^    RAW_IPR_MCSR = 0x20f,           \/\/ MTU control$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_MM_STAT	./arch/alpha/ipr.hh	/^    RAW_IPR_MM_STAT = 0x205,        \/\/ data MMU fault status$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_MVPTBR	./arch/alpha/ipr.hh	/^    RAW_IPR_MVPTBR = 0x208,         \/\/ MTU virtual page table base$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PAL_BASE	./arch/alpha/ipr.hh	/^    RAW_IPR_PAL_BASE = 0x10e,       \/\/ PAL base address$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp0	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp0 = 0x140,       \/\/ local scratch$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp1	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp1 = 0x141,       \/\/ local scratch$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp10	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp10 = 0x14a,      \/\/ ??$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp11	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp11 = 0x14b,      \/\/ entInt$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp12	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp12 = 0x14c,      \/\/ entArith$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp13	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp13 = 0x14d,      \/\/ reserved for platform specific PAL$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp14	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp14 = 0x14e,      \/\/ reserved for platform specific PAL$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp15	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp15 = 0x14f,      \/\/ reserved for platform specific PAL$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp16	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp16 = 0x150,      \/\/ scratch \/ whami<7:0> \/ mces<4:0>$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp17	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp17 = 0x151,      \/\/ sysval$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp18	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp18 = 0x152,      \/\/ usp$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp19	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp19 = 0x153,      \/\/ ksp$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp2	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp2 = 0x142,       \/\/ entUna$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp20	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp20 = 0x154,      \/\/ PTBR$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp21	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp21 = 0x155,      \/\/ entMM$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp22	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp22 = 0x156,      \/\/ kgp$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp23	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp23 = 0x157,      \/\/ PCBB$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp3	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp3 = 0x143,       \/\/ CPU specific impure area pointer$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp4	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp4 = 0x144,       \/\/ memory management temp$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp5	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp5 = 0x145,       \/\/ memory management temp$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp6	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp6 = 0x146,       \/\/ memory management temp$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp7	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp7 = 0x147,       \/\/ entIF$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp8	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp8 = 0x148,       \/\/ intmask$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PALtemp9	./arch/alpha/ipr.hh	/^    RAW_IPR_PALtemp9 = 0x149,       \/\/ entSys$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_PMCTR	./arch/alpha/ipr.hh	/^    RAW_IPR_PMCTR = 0x11c,          \/\/ performance counter$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_SIRR	./arch/alpha/ipr.hh	/^    RAW_IPR_SIRR = 0x108,           \/\/ software interrupt request$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_SL_RCV	./arch/alpha/ipr.hh	/^    RAW_IPR_SL_RCV = 0x117,         \/\/ serial line receive$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_SL_XMIT	./arch/alpha/ipr.hh	/^    RAW_IPR_SL_XMIT = 0x116,        \/\/ serial line transmit$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_VA	./arch/alpha/ipr.hh	/^    RAW_IPR_VA = 0x206,             \/\/ fault virtual address$/;"	e	enum:AlphaISA::md_ipr_names
RAW_IPR_VA_FORM	./arch/alpha/ipr.hh	/^    RAW_IPR_VA_FORM = 0x207,        \/\/ formatted virtual address$/;"	e	enum:AlphaISA::md_ipr_names
RCTL	./dev/net/i8254xGBe_defs.hh	/^    struct RCTL : public Reg<uint32_t> { \/\/ 0x0100 RCTL Register$/;"	s	struct:iGbReg::Regs
RCV_ADDRESS_TABLE_SIZE	./dev/net/i8254xGBe_defs.hh	/^const uint8_t RCV_ADDRESS_TABLE_SIZE    = 24;$/;"	m	namespace:iGbReg
RC_stage	./mem/ruby/network/garnet/fixed-pipeline/RoutingUnit_d.cc	/^RoutingUnit_d::RC_stage(flit_d *t_flit, InputUnit_d *in_unit, int invc)$/;"	f	class:RoutingUnit_d
RDBA	./dev/net/i8254xGBe_defs.hh	/^    struct RDBA : public Reg<uint64_t> { \/\/ 0x2800 RDBA Register$/;"	s	struct:iGbReg::Regs
RDH	./dev/net/i8254xGBe_defs.hh	/^    struct RDH : public Reg<uint32_t> { \/\/ 0x2810 RDH Register$/;"	s	struct:iGbReg::Regs
RDLEN	./dev/net/i8254xGBe_defs.hh	/^    struct RDLEN : public Reg<uint32_t> { \/\/ 0x2808 RDLEN Register$/;"	s	struct:iGbReg::Regs
RDT	./dev/net/i8254xGBe_defs.hh	/^    struct RDT : public Reg<uint32_t> { \/\/ 0x2818 RDT Register$/;"	s	struct:iGbReg::Regs
RDTR	./dev/net/i8254xGBe_defs.hh	/^    struct RDTR : public Reg<uint32_t> { \/\/ 0x2820 RDTR Register$/;"	s	struct:iGbReg::Regs
RE	./arch/x86/decoder_tables.cc	/^    const uint8_t RE = Rep;$/;"	m	namespace:X86ISA	file:
READ	./mem/dram_ctrl.hh	/^        READ = 0,$/;"	e	enum:DRAMCtrl::BusState
READ_TO_WRITE	./mem/dram_ctrl.hh	/^        READ_TO_WRITE,$/;"	e	enum:DRAMCtrl::BusState
RECEIVE_ERROR	./dev/terminal.cc	286;"	d	file:
RECEIVE_NONE	./dev/terminal.cc	285;"	d	file:
RECEIVE_SUCCESS	./dev/terminal.cc	284;"	d	file:
RECEIVING_ADDR	./dev/i2c/bus.hh	/^        RECEIVING_ADDR,$/;"	e	enum:I2CBus::I2CState
RECEIVING_DATA	./dev/i2c/bus.hh	/^        RECEIVING_DATA,$/;"	e	enum:I2CBus::I2CState
REDStateException	./arch/sparc/faults.hh	/^class REDStateException : public SparcFault<REDStateException> {};$/;"	c	namespace:SparcISA
REF_DRAIN	./mem/dram_ctrl.hh	/^            REF_DRAIN,$/;"	e	enum:DRAMCtrl::Rank::RefreshState
REF_IDLE	./mem/dram_ctrl.hh	/^            REF_IDLE = 0,$/;"	e	enum:DRAMCtrl::Rank::RefreshState
REF_PRE	./mem/dram_ctrl.hh	/^            REF_PRE,$/;"	e	enum:DRAMCtrl::Rank::RefreshState
REF_RUN	./mem/dram_ctrl.hh	/^            REF_RUN$/;"	e	enum:DRAMCtrl::Rank::RefreshState
REG_AIFS	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_AIFS     = 0x00458;$/;"	m	namespace:iGbReg
REG_CORE32	./arch/arm/kvm/arm_cpu.cc	119;"	d	file:
REG_CORE_IDX	./arch/arm/kvm/arm_cpu.cc	87;"	d	file:
REG_CP	./arch/arm/kvm/arm_cpu.cc	90;"	d	file:
REG_CP32	./arch/arm/kvm/arm_cpu.cc	105;"	d	file:
REG_CP64	./arch/arm/kvm/arm_cpu.cc	113;"	d	file:
REG_CRCERRS	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_CRCERRS  = 0x04000;$/;"	m	namespace:iGbReg
REG_CRM	./arch/arm/kvm/arm_cpu.cc	99;"	d	file:
REG_CRN	./arch/arm/kvm/arm_cpu.cc	93;"	d	file:
REG_CTRL	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_CTRL     = 0x00000;$/;"	m	namespace:iGbReg
REG_CTRL_EXT	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_CTRL_EXT = 0x00018;$/;"	m	namespace:iGbReg
REG_DEMUX32	./arch/arm/kvm/arm_cpu.cc	132;"	d	file:
REG_EECD	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_EECD     = 0x00010;$/;"	m	namespace:iGbReg
REG_EERD	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_EERD     = 0x00014;$/;"	m	namespace:iGbReg
REG_EICR	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_EICR     = 0x01580;$/;"	m	namespace:iGbReg
REG_FCAH	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_FCAH     = 0x0002C;$/;"	m	namespace:iGbReg
REG_FCAL	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_FCAL     = 0x00028;$/;"	m	namespace:iGbReg
REG_FCRTH	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_FCRTH    = 0x02168;$/;"	m	namespace:iGbReg
REG_FCRTL	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_FCRTL    = 0x02160;$/;"	m	namespace:iGbReg
REG_FCT	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_FCT      = 0x00030;$/;"	m	namespace:iGbReg
REG_FCTTV	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_FCTTV    = 0x00170;$/;"	m	namespace:iGbReg
REG_FWSM	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_FWSM     = 0x05B54;$/;"	m	namespace:iGbReg
REG_IAM	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_IAM      = 0x000E0;$/;"	m	namespace:iGbReg
REG_ICR	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_ICR      = 0x000C0;$/;"	m	namespace:iGbReg
REG_ICS	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_ICS      = 0x000C8;$/;"	m	namespace:iGbReg
REG_IMC	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_IMC      = 0x000D8;$/;"	m	namespace:iGbReg
REG_IMS	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_IMS      = 0x000D0;$/;"	m	namespace:iGbReg
REG_IS_32BIT	./arch/arm/kvm/arm_cpu.cc	63;"	d	file:
REG_IS_64BIT	./arch/arm/kvm/arm_cpu.cc	66;"	d	file:
REG_IS_ARM	./arch/arm/kvm/arm_cpu.cc	60;"	d	file:
REG_IS_CORE	./arch/arm/kvm/arm_cpu.cc	72;"	d	file:
REG_IS_CP	./arch/arm/kvm/arm_cpu.cc	69;"	d	file:
REG_IS_DEMUX	./arch/arm/kvm/arm_cpu.cc	81;"	d	file:
REG_IS_VFP	./arch/arm/kvm/arm_cpu.cc	74;"	d	file:
REG_IS_VFP_CTRL	./arch/arm/kvm/arm_cpu.cc	79;"	d	file:
REG_IS_VFP_REG	./arch/arm/kvm/arm_cpu.cc	78;"	d	file:
REG_ITR	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_ITR      = 0x000C4;$/;"	m	namespace:iGbReg
REG_IVAR0	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_IVAR0    = 0x01700;$/;"	m	namespace:iGbReg
REG_LEDCTL	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_LEDCTL   = 0x00e00;$/;"	m	namespace:iGbReg
REG_MANC	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_MANC     = 0x05820;$/;"	m	namespace:iGbReg
REG_MDIC	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_MDIC     = 0x00020;$/;"	m	namespace:iGbReg
REG_MTA	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_MTA      = 0x05200;$/;"	m	namespace:iGbReg
REG_OFFSET	./dev/mips/access.h	40;"	d
REG_OPC1	./arch/arm/kvm/arm_cpu.cc	96;"	d	file:
REG_OPC2	./arch/arm/kvm/arm_cpu.cc	102;"	d	file:
REG_PBA	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_PBA      = 0x01000;$/;"	m	namespace:iGbReg
REG_RADV	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_RADV     = 0x0282C;$/;"	m	namespace:iGbReg
REG_RAH	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_RAH      = 0x05404;$/;"	m	namespace:iGbReg
REG_RAL	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_RAL      = 0x05400;$/;"	m	namespace:iGbReg
REG_RCTL	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_RCTL     = 0x00100;$/;"	m	namespace:iGbReg
REG_RDBAH	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_RDBAH    = 0x02804;$/;"	m	namespace:iGbReg
REG_RDBAL	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_RDBAL    = 0x02800;$/;"	m	namespace:iGbReg
REG_RDH	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_RDH      = 0x02810;$/;"	m	namespace:iGbReg
REG_RDLEN	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_RDLEN    = 0x02808;$/;"	m	namespace:iGbReg
REG_RDT	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_RDT      = 0x02818;$/;"	m	namespace:iGbReg
REG_RDTR	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_RDTR     = 0x02820;$/;"	m	namespace:iGbReg
REG_RFCTL	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_RFCTL    = 0x05008;$/;"	m	namespace:iGbReg
REG_RLPML	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_RLPML    = 0x05004;$/;"	m	namespace:iGbReg
REG_RXCSUM	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_RXCSUM   = 0x05000;$/;"	m	namespace:iGbReg
REG_RXDCTL	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_RXDCTL   = 0x02828;$/;"	m	namespace:iGbReg
REG_SRRCTL	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_SRRCTL   = 0x0280C;$/;"	m	namespace:iGbReg
REG_STATUS	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_STATUS   = 0x00008;$/;"	m	namespace:iGbReg
REG_SWFWSYNC	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_SWFWSYNC = 0x05B5C;$/;"	m	namespace:iGbReg
REG_SWSM	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_SWSM     = 0x05B50;$/;"	m	namespace:iGbReg
REG_TADV	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_TADV     = 0x0382C;$/;"	m	namespace:iGbReg
REG_TCTL	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_TCTL     = 0x00400;$/;"	m	namespace:iGbReg
REG_TDBAH	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_TDBAH    = 0x03804;$/;"	m	namespace:iGbReg
REG_TDBAL	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_TDBAL    = 0x03800;$/;"	m	namespace:iGbReg
REG_TDH	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_TDH      = 0x03810;$/;"	m	namespace:iGbReg
REG_TDLEN	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_TDLEN    = 0x03808;$/;"	m	namespace:iGbReg
REG_TDT	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_TDT      = 0x03818;$/;"	m	namespace:iGbReg
REG_TDWBAH	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_TDWBAH   = 0x0383C;$/;"	m	namespace:iGbReg
REG_TDWBAL	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_TDWBAL   = 0x03838;$/;"	m	namespace:iGbReg
REG_TIDV	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_TIDV     = 0x03820;$/;"	m	namespace:iGbReg
REG_TIPG	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_TIPG     = 0x00410;$/;"	m	namespace:iGbReg
REG_TXDCA_CTL	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_TXDCA_CTL = 0x03814;$/;"	m	namespace:iGbReg
REG_TXDCTL	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_TXDCTL   = 0x03828;$/;"	m	namespace:iGbReg
REG_VET	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_VET      = 0x00038;$/;"	m	namespace:iGbReg
REG_VFP32	./arch/arm/kvm/arm_cpu.cc	124;"	d	file:
REG_VFP64	./arch/arm/kvm/arm_cpu.cc	128;"	d	file:
REG_VFP_REG	./arch/arm/kvm/arm_cpu.cc	75;"	d	file:
REG_VFTA	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_VFTA     = 0x05600;$/;"	m	namespace:iGbReg
REG_WUC	./dev/net/i8254xGBe_defs.hh	/^const uint32_t REG_WUC      = 0x05800;$/;"	m	namespace:iGbReg
REQUESTED	./arch/arm/table_walker.hh	/^    static const unsigned REQUESTED = 0;$/;"	m	class:ArmISA::TableWalker
RESERVED	./dev/net/ns_gige_reg.h	/^    RESERVED =          0xfc$/;"	e	enum:DeviceRegisterAddress
RETRY	./mem/xbar.hh	/^        enum State { IDLE, BUSY, RETRY };$/;"	e	enum:BaseXBar::Layer::State
RFBit	./arch/x86/regs/misc.hh	/^        RFBit = 1 << 16,$/;"	e	enum:X86ISA::RFLAGBit
RFCR	./dev/net/ns_gige_reg.h	/^    RFCR =              0x48,$/;"	e	enum:DeviceRegisterAddress
RFCR_AAB	./dev/net/ns_gige_reg.h	/^     RFCR_AAB =         0x40000000,$/;"	e	enum:ReceiveFilterMatchControlRegister
RFCR_AAM	./dev/net/ns_gige_reg.h	/^     RFCR_AAM =         0x20000000,$/;"	e	enum:ReceiveFilterMatchControlRegister
RFCR_AARP	./dev/net/ns_gige_reg.h	/^     RFCR_AARP =        0x00400000,$/;"	e	enum:ReceiveFilterMatchControlRegister
RFCR_AAU	./dev/net/ns_gige_reg.h	/^     RFCR_AAU =         0x10000000,$/;"	e	enum:ReceiveFilterMatchControlRegister
RFCR_APAT	./dev/net/ns_gige_reg.h	/^     RFCR_APAT =        0x07800000,$/;"	e	enum:ReceiveFilterMatchControlRegister
RFCR_APAT0	./dev/net/ns_gige_reg.h	/^     RFCR_APAT0 =       0x00800000,$/;"	e	enum:ReceiveFilterMatchControlRegister
RFCR_APAT1	./dev/net/ns_gige_reg.h	/^     RFCR_APAT1 =       0x01000000,$/;"	e	enum:ReceiveFilterMatchControlRegister
RFCR_APAT2	./dev/net/ns_gige_reg.h	/^     RFCR_APAT2 =       0x02000000,$/;"	e	enum:ReceiveFilterMatchControlRegister
RFCR_APAT3	./dev/net/ns_gige_reg.h	/^     RFCR_APAT3 =       0x04000000,$/;"	e	enum:ReceiveFilterMatchControlRegister
RFCR_APM	./dev/net/ns_gige_reg.h	/^     RFCR_APM =         0x08000000,$/;"	e	enum:ReceiveFilterMatchControlRegister
RFCR_MHEN	./dev/net/ns_gige_reg.h	/^     RFCR_MHEN =        0x00200000,$/;"	e	enum:ReceiveFilterMatchControlRegister
RFCR_RFADDR	./dev/net/ns_gige_reg.h	/^     RFCR_RFADDR =      0x000003ff$/;"	e	enum:ReceiveFilterMatchControlRegister
RFCR_RFEN	./dev/net/ns_gige_reg.h	/^     RFCR_RFEN =        0x80000000,$/;"	e	enum:ReceiveFilterMatchControlRegister
RFCR_UHEN	./dev/net/ns_gige_reg.h	/^     RFCR_UHEN =        0x00100000,$/;"	e	enum:ReceiveFilterMatchControlRegister
RFCR_ULM	./dev/net/ns_gige_reg.h	/^     RFCR_ULM =         0x00080000,$/;"	e	enum:ReceiveFilterMatchControlRegister
RFCTL	./dev/net/i8254xGBe_defs.hh	/^    struct RFCTL : public Reg<uint32_t> { \/\/ 0x5008 RFCTL Register$/;"	s	struct:iGbReg::Regs
RFDR	./dev/net/ns_gige_reg.h	/^    RFDR =              0x4c,$/;"	e	enum:DeviceRegisterAddress
RFDR_BMASK	./dev/net/ns_gige_reg.h	/^     RFDR_BMASK =       0x00030000,$/;"	e	enum:ReceiveFilterMatchDataRegister
RFDR_RFDATA0	./dev/net/ns_gige_reg.h	/^     RFDR_RFDATA0 =     0x000000ff,$/;"	e	enum:ReceiveFilterMatchDataRegister
RFDR_RFDATA1	./dev/net/ns_gige_reg.h	/^     RFDR_RFDATA1 =     0x0000ff00$/;"	e	enum:ReceiveFilterMatchDataRegister
RFDT	./base/loader/coff_sym.h	/^typedef coff_long RFDT, *pRFDT;$/;"	t
RFLAGBit	./arch/x86/regs/misc.hh	/^    enum RFLAGBit {$/;"	g	namespace:X86ISA
RN	./arch/x86/decoder_tables.cc	/^    const uint8_t RN = Repne;$/;"	m	namespace:X86ISA	file:
RNDXR	./base/loader/coff_sym.h	/^} RNDXR, *pRNDXR;$/;"	t	typeref:struct:__anon113
RND_DOWN	./arch/arm/types.hh	/^        RND_DOWN,$/;"	e	enum:ArmISA::RoundMode
RND_DOWN	./arch/mips/types.hh	/^    RND_DOWN,$/;"	e	enum:MipsISA::RoundMode
RND_NEAREST	./arch/arm/types.hh	/^        RND_NEAREST$/;"	e	enum:ArmISA::RoundMode
RND_NEAREST	./arch/mips/types.hh	/^    RND_NEAREST$/;"	e	enum:MipsISA::RoundMode
RND_UP	./arch/arm/types.hh	/^        RND_UP,$/;"	e	enum:ArmISA::RoundMode
RND_UP	./arch/mips/types.hh	/^    RND_UP,$/;"	e	enum:MipsISA::RoundMode
RND_ZERO	./arch/arm/types.hh	/^        RND_ZERO,$/;"	e	enum:ArmISA::RoundMode
RND_ZERO	./arch/mips/types.hh	/^    RND_ZERO,$/;"	e	enum:MipsISA::RoundMode
ROB	./cpu/o3/commit.hh	/^    typedef typename CPUPol::ROB ROB;$/;"	t	class:DefaultCommit
ROB	./cpu/o3/cpu_policy.hh	/^    typedef ::ROB<Impl> ROB;$/;"	t	struct:SimpleCPUPolicy
ROB	./cpu/o3/rename.hh	/^        ROB,$/;"	e	enum:DefaultRename::FullSource
ROB	./cpu/o3/rob.hh	/^class ROB$/;"	c
ROB	./cpu/o3/rob_impl.hh	/^ROB<Impl>::ROB(O3CPU *_cpu, DerivO3CPUParams *params)$/;"	f	class:ROB
ROBPolicy	./cpu/o3/rob.hh	/^    enum ROBPolicy{$/;"	g	class:ROB
ROBSquashing	./cpu/o3/commit.hh	/^        ROBSquashing,$/;"	e	enum:DefaultCommit::ThreadStatus
ROBSquashing	./cpu/o3/rob.hh	/^        ROBSquashing$/;"	e	enum:ROB::Status
ROR	./arch/arm/types.hh	/^        ROR$/;"	e	enum:ArmISA::ArmShiftType
ROUND	./arch/mips/dsp.hh	/^enum { NOROUND, ROUND };$/;"	e	enum:MipsISA::__anon91
RSDP	./arch/x86/bios/acpi.cc	/^X86ISA::ACPI::RSDP::RSDP(Params *p) : SimObject(p), oemID(p->oem_id),$/;"	f	class:X86ISA::ACPI::RSDP
RSDP	./arch/x86/bios/acpi.hh	/^class RSDP : public SimObject$/;"	c	namespace:X86ISA::ACPI
RSDT	./arch/x86/bios/acpi.cc	/^X86ISA::ACPI::RSDT::RSDT(Params *p) :$/;"	f	class:X86ISA::ACPI::RSDT
RSDT	./arch/x86/bios/acpi.hh	/^class RSDT : public SysDescTable$/;"	c	namespace:X86ISA::ACPI
RSRPD	./dev/net/i8254xGBe_defs.hh	/^    struct RSRPD : public Reg<uint32_t> { \/\/ 0x2C00 RSRPD Register$/;"	s	struct:iGbReg::Regs
RTC	./dev/alpha/tsunami_io.cc	/^TsunamiIO::RTC::RTC(const string &n, const TsunamiIOParams *p)$/;"	f	class:TsunamiIO::RTC
RTC	./dev/alpha/tsunami_io.hh	/^    class RTC : public MC146818$/;"	c	class:TsunamiIO
RTC	./dev/mips/malta_io.cc	/^MaltaIO::RTC::RTC(const string &name, const MaltaIOParams *p)$/;"	f	class:MaltaIO::RTC
RTC	./dev/mips/malta_io.hh	/^    class RTC : public MC146818$/;"	c	class:MaltaIO
RTCA_DV_1048576HZ	./dev/rtcreg.h	/^static const int RTCA_DV_1048576HZ = 0x1;$/;"	v
RTCA_DV_32768HZ	./dev/rtcreg.h	/^static const int RTCA_DV_32768HZ = 0x2;$/;"	v
RTCA_DV_4194304HZ	./dev/rtcreg.h	/^static const int RTCA_DV_4194304HZ = 0x0;$/;"	v
RTCA_DV_DISABLED0	./dev/rtcreg.h	/^static const int RTCA_DV_DISABLED0 = 0x6;$/;"	v
RTCA_DV_DISABLED1	./dev/rtcreg.h	/^static const int RTCA_DV_DISABLED1 = 0x7;$/;"	v
RTCA_RS_1024HZ	./dev/rtcreg.h	/^static const int RTCA_RS_1024HZ = 0x6;$/;"	v
RTCA_RS_DISABLED	./dev/rtcreg.h	/^static const int RTCA_RS_DISABLED = 0x0;$/;"	v
RTCEvent	./dev/mc146818.cc	/^MC146818::RTCEvent::RTCEvent(MC146818 * _parent, Tick i)$/;"	f	class:MC146818::RTCEvent
RTCEvent	./dev/mc146818.hh	/^    struct RTCEvent : public Event$/;"	s	class:MC146818
RTCTickEvent	./dev/mc146818.hh	/^        RTCTickEvent(MC146818 * _parent) :$/;"	f	struct:MC146818::RTCTickEvent
RTCTickEvent	./dev/mc146818.hh	/^    struct RTCTickEvent : public Event$/;"	s	class:MC146818
RTC_DOM	./dev/rtcreg.h	/^static const int RTC_DOM = 0x07;$/;"	v
RTC_DOW	./dev/rtcreg.h	/^static const int RTC_DOW = 0x06;$/;"	v
RTC_HR	./dev/rtcreg.h	/^static const int RTC_HR = 0x04;$/;"	v
RTC_HR_ALRM	./dev/rtcreg.h	/^static const int RTC_HR_ALRM = 0x05;$/;"	v
RTC_MIN	./dev/rtcreg.h	/^static const int RTC_MIN = 0x02;$/;"	v
RTC_MIN_ALRM	./dev/rtcreg.h	/^static const int RTC_MIN_ALRM = 0x03;$/;"	v
RTC_MON	./dev/rtcreg.h	/^static const int RTC_MON = 0x08;$/;"	v
RTC_SEC	./dev/rtcreg.h	/^static const int RTC_SEC = 0x00;$/;"	v
RTC_SEC_ALRM	./dev/rtcreg.h	/^static const int RTC_SEC_ALRM = 0x01;$/;"	v
RTC_STAT_REGA	./dev/rtcreg.h	/^static const int RTC_STAT_REGA = 0x0A;$/;"	v
RTC_STAT_REGB	./dev/rtcreg.h	/^static const int RTC_STAT_REGB = 0x0B;$/;"	v
RTC_STAT_REGC	./dev/rtcreg.h	/^static const int RTC_STAT_REGC = 0x0C;$/;"	v
RTC_STAT_REGD	./dev/rtcreg.h	/^static const int RTC_STAT_REGD = 0x0D;$/;"	v
RTC_YEAR	./dev/rtcreg.h	/^static const int RTC_YEAR = 0x09;$/;"	v
RX	./arch/x86/decoder_tables.cc	/^    const uint8_t RX = RexPrefix;$/;"	m	namespace:X86ISA	file:
RXCSUM	./dev/net/i8254xGBe_defs.hh	/^    struct RXCSUM : public Reg<uint32_t> { \/\/ 0x5000 RXCSUM Register$/;"	s	struct:iGbReg::Regs
RXDCTL	./dev/net/i8254xGBe_defs.hh	/^    struct RXDCTL : public Reg<uint32_t> { \/\/ 0x2828 RXDCTL Register$/;"	s	struct:iGbReg::Regs
RXDEE_CE	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDEE_CE        = 0x010;$/;"	m	namespace:iGbReg
RXDEE_HBO	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDEE_HBO       = 0x008;$/;"	m	namespace:iGbReg
RXDEE_IPE	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDEE_IPE       = 0x800;$/;"	m	namespace:iGbReg
RXDEE_LE	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDEE_LE        = 0x020;$/;"	m	namespace:iGbReg
RXDEE_OSE	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDEE_OSE       = 0x100;$/;"	m	namespace:iGbReg
RXDEE_PE	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDEE_PE        = 0x080;$/;"	m	namespace:iGbReg
RXDEE_TCPE	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDEE_TCPE      = 0x400;$/;"	m	namespace:iGbReg
RXDEE_USE	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDEE_USE       = 0x200;$/;"	m	namespace:iGbReg
RXDE_CE	./dev/net/i8254xGBe_defs.hh	/^const uint8_t RXDE_CE          = 0x01;$/;"	m	namespace:iGbReg
RXDE_IPE	./dev/net/i8254xGBe_defs.hh	/^const uint8_t RXDE_IPE         = 0x40;$/;"	m	namespace:iGbReg
RXDE_RXE	./dev/net/i8254xGBe_defs.hh	/^const uint8_t RXDE_RXE         = 0x80;$/;"	m	namespace:iGbReg
RXDE_SE	./dev/net/i8254xGBe_defs.hh	/^const uint8_t RXDE_SE          = 0x02;$/;"	m	namespace:iGbReg
RXDE_SEQ	./dev/net/i8254xGBe_defs.hh	/^const uint8_t RXDE_SEQ         = 0x04;$/;"	m	namespace:iGbReg
RXDE_TCPE	./dev/net/i8254xGBe_defs.hh	/^const uint8_t RXDE_TCPE        = 0x20;$/;"	m	namespace:iGbReg
RXDP	./dev/net/ns_gige_reg.h	/^    RXDP =              0x30,$/;"	e	enum:DeviceRegisterAddress
RXDP_HI	./dev/net/ns_gige_reg.h	/^    RXDP_HI =           0x34,$/;"	e	enum:DeviceRegisterAddress
RXDP_IPV4	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDP_IPV4       = 0x001;$/;"	m	namespace:iGbReg
RXDP_IPV4E	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDP_IPV4E      = 0x002;$/;"	m	namespace:iGbReg
RXDP_IPV6	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDP_IPV6       = 0x004;$/;"	m	namespace:iGbReg
RXDP_IPV6E	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDP_IPV6E      = 0x008;$/;"	m	namespace:iGbReg
RXDP_NFS	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDP_NFS        = 0x080;$/;"	m	namespace:iGbReg
RXDP_SCTP	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDP_SCTP       = 0x040;$/;"	m	namespace:iGbReg
RXDP_TCP	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDP_TCP        = 0x010;$/;"	m	namespace:iGbReg
RXDP_UDP	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDP_UDP        = 0x020;$/;"	m	namespace:iGbReg
RXDS_CRCV	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDS_CRCV        = 0x100;$/;"	m	namespace:iGbReg
RXDS_DD	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDS_DD          = 0x001;$/;"	m	namespace:iGbReg
RXDS_DYNINT	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDS_DYNINT      = 0x800;$/;"	m	namespace:iGbReg
RXDS_EOP	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDS_EOP         = 0x002;$/;"	m	namespace:iGbReg
RXDS_IPCS	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDS_IPCS        = 0x040;$/;"	m	namespace:iGbReg
RXDS_IXSM	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDS_IXSM        = 0x004;$/;"	m	namespace:iGbReg
RXDS_PIF	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDS_PIF         = 0x080;$/;"	m	namespace:iGbReg
RXDS_TCPCS	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDS_TCPCS       = 0x020;$/;"	m	namespace:iGbReg
RXDS_UDPCS	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDS_UDPCS       = 0x010;$/;"	m	namespace:iGbReg
RXDS_UDPV	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDS_UDPV        = 0x400;$/;"	m	namespace:iGbReg
RXDS_VP	./dev/net/i8254xGBe_defs.hh	/^const uint16_t RXDS_VP          = 0x008;$/;"	m	namespace:iGbReg
RXDT_ADV_ONEBUF	./dev/net/i8254xGBe_defs.hh	/^const uint8_t RXDT_ADV_ONEBUF  = 0x01;$/;"	m	namespace:iGbReg
RXDT_ADV_SPLIT_A	./dev/net/i8254xGBe_defs.hh	/^const uint8_t RXDT_ADV_SPLIT_A = 0x05;$/;"	m	namespace:iGbReg
RXDT_LEGACY	./dev/net/i8254xGBe_defs.hh	/^const uint8_t RXDT_LEGACY      = 0x00;$/;"	m	namespace:iGbReg
RX_CFG	./dev/net/ns_gige_reg.h	/^    RX_CFG =            0x38,$/;"	e	enum:DeviceRegisterAddress
RX_CFG_AEP	./dev/net/ns_gige_reg.h	/^     RX_CFG_AEP =       0x80000000,$/;"	e	enum:ReceiveConfigurationRegister
RX_CFG_AIRL	./dev/net/ns_gige_reg.h	/^     RX_CFG_AIRL =      0x04000000,$/;"	e	enum:ReceiveConfigurationRegister
RX_CFG_ALP	./dev/net/ns_gige_reg.h	/^     RX_CFG_ALP =       0x08000000,$/;"	e	enum:ReceiveConfigurationRegister
RX_CFG_ARP	./dev/net/ns_gige_reg.h	/^     RX_CFG_ARP =       0x40000000,$/;"	e	enum:ReceiveConfigurationRegister
RX_CFG_DRTH	./dev/net/ns_gige_reg.h	/^     RX_CFG_DRTH =      0x0000003e,$/;"	e	enum:ReceiveConfigurationRegister
RX_CFG_DRTH0	./dev/net/ns_gige_reg.h	/^     RX_CFG_DRTH0 =     0x00000002$/;"	e	enum:ReceiveConfigurationRegister
RX_CFG_MXDMA	./dev/net/ns_gige_reg.h	/^     RX_CFG_MXDMA =     0x00700000,$/;"	e	enum:ReceiveConfigurationRegister
RX_CFG_MXDMA512	./dev/net/ns_gige_reg.h	/^     RX_CFG_MXDMA512 =  0x00700000,$/;"	e	enum:ReceiveConfigurationRegister
RX_CFG_RX_FD	./dev/net/ns_gige_reg.h	/^     RX_CFG_RX_FD =     0x10000000,$/;"	e	enum:ReceiveConfigurationRegister
RX_CFG_STRIPCRC	./dev/net/ns_gige_reg.h	/^     RX_CFG_STRIPCRC =  0x20000000,$/;"	e	enum:ReceiveConfigurationRegister
RX_INT	./dev/uart.hh	/^const int RX_INT = 0x1;$/;"	v
Ra	./arch/alpha/ev5.hh	/^inline int Ra(MachInst inst) { return inst >> 21 & 0x1f; }$/;"	f	namespace:AlphaISA
RamSize	./dev/x86/i8042.cc	/^const uint8_t RamSize = 32;$/;"	v
Random	./base/random.cc	/^Random::Random()$/;"	f	class:Random
Random	./base/random.cc	/^Random::Random(uint32_t s)$/;"	f	class:Random
Random	./base/random.hh	/^class Random : public Serializable$/;"	c
RandomGen	./cpu/testers/traffic_gen/generators.hh	/^    RandomGen(const std::string& _name, MasterID master_id, Tick _duration,$/;"	f	class:RandomGen
RandomGen	./cpu/testers/traffic_gen/generators.hh	/^class RandomGen : public BaseGen$/;"	c
RandomRepl	./mem/cache/tags/Tags.py	/^class RandomRepl(BaseSetAssoc):$/;"	c
RandomRepl	./mem/cache/tags/random_repl.cc	/^RandomRepl::RandomRepl(const Params *p)$/;"	f	class:RandomRepl
RandomRepl	./mem/cache/tags/random_repl.hh	/^class RandomRepl : public BaseSetAssoc$/;"	c
RangeAddrMapper	./mem/AddrMapper.py	/^class RangeAddrMapper(AddrMapper):$/;"	c
RangeAddrMapper	./mem/addr_mapper.cc	/^RangeAddrMapper::RangeAddrMapper(const RangeAddrMapperParams* p) :$/;"	f	class:RangeAddrMapper
RangeAddrMapper	./mem/addr_mapper.hh	/^class RangeAddrMapper : public AddrMapper$/;"	c
RangeEx	./base/addr_range.hh	/^RangeEx(Addr start, Addr end)$/;"	f
RangeIn	./base/addr_range.hh	/^RangeIn(Addr start, Addr end)$/;"	f
RangeMap	./arch/sparc/tlb_map.hh	/^    typedef std::map<TlbRange, TlbEntry*> RangeMap;$/;"	t	class:SparcISA::TlbMap
RangeMap	./base/addr_range_map.hh	/^    typedef std::map<AddrRange, V> RangeMap;$/;"	t	class:AddrRangeMap
RangeSize	./base/addr_range.hh	/^RangeSize(Addr start, Addr size)$/;"	f
Rank	./mem/dram_ctrl.cc	/^DRAMCtrl::Rank::Rank(DRAMCtrl& _memory, const DRAMCtrlParams* _p)$/;"	f	class:DRAMCtrl::Rank
Rank	./mem/dram_ctrl.hh	/^    class Rank : public EventManager$/;"	c	class:DRAMCtrl
RateGen	./dev/intel_8254_timer.hh	/^        RateGen,$/;"	e	enum:Intel8254Timer::ModeVal
RawDiskImage	./dev/storage/DiskImage.py	/^class RawDiskImage(DiskImage):$/;"	c
RawDiskImage	./dev/storage/disk_image.cc	/^RawDiskImage::RawDiskImage(const Params* p)$/;"	f	class:RawDiskImage
RawDiskImage	./dev/storage/disk_image.hh	/^class RawDiskImage : public DiskImage$/;"	c
RawISR	./dev/arm/rtc_pl031.hh	/^        RawISR     = 0x14,$/;"	e	enum:PL031::__anon24
RawISR	./dev/arm/timer_sp804.hh	/^            RawISR     = 0x10,$/;"	e	enum:Sp804::Timer::__anon21
RawObject	./base/loader/raw_object.cc	/^RawObject::RawObject(const std::string &_filename, size_t _len,$/;"	f	class:RawObject
RawObject	./base/loader/raw_object.hh	/^class RawObject: public ObjectFile$/;"	c
RdWrPort	./cpu/o3/FuncUnitConfig.py	/^class RdWrPort(FUDesc):$/;"	c
ReExec	./sim/faults.hh	/^    ReExec() {}$/;"	f	class:ReExec
ReExec	./sim/faults.hh	/^class ReExec : public FaultBase$/;"	c
Read	./arch/generic/tlb.hh	/^    enum Mode { Read, Write, Execute };$/;"	e	enum:BaseTLB::Mode
ReadBackCommand	./dev/intel_8254_timer.hh	/^        ReadBackCommand$/;"	e	enum:Intel8254Timer::SelectVal
ReadCleanReq	./mem/packet.hh	/^        ReadCleanReq,$/;"	e	enum:MemCmd::Command
ReadControllerRamBase	./dev/x86/i8042.hh	/^        ReadControllerRamBase = 0x20,$/;"	e	enum:X86ISA::I8042::Command
ReadData	./dev/x86/i8042.hh	/^        ReadData = 0xEB,$/;"	e	enum:X86ISA::PS2Mouse::Command
ReadExReq	./mem/packet.hh	/^        ReadExReq,$/;"	e	enum:MemCmd::Command
ReadExResp	./mem/packet.hh	/^        ReadExResp,$/;"	e	enum:MemCmd::Command
ReadID	./dev/x86/i8042.hh	/^        ReadID = 0xF2,$/;"	e	enum:X86ISA::PS2Keyboard::Command
ReadID	./dev/x86/i8042.hh	/^        ReadID = 0xF2,$/;"	e	enum:X86ISA::PS2Mouse::Command
ReadId	./dev/ps2.hh	/^    ReadId          = 0xf2,$/;"	e	enum:Ps2::__anon4
ReadInputPort	./dev/x86/i8042.hh	/^        ReadInputPort = 0xC0,$/;"	e	enum:X86ISA::I8042::Command
ReadOutputPort	./dev/x86/i8042.hh	/^        ReadOutputPort = 0xD0,$/;"	e	enum:X86ISA::I8042::Command
ReadPort	./cpu/o3/FuncUnitConfig.py	/^class ReadPort(FUDesc):$/;"	c
ReadReq	./mem/packet.hh	/^        ReadReq,$/;"	e	enum:MemCmd::Command
ReadResp	./mem/packet.hh	/^        ReadResp,$/;"	e	enum:MemCmd::Command
ReadRespWithInvalidate	./mem/packet.hh	/^        ReadRespWithInvalidate,$/;"	e	enum:MemCmd::Command
ReadSharedReq	./mem/packet.hh	/^        ReadSharedReq,$/;"	e	enum:MemCmd::Command
ReadTestInputs	./dev/x86/i8042.hh	/^        ReadTestInputs = 0xE0,$/;"	e	enum:X86ISA::I8042::Command
ReadWait	./dev/storage/ide_disk.hh	/^    ReadWait,$/;"	e	enum:Events
ReadWriteVal	./dev/intel_8254_timer.hh	/^    enum ReadWriteVal {$/;"	g	class:Intel8254Timer
Ready	./arch/x86/pagetable_walker.hh	/^                Ready,$/;"	e	enum:X86ISA::Walker::WalkerState::State
ReadyInstQueue	./cpu/o3/inst_queue.hh	/^    ReadyInstQueue;$/;"	t	class:InstructionQueue
ReadyNode	./cpu/trace/trace_cpu.hh	/^        struct ReadyNode$/;"	s	class:TraceCPU::ElasticDataGen
RealMode	./arch/x86/types.hh	/^        RealMode$/;"	e	enum:X86ISA::X86SubMode
RealView	./dev/arm/RealView.py	/^class RealView(Platform):$/;"	c
RealView	./dev/arm/realview.cc	/^RealView::RealView(const Params *p)$/;"	f	class:RealView
RealView	./dev/arm/realview.hh	/^class RealView : public Platform$/;"	c
RealViewCtrl	./dev/arm/RealView.py	/^class RealViewCtrl(BasicPioDevice):$/;"	c
RealViewCtrl	./dev/arm/rv_ctrl.cc	/^RealViewCtrl::RealViewCtrl(Params *p)$/;"	f	class:RealViewCtrl
RealViewCtrl	./dev/arm/rv_ctrl.hh	/^class RealViewCtrl : public BasicPioDevice$/;"	c
RealViewEB	./dev/arm/RealView.py	/^class RealViewEB(RealView):$/;"	c
RealViewOsc	./dev/arm/RealView.py	/^class RealViewOsc(ClockDomain):$/;"	c
RealViewOsc	./dev/arm/rv_ctrl.cc	/^RealViewOsc::RealViewOsc(RealViewOscParams *p)$/;"	f	class:RealViewOsc
RealViewOsc	./dev/arm/rv_ctrl.hh	/^class RealViewOsc$/;"	c
RealViewPBX	./dev/arm/RealView.py	/^class RealViewPBX(RealView):$/;"	c
Reason	./cpu/minor/pipe_data.hh	/^    enum Reason$/;"	g	class:Minor::BranchData
ReceiveConfigurationRegister	./dev/net/ns_gige_reg.h	/^enum ReceiveConfigurationRegister {$/;"	g
ReceiveFilterMatchControlRegister	./dev/net/ns_gige_reg.h	/^enum ReceiveFilterMatchControlRegister {$/;"	g
ReceiveFilterMatchDataRegister	./dev/net/ns_gige_reg.h	/^enum ReceiveFilterMatchDataRegister {$/;"	g
Record	./cpu/o3/probe/elastic_trace.hh	/^    typedef ProtoMessage::InstDepRecord Record;$/;"	t	class:ElasticTrace
Record	./cpu/trace/trace_cpu.hh	/^        typedef ProtoMessage::InstDepRecord Record;$/;"	t	class:TraceCPU::ElasticDataGen
RecordResult	./cpu/base_dyn_inst.hh	/^        RecordResult,$/;"	e	enum:BaseDynInst::Flags
RecordType	./cpu/o3/probe/elastic_trace.hh	/^    typedef ProtoMessage::InstDepRecord::RecordType RecordType;$/;"	t	class:ElasticTrace
RecordType	./cpu/trace/trace_cpu.hh	/^        typedef ProtoMessage::InstDepRecord::RecordType RecordType;$/;"	t	class:TraceCPU::ElasticDataGen
RecoverInst	./cpu/base_dyn_inst.hh	/^        RecoverInst,             \/\/\/ Is a recover instruction$/;"	e	enum:BaseDynInst::Status
RecvScheduler	./dev/net/dist_iface.hh	/^        RecvScheduler(EventManager *em) :$/;"	f	class:DistIface::RecvScheduler
RecvScheduler	./dev/net/dist_iface.hh	/^    class RecvScheduler : public Serializable$/;"	c	class:DistIface
Red_Select	./dev/arm/hdlcd.hh	/^        Red_Select       = 0x0244,$/;"	e	enum:HDLcd::RegisterOffset
RefCounted	./base/refcnt.hh	/^    RefCounted() : count(0) {}$/;"	f	class:RefCounted
RefCounted	./base/refcnt.hh	/^class RefCounted$/;"	c
RefCountingPtr	./base/refcnt.hh	/^    RefCountingPtr() : data(0) {}$/;"	f	class:RefCountingPtr
RefCountingPtr	./base/refcnt.hh	/^    RefCountingPtr(T *data) { copy(data); }$/;"	f	class:RefCountingPtr
RefCountingPtr	./base/refcnt.hh	/^    RefCountingPtr(const RefCountingPtr &r) { copy(r.data); }$/;"	f	class:RefCountingPtr
RefCountingPtr	./base/refcnt.hh	/^class RefCountingPtr$/;"	c
RefreshState	./mem/dram_ctrl.hh	/^        enum RefreshState {$/;"	g	class:DRAMCtrl::Rank
Reg	./dev/net/i8254xGBe_defs.hh	/^        Reg() { _data = 0; }$/;"	f	struct:iGbReg::Regs::Reg
Reg	./dev/net/i8254xGBe_defs.hh	/^    struct Reg {$/;"	s	struct:iGbReg::Regs
Reg	./dev/pci/copy_engine_defs.hh	/^    Reg() { _data = 0; }$/;"	f	struct:CopyEngineReg::Reg
Reg	./dev/pci/copy_engine_defs.hh	/^struct Reg {$/;"	s	namespace:CopyEngineReg
RegClass	./cpu/reg_class.hh	/^enum RegClass {$/;"	g
RegClassStrings	./cpu/reg_class.cc	/^const char *RegClassStrings[] = {$/;"	v
RegContextParam	./arch/arm/types.hh	/^    typedef int RegContextParam;$/;"	t	namespace:ArmISA
RegContextVal	./arch/arm/types.hh	/^    typedef int RegContextVal;$/;"	t	namespace:ArmISA
RegDepArray	./cpu/trace/trace_cpu.hh	/^            typedef std::array<NodeSeqNum, TheISA::MaxInstSrcRegs> RegDepArray;$/;"	t	class:TraceCPU::ElasticDataGen::GraphNode
RegImmImmOp	./arch/arm/insts/misc.hh	/^    RegImmImmOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:RegImmImmOp
RegImmImmOp	./arch/arm/insts/misc.hh	/^class RegImmImmOp : public PredOp$/;"	c
RegImmOp	./arch/arm/insts/misc.hh	/^    RegImmOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:RegImmOp
RegImmOp	./arch/arm/insts/misc.hh	/^class RegImmOp : public PredOp$/;"	c
RegImmRegOp	./arch/arm/insts/misc.hh	/^    RegImmRegOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:RegImmRegOp
RegImmRegOp	./arch/arm/insts/misc.hh	/^class RegImmRegOp : public PredOp$/;"	c
RegImmRegShiftOp	./arch/arm/insts/misc.hh	/^    RegImmRegShiftOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:RegImmRegShiftOp
RegImmRegShiftOp	./arch/arm/insts/misc.hh	/^class RegImmRegShiftOp : public PredOp$/;"	c
RegIndex	./arch/alpha/registers.hh	/^typedef uint8_t RegIndex;$/;"	t	namespace:AlphaISA
RegIndex	./arch/arm/registers.hh	/^typedef uint16_t  RegIndex;$/;"	t	namespace:ArmISA
RegIndex	./arch/mips/registers.hh	/^typedef uint16_t  RegIndex;$/;"	t	namespace:MipsISA
RegIndex	./arch/power/registers.hh	/^typedef uint8_t RegIndex;$/;"	t	namespace:PowerISA
RegIndex	./arch/sparc/registers.hh	/^typedef uint16_t RegIndex;$/;"	t	namespace:SparcISA
RegIndex	./arch/x86/registers.hh	/^typedef uint16_t RegIndex;$/;"	t	namespace:X86ISA
RegIndex	./cpu/base_dyn_inst.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:BaseDynInst
RegIndex	./cpu/minor/scoreboard.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:Minor::Scoreboard
RegIndex	./cpu/o3/dyn_inst.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:BaseO3DynInst
RegIndex	./cpu/o3/rename.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:DefaultRename
RegIndex	./cpu/o3/rename_map.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:SimpleRenameMap
RegIndex	./cpu/o3/rename_map.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:UnifiedRenameMap
RegIndex	./cpu/o3/rob.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:ROB
RegIndex	./cpu/static_inst.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:StaticInst
RegIndexVector	./arch/arm/kvm/arm_cpu.hh	/^    typedef std::vector<uint64_t> RegIndexVector;$/;"	t	class:ArmKvmCPU
RegIndexVector	./arch/arm/kvm/base_cpu.hh	/^    typedef std::vector<uint64_t> RegIndexVector;$/;"	t	class:BaseArmKvmCPU
RegMiscRegImmOp	./arch/arm/insts/misc.hh	/^    RegMiscRegImmOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:RegMiscRegImmOp
RegMiscRegImmOp	./arch/arm/insts/misc.hh	/^class RegMiscRegImmOp : public PredOp$/;"	c
RegOp	./arch/x86/insts/microregop.hh	/^        RegOp(ExtMachInst _machInst,$/;"	f	class:X86ISA::RegOp
RegOp	./arch/x86/insts/microregop.hh	/^    class RegOp : public RegOpBase$/;"	c	namespace:X86ISA
RegOpBase	./arch/x86/insts/microregop.hh	/^        RegOpBase(ExtMachInst _machInst,$/;"	f	class:X86ISA::RegOpBase
RegOpBase	./arch/x86/insts/microregop.hh	/^    class RegOpBase : public X86MicroopBase$/;"	c	namespace:X86ISA
RegOpImm	./arch/x86/insts/microregop.hh	/^        RegOpImm(ExtMachInst _machInst,$/;"	f	class:X86ISA::RegOpImm
RegOpImm	./arch/x86/insts/microregop.hh	/^    class RegOpImm : public RegOpBase$/;"	c	namespace:X86ISA
RegRegImmImmOp	./arch/arm/insts/misc.hh	/^    RegRegImmImmOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:RegRegImmImmOp
RegRegImmImmOp	./arch/arm/insts/misc.hh	/^class RegRegImmImmOp : public PredOp$/;"	c
RegRegImmImmOp64	./arch/arm/insts/misc64.hh	/^    RegRegImmImmOp64(const char *mnem, ExtMachInst _machInst,$/;"	f	class:RegRegImmImmOp64
RegRegImmImmOp64	./arch/arm/insts/misc64.hh	/^class RegRegImmImmOp64 : public ArmStaticInst$/;"	c
RegRegImmOp	./arch/arm/insts/misc.hh	/^    RegRegImmOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:RegRegImmOp
RegRegImmOp	./arch/arm/insts/misc.hh	/^class RegRegImmOp : public PredOp$/;"	c
RegRegOp	./arch/arm/insts/misc.hh	/^    RegRegOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:RegRegOp
RegRegOp	./arch/arm/insts/misc.hh	/^class RegRegOp : public PredOp$/;"	c
RegRegRegImmOp	./arch/arm/insts/misc.hh	/^    RegRegRegImmOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:RegRegRegImmOp
RegRegRegImmOp	./arch/arm/insts/misc.hh	/^class RegRegRegImmOp : public PredOp$/;"	c
RegRegRegImmOp64	./arch/arm/insts/misc64.hh	/^    RegRegRegImmOp64(const char *mnem, ExtMachInst _machInst,$/;"	f	class:RegRegRegImmOp64
RegRegRegImmOp64	./arch/arm/insts/misc64.hh	/^class RegRegRegImmOp64 : public ArmStaticInst$/;"	c
RegRegRegOp	./arch/arm/insts/misc.hh	/^    RegRegRegOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:RegRegRegOp
RegRegRegOp	./arch/arm/insts/misc.hh	/^class RegRegRegOp : public PredOp$/;"	c
RegRegRegRegOp	./arch/arm/insts/misc.hh	/^    RegRegRegRegOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:RegRegRegRegOp
RegRegRegRegOp	./arch/arm/insts/misc.hh	/^class RegRegRegRegOp : public PredOp$/;"	c
Region	./python/m5/util/region.py	/^class Region(tuple):$/;"	c
Regions	./python/m5/util/region.py	/^class Regions(object):$/;"	c
RegisterOffset	./dev/arm/hdlcd.hh	/^    enum RegisterOffset {$/;"	g	class:HDLcd
Registers	./dev/arm/energy_ctrl.hh	/^    enum Registers {$/;"	g	class:EnergyCtrl
Regs	./dev/net/i8254xGBe_defs.hh	/^struct Regs : public Serializable {$/;"	s	namespace:iGbReg
Regs	./dev/net/sinicreg.hh	/^namespace Regs {$/;"	n	namespace:Sinic
Regs	./dev/pci/copy_engine_defs.hh	/^struct Regs : public Serializable {$/;"	s	namespace:CopyEngineReg
RegsPerWindow	./arch/sparc/isa.hh	/^    static const int RegsPerWindow = NumWindowedRegs - WindowOverlap;$/;"	m	class:SparcISA::ISA
RegularBitfieldTypes	./base/bitunion.hh	/^    class RegularBitfieldTypes$/;"	c	namespace:BitfieldBackend
RejectException	./mem/ruby/slicc_interface/AbstractController.hh	/^class RejectException: public std::exception$/;"	c
RemoteGDB	./arch/alpha/remote_gdb.cc	/^RemoteGDB::RemoteGDB(System *_system, ThreadContext *tc)$/;"	f	class:RemoteGDB
RemoteGDB	./arch/alpha/remote_gdb.hh	/^class RemoteGDB : public BaseRemoteGDB$/;"	c	namespace:AlphaISA
RemoteGDB	./arch/arm/remote_gdb.cc	/^RemoteGDB::RemoteGDB(System *_system, ThreadContext *tc)$/;"	f	class:RemoteGDB
RemoteGDB	./arch/arm/remote_gdb.hh	/^class RemoteGDB : public BaseRemoteGDB$/;"	c	namespace:ArmISA
RemoteGDB	./arch/mips/remote_gdb.cc	/^RemoteGDB::RemoteGDB(System *_system, ThreadContext *tc)$/;"	f	class:RemoteGDB
RemoteGDB	./arch/mips/remote_gdb.hh	/^class RemoteGDB : public BaseRemoteGDB$/;"	c	namespace:MipsISA
RemoteGDB	./arch/power/remote_gdb.cc	/^RemoteGDB::RemoteGDB(System *_system, ThreadContext *tc)$/;"	f	class:RemoteGDB
RemoteGDB	./arch/power/remote_gdb.hh	/^class RemoteGDB : public BaseRemoteGDB$/;"	c	namespace:PowerISA
RemoteGDB	./arch/sparc/remote_gdb.cc	/^RemoteGDB::RemoteGDB(System *_system, ThreadContext *c)$/;"	f	class:RemoteGDB
RemoteGDB	./arch/sparc/remote_gdb.hh	/^class RemoteGDB : public BaseRemoteGDB$/;"	c	namespace:SparcISA
RemoteGDB	./arch/x86/remote_gdb.cc	/^RemoteGDB::RemoteGDB(System *_system, ThreadContext *c) :$/;"	f	class:RemoteGDB
RemoteGDB	./arch/x86/remote_gdb.hh	/^class RemoteGDB : public BaseRemoteGDB$/;"	c	namespace:X86ISA
RemoteMode	./dev/x86/i8042.hh	/^        RemoteMode = 0xF0,$/;"	e	enum:X86ISA::PS2Mouse::Command
Rename	./cpu/o3/cpu_policy.hh	/^    typedef DefaultRename<Impl> Rename;$/;"	t	struct:SimpleCPUPolicy
RenameHistory	./cpu/o3/rename.hh	/^        RenameHistory(InstSeqNum _instSeqNum, RegIndex _archReg,$/;"	f	struct:DefaultRename::RenameHistory
RenameHistory	./cpu/o3/rename.hh	/^    struct RenameHistory {$/;"	s	class:DefaultRename
RenameIdx	./cpu/o3/cpu.hh	/^        RenameIdx,$/;"	e	enum:FullO3CPU::StageIdx
RenameInfo	./cpu/o3/rename_map.hh	/^    typedef SimpleRenameMap::RenameInfo RenameInfo;$/;"	t	class:UnifiedRenameMap
RenameInfo	./cpu/o3/rename_map.hh	/^    typedef std::pair<PhysRegIndex, PhysRegIndex> RenameInfo;$/;"	t	class:SimpleRenameMap
RenameMap	./cpu/o3/commit.hh	/^    typedef typename CPUPol::RenameMap RenameMap;$/;"	t	class:DefaultCommit
RenameMap	./cpu/o3/cpu_policy.hh	/^    typedef UnifiedRenameMap RenameMap;$/;"	t	struct:SimpleCPUPolicy
RenameMap	./cpu/o3/iew.hh	/^    typedef typename CPUPol::RenameMap RenameMap;$/;"	t	class:DefaultIEW
RenameMap	./cpu/o3/rename.hh	/^    typedef typename CPUPol::RenameMap RenameMap;$/;"	t	class:DefaultRename
RenameStatus	./cpu/o3/rename.hh	/^    enum RenameStatus {$/;"	g	class:DefaultRename
RenameStruct	./cpu/o3/commit.hh	/^    typedef typename CPUPol::RenameStruct RenameStruct;$/;"	t	class:DefaultCommit
RenameStruct	./cpu/o3/cpu.hh	/^    typedef typename CPUPolicy::RenameStruct RenameStruct;$/;"	t	class:FullO3CPU
RenameStruct	./cpu/o3/cpu_policy.hh	/^    typedef DefaultRenameDefaultIEW<Impl> RenameStruct;$/;"	t	struct:SimpleCPUPolicy
RenameStruct	./cpu/o3/iew.hh	/^    typedef typename CPUPol::RenameStruct RenameStruct;$/;"	t	class:DefaultIEW
RenameStruct	./cpu/o3/rename.hh	/^    typedef typename CPUPol::RenameStruct RenameStruct;$/;"	t	class:DefaultRename
Renaming	./sim/cxx_manager.hh	/^        Renaming(const std::string &from_prefix,$/;"	f	struct:CxxConfigManager::Renaming
Renaming	./sim/cxx_manager.hh	/^    struct Renaming$/;"	s	class:CxxConfigManager
Rep	./arch/x86/types.hh	/^        Rep,$/;"	e	enum:X86ISA::Prefixes
ReplacementPolicy	./mem/ruby/structures/ReplacementPolicy.py	/^class ReplacementPolicy(SimObject):$/;"	c
Repne	./arch/x86/types.hh	/^        Repne,$/;"	e	enum:X86ISA::Prefixes
ReportIF	./cpu/minor/buffers.hh	/^class ReportIF$/;"	c	namespace:Minor
ReportTraitsAdaptor	./cpu/minor/buffers.hh	/^class ReportTraitsAdaptor$/;"	c	namespace:Minor
ReportTraitsPtrAdaptor	./cpu/minor/buffers.hh	/^class ReportTraitsPtrAdaptor$/;"	c	namespace:Minor
ReqLayer	./mem/xbar.hh	/^        ReqLayer(MasterPort& _port, BaseXBar& _xbar, const std::string& _name) :$/;"	f	class:BaseXBar::ReqLayer
ReqLayer	./mem/xbar.hh	/^    class ReqLayer : public Layer<SlavePort,MasterPort>$/;"	c	class:BaseXBar
ReqMade	./cpu/base_dyn_inst.hh	/^        ReqMade,$/;"	e	enum:BaseDynInst::Flags
ReqPacketQueue	./mem/packet_queue.cc	/^ReqPacketQueue::ReqPacketQueue(EventManager& _em, MasterPort& _masterPort,$/;"	f	class:ReqPacketQueue
ReqPacketQueue	./mem/packet_queue.hh	/^class ReqPacketQueue : public PacketQueue$/;"	c
ReqType	./dev/net/dist_iface.hh	/^    typedef DistHeaderPkt::ReqType ReqType;$/;"	t	class:DistIface
ReqType	./dev/net/dist_packet.hh	/^    enum class ReqType { immediate, collective, pending, none };$/;"	c	class:DistHeaderPkt
Request	./mem/request.hh	/^    Request()$/;"	f	class:Request
Request	./mem/request.hh	/^    Request(Addr paddr, unsigned size, Flags flags, MasterID mid)$/;"	f	class:Request
Request	./mem/request.hh	/^    Request(Addr paddr, unsigned size, Flags flags, MasterID mid, Tick time)$/;"	f	class:Request
Request	./mem/request.hh	/^    Request(Addr paddr, unsigned size, Flags flags, MasterID mid, Tick time,$/;"	f	class:Request
Request	./mem/request.hh	/^    Request(Addr paddr, unsigned size, Flags flags, MasterID mid,$/;"	f	class:Request
Request	./mem/request.hh	/^    Request(int asid, Addr vaddr, unsigned size, Flags flags, MasterID mid,$/;"	f	class:Request
Request	./mem/request.hh	/^class Request$/;"	c
RequestDescHeader	./dev/arm/ufs_device.hh	/^        struct RequestDescHeader {$/;"	s	struct:UFSHostDevice::UTPTransferReqDesc
RequestIn	./dev/arm/ufs_device.hh	/^        struct UTPTransferReqDesc* RequestIn;$/;"	m	struct:UFSHostDevice::SCSIResumeInfo	typeref:struct:UFSHostDevice::SCSIResumeInfo::UTPTransferReqDesc
RequestIssuing	./cpu/minor/fetch1.hh	/^            RequestIssuing, \/* Issued to memory, must wait for response *\/$/;"	e	enum:Minor::Fetch1::FetchRequest::FetchRequestState
RequestIssuing	./cpu/minor/lsq.hh	/^            RequestIssuing, \/* Load\/store issued to memory in the requests$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
RequestNeedsRetry	./cpu/minor/lsq.hh	/^            RequestNeedsRetry, \/* Retry needed for load *\/$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
RequestPtr	./mem/request.hh	/^typedef Request* RequestPtr;$/;"	t
RequestQueue	./dev/virtio/block.hh	/^        RequestQueue(PortProxy &proxy, uint16_t size, VirtIOBlock &_parent)$/;"	f	class:VirtIOBlock::RequestQueue
RequestQueue	./dev/virtio/block.hh	/^    class RequestQueue$/;"	c	class:VirtIOBlock
RequestTable	./mem/ruby/system/Sequencer.hh	/^    typedef std::unordered_map<Addr, SequencerRequest*> RequestTable;$/;"	t	class:Sequencer
RequestType	./dev/virtio/block.hh	/^    typedef uint32_t RequestType;$/;"	t	class:VirtIOBlock
RequestType	./mem/slicc/symbols/RequestType.py	/^class RequestType(Symbol):$/;"	c
Resend	./dev/x86/i8042.hh	/^        Resend = 0xFE,$/;"	e	enum:X86ISA::PS2Keyboard::Command
Resend	./dev/x86/i8042.hh	/^        Resend = 0xFE,$/;"	e	enum:X86ISA::PS2Mouse::Command
Reservable	./cpu/minor/buffers.hh	/^class Reservable$/;"	c	namespace:Minor
Reserved	./arch/arm/pagetable.hh	/^        Reserved,$/;"	m	class:ArmISA::TlbEntry::DomainType
Reserved	./arch/arm/table_walker.hh	/^            Reserved$/;"	e	enum:ArmISA::TableWalker::L1Descriptor::EntryType
Reserved	./dev/sparc/iob.hh	/^        Reserved = 3,$/;"	e	enum:Iob::DeviceId
Reserved0	./sim/eventq.hh	/^    static const FlagsType Reserved0     = 0x0008;$/;"	m	class:EventBase
ReservedGrain	./arch/arm/table_walker.hh	/^        ReservedGrain = 0$/;"	e	enum:ArmISA::TableWalker::GrainSize
ReservedInstructionFault	./arch/mips/faults.hh	/^class ReservedInstructionFault : public MipsFault<ReservedInstructionFault> {};$/;"	c	namespace:MipsISA
Reset	./arch/arm/faults.hh	/^class Reset : public ArmFaultVals<Reset>$/;"	c	namespace:ArmISA
Reset	./dev/sparc/iob.hh	/^        Reset,$/;"	e	enum:Iob::Type
Reset	./dev/x86/i8042.hh	/^        Reset = 0xFF$/;"	e	enum:X86ISA::PS2Keyboard::Command
Reset	./dev/x86/i8042.hh	/^        Reset = 0xFF$/;"	e	enum:X86ISA::PS2Mouse::Command
ResetCtl	./dev/arm/rv_ctrl.hh	/^        ResetCtl   = 0x40,$/;"	e	enum:RealViewCtrl::__anon19
ResetFault	./arch/alpha/faults.hh	/^class ResetFault : public AlphaFault$/;"	c	namespace:AlphaISA
ResetFault	./arch/mips/faults.hh	/^class ResetFault : public MipsFault<ResetFault>$/;"	c	namespace:MipsISA
ResetState	./arch/x86/decoder.hh	/^        ResetState,$/;"	e	enum:X86ISA::Decoder::State
ResetWrapMode	./dev/x86/i8042.hh	/^        ResetWrapMode = 0xEC,$/;"	e	enum:X86ISA::PS2Mouse::Command
RespLayer	./mem/xbar.hh	/^        RespLayer(SlavePort& _port, BaseXBar& _xbar, const std::string& _name) :$/;"	f	class:BaseXBar::RespLayer
RespLayer	./mem/xbar.hh	/^    class RespLayer : public Layer<MasterPort,SlavePort>$/;"	c	class:BaseXBar
RespPacketQueue	./mem/packet_queue.cc	/^RespPacketQueue::RespPacketQueue(EventManager& _em, SlavePort& _slavePort,$/;"	f	class:RespPacketQueue
RespPacketQueue	./mem/packet_queue.hh	/^class RespPacketQueue : public PacketQueue$/;"	c
ResponseEvent	./mem/external_slave.cc	/^        ResponseEvent(StubSlavePort &owner_) : owner(owner_) { }$/;"	f	class:StubSlavePort::ResponseEvent
ResponseEvent	./mem/external_slave.cc	/^    class ResponseEvent : public Event$/;"	c	class:StubSlavePort	file:
Result	./base/stats/types.hh	/^typedef double Result;$/;"	t	namespace:Stats
Result	./cpu/base_dyn_inst.hh	/^    union Result {$/;"	u	class:BaseDynInst
Result	./cpu/checker/cpu.hh	/^    union Result {$/;"	u	class:CheckerCPU
ResultReady	./cpu/base_dyn_inst.hh	/^        ResultReady,             \/\/\/ Instruction has its result$/;"	e	enum:BaseDynInst::Status
ResumableError	./arch/sparc/faults.hh	/^class ResumableError : public SparcFault<ResumableError> {};$/;"	c	namespace:SparcISA
Resume	./dev/sparc/iob.hh	/^        Resume$/;"	e	enum:Iob::Type
ReturnAddrStack	./cpu/pred/ras.hh	/^    ReturnAddrStack() {}$/;"	f	class:ReturnAddrStack
ReturnAddrStack	./cpu/pred/ras.hh	/^class ReturnAddrStack$/;"	c
ReturnAddressReg	./arch/alpha/registers.hh	/^const RegIndex ReturnAddressReg = 26;$/;"	m	namespace:AlphaISA
ReturnAddressReg	./arch/arm/registers.hh	/^const int ReturnAddressReg = INTREG_LR;$/;"	m	namespace:ArmISA
ReturnAddressReg	./arch/mips/registers.hh	/^const int ReturnAddressReg = 31;$/;"	m	namespace:MipsISA
ReturnAddressReg	./arch/sparc/registers.hh	/^const int ReturnAddressReg = 31; \/\/ post call, precall is 15$/;"	m	namespace:SparcISA
ReturnAddressReg	./arch/x86/registers.hh	/^const int ReturnAddressReg = 0;$/;"	m	namespace:X86ISA
ReturnStatementAST	./mem/slicc/ast/ReturnStatementAST.py	/^class ReturnStatementAST(StatementAST):$/;"	c
ReturnValueReg	./arch/alpha/registers.hh	/^const RegIndex ReturnValueReg = 0;$/;"	m	namespace:AlphaISA
ReturnValueReg	./arch/arm/registers.hh	/^const int ReturnValueReg = 0;$/;"	m	namespace:ArmISA
ReturnValueReg	./arch/mips/registers.hh	/^const int ReturnValueReg = 2;$/;"	m	namespace:MipsISA
ReturnValueReg	./arch/power/registers.hh	/^const int ReturnValueReg = 3;$/;"	m	namespace:PowerISA
ReturnValueReg	./arch/sparc/registers.hh	/^const int ReturnValueReg = 8;  \/\/ Post return, 24 is pre-return.$/;"	m	namespace:SparcISA
ReturnValueReg	./arch/x86/registers.hh	/^const int ReturnValueReg = INTREG_RAX;$/;"	m	namespace:X86ISA
ReturnValueReg1	./arch/arm/registers.hh	/^const int ReturnValueReg1 = 1;$/;"	m	namespace:ArmISA
ReturnValueReg2	./arch/arm/registers.hh	/^const int ReturnValueReg2 = 2;$/;"	m	namespace:ArmISA
RevTag	./arch/arm/linux/atag.hh	/^    RevTag    = 0x54410007,$/;"	e	enum:__anon73
Revision	./dev/pci/CopyEngine.py	/^    Revision = 0xA2 # CM2 stepping (newest listed)$/;"	v	class:CopyEngine
Revision	./dev/pci/PciDevice.py	/^    Revision = Param.UInt8(0, "Device")$/;"	v	class:PciDevice
Revision	./dev/storage/Ide.py	/^    Revision = 0x0$/;"	v	class:IdeController
RexPrefix	./arch/x86/types.hh	/^        RexPrefix,$/;"	e	enum:X86ISA::Prefixes
RfeOp	./arch/arm/insts/mem.hh	/^    RfeOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::RfeOp
RfeOp	./arch/arm/insts/mem.hh	/^class RfeOp : public MightBeMicro$/;"	c	namespace:ArmISA
RobDepArray	./cpu/trace/trace_cpu.hh	/^            typedef std::array<NodeSeqNum, maxRobDep> RobDepArray;$/;"	t	class:TraceCPU::ElasticDataGen::GraphNode
RobEntry	./cpu/base_dyn_inst.hh	/^        RobEntry,                \/\/\/ Instruction is in the ROB$/;"	e	enum:BaseDynInst::Status
Rom	./arch/micro_asm.py	/^class Rom(Micro_Container):$/;"	c
Rom_Macroop	./arch/micro_asm.py	/^class Rom_Macroop(object):$/;"	c
Root	./sim/Root.py	/^class Root(SimObject):$/;"	c
Root	./sim/root.cc	/^Root::Root(RootParams *p) : SimObject(p), _enabled(false),$/;"	f	class:Root
Root	./sim/root.hh	/^class Root : public SimObject$/;"	c
RoundMode	./arch/arm/types.hh	/^    enum RoundMode{$/;"	g	namespace:ArmISA
RoundMode	./arch/mips/types.hh	/^enum RoundMode{$/;"	g	namespace:MipsISA
RoundPage	./arch/alpha/utility.hh	/^RoundPage(Addr addr)$/;"	f	namespace:AlphaISA
RoundPage	./arch/mips/utility.hh	/^RoundPage(Addr addr)$/;"	f	namespace:MipsISA
RoundRobin	./cpu/o3/commit.hh	/^        RoundRobin,$/;"	e	enum:DefaultCommit::CommitPolicy
RoundRobin	./cpu/o3/fetch.hh	/^        RoundRobin,$/;"	e	enum:DefaultFetch::FetchPriority
Router	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::Router(const Params *p)$/;"	f	class:Router
Router	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^class Router : public BasicRouter, public FlexibleConsumer$/;"	c
Router_d	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^Router_d::Router_d(const Params *p)$/;"	f	class:Router_d
Router_d	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^class Router_d : public BasicRouter$/;"	c
RoutingUnit_d	./mem/ruby/network/garnet/fixed-pipeline/RoutingUnit_d.cc	/^RoutingUnit_d::RoutingUnit_d(Router_d *router)$/;"	f	class:RoutingUnit_d
RoutingUnit_d	./mem/ruby/network/garnet/fixed-pipeline/RoutingUnit_d.hh	/^class RoutingUnit_d$/;"	c
RubyCache	./mem/ruby/structures/RubyCache.py	/^class RubyCache(SimObject):$/;"	c
RubyController	./mem/ruby/slicc_interface/Controller.py	/^class RubyController(MemObject):$/;"	c
RubyDirectedTester	./cpu/testers/directedtest/RubyDirectedTester.cc	/^RubyDirectedTester::RubyDirectedTester(const Params *p)$/;"	f	class:RubyDirectedTester
RubyDirectedTester	./cpu/testers/directedtest/RubyDirectedTester.hh	/^class RubyDirectedTester : public MemObject$/;"	c
RubyDirectedTester	./cpu/testers/directedtest/RubyDirectedTester.py	/^class RubyDirectedTester(MemObject):$/;"	c
RubyDirectoryMemory	./mem/ruby/structures/DirectoryMemory.py	/^class RubyDirectoryMemory(SimObject):$/;"	c
RubyEvent	./mem/ruby/system/RubySystem.hh	/^        RubyEvent(RubySystem* _ruby_system)$/;"	f	class:RubySystem::RubyEvent
RubyEvent	./mem/ruby/system/RubySystem.hh	/^    class RubyEvent : public Event$/;"	c	class:RubySystem
RubyMemoryControl	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::RubyMemoryControl(const Params *p)$/;"	f	class:RubyMemoryControl
RubyMemoryControl	./mem/ruby/structures/RubyMemoryControl.hh	/^class RubyMemoryControl : public AbstractMemory, public Consumer$/;"	c
RubyMemoryControl	./mem/ruby/structures/RubyMemoryControl.py	/^class RubyMemoryControl(AbstractMemory):$/;"	c
RubyNetwork	./mem/ruby/network/Network.py	/^class RubyNetwork(ClockedObject):$/;"	c
RubyPort	./mem/ruby/system/RubyPort.cc	/^RubyPort::RubyPort(const Params *p)$/;"	f	class:RubyPort
RubyPort	./mem/ruby/system/RubyPort.hh	/^class RubyPort : public MemObject$/;"	c
RubyPort	./mem/ruby/system/Sequencer.py	/^class RubyPort(MemObject):$/;"	c
RubyPortProxy	./mem/ruby/system/RubyPortProxy.cc	/^RubyPortProxy::RubyPortProxy(const RubyPortProxyParams* p) :$/;"	f	class:RubyPortProxy
RubyPortProxy	./mem/ruby/system/RubyPortProxy.hh	/^class RubyPortProxy : public RubyPort$/;"	c
RubyPortProxy	./mem/ruby/system/Sequencer.py	/^class RubyPortProxy(RubyPort):$/;"	c
RubyRequest	./mem/ruby/slicc_interface/RubyRequest.hh	/^    RubyRequest(Tick curTime) : Message(curTime) {}$/;"	f	class:RubyRequest
RubyRequest	./mem/ruby/slicc_interface/RubyRequest.hh	/^    RubyRequest(Tick curTime, uint64_t _paddr, uint8_t* _data, int _len,$/;"	f	class:RubyRequest
RubyRequest	./mem/ruby/slicc_interface/RubyRequest.hh	/^class RubyRequest : public Message$/;"	c
RubySequencer	./mem/ruby/system/Sequencer.py	/^class RubySequencer(RubyPort):$/;"	c
RubyStatsCallback	./mem/ruby/system/RubySystem.hh	/^    RubyStatsCallback(RubySystem *system) : m_ruby_system(system) {}$/;"	f	class:RubyStatsCallback
RubyStatsCallback	./mem/ruby/system/RubySystem.hh	/^class RubyStatsCallback : public Callback$/;"	c
RubySystem	./mem/ruby/system/RubySystem.cc	/^RubySystem::RubySystem(const Params *p)$/;"	f	class:RubySystem
RubySystem	./mem/ruby/system/RubySystem.hh	/^class RubySystem : public ClockedObject$/;"	c
RubySystem	./mem/ruby/system/RubySystem.py	/^class RubySystem(ClockedObject):$/;"	c
RubyTester	./cpu/testers/rubytest/RubyTester.cc	/^RubyTester::RubyTester(const Params *p)$/;"	f	class:RubyTester
RubyTester	./cpu/testers/rubytest/RubyTester.hh	/^class RubyTester : public MemObject$/;"	c
RubyTester	./cpu/testers/rubytest/RubyTester.py	/^class RubyTester(MemObject):$/;"	c
RubyWireBuffer	./mem/ruby/structures/WireBuffer.py	/^class RubyWireBuffer(SimObject):$/;"	c
Running	./cpu/kvm/base.hh	/^        Running,$/;"	e	enum:BaseKvmCPU::Status
Running	./cpu/o3/commit.hh	/^        Running,$/;"	e	enum:DefaultCommit::ThreadStatus
Running	./cpu/o3/cpu.hh	/^        Running,$/;"	e	enum:FullO3CPU::Status
Running	./cpu/o3/decode.hh	/^        Running,$/;"	e	enum:DefaultDecode::ThreadStatus
Running	./cpu/o3/fetch.hh	/^        Running,$/;"	e	enum:DefaultFetch::ThreadStatus
Running	./cpu/o3/iew.hh	/^        Running,$/;"	e	enum:DefaultIEW::StageStatus
Running	./cpu/o3/rename.hh	/^        Running,$/;"	e	enum:DefaultRename::ThreadStatus
Running	./cpu/o3/rob.hh	/^        Running,$/;"	e	enum:ROB::Status
Running	./cpu/simple/base.hh	/^        Running,$/;"	e	enum:BaseSimpleCPU::Status
Running	./sim/drain.hh	/^    Running,  \/** Running normally *\/$/;"	m	class:DrainState
RunningService	./cpu/kvm/base.hh	/^        RunningService,$/;"	e	enum:BaseKvmCPU::Status
RunningServiceCompletion	./cpu/kvm/base.hh	/^        RunningServiceCompletion,$/;"	e	enum:BaseKvmCPU::Status
RxData	./dev/net/sinic.hh	/^        uint64_t RxData;       \/\/ 0x40$/;"	m	struct:Sinic::Device::__anon11
RxData	./dev/net/sinic.hh	/^        uint64_t RxData;$/;"	m	struct:Sinic::Device::VirtualReg
RxDesc	./dev/net/i8254xGBe_defs.hh	/^struct RxDesc {$/;"	s	namespace:iGbReg
RxDescCache	./dev/net/i8254xGBe.cc	/^IGbE::RxDescCache::RxDescCache(IGbE *i, const std::string n, int s)$/;"	f	class:IGbE::RxDescCache
RxDescCache	./dev/net/i8254xGBe.hh	/^    class RxDescCache : public DescCache<iGbReg::RxDesc>$/;"	c	class:IGbE
RxDone	./dev/net/sinic.hh	/^        uint64_t RxDone;       \/\/ 0x48$/;"	m	struct:Sinic::Device::__anon11
RxDone	./dev/net/sinic.hh	/^        uint64_t RxDone;$/;"	m	struct:Sinic::Device::VirtualReg
RxFifoHigh	./dev/net/sinic.hh	/^        uint32_t RxFifoHigh;   \/\/ 0x38$/;"	m	struct:Sinic::Device::__anon11
RxFifoLow	./dev/net/sinic.hh	/^        uint32_t RxFifoLow;    \/\/ 0x30$/;"	m	struct:Sinic::Device::__anon11
RxFifoSize	./dev/net/sinic.hh	/^        uint32_t RxFifoSize;   \/\/ 0x28$/;"	m	struct:Sinic::Device::__anon11
RxKickEvent	./dev/net/ns_gige.hh	/^    typedef EventWrapper<NSGigE, &NSGigE::rxKick> RxKickEvent;$/;"	t	class:NSGigE
RxKickEvent	./dev/net/sinic.hh	/^    typedef EventWrapper<Device, &Device::rxKick> RxKickEvent;$/;"	t	class:Sinic::Device
RxLink	./dev/net/dist_etherlink.hh	/^        RxLink(const std::string &name, DistEtherLink *p,$/;"	f	class:DistEtherLink::RxLink
RxLink	./dev/net/dist_etherlink.hh	/^    class RxLink : public Link$/;"	c	class:DistEtherLink
RxMaxCopy	./dev/net/sinic.hh	/^        uint32_t RxMaxCopy;    \/\/ 0x10$/;"	m	struct:Sinic::Device::__anon11
RxMaxIntr	./dev/net/sinic.hh	/^        uint32_t RxMaxIntr;    \/\/ 0x24$/;"	m	struct:Sinic::Device::__anon11
RxState	./dev/net/ns_gige.hh	/^    enum RxState$/;"	g	class:NSGigE
RxState	./dev/net/sinic.hh	/^    enum RxState {$/;"	g	class:Sinic::Device
RxStateStrings	./dev/net/sinic.cc	/^const char *RxStateStrings[] =$/;"	m	namespace:Sinic	file:
RxStatus	./dev/net/sinic.hh	/^        uint64_t RxStatus;     \/\/ 0x78$/;"	m	struct:Sinic::Device::__anon11
RxWait	./dev/net/sinic.hh	/^        uint64_t RxWait;       \/\/ 0x50$/;"	m	struct:Sinic::Device::__anon11
S1CTran	./arch/arm/tlb.hh	/^        S1CTran = 0x1,$/;"	e	enum:ArmISA::TLB::ArmTranslationType
S1PTW	./arch/arm/faults.hh	/^        S1PTW, \/\/ DataAbort, PrefetchAbort: Stage 1 Page Table Walk,$/;"	e	enum:ArmISA::ArmFault::AnnotationIDs
S1S2NsTran	./arch/arm/tlb.hh	/^        S1S2NsTran = 0x4$/;"	e	enum:ArmISA::TLB::ArmTranslationType
SAFE_MSG	./sim/backtrace_glibc.cc	47;"	d	file:
SAS	./arch/arm/faults.hh	/^        SAS,   \/\/ DataAbort: Syndrome Access Size$/;"	e	enum:ArmISA::ArmFault::AnnotationIDs
SATA_DMA_SETUP_AUTO	./dev/storage/ide_atareg.h	172;"	d
SATA_DRIVE_PWR_MGMT	./dev/storage/ide_atareg.h	173;"	d
SATA_HOST_PWR_MGMT	./dev/storage/ide_atareg.h	168;"	d
SATA_NATIVE_CMDQ	./dev/storage/ide_atareg.h	167;"	d
SATA_NONZERO_OFFSETS	./dev/storage/ide_atareg.h	171;"	d
SATA_SIGNAL_GEN1	./dev/storage/ide_atareg.h	165;"	d
SATA_SIGNAL_GEN2	./dev/storage/ide_atareg.h	166;"	d
SATURATE	./arch/mips/dsp.hh	/^enum { NOSATURATE, SATURATE };$/;"	e	enum:MipsISA::__anon90
SA_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum flit_stage {I_, VA_, SA_, ST_, LT_, NUM_FLIT_STAGE_};$/;"	e	enum:flit_stage
SB_CONTROLC	./dev/i2c/bus.hh	/^    static const int SB_CONTROLC = 0x4;$/;"	m	class:I2CBus
SB_CONTROLS	./dev/i2c/bus.hh	/^    static const int SB_CONTROLS = 0x0;$/;"	m	class:I2CBus
SCSIACAActive	./dev/arm/ufs_device.hh	/^            SCSIACAActive = 0x30,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSIStatusCodes
SCSIAbortedCommand	./dev/arm/ufs_device.hh	/^            SCSIAbortedCommand = 0x0B,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSISenseCodes
SCSIBlankCheck	./dev/arm/ufs_device.hh	/^            SCSIBlankCheck = 0x08,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSISenseCodes
SCSIBusy	./dev/arm/ufs_device.hh	/^            SCSIBusy = 0x08,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSIStatusCodes
SCSICMDHandle	./dev/arm/ufs_device.cc	/^UFSHostDevice::UFSSCSIDevice::SCSICMDHandle(uint32_t* SCSI_msg)$/;"	f	class:UFSHostDevice::UFSSCSIDevice
SCSICheckCondition	./dev/arm/ufs_device.hh	/^            SCSICheckCondition = 0x02,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSIStatusCodes
SCSICommandSet	./dev/arm/ufs_device.hh	/^        enum SCSICommandSet {$/;"	g	class:UFSHostDevice::UFSSCSIDevice
SCSICommandTerminated	./dev/arm/ufs_device.hh	/^            SCSICommandTerminated = 0x22,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSIStatusCodes
SCSIConditionGood	./dev/arm/ufs_device.hh	/^            SCSIConditionGood = 0x04,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSIStatusCodes
SCSIDataProtect	./dev/arm/ufs_device.hh	/^            SCSIDataProtect = 0x07,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSISenseCodes
SCSIDiskOffset	./dev/arm/ufs_device.hh	/^        uint64_t SCSIDiskOffset;$/;"	m	struct:UFSHostDevice::writeToDiskBurst
SCSIFormatUnit	./dev/arm/ufs_device.hh	/^            SCSIFormatUnit = 0x04,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIGood	./dev/arm/ufs_device.hh	/^            SCSIGood = 0x00,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSIStatusCodes
SCSIHardwareError	./dev/arm/ufs_device.hh	/^            SCSIHardwareError = 0x04,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSISenseCodes
SCSIIllegalRequest	./dev/arm/ufs_device.hh	/^            SCSIIllegalRequest = 0x05,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSISenseCodes
SCSIInfo	./dev/arm/ufs_device.hh	/^    struct SCSIResumeInfo SCSIInfo;$/;"	m	class:UFSHostDevice	typeref:struct:UFSHostDevice::SCSIResumeInfo
SCSIInfoQueue	./dev/arm/ufs_device.hh	/^        std::deque<struct SCSIResumeInfo> SCSIInfoQueue;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
SCSIInquiry	./dev/arm/ufs_device.hh	/^            SCSIInquiry = 0x12,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIIntermediatCGood	./dev/arm/ufs_device.hh	/^            SCSIIntermediatCGood = 0x14,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSIStatusCodes
SCSIIntermediateGood	./dev/arm/ufs_device.hh	/^            SCSIIntermediateGood = 0x10,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSIStatusCodes
SCSIMaintenanceIn	./dev/arm/ufs_device.hh	/^            SCSIMaintenanceIn = 0xA3$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIMediumError	./dev/arm/ufs_device.hh	/^            SCSIMediumError = 0x03,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSISenseCodes
SCSIMisCompare	./dev/arm/ufs_device.hh	/^            SCSIMisCompare = 0x0E$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSISenseCodes
SCSIModeSelect10	./dev/arm/ufs_device.hh	/^            SCSIModeSelect10 = 0x55,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIModeSense10	./dev/arm/ufs_device.hh	/^            SCSIModeSense10 = 0x5A,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIModeSense6	./dev/arm/ufs_device.hh	/^            SCSIModeSense6 = 0x1A,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSINoSense	./dev/arm/ufs_device.hh	/^            SCSINoSense = 0x00,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSISenseCodes
SCSINotReady	./dev/arm/ufs_device.hh	/^            SCSINotReady = 0x02,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSISenseCodes
SCSIRead10	./dev/arm/ufs_device.hh	/^            SCSIRead10 = 0x28,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIRead16	./dev/arm/ufs_device.hh	/^            SCSIRead16 = 0x88,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIRead6	./dev/arm/ufs_device.hh	/^            SCSIRead6 = 0x08,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIReadBuffer	./dev/arm/ufs_device.hh	/^            SCSIReadBuffer = 0x3C,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIReadCapacity10	./dev/arm/ufs_device.hh	/^            SCSIReadCapacity10 = 0x25,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIReadCapacity16	./dev/arm/ufs_device.hh	/^            SCSIReadCapacity16 = 0x9E,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIRecoverdError	./dev/arm/ufs_device.hh	/^            SCSIRecoverdError = 0x01,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSISenseCodes
SCSIReply	./dev/arm/ufs_device.hh	/^    struct SCSIReply {$/;"	s	class:UFSHostDevice
SCSIReportLUNs	./dev/arm/ufs_device.hh	/^            SCSIReportLUNs = 0xA0,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIRequestSense	./dev/arm/ufs_device.hh	/^            SCSIRequestSense = 0x03,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIReservationConflict	./dev/arm/ufs_device.hh	/^            SCSIReservationConflict = 0x18,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSIStatusCodes
SCSIResume	./dev/arm/ufs_device.cc	/^UFSHostDevice::SCSIResume(uint32_t lun_id)$/;"	f	class:UFSHostDevice
SCSIResumeEvent	./dev/arm/ufs_device.hh	/^    EventWrapper<UFSHostDevice, &UFSHostDevice::SCSIStart> SCSIResumeEvent;$/;"	m	class:UFSHostDevice
SCSIResumeInfo	./dev/arm/ufs_device.hh	/^    struct SCSIResumeInfo {$/;"	s	class:UFSHostDevice
SCSISendDiagnostic	./dev/arm/ufs_device.hh	/^            SCSISendDiagnostic = 0x1D,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSISenseCodes	./dev/arm/ufs_device.hh	/^        enum SCSISenseCodes {$/;"	g	class:UFSHostDevice::UFSSCSIDevice
SCSIStart	./dev/arm/ufs_device.cc	/^UFSHostDevice::SCSIStart()$/;"	f	class:UFSHostDevice
SCSIStartStop	./dev/arm/ufs_device.hh	/^            SCSIStartStop = 0x1B,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIStatusCodes	./dev/arm/ufs_device.hh	/^        enum SCSIStatusCodes {$/;"	g	class:UFSHostDevice::UFSSCSIDevice
SCSISynchronizeCache	./dev/arm/ufs_device.hh	/^            SCSISynchronizeCache = 0x35,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSITaskAborted	./dev/arm/ufs_device.hh	/^            SCSITaskAborted = 0x40$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSIStatusCodes
SCSITaskSetFull	./dev/arm/ufs_device.hh	/^            SCSITaskSetFull = 0x28,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSIStatusCodes
SCSITestUnitReady	./dev/arm/ufs_device.hh	/^            SCSITestUnitReady = 0x00,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIUnitAttention	./dev/arm/ufs_device.hh	/^            SCSIUnitAttention = 0x06,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSISenseCodes
SCSIUnmap	./dev/arm/ufs_device.hh	/^            SCSIUnmap = 0x42,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIVerify10	./dev/arm/ufs_device.hh	/^            SCSIVerify10 = 0x2F,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIVolumeOverflow	./dev/arm/ufs_device.hh	/^            SCSIVolumeOverflow = 0x0D,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSISenseCodes
SCSIWrite10	./dev/arm/ufs_device.hh	/^            SCSIWrite10 = 0x2A,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIWrite16	./dev/arm/ufs_device.hh	/^            SCSIWrite16 = 0x8A,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIWrite6	./dev/arm/ufs_device.hh	/^            SCSIWrite6 = 0x0A,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCSIWriteBuffer	./dev/arm/ufs_device.hh	/^            SCSIWriteBuffer = 0x3B,$/;"	e	enum:UFSHostDevice::UFSSCSIDevice::SCSICommandSet
SCUpgradeFailReq	./mem/packet.hh	/^        SCUpgradeFailReq,       \/\/ Failed SCUpgradeReq in MSHR (never sent)$/;"	e	enum:MemCmd::Command
SCUpgradeReq	./mem/packet.hh	/^        SCUpgradeReq,           \/\/ Special "weak" upgrade for StoreCond$/;"	e	enum:MemCmd::Command
SCache	./base/cp_annotate.hh	/^    typedef std::unordered_map<std::string, int> SCache;$/;"	t	class:CPA
SE	./arch/x86/regs/int.hh	/^        SignedBitfield<31,0> SE;$/;"	m	namespace:X86ISA
SECTOR_OFFSET	./dev/storage/ide_disk.hh	102;"	d
SEGMENT_REG_CS	./arch/x86/regs/segment.hh	/^        SEGMENT_REG_CS,$/;"	e	enum:X86ISA::SegmentRegIndex
SEGMENT_REG_DS	./arch/x86/regs/segment.hh	/^        SEGMENT_REG_DS,$/;"	e	enum:X86ISA::SegmentRegIndex
SEGMENT_REG_ES	./arch/x86/regs/segment.hh	/^        SEGMENT_REG_ES,$/;"	e	enum:X86ISA::SegmentRegIndex
SEGMENT_REG_FS	./arch/x86/regs/segment.hh	/^        SEGMENT_REG_FS,$/;"	e	enum:X86ISA::SegmentRegIndex
SEGMENT_REG_GS	./arch/x86/regs/segment.hh	/^        SEGMENT_REG_GS,$/;"	e	enum:X86ISA::SegmentRegIndex
SEGMENT_REG_HS	./arch/x86/regs/segment.hh	/^        SEGMENT_REG_HS, \/\/ Temporary descriptor$/;"	e	enum:X86ISA::SegmentRegIndex
SEGMENT_REG_LS	./arch/x86/regs/segment.hh	/^        SEGMENT_REG_LS, \/\/ Flat segment$/;"	e	enum:X86ISA::SegmentRegIndex
SEGMENT_REG_MS	./arch/x86/regs/segment.hh	/^        SEGMENT_REG_MS, \/\/ Emulation memory$/;"	e	enum:X86ISA::SegmentRegIndex
SEGMENT_REG_SS	./arch/x86/regs/segment.hh	/^        SEGMENT_REG_SS,$/;"	e	enum:X86ISA::SegmentRegIndex
SEGMENT_REG_TSG	./arch/x86/regs/segment.hh	/^        SEGMENT_REG_TSG, \/\/ Global descriptor table$/;"	e	enum:X86ISA::SegmentRegIndex
SEGMENT_REG_TSL	./arch/x86/regs/segment.hh	/^        SEGMENT_REG_TSL, \/\/ Local descriptor table$/;"	e	enum:X86ISA::SegmentRegIndex
SEG_CS_TYPE_ACCESSED	./cpu/kvm/x86_cpu.cc	62;"	d	file:
SEG_CS_TYPE_READ_ACCESSED	./cpu/kvm/x86_cpu.cc	64;"	d	file:
SEG_SYS_TYPE_TSS_AVAILABLE	./cpu/kvm/x86_cpu.cc	57;"	d	file:
SEG_SYS_TYPE_TSS_BUSY	./cpu/kvm/x86_cpu.cc	59;"	d	file:
SEG_TYPE_BIT_ACCESSED	./cpu/kvm/x86_cpu.cc	68;"	d	file:
SELECT_DEV_BIT	./dev/storage/ide_disk.hh	113;"	d
SELECT_OFFSET	./dev/storage/ide_disk.hh	105;"	d
SENDING_DATA	./dev/i2c/bus.hh	/^        SENDING_DATA,$/;"	e	enum:I2CBus::I2CState
SERIALIZE_ARRAY	./sim/serialize.hh	160;"	d
SERIALIZE_CONTAINER	./sim/serialize.hh	166;"	d
SERIALIZE_ENUM	./sim/serialize.hh	151;"	d
SERIALIZE_EVENT	./sim/serialize.hh	172;"	d
SERIALIZE_OBJ	./sim/serialize.hh	180;"	d
SERIALIZE_OBJPTR	./sim/serialize.hh	183;"	d
SERIALIZE_SCALAR	./sim/serialize.hh	145;"	d
SERIAL_INITIAL	./mem/mem_checker.hh	/^    static const Serial  SERIAL_INITIAL = 0; \/\/!< Initial serial$/;"	m	class:MemChecker
SET1	./mem/packet.cc	62;"	d	file:
SET2	./mem/packet.cc	63;"	d	file:
SET3	./mem/packet.cc	64;"	d	file:
SET4	./mem/packet.cc	65;"	d	file:
SET5	./mem/packet.cc	66;"	d	file:
SET6	./mem/packet.cc	67;"	d	file:
SET_FEATURES	./dev/storage/ide_wdcreg.h	102;"	d
SETranslatingPortProxy	./mem/se_translating_port_proxy.cc	/^SETranslatingPortProxy::SETranslatingPortProxy(MasterPort& port, Process *p,$/;"	f	class:SETranslatingPortProxy
SETranslatingPortProxy	./mem/se_translating_port_proxy.hh	/^class SETranslatingPortProxy : public PortProxy$/;"	c
SF	./arch/arm/faults.hh	/^        SF,    \/\/ DataAbort: width of the accessed register is SixtyFour$/;"	e	enum:ArmISA::ArmFault::AnnotationIDs
SF	./arch/x86/insts/microop.hh	/^            SF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
SFBit	./arch/x86/regs/misc.hh	/^        SFBit = 1 << 7,$/;"	e	enum:X86ISA::CondFlagBit
SGI_MASK	./dev/arm/gic_pl390.hh	/^    static const int SGI_MASK = 0xFFFF0000;$/;"	m	class:Pl390
SGI_MAX	./dev/arm/gic_pl390.hh	/^    static const int SGI_MAX = 16;  \/\/ Number of Software Gen Interrupts$/;"	m	class:Pl390
SH	./arch/sparc/faults.hh	/^        SH = -1,$/;"	e	enum:SparcISA::SparcFaultBase::PrivilegeLevel
SH	./arch/x86/regs/int.hh	/^        SignedBitfield<15,8> SH;$/;"	m	namespace:X86ISA
SHOW_SIM_OUTPUT	./mem/dramsim2_wrapper.cc	/^int SHOW_SIM_OUTPUT = 0;$/;"	v
SIBState	./arch/x86/decoder.hh	/^        SIBState,$/;"	e	enum:X86ISA::Decoder::State
SIGNED	./arch/mips/dsp.hh	/^enum { UNSIGNED, SIGNED };$/;"	e	enum:MipsISA::__anon89
SIMDFloatingPointFault	./arch/x86/faults.hh	/^        SIMDFloatingPointFault() :$/;"	f	class:X86ISA::SIMDFloatingPointFault
SIMDFloatingPointFault	./arch/x86/faults.hh	/^    class SIMDFloatingPointFault : public X86Fault$/;"	c	namespace:X86ISA
SIMD_FMT_L	./arch/mips/dsp.hh	/^    SIMD_FMT_L,    \/\/ long word$/;"	e	enum:MipsISA::__anon85
SIMD_FMT_PH	./arch/mips/dsp.hh	/^    SIMD_FMT_PH,   \/\/ paired halfword$/;"	e	enum:MipsISA::__anon85
SIMD_FMT_QB	./arch/mips/dsp.hh	/^    SIMD_FMT_QB,   \/\/ quad byte$/;"	e	enum:MipsISA::__anon85
SIMD_FMT_W	./arch/mips/dsp.hh	/^    SIMD_FMT_W,    \/\/ word$/;"	e	enum:MipsISA::__anon85
SIMD_LOG2N	./arch/mips/dsp.hh	/^const uint32_t SIMD_LOG2N[SIMD_NUM_FMTS] = { 6, 5, 4, 3 };$/;"	m	namespace:MipsISA
SIMD_MAX_VALS	./arch/mips/dsp.hh	/^const uint32_t SIMD_MAX_VALS = 4;$/;"	m	namespace:MipsISA
SIMD_NBITS	./arch/mips/dsp.hh	/^const uint32_t SIMD_NBITS[SIMD_NUM_FMTS] = { 64, 32, 16, 8 };$/;"	m	namespace:MipsISA
SIMD_NUM_FMTS	./arch/mips/dsp.hh	/^    SIMD_NUM_FMTS$/;"	e	enum:MipsISA::__anon85
SIMD_NVALS	./arch/mips/dsp.hh	/^const uint32_t SIMD_NVALS[SIMD_NUM_FMTS] = { 1, 1, 2, 4 };$/;"	m	namespace:MipsISA
SIMD_REG	./arch/arm/kvm/armv8_cpu.cc	66;"	d	file:
SIMD_Unit	./cpu/o3/FuncUnitConfig.py	/^class SIMD_Unit(FUDesc):$/;"	c
SINGLE_TO_DOUBLE	./arch/arm/types.hh	/^        SINGLE_TO_DOUBLE,$/;"	e	enum:ArmISA::ConvertType
SINGLE_TO_DOUBLE	./arch/mips/types.hh	/^    SINGLE_TO_DOUBLE,$/;"	e	enum:MipsISA::ConvertType
SINGLE_TO_LONG	./arch/arm/types.hh	/^        SINGLE_TO_LONG,$/;"	e	enum:ArmISA::ConvertType
SINGLE_TO_LONG	./arch/mips/types.hh	/^    SINGLE_TO_LONG,$/;"	e	enum:MipsISA::ConvertType
SINGLE_TO_WORD	./arch/arm/types.hh	/^        SINGLE_TO_WORD,$/;"	e	enum:ArmISA::ConvertType
SINGLE_TO_WORD	./arch/mips/types.hh	/^    SINGLE_TO_WORD,$/;"	e	enum:MipsISA::ConvertType
SIPI	./arch/x86/intmessage.hh	/^            SIPI = 6,$/;"	e	enum:X86ISA::DeliveryMode::IntDeliveryMode
SL	./arch/x86/regs/int.hh	/^        SignedBitfield<7, 0> SL;$/;"	m	namespace:X86ISA
SLICC	./mem/slicc/parser.py	/^class SLICC(Grammar):$/;"	c
SMBios	./arch/x86/bios/smbios.hh	/^namespace SMBios$/;"	n	namespace:X86ISA
SMBios	./arch/x86/system.hh	/^    namespace SMBios$/;"	n	namespace:X86ISA
SMBiosHeader	./arch/x86/bios/smbios.hh	/^        SMBiosHeader()$/;"	f	struct:X86ISA::SMBios::SMBiosTable::SMBiosHeader
SMBiosHeader	./arch/x86/bios/smbios.hh	/^    struct SMBiosHeader$/;"	s	class:X86ISA::SMBios::SMBiosTable
SMBiosStructure	./arch/x86/bios/smbios.cc	/^X86ISA::SMBios::SMBiosStructure::SMBiosStructure(Params * p, uint8_t _type) :$/;"	f	class:X86ISA::SMBios::SMBiosStructure
SMBiosStructure	./arch/x86/bios/smbios.hh	/^class SMBiosStructure : public SimObject$/;"	c	namespace:X86ISA::SMBios
SMBiosTable	./arch/x86/bios/smbios.cc	/^X86ISA::SMBios::SMBiosTable::SMBiosTable(Params * p) :$/;"	f	class:X86ISA::SMBios::SMBiosTable
SMBiosTable	./arch/x86/bios/smbios.hh	/^class SMBiosTable : public SimObject$/;"	c	namespace:X86ISA::SMBios
SMI	./arch/x86/intmessage.hh	/^            SMI = 2,$/;"	e	enum:X86ISA::DeliveryMode::IntDeliveryMode
SMT_MAX_THREADS	./cpu/smt.hh	43;"	d
SNHash	./cpu/o3/mem_dep_unit.hh	/^struct SNHash {$/;"	s
SPARC32	./base/loader/object_file.hh	/^        SPARC32,$/;"	e	enum:ObjectFile::Arch
SPARC64	./base/loader/object_file.hh	/^        SPARC64,$/;"	e	enum:ObjectFile::Arch
SPARC64GdbRegCache	./arch/sparc/remote_gdb.hh	/^    class SPARC64GdbRegCache : public BaseGdbRegCache$/;"	c	class:SparcISA::RemoteGDB
SPARCGdbRegCache	./arch/sparc/remote_gdb.hh	/^    class SPARCGdbRegCache : public BaseGdbRegCache$/;"	c	class:SparcISA::RemoteGDB
SPAlignmentCheckEnabled	./arch/arm/utility.cc	/^SPAlignmentCheckEnabled(ThreadContext* tc)$/;"	f	namespace:ArmISA
SPAlignmentFault	./arch/arm/faults.cc	/^SPAlignmentFault::SPAlignmentFault()$/;"	f	class:ArmISA::SPAlignmentFault
SPAlignmentFault	./arch/arm/faults.hh	/^class SPAlignmentFault : public ArmFaultVals<SPAlignmentFault>$/;"	c	namespace:ArmISA
SPDSTS_POLARITY	./dev/net/ns_gige_reg.h	/^SPDSTS_POLARITY(int lnksts)$/;"	f
SPURIOUS_INT	./dev/arm/gic_pl390.hh	/^    static const int SPURIOUS_INT = 1023;$/;"	m	class:Pl390
SQ	./cpu/o3/rename.hh	/^        SQ,$/;"	e	enum:DefaultRename::FullSource
SQEntries	./cpu/o3/O3CPU.py	/^    SQEntries = Param.Unsigned(32, "Number of store queue entries")$/;"	v	class:DerivO3CPU
SQEntries	./cpu/o3/lsq.hh	/^    unsigned SQEntries;$/;"	m	class:LSQ
SQEntries	./cpu/o3/lsq_unit.hh	/^    unsigned SQEntries;$/;"	m	class:LSQUnit
SQEntry	./cpu/o3/lsq_unit.hh	/^        SQEntry()$/;"	f	struct:LSQUnit::SQEntry
SQEntry	./cpu/o3/lsq_unit.hh	/^        SQEntry(DynInstPtr &_inst)$/;"	f	struct:LSQUnit::SQEntry
SQEntry	./cpu/o3/lsq_unit.hh	/^    struct SQEntry {$/;"	s	class:LSQUnit
SR	./arch/x86/regs/int.hh	/^        SignedBitfield<63,0> SR;$/;"	m	namespace:X86ISA
SRR	./dev/net/ns_gige_reg.h	/^    SRR =               0x58,$/;"	e	enum:DeviceRegisterAddress
SRRCTL	./dev/net/i8254xGBe_defs.hh	/^    struct SRRCTL : public Reg<uint32_t> { \/\/ 0x280C SRRCTL Register$/;"	s	struct:iGbReg::Regs
SRT	./arch/arm/faults.hh	/^        SRT,   \/\/ DataAbort: Syndrome Register Transfer$/;"	e	enum:ArmISA::ArmFault::AnnotationIDs
SS	./arch/x86/decoder_tables.cc	/^    const uint8_t SS = SSOverride;$/;"	m	namespace:X86ISA	file:
SSDReadDone	./dev/arm/ufs_device.cc	/^UFSHostDevice::UFSSCSIDevice::SSDReadDone()$/;"	f	class:UFSHostDevice::UFSSCSIDevice
SSDReadInfo	./dev/arm/ufs_device.hh	/^        std::deque<struct transferInfo> SSDReadInfo;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
SSDReadPending	./dev/arm/ufs_device.hh	/^    std::deque<struct transferInfo> SSDReadPending;$/;"	m	class:UFSHostDevice
SSDReadStart	./dev/arm/ufs_device.cc	/^UFSHostDevice::UFSSCSIDevice::SSDReadStart(uint32_t total_read)$/;"	f	class:UFSHostDevice::UFSSCSIDevice
SSDWriteDone	./dev/arm/ufs_device.cc	/^UFSHostDevice::UFSSCSIDevice::SSDWriteDone()$/;"	f	class:UFSHostDevice::UFSSCSIDevice
SSDWriteDoneInfo	./dev/arm/ufs_device.hh	/^        std::deque<struct transferInfo> SSDWriteDoneInfo;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
SSDWriteStart	./dev/arm/ufs_device.cc	/^UFSHostDevice::UFSSCSIDevice::SSDWriteStart()$/;"	f	class:UFSHostDevice::UFSSCSIDevice
SSDWriteinfo	./dev/arm/ufs_device.hh	/^    std::deque<struct transferInfo> SSDWriteinfo;$/;"	m	class:UFSHostDevice
SSE	./arch/arm/faults.hh	/^        SSE,   \/\/ DataAbort: Syndrome Sign Extend$/;"	e	enum:ArmISA::ArmFault::AnnotationIDs
SSI	./dev/sparc/iob.hh	/^        SSI = 2,$/;"	e	enum:Iob::DeviceId
SSID	./cpu/o3/store_set.hh	/^    typedef unsigned SSID;$/;"	t	class:StoreSet
SSIT	./cpu/o3/store_set.hh	/^    std::vector<SSID> SSIT;$/;"	m	class:StoreSet
SSITSize	./cpu/o3/O3CPU.py	/^    SSITSize = Param.Unsigned(1024, "Store set ID table size")$/;"	v	class:DerivO3CPU
SSITSize	./cpu/o3/store_set.hh	/^    int SSITSize;$/;"	m	class:StoreSet
SSI_IEEE_FP_CONTROL	./arch/alpha/linux/linux.hh	/^    static const unsigned SSI_IEEE_FP_CONTROL = 14; \/\/!< ieee_set_fp_control()$/;"	m	class:AlphaLinux
SSI_IEEE_FP_CONTROL	./arch/alpha/tru64/tru64.hh	/^    static const unsigned SSI_IEEE_FP_CONTROL = 14; \/\/!< ieee_set_fp_control()$/;"	m	class:AlphaTru64
SSI_IEEE_FP_CONTROL	./arch/mips/linux/linux.hh	/^    static const unsigned SSI_IEEE_FP_CONTROL = 14; \/\/!< ieee_set_fp_control()$/;"	m	class:MipsLinux
SSOverride	./arch/x86/types.hh	/^        SSOverride,$/;"	e	enum:X86ISA::Prefixes
STATE_CPSR	./arch/arm/nativetrace.hh	/^        STATE_CPSR,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F0	./arch/arm/nativetrace.hh	/^        STATE_F0, STATE_F1, STATE_F2, STATE_F3, STATE_F4, STATE_F5, STATE_F6,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F1	./arch/arm/nativetrace.hh	/^        STATE_F0, STATE_F1, STATE_F2, STATE_F3, STATE_F4, STATE_F5, STATE_F6,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F10	./arch/arm/nativetrace.hh	/^        STATE_F7, STATE_F8, STATE_F9, STATE_F10, STATE_F11, STATE_F12,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F11	./arch/arm/nativetrace.hh	/^        STATE_F7, STATE_F8, STATE_F9, STATE_F10, STATE_F11, STATE_F12,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F12	./arch/arm/nativetrace.hh	/^        STATE_F7, STATE_F8, STATE_F9, STATE_F10, STATE_F11, STATE_F12,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F13	./arch/arm/nativetrace.hh	/^        STATE_F13, STATE_F14, STATE_F15, STATE_F16, STATE_F17, STATE_F18,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F14	./arch/arm/nativetrace.hh	/^        STATE_F13, STATE_F14, STATE_F15, STATE_F16, STATE_F17, STATE_F18,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F15	./arch/arm/nativetrace.hh	/^        STATE_F13, STATE_F14, STATE_F15, STATE_F16, STATE_F17, STATE_F18,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F16	./arch/arm/nativetrace.hh	/^        STATE_F13, STATE_F14, STATE_F15, STATE_F16, STATE_F17, STATE_F18,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F17	./arch/arm/nativetrace.hh	/^        STATE_F13, STATE_F14, STATE_F15, STATE_F16, STATE_F17, STATE_F18,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F18	./arch/arm/nativetrace.hh	/^        STATE_F13, STATE_F14, STATE_F15, STATE_F16, STATE_F17, STATE_F18,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F19	./arch/arm/nativetrace.hh	/^        STATE_F19, STATE_F20, STATE_F21, STATE_F22, STATE_F23, STATE_F24,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F2	./arch/arm/nativetrace.hh	/^        STATE_F0, STATE_F1, STATE_F2, STATE_F3, STATE_F4, STATE_F5, STATE_F6,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F20	./arch/arm/nativetrace.hh	/^        STATE_F19, STATE_F20, STATE_F21, STATE_F22, STATE_F23, STATE_F24,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F21	./arch/arm/nativetrace.hh	/^        STATE_F19, STATE_F20, STATE_F21, STATE_F22, STATE_F23, STATE_F24,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F22	./arch/arm/nativetrace.hh	/^        STATE_F19, STATE_F20, STATE_F21, STATE_F22, STATE_F23, STATE_F24,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F23	./arch/arm/nativetrace.hh	/^        STATE_F19, STATE_F20, STATE_F21, STATE_F22, STATE_F23, STATE_F24,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F24	./arch/arm/nativetrace.hh	/^        STATE_F19, STATE_F20, STATE_F21, STATE_F22, STATE_F23, STATE_F24,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F25	./arch/arm/nativetrace.hh	/^        STATE_F25, STATE_F26, STATE_F27, STATE_F28, STATE_F29, STATE_F30,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F26	./arch/arm/nativetrace.hh	/^        STATE_F25, STATE_F26, STATE_F27, STATE_F28, STATE_F29, STATE_F30,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F27	./arch/arm/nativetrace.hh	/^        STATE_F25, STATE_F26, STATE_F27, STATE_F28, STATE_F29, STATE_F30,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F28	./arch/arm/nativetrace.hh	/^        STATE_F25, STATE_F26, STATE_F27, STATE_F28, STATE_F29, STATE_F30,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F29	./arch/arm/nativetrace.hh	/^        STATE_F25, STATE_F26, STATE_F27, STATE_F28, STATE_F29, STATE_F30,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F3	./arch/arm/nativetrace.hh	/^        STATE_F0, STATE_F1, STATE_F2, STATE_F3, STATE_F4, STATE_F5, STATE_F6,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F30	./arch/arm/nativetrace.hh	/^        STATE_F25, STATE_F26, STATE_F27, STATE_F28, STATE_F29, STATE_F30,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F31	./arch/arm/nativetrace.hh	/^        STATE_F31, STATE_FPSCR,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F4	./arch/arm/nativetrace.hh	/^        STATE_F0, STATE_F1, STATE_F2, STATE_F3, STATE_F4, STATE_F5, STATE_F6,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F5	./arch/arm/nativetrace.hh	/^        STATE_F0, STATE_F1, STATE_F2, STATE_F3, STATE_F4, STATE_F5, STATE_F6,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F6	./arch/arm/nativetrace.hh	/^        STATE_F0, STATE_F1, STATE_F2, STATE_F3, STATE_F4, STATE_F5, STATE_F6,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F7	./arch/arm/nativetrace.hh	/^        STATE_F7, STATE_F8, STATE_F9, STATE_F10, STATE_F11, STATE_F12,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F8	./arch/arm/nativetrace.hh	/^        STATE_F7, STATE_F8, STATE_F9, STATE_F10, STATE_F11, STATE_F12,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_F9	./arch/arm/nativetrace.hh	/^        STATE_F7, STATE_F8, STATE_F9, STATE_F10, STATE_F11, STATE_F12,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_FP	./arch/arm/nativetrace.hh	/^        STATE_FP = STATE_R11,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_FPSCR	./arch/arm/nativetrace.hh	/^        STATE_F31, STATE_FPSCR,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_LR	./arch/arm/nativetrace.hh	/^        STATE_LR = STATE_R14,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_NUMVALS	./arch/arm/nativetrace.hh	/^        STATE_NUMVALS$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_PC	./arch/arm/nativetrace.hh	/^        STATE_PC = STATE_R15,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_R0	./arch/arm/nativetrace.hh	/^        STATE_R0,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_R1	./arch/arm/nativetrace.hh	/^        STATE_R1,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_R10	./arch/arm/nativetrace.hh	/^        STATE_R10,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_R11	./arch/arm/nativetrace.hh	/^        STATE_R11,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_R12	./arch/arm/nativetrace.hh	/^        STATE_R12,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_R13	./arch/arm/nativetrace.hh	/^        STATE_R13,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_R14	./arch/arm/nativetrace.hh	/^        STATE_R14,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_R15	./arch/arm/nativetrace.hh	/^        STATE_R15,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_R2	./arch/arm/nativetrace.hh	/^        STATE_R2,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_R3	./arch/arm/nativetrace.hh	/^        STATE_R3,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_R4	./arch/arm/nativetrace.hh	/^        STATE_R4,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_R5	./arch/arm/nativetrace.hh	/^        STATE_R5,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_R6	./arch/arm/nativetrace.hh	/^        STATE_R6,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_R7	./arch/arm/nativetrace.hh	/^        STATE_R7,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_R8	./arch/arm/nativetrace.hh	/^        STATE_R8,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_R9	./arch/arm/nativetrace.hh	/^        STATE_R9,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATE_SP	./arch/arm/nativetrace.hh	/^        STATE_SP = STATE_R13,$/;"	e	enum:Trace::ArmNativeTrace::StateID
STATIC_ERR	./base/atomicio.hh	66;"	d
STATIC_MSG	./base/atomicio.hh	52;"	d
STATS_REGS_SIZE	./dev/net/i8254xGBe_defs.hh	/^const uint32_t STATS_REGS_SIZE           = 0x228;$/;"	m	namespace:iGbReg
STATUS	./dev/net/i8254xGBe_defs.hh	/^    struct STATUS : public Reg<uint32_t> { \/\/ 0x0008 STATUS Register$/;"	s	struct:iGbReg::Regs
STATUS_BSY_BIT	./dev/storage/ide_disk.hh	116;"	d
STATUS_DF_BIT	./dev/storage/ide_disk.hh	120;"	d
STATUS_DRDY_BIT	./dev/storage/ide_disk.hh	117;"	d
STATUS_DRQ_BIT	./dev/storage/ide_disk.hh	118;"	d
STATUS_OFFSET	./dev/storage/ide_disk.hh	107;"	d
STATUS_SEEK_BIT	./dev/storage/ide_disk.hh	119;"	d
STDFMemAddressNotAligned	./arch/sparc/faults.hh	/^class STDFMemAddressNotAligned : public SparcFault<STDFMemAddressNotAligned> {};$/;"	c	namespace:SparcISA
STQFMemAddressNotAligned	./arch/sparc/faults.hh	/^class STQFMemAddressNotAligned : public SparcFault<STQFMemAddressNotAligned> {};$/;"	c	namespace:SparcISA
STRZ	./arch/x86/insts/microop.hh	/^            STRZ,$/;"	e	enum:X86ISA::ConditionTests::CondTest
STRZnEZF	./arch/x86/insts/microop.hh	/^            STRZnEZF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
STRnZnEZF	./arch/x86/insts/microop.hh	/^            STRnZnEZF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
STS	./arch/sparc/miscregs.hh	/^struct STS$/;"	s	namespace:SparcISA
ST_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum flit_stage {I_, VA_, SA_, ST_, LT_, NUM_FLIT_STAGE_};$/;"	e	enum:flit_stage
STable	./base/loader/symtab.hh	/^    typedef std::map<std::string, Addr> STable;$/;"	t	class:SymbolTable
STickCompareEvent	./arch/sparc/isa.hh	/^            &ISA::processSTickCompare> STickCompareEvent;$/;"	t	class:SparcISA::ISA
SUM_DEMAND	./mem/cache/base.cc	191;"	d	file:
SUM_NON_DEMAND	./mem/cache/base.cc	196;"	d	file:
SWSM	./dev/net/i8254xGBe_defs.hh	/^    struct SWSM : public Reg<uint32_t> { \/\/ 0x5B50 SWSM register$/;"	s	struct:iGbReg::Regs
SWallocator_d	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.cc	/^SWallocator_d::SWallocator_d(Router_d *router)$/;"	f	class:SWallocator_d
SWallocator_d	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.hh	/^class SWallocator_d : public Consumer$/;"	c
SX	./arch/x86/regs/int.hh	/^        SignedBitfield<15,0> SX;$/;"	m	namespace:X86ISA
SXTB	./arch/arm/types.hh	/^        SXTB = 4,$/;"	e	enum:ArmISA::ArmExtendType
SXTH	./arch/arm/types.hh	/^        SXTH = 5,$/;"	e	enum:ArmISA::ArmExtendType
SXTW	./arch/arm/types.hh	/^        SXTW = 6,$/;"	e	enum:ArmISA::ArmExtendType
SXTX	./arch/arm/types.hh	/^        SXTX = 7$/;"	e	enum:ArmISA::ArmExtendType
SYMR	./base/loader/coff_sym.h	/^} SYMR, *pSYMR;$/;"	t	typeref:struct:ecoff_sym
SYS	./python/m5/util/dot_writer.py	/^    SYS = 0$/;"	v	class:NodeType
SYS_SEGMENT_REG_IDTR	./arch/x86/regs/segment.hh	/^        SYS_SEGMENT_REG_IDTR,$/;"	e	enum:X86ISA::SegmentRegIndex
SYS_SEGMENT_REG_TR	./arch/x86/regs/segment.hh	/^        SYS_SEGMENT_REG_TR,$/;"	e	enum:X86ISA::SegmentRegIndex
SZnZF	./arch/x86/insts/microop.hh	/^            SZnZF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
S_IOERR	./dev/virtio/block.hh	/^    static const Status S_IOERR = 1;$/;"	m	class:VirtIOBlock
S_OK	./dev/virtio/block.hh	/^    static const Status S_OK = 0;$/;"	m	class:VirtIOBlock
S_UNSUPP	./dev/virtio/block.hh	/^    static const Status S_UNSUPP = 2;$/;"	m	class:VirtIOBlock
SafeRead	./dev/storage/disk_image.cc	/^SafeRead(ifstream &stream, T &data)$/;"	f
SafeRead	./dev/storage/disk_image.cc	/^SafeRead(ifstream &stream, void *data, int count)$/;"	f
SafeReadSwap	./dev/storage/disk_image.cc	/^SafeReadSwap(ifstream &stream, T &data)$/;"	f
SafeWrite	./dev/storage/disk_image.cc	/^SafeWrite(ofstream &stream, const T &data)$/;"	f
SafeWrite	./dev/storage/disk_image.cc	/^SafeWrite(ofstream &stream, const void *data, int count)$/;"	f
SafeWriteSwap	./dev/storage/disk_image.cc	/^SafeWriteSwap(ofstream &stream, const T &data)$/;"	f
SampleRate	./dev/x86/i8042.hh	/^        SampleRate = 0xF3,$/;"	e	enum:X86ISA::PS2Mouse::Command
SampleStor	./base/statistics.hh	/^    SampleStor(Info *info)$/;"	f	class:Stats::SampleStor
SampleStor	./base/statistics.hh	/^class SampleStor$/;"	c	namespace:Stats
SatCounter	./cpu/pred/sat_counter.hh	/^    SatCounter()$/;"	f	class:SatCounter
SatCounter	./cpu/pred/sat_counter.hh	/^    SatCounter(unsigned bits)$/;"	f	class:SatCounter
SatCounter	./cpu/pred/sat_counter.hh	/^    SatCounter(unsigned bits, uint8_t initial_val)$/;"	f	class:SatCounter
SatCounter	./cpu/pred/sat_counter.hh	/^class SatCounter$/;"	c
ScCache	./base/cp_annotate.hh	/^    typedef std::vector<ScHCache> ScCache;$/;"	t	class:CPA
ScHCache	./base/cp_annotate.hh	/^    typedef std::unordered_map<Id, AnnDataPtr> ScHCache;$/;"	t	class:CPA
Scalar	./base/statistics.hh	/^class Scalar : public ScalarBase<Scalar, StatStor>$/;"	c	namespace:Stats
ScalarBase	./base/statistics.hh	/^    ScalarBase()$/;"	f	class:Stats::ScalarBase
ScalarBase	./base/statistics.hh	/^class ScalarBase : public DataWrap<Derived, ScalarInfoProxy>$/;"	c	namespace:Stats
ScalarInfo	./base/stats/info.hh	/^class ScalarInfo : public Info$/;"	c	namespace:Stats
ScalarInfoProxy	./base/statistics.hh	/^    ScalarInfoProxy(Stat &stat) : InfoProxy<Stat, ScalarInfo>(stat) {}$/;"	f	class:Stats::ScalarInfoProxy
ScalarInfoProxy	./base/statistics.hh	/^class ScalarInfoProxy : public InfoProxy<Stat, ScalarInfo>$/;"	c	namespace:Stats
ScalarPrint	./base/stats/text.cc	/^struct ScalarPrint$/;"	s	namespace:Stats	file:
ScalarProxy	./base/statistics.hh	/^    ScalarProxy(Stat &s, off_type i)$/;"	f	class:Stats::ScalarProxy
ScalarProxy	./base/statistics.hh	/^    ScalarProxy(const ScalarProxy &sp)$/;"	f	class:Stats::ScalarProxy
ScalarProxy	./base/statistics.hh	/^class ScalarProxy$/;"	c	namespace:Stats
ScalarProxyNode	./base/statistics.hh	/^    ScalarProxyNode(const ScalarProxy<Stat> &p)$/;"	f	class:Stats::ScalarProxyNode
ScalarProxyNode	./base/statistics.hh	/^class ScalarProxyNode : public Node$/;"	c	namespace:Stats
ScalarStatNode	./base/statistics.hh	/^    ScalarStatNode(const ScalarInfo *d) : data(d), vresult(1) {}$/;"	f	class:Stats::ScalarStatNode
ScalarStatNode	./base/statistics.hh	/^class ScalarStatNode : public Node$/;"	c	namespace:Stats
Scale1to1	./dev/x86/i8042.hh	/^        Scale1to1 = 0xE6,$/;"	e	enum:X86ISA::PS2Mouse::Command
Scale2to1	./dev/x86/i8042.hh	/^        Scale2to1 = 0xE7,$/;"	e	enum:X86ISA::PS2Mouse::Command
Scheduled	./sim/eventq.hh	/^    static const FlagsType Scheduled     = 0x0002; \/\/ has been scheduled$/;"	m	class:EventBase
ScopedCheckpointSection	./sim/serialize.hh	/^        ScopedCheckpointSection(CP &cp, const char *name) {$/;"	f	class:Serializable::ScopedCheckpointSection
ScopedCheckpointSection	./sim/serialize.hh	/^        ScopedCheckpointSection(CP &cp, const std::string &name) {$/;"	f	class:Serializable::ScopedCheckpointSection
ScopedCheckpointSection	./sim/serialize.hh	/^    class ScopedCheckpointSection {$/;"	c	class:Serializable
ScopedMigration	./sim/eventq.hh	/^        ScopedMigration(EventQueue *_new_eq)$/;"	f	class:EventQueue::ScopedMigration
ScopedMigration	./sim/eventq.hh	/^    class ScopedMigration$/;"	c	class:EventQueue
ScopedRelease	./sim/eventq.hh	/^        ScopedRelease(EventQueue *_eq)$/;"	f	class:EventQueue::ScopedRelease
ScopedRelease	./sim/eventq.hh	/^    class ScopedRelease$/;"	c	class:EventQueue
Scoreboard	./cpu/minor/scoreboard.hh	/^    Scoreboard(const std::string &name) :$/;"	f	class:Minor::Scoreboard
Scoreboard	./cpu/minor/scoreboard.hh	/^class Scoreboard : public Named$/;"	c	namespace:Minor
Scoreboard	./cpu/o3/scoreboard.cc	/^Scoreboard::Scoreboard(const std::string &_my_name,$/;"	f	class:Scoreboard
Scoreboard	./cpu/o3/scoreboard.hh	/^class Scoreboard$/;"	c
Secondary	./arch/sparc/tlb.hh	/^        Secondary = 1,$/;"	e	enum:SparcISA::TLB::ContextType
SecondaryTiming	./dev/storage/ide_ctrl.cc	/^    SecondaryTiming = 0x42,$/;"	e	enum:ConfRegOffset	file:
Section	./arch/arm/table_walker.hh	/^            Section,$/;"	e	enum:ArmISA::TableWalker::L1Descriptor::EntryType
Section	./base/inifile.hh	/^        Section()$/;"	f	class:IniFile::Section
Section	./base/inifile.hh	/^    class Section$/;"	c	class:IniFile
Section	./base/loader/object_file.hh	/^    struct Section {$/;"	s	class:ObjectFile
SectionTable	./base/inifile.hh	/^    typedef std::unordered_map<std::string, Section *> SectionTable;$/;"	t	class:IniFile
Sector	./dev/storage/disk_image.hh	/^    struct Sector {$/;"	s	class:CowDiskImage
SectorSize	./dev/storage/disk_image.hh	46;"	d
SectorTable	./dev/storage/disk_image.hh	/^    typedef std::unordered_map<uint64_t, Sector *> SectorTable;$/;"	t	class:CowDiskImage
SecureMonitorCall	./arch/arm/faults.hh	/^    SecureMonitorCall(ExtMachInst _machInst) :$/;"	f	class:ArmISA::SecureMonitorCall
SecureMonitorCall	./arch/arm/faults.hh	/^class SecureMonitorCall : public ArmFaultVals<SecureMonitorCall>$/;"	c	namespace:ArmISA
SecureMonitorTrap	./arch/arm/faults.hh	/^    SecureMonitorTrap(ExtMachInst _machInst, uint32_t _iss,$/;"	f	class:ArmISA::SecureMonitorTrap
SecureMonitorTrap	./arch/arm/faults.hh	/^class SecureMonitorTrap : public ArmFaultVals<SecureMonitorTrap>$/;"	c	namespace:ArmISA
SecurityException	./arch/x86/faults.hh	/^        SecurityException() :$/;"	f	class:X86ISA::SecurityException
SecurityException	./arch/x86/faults.hh	/^    class SecurityException : public X86FaultBase$/;"	c	namespace:X86ISA
SegKPMBase	./arch/sparc/isa_traits.hh	/^const Addr SegKPMBase = ULL(0xfffffac000000000);$/;"	m	namespace:SparcISA
SegKPMEnd	./arch/sparc/isa_traits.hh	/^const Addr SegKPMEnd  = ULL(0xfffffffc00000000);$/;"	m	namespace:SparcISA
Segment	./base/loader/elf_object.hh	/^    typedef ObjectFile::Section Segment;$/;"	t	class:ElfObject
SegmentFlagMask	./arch/x86/ldstflags.hh	/^    const Request::FlagsType M5_VAR_USED SegmentFlagMask = mask(4);$/;"	m	namespace:X86ISA
SegmentNotPresent	./arch/x86/faults.hh	/^        SegmentNotPresent(uint32_t _errorCode) :$/;"	f	class:X86ISA::SegmentNotPresent
SegmentNotPresent	./arch/x86/faults.hh	/^    class SegmentNotPresent : public X86Fault$/;"	c	namespace:X86ISA
SegmentRegIndex	./arch/x86/regs/segment.hh	/^    enum SegmentRegIndex$/;"	g	namespace:X86ISA
SelectCounter0	./dev/intel_8254_timer.hh	/^        SelectCounter0,$/;"	e	enum:Intel8254Timer::SelectVal
SelectCounter1	./dev/intel_8254_timer.hh	/^        SelectCounter1,$/;"	e	enum:Intel8254Timer::SelectVal
SelectCounter2	./dev/intel_8254_timer.hh	/^        SelectCounter2,$/;"	e	enum:Intel8254Timer::SelectVal
SelectVal	./dev/intel_8254_timer.hh	/^    enum SelectVal {$/;"	g	class:Intel8254Timer
Self	./python/m5/proxy.py	/^Self = ProxyFactory(search_self = True, search_up = False)$/;"	v
SelfStallingPipeline	./cpu/minor/buffers.hh	/^    SelfStallingPipeline(const std::string &name,$/;"	f	class:Minor::SelfStallingPipeline
SelfStallingPipeline	./cpu/minor/buffers.hh	/^class SelfStallingPipeline : public MinorBuffer<ElemType, ReportTraits>$/;"	c	namespace:Minor
SelfTest	./dev/x86/i8042.hh	/^        SelfTest = 0xAA,$/;"	e	enum:X86ISA::I8042::Command
SelfTestPass	./dev/ps2.hh	/^    SelfTestPass    = 0xAA,$/;"	e	enum:Ps2::__anon4
SenderState	./cpu/testers/rubytest/Check.cc	/^typedef RubyTester::SenderState SenderState;$/;"	t	file:
SenderState	./cpu/testers/rubytest/RubyTester.hh	/^        SenderState(Addr addr, int size) : subBlock(addr, size) {}$/;"	f	struct:RubyTester::SenderState
SenderState	./cpu/testers/rubytest/RubyTester.hh	/^    struct SenderState : public Packet::SenderState$/;"	s	class:RubyTester
SenderState	./mem/packet.hh	/^        SenderState() : predecessor(NULL) {}$/;"	f	struct:Packet::SenderState
SenderState	./mem/packet.hh	/^    struct SenderState$/;"	s	class:Packet
SenderState	./mem/ruby/slicc_interface/AbstractController.hh	/^        SenderState(MachineID _id) : id(_id)$/;"	f	struct:AbstractController::SenderState
SenderState	./mem/ruby/slicc_interface/AbstractController.hh	/^    struct SenderState : public Packet::SenderState$/;"	s	class:AbstractController
SenderState	./mem/ruby/system/RubyPort.hh	/^        SenderState(MemSlavePort * _port) : port(_port)$/;"	f	struct:RubyPort::SenderState
SenderState	./mem/ruby/system/RubyPort.hh	/^    struct SenderState : public Packet::SenderState$/;"	s	class:RubyPort
SeqNumMapIt	./cpu/o3/store_set.hh	/^    typedef std::map<InstSeqNum, int, ltseqnum>::iterator SeqNumMapIt;$/;"	t	class:StoreSet
SeqNumRegPair	./cpu/o3/probe/elastic_trace.hh	/^    typedef typename std::pair<InstSeqNum, PhysRegIndex> SeqNumRegPair;$/;"	t	class:ElasticTrace
SeqNumRegPair	./cpu/o3/rename.hh	/^    typedef typename std::pair<InstSeqNum, short int> SeqNumRegPair;$/;"	t	class:DefaultRename
Sequencer	./mem/ruby/system/Sequencer.cc	/^Sequencer::Sequencer(const Params *p)$/;"	f	class:Sequencer
Sequencer	./mem/ruby/system/Sequencer.hh	/^class Sequencer : public RubyPort$/;"	c
SequencerRequest	./mem/ruby/system/Sequencer.hh	/^    SequencerRequest(PacketPtr _pkt, RubyRequestType _m_type,$/;"	f	struct:SequencerRequest
SequencerRequest	./mem/ruby/system/Sequencer.hh	/^struct SequencerRequest$/;"	s
SequencerWakeupEvent	./mem/ruby/system/Sequencer.hh	/^        SequencerWakeupEvent(Sequencer *_seq) : m_sequencer_ptr(_seq) {}$/;"	f	class:Sequencer::SequencerWakeupEvent
SequencerWakeupEvent	./mem/ruby/system/Sequencer.hh	/^    class SequencerWakeupEvent : public Event$/;"	c	class:Sequencer
Serial	./mem/mem_checker.hh	/^    typedef uint64_t Serial;$/;"	t	class:MemChecker
SerialLink	./mem/SerialLink.py	/^class SerialLink(MemObject):$/;"	c
SerialLink	./mem/serial_link.cc	/^SerialLink::SerialLink(SerialLinkParams *p)$/;"	f	class:SerialLink
SerialLink	./mem/serial_link.hh	/^class SerialLink : public MemObject$/;"	c
SerialLinkMasterPort	./mem/serial_link.cc	/^SerialLink::SerialLinkMasterPort::SerialLinkMasterPort(const std::string&$/;"	f	class:SerialLink::SerialLinkMasterPort
SerialLinkMasterPort	./mem/serial_link.hh	/^    class SerialLinkMasterPort : public MasterPort$/;"	c	class:SerialLink
SerialLinkSlavePort	./mem/serial_link.cc	/^SerialLink::SerialLinkSlavePort::SerialLinkSlavePort(const std::string& _name,$/;"	f	class:SerialLink::SerialLinkSlavePort
SerialLinkSlavePort	./mem/serial_link.hh	/^    class SerialLinkSlavePort : public SlavePort$/;"	c	class:SerialLink
SerialTag	./arch/arm/linux/atag.hh	/^    SerialTag = 0x54410006,$/;"	e	enum:__anon73
Serializable	./sim/serialize.cc	/^Serializable::Serializable()$/;"	f	class:Serializable
Serializable	./sim/serialize.hh	/^class Serializable$/;"	c
SerializeAfter	./cpu/base_dyn_inst.hh	/^        SerializeAfter,          \/\/\/ Needs to serialize instructions behind it$/;"	e	enum:BaseDynInst::Status
SerializeBefore	./cpu/base_dyn_inst.hh	/^        SerializeBefore,         \/\/\/ Needs to serialize on$/;"	e	enum:BaseDynInst::Status
SerializeHandled	./cpu/base_dyn_inst.hh	/^        SerializeHandled,        \/\/\/ Serialization has been handled$/;"	e	enum:BaseDynInst::Status
SerializeStall	./cpu/o3/rename.hh	/^        SerializeStall$/;"	e	enum:DefaultRename::ThreadStatus
Serialize_Pri	./sim/eventq.hh	/^    static const Priority Serialize_Pri =               32;$/;"	m	class:EventBase
SeriesRequestGenerator	./cpu/testers/directedtest/RubyDirectedTester.py	/^class SeriesRequestGenerator(DirectedGenerator):$/;"	c
SeriesRequestGenerator	./cpu/testers/directedtest/SeriesRequestGenerator.cc	/^SeriesRequestGenerator::SeriesRequestGenerator(const Params *p)$/;"	f	class:SeriesRequestGenerator
SeriesRequestGenerator	./cpu/testers/directedtest/SeriesRequestGenerator.hh	/^class SeriesRequestGenerator : public DirectedGenerator $/;"	c
ServerBell	./base/vnc/vncserver.hh	/^        ServerBell                  = 2,$/;"	e	enum:VncServer::ServerMessages
ServerCutText	./base/vnc/vncserver.hh	/^        ServerCutText               = 3$/;"	e	enum:VncServer::ServerMessages
ServerCutText	./base/vnc/vncserver.hh	/^    struct ServerCutText {$/;"	s	class:VncServer
ServerFrameBufferUpdate	./base/vnc/vncserver.hh	/^        ServerFrameBufferUpdate     = 0,$/;"	e	enum:VncServer::ServerMessages
ServerInitMsg	./base/vnc/vncserver.hh	/^    struct ServerInitMsg {$/;"	s	class:VncServer
ServerMessages	./base/vnc/vncserver.hh	/^    enum ServerMessages {$/;"	g	class:VncServer
ServerSetColorMapEntries	./base/vnc/vncserver.hh	/^        ServerSetColorMapEntries    = 1,$/;"	e	enum:VncServer::ServerMessages
Set	./mem/ruby/common/Set.hh	/^    Set() : m_nSize(0) {}$/;"	f	class:Set
Set	./mem/ruby/common/Set.hh	/^    Set(const Set& obj) : m_nSize(obj.m_nSize), bits(obj.bits) {}$/;"	f	class:Set
Set	./mem/ruby/common/Set.hh	/^    Set(int size) : m_nSize(size)$/;"	f	class:Set
Set	./mem/ruby/common/Set.hh	/^class Set$/;"	c
SetDefaults	./dev/ps2.hh	/^    SetDefaults     = 0xf6,$/;"	e	enum:Ps2::__anon4
SetRate	./dev/ps2.hh	/^    SetRate         = 0xf3,$/;"	e	enum:Ps2::__anon4
SetResolution	./dev/ps2.hh	/^    SetResolution   = 0xe8,$/;"	e	enum:Ps2::__anon4
SetResolution	./dev/x86/i8042.hh	/^        SetResolution = 0xE8,$/;"	e	enum:X86ISA::PS2Mouse::Command
SetScaling1_1	./dev/ps2.hh	/^    SetScaling1_1   = 0xe6,$/;"	e	enum:Ps2::__anon4
SetScaling1_2	./dev/ps2.hh	/^    SetScaling1_2   = 0xe7,$/;"	e	enum:Ps2::__anon4
SetStatusLed	./dev/ps2.hh	/^    SetStatusLed    = 0xed,$/;"	e	enum:Ps2::__anon4
SetType	./mem/cache/tags/base_set_assoc.hh	/^    typedef CacheSet<CacheBlk> SetType;$/;"	t	class:BaseSetAssoc
ShiftKey	./dev/ps2.cc	/^const uint8_t ShiftKey = 0x12;$/;"	m	namespace:Ps2	file:
ShouldntHappen	./arch/sparc/faults.hh	/^        ShouldntHappen = SH$/;"	e	enum:SparcISA::SparcFaultBase::PrivilegeLevel
SideEffect	./arch/sparc/tlb.hh	/^        SideEffect = 0x2,$/;"	e	enum:SparcISA::TLB::FaultTypes
SignedBitfield	./base/bitunion.hh	/^        class SignedBitfield : public BitfieldBase<Type>$/;"	c	class:BitfieldBackend::SignedBitfieldTypes
SignedBitfieldRO	./base/bitunion.hh	/^        class SignedBitfieldRO : public SignedBitfield<first, last>$/;"	c	class:BitfieldBackend::SignedBitfieldTypes
SignedBitfieldTypes	./base/bitunion.hh	/^    class SignedBitfieldTypes$/;"	c	namespace:BitfieldBackend
SignedBitfieldWO	./base/bitunion.hh	/^        class SignedBitfieldWO : public SignedBitfield<first, last>$/;"	c	class:BitfieldBackend::SignedBitfieldTypes
SignedSubBitUnion	./base/bitunion.hh	321;"	d
SimClock	./sim/core.cc	/^namespace SimClock {$/;"	n	file:
SimClock	./sim/core.hh	/^namespace SimClock {$/;"	n
SimObject	./python/m5/SimObject.py	/^class SimObject(object):$/;"	c
SimObject	./sim/sim_object.cc	/^SimObject::SimObject(const Params *p)$/;"	f	class:SimObject
SimObject	./sim/sim_object.hh	/^class SimObject : public EventManager, public Serializable, public Drainable$/;"	c
SimObjectList	./sim/sim_object.hh	/^    typedef std::vector<SimObject *> SimObjectList;$/;"	t	class:SimObject
SimObjectResolver	./sim/cxx_manager.hh	/^        SimObjectResolver(CxxConfigManager &configManager_) :$/;"	f	class:CxxConfigManager::SimObjectResolver
SimObjectResolver	./sim/cxx_manager.hh	/^    class SimObjectResolver : public ::SimObjectResolver$/;"	c	class:CxxConfigManager
SimObjectResolver	./sim/sim_object.hh	/^class SimObjectResolver$/;"	c
SimObjectVector	./python/m5/params.py	/^class SimObjectVector(VectorParamValue):$/;"	c
SimPoint	./cpu/simple/probes/SimPoint.py	/^class SimPoint(ProbeListenerObject):$/;"	c
SimPoint	./cpu/simple/probes/simpoint.cc	/^SimPoint::SimPoint(const SimPointParams *p)$/;"	f	class:SimPoint
SimPoint	./cpu/simple/probes/simpoint.hh	/^class SimPoint : public ProbeListenerObject$/;"	c
SimTicksReset	./sim/stat_control.cc	/^struct SimTicksReset : public Callback$/;"	s	namespace:Stats	file:
Sim_Exit_Pri	./sim/eventq.hh	/^    static const Priority Sim_Exit_Pri =               100;$/;"	m	class:EventBase
SimdAddAccOp	./cpu/op_class.hh	/^static const OpClass SimdAddAccOp = Enums::SimdAddAcc;$/;"	v
SimdAddOp	./cpu/op_class.hh	/^static const OpClass SimdAddOp = Enums::SimdAdd;$/;"	v
SimdAluOp	./cpu/op_class.hh	/^static const OpClass SimdAluOp = Enums::SimdAlu;$/;"	v
SimdCmpOp	./cpu/op_class.hh	/^static const OpClass SimdCmpOp = Enums::SimdCmp;$/;"	v
SimdCvtOp	./cpu/op_class.hh	/^static const OpClass SimdCvtOp = Enums::SimdCvt;$/;"	v
SimdFloatAddOp	./cpu/op_class.hh	/^static const OpClass SimdFloatAddOp = Enums::SimdFloatAdd;$/;"	v
SimdFloatAluOp	./cpu/op_class.hh	/^static const OpClass SimdFloatAluOp = Enums::SimdFloatAlu;$/;"	v
SimdFloatCmpOp	./cpu/op_class.hh	/^static const OpClass SimdFloatCmpOp = Enums::SimdFloatCmp;$/;"	v
SimdFloatCvtOp	./cpu/op_class.hh	/^static const OpClass SimdFloatCvtOp = Enums::SimdFloatCvt;$/;"	v
SimdFloatDivOp	./cpu/op_class.hh	/^static const OpClass SimdFloatDivOp = Enums::SimdFloatDiv;$/;"	v
SimdFloatMiscOp	./cpu/op_class.hh	/^static const OpClass SimdFloatMiscOp = Enums::SimdFloatMisc;$/;"	v
SimdFloatMultAccOp	./cpu/op_class.hh	/^static const OpClass SimdFloatMultAccOp = Enums::SimdFloatMultAcc;$/;"	v
SimdFloatMultOp	./cpu/op_class.hh	/^static const OpClass SimdFloatMultOp = Enums::SimdFloatMult;$/;"	v
SimdFloatSqrtOp	./cpu/op_class.hh	/^static const OpClass SimdFloatSqrtOp = Enums::SimdFloatSqrt;$/;"	v
SimdMiscOp	./cpu/op_class.hh	/^static const OpClass SimdMiscOp = Enums::SimdMisc;$/;"	v
SimdMultAccOp	./cpu/op_class.hh	/^static const OpClass SimdMultAccOp = Enums::SimdMultAcc;$/;"	v
SimdMultOp	./cpu/op_class.hh	/^static const OpClass SimdMultOp = Enums::SimdMult;$/;"	v
SimdShiftAccOp	./cpu/op_class.hh	/^static const OpClass SimdShiftAccOp = Enums::SimdShiftAcc;$/;"	v
SimdShiftOp	./cpu/op_class.hh	/^static const OpClass SimdShiftOp = Enums::SimdShift;$/;"	v
SimdSqrtOp	./cpu/op_class.hh	/^static const OpClass SimdSqrtOp = Enums::SimdSqrt;$/;"	v
SimpleCPUPolicy	./cpu/o3/cpu_policy.hh	/^struct SimpleCPUPolicy$/;"	s
SimpleDisk	./dev/storage/SimpleDisk.py	/^class SimpleDisk(SimObject):$/;"	c
SimpleDisk	./dev/storage/simple_disk.cc	/^SimpleDisk::SimpleDisk(const Params *p)$/;"	f	class:SimpleDisk
SimpleDisk	./dev/storage/simple_disk.hh	/^class SimpleDisk : public SimObject$/;"	c
SimpleExecContext	./cpu/simple/exec_context.hh	/^    SimpleExecContext(BaseSimpleCPU* _cpu, SimpleThread* _thread)$/;"	f	class:SimpleExecContext
SimpleExecContext	./cpu/simple/exec_context.hh	/^class SimpleExecContext : public ExecContext {$/;"	c
SimpleExtLink	./mem/ruby/network/simple/SimpleLink.cc	/^SimpleExtLink::SimpleExtLink(const Params *p)$/;"	f	class:SimpleExtLink
SimpleExtLink	./mem/ruby/network/simple/SimpleLink.hh	/^class SimpleExtLink : public BasicExtLink$/;"	c
SimpleExtLink	./mem/ruby/network/simple/SimpleLink.py	/^class SimpleExtLink(BasicExtLink):$/;"	c
SimpleFlag	./base/debug.hh	/^    SimpleFlag(const char *name, const char *desc)$/;"	f	class:Debug::SimpleFlag
SimpleFlag	./base/debug.hh	/^class SimpleFlag : public Flag$/;"	c	namespace:Debug
SimpleFreeList	./cpu/o3/free_list.hh	/^    SimpleFreeList() {};$/;"	f	class:SimpleFreeList
SimpleFreeList	./cpu/o3/free_list.hh	/^class SimpleFreeList$/;"	c
SimpleIntLink	./mem/ruby/network/simple/SimpleLink.cc	/^SimpleIntLink::SimpleIntLink(const Params *p)$/;"	f	class:SimpleIntLink
SimpleIntLink	./mem/ruby/network/simple/SimpleLink.hh	/^class SimpleIntLink : public BasicIntLink$/;"	c
SimpleIntLink	./mem/ruby/network/simple/SimpleLink.py	/^class SimpleIntLink(BasicIntLink):$/;"	c
SimpleMemory	./mem/SimpleMemory.py	/^class SimpleMemory(AbstractMemory):$/;"	c
SimpleMemory	./mem/simple_mem.cc	/^SimpleMemory::SimpleMemory(const SimpleMemoryParams* p) :$/;"	f	class:SimpleMemory
SimpleMemory	./mem/simple_mem.hh	/^class SimpleMemory : public AbstractMemory$/;"	c
SimpleNetwork	./mem/ruby/network/simple/SimpleNetwork.cc	/^SimpleNetwork::SimpleNetwork(const Params *p)$/;"	f	class:SimpleNetwork
SimpleNetwork	./mem/ruby/network/simple/SimpleNetwork.hh	/^class SimpleNetwork : public Network$/;"	c
SimpleNetwork	./mem/ruby/network/simple/SimpleNetwork.py	/^class SimpleNetwork(RubyNetwork):$/;"	c
SimplePCState	./arch/generic/types.hh	/^    SimplePCState() {}$/;"	f	class:GenericISA::SimplePCState
SimplePCState	./arch/generic/types.hh	/^    SimplePCState(Addr val) { set(val); }$/;"	f	class:GenericISA::SimplePCState
SimplePCState	./arch/generic/types.hh	/^class SimplePCState : public PCStateBase$/;"	c	namespace:GenericISA
SimpleRenameMap	./cpu/o3/rename_map.cc	/^SimpleRenameMap::SimpleRenameMap()$/;"	f	class:SimpleRenameMap
SimpleRenameMap	./cpu/o3/rename_map.hh	/^class SimpleRenameMap$/;"	c
SimpleThread	./cpu/simple_thread.cc	/^SimpleThread::SimpleThread(BaseCPU *_cpu, int _thread_num, System *_sys,$/;"	f	class:SimpleThread
SimpleThread	./cpu/simple_thread.hh	/^class SimpleThread : public ThreadState$/;"	c
SimpleTimingPort	./mem/tport.cc	/^SimpleTimingPort::SimpleTimingPort(const std::string& _name,$/;"	f	class:SimpleTimingPort
SimpleTimingPort	./mem/tport.hh	/^class SimpleTimingPort : public QueuedSlavePort$/;"	c
SimpleTrace	./cpu/o3/probe/SimpleTrace.py	/^class SimpleTrace(ProbeListenerObject):$/;"	c
SimpleTrace	./cpu/o3/probe/simple_trace.hh	/^    SimpleTrace(const SimpleTraceParams *params):$/;"	f	class:SimpleTrace
SimpleTrace	./cpu/o3/probe/simple_trace.hh	/^class SimpleTrace : public ProbeListenerObject {$/;"	c
SingleDataRequest	./cpu/minor/lsq.hh	/^        SingleDataRequest(LSQ &port_, MinorDynInstPtr inst_,$/;"	f	class:Minor::LSQ::SingleDataRequest
SingleDataRequest	./cpu/minor/lsq.hh	/^    class SingleDataRequest : public LSQRequest$/;"	c	class:Minor::LSQ
SingleStepEvent	./base/remote_gdb.hh	/^        SingleStepEvent(BaseRemoteGDB *g) : gdb(g)$/;"	f	class:BaseRemoteGDB::SingleStepEvent
SingleStepEvent	./base/remote_gdb.hh	/^    class SingleStepEvent : public Event$/;"	c	class:BaseRemoteGDB
SingleThread	./cpu/o3/fetch.hh	/^        SingleThread,$/;"	e	enum:DefaultFetch::FetchPriority
Singleton	./python/m5/util/__init__.py	/^class Singleton(type):$/;"	c
Sinic	./dev/net/Ethernet.py	/^class Sinic(EtherDevBase):$/;"	c
Sinic	./dev/net/sinic.cc	/^namespace Sinic {$/;"	n	file:
Sinic	./dev/net/sinic.hh	/^namespace Sinic {$/;"	n
Sinic	./dev/net/sinicreg.hh	/^namespace Sinic {$/;"	n
SixtyFourBitMode	./arch/x86/types.hh	/^        SixtyFourBitMode,$/;"	e	enum:X86ISA::X86SubMode
Size	./arch/arm/linux/atag.hh	/^    static const uint32_t Size = 2;$/;"	m	class:AtagNone
Size	./arch/arm/linux/atag.hh	/^    static const uint32_t Size = 3;$/;"	m	class:AtagCmdline
Size	./arch/arm/linux/atag.hh	/^    static const uint32_t Size = 3;$/;"	m	class:AtagRev
Size	./arch/arm/linux/atag.hh	/^    static const uint32_t Size = 4;$/;"	m	class:AtagMem
Size	./arch/arm/linux/atag.hh	/^    static const uint32_t Size = 4;$/;"	m	class:AtagSerial
Size	./arch/arm/linux/atag.hh	/^    static const uint32_t Size = 5;$/;"	m	class:AtagCore
Size	./base/bitmap.hh	/^        uint32_t Size;$/;"	m	struct:Bitmap::InfoHeaderV1
Size	./dev/arm/timer_cpulocal.hh	/^            Size                   = 0x38$/;"	e	enum:CpuLocalTimer::Timer::__anon22
Size	./dev/arm/timer_sp804.hh	/^            Size       = 0x20$/;"	e	enum:Sp804::Timer::__anon21
SizeImage	./base/bitmap.hh	/^        uint32_t SizeImage;$/;"	m	struct:Bitmap::InfoHeaderV1
SizeType	./arch/x86/decoder_tables.cc	/^    enum SizeType {$/;"	g	namespace:X86ISA	file:
SizeTypeToSize	./arch/x86/decoder.hh	/^    static const uint8_t SizeTypeToSize[3][10];$/;"	m	class:X86ISA::Decoder
SizeTypeToSize	./arch/x86/decoder_tables.cc	/^    const uint8_t Decoder::SizeTypeToSize[3][10] =$/;"	m	class:X86ISA::Decoder	file:
SkipCalibrateClocksEvent	./arch/alpha/freebsd/system.hh	/^        SkipCalibrateClocksEvent(PCEventQueue *q, const std::string &desc,$/;"	f	class:FreebsdAlphaSystem::SkipCalibrateClocksEvent
SkipCalibrateClocksEvent	./arch/alpha/freebsd/system.hh	/^    class SkipCalibrateClocksEvent : public SkipFuncEvent$/;"	c	class:FreebsdAlphaSystem
SkipDelayLoopEvent	./arch/alpha/linux/system.hh	/^        SkipDelayLoopEvent(PCEventQueue *q, const std::string &desc, Addr addr)$/;"	f	struct:LinuxAlphaSystem::SkipDelayLoopEvent
SkipDelayLoopEvent	./arch/alpha/linux/system.hh	/^    struct SkipDelayLoopEvent : public SkipFuncEvent$/;"	s	class:LinuxAlphaSystem
SkipDelayLoopEvent	./arch/mips/linux/system.hh	/^        SkipDelayLoopEvent(PCEventQueue *q, const std::string &desc, Addr addr)$/;"	f	class:LinuxMipsSystem::SkipDelayLoopEvent
SkipDelayLoopEvent	./arch/mips/linux/system.hh	/^    class SkipDelayLoopEvent : public SkipFuncEvent$/;"	c	class:LinuxMipsSystem
SkipFuncEvent	./kern/system_events.hh	/^    SkipFuncEvent(PCEventQueue *q, const std::string &desc, Addr addr)$/;"	f	class:SkipFuncEvent
SkipFuncEvent	./kern/system_events.hh	/^class SkipFuncEvent : public PCEvent$/;"	c
SlavePort	./mem/port.cc	/^SlavePort::SlavePort(const std::string& name, MemObject* owner, PortID id)$/;"	f	class:SlavePort
SlavePort	./mem/port.hh	/^class SlavePort : public BaseSlavePort$/;"	c
SlavePort	./python/m5/params.py	/^class SlavePort(Port):$/;"	c
SmStack	./base/cp_annotate.hh	/^    typedef std::map<StackId, std::vector<int> > SmStack;$/;"	t	class:CPA
SmartDict	./python/m5/util/smartdict.py	/^class SmartDict(attrdict):$/;"	c
SnoopFilter	./mem/XBar.py	/^class SnoopFilter(SimObject):$/;"	c
SnoopFilter	./mem/snoop_filter.hh	/^    SnoopFilter (const SnoopFilterParams *p) :$/;"	f	class:SnoopFilter
SnoopFilter	./mem/snoop_filter.hh	/^class SnoopFilter : public SimObject {$/;"	c
SnoopFilterCache	./mem/snoop_filter.hh	/^    typedef std::unordered_map<Addr, SnoopItem> SnoopFilterCache;$/;"	t	class:SnoopFilter
SnoopItem	./mem/snoop_filter.hh	/^    struct SnoopItem {$/;"	s	class:SnoopFilter
SnoopList	./mem/snoop_filter.hh	/^    typedef std::vector<QueuedSlavePort*> SnoopList;$/;"	t	class:SnoopFilter
SnoopMask	./mem/snoop_filter.hh	/^    typedef uint64_t SnoopMask;$/;"	t	class:SnoopFilter
SnoopRespLayer	./mem/xbar.hh	/^        SnoopRespLayer(MasterPort& _port, BaseXBar& _xbar,$/;"	f	class:BaseXBar::SnoopRespLayer
SnoopRespLayer	./mem/xbar.hh	/^    class SnoopRespLayer : public Layer<SlavePort,MasterPort>$/;"	c	class:BaseXBar
SnoopRespPacketQueue	./mem/packet_queue.cc	/^SnoopRespPacketQueue::SnoopRespPacketQueue(EventManager& _em,$/;"	f	class:SnoopRespPacketQueue
SnoopRespPacketQueue	./mem/packet_queue.hh	/^class SnoopRespPacketQueue : public PacketQueue$/;"	c
SnoopRespPort	./mem/coherent_xbar.hh	/^        SnoopRespPort(QueuedSlavePort& slave_port, CoherentXBar& _xbar) :$/;"	f	class:CoherentXBar::SnoopRespPort
SnoopRespPort	./mem/coherent_xbar.hh	/^    class SnoopRespPort : public MasterPort$/;"	c	class:CoherentXBar
SocketDataEvent	./dev/virtio/fs9p.hh	/^        SocketDataEvent(VirtIO9PSocket &_parent, int fd, int event)$/;"	f	class:VirtIO9PSocket::SocketDataEvent
SocketDataEvent	./dev/virtio/fs9p.hh	/^    class SocketDataEvent : public PollEvent$/;"	c	class:VirtIO9PSocket
SoftPFReq	./mem/packet.hh	/^        SoftPFReq,$/;"	e	enum:MemCmd::Command
SoftPFResp	./mem/packet.hh	/^        SoftPFResp,$/;"	e	enum:MemCmd::Command
SoftResetFault	./arch/mips/faults.hh	/^class SoftResetFault : public MipsFault<SoftResetFault>$/;"	c	namespace:MipsISA
SoftwareInitiatedReset	./arch/sparc/faults.hh	/^class SoftwareInitiatedReset : public SparcFault<SoftwareInitiatedReset> {};$/;"	c	namespace:SparcISA
SoftwareInterrupt	./arch/x86/faults.hh	/^        SoftwareInterrupt(uint8_t _vector) :$/;"	f	class:X86ISA::SoftwareInterrupt
SoftwareInterrupt	./arch/x86/faults.hh	/^    class SoftwareInterrupt : public X86Interrupt$/;"	c	namespace:X86ISA
SoftwareStrobe	./dev/intel_8254_timer.hh	/^        SoftwareStrobe,$/;"	e	enum:Intel8254Timer::ModeVal
Solaris	./base/loader/object_file.hh	/^        Solaris,$/;"	e	enum:ObjectFile::OpSys
Solaris	./kern/solaris/solaris.hh	/^class Solaris : public OperatingSystem$/;"	c
SortedDict	./python/m5/util/sorteddict.py	/^class SortedDict(dict):$/;"	c
Source	./mem/cache/mshr.hh	/^        enum Source {$/;"	g	class:MSHR::Target
SouthBridge	./dev/x86/SouthBridge.py	/^class SouthBridge(SimObject):$/;"	c
SouthBridge	./dev/x86/south_bridge.cc	/^SouthBridge::SouthBridge(const Params *p) : SimObject(p),$/;"	f	class:SouthBridge
SouthBridge	./dev/x86/south_bridge.hh	/^class SouthBridge : public SimObject$/;"	c
Sp804	./dev/arm/RealView.py	/^class Sp804(AmbaPioDevice):$/;"	c
Sp804	./dev/arm/timer_sp804.cc	/^Sp804::Sp804(Params *p)$/;"	f	class:Sp804
Sp804	./dev/arm/timer_sp804.hh	/^class Sp804 : public AmbaPioDevice$/;"	c
Sparc32Linux	./arch/sparc/linux/linux.hh	/^class Sparc32Linux : public SparcLinux$/;"	c
Sparc32LinuxProcess	./arch/sparc/linux/process.cc	/^Sparc32LinuxProcess::Sparc32LinuxProcess(LiveProcessParams * params,$/;"	f	class:Sparc32LinuxProcess
Sparc32LinuxProcess	./arch/sparc/linux/process.hh	/^class Sparc32LinuxProcess : public SparcLinuxProcess, public Sparc32LiveProcess$/;"	c	namespace:SparcISA
Sparc32LiveProcess	./arch/sparc/process.hh	/^    Sparc32LiveProcess(LiveProcessParams * params, ObjectFile *objFile) :$/;"	f	class:Sparc32LiveProcess
Sparc32LiveProcess	./arch/sparc/process.hh	/^class Sparc32LiveProcess : public SparcLiveProcess$/;"	c
Sparc64LinuxProcess	./arch/sparc/linux/process.cc	/^Sparc64LinuxProcess::Sparc64LinuxProcess(LiveProcessParams * params,$/;"	f	class:Sparc64LinuxProcess
Sparc64LinuxProcess	./arch/sparc/linux/process.hh	/^class Sparc64LinuxProcess : public SparcLinuxProcess, public Sparc64LiveProcess$/;"	c	namespace:SparcISA
Sparc64LiveProcess	./arch/sparc/process.hh	/^    Sparc64LiveProcess(LiveProcessParams * params, ObjectFile *objFile) :$/;"	f	class:Sparc64LiveProcess
Sparc64LiveProcess	./arch/sparc/process.hh	/^class Sparc64LiveProcess : public SparcLiveProcess$/;"	c
SparcFault	./arch/sparc/faults.hh	/^class SparcFault : public SparcFaultBase$/;"	c	namespace:SparcISA
SparcFaultBase	./arch/sparc/faults.hh	/^class SparcFaultBase : public FaultBase$/;"	c	namespace:SparcISA
SparcISA	./arch/sparc/SparcISA.py	/^class SparcISA(SimObject):$/;"	c
SparcISA	./arch/sparc/asi.cc	/^namespace SparcISA$/;"	n	file:
SparcISA	./arch/sparc/asi.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/decoder.cc	/^namespace SparcISA$/;"	n	file:
SparcISA	./arch/sparc/decoder.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/faults.cc	/^namespace SparcISA$/;"	n	file:
SparcISA	./arch/sparc/faults.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/handlers.hh	/^namespace SparcISA {$/;"	n
SparcISA	./arch/sparc/interrupts.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/isa.cc	/^namespace SparcISA$/;"	n	file:
SparcISA	./arch/sparc/isa.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/isa_traits.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/kernel_stats.hh	/^namespace SparcISA {$/;"	n
SparcISA	./arch/sparc/linux/process.hh	/^namespace SparcISA {$/;"	n
SparcISA	./arch/sparc/linux/syscalls.cc	/^namespace SparcISA {$/;"	n	file:
SparcISA	./arch/sparc/locked_mem.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/microcode_rom.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/miscregs.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/mmapped_ipr.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/mt.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/pagetable.cc	/^namespace SparcISA$/;"	n	file:
SparcISA	./arch/sparc/pagetable.hh	/^namespace SparcISA {$/;"	n
SparcISA	./arch/sparc/pseudo_inst.hh	/^namespace SparcISA {$/;"	n
SparcISA	./arch/sparc/registers.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/remote_gdb.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/solaris/process.hh	/^namespace SparcISA {$/;"	n
SparcISA	./arch/sparc/sparc_traits.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/stacktrace.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/tlb.cc	/^namespace SparcISA {$/;"	n	file:
SparcISA	./arch/sparc/tlb.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/tlb_map.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/types.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/utility.cc	/^namespace SparcISA {$/;"	n	file:
SparcISA	./arch/sparc/utility.hh	/^namespace SparcISA$/;"	n
SparcISA	./arch/sparc/vtophys.cc	/^namespace SparcISA {$/;"	n	file:
SparcISA	./arch/sparc/vtophys.hh	/^namespace SparcISA {$/;"	n
SparcInterrupts	./arch/sparc/SparcInterrupts.py	/^class SparcInterrupts(SimObject):$/;"	c
SparcLinux	./arch/sparc/linux/linux.hh	/^class SparcLinux : public Linux$/;"	c
SparcLinuxProcess	./arch/sparc/linux/process.hh	/^class SparcLinuxProcess$/;"	c	namespace:SparcISA
SparcLiveProcess	./arch/sparc/process.cc	/^SparcLiveProcess::SparcLiveProcess(LiveProcessParams * params,$/;"	f	class:SparcLiveProcess
SparcLiveProcess	./arch/sparc/process.hh	/^class SparcLiveProcess : public LiveProcess$/;"	c
SparcNativeTrace	./arch/sparc/SparcNativeTrace.py	/^class SparcNativeTrace(NativeTrace):$/;"	c
SparcNativeTrace	./arch/sparc/nativetrace.hh	/^    SparcNativeTrace(const Params *p) : NativeTrace(p)$/;"	f	class:Trace::SparcNativeTrace
SparcNativeTrace	./arch/sparc/nativetrace.hh	/^class SparcNativeTrace : public NativeTrace$/;"	c	namespace:Trace
SparcSolaris	./arch/sparc/solaris/solaris.hh	/^class SparcSolaris : public Solaris$/;"	c
SparcSolarisProcess	./arch/sparc/solaris/process.cc	/^SparcSolarisProcess::SparcSolarisProcess(LiveProcessParams * params,$/;"	f	class:SparcSolarisProcess
SparcSolarisProcess	./arch/sparc/solaris/process.hh	/^class SparcSolarisProcess : public Sparc64LiveProcess$/;"	c	namespace:SparcISA
SparcSystem	./arch/sparc/SparcSystem.py	/^class SparcSystem(System):$/;"	c
SparcSystem	./arch/sparc/system.cc	/^SparcSystem::SparcSystem(Params *p)$/;"	f	class:SparcSystem
SparcSystem	./arch/sparc/system.hh	/^class SparcSystem : public System$/;"	c
SparcTLB	./arch/sparc/SparcTLB.py	/^class SparcTLB(BaseTLB):$/;"	c
SparseHistBase	./base/statistics.hh	/^    SparseHistBase() { }$/;"	f	class:Stats::SparseHistBase
SparseHistBase	./base/statistics.hh	/^class SparseHistBase : public DataWrap<Derived, SparseHistInfoProxy>$/;"	c	namespace:Stats
SparseHistData	./base/stats/info.hh	/^struct SparseHistData$/;"	s	namespace:Stats
SparseHistInfo	./base/stats/info.hh	/^class SparseHistInfo : public Info$/;"	c	namespace:Stats
SparseHistInfoProxy	./base/statistics.hh	/^    SparseHistInfoProxy(Stat &stat) : InfoProxy<Stat, SparseHistInfo>(stat) {}$/;"	f	class:Stats::SparseHistInfoProxy
SparseHistInfoProxy	./base/statistics.hh	/^class SparseHistInfoProxy : public InfoProxy<Stat, SparseHistInfo>$/;"	c	namespace:Stats
SparseHistPrint	./base/stats/text.cc	/^SparseHistPrint::SparseHistPrint(const Text *text, const SparseHistInfo &info)$/;"	f	class:Stats::SparseHistPrint
SparseHistPrint	./base/stats/text.cc	/^struct SparseHistPrint$/;"	s	namespace:Stats	file:
SparseHistStor	./base/statistics.hh	/^    SparseHistStor(Info *info)$/;"	f	class:Stats::SparseHistStor
SparseHistStor	./base/statistics.hh	/^class SparseHistStor$/;"	c	namespace:Stats
SparseHistogram	./base/statistics.hh	/^class SparseHistogram : public SparseHistBase<SparseHistogram, SparseHistStor>$/;"	c	namespace:Stats
Speaker	./dev/x86/speaker.hh	/^    Speaker(Params *p) : BasicPioDevice(p, 1),$/;"	f	class:X86ISA::Speaker
Speaker	./dev/x86/speaker.hh	/^class Speaker : public BasicPioDevice$/;"	c	namespace:X86ISA
SpecialDataRequest	./cpu/minor/lsq.hh	/^        SpecialDataRequest(LSQ &port_, MinorDynInstPtr inst_) :$/;"	f	class:Minor::LSQ::SpecialDataRequest
SpecialDataRequest	./cpu/minor/lsq.hh	/^    class SpecialDataRequest : public LSQRequest$/;"	c	class:Minor::LSQ
SpillNNormal	./arch/sparc/faults.hh	/^    SpillNNormal(uint32_t n) : EnumeratedFault<SpillNNormal>(n) {;}$/;"	f	class:SparcISA::SpillNNormal
SpillNNormal	./arch/sparc/faults.hh	/^class SpillNNormal : public EnumeratedFault<SpillNNormal>$/;"	c	namespace:SparcISA
SpillNOther	./arch/sparc/faults.hh	/^    SpillNOther(uint32_t n) : EnumeratedFault<SpillNOther>(n)$/;"	f	class:SparcISA::SpillNOther
SpillNOther	./arch/sparc/faults.hh	/^class SpillNOther : public EnumeratedFault<SpillNOther>$/;"	c	namespace:SparcISA
SplitDataRequest	./cpu/minor/lsq.cc	/^LSQ::SplitDataRequest::SplitDataRequest(LSQ &port_, MinorDynInstPtr inst_,$/;"	f	class:Minor::LSQ::SplitDataRequest
SplitDataRequest	./cpu/minor/lsq.hh	/^    class SplitDataRequest : public LSQRequest$/;"	c	class:Minor::LSQ
SplitFragmentSenderState	./cpu/simple/timing.hh	/^        SplitFragmentSenderState(PacketPtr _bigPkt, int _index) :$/;"	f	class:TimingSimpleCPU::SplitFragmentSenderState
SplitFragmentSenderState	./cpu/simple/timing.hh	/^    class SplitFragmentSenderState : public Packet::SenderState$/;"	c	class:TimingSimpleCPU
SplitMainSenderState	./cpu/simple/timing.hh	/^    class SplitMainSenderState : public Packet::SenderState$/;"	c	class:TimingSimpleCPU
SquareWave	./dev/intel_8254_timer.hh	/^        SquareWave,$/;"	e	enum:Intel8254Timer::ModeVal
SquashAfterPending	./cpu/o3/commit.hh	/^        SquashAfterPending, \/\/< Committing instructions before a squash.$/;"	e	enum:DefaultCommit::ThreadStatus
Squashed	./cpu/base_dyn_inst.hh	/^        Squashed,                \/\/\/ Instruction is squashed$/;"	e	enum:BaseDynInst::Status
Squashed	./sim/eventq.hh	/^    static const FlagsType Squashed      = 0x0001; \/\/ has been squashed$/;"	m	class:EventBase
SquashedInIQ	./cpu/base_dyn_inst.hh	/^        SquashedInIQ,            \/\/\/ Instruction is squashed in the IQ$/;"	e	enum:BaseDynInst::Status
SquashedInLSQ	./cpu/base_dyn_inst.hh	/^        SquashedInLSQ,           \/\/\/ Instruction is squashed in the LSQ$/;"	e	enum:BaseDynInst::Status
SquashedInROB	./cpu/base_dyn_inst.hh	/^        SquashedInROB,           \/\/\/ Instruction is squashed in the ROB$/;"	e	enum:BaseDynInst::Status
Squashing	./cpu/o3/decode.hh	/^        Squashing,$/;"	e	enum:DefaultDecode::ThreadStatus
Squashing	./cpu/o3/fetch.hh	/^        Squashing,$/;"	e	enum:DefaultFetch::ThreadStatus
Squashing	./cpu/o3/iew.hh	/^        Squashing,$/;"	e	enum:DefaultIEW::StageStatus
Squashing	./cpu/o3/rename.hh	/^        Squashing,$/;"	e	enum:DefaultRename::ThreadStatus
SrcClockChildren	./sim/voltage_domain.hh	/^    typedef std::vector<SrcClockDomain *> SrcClockChildren;$/;"	t	class:VoltageDomain
SrcClockDomain	./sim/ClockDomain.py	/^class SrcClockDomain(ClockDomain):$/;"	c
SrcClockDomain	./sim/clock_domain.cc	/^SrcClockDomain::SrcClockDomain(const Params *p) :$/;"	f	class:SrcClockDomain
SrcClockDomain	./sim/clock_domain.hh	/^class SrcClockDomain : public ClockDomain$/;"	c
SrsOp	./arch/arm/insts/mem.hh	/^    SrsOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::SrsOp
SrsOp	./arch/arm/insts/mem.hh	/^class SrsOp : public MightBeMicro$/;"	c	namespace:ArmISA
StCache	./base/cp_annotate.hh	/^    typedef std::vector<SCache> StCache;$/;"	t	class:CPA
Stack	./arch/isa_parser.py	/^class Stack(list):$/;"	c
StackBias	./arch/sparc/process.hh	/^    const Addr StackBias;$/;"	m	class:SparcLiveProcess
StackDistCalc	./mem/stack_dist_calc.cc	/^StackDistCalc::StackDistCalc(bool verify_stack)$/;"	f	class:StackDistCalc
StackDistCalc	./mem/stack_dist_calc.hh	/^class StackDistCalc$/;"	c
StackDistProbe	./mem/probes/StackDistProbe.py	/^class StackDistProbe(BaseMemProbe):$/;"	c
StackDistProbe	./mem/probes/stack_dist.cc	/^StackDistProbe::StackDistProbe(StackDistProbeParams *p)$/;"	f	class:StackDistProbe
StackDistProbe	./mem/probes/stack_dist.hh	/^class StackDistProbe : public BaseMemProbe$/;"	c
StackFault	./arch/x86/faults.hh	/^        StackFault(uint32_t _errorCode) :$/;"	f	class:X86ISA::StackFault
StackFault	./arch/x86/faults.hh	/^    class StackFault : public X86Fault$/;"	c	namespace:X86ISA
StackFaultBit	./arch/x86/regs/misc.hh	/^        StackFaultBit = 1 << 6,$/;"	e	enum:X86ISA::X87StatusBit
StackId	./base/cp_annotate.hh	/^    typedef std::pair<int, uint64_t> StackId;$/;"	t	class:CPA
StackPointerReg	./arch/alpha/registers.hh	/^const RegIndex StackPointerReg = 30;$/;"	m	namespace:AlphaISA
StackPointerReg	./arch/arm/registers.hh	/^const int StackPointerReg = INTREG_SP;$/;"	m	namespace:ArmISA
StackPointerReg	./arch/mips/registers.hh	/^const int StackPointerReg = 29;$/;"	m	namespace:MipsISA
StackPointerReg	./arch/power/registers.hh	/^const int StackPointerReg = 1;$/;"	m	namespace:PowerISA
StackPointerReg	./arch/sparc/registers.hh	/^const int StackPointerReg = 14;$/;"	m	namespace:SparcISA
StackPointerReg	./arch/x86/registers.hh	/^const int StackPointerReg = INTREG_RSP;$/;"	m	namespace:X86ISA
StackTrace	./arch/alpha/stacktrace.cc	/^StackTrace::StackTrace()$/;"	f	class:AlphaISA::StackTrace
StackTrace	./arch/alpha/stacktrace.cc	/^StackTrace::StackTrace(ThreadContext *_tc, const StaticInstPtr &inst)$/;"	f	class:AlphaISA::StackTrace
StackTrace	./arch/alpha/stacktrace.hh	/^class StackTrace$/;"	c	namespace:AlphaISA
StackTrace	./arch/arm/stacktrace.cc	/^    StackTrace::StackTrace()$/;"	f	class:ArmISA::StackTrace
StackTrace	./arch/arm/stacktrace.cc	/^    StackTrace::StackTrace(ThreadContext *_tc, const StaticInstPtr &inst)$/;"	f	class:ArmISA::StackTrace
StackTrace	./arch/arm/stacktrace.hh	/^class StackTrace$/;"	c	namespace:ArmISA
StackTrace	./arch/mips/stacktrace.cc	/^StackTrace::StackTrace()$/;"	f	class:StackTrace
StackTrace	./arch/mips/stacktrace.cc	/^StackTrace::StackTrace(ThreadContext *_tc, const StaticInstPtr &inst)$/;"	f	class:StackTrace
StackTrace	./arch/mips/stacktrace.hh	/^class StackTrace$/;"	c	namespace:MipsISA
StackTrace	./arch/power/stacktrace.cc	/^StackTrace::StackTrace()$/;"	f	class:PowerISA::StackTrace
StackTrace	./arch/power/stacktrace.cc	/^StackTrace::StackTrace(ThreadContext *_tc, const StaticInstPtr &inst)$/;"	f	class:PowerISA::StackTrace
StackTrace	./arch/power/stacktrace.hh	/^class StackTrace$/;"	c	namespace:PowerISA
StackTrace	./arch/sparc/stacktrace.hh	/^class StackTrace$/;"	c	namespace:SparcISA
StackTrace	./arch/x86/stacktrace.cc	/^    StackTrace::StackTrace()$/;"	f	class:X86ISA::StackTrace
StackTrace	./arch/x86/stacktrace.cc	/^    StackTrace::StackTrace(ThreadContext *_tc, const StaticInstPtr &inst)$/;"	f	class:X86ISA::StackTrace
StackTrace	./arch/x86/stacktrace.hh	/^    class StackTrace$/;"	c	namespace:X86ISA
Stage2LookUp	./arch/arm/stage2_lookup.hh	/^    Stage2LookUp(TLB *s1Tlb, TLB *s2Tlb, TlbEntry s1Te, RequestPtr _req,$/;"	f	class:ArmISA::Stage2LookUp
Stage2LookUp	./arch/arm/stage2_lookup.hh	/^class Stage2LookUp : public BaseTLB::Translation$/;"	c	namespace:ArmISA
Stage2MMU	./arch/arm/stage2_mmu.cc	/^Stage2MMU::Stage2MMU(const Params *p)$/;"	f	class:Stage2MMU
Stage2MMU	./arch/arm/stage2_mmu.hh	/^class Stage2MMU : public SimObject$/;"	c	namespace:ArmISA
Stage2Translation	./arch/arm/stage2_mmu.cc	/^Stage2MMU::Stage2Translation::Stage2Translation(Stage2MMU &_parent,$/;"	f	class:Stage2MMU::Stage2Translation
Stage2Translation	./arch/arm/stage2_mmu.hh	/^    class Stage2Translation : public BaseTLB::Translation$/;"	c	class:ArmISA::Stage2MMU
StageId	./cpu/minor/pipeline.hh	/^    enum StageId$/;"	g	class:Minor::Pipeline
StageIdx	./cpu/o3/cpu.hh	/^    enum StageIdx {$/;"	g	class:FullO3CPU
StageStatus	./cpu/o3/iew.hh	/^    enum StageStatus {$/;"	g	class:DefaultIEW
StallAndWaitStatementAST	./mem/slicc/ast/StallAndWaitStatementAST.py	/^class StallAndWaitStatementAST(StatementAST):$/;"	c
StallMsgMapType	./mem/ruby/network/MessageBuffer.hh	/^    typedef std::map<Addr, std::list<MsgPtr> > StallMsgMapType;$/;"	t	class:MessageBuffer
Stalls	./cpu/o3/decode.hh	/^    struct Stalls {$/;"	s	class:DefaultDecode
Stalls	./cpu/o3/fetch.hh	/^    struct Stalls {$/;"	s	class:DefaultFetch
Stalls	./cpu/o3/rename.hh	/^    struct Stalls {$/;"	s	class:DefaultRename
StandardCpuidFunction	./arch/x86/cpuid.cc	/^    enum StandardCpuidFunction {$/;"	g	namespace:X86ISA	file:
StandardDeviation	./base/statistics.hh	/^    StandardDeviation()$/;"	f	class:Stats::StandardDeviation
StandardDeviation	./base/statistics.hh	/^class StandardDeviation : public DistBase<StandardDeviation, SampleStor>$/;"	c	namespace:Stats
StandardNumber	./kern/tru64/tru64_syscalls.hh	/^        StandardNumber$/;"	e	enum:SystemCalls::__anon102
StartAddr	./arch/alpha/linux/system.hh	/^    Addr StartAddr() const { return KernelStart + 0x10000; }$/;"	f	class:LinuxAlphaSystem
StartAddr	./arch/mips/linux/system.hh	/^    Addr StartAddr() const { return KernelStart + 0x10000; }$/;"	f	class:LinuxMipsSystem
StartSquash	./cpu/o3/decode.hh	/^        StartSquash,$/;"	e	enum:DefaultDecode::ThreadStatus
StartSquash	./cpu/o3/iew.hh	/^        StartSquash,$/;"	e	enum:DefaultIEW::StageStatus
StartSquash	./cpu/o3/rename.hh	/^        StartSquash,$/;"	e	enum:DefaultRename::ThreadStatus
StartVAddrHole	./arch/sparc/isa_traits.hh	/^const Addr StartVAddrHole = ULL(0x0000800000000000);$/;"	m	namespace:SparcISA
StartupInterrupt	./arch/x86/faults.hh	/^        StartupInterrupt(uint8_t _vector) :$/;"	f	class:X86ISA::StartupInterrupt
StartupInterrupt	./arch/x86/faults.hh	/^    class StartupInterrupt : public X86Interrupt$/;"	c	namespace:X86ISA
StatEvent	./sim/stat_control.cc	/^    StatEvent(Tick _when, bool _dump, bool _reset, Tick _repeat)$/;"	f	class:Stats::StatEvent
StatEvent	./sim/stat_control.cc	/^class StatEvent : public GlobalEvent$/;"	c	namespace:Stats	file:
StatStor	./base/statistics.hh	/^    StatStor(Info *info)$/;"	f	class:Stats::StatStor
StatStor	./base/statistics.hh	/^class StatStor$/;"	c	namespace:Stats
StatTest	./unittest/stattest.cc	/^struct StatTest$/;"	s	file:
Stat_Event_Pri	./sim/eventq.hh	/^    static const Priority Stat_Event_Pri =              90;$/;"	m	class:EventBase
State	./arch/x86/decoder.hh	/^    enum State {$/;"	g	class:X86ISA::Decoder
State	./arch/x86/pagetable_walker.hh	/^            enum State {$/;"	g	class:X86ISA::Walker::WalkerState
State	./dev/arm/vgic.hh	/^    Bitfield<29,28> State;$/;"	m	class:VGic
State	./mem/cache/blk.hh	/^    typedef unsigned State;$/;"	t	class:CacheBlk
State	./mem/slicc/symbols/State.py	/^class State(Symbol):$/;"	c
State	./mem/xbar.hh	/^        enum State { IDLE, BUSY, RETRY };$/;"	g	class:BaseXBar::Layer
StateDeclAST	./mem/slicc/ast/StateDeclAST.py	/^class StateDeclAST(DeclAST):$/;"	c
StateID	./arch/arm/nativetrace.hh	/^    enum StateID {$/;"	g	class:Trace::ArmNativeTrace
StateMachine	./mem/slicc/symbols/StateMachine.py	/^class StateMachine(Symbol):$/;"	c
Statement	./arch/micro_asm.py	/^class Statement(object):$/;"	c
StatementAST	./mem/slicc/ast/StatementAST.py	/^class StatementAST(AST):$/;"	c
StatementListAST	./mem/slicc/ast/StatementListAST.py	/^class StatementListAST(AST):$/;"	c
StaticCastAST	./mem/slicc/ast/StaticCastAST.py	/^class StaticCastAST(ExprAST):$/;"	c
StaticInst	./cpu/static_inst.hh	/^    StaticInst(const char *_mnemonic, ExtMachInst _machInst, OpClass __opClass)$/;"	f	class:StaticInst
StaticInst	./cpu/static_inst.hh	/^class StaticInst : public RefCounted, public StaticInstFlags$/;"	c
StaticInstFlags	./cpu/StaticInstFlags.py	/^class StaticInstFlags(Enum):$/;"	c
StaticInstPtr	./cpu/static_inst_fwd.hh	/^typedef RefCountingPtr<StaticInst> StaticInstPtr;$/;"	t
Statistics	./arch/alpha/kernel_stats.cc	/^Statistics::Statistics(System *system)$/;"	f	class:AlphaISA::Kernel::Statistics
Statistics	./arch/alpha/kernel_stats.hh	/^class Statistics : public ::Kernel::Statistics$/;"	c	namespace:AlphaISA::Kernel
Statistics	./arch/arm/kernel_stats.hh	/^    Statistics(System *system) : ::Kernel::Statistics(system)$/;"	f	class:ArmISA::Kernel::Statistics
Statistics	./arch/arm/kernel_stats.hh	/^class Statistics : public ::Kernel::Statistics$/;"	c	namespace:ArmISA::Kernel
Statistics	./arch/mips/kernel_stats.hh	/^    Statistics(System *system) : ::Kernel::Statistics(system)$/;"	f	class:MipsISA::Kernel::Statistics
Statistics	./arch/mips/kernel_stats.hh	/^class Statistics : public ::Kernel::Statistics$/;"	c	namespace:MipsISA::Kernel
Statistics	./arch/power/kernel_stats.hh	/^    Statistics(System *system) : ::Kernel::Statistics(system)$/;"	f	class:PowerISA::Kernel::Statistics
Statistics	./arch/power/kernel_stats.hh	/^class Statistics : public ::Kernel::Statistics$/;"	c	namespace:PowerISA::Kernel
Statistics	./arch/sparc/kernel_stats.hh	/^    Statistics(System *system) : ::Kernel::Statistics(system)$/;"	f	class:SparcISA::Kernel::Statistics
Statistics	./arch/sparc/kernel_stats.hh	/^class Statistics : public ::Kernel::Statistics$/;"	c	namespace:SparcISA::Kernel
Statistics	./arch/x86/kernel_stats.hh	/^    Statistics(System * system) : ::Kernel::Statistics(system)$/;"	f	class:X86ISA::Kernel::Statistics
Statistics	./arch/x86/kernel_stats.hh	/^class Statistics : public ::Kernel::Statistics$/;"	c	namespace:X86ISA::Kernel
Statistics	./kern/kernel_stats.cc	/^Statistics::Statistics(System *system)$/;"	f	class:Kernel::Statistics
Statistics	./kern/kernel_stats.hh	/^class Statistics : public Serializable$/;"	c	namespace:Kernel
Stats	./base/statistics.cc	/^namespace Stats {$/;"	n	file:
Stats	./base/statistics.hh	/^namespace Stats {$/;"	n
Stats	./base/stats/info.hh	/^namespace Stats {$/;"	n
Stats	./base/stats/output.hh	/^namespace Stats {$/;"	n
Stats	./base/stats/text.cc	/^namespace Stats {$/;"	n	file:
Stats	./base/stats/text.hh	/^namespace Stats {$/;"	n
Stats	./base/stats/types.hh	/^namespace Stats {$/;"	n
Stats	./sim/stat_control.cc	/^namespace Stats {$/;"	n	file:
Stats	./sim/stat_control.hh	/^namespace Stats {$/;"	n
Stats	./sim/stat_register.cc	/^namespace Stats$/;"	n	file:
Stats	./sim/stat_register.hh	/^namespace Stats$/;"	n
StatsCallback	./mem/ruby/network/Network.hh	/^        StatsCallback(Network *_ctr)$/;"	f	class:Network::StatsCallback
StatsCallback	./mem/ruby/network/Network.hh	/^    class StatsCallback : public Callback$/;"	c	class:Network
StatsCallback	./mem/ruby/slicc_interface/AbstractController.hh	/^        StatsCallback(AbstractController *_ctr) : ctr(_ctr) {}$/;"	f	class:AbstractController::StatsCallback
StatsCallback	./mem/ruby/slicc_interface/AbstractController.hh	/^    class StatsCallback : public Callback$/;"	c	class:AbstractController
Status	./cpu/base_dyn_inst.hh	/^    enum Status {$/;"	g	class:BaseDynInst
Status	./cpu/kvm/base.hh	/^    enum Status {$/;"	g	class:BaseKvmCPU
Status	./cpu/o3/cpu.hh	/^    enum Status {$/;"	g	class:FullO3CPU
Status	./cpu/o3/iew.hh	/^    enum Status {$/;"	g	class:DefaultIEW
Status	./cpu/o3/rob.hh	/^    enum Status {$/;"	g	class:ROB
Status	./cpu/o3/thread_state.hh	/^    typedef ThreadContext::Status Status;$/;"	t	struct:O3ThreadState
Status	./cpu/simple/base.hh	/^    enum Status {$/;"	g	class:BaseSimpleCPU
Status	./cpu/simple_thread.hh	/^    typedef ThreadContext::Status Status;$/;"	t	class:SimpleThread
Status	./cpu/thread_context.hh	/^    enum Status$/;"	g	class:ThreadContext
Status	./cpu/thread_state.hh	/^    typedef ThreadContext::Status Status;$/;"	t	struct:ThreadState
Status	./dev/net/Ethernet.py	/^    Status = 0x0000$/;"	v	class:IGbE
Status	./dev/net/Ethernet.py	/^    Status = 0x0290$/;"	v	class:NSGigE
Status	./dev/net/Ethernet.py	/^    Status = 0x0290$/;"	v	class:Sinic
Status	./dev/pci/CopyEngine.py	/^    Status = 0x0000$/;"	v	class:CopyEngine
Status	./dev/pci/PciDevice.py	/^    Status = Param.UInt16(0, "Status")$/;"	v	class:PciDevice
Status	./dev/storage/Ide.py	/^    Status = 0x280$/;"	v	class:IdeController
Status	./dev/virtio/block.hh	/^    typedef uint8_t Status;$/;"	t	class:VirtIOBlock
StatusRequest	./dev/ps2.hh	/^    StatusRequest   = 0xe9,$/;"	e	enum:Ps2::__anon4
Storage	./base/statistics.hh	/^    typedef Stor Storage;$/;"	t	class:Stats::DistBase
Storage	./base/statistics.hh	/^    typedef Stor Storage;$/;"	t	class:Stats::ScalarBase
Storage	./base/statistics.hh	/^    typedef Stor Storage;$/;"	t	class:Stats::SparseHistBase
Storage	./base/statistics.hh	/^    typedef Stor Storage;$/;"	t	class:Stats::Vector2dBase
Storage	./base/statistics.hh	/^    typedef Stor Storage;$/;"	t	class:Stats::VectorBase
Storage	./base/statistics.hh	/^    typedef Stor Storage;$/;"	t	class:Stats::VectorDistBase
StorageParams	./base/statistics.hh	/^struct StorageParams$/;"	s	namespace:Stats
StoreBuffer	./cpu/minor/lsq.cc	/^LSQ::StoreBuffer::StoreBuffer(std::string name_, LSQ &lsq_,$/;"	f	class:Minor::LSQ::StoreBuffer
StoreBuffer	./cpu/minor/lsq.hh	/^    class StoreBuffer : public Named$/;"	c	class:Minor::LSQ
StoreBufferIssuing	./cpu/minor/lsq.hh	/^            StoreBufferIssuing, \/* Store in store buffer and has been$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
StoreBufferNeedsRetry	./cpu/minor/lsq.hh	/^            StoreBufferNeedsRetry, \/* Retry needed for store *\/$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
StoreCheck	./arch/x86/ldstflags.hh	/^        StoreCheck = 4$/;"	e	enum:X86ISA::FlagBit
StoreCondFailReq	./mem/packet.hh	/^        StoreCondFailReq,       \/\/ Failed StoreCondReq in MSHR (never sent)$/;"	e	enum:MemCmd::Command
StoreCondReq	./mem/packet.hh	/^        StoreCondReq,$/;"	e	enum:MemCmd::Command
StoreCondResp	./mem/packet.hh	/^        StoreCondResp,$/;"	e	enum:MemCmd::Command
StoreError	./arch/sparc/faults.hh	/^class StoreError : public SparcFault<StoreError> {};$/;"	c	namespace:SparcISA
StoreInStoreBuffer	./cpu/minor/lsq.hh	/^            StoreInStoreBuffer, \/* Store in the store buffer, before issuing$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
StoreSet	./cpu/o3/store_set.cc	/^StoreSet::StoreSet(uint64_t clear_period, int _SSIT_size, int _LFST_size)$/;"	f	class:StoreSet
StoreSet	./cpu/o3/store_set.hh	/^    StoreSet() { };$/;"	f	class:StoreSet
StoreSet	./cpu/o3/store_set.hh	/^class StoreSet$/;"	c
StoreToStoreBuffer	./cpu/minor/lsq.hh	/^            StoreToStoreBuffer, \/* Store in transfers on its way to the$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
StoreTrace	./mem/ruby/profiler/StoreTrace.cc	/^StoreTrace::StoreTrace(Addr addr)$/;"	f	class:StoreTrace
StoreTrace	./mem/ruby/profiler/StoreTrace.hh	/^    StoreTrace() { }$/;"	f	class:StoreTrace
StoreTrace	./mem/ruby/profiler/StoreTrace.hh	/^class StoreTrace$/;"	c
StrideEntry	./mem/cache/prefetch/stride.hh	/^        StrideEntry() : instAddr(0), lastAddr(0), isSecure(false), stride(0),$/;"	f	struct:StridePrefetcher::StrideEntry
StrideEntry	./mem/cache/prefetch/stride.hh	/^    struct StrideEntry$/;"	s	class:StridePrefetcher
StridePrefetcher	./mem/cache/prefetch/Prefetcher.py	/^class StridePrefetcher(QueuedPrefetcher):$/;"	c
StridePrefetcher	./mem/cache/prefetch/stride.cc	/^StridePrefetcher::StridePrefetcher(const StridePrefetcherParams *p)$/;"	f	class:StridePrefetcher
StridePrefetcher	./mem/cache/prefetch/stride.hh	/^class StridePrefetcher : public QueuedPrefetcher$/;"	c
String	./python/m5/params.py	/^class String(ParamValue,str):$/;"	c
StringWrap	./base/trace.hh	/^    StringWrap(const std::string &s) : str(s) {}$/;"	f	struct:StringWrap
StringWrap	./base/trace.hh	/^struct StringWrap$/;"	s
StronglyOrdered	./arch/arm/pagetable.hh	/^        StronglyOrdered,$/;"	m	class:ArmISA::TlbEntry::MemoryType
StubSlavePort	./mem/external_slave.cc	/^    StubSlavePort(const std::string &name_,$/;"	f	class:StubSlavePort
StubSlavePort	./mem/external_slave.cc	/^class StubSlavePort : public ExternalSlave::Port$/;"	c	file:
StubSlavePortHandler	./mem/external_slave.cc	/^class StubSlavePortHandler : public$/;"	c	file:
SubBitUnion	./base/bitunion.hh	316;"	d
SubBlock	./mem/ruby/common/SubBlock.cc	/^SubBlock::SubBlock(Addr addr, int size)$/;"	f	class:SubBlock
SubBlock	./mem/ruby/common/SubBlock.hh	/^    SubBlock() { }$/;"	f	class:SubBlock
SubBlock	./mem/ruby/common/SubBlock.hh	/^class SubBlock$/;"	c
SubClassCode	./dev/net/Ethernet.py	/^    SubClassCode = 0x00$/;"	v	class:IGbE
SubClassCode	./dev/net/Ethernet.py	/^    SubClassCode = 0x00$/;"	v	class:NSGigE
SubClassCode	./dev/net/Ethernet.py	/^    SubClassCode = 0x00$/;"	v	class:Sinic
SubClassCode	./dev/pci/CopyEngine.py	/^    SubClassCode = 0x08$/;"	v	class:CopyEngine
SubClassCode	./dev/pci/PciDevice.py	/^    SubClassCode = Param.UInt8(0, "Sub-Class Code")$/;"	v	class:PciDevice
SubClassCode	./dev/storage/Ide.py	/^    SubClassCode = 0x01$/;"	v	class:IdeController
SubOperandList	./arch/isa_parser.py	/^class SubOperandList(OperandList):$/;"	c
SubOption	./python/m5/util/jobfile.py	/^class SubOption(Data):$/;"	c
SubSystem	./sim/SubSystem.py	/^class SubSystem(SimObject):$/;"	c
SubSystem	./sim/sub_system.hh	/^    SubSystem(const Params *p) :$/;"	f	class:SubSystem
SubSystem	./sim/sub_system.hh	/^class SubSystem : public SimObject$/;"	c
SubsystemID	./dev/net/Ethernet.py	/^    SubsystemID = 0x1008$/;"	v	class:IGbE
SubsystemID	./dev/pci/CopyEngine.py	/^    SubsystemID = 0$/;"	v	class:CopyEngine
SubsystemID	./dev/pci/PciDevice.py	/^    SubsystemID = Param.UInt16(0x00, "Subsystem ID")$/;"	v	class:PciDevice
SubsystemVendorID	./dev/net/Ethernet.py	/^    SubsystemVendorID = 0x8086$/;"	v	class:IGbE
SubsystemVendorID	./dev/pci/CopyEngine.py	/^    SubsystemVendorID = 0$/;"	v	class:CopyEngine
SubsystemVendorID	./dev/pci/PciDevice.py	/^    SubsystemVendorID = Param.UInt16(0x00, "Subsystem Vendor ID")$/;"	v	class:PciDevice
SubsystemVendorID	./dev/virtio/VirtIO.py	/^    SubsystemVendorID = VendorID;$/;"	v	class:PciVirtIO
SumNode	./base/statistics.hh	/^    SumNode(NodePtr &p) : l(p), vresult(1) {}$/;"	f	class:Stats::SumNode
SumNode	./base/statistics.hh	/^class SumNode : public Node$/;"	c	namespace:Stats
SupervisorCall	./arch/arm/faults.hh	/^    SupervisorCall(ExtMachInst _machInst, uint32_t _iss,$/;"	f	class:ArmISA::SupervisorCall
SupervisorCall	./arch/arm/faults.hh	/^class SupervisorCall : public ArmFaultVals<SupervisorCall>$/;"	c	namespace:ArmISA
SupervisorTrap	./arch/arm/faults.hh	/^    SupervisorTrap(ExtMachInst _machInst, uint32_t _iss,$/;"	f	class:ArmISA::SupervisorTrap
SupervisorTrap	./arch/arm/faults.hh	/^class SupervisorTrap : public ArmFaultVals<SupervisorTrap>$/;"	c	namespace:ArmISA
SuppressReturnValue	./sim/syscall_emul.hh	/^        SuppressReturnValue = 1,$/;"	e	enum:SyscallDesc::Flags
SuspendThread	./cpu/minor/pipe_data.hh	/^        SuspendThread,$/;"	e	enum:Minor::BranchData::Reason
Suspended	./cpu/thread_context.hh	/^        Suspended,$/;"	e	enum:ThreadContext::Status
SwExpl	./base/cp_annotate.hh	/^    typedef std::map<StackId, bool> SwExpl;$/;"	t	class:CPA
SwReg	./dev/arm/rv_ctrl.hh	/^        SwReg      = 0x04,$/;"	e	enum:RealViewCtrl::__anon19
Swap	./arch/arm/insts/mem.hh	/^    Swap(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::Swap
Swap	./arch/arm/insts/mem.hh	/^class Swap : public PredOp$/;"	c	namespace:ArmISA
SwapReq	./mem/packet.hh	/^        SwapReq,$/;"	e	enum:MemCmd::Command
SwapResp	./mem/packet.hh	/^        SwapResp,$/;"	e	enum:MemCmd::Command
Switch	./mem/ruby/network/simple/SimpleNetwork.py	/^class Switch(BasicRouter):$/;"	c
Switch	./mem/ruby/network/simple/Switch.cc	/^Switch::Switch(const Params *p) : BasicRouter(p)$/;"	f	class:Switch
Switch	./mem/ruby/network/simple/Switch.hh	/^class Switch : public BasicRouter$/;"	c
SwitchID	./mem/ruby/common/TypeDefines.hh	/^typedef unsigned int SwitchID;$/;"	t
Switch_d	./mem/ruby/network/garnet/fixed-pipeline/Switch_d.cc	/^Switch_d::Switch_d(Router_d *router)$/;"	f	class:Switch_d
Switch_d	./mem/ruby/network/garnet/fixed-pipeline/Switch_d.hh	/^class Switch_d : public Consumer$/;"	c
SwitchedOut	./cpu/o3/cpu.hh	/^        SwitchedOut$/;"	e	enum:FullO3CPU::Status
SxOF	./arch/x86/insts/microop.hh	/^            SxOF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
SxOvZF	./arch/x86/insts/microop.hh	/^            SxOvZF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
Symbol	./mem/slicc/symbols/Symbol.py	/^class Symbol(PairContainer):$/;"	c
SymbolTable	./base/loader/symtab.hh	/^    SymbolTable() {}$/;"	f	class:SymbolTable
SymbolTable	./base/loader/symtab.hh	/^    SymbolTable(const std::string &file) { load(file); }$/;"	f	class:SymbolTable
SymbolTable	./base/loader/symtab.hh	/^class SymbolTable$/;"	c
SymbolTable	./mem/slicc/symbols/SymbolTable.py	/^class SymbolTable(object):$/;"	c
Sync	./dev/net/dist_iface.hh	/^    class Sync : public Serializable$/;"	c	class:DistIface
SyncEvent	./dev/net/dist_iface.hh	/^        SyncEvent() : GlobalSyncEvent(Sim_Exit_Pri, 0), _draining(false) {}$/;"	f	class:DistIface::SyncEvent
SyncEvent	./dev/net/dist_iface.hh	/^    class SyncEvent : public GlobalSyncEvent$/;"	c	class:DistIface
SyncNode	./dev/net/dist_iface.cc	/^DistIface::SyncNode::SyncNode()$/;"	f	class:DistIface::SyncNode
SyncNode	./dev/net/dist_iface.hh	/^    class SyncNode: public Sync$/;"	c	class:DistIface
SyncSwitch	./dev/net/dist_iface.cc	/^DistIface::SyncSwitch::SyncSwitch(int num_nodes)$/;"	f	class:DistIface::SyncSwitch
SyncSwitch	./dev/net/dist_iface.hh	/^    class SyncSwitch: public Sync$/;"	c	class:DistIface
SynchExtAbtOnTranslTableWalkLL	./arch/arm/faults.hh	/^        SynchExtAbtOnTranslTableWalkLL,$/;"	e	enum:ArmISA::ArmFault::FaultSource
SynchPtyErrOnMemoryAccess	./arch/arm/faults.hh	/^        SynchPtyErrOnMemoryAccess,$/;"	e	enum:ArmISA::ArmFault::FaultSource
SynchPtyErrOnTranslTableWalkLL	./arch/arm/faults.hh	/^        SynchPtyErrOnTranslTableWalkLL = SynchExtAbtOnTranslTableWalkLL + 4,$/;"	e	enum:ArmISA::ArmFault::FaultSource
SynchronousExternalAbort	./arch/arm/faults.hh	/^        SynchronousExternalAbort,$/;"	e	enum:ArmISA::ArmFault::FaultSource
SysDC64	./arch/arm/insts/mem64.hh	/^    SysDC64(const char *mnem, ExtMachInst _machInst, OpClass __opClass,$/;"	f	class:ArmISA::SysDC64
SysDC64	./arch/arm/insts/mem64.hh	/^class SysDC64 : public ArmStaticInst$/;"	c	namespace:ArmISA
SysDescTable	./arch/x86/bios/acpi.cc	/^X86ISA::ACPI::SysDescTable::SysDescTable(Params *p,$/;"	f	class:X86ISA::ACPI::SysDescTable
SysDescTable	./arch/x86/bios/acpi.hh	/^class SysDescTable : public SimObject$/;"	c	namespace:X86ISA::ACPI
SyscallDesc	./sim/syscall_emul.hh	/^    SyscallDesc(const char *_name, FuncPtr _funcPtr, int _flags = 0)$/;"	f	class:SyscallDesc
SyscallDesc	./sim/syscall_emul.hh	/^class SyscallDesc {$/;"	c
SyscallNumReg	./arch/alpha/registers.hh	/^const RegIndex SyscallNumReg = 0;$/;"	m	namespace:AlphaISA
SyscallNumReg	./arch/arm/registers.hh	/^const int SyscallNumReg = ReturnValueReg;$/;"	m	namespace:ArmISA
SyscallNumReg	./arch/power/registers.hh	/^const int SyscallNumReg = 0;$/;"	m	namespace:PowerISA
SyscallPseudoReturnReg	./arch/alpha/registers.hh	/^const RegIndex SyscallPseudoReturnReg = 20;$/;"	m	namespace:AlphaISA
SyscallPseudoReturnReg	./arch/arm/registers.hh	/^const int SyscallPseudoReturnReg = ReturnValueReg;$/;"	m	namespace:ArmISA
SyscallPseudoReturnReg	./arch/mips/registers.hh	/^const int SyscallPseudoReturnReg = 3;$/;"	m	namespace:MipsISA
SyscallPseudoReturnReg	./arch/power/registers.hh	/^const int SyscallPseudoReturnReg = 3;$/;"	m	namespace:PowerISA
SyscallPseudoReturnReg	./arch/sparc/registers.hh	/^const int SyscallPseudoReturnReg = 9;$/;"	m	namespace:SparcISA
SyscallPseudoReturnReg	./arch/x86/registers.hh	/^const int SyscallPseudoReturnReg = INTREG_RDX;$/;"	m	namespace:X86ISA
SyscallReturn	./sim/syscallreturn.hh	/^    SyscallReturn(int64_t v)$/;"	f	class:SyscallReturn
SyscallReturn	./sim/syscallreturn.hh	/^class SyscallReturn$/;"	c
SyscallSuccessReg	./arch/alpha/registers.hh	/^const RegIndex SyscallSuccessReg = 19;$/;"	m	namespace:AlphaISA
SyscallSuccessReg	./arch/arm/registers.hh	/^const int SyscallSuccessReg = ReturnValueReg;$/;"	m	namespace:ArmISA
SyscallSuccessReg	./arch/mips/registers.hh	/^const int SyscallSuccessReg = 7;$/;"	m	namespace:MipsISA
SyscallSuccessReg	./arch/power/registers.hh	/^const int SyscallSuccessReg = 3;$/;"	m	namespace:PowerISA
SyscallTable	./arch/arm/freebsd/process.hh	/^    struct SyscallTable$/;"	s	class:ArmFreebsdProcessBits
SyscallTable	./arch/arm/linux/process.hh	/^    struct SyscallTable$/;"	s	class:ArmLinuxProcessBits
System	./sim/System.py	/^class System(MemObject):$/;"	c
System	./sim/system.cc	/^System::System(Params *p)$/;"	f	class:System
System	./sim/system.hh	/^class System : public MemObject$/;"	c
SystemCallFault	./arch/mips/faults.hh	/^class SystemCallFault : public MipsFault<SystemCallFault> {};$/;"	c	namespace:MipsISA
SystemCalls	./kern/tru64/tru64_syscalls.hh	/^class SystemCalls<Tru64>$/;"	c
SystemCounter	./dev/arm/generic_timer.cc	/^SystemCounter::SystemCounter()$/;"	f	class:SystemCounter
SystemCounter	./dev/arm/generic_timer.hh	/^class SystemCounter : public Serializable$/;"	c
SystemError	./arch/arm/faults.cc	/^SystemError::SystemError()$/;"	f	class:ArmISA::SystemError
SystemError	./arch/arm/faults.hh	/^class SystemError : public ArmFaultVals<SystemError>$/;"	c	namespace:ArmISA
SystemManagementInterrupt	./arch/x86/faults.hh	/^        SystemManagementInterrupt() :$/;"	f	class:X86ISA::SystemManagementInterrupt
SystemManagementInterrupt	./arch/x86/faults.hh	/^    class SystemManagementInterrupt : public X86Interrupt$/;"	c	namespace:X86ISA
SystemPort	./sim/system.hh	/^        SystemPort(const std::string &_name, MemObject *_owner)$/;"	f	class:System::SystemPort
SystemPort	./sim/system.hh	/^    class SystemPort : public MasterPort$/;"	c	class:System
SystemReset	./dev/x86/i8042.hh	/^        SystemReset = 0xFE$/;"	e	enum:X86ISA::I8042::Command
SystemXBar	./mem/XBar.py	/^class SystemXBar(CoherentXBar):$/;"	c
T1000	./dev/sparc/T1000.py	/^class T1000(Platform):$/;"	c
T1000	./dev/sparc/t1000.cc	/^T1000::T1000(const Params *p)$/;"	f	class:T1000
T1000	./dev/sparc/t1000.hh	/^class T1000 : public Platform$/;"	c
TADV	./dev/net/i8254xGBe_defs.hh	/^    struct TADV : public Reg<uint32_t> { \/\/ 0x382C TADV Register$/;"	s	struct:iGbReg::Regs
TAIL_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum flit_type {HEAD_, BODY_, TAIL_, HEAD_TAIL_, NUM_FLIT_TYPE_};$/;"	e	enum:flit_type
TANAR	./dev/net/ns_gige_reg.h	/^    TANAR =             0xe8,$/;"	e	enum:DeviceRegisterAddress
TANAR_FULL_DUP	./dev/net/ns_gige_reg.h	/^     TANAR_FULL_DUP =   0x00000020,$/;"	e	enum:TBIAutoNegotiationAdvertisementRegister
TANAR_HALF_DUP	./dev/net/ns_gige_reg.h	/^     TANAR_HALF_DUP =   0x00000040,$/;"	e	enum:TBIAutoNegotiationAdvertisementRegister
TANAR_NP	./dev/net/ns_gige_reg.h	/^     TANAR_NP =         0x00008000,$/;"	e	enum:TBIAutoNegotiationAdvertisementRegister
TANAR_PS1	./dev/net/ns_gige_reg.h	/^     TANAR_PS1 =        0x00000080,$/;"	e	enum:TBIAutoNegotiationAdvertisementRegister
TANAR_PS2	./dev/net/ns_gige_reg.h	/^     TANAR_PS2 =        0x00000100,$/;"	e	enum:TBIAutoNegotiationAdvertisementRegister
TANAR_RF1	./dev/net/ns_gige_reg.h	/^     TANAR_RF1 =        0x00001000,$/;"	e	enum:TBIAutoNegotiationAdvertisementRegister
TANAR_RF2	./dev/net/ns_gige_reg.h	/^     TANAR_RF2 =        0x00002000,$/;"	e	enum:TBIAutoNegotiationAdvertisementRegister
TANAR_UNUSED	./dev/net/ns_gige_reg.h	/^     TANAR_UNUSED =     0x00000E1F$/;"	e	enum:TBIAutoNegotiationAdvertisementRegister
TANER	./dev/net/ns_gige_reg.h	/^    TANER =             0xf0,$/;"	e	enum:DeviceRegisterAddress
TANLPAR	./dev/net/ns_gige_reg.h	/^    TANLPAR =           0xec,$/;"	e	enum:DeviceRegisterAddress
TBETable	./mem/ruby/structures/TBETable.hh	/^    TBETable(int number_of_TBEs)$/;"	f	class:TBETable
TBETable	./mem/ruby/structures/TBETable.hh	/^class TBETable$/;"	c
TBIAutoNegotiationAdvertisementRegister	./dev/net/ns_gige_reg.h	/^enum TBIAutoNegotiationAdvertisementRegister {$/;"	g
TBICR	./dev/net/ns_gige_reg.h	/^    TBICR =             0xe0,$/;"	e	enum:DeviceRegisterAddress
TBICR_MR_AN_ENABLE	./dev/net/ns_gige_reg.h	/^     TBICR_MR_AN_ENABLE =       0x00001000,$/;"	e	enum:TBIControlRegister
TBICR_MR_LOOPBACK	./dev/net/ns_gige_reg.h	/^     TBICR_MR_LOOPBACK =        0x00004000,$/;"	e	enum:TBIControlRegister
TBICR_MR_RESTART_AN	./dev/net/ns_gige_reg.h	/^     TBICR_MR_RESTART_AN =      0x00000200$/;"	e	enum:TBIControlRegister
TBIControlRegister	./dev/net/ns_gige_reg.h	/^enum TBIControlRegister {$/;"	g
TBISR	./dev/net/ns_gige_reg.h	/^    TBISR =             0xe4,$/;"	e	enum:DeviceRegisterAddress
TBISR_MR_AN_COMPLETE	./dev/net/ns_gige_reg.h	/^     TBISR_MR_AN_COMPLETE =     0x00000004$/;"	e	enum:TBIStatusRegister
TBISR_MR_LINK_STATUS	./dev/net/ns_gige_reg.h	/^     TBISR_MR_LINK_STATUS =     0x00000020,$/;"	e	enum:TBIStatusRegister
TBIStatusRegister	./dev/net/ns_gige_reg.h	/^enum TBIStatusRegister {$/;"	g
TBL_SYSINFO	./arch/alpha/linux/linux.hh	/^    static const int TBL_SYSINFO = 12;$/;"	m	class:AlphaLinux
TBL_SYSINFO	./arch/alpha/tru64/tru64.hh	/^    static const int TBL_SYSINFO = 12;$/;"	m	class:AlphaTru64
TBL_SYSINFO	./arch/arm/linux/linux.hh	/^    static const int TBL_SYSINFO = 12;$/;"	m	class:ArmLinux32
TBL_SYSINFO	./arch/arm/linux/linux.hh	/^    static const int TBL_SYSINFO = 12;$/;"	m	class:ArmLinux64
TBL_SYSINFO	./arch/mips/linux/linux.hh	/^    static const int TBL_SYSINFO = 12;$/;"	m	class:MipsLinux
TCPDUMP_MAGIC	./dev/net/etherdump.cc	54;"	d	file:
TCPIface	./dev/net/tcp_iface.cc	/^TCPIface::TCPIface(string server_name, unsigned server_port,$/;"	f	class:TCPIface
TCPIface	./dev/net/tcp_iface.hh	/^class TCPIface : public DistIface$/;"	c
TCSETAW_	./arch/arm/linux/linux.hh	/^    static const unsigned TCSETAW_    = 0x5407;     \/\/ 2.6.15 kernel$/;"	m	class:ArmLinux64
TCTL	./dev/net/i8254xGBe_defs.hh	/^    struct TCTL : public Reg<uint32_t> { \/\/ 0x0400 TCTL Register$/;"	s	struct:iGbReg::Regs
TDBA	./dev/net/i8254xGBe_defs.hh	/^    struct TDBA : public Reg<uint64_t> { \/\/ 0x3800 TDBAL Register$/;"	s	struct:iGbReg::Regs
TDH	./dev/net/i8254xGBe_defs.hh	/^    struct TDH : public Reg<uint32_t> { \/\/ 0x3810 TDH Register$/;"	s	struct:iGbReg::Regs
TDLEN	./dev/net/i8254xGBe_defs.hh	/^    struct TDLEN : public Reg<uint32_t> { \/\/ 0x3808 TDLEN Register$/;"	s	struct:iGbReg::Regs
TDT	./dev/net/i8254xGBe_defs.hh	/^    struct TDT : public Reg<uint32_t> { \/\/ 0x3818 TDT Register$/;"	s	struct:iGbReg::Regs
TESR	./dev/net/ns_gige_reg.h	/^    TESR =              0xf4,$/;"	e	enum:DeviceRegisterAddress
TESTER_ALLOCATOR	./cpu/testers/memtest/memtest.cc	/^unsigned int TESTER_ALLOCATOR = 0;$/;"	v
TESTER_NETWORK	./cpu/testers/networktest/networktest.cc	/^int TESTER_NETWORK=0;$/;"	v
TFBit	./arch/x86/regs/misc.hh	/^        TFBit = 1 << 8,$/;"	e	enum:X86ISA::RFLAGBit
TGT_AT_FDCWD	./kern/freebsd/freebsd.hh	/^    static const int TGT_AT_FDCWD   = -100;$/;"	m	class:FreeBSD
TGT_AT_FDCWD	./kern/linux/linux.hh	/^    static const int TGT_AT_FDCWD   = -100;$/;"	m	class:Linux
TGT_EAGAIN	./arch/alpha/linux/linux.hh	/^    static const unsigned TGT_EAGAIN      = 35;$/;"	m	class:AlphaLinux
TGT_EAGAIN	./kern/linux/linux.hh	/^    static const unsigned TGT_EAGAIN      = 11;$/;"	m	class:Linux
TGT_EWOULDBLOCK	./arch/alpha/linux/linux.hh	/^    static const unsigned TGT_EWOULDBLOCK = TGT_EAGAIN;$/;"	m	class:AlphaLinux
TGT_EWOULDBLOCK	./kern/linux/linux.hh	/^    static const unsigned TGT_EWOULDBLOCK = TGT_EAGAIN;$/;"	m	class:Linux
TGT_FASYNC	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_FASYNC      = 0x00000040; \/\/!< FASYNC$/;"	m	class:ArmFreebsd32
TGT_FASYNC	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_FASYNC      = 0x00000040; \/\/!< FASYNC$/;"	m	class:ArmFreebsd64
TGT_FASYNC	./arch/arm/linux/linux.hh	/^    static const int TGT_FASYNC      = 00020000; \/\/!< FASYNC$/;"	m	class:ArmLinux32
TGT_FASYNC	./arch/arm/linux/linux.hh	/^    static const int TGT_FASYNC      = 00020000; \/\/!< FASYNC$/;"	m	class:ArmLinux64
TGT_FASYNC	./arch/power/linux/linux.hh	/^    static const int TGT_FASYNC      = 00020000; \/\/!< FASYNC$/;"	m	class:PowerLinux
TGT_FIONREAD	./arch/alpha/linux/linux.hh	/^    static const unsigned TGT_FIONREAD   = 0x4004667f;$/;"	m	class:AlphaLinux
TGT_FIONREAD	./arch/alpha/tru64/tru64.hh	/^    static const unsigned TGT_FIONREAD   = 0x4004667f;$/;"	m	class:AlphaTru64
TGT_FIONREAD	./arch/mips/linux/linux.hh	/^    static const unsigned TGT_FIONREAD   = 0x467f;$/;"	m	class:MipsLinux
TGT_FIONREAD	./arch/power/linux/linux.hh	/^    static const unsigned TGT_FIONREAD   = 0x4004667f;$/;"	m	class:PowerLinux
TGT_FIONREAD	./arch/sparc/linux/linux.hh	/^    static const unsigned TGT_FIONREAD  = 0x4004667f;$/;"	m	class:SparcLinux
TGT_FIONREAD	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_FIONREAD   = 0x4004667f;$/;"	m	class:FreeBSD
TGT_FIONREAD	./kern/linux/linux.hh	/^    static const unsigned TGT_FIONREAD   = 0x541B;$/;"	m	class:Linux
TGT_FUTEX_PRIVATE_FLAG	./kern/linux/linux.hh	/^    static const unsigned TGT_FUTEX_PRIVATE_FLAG = 128;$/;"	m	class:Linux
TGT_FUTEX_WAIT	./kern/linux/linux.hh	/^    static const unsigned TGT_FUTEX_WAIT  = 0;$/;"	m	class:Linux
TGT_FUTEX_WAKE	./kern/linux/linux.hh	/^    static const unsigned TGT_FUTEX_WAKE  = 1;$/;"	m	class:Linux
TGT_MAP_ANONYMOUS	./arch/alpha/linux/linux.hh	/^    static const unsigned TGT_MAP_ANONYMOUS = 0x10;$/;"	m	class:AlphaLinux
TGT_MAP_ANONYMOUS	./arch/alpha/tru64/tru64.hh	/^    static const unsigned TGT_MAP_ANONYMOUS = 0x10;$/;"	m	class:AlphaTru64
TGT_MAP_ANONYMOUS	./arch/arm/freebsd/freebsd.hh	/^    static const unsigned TGT_MAP_ANONYMOUS = 0x1000;$/;"	m	class:ArmFreebsd32
TGT_MAP_ANONYMOUS	./arch/arm/freebsd/freebsd.hh	/^    static const unsigned TGT_MAP_ANONYMOUS = 0x1000;$/;"	m	class:ArmFreebsd64
TGT_MAP_ANONYMOUS	./arch/arm/linux/linux.hh	/^    static const unsigned TGT_MAP_ANONYMOUS = 0x20;$/;"	m	class:ArmLinux32
TGT_MAP_ANONYMOUS	./arch/arm/linux/linux.hh	/^    static const unsigned TGT_MAP_ANONYMOUS = 0x20;$/;"	m	class:ArmLinux64
TGT_MAP_ANONYMOUS	./arch/mips/linux/linux.hh	/^    static const unsigned TGT_MAP_ANONYMOUS = 0x800;$/;"	m	class:MipsLinux
TGT_MAP_ANONYMOUS	./arch/power/linux/linux.hh	/^    static const unsigned TGT_MAP_ANONYMOUS = 0x20;$/;"	m	class:PowerLinux
TGT_MAP_ANONYMOUS	./arch/sparc/linux/linux.hh	/^    static const unsigned TGT_MAP_ANONYMOUS = 0x20;$/;"	m	class:SparcLinux
TGT_MAP_ANONYMOUS	./arch/sparc/solaris/solaris.hh	/^    static const unsigned TGT_MAP_ANONYMOUS = 0x100;$/;"	m	class:SparcSolaris
TGT_MAP_ANONYMOUS	./arch/x86/linux/linux.hh	/^    static const unsigned TGT_MAP_ANONYMOUS = 0x20;$/;"	m	class:X86Linux32
TGT_MAP_ANONYMOUS	./arch/x86/linux/linux.hh	/^    static const unsigned TGT_MAP_ANONYMOUS = 0x20;$/;"	m	class:X86Linux64
TGT_MAP_FIXED	./arch/alpha/linux/linux.hh	/^    static const unsigned TGT_MAP_FIXED     = 0x100;$/;"	m	class:AlphaLinux
TGT_MAP_FIXED	./arch/alpha/tru64/tru64.hh	/^    static const unsigned TGT_MAP_FIXED     = 0x100;$/;"	m	class:AlphaTru64
TGT_MAP_FIXED	./arch/arm/freebsd/freebsd.hh	/^    static const unsigned TGT_MAP_FIXED     = 0x0010;$/;"	m	class:ArmFreebsd32
TGT_MAP_FIXED	./arch/arm/freebsd/freebsd.hh	/^    static const unsigned TGT_MAP_FIXED     = 0x0010;$/;"	m	class:ArmFreebsd64
TGT_MAP_FIXED	./arch/arm/linux/linux.hh	/^    static const unsigned TGT_MAP_FIXED     = 0x10;$/;"	m	class:ArmLinux32
TGT_MAP_FIXED	./arch/arm/linux/linux.hh	/^    static const unsigned TGT_MAP_FIXED     = 0x10;$/;"	m	class:ArmLinux64
TGT_MAP_FIXED	./arch/mips/linux/linux.hh	/^    static const unsigned TGT_MAP_FIXED     = 0x10;$/;"	m	class:MipsLinux
TGT_MAP_FIXED	./arch/power/linux/linux.hh	/^    static const unsigned TGT_MAP_FIXED     = 0x10;$/;"	m	class:PowerLinux
TGT_MAP_FIXED	./arch/sparc/linux/linux.hh	/^    static const unsigned TGT_MAP_FIXED     = 0x10;$/;"	m	class:SparcLinux
TGT_MAP_FIXED	./arch/sparc/solaris/solaris.hh	/^    static const unsigned TGT_MAP_FIXED     = 0x10;$/;"	m	class:SparcSolaris
TGT_MAP_FIXED	./arch/x86/linux/linux.hh	/^    static const unsigned TGT_MAP_FIXED     = 0x10;$/;"	m	class:X86Linux32
TGT_MAP_FIXED	./arch/x86/linux/linux.hh	/^    static const unsigned TGT_MAP_FIXED     = 0x10;$/;"	m	class:X86Linux64
TGT_MREMAP_FIXED	./kern/linux/linux.hh	/^    static const unsigned TGT_MREMAP_FIXED      = 0x2;$/;"	m	class:Linux
TGT_MREMAP_MAYMOVE	./kern/linux/linux.hh	/^    static const unsigned TGT_MREMAP_MAYMOVE    = 0x1;$/;"	m	class:Linux
TGT_O_APPEND	./arch/alpha/linux/linux.hh	/^    static const int TGT_O_APPEND       = 00000010;     \/\/!< O_APPEND$/;"	m	class:AlphaLinux
TGT_O_APPEND	./arch/alpha/tru64/tru64.hh	/^    static const int TGT_O_APPEND       = 00000010;     \/\/!< O_APPEND$/;"	m	class:AlphaTru64
TGT_O_APPEND	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_APPEND    = 0x00000008; \/\/!< O_APPEND$/;"	m	class:ArmFreebsd32
TGT_O_APPEND	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_APPEND    = 0x00000008; \/\/!< O_APPEND$/;"	m	class:ArmFreebsd64
TGT_O_APPEND	./arch/arm/linux/linux.hh	/^    static const int TGT_O_APPEND    = 00002000; \/\/!< O_APPEND$/;"	m	class:ArmLinux32
TGT_O_APPEND	./arch/arm/linux/linux.hh	/^    static const int TGT_O_APPEND    = 00002000; \/\/!< O_APPEND$/;"	m	class:ArmLinux64
TGT_O_APPEND	./arch/mips/linux/linux.hh	/^    static const int TGT_O_APPEND       = 0x00000008;   \/\/!< O_APPEND$/;"	m	class:MipsLinux
TGT_O_APPEND	./arch/power/linux/linux.hh	/^    static const int TGT_O_APPEND    = 00002000; \/\/!< O_APPEND$/;"	m	class:PowerLinux
TGT_O_APPEND	./arch/sparc/linux/linux.hh	/^    static const int TGT_O_APPEND       = 0x00000008;   \/\/!< O_APPEND$/;"	m	class:SparcLinux
TGT_O_APPEND	./arch/sparc/solaris/solaris.hh	/^    static const int TGT_O_APPEND       = 0x00000008;   \/\/!< O_APPEND$/;"	m	class:SparcSolaris
TGT_O_APPEND	./arch/x86/linux/linux.hh	/^    static const int TGT_O_APPEND       = 00002000;     \/\/!< O_APPEND$/;"	m	class:X86Linux32
TGT_O_APPEND	./arch/x86/linux/linux.hh	/^    static const int TGT_O_APPEND       = 00002000;     \/\/!< O_APPEND$/;"	m	class:X86Linux64
TGT_O_ASYNC	./arch/x86/linux/linux.hh	/^    static const int TGT_O_ASYNC        = 00020000;$/;"	m	class:X86Linux32
TGT_O_ASYNC	./arch/x86/linux/linux.hh	/^    static const int TGT_O_ASYNC        = 00020000;$/;"	m	class:X86Linux64
TGT_O_CACHE	./arch/alpha/linux/linux.hh	/^    static const int TGT_O_CACHE        = 00400000;     \/\/!< O_CACHE$/;"	m	class:AlphaLinux
TGT_O_CACHE	./arch/alpha/tru64/tru64.hh	/^    static const int TGT_O_CACHE        = 00400000;     \/\/!< O_CACHE$/;"	m	class:AlphaTru64
TGT_O_CACHE	./arch/mips/linux/linux.hh	/^    static const int TGT_O_CACHE        = 0x00002000;   \/\/!< O_CACHE$/;"	m	class:MipsLinux
TGT_O_CLOEXEC	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_CLOEXEC   = 0x00100000; \/\/!< O_CLOEXEC$/;"	m	class:ArmFreebsd32
TGT_O_CLOEXEC	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_CLOEXEC   = 0x00100000; \/\/!< O_CLOEXEC$/;"	m	class:ArmFreebsd64
TGT_O_CLOEXEC	./arch/arm/linux/linux.hh	/^    static const int TGT_O_CLOEXEC   = 02000000; \/\/!< O_NOATIME$/;"	m	class:ArmLinux32
TGT_O_CLOEXEC	./arch/arm/linux/linux.hh	/^    static const int TGT_O_CLOEXEC   = 02000000; \/\/!< O_NOATIME$/;"	m	class:ArmLinux64
TGT_O_CLOEXEC	./arch/x86/linux/linux.hh	/^    static const int TGT_O_CLOEXEC      = 02000000;$/;"	m	class:X86Linux32
TGT_O_CLOEXEC	./arch/x86/linux/linux.hh	/^    static const int TGT_O_CLOEXEC      = 02000000;$/;"	m	class:X86Linux64
TGT_O_CREAT	./arch/alpha/linux/linux.hh	/^    static const int TGT_O_CREAT        = 00001000;     \/\/!< O_CREAT$/;"	m	class:AlphaLinux
TGT_O_CREAT	./arch/alpha/tru64/tru64.hh	/^    static const int TGT_O_CREAT        = 00001000;     \/\/!< O_CREAT$/;"	m	class:AlphaTru64
TGT_O_CREAT	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_CREAT     = 0x00000200; \/\/!< O_CREAT$/;"	m	class:ArmFreebsd32
TGT_O_CREAT	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_CREAT     = 0x00000200; \/\/!< O_CREAT$/;"	m	class:ArmFreebsd64
TGT_O_CREAT	./arch/arm/linux/linux.hh	/^    static const int TGT_O_CREAT     = 00000100; \/\/!< O_CREAT$/;"	m	class:ArmLinux32
TGT_O_CREAT	./arch/arm/linux/linux.hh	/^    static const int TGT_O_CREAT     = 00000100; \/\/!< O_CREAT$/;"	m	class:ArmLinux64
TGT_O_CREAT	./arch/mips/linux/linux.hh	/^    static const int TGT_O_CREAT        = 0x00000100;   \/\/!< O_CREAT$/;"	m	class:MipsLinux
TGT_O_CREAT	./arch/power/linux/linux.hh	/^    static const int TGT_O_CREAT     = 00000100; \/\/!< O_CREAT$/;"	m	class:PowerLinux
TGT_O_CREAT	./arch/sparc/linux/linux.hh	/^    static const int TGT_O_CREAT        = 0x00000200;   \/\/!< O_CREAT$/;"	m	class:SparcLinux
TGT_O_CREAT	./arch/sparc/solaris/solaris.hh	/^    static const int TGT_O_CREAT        = 0x00000100;   \/\/!< O_CREAT$/;"	m	class:SparcSolaris
TGT_O_CREAT	./arch/x86/linux/linux.hh	/^    static const int TGT_O_CREAT        = 00000100;     \/\/!< O_CREAT$/;"	m	class:X86Linux32
TGT_O_CREAT	./arch/x86/linux/linux.hh	/^    static const int TGT_O_CREAT        = 00000100;     \/\/!< O_CREAT$/;"	m	class:X86Linux64
TGT_O_DIRECT	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_DIRECT    = 0x00010000; \/\/!< O_DIRECT$/;"	m	class:ArmFreebsd32
TGT_O_DIRECT	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_DIRECT    = 0x00010000; \/\/!< O_DIRECT$/;"	m	class:ArmFreebsd64
TGT_O_DIRECT	./arch/arm/linux/linux.hh	/^    static const int TGT_O_DIRECT    = 00040000; \/\/!< O_DIRECT$/;"	m	class:ArmLinux32
TGT_O_DIRECT	./arch/arm/linux/linux.hh	/^    static const int TGT_O_DIRECT    = 00040000; \/\/!< O_DIRECT$/;"	m	class:ArmLinux64
TGT_O_DIRECT	./arch/power/linux/linux.hh	/^    static const int TGT_O_DIRECT    = 00400000; \/\/!< O_DIRECT$/;"	m	class:PowerLinux
TGT_O_DIRECT	./arch/x86/linux/linux.hh	/^    static const int TGT_O_DIRECT       = 00040000;     \/\/!< O_DIRECTIO$/;"	m	class:X86Linux32
TGT_O_DIRECT	./arch/x86/linux/linux.hh	/^    static const int TGT_O_DIRECT       = 00040000;     \/\/!< O_DIRECTIO$/;"	m	class:X86Linux64
TGT_O_DIRECTIO	./arch/alpha/linux/linux.hh	/^    static const int TGT_O_DIRECTIO     = 00200000;     \/\/!< O_DIRECTIO$/;"	m	class:AlphaLinux
TGT_O_DIRECTIO	./arch/alpha/tru64/tru64.hh	/^    static const int TGT_O_DIRECTIO     = 00200000;     \/\/!< O_DIRECTIO$/;"	m	class:AlphaTru64
TGT_O_DIRECTIO	./arch/mips/linux/linux.hh	/^    static const int TGT_O_DIRECTIO     = 0x00020000;   \/\/!< O_DIRECTIO$/;"	m	class:MipsLinux
TGT_O_DIRECTORY	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_DIRECTORY = 0x00020000; \/\/!< O_DIRECTORY$/;"	m	class:ArmFreebsd32
TGT_O_DIRECTORY	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_DIRECTORY = 0x00020000; \/\/!< O_DIRECTORY$/;"	m	class:ArmFreebsd64
TGT_O_DIRECTORY	./arch/arm/linux/linux.hh	/^    static const int TGT_O_DIRECTORY = 00200000; \/\/!< O_DIRECTORY$/;"	m	class:ArmLinux32
TGT_O_DIRECTORY	./arch/arm/linux/linux.hh	/^    static const int TGT_O_DIRECTORY = 00200000; \/\/!< O_DIRECTORY$/;"	m	class:ArmLinux64
TGT_O_DIRECTORY	./arch/power/linux/linux.hh	/^    static const int TGT_O_DIRECTORY = 00040000; \/\/!< O_DIRECTORY$/;"	m	class:PowerLinux
TGT_O_DIRECTORY	./arch/x86/linux/linux.hh	/^    static const int TGT_O_DIRECTORY    = 00200000;$/;"	m	class:X86Linux32
TGT_O_DIRECTORY	./arch/x86/linux/linux.hh	/^    static const int TGT_O_DIRECTORY    = 00200000;$/;"	m	class:X86Linux64
TGT_O_DRD	./arch/alpha/linux/linux.hh	/^    static const int TGT_O_DRD          = 00100000;     \/\/!< O_DRD$/;"	m	class:AlphaLinux
TGT_O_DRD	./arch/alpha/tru64/tru64.hh	/^    static const int TGT_O_DRD          = 00100000;     \/\/!< O_DRD$/;"	m	class:AlphaTru64
TGT_O_DRD	./arch/mips/linux/linux.hh	/^    static const int TGT_O_DRD          = 0x00010000;   \/\/!< O_DRD$/;"	m	class:MipsLinux
TGT_O_DSYNC	./arch/alpha/linux/linux.hh	/^    static const int TGT_O_DSYNC        = 02000000;     \/\/!< O_DSYNC$/;"	m	class:AlphaLinux
TGT_O_DSYNC	./arch/alpha/tru64/tru64.hh	/^    static const int TGT_O_DSYNC        = 02000000;     \/\/!< O_DSYNC$/;"	m	class:AlphaTru64
TGT_O_DSYNC	./arch/mips/linux/linux.hh	/^    static const int TGT_O_DSYNC        = 0x00008000;   \/\/!< O_DSYNC$/;"	m	class:MipsLinux
TGT_O_DSYNC	./arch/sparc/solaris/solaris.hh	/^    static const int TGT_O_DSYNC        = 0x00000040;   \/\/!< O_SYNC$/;"	m	class:SparcSolaris
TGT_O_EXCL	./arch/alpha/linux/linux.hh	/^    static const int TGT_O_EXCL         = 00004000;     \/\/!< O_EXCL$/;"	m	class:AlphaLinux
TGT_O_EXCL	./arch/alpha/tru64/tru64.hh	/^    static const int TGT_O_EXCL         = 00004000;     \/\/!< O_EXCL$/;"	m	class:AlphaTru64
TGT_O_EXCL	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_EXCL      = 0x00000800; \/\/!< O_EXCL$/;"	m	class:ArmFreebsd32
TGT_O_EXCL	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_EXCL      = 0x00000800; \/\/!< O_EXCL$/;"	m	class:ArmFreebsd64
TGT_O_EXCL	./arch/arm/linux/linux.hh	/^    static const int TGT_O_EXCL      = 00000200; \/\/!< O_EXCL$/;"	m	class:ArmLinux32
TGT_O_EXCL	./arch/arm/linux/linux.hh	/^    static const int TGT_O_EXCL      = 00000200; \/\/!< O_EXCL$/;"	m	class:ArmLinux64
TGT_O_EXCL	./arch/mips/linux/linux.hh	/^    static const int TGT_O_EXCL         = 0x00000400;   \/\/!< O_EXCL$/;"	m	class:MipsLinux
TGT_O_EXCL	./arch/power/linux/linux.hh	/^    static const int TGT_O_EXCL      = 00000200; \/\/!< O_EXCL$/;"	m	class:PowerLinux
TGT_O_EXCL	./arch/sparc/linux/linux.hh	/^    static const int TGT_O_EXCL         = 0x00000800;   \/\/!< O_EXCL$/;"	m	class:SparcLinux
TGT_O_EXCL	./arch/sparc/solaris/solaris.hh	/^    static const int TGT_O_EXCL         = 0x00000400;   \/\/!< O_EXCL$/;"	m	class:SparcSolaris
TGT_O_EXCL	./arch/x86/linux/linux.hh	/^    static const int TGT_O_EXCL         = 00000200;     \/\/!< O_EXCL$/;"	m	class:X86Linux32
TGT_O_EXCL	./arch/x86/linux/linux.hh	/^    static const int TGT_O_EXCL         = 00000200;     \/\/!< O_EXCL$/;"	m	class:X86Linux64
TGT_O_LARGEFILE	./arch/arm/linux/linux.hh	/^    static const int TGT_O_LARGEFILE = 00100000; \/\/!< O_LARGEFILE$/;"	m	class:ArmLinux32
TGT_O_LARGEFILE	./arch/arm/linux/linux.hh	/^    static const int TGT_O_LARGEFILE = 00100000; \/\/!< O_LARGEFILE$/;"	m	class:ArmLinux64
TGT_O_LARGEFILE	./arch/power/linux/linux.hh	/^    static const int TGT_O_LARGEFILE = 00200000; \/\/!< O_LARGEFILE$/;"	m	class:PowerLinux
TGT_O_LARGEFILE	./arch/sparc/solaris/solaris.hh	/^    static const int TGT_O_LARGEFILE    = 0x00002000;   \/\/??$/;"	m	class:SparcSolaris
TGT_O_LARGEFILE	./arch/x86/linux/linux.hh	/^    static const int TGT_O_LARGEFILE    = 00100000;$/;"	m	class:X86Linux32
TGT_O_LARGEFILE	./arch/x86/linux/linux.hh	/^    static const int TGT_O_LARGEFILE    = 00100000;$/;"	m	class:X86Linux64
TGT_O_NDELAY	./arch/sparc/solaris/solaris.hh	/^    static const int TGT_O_NDELAY       = 0x00000004;   \/\/!< O_NONBLOCK$/;"	m	class:SparcSolaris
TGT_O_NOATIME	./arch/arm/linux/linux.hh	/^    static const int TGT_O_NOATIME   = 01000000; \/\/!< O_NOATIME$/;"	m	class:ArmLinux32
TGT_O_NOATIME	./arch/arm/linux/linux.hh	/^    static const int TGT_O_NOATIME   = 01000000; \/\/!< O_NOATIME$/;"	m	class:ArmLinux64
TGT_O_NOATIME	./arch/power/linux/linux.hh	/^    static const int TGT_O_NOATIME   = 01000000; \/\/!< O_NOATIME$/;"	m	class:PowerLinux
TGT_O_NOATIME	./arch/x86/linux/linux.hh	/^    static const int TGT_O_NOATIME      = 01000000;$/;"	m	class:X86Linux32
TGT_O_NOATIME	./arch/x86/linux/linux.hh	/^    static const int TGT_O_NOATIME      = 01000000;$/;"	m	class:X86Linux64
TGT_O_NOCTTY	./arch/alpha/linux/linux.hh	/^    static const int TGT_O_NOCTTY       = 00010000;     \/\/!< O_NOCTTY$/;"	m	class:AlphaLinux
TGT_O_NOCTTY	./arch/alpha/tru64/tru64.hh	/^    static const int TGT_O_NOCTTY       = 00010000;     \/\/!< O_NOCTTY$/;"	m	class:AlphaTru64
TGT_O_NOCTTY	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_NOCTTY    = 0x00008000; \/\/!< O_NOCTTY$/;"	m	class:ArmFreebsd32
TGT_O_NOCTTY	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_NOCTTY    = 0x00008000; \/\/!< O_NOCTTY$/;"	m	class:ArmFreebsd64
TGT_O_NOCTTY	./arch/arm/linux/linux.hh	/^    static const int TGT_O_NOCTTY    = 00000400; \/\/!< O_NOCTTY$/;"	m	class:ArmLinux32
TGT_O_NOCTTY	./arch/arm/linux/linux.hh	/^    static const int TGT_O_NOCTTY    = 00000400; \/\/!< O_NOCTTY$/;"	m	class:ArmLinux64
TGT_O_NOCTTY	./arch/mips/linux/linux.hh	/^    static const int TGT_O_NOCTTY       = 0x00000800;   \/\/!< O_NOCTTY$/;"	m	class:MipsLinux
TGT_O_NOCTTY	./arch/power/linux/linux.hh	/^    static const int TGT_O_NOCTTY    = 00000400; \/\/!< O_NOCTTY$/;"	m	class:PowerLinux
TGT_O_NOCTTY	./arch/sparc/linux/linux.hh	/^    static const int TGT_O_NOCTTY       = 0x00008000;   \/\/!< O_NOCTTY$/;"	m	class:SparcLinux
TGT_O_NOCTTY	./arch/sparc/solaris/solaris.hh	/^    static const int TGT_O_NOCTTY       = 0x00000800;   \/\/!< O_NOCTTY$/;"	m	class:SparcSolaris
TGT_O_NOCTTY	./arch/x86/linux/linux.hh	/^    static const int TGT_O_NOCTTY       = 00000400;     \/\/!< O_NOCTTY$/;"	m	class:X86Linux32
TGT_O_NOCTTY	./arch/x86/linux/linux.hh	/^    static const int TGT_O_NOCTTY       = 00000400;     \/\/!< O_NOCTTY$/;"	m	class:X86Linux64
TGT_O_NOFOLLOW	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_NOFOLLOW  = 0x00000100; \/\/!< O_NOFOLLOW$/;"	m	class:ArmFreebsd32
TGT_O_NOFOLLOW	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_NOFOLLOW  = 0x00000100; \/\/!< O_NOFOLLOW$/;"	m	class:ArmFreebsd64
TGT_O_NOFOLLOW	./arch/arm/linux/linux.hh	/^    static const int TGT_O_NOFOLLOW  = 00400000; \/\/!< O_NOFOLLOW$/;"	m	class:ArmLinux32
TGT_O_NOFOLLOW	./arch/arm/linux/linux.hh	/^    static const int TGT_O_NOFOLLOW  = 00400000; \/\/!< O_NOFOLLOW$/;"	m	class:ArmLinux64
TGT_O_NOFOLLOW	./arch/power/linux/linux.hh	/^    static const int TGT_O_NOFOLLOW  = 00100000; \/\/!< O_NOFOLLOW$/;"	m	class:PowerLinux
TGT_O_NOFOLLOW	./arch/x86/linux/linux.hh	/^    static const int TGT_O_NOFOLLOW     = 00400000;$/;"	m	class:X86Linux32
TGT_O_NOFOLLOW	./arch/x86/linux/linux.hh	/^    static const int TGT_O_NOFOLLOW     = 00400000;$/;"	m	class:X86Linux64
TGT_O_NONBLOCK	./arch/alpha/linux/linux.hh	/^    static const int TGT_O_NONBLOCK     = 00000004;     \/\/!< O_NONBLOCK$/;"	m	class:AlphaLinux
TGT_O_NONBLOCK	./arch/alpha/tru64/tru64.hh	/^    static const int TGT_O_NONBLOCK     = 00000004;     \/\/!< O_NONBLOCK$/;"	m	class:AlphaTru64
TGT_O_NONBLOCK	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_NONBLOCK  = 0x00000004; \/\/!< O_NONBLOCK$/;"	m	class:ArmFreebsd32
TGT_O_NONBLOCK	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_NONBLOCK  = 0x00000004; \/\/!< O_NONBLOCK$/;"	m	class:ArmFreebsd64
TGT_O_NONBLOCK	./arch/arm/linux/linux.hh	/^    static const int TGT_O_NONBLOCK  = 00004000; \/\/!< O_NONBLOCK$/;"	m	class:ArmLinux32
TGT_O_NONBLOCK	./arch/arm/linux/linux.hh	/^    static const int TGT_O_NONBLOCK  = 00004000; \/\/!< O_NONBLOCK$/;"	m	class:ArmLinux64
TGT_O_NONBLOCK	./arch/mips/linux/linux.hh	/^    static const int TGT_O_NONBLOCK     = 0x00000080;   \/\/!< O_NONBLOCK$/;"	m	class:MipsLinux
TGT_O_NONBLOCK	./arch/power/linux/linux.hh	/^    static const int TGT_O_NONBLOCK  = 00004000; \/\/!< O_NONBLOCK$/;"	m	class:PowerLinux
TGT_O_NONBLOCK	./arch/sparc/linux/linux.hh	/^    static const int TGT_O_NONBLOCK     = 0x00004000;   \/\/!< O_NONBLOCK$/;"	m	class:SparcLinux
TGT_O_NONBLOCK	./arch/sparc/solaris/solaris.hh	/^    static const int TGT_O_NONBLOCK     = 0x00000080;   \/\/!< O_NONBLOCK$/;"	m	class:SparcSolaris
TGT_O_NONBLOCK	./arch/x86/linux/linux.hh	/^    static const int TGT_O_NONBLOCK     = 00004000;     \/\/!< O_NONBLOCK$/;"	m	class:X86Linux32
TGT_O_NONBLOCK	./arch/x86/linux/linux.hh	/^    static const int TGT_O_NONBLOCK     = 00004000;     \/\/!< O_NONBLOCK$/;"	m	class:X86Linux64
TGT_O_PRIV	./arch/sparc/solaris/solaris.hh	/^    static const int TGT_O_PRIV         = 0x00001000;   \/\/??$/;"	m	class:SparcSolaris
TGT_O_RDONLY	./arch/alpha/linux/linux.hh	/^    static const int TGT_O_RDONLY       = 00000000;     \/\/!< O_RDONLY$/;"	m	class:AlphaLinux
TGT_O_RDONLY	./arch/alpha/tru64/tru64.hh	/^    static const int TGT_O_RDONLY       = 00000000;     \/\/!< O_RDONLY$/;"	m	class:AlphaTru64
TGT_O_RDONLY	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_RDONLY    = 0x00000000; \/\/!< O_RDONLY$/;"	m	class:ArmFreebsd32
TGT_O_RDONLY	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_RDONLY    = 0x00000000; \/\/!< O_RDONLY$/;"	m	class:ArmFreebsd64
TGT_O_RDONLY	./arch/arm/linux/linux.hh	/^    static const int TGT_O_RDONLY    = 00000000; \/\/!< O_RDONLY$/;"	m	class:ArmLinux32
TGT_O_RDONLY	./arch/arm/linux/linux.hh	/^    static const int TGT_O_RDONLY    = 00000000; \/\/!< O_RDONLY$/;"	m	class:ArmLinux64
TGT_O_RDONLY	./arch/mips/linux/linux.hh	/^    static const int TGT_O_RDONLY       = 0x00000000;   \/\/!< O_RDONLY$/;"	m	class:MipsLinux
TGT_O_RDONLY	./arch/power/linux/linux.hh	/^    static const int TGT_O_RDONLY    = 00000000; \/\/!< O_RDONLY$/;"	m	class:PowerLinux
TGT_O_RDONLY	./arch/sparc/linux/linux.hh	/^    static const int TGT_O_RDONLY       = 0x00000000;   \/\/!< O_RDONLY$/;"	m	class:SparcLinux
TGT_O_RDONLY	./arch/sparc/solaris/solaris.hh	/^    static const int TGT_O_RDONLY       = 0x00000000;   \/\/!< O_RDONLY$/;"	m	class:SparcSolaris
TGT_O_RDONLY	./arch/x86/linux/linux.hh	/^    static const int TGT_O_RDONLY       = 00000000;     \/\/!< O_RDONLY$/;"	m	class:X86Linux32
TGT_O_RDONLY	./arch/x86/linux/linux.hh	/^    static const int TGT_O_RDONLY       = 00000000;     \/\/!< O_RDONLY$/;"	m	class:X86Linux64
TGT_O_RDWR	./arch/alpha/linux/linux.hh	/^    static const int TGT_O_RDWR         = 00000002;     \/\/!< O_RDWR$/;"	m	class:AlphaLinux
TGT_O_RDWR	./arch/alpha/tru64/tru64.hh	/^    static const int TGT_O_RDWR         = 00000002;     \/\/!< O_RDWR$/;"	m	class:AlphaTru64
TGT_O_RDWR	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_RDWR      = 0x00000002; \/\/!< O_RDWR$/;"	m	class:ArmFreebsd32
TGT_O_RDWR	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_RDWR      = 0x00000002; \/\/!< O_RDWR$/;"	m	class:ArmFreebsd64
TGT_O_RDWR	./arch/arm/linux/linux.hh	/^    static const int TGT_O_RDWR      = 00000002; \/\/!< O_RDWR$/;"	m	class:ArmLinux32
TGT_O_RDWR	./arch/arm/linux/linux.hh	/^    static const int TGT_O_RDWR      = 00000002; \/\/!< O_RDWR$/;"	m	class:ArmLinux64
TGT_O_RDWR	./arch/mips/linux/linux.hh	/^    static const int TGT_O_RDWR         = 0x00000002;   \/\/!< O_RDWR$/;"	m	class:MipsLinux
TGT_O_RDWR	./arch/power/linux/linux.hh	/^    static const int TGT_O_RDWR      = 00000002; \/\/!< O_RDWR$/;"	m	class:PowerLinux
TGT_O_RDWR	./arch/sparc/linux/linux.hh	/^    static const int TGT_O_RDWR         = 0x00000002;   \/\/!< O_RDWR$/;"	m	class:SparcLinux
TGT_O_RDWR	./arch/sparc/solaris/solaris.hh	/^    static const int TGT_O_RDWR         = 0x00000002;   \/\/!< O_RDWR$/;"	m	class:SparcSolaris
TGT_O_RDWR	./arch/x86/linux/linux.hh	/^    static const int TGT_O_RDWR         = 00000002;     \/\/!< O_RDWR$/;"	m	class:X86Linux32
TGT_O_RDWR	./arch/x86/linux/linux.hh	/^    static const int TGT_O_RDWR         = 00000002;     \/\/!< O_RDWR$/;"	m	class:X86Linux64
TGT_O_RSYNC	./arch/alpha/linux/linux.hh	/^    static const int TGT_O_RSYNC        = 04000000;     \/\/!< O_RSYNC$/;"	m	class:AlphaLinux
TGT_O_RSYNC	./arch/alpha/tru64/tru64.hh	/^    static const int TGT_O_RSYNC        = 04000000;     \/\/!< O_RSYNC$/;"	m	class:AlphaTru64
TGT_O_RSYNC	./arch/mips/linux/linux.hh	/^    static const int TGT_O_RSYNC        = 0x00040000;   \/\/!< O_RSYNC$/;"	m	class:MipsLinux
TGT_O_RSYNC	./arch/sparc/solaris/solaris.hh	/^    static const int TGT_O_RSYNC        = 0x00008000;   \/\/!< O_SYNC$/;"	m	class:SparcSolaris
TGT_O_SYNC	./arch/alpha/linux/linux.hh	/^    static const int TGT_O_SYNC         = 00040000;     \/\/!< O_SYNC$/;"	m	class:AlphaLinux
TGT_O_SYNC	./arch/alpha/tru64/tru64.hh	/^    static const int TGT_O_SYNC         = 00040000;     \/\/!< O_SYNC$/;"	m	class:AlphaTru64
TGT_O_SYNC	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_SYNC      = 0x00000080; \/\/!< O_SYNC$/;"	m	class:ArmFreebsd32
TGT_O_SYNC	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_SYNC      = 0x00000080; \/\/!< O_SYNC$/;"	m	class:ArmFreebsd64
TGT_O_SYNC	./arch/arm/linux/linux.hh	/^    static const int TGT_O_SYNC      = 00010000; \/\/!< O_SYNC$/;"	m	class:ArmLinux32
TGT_O_SYNC	./arch/arm/linux/linux.hh	/^    static const int TGT_O_SYNC      = 00010000; \/\/!< O_SYNC$/;"	m	class:ArmLinux64
TGT_O_SYNC	./arch/mips/linux/linux.hh	/^    static const int TGT_O_SYNC         = 0x00000010;   \/\/!< O_SYNC$/;"	m	class:MipsLinux
TGT_O_SYNC	./arch/power/linux/linux.hh	/^    static const int TGT_O_SYNC      = 00010000; \/\/!< O_SYNC$/;"	m	class:PowerLinux
TGT_O_SYNC	./arch/sparc/linux/linux.hh	/^    static const int TGT_O_SYNC         = 0x00002000;   \/\/!< O_SYNC$/;"	m	class:SparcLinux
TGT_O_SYNC	./arch/sparc/solaris/solaris.hh	/^    static const int TGT_O_SYNC         = 0x00000010;   \/\/!< O_SYNC$/;"	m	class:SparcSolaris
TGT_O_SYNC	./arch/x86/linux/linux.hh	/^    static const int TGT_O_SYNC         = 00010000;     \/\/!< O_SYNC$/;"	m	class:X86Linux32
TGT_O_SYNC	./arch/x86/linux/linux.hh	/^    static const int TGT_O_SYNC         = 00010000;     \/\/!< O_SYNC$/;"	m	class:X86Linux64
TGT_O_TRUNC	./arch/alpha/linux/linux.hh	/^    static const int TGT_O_TRUNC        = 00002000;     \/\/!< O_TRUNC$/;"	m	class:AlphaLinux
TGT_O_TRUNC	./arch/alpha/tru64/tru64.hh	/^    static const int TGT_O_TRUNC        = 00002000;     \/\/!< O_TRUNC$/;"	m	class:AlphaTru64
TGT_O_TRUNC	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_TRUNC     = 0x00000400; \/\/!< O_TRUNC$/;"	m	class:ArmFreebsd32
TGT_O_TRUNC	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_TRUNC     = 0x00000400; \/\/!< O_TRUNC$/;"	m	class:ArmFreebsd64
TGT_O_TRUNC	./arch/arm/linux/linux.hh	/^    static const int TGT_O_TRUNC     = 00001000; \/\/!< O_TRUNC$/;"	m	class:ArmLinux32
TGT_O_TRUNC	./arch/arm/linux/linux.hh	/^    static const int TGT_O_TRUNC     = 00001000; \/\/!< O_TRUNC$/;"	m	class:ArmLinux64
TGT_O_TRUNC	./arch/mips/linux/linux.hh	/^    static const int TGT_O_TRUNC        = 0x00000200;   \/\/!< O_TRUNC$/;"	m	class:MipsLinux
TGT_O_TRUNC	./arch/power/linux/linux.hh	/^    static const int TGT_O_TRUNC     = 00001000; \/\/!< O_TRUNC$/;"	m	class:PowerLinux
TGT_O_TRUNC	./arch/sparc/linux/linux.hh	/^    static const int TGT_O_TRUNC        = 0x00000400;   \/\/!< O_TRUNC$/;"	m	class:SparcLinux
TGT_O_TRUNC	./arch/sparc/solaris/solaris.hh	/^    static const int TGT_O_TRUNC        = 0x00000200;   \/\/!< O_TRUNC$/;"	m	class:SparcSolaris
TGT_O_TRUNC	./arch/x86/linux/linux.hh	/^    static const int TGT_O_TRUNC        = 00001000;     \/\/!< O_TRUNC$/;"	m	class:X86Linux32
TGT_O_TRUNC	./arch/x86/linux/linux.hh	/^    static const int TGT_O_TRUNC        = 00001000;     \/\/!< O_TRUNC$/;"	m	class:X86Linux64
TGT_O_WRONLY	./arch/alpha/linux/linux.hh	/^    static const int TGT_O_WRONLY       = 00000001;     \/\/!< O_WRONLY$/;"	m	class:AlphaLinux
TGT_O_WRONLY	./arch/alpha/tru64/tru64.hh	/^    static const int TGT_O_WRONLY       = 00000001;     \/\/!< O_WRONLY$/;"	m	class:AlphaTru64
TGT_O_WRONLY	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_WRONLY    = 0x00000001; \/\/!< O_WRONLY$/;"	m	class:ArmFreebsd32
TGT_O_WRONLY	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_O_WRONLY    = 0x00000001; \/\/!< O_WRONLY$/;"	m	class:ArmFreebsd64
TGT_O_WRONLY	./arch/arm/linux/linux.hh	/^    static const int TGT_O_WRONLY    = 00000001; \/\/!< O_WRONLY$/;"	m	class:ArmLinux32
TGT_O_WRONLY	./arch/arm/linux/linux.hh	/^    static const int TGT_O_WRONLY    = 00000001; \/\/!< O_WRONLY$/;"	m	class:ArmLinux64
TGT_O_WRONLY	./arch/mips/linux/linux.hh	/^    static const int TGT_O_WRONLY       = 0x00000001;   \/\/!< O_WRONLY$/;"	m	class:MipsLinux
TGT_O_WRONLY	./arch/power/linux/linux.hh	/^    static const int TGT_O_WRONLY    = 00000001; \/\/!< O_WRONLY$/;"	m	class:PowerLinux
TGT_O_WRONLY	./arch/sparc/linux/linux.hh	/^    static const int TGT_O_WRONLY       = 0x00000001;   \/\/!< O_WRONLY$/;"	m	class:SparcLinux
TGT_O_WRONLY	./arch/sparc/solaris/solaris.hh	/^    static const int TGT_O_WRONLY       = 0x00000001;   \/\/!< O_WRONLY$/;"	m	class:SparcSolaris
TGT_O_WRONLY	./arch/x86/linux/linux.hh	/^    static const int TGT_O_WRONLY       = 00000001;     \/\/!< O_WRONLY$/;"	m	class:X86Linux32
TGT_O_WRONLY	./arch/x86/linux/linux.hh	/^    static const int TGT_O_WRONLY       = 00000001;     \/\/!< O_WRONLY$/;"	m	class:X86Linux64
TGT_O_XATTR	./arch/sparc/solaris/solaris.hh	/^    static const int TGT_O_XATTR        = 0x00004000;   \/\/??$/;"	m	class:SparcSolaris
TGT_RLIMIT_AS	./arch/alpha/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_AS = 7;$/;"	m	class:AlphaLinux
TGT_RLIMIT_AS	./arch/alpha/tru64/tru64.hh	/^        TGT_RLIMIT_AS = 7,$/;"	e	enum:AlphaTru64::rlimit_resources
TGT_RLIMIT_AS	./arch/arm/freebsd/freebsd.hh	/^        TGT_RLIMIT_AS = TGT_RLIMIT_VMEM,$/;"	e	enum:ArmFreebsd64::rlimit_resources
TGT_RLIMIT_AS	./arch/arm/linux/linux.hh	/^        TGT_RLIMIT_AS = 9,$/;"	e	enum:ArmLinux64::rlimit_resources
TGT_RLIMIT_AS	./arch/mips/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_AS = 6;$/;"	m	class:MipsLinux
TGT_RLIMIT_AS	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_RLIMIT_AS = TGT_RLIMIT_VMEM;$/;"	m	class:FreeBSD
TGT_RLIMIT_AS	./kern/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_AS = 9;$/;"	m	class:Linux
TGT_RLIMIT_CORE	./arch/alpha/tru64/tru64.hh	/^        TGT_RLIMIT_CORE = 4,$/;"	e	enum:AlphaTru64::rlimit_resources
TGT_RLIMIT_CORE	./arch/arm/freebsd/freebsd.hh	/^        TGT_RLIMIT_CORE = 4,$/;"	e	enum:ArmFreebsd64::rlimit_resources
TGT_RLIMIT_CORE	./arch/arm/linux/linux.hh	/^        TGT_RLIMIT_CORE = 4,$/;"	e	enum:ArmLinux64::rlimit_resources
TGT_RLIMIT_CORE	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_RLIMIT_CORE = 4;$/;"	m	class:FreeBSD
TGT_RLIMIT_CORE	./kern/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_CORE = 4;$/;"	m	class:Linux
TGT_RLIMIT_CPU	./arch/alpha/tru64/tru64.hh	/^        TGT_RLIMIT_CPU = 0,$/;"	e	enum:AlphaTru64::rlimit_resources
TGT_RLIMIT_CPU	./arch/arm/freebsd/freebsd.hh	/^        TGT_RLIMIT_CPU = 0,$/;"	e	enum:ArmFreebsd64::rlimit_resources
TGT_RLIMIT_CPU	./arch/arm/linux/linux.hh	/^        TGT_RLIMIT_CPU = 0,$/;"	e	enum:ArmLinux64::rlimit_resources
TGT_RLIMIT_CPU	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_RLIMIT_CPU = 0;$/;"	m	class:FreeBSD
TGT_RLIMIT_CPU	./kern/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_CPU = 0;$/;"	m	class:Linux
TGT_RLIMIT_DATA	./arch/alpha/tru64/tru64.hh	/^        TGT_RLIMIT_DATA = 2,$/;"	e	enum:AlphaTru64::rlimit_resources
TGT_RLIMIT_DATA	./arch/arm/freebsd/freebsd.hh	/^        TGT_RLIMIT_DATA = 2,$/;"	e	enum:ArmFreebsd64::rlimit_resources
TGT_RLIMIT_DATA	./arch/arm/linux/linux.hh	/^        TGT_RLIMIT_DATA = 2,$/;"	e	enum:ArmLinux64::rlimit_resources
TGT_RLIMIT_DATA	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_RLIMIT_DATA = 2;$/;"	m	class:FreeBSD
TGT_RLIMIT_DATA	./kern/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_DATA = 2;$/;"	m	class:Linux
TGT_RLIMIT_FSIZE	./arch/alpha/tru64/tru64.hh	/^        TGT_RLIMIT_FSIZE = 1,$/;"	e	enum:AlphaTru64::rlimit_resources
TGT_RLIMIT_FSIZE	./arch/arm/freebsd/freebsd.hh	/^        TGT_RLIMIT_FSIZE = 1,$/;"	e	enum:ArmFreebsd64::rlimit_resources
TGT_RLIMIT_FSIZE	./arch/arm/linux/linux.hh	/^        TGT_RLIMIT_FSIZE = 1,$/;"	e	enum:ArmLinux64::rlimit_resources
TGT_RLIMIT_FSIZE	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_RLIMIT_FSIZE = 1;$/;"	m	class:FreeBSD
TGT_RLIMIT_FSIZE	./kern/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_FSIZE = 1;$/;"	m	class:Linux
TGT_RLIMIT_KQUEUES	./arch/arm/freebsd/freebsd.hh	/^        TGT_RLIMIT_KQUEUES = 13$/;"	e	enum:ArmFreebsd64::rlimit_resources
TGT_RLIMIT_KQUEUES	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_RLIMIT_KQUEUES = 13;$/;"	m	class:FreeBSD
TGT_RLIMIT_LOCKS	./arch/alpha/tru64/tru64.hh	/^        TGT_RLIMIT_LOCKS = 10$/;"	e	enum:AlphaTru64::rlimit_resources
TGT_RLIMIT_LOCKS	./arch/arm/linux/linux.hh	/^        TGT_RLIMIT_LOCKS = 10$/;"	e	enum:ArmLinux64::rlimit_resources
TGT_RLIMIT_LOCKS	./kern/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_LOCKS = 10;$/;"	m	class:Linux
TGT_RLIMIT_MEMLOCK	./arch/alpha/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_MEMLOCK = 9;$/;"	m	class:AlphaLinux
TGT_RLIMIT_MEMLOCK	./arch/alpha/tru64/tru64.hh	/^        TGT_RLIMIT_MEMLOCK = 9,$/;"	e	enum:AlphaTru64::rlimit_resources
TGT_RLIMIT_MEMLOCK	./arch/arm/freebsd/freebsd.hh	/^        TGT_RLIMIT_MEMLOCK = 6,$/;"	e	enum:ArmFreebsd64::rlimit_resources
TGT_RLIMIT_MEMLOCK	./arch/arm/linux/linux.hh	/^        TGT_RLIMIT_MEMLOCK = 8,$/;"	e	enum:ArmLinux64::rlimit_resources
TGT_RLIMIT_MEMLOCK	./arch/mips/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_MEMLOCK = 9;$/;"	m	class:MipsLinux
TGT_RLIMIT_MEMLOCK	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_RLIMIT_MEMLOCK = 6;$/;"	m	class:FreeBSD
TGT_RLIMIT_MEMLOCK	./kern/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_MEMLOCK = 8;$/;"	m	class:Linux
TGT_RLIMIT_MSGQUEUE	./kern/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_MSGQUEUE = 12;$/;"	m	class:Linux
TGT_RLIMIT_NICE	./kern/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_NICE = 13;$/;"	m	class:Linux
TGT_RLIMIT_NOFILE	./arch/alpha/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_NOFILE = 6;$/;"	m	class:AlphaLinux
TGT_RLIMIT_NOFILE	./arch/alpha/tru64/tru64.hh	/^        TGT_RLIMIT_NOFILE = 6,$/;"	e	enum:AlphaTru64::rlimit_resources
TGT_RLIMIT_NOFILE	./arch/arm/freebsd/freebsd.hh	/^        TGT_RLIMIT_NOFILE = 8,$/;"	e	enum:ArmFreebsd64::rlimit_resources
TGT_RLIMIT_NOFILE	./arch/arm/linux/linux.hh	/^        TGT_RLIMIT_NOFILE = 7,$/;"	e	enum:ArmLinux64::rlimit_resources
TGT_RLIMIT_NOFILE	./arch/mips/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_NOFILE = 5;$/;"	m	class:MipsLinux
TGT_RLIMIT_NOFILE	./arch/sparc/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_NOFILE = 6;$/;"	m	class:Sparc32Linux
TGT_RLIMIT_NOFILE	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_RLIMIT_NOFILE = 8;$/;"	m	class:FreeBSD
TGT_RLIMIT_NOFILE	./kern/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_NOFILE = 7;$/;"	m	class:Linux
TGT_RLIMIT_NPROC	./arch/alpha/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_NPROC = 8;$/;"	m	class:AlphaLinux
TGT_RLIMIT_NPROC	./arch/alpha/tru64/tru64.hh	/^        TGT_RLIMIT_NPROC = 8,$/;"	e	enum:AlphaTru64::rlimit_resources
TGT_RLIMIT_NPROC	./arch/arm/freebsd/freebsd.hh	/^        TGT_RLIMIT_NPROC = 7,$/;"	e	enum:ArmFreebsd64::rlimit_resources
TGT_RLIMIT_NPROC	./arch/arm/linux/linux.hh	/^        TGT_RLIMIT_NPROC = 6,$/;"	e	enum:ArmLinux64::rlimit_resources
TGT_RLIMIT_NPROC	./arch/mips/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_NPROC = 8;$/;"	m	class:MipsLinux
TGT_RLIMIT_NPROC	./arch/sparc/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_NPROC = 7;$/;"	m	class:Sparc32Linux
TGT_RLIMIT_NPROC	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_RLIMIT_NPROC = 7;$/;"	m	class:FreeBSD
TGT_RLIMIT_NPROC	./kern/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_NPROC = 6;$/;"	m	class:Linux
TGT_RLIMIT_NPTS	./arch/arm/freebsd/freebsd.hh	/^        TGT_RLIMIT_NPTS = 11,$/;"	e	enum:ArmFreebsd64::rlimit_resources
TGT_RLIMIT_NPTS	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_RLIMIT_NPTS = 11;$/;"	m	class:FreeBSD
TGT_RLIMIT_RSS	./arch/alpha/tru64/tru64.hh	/^        TGT_RLIMIT_RSS = 5,$/;"	e	enum:AlphaTru64::rlimit_resources
TGT_RLIMIT_RSS	./arch/arm/freebsd/freebsd.hh	/^        TGT_RLIMIT_RSS = 5,$/;"	e	enum:ArmFreebsd64::rlimit_resources
TGT_RLIMIT_RSS	./arch/arm/linux/linux.hh	/^        TGT_RLIMIT_RSS = 5,$/;"	e	enum:ArmLinux64::rlimit_resources
TGT_RLIMIT_RSS	./arch/mips/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_RSS = 7;$/;"	m	class:MipsLinux
TGT_RLIMIT_RSS	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_RLIMIT_RSS = 5;$/;"	m	class:FreeBSD
TGT_RLIMIT_RSS	./kern/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_RSS = 5;$/;"	m	class:Linux
TGT_RLIMIT_RTPRIO	./kern/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_RTPRIO = 14;$/;"	m	class:Linux
TGT_RLIMIT_RTTIME	./kern/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_RTTIME = 15;$/;"	m	class:Linux
TGT_RLIMIT_SBSIZE	./arch/arm/freebsd/freebsd.hh	/^        TGT_RLIMIT_SBSIZE = 9,$/;"	e	enum:ArmFreebsd64::rlimit_resources
TGT_RLIMIT_SBSIZE	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_RLIMIT_SBSIZE = 9;$/;"	m	class:FreeBSD
TGT_RLIMIT_SIGPENDING	./kern/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_SIGPENDING = 11;$/;"	m	class:Linux
TGT_RLIMIT_STACK	./arch/alpha/tru64/tru64.hh	/^        TGT_RLIMIT_STACK = 3,$/;"	e	enum:AlphaTru64::rlimit_resources
TGT_RLIMIT_STACK	./arch/arm/freebsd/freebsd.hh	/^        TGT_RLIMIT_STACK = 3,$/;"	e	enum:ArmFreebsd64::rlimit_resources
TGT_RLIMIT_STACK	./arch/arm/linux/linux.hh	/^        TGT_RLIMIT_STACK = 3,$/;"	e	enum:ArmLinux64::rlimit_resources
TGT_RLIMIT_STACK	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_RLIMIT_STACK = 3;$/;"	m	class:FreeBSD
TGT_RLIMIT_STACK	./kern/linux/linux.hh	/^    static const unsigned TGT_RLIMIT_STACK = 3;$/;"	m	class:Linux
TGT_RLIMIT_SWAP	./arch/arm/freebsd/freebsd.hh	/^        TGT_RLIMIT_SWAP = 12,$/;"	e	enum:ArmFreebsd64::rlimit_resources
TGT_RLIMIT_SWAP	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_RLIMIT_SWAP = 12;$/;"	m	class:FreeBSD
TGT_RLIMIT_VMEM	./arch/alpha/tru64/tru64.hh	/^        TGT_RLIMIT_VMEM = 7,$/;"	e	enum:AlphaTru64::rlimit_resources
TGT_RLIMIT_VMEM	./arch/arm/freebsd/freebsd.hh	/^        TGT_RLIMIT_VMEM = 10,$/;"	e	enum:ArmFreebsd64::rlimit_resources
TGT_RLIMIT_VMEM	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_RLIMIT_VMEM = 10;$/;"	m	class:FreeBSD
TGT_RLIM_NLIMITS	./kern/linux/linux.hh	/^    static const unsigned TGT_RLIM_NLIMITS = 16;$/;"	m	class:Linux
TGT_RUSAGE_BOTH	./arch/arm/linux/linux.hh	/^    static const int TGT_RUSAGE_BOTH = -2;$/;"	m	class:ArmLinux64
TGT_RUSAGE_BOTH	./kern/linux/linux.hh	/^    static const int TGT_RUSAGE_BOTH     = -2;$/;"	m	class:Linux
TGT_RUSAGE_CHILDREN	./arch/alpha/tru64/tru64.hh	/^    static const int TGT_RUSAGE_CHILDREN = -1;$/;"	m	class:AlphaTru64
TGT_RUSAGE_CHILDREN	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_RUSAGE_CHILDREN = -1;$/;"	m	class:ArmFreebsd64
TGT_RUSAGE_CHILDREN	./arch/arm/linux/linux.hh	/^    static const int TGT_RUSAGE_CHILDREN = -1;$/;"	m	class:ArmLinux64
TGT_RUSAGE_CHILDREN	./kern/freebsd/freebsd.hh	/^    static const int TGT_RUSAGE_CHILDREN = -1;$/;"	m	class:FreeBSD
TGT_RUSAGE_CHILDREN	./kern/linux/linux.hh	/^    static const int TGT_RUSAGE_CHILDREN = -1;$/;"	m	class:Linux
TGT_RUSAGE_SELF	./arch/alpha/tru64/tru64.hh	/^    static const int TGT_RUSAGE_SELF = 0;$/;"	m	class:AlphaTru64
TGT_RUSAGE_SELF	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_RUSAGE_SELF = 0;$/;"	m	class:ArmFreebsd64
TGT_RUSAGE_SELF	./arch/arm/linux/linux.hh	/^    static const int TGT_RUSAGE_SELF = 0;$/;"	m	class:ArmLinux64
TGT_RUSAGE_SELF	./kern/freebsd/freebsd.hh	/^    static const int TGT_RUSAGE_SELF     = 0;$/;"	m	class:FreeBSD
TGT_RUSAGE_SELF	./kern/linux/linux.hh	/^    static const int TGT_RUSAGE_SELF     = 0;$/;"	m	class:Linux
TGT_RUSAGE_THREAD	./arch/alpha/tru64/tru64.hh	/^    static const int TGT_RUSAGE_THREAD = 1;$/;"	m	class:AlphaTru64
TGT_RUSAGE_THREAD	./arch/arm/freebsd/freebsd.hh	/^    static const int TGT_RUSAGE_THREAD = 1;$/;"	m	class:ArmFreebsd64
TGT_RUSAGE_THREAD	./kern/freebsd/freebsd.hh	/^    static const int TGT_RUSAGE_THREAD   = 1;$/;"	m	class:FreeBSD
TGT_TCGETA	./arch/alpha/linux/linux.hh	/^    static const unsigned TGT_TCGETA     = 0x40127417;$/;"	m	class:AlphaLinux
TGT_TCGETA	./arch/alpha/tru64/tru64.hh	/^    static const unsigned TGT_TCGETA     = 0x40127417;$/;"	m	class:AlphaTru64
TGT_TCGETA	./arch/mips/linux/linux.hh	/^    static const unsigned TGT_TCGETA     = 0x5401;$/;"	m	class:MipsLinux
TGT_TCGETA	./arch/power/linux/linux.hh	/^    static const unsigned TGT_TCGETA     = 0x40127417;$/;"	m	class:PowerLinux
TGT_TCGETA	./arch/sparc/linux/linux.hh	/^    static const unsigned TGT_TCGETA    = 0x40125401;$/;"	m	class:SparcLinux
TGT_TCGETA	./kern/linux/linux.hh	/^    static const unsigned TGT_TCGETA     = 0x5405;$/;"	m	class:Linux
TGT_TCGETS	./arch/alpha/linux/linux.hh	/^    static const unsigned TGT_TCGETS     = 0x402c7413;$/;"	m	class:AlphaLinux
TGT_TCGETS	./arch/alpha/tru64/tru64.hh	/^    static const unsigned TGT_TCGETS     = 0x402c7413;$/;"	m	class:AlphaTru64
TGT_TCGETS	./arch/mips/linux/linux.hh	/^    static const unsigned TGT_TCGETS     = 0x540d;$/;"	m	class:MipsLinux
TGT_TCGETS	./arch/power/linux/linux.hh	/^    static const unsigned TGT_TCGETS     = 0x402c7413;$/;"	m	class:PowerLinux
TGT_TCGETS	./arch/sparc/linux/linux.hh	/^    static const unsigned TGT_TCGETS    = 0x40385408;$/;"	m	class:SparcLinux
TGT_TCGETS	./kern/linux/linux.hh	/^    static const unsigned TGT_TCGETS     = 0x5401;$/;"	m	class:Linux
TGT_TCSETAW	./arch/alpha/linux/linux.hh	/^    static const unsigned TGT_TCSETAW    = 0x80147419; \/\/ 2.6.15 kernel$/;"	m	class:AlphaLinux
TGT_TCSETAW	./arch/alpha/tru64/tru64.hh	/^    static const unsigned TGT_TCSETAW    = 0x80147419; \/\/ 2.6.15 kernel$/;"	m	class:AlphaTru64
TGT_TCSETAW	./arch/mips/linux/linux.hh	/^    static const unsigned TGT_TCSETAW    = 0x5403;$/;"	m	class:MipsLinux
TGT_TCSETAW	./arch/power/linux/linux.hh	/^    static const unsigned TGT_TCSETAW    = 0x80147419; \/\/ 2.6.15 kernel$/;"	m	class:PowerLinux
TGT_TCSETAW	./arch/sparc/linux/linux.hh	/^    static const unsigned TGT_TCSETAW   = 0x80125403;$/;"	m	class:SparcLinux
TGT_TCSETAW	./kern/linux/linux.hh	/^    static const unsigned TGT_TCSETAW    = 0x5407;$/;"	m	class:Linux
TGT_TIOCGETA	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_TIOCGETA   = 0x402c7413;$/;"	m	class:FreeBSD
TGT_TIOCGETC	./arch/alpha/linux/linux.hh	/^    static const unsigned TGT_TIOCGETC   = 0x40067412;$/;"	m	class:AlphaLinux
TGT_TIOCGETC	./arch/alpha/tru64/tru64.hh	/^    static const unsigned TGT_TIOCGETC   = 0x40067412;$/;"	m	class:AlphaTru64
TGT_TIOCGETC	./arch/power/linux/linux.hh	/^    static const unsigned TGT_TIOCGETC   = 0x40067412;$/;"	m	class:PowerLinux
TGT_TIOCGETP	./arch/alpha/linux/linux.hh	/^    static const unsigned TGT_TIOCGETP   = 0x40067408;$/;"	m	class:AlphaLinux
TGT_TIOCGETP	./arch/alpha/tru64/tru64.hh	/^    static const unsigned TGT_TIOCGETP   = 0x40067408;$/;"	m	class:AlphaTru64
TGT_TIOCGETP	./arch/mips/linux/linux.hh	/^    static const unsigned TGT_TIOCGETP   = 0x7408;$/;"	m	class:MipsLinux
TGT_TIOCGETP	./arch/power/linux/linux.hh	/^    static const unsigned TGT_TIOCGETP   = 0x40067408;$/;"	m	class:PowerLinux
TGT_TIOCGETP	./arch/sparc/linux/linux.hh	/^    static const unsigned TGT_TIOCGETP  = 0x40067408;$/;"	m	class:SparcLinux
TGT_TIOCISATTY	./arch/alpha/tru64/tru64.hh	/^    static const unsigned TGT_TIOCISATTY = 0x2000745e;$/;"	m	class:AlphaTru64
TGT_TIOCSETA	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_TIOCSETA   = 0x802c7414;$/;"	m	class:FreeBSD
TGT_TIOCSETAW	./kern/freebsd/freebsd.hh	/^    static const unsigned TGT_TIOCSETAW  = 0x802c7415;$/;"	m	class:FreeBSD
TGT_TIOCSETC	./arch/alpha/linux/linux.hh	/^    static const unsigned TGT_TIOCSETC   = 0x80067411;$/;"	m	class:AlphaLinux
TGT_TIOCSETC	./arch/alpha/tru64/tru64.hh	/^    static const unsigned TGT_TIOCSETC   = 0x80067411;$/;"	m	class:AlphaTru64
TGT_TIOCSETC	./arch/power/linux/linux.hh	/^    static const unsigned TGT_TIOCSETC   = 0x80067411;$/;"	m	class:PowerLinux
TGT_TIOCSETN	./arch/alpha/linux/linux.hh	/^    static const unsigned TGT_TIOCSETN   = 0x8006740a;$/;"	m	class:AlphaLinux
TGT_TIOCSETN	./arch/alpha/tru64/tru64.hh	/^    static const unsigned TGT_TIOCSETN   = 0x8006740a;$/;"	m	class:AlphaTru64
TGT_TIOCSETN	./arch/mips/linux/linux.hh	/^    static const unsigned TGT_TIOCSETN   = 0x740a;$/;"	m	class:MipsLinux
TGT_TIOCSETN	./arch/power/linux/linux.hh	/^    static const unsigned TGT_TIOCSETN   = 0x8006740a;$/;"	m	class:PowerLinux
TGT_TIOCSETN	./arch/sparc/linux/linux.hh	/^    static const unsigned TGT_TIOCSETN  = 0x8006740a;$/;"	m	class:SparcLinux
TGT_TIOCSETP	./arch/alpha/linux/linux.hh	/^    static const unsigned TGT_TIOCSETP   = 0x80067409;$/;"	m	class:AlphaLinux
TGT_TIOCSETP	./arch/alpha/tru64/tru64.hh	/^    static const unsigned TGT_TIOCSETP   = 0x80067409;$/;"	m	class:AlphaTru64
TGT_TIOCSETP	./arch/mips/linux/linux.hh	/^    static const unsigned TGT_TIOCSETP   = 0x7409;$/;"	m	class:MipsLinux
TGT_TIOCSETP	./arch/power/linux/linux.hh	/^    static const unsigned TGT_TIOCSETP   = 0x80067409;$/;"	m	class:PowerLinux
TGT_TIOCSETP	./arch/sparc/linux/linux.hh	/^    static const unsigned TGT_TIOCSETP  = 0x80067409;$/;"	m	class:SparcLinux
TICK_FUTURE	./mem/mem_checker.hh	/^    static const Tick    TICK_FUTURE  = MaxTick;$/;"	m	class:MemChecker
TICK_INITIAL	./mem/mem_checker.hh	/^    static const Tick    TICK_INITIAL   = 0;$/;"	m	class:MemChecker
TIDV	./dev/net/i8254xGBe_defs.hh	/^    struct TIDV : public Reg<uint32_t> { \/\/ 0x3820 TIDV Register$/;"	s	struct:iGbReg::Regs
TIMER_CNTEL0ACR	./dev/arm/generic_timer.hh	/^    static const Addr TIMER_CNTEL0ACR    = 0x014;$/;"	m	class:GenericTimerMem
TIMER_CNTFRQ	./dev/arm/generic_timer.hh	/^    static const Addr TIMER_CNTFRQ       = 0x010;$/;"	m	class:GenericTimerMem
TIMER_CNTPCT_HI	./dev/arm/generic_timer.hh	/^    static const Addr TIMER_CNTPCT_HI    = 0x004;$/;"	m	class:GenericTimerMem
TIMER_CNTPCT_LO	./dev/arm/generic_timer.hh	/^    static const Addr TIMER_CNTPCT_LO    = 0x000;$/;"	m	class:GenericTimerMem
TIMER_CNTP_CTL	./dev/arm/generic_timer.hh	/^    static const Addr TIMER_CNTP_CTL     = 0x02C;$/;"	m	class:GenericTimerMem
TIMER_CNTP_CVAL_HI	./dev/arm/generic_timer.hh	/^    static const Addr TIMER_CNTP_CVAL_HI = 0x024;$/;"	m	class:GenericTimerMem
TIMER_CNTP_CVAL_LO	./dev/arm/generic_timer.hh	/^    static const Addr TIMER_CNTP_CVAL_LO = 0x020;$/;"	m	class:GenericTimerMem
TIMER_CNTP_TVAL	./dev/arm/generic_timer.hh	/^    static const Addr TIMER_CNTP_TVAL    = 0x028;$/;"	m	class:GenericTimerMem
TIMER_CNTVCT_HI	./dev/arm/generic_timer.hh	/^    static const Addr TIMER_CNTVCT_HI    = 0x00C;$/;"	m	class:GenericTimerMem
TIMER_CNTVCT_LO	./dev/arm/generic_timer.hh	/^    static const Addr TIMER_CNTVCT_LO    = 0x008;$/;"	m	class:GenericTimerMem
TIMER_CNTVOFF_HI	./dev/arm/generic_timer.hh	/^    static const Addr TIMER_CNTVOFF_HI   = 0x01C;$/;"	m	class:GenericTimerMem
TIMER_CNTVOFF_LO	./dev/arm/generic_timer.hh	/^    static const Addr TIMER_CNTVOFF_LO   = 0x018;$/;"	m	class:GenericTimerMem
TIMER_CNTV_CTL	./dev/arm/generic_timer.hh	/^    static const Addr TIMER_CNTV_CTL     = 0x03C;$/;"	m	class:GenericTimerMem
TIMER_CNTV_CVAL_HI	./dev/arm/generic_timer.hh	/^    static const Addr TIMER_CNTV_CVAL_HI = 0x034;$/;"	m	class:GenericTimerMem
TIMER_CNTV_CVAL_LO	./dev/arm/generic_timer.hh	/^    static const Addr TIMER_CNTV_CVAL_LO = 0x030;$/;"	m	class:GenericTimerMem
TIMER_CNTV_TVAL	./dev/arm/generic_timer.hh	/^    static const Addr TIMER_CNTV_TVAL    = 0x038;$/;"	m	class:GenericTimerMem
TIMER_FREQUENCY	./arch/alpha/freebsd/system.cc	47;"	d	file:
TIOCGETA_	./arch/arm/linux/linux.hh	/^    static const unsigned TIOCGETA_   = 0x5405;$/;"	m	class:ArmLinux64
TIOCGETC_	./arch/arm/linux/linux.hh	/^    static const unsigned TIOCGETC_   = 0x40067412;$/;"	m	class:ArmLinux64
TIOCGETP_	./arch/arm/linux/linux.hh	/^    static const unsigned TIOCGETP_   = 0x5401;$/;"	m	class:ArmLinux64
TIOCGETS_	./arch/arm/linux/linux.hh	/^    static const unsigned TIOCGETS_   = 0x402c7413;$/;"	m	class:ArmLinux64
TIOCISATTY_	./arch/arm/linux/linux.hh	/^    static const unsigned TIOCISATTY_ = 0x2000745e;$/;"	m	class:ArmLinux64
TIOCSETC_	./arch/arm/linux/linux.hh	/^    static const unsigned TIOCSETC_   = 0x80067411;$/;"	m	class:ArmLinux64
TIOCSETN_	./arch/arm/linux/linux.hh	/^    static const unsigned TIOCSETN_   = 0x8006740a;$/;"	m	class:ArmLinux64
TIOCSETP_	./arch/arm/linux/linux.hh	/^    static const unsigned TIOCSETP_   = 0x80067409;$/;"	m	class:ArmLinux64
TIR	./base/loader/coff_sym.h	/^} TIR, *pTIR;$/;"	t	typeref:struct:__anon112
TLB	./arch/alpha/tlb.cc	/^TLB::TLB(const Params *p)$/;"	f	class:AlphaISA::TLB
TLB	./arch/alpha/tlb.hh	/^class TLB : public BaseTLB$/;"	c	namespace:AlphaISA
TLB	./arch/arm/tlb.cc	/^TLB::TLB(const ArmTLBParams *p)$/;"	f	class:TLB
TLB	./arch/arm/tlb.hh	/^class TLB : public BaseTLB$/;"	c	namespace:ArmISA
TLB	./arch/mips/tlb.cc	/^TLB::TLB(const Params *p)$/;"	f	class:TLB
TLB	./arch/mips/tlb.hh	/^class TLB : public BaseTLB$/;"	c	namespace:MipsISA
TLB	./arch/power/tlb.cc	/^TLB::TLB(const Params *p)$/;"	f	class:TLB
TLB	./arch/power/tlb.hh	/^class TLB : public BaseTLB$/;"	c	namespace:PowerISA
TLB	./arch/sparc/tlb.cc	/^TLB::TLB(const Params *p)$/;"	f	class:SparcISA::TLB
TLB	./arch/sparc/tlb.hh	/^class TLB : public BaseTLB$/;"	c	namespace:SparcISA
TLB	./arch/x86/tlb.cc	/^TLB::TLB(const Params *p)$/;"	f	class:X86ISA::TLB
TLB	./arch/x86/tlb.hh	/^    class TLB : public BaseTLB$/;"	c	namespace:X86ISA
TLBConflictAbort	./arch/arm/faults.hh	/^        TLBConflictAbort,  \/\/ Requires LPAE$/;"	e	enum:ArmISA::ArmFault::FaultSource
TMUTMRLBA	./dev/arm/ufs_device.hh	/^        uint32_t TMUTMRLBA;$/;"	m	struct:UFSHostDevice::HCIMem
TMUTMRLBAU	./dev/arm/ufs_device.hh	/^        uint32_t TMUTMRLBAU;$/;"	m	struct:UFSHostDevice::HCIMem
TMUTMRLCLR	./dev/arm/ufs_device.hh	/^        uint32_t TMUTMRLCLR;$/;"	m	struct:UFSHostDevice::HCIMem
TMUTMRLDBR	./dev/arm/ufs_device.hh	/^        uint32_t TMUTMRLDBR;$/;"	m	struct:UFSHostDevice::HCIMem
TMUTMRLRSR	./dev/arm/ufs_device.hh	/^        uint32_t TMUTMRLRSR;$/;"	m	struct:UFSHostDevice::HCIMem
TRACE_PACKET	./mem/abstract_mem.cc	301;"	d	file:
TRACE_PACKET	./mem/abstract_mem.cc	319;"	d	file:
TRUTRLBA	./dev/arm/ufs_device.hh	/^        uint32_t TRUTRLBA;$/;"	m	struct:UFSHostDevice::HCIMem
TRUTRLBAU	./dev/arm/ufs_device.hh	/^        uint32_t TRUTRLBAU;$/;"	m	struct:UFSHostDevice::HCIMem
TRUTRLCLR	./dev/arm/ufs_device.hh	/^        uint32_t TRUTRLCLR;$/;"	m	struct:UFSHostDevice::HCIMem
TRUTRLDBR	./dev/arm/ufs_device.hh	/^        uint32_t TRUTRLDBR;$/;"	m	struct:UFSHostDevice::HCIMem
TRUTRLRSR	./dev/arm/ufs_device.hh	/^        uint32_t TRUTRLRSR;$/;"	m	struct:UFSHostDevice::HCIMem
TSDEV_CC_AAR0	./dev/alpha/tsunamireg.h	45;"	d
TSDEV_CC_AAR0	./dev/mips/maltareg.h	47;"	d
TSDEV_CC_AAR1	./dev/alpha/tsunamireg.h	46;"	d
TSDEV_CC_AAR1	./dev/mips/maltareg.h	48;"	d
TSDEV_CC_AAR2	./dev/alpha/tsunamireg.h	47;"	d
TSDEV_CC_AAR2	./dev/mips/maltareg.h	49;"	d
TSDEV_CC_AAR3	./dev/alpha/tsunamireg.h	48;"	d
TSDEV_CC_AAR3	./dev/mips/maltareg.h	50;"	d
TSDEV_CC_BDIMS	./dev/alpha/tsunamireg.h	70;"	d
TSDEV_CC_BDIMS	./dev/mips/maltareg.h	72;"	d
TSDEV_CC_BDIRS	./dev/alpha/tsunamireg.h	71;"	d
TSDEV_CC_BDIRS	./dev/mips/maltareg.h	73;"	d
TSDEV_CC_CSR	./dev/alpha/tsunamireg.h	41;"	d
TSDEV_CC_CSR	./dev/mips/maltareg.h	43;"	d
TSDEV_CC_DIM0	./dev/alpha/tsunamireg.h	49;"	d
TSDEV_CC_DIM0	./dev/mips/maltareg.h	51;"	d
TSDEV_CC_DIM1	./dev/alpha/tsunamireg.h	50;"	d
TSDEV_CC_DIM1	./dev/mips/maltareg.h	52;"	d
TSDEV_CC_DIM2	./dev/alpha/tsunamireg.h	62;"	d
TSDEV_CC_DIM2	./dev/mips/maltareg.h	64;"	d
TSDEV_CC_DIM3	./dev/alpha/tsunamireg.h	63;"	d
TSDEV_CC_DIM3	./dev/mips/maltareg.h	65;"	d
TSDEV_CC_DIR0	./dev/alpha/tsunamireg.h	51;"	d
TSDEV_CC_DIR0	./dev/mips/maltareg.h	53;"	d
TSDEV_CC_DIR1	./dev/alpha/tsunamireg.h	52;"	d
TSDEV_CC_DIR1	./dev/mips/maltareg.h	54;"	d
TSDEV_CC_DIR2	./dev/alpha/tsunamireg.h	64;"	d
TSDEV_CC_DIR2	./dev/mips/maltareg.h	66;"	d
TSDEV_CC_DIR3	./dev/alpha/tsunamireg.h	65;"	d
TSDEV_CC_DIR3	./dev/mips/maltareg.h	67;"	d
TSDEV_CC_DRIR	./dev/alpha/tsunamireg.h	53;"	d
TSDEV_CC_DRIR	./dev/mips/maltareg.h	55;"	d
TSDEV_CC_IIC0	./dev/alpha/tsunamireg.h	55;"	d
TSDEV_CC_IIC0	./dev/mips/maltareg.h	57;"	d
TSDEV_CC_IIC1	./dev/alpha/tsunamireg.h	56;"	d
TSDEV_CC_IIC1	./dev/mips/maltareg.h	58;"	d
TSDEV_CC_IIC2	./dev/alpha/tsunamireg.h	66;"	d
TSDEV_CC_IIC2	./dev/mips/maltareg.h	68;"	d
TSDEV_CC_IIC3	./dev/alpha/tsunamireg.h	67;"	d
TSDEV_CC_IIC3	./dev/mips/maltareg.h	69;"	d
TSDEV_CC_IPIQ	./dev/alpha/tsunamireg.h	72;"	d
TSDEV_CC_IPIQ	./dev/mips/maltareg.h	74;"	d
TSDEV_CC_IPIR	./dev/alpha/tsunamireg.h	73;"	d
TSDEV_CC_IPIR	./dev/mips/maltareg.h	75;"	d
TSDEV_CC_ITIR	./dev/alpha/tsunamireg.h	74;"	d
TSDEV_CC_ITIR	./dev/mips/maltareg.h	76;"	d
TSDEV_CC_MISC	./dev/alpha/tsunamireg.h	43;"	d
TSDEV_CC_MISC	./dev/mips/maltareg.h	45;"	d
TSDEV_CC_MPR0	./dev/alpha/tsunamireg.h	57;"	d
TSDEV_CC_MPR0	./dev/mips/maltareg.h	59;"	d
TSDEV_CC_MPR1	./dev/alpha/tsunamireg.h	58;"	d
TSDEV_CC_MPR1	./dev/mips/maltareg.h	60;"	d
TSDEV_CC_MPR2	./dev/alpha/tsunamireg.h	59;"	d
TSDEV_CC_MPR2	./dev/mips/maltareg.h	61;"	d
TSDEV_CC_MPR3	./dev/alpha/tsunamireg.h	60;"	d
TSDEV_CC_MPR3	./dev/mips/maltareg.h	62;"	d
TSDEV_CC_MTR	./dev/alpha/tsunamireg.h	42;"	d
TSDEV_CC_MTR	./dev/mips/maltareg.h	44;"	d
TSDEV_CC_PRBEN	./dev/alpha/tsunamireg.h	54;"	d
TSDEV_CC_PRBEN	./dev/mips/maltareg.h	56;"	d
TSDEV_CTRL_PORTB	./dev/alpha/tsunamireg.h	123;"	d
TSDEV_CTRL_PORTB	./dev/mips/maltareg.h	125;"	d
TSDEV_DC_DREV	./dev/alpha/tsunamireg.h	107;"	d
TSDEV_DC_DREV	./dev/mips/maltareg.h	109;"	d
TSDEV_DC_DSC	./dev/alpha/tsunamireg.h	105;"	d
TSDEV_DC_DSC	./dev/mips/maltareg.h	107;"	d
TSDEV_DC_DSC2	./dev/alpha/tsunamireg.h	108;"	d
TSDEV_DC_DSC2	./dev/mips/maltareg.h	110;"	d
TSDEV_DC_STR	./dev/alpha/tsunamireg.h	106;"	d
TSDEV_DC_STR	./dev/mips/maltareg.h	108;"	d
TSDEV_DMA1_CMND	./dev/alpha/tsunamireg.h	129;"	d
TSDEV_DMA1_CMND	./dev/mips/maltareg.h	131;"	d
TSDEV_DMA1_MASK	./dev/alpha/tsunamireg.h	121;"	d
TSDEV_DMA1_MASK	./dev/mips/maltareg.h	123;"	d
TSDEV_DMA1_MMASK	./dev/alpha/tsunamireg.h	133;"	d
TSDEV_DMA1_MMASK	./dev/mips/maltareg.h	135;"	d
TSDEV_DMA1_MODE	./dev/alpha/tsunamireg.h	119;"	d
TSDEV_DMA1_MODE	./dev/mips/maltareg.h	121;"	d
TSDEV_DMA1_RESET	./dev/alpha/tsunamireg.h	117;"	d
TSDEV_DMA1_RESET	./dev/mips/maltareg.h	119;"	d
TSDEV_DMA1_STAT	./dev/alpha/tsunamireg.h	130;"	d
TSDEV_DMA1_STAT	./dev/mips/maltareg.h	132;"	d
TSDEV_DMA2_CMND	./dev/alpha/tsunamireg.h	131;"	d
TSDEV_DMA2_CMND	./dev/mips/maltareg.h	133;"	d
TSDEV_DMA2_MASK	./dev/alpha/tsunamireg.h	122;"	d
TSDEV_DMA2_MASK	./dev/mips/maltareg.h	124;"	d
TSDEV_DMA2_MMASK	./dev/alpha/tsunamireg.h	134;"	d
TSDEV_DMA2_MMASK	./dev/mips/maltareg.h	136;"	d
TSDEV_DMA2_MODE	./dev/alpha/tsunamireg.h	120;"	d
TSDEV_DMA2_MODE	./dev/mips/maltareg.h	122;"	d
TSDEV_DMA2_RESET	./dev/alpha/tsunamireg.h	118;"	d
TSDEV_DMA2_RESET	./dev/mips/maltareg.h	120;"	d
TSDEV_DMA2_STAT	./dev/alpha/tsunamireg.h	132;"	d
TSDEV_DMA2_STAT	./dev/mips/maltareg.h	134;"	d
TSDEV_KBD	./dev/alpha/tsunamireg.h	128;"	d
TSDEV_KBD	./dev/alpha/tsunamireg.h	137;"	d
TSDEV_KBD	./dev/mips/maltareg.h	130;"	d
TSDEV_KBD	./dev/mips/maltareg.h	139;"	d
TSDEV_PC_PCTL	./dev/alpha/tsunamireg.h	90;"	d
TSDEV_PC_PCTL	./dev/mips/maltareg.h	92;"	d
TSDEV_PC_PERRMASK	./dev/alpha/tsunamireg.h	94;"	d
TSDEV_PC_PERRMASK	./dev/mips/maltareg.h	96;"	d
TSDEV_PC_PERROR	./dev/alpha/tsunamireg.h	93;"	d
TSDEV_PC_PERROR	./dev/mips/maltareg.h	95;"	d
TSDEV_PC_PERRSET	./dev/alpha/tsunamireg.h	95;"	d
TSDEV_PC_PERRSET	./dev/mips/maltareg.h	97;"	d
TSDEV_PC_PLAT	./dev/alpha/tsunamireg.h	91;"	d
TSDEV_PC_PLAT	./dev/mips/maltareg.h	93;"	d
TSDEV_PC_PMONCNT	./dev/alpha/tsunamireg.h	99;"	d
TSDEV_PC_PMONCNT	./dev/mips/maltareg.h	101;"	d
TSDEV_PC_PMONCTL	./dev/alpha/tsunamireg.h	98;"	d
TSDEV_PC_PMONCTL	./dev/mips/maltareg.h	100;"	d
TSDEV_PC_RES	./dev/alpha/tsunamireg.h	92;"	d
TSDEV_PC_RES	./dev/mips/maltareg.h	94;"	d
TSDEV_PC_SPST	./dev/alpha/tsunamireg.h	101;"	d
TSDEV_PC_SPST	./dev/mips/maltareg.h	103;"	d
TSDEV_PC_TBA0	./dev/alpha/tsunamireg.h	86;"	d
TSDEV_PC_TBA0	./dev/mips/maltareg.h	88;"	d
TSDEV_PC_TBA1	./dev/alpha/tsunamireg.h	87;"	d
TSDEV_PC_TBA1	./dev/mips/maltareg.h	89;"	d
TSDEV_PC_TBA2	./dev/alpha/tsunamireg.h	88;"	d
TSDEV_PC_TBA2	./dev/mips/maltareg.h	90;"	d
TSDEV_PC_TBA3	./dev/alpha/tsunamireg.h	89;"	d
TSDEV_PC_TBA3	./dev/mips/maltareg.h	91;"	d
TSDEV_PC_TLBIA	./dev/alpha/tsunamireg.h	97;"	d
TSDEV_PC_TLBIA	./dev/mips/maltareg.h	99;"	d
TSDEV_PC_TLBIV	./dev/alpha/tsunamireg.h	96;"	d
TSDEV_PC_TLBIV	./dev/mips/maltareg.h	98;"	d
TSDEV_PC_WSBA0	./dev/alpha/tsunamireg.h	78;"	d
TSDEV_PC_WSBA0	./dev/mips/maltareg.h	80;"	d
TSDEV_PC_WSBA1	./dev/alpha/tsunamireg.h	79;"	d
TSDEV_PC_WSBA1	./dev/mips/maltareg.h	81;"	d
TSDEV_PC_WSBA2	./dev/alpha/tsunamireg.h	80;"	d
TSDEV_PC_WSBA2	./dev/mips/maltareg.h	82;"	d
TSDEV_PC_WSBA3	./dev/alpha/tsunamireg.h	81;"	d
TSDEV_PC_WSBA3	./dev/mips/maltareg.h	83;"	d
TSDEV_PC_WSM0	./dev/alpha/tsunamireg.h	82;"	d
TSDEV_PC_WSM0	./dev/mips/maltareg.h	84;"	d
TSDEV_PC_WSM1	./dev/alpha/tsunamireg.h	83;"	d
TSDEV_PC_WSM1	./dev/mips/maltareg.h	85;"	d
TSDEV_PC_WSM2	./dev/alpha/tsunamireg.h	84;"	d
TSDEV_PC_WSM2	./dev/mips/maltareg.h	86;"	d
TSDEV_PC_WSM3	./dev/alpha/tsunamireg.h	85;"	d
TSDEV_PC_WSM3	./dev/mips/maltareg.h	87;"	d
TSDEV_PIC1_ACK	./dev/alpha/tsunamireg.h	115;"	d
TSDEV_PIC1_ACK	./dev/mips/maltareg.h	117;"	d
TSDEV_PIC1_ISR	./dev/alpha/tsunamireg.h	113;"	d
TSDEV_PIC1_ISR	./dev/mips/maltareg.h	115;"	d
TSDEV_PIC1_MASK	./dev/alpha/tsunamireg.h	111;"	d
TSDEV_PIC1_MASK	./dev/mips/maltareg.h	113;"	d
TSDEV_PIC2_ACK	./dev/alpha/tsunamireg.h	116;"	d
TSDEV_PIC2_ACK	./dev/mips/maltareg.h	118;"	d
TSDEV_PIC2_ISR	./dev/alpha/tsunamireg.h	114;"	d
TSDEV_PIC2_ISR	./dev/mips/maltareg.h	116;"	d
TSDEV_PIC2_MASK	./dev/alpha/tsunamireg.h	112;"	d
TSDEV_PIC2_MASK	./dev/mips/maltareg.h	114;"	d
TSDEV_RTC_ADDR	./dev/alpha/tsunamireg.h	139;"	d
TSDEV_RTC_ADDR	./dev/mips/maltareg.h	150;"	d
TSDEV_RTC_DATA	./dev/alpha/tsunamireg.h	140;"	d
TSDEV_RTC_DATA	./dev/mips/maltareg.h	151;"	d
TSDEV_TMR0_DATA	./dev/alpha/tsunamireg.h	124;"	d
TSDEV_TMR0_DATA	./dev/mips/maltareg.h	126;"	d
TSDEV_TMR1_DATA	./dev/alpha/tsunamireg.h	125;"	d
TSDEV_TMR1_DATA	./dev/mips/maltareg.h	127;"	d
TSDEV_TMR2_DATA	./dev/alpha/tsunamireg.h	126;"	d
TSDEV_TMR2_DATA	./dev/mips/maltareg.h	128;"	d
TSDEV_TMR_CTRL	./dev/alpha/tsunamireg.h	127;"	d
TSDEV_TMR_CTRL	./dev/mips/maltareg.h	129;"	d
TSSPhysAddr	./arch/x86/system.hh	/^    const uint64_t TSSPhysAddr = 0x63000;$/;"	m	namespace:X86ISA
TSSVirtAddr	./arch/x86/system.hh	/^    const uint64_t TSSVirtAddr = 0xffff800000003000;$/;"	m	namespace:X86ISA
TSUNAMI_PCI0_IO	./dev/alpha/tsunamireg.h	146;"	d
TSUNAMI_PCI0_IO	./dev/mips/maltareg.h	157;"	d
TSUNAMI_PCI0_MEMORY	./dev/alpha/tsunamireg.h	145;"	d
TSUNAMI_PCI0_MEMORY	./dev/mips/maltareg.h	156;"	d
TSUNAMI_UNCACHABLE_BIT	./dev/alpha/tsunamireg.h	144;"	d
TSUNAMI_UNCACHABLE_BIT	./dev/mips/maltareg.h	155;"	d
TXDCA_CTL	./dev/net/i8254xGBe_defs.hh	/^    struct TXDCA_CTL : public Reg<uint32_t> { \/\/ 0x3814 TXDCA_CTL Register$/;"	s	struct:iGbReg::Regs
TXDCTL	./dev/net/i8254xGBe_defs.hh	/^    struct TXDCTL : public Reg<uint32_t> { \/\/ 0x3828 TXDCTL Register$/;"	s	struct:iGbReg::Regs
TXDP	./dev/net/ns_gige_reg.h	/^    TXDP =              0x20,$/;"	e	enum:DeviceRegisterAddress
TXDP_HI	./dev/net/ns_gige_reg.h	/^    TXDP_HI =           0x24,$/;"	e	enum:DeviceRegisterAddress
TXD_ADVCNXT	./dev/net/i8254xGBe_defs.hh	/^const uint8_t TXD_ADVCNXT = 0x2;$/;"	m	namespace:iGbReg::TxdOp
TXD_ADVDATA	./dev/net/i8254xGBe_defs.hh	/^const uint8_t TXD_ADVDATA = 0x3;$/;"	m	namespace:iGbReg::TxdOp
TXD_CNXT	./dev/net/i8254xGBe_defs.hh	/^const uint8_t TXD_CNXT = 0x0;$/;"	m	namespace:iGbReg::TxdOp
TXD_DATA	./dev/net/i8254xGBe_defs.hh	/^const uint8_t TXD_DATA = 0x1;$/;"	m	namespace:iGbReg::TxdOp
TX_CFG	./dev/net/ns_gige_reg.h	/^    TX_CFG =            0x28,$/;"	e	enum:DeviceRegisterAddress
TX_CFG_ATP	./dev/net/ns_gige_reg.h	/^     TX_CFG_ATP =       0x10000000,$/;"	e	enum:TransmitConfigurationRegister
TX_CFG_BRST_DIS	./dev/net/ns_gige_reg.h	/^     TX_CFG_BRST_DIS =  0x00080000,$/;"	e	enum:TransmitConfigurationRegister
TX_CFG_CSI	./dev/net/ns_gige_reg.h	/^     TX_CFG_CSI =       0x80000000,$/;"	e	enum:TransmitConfigurationRegister
TX_CFG_DRTH_MASK	./dev/net/ns_gige_reg.h	/^     TX_CFG_DRTH_MASK = 0x000000ff$/;"	e	enum:TransmitConfigurationRegister
TX_CFG_ECRETRY	./dev/net/ns_gige_reg.h	/^     TX_CFG_ECRETRY =   0x00800000,$/;"	e	enum:TransmitConfigurationRegister
TX_CFG_FLTH_MASK	./dev/net/ns_gige_reg.h	/^     TX_CFG_FLTH_MASK = 0x0000ff00,$/;"	e	enum:TransmitConfigurationRegister
TX_CFG_HBI	./dev/net/ns_gige_reg.h	/^     TX_CFG_HBI =       0x40000000,$/;"	e	enum:TransmitConfigurationRegister
TX_CFG_MLB	./dev/net/ns_gige_reg.h	/^     TX_CFG_MLB =       0x20000000,$/;"	e	enum:TransmitConfigurationRegister
TX_CFG_MXDMA	./dev/net/ns_gige_reg.h	/^     TX_CFG_MXDMA =     0x00700000,$/;"	e	enum:TransmitConfigurationRegister
TX_CFG_MXDMA1024	./dev/net/ns_gige_reg.h	/^     TX_CFG_MXDMA1024 = 0x00000000,$/;"	e	enum:TransmitConfigurationRegister
TX_CFG_MXDMA128	./dev/net/ns_gige_reg.h	/^     TX_CFG_MXDMA128 =  0x00500000,$/;"	e	enum:TransmitConfigurationRegister
TX_CFG_MXDMA16	./dev/net/ns_gige_reg.h	/^     TX_CFG_MXDMA16 =   0x00200000,$/;"	e	enum:TransmitConfigurationRegister
TX_CFG_MXDMA256	./dev/net/ns_gige_reg.h	/^     TX_CFG_MXDMA256 =  0x00600000,$/;"	e	enum:TransmitConfigurationRegister
TX_CFG_MXDMA32	./dev/net/ns_gige_reg.h	/^     TX_CFG_MXDMA32 =   0x00300000,$/;"	e	enum:TransmitConfigurationRegister
TX_CFG_MXDMA512	./dev/net/ns_gige_reg.h	/^     TX_CFG_MXDMA512 =  0x00700000,$/;"	e	enum:TransmitConfigurationRegister
TX_CFG_MXDMA64	./dev/net/ns_gige_reg.h	/^     TX_CFG_MXDMA64 =   0x00400000,$/;"	e	enum:TransmitConfigurationRegister
TX_CFG_MXDMA8	./dev/net/ns_gige_reg.h	/^     TX_CFG_MXDMA8 =    0x00100000,$/;"	e	enum:TransmitConfigurationRegister
TX_INT	./dev/uart.hh	/^const int TX_INT = 0x2;$/;"	v
TYPEDEFINES_H	./mem/ruby/common/TypeDefines.hh	31;"	d
T_FLUSH	./dev/virtio/block.hh	/^    static const RequestType T_FLUSH = 4;$/;"	m	class:VirtIOBlock
T_IN	./dev/virtio/block.hh	/^    static const RequestType T_IN = 0;$/;"	m	class:VirtIOBlock
T_OUT	./dev/virtio/block.hh	/^    static const RequestType T_OUT = 1;$/;"	m	class:VirtIOBlock
Table	./arch/arm/table_walker.hh	/^            Table,$/;"	e	enum:ArmISA::TableWalker::LongDescriptor::EntryType
TableSize	./dev/x86/i82094aa.hh	/^    static const uint8_t TableSize = 24;$/;"	m	class:X86ISA::I82094AA
TableWalker	./arch/arm/table_walker.cc	/^TableWalker::TableWalker(const Params *p)$/;"	f	class:TableWalker
TableWalker	./arch/arm/table_walker.hh	/^class TableWalker : public MemObject$/;"	c	namespace:ArmISA
TagOverflow	./arch/sparc/faults.hh	/^class TagOverflow : public SparcFault<TagOverflow> {};$/;"	c	namespace:SparcISA
TagRead	./arch/sparc/tlb.cc	/^TLB::TagRead(int entry)$/;"	f	class:SparcISA::TLB
TaggedPrefetcher	./mem/cache/prefetch/Prefetcher.py	/^class TaggedPrefetcher(QueuedPrefetcher):$/;"	c
TaggedPrefetcher	./mem/cache/prefetch/tagged.cc	/^TaggedPrefetcher::TaggedPrefetcher(const TaggedPrefetcherParams *p)$/;"	f	class:TaggedPrefetcher
TaggedPrefetcher	./mem/cache/prefetch/tagged.hh	/^class TaggedPrefetcher : public QueuedPrefetcher$/;"	c
TapEvent	./dev/net/ethertap.cc	/^    TapEvent(EtherTap *_tap, int fd, int e)$/;"	f	class:TapEvent
TapEvent	./dev/net/ethertap.cc	/^class TapEvent : public PollEvent$/;"	c	file:
TapListener	./dev/net/ethertap.cc	/^    TapListener(EtherTap *t, int p)$/;"	f	class:TapListener
TapListener	./dev/net/ethertap.cc	/^class TapListener$/;"	c	file:
Target	./mem/cache/mshr.hh	/^        Target(PacketPtr _pkt, Tick _readyTime, Counter _order,$/;"	f	class:MSHR::Target
Target	./mem/cache/mshr.hh	/^    class Target {$/;"	c	class:MSHR
TargetList	./mem/cache/mshr.cc	/^MSHR::TargetList::TargetList()$/;"	f	class:MSHR::TargetList
TargetList	./mem/cache/mshr.hh	/^    class TargetList : public std::list<Target> {$/;"	c	class:MSHR
TaskId	./mem/request.hh	/^    enum TaskId {$/;"	g	namespace:ContextSwitchTaskId
TcpHdr	./base/inet.hh	/^struct TcpHdr : public tcp_hdr$/;"	s	namespace:Net
TcpOpt	./base/inet.hh	/^struct TcpOpt : public tcp_opt$/;"	s	namespace:Net
TcpPort	./python/m5/params.py	/^class TcpPort(CheckedInt):  cxx_type = 'uint16_t'; size = 16; unsigned = True$/;"	c
TcpPtr	./base/inet.hh	/^    TcpPtr() : p(0), _off(0) {}$/;"	f	class:Net::TcpPtr
TcpPtr	./base/inet.hh	/^    TcpPtr(const Ip6Ptr &ptr) : p(0), _off(0) { set(ptr); }$/;"	f	class:Net::TcpPtr
TcpPtr	./base/inet.hh	/^    TcpPtr(const IpPtr &ptr) : p(0), _off(0) { set(ptr); }$/;"	f	class:Net::TcpPtr
TcpPtr	./base/inet.hh	/^    TcpPtr(const TcpPtr &ptr) : p(ptr.p), _off(ptr._off) {}$/;"	f	class:Net::TcpPtr
TcpPtr	./base/inet.hh	/^class TcpPtr$/;"	c	namespace:Net
Temp	./base/statistics.hh	/^    Temp(NodePtr &&n) : node(std::move(n)) { }$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(const Average &s)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(const AverageVector &s)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(const Formula &f)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(const NodePtr &n) : node(n) { }$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(const Scalar &s)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(const ScalarProxy<Stat> &p)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(const Value &s)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(const Vector &s)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(double value)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(float value)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(signed char value)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(signed int value)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(signed long long value)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(signed long value)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(signed short value)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(unsigned char value)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(unsigned int value)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(unsigned long long value)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(unsigned long value)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^    Temp(unsigned short value)$/;"	f	class:Stats::Temp
Temp	./base/statistics.hh	/^class Temp$/;"	c	namespace:Stats
Template	./arch/isa_parser.py	/^class Template(object):$/;"	c
TermRecvQueue	./dev/virtio/console.hh	/^        TermRecvQueue(PortProxy &proxy, uint16_t size, VirtIOConsole &_parent)$/;"	f	class:VirtIOConsole::TermRecvQueue
TermRecvQueue	./dev/virtio/console.hh	/^    class TermRecvQueue$/;"	c	class:VirtIOConsole
TermTransQueue	./dev/virtio/console.hh	/^        TermTransQueue(PortProxy &proxy, uint16_t size, VirtIOConsole &_parent)$/;"	f	class:VirtIOConsole::TermTransQueue
TermTransQueue	./dev/virtio/console.hh	/^    class TermTransQueue$/;"	c	class:VirtIOConsole
Terminal	./dev/Terminal.py	/^class Terminal(SimObject):$/;"	c
Terminal	./dev/terminal.cc	/^Terminal::Terminal(const Params *p)$/;"	f	class:Terminal
Terminal	./dev/terminal.hh	/^class Terminal : public SimObject$/;"	c
TestClass	./unittest/stattest.cc	/^class TestClass {$/;"	c	file:
TestMacroop	./arch/micro_asm_test.py	/^class TestMacroop(Combinational_Macroop):$/;"	c
TestMouse	./dev/x86/i8042.hh	/^        TestMouse = 0xA9,$/;"	e	enum:X86ISA::I8042::Command
TestOsc0	./dev/arm/rv_ctrl.hh	/^        TestOsc0   = 0xC0,$/;"	e	enum:RealViewCtrl::__anon19
TestOsc1	./dev/arm/rv_ctrl.hh	/^        TestOsc1   = 0xC4,$/;"	e	enum:RealViewCtrl::__anon19
TestOsc2	./dev/arm/rv_ctrl.hh	/^        TestOsc2   = 0xC8,$/;"	e	enum:RealViewCtrl::__anon19
TestOsc3	./dev/arm/rv_ctrl.hh	/^        TestOsc3   = 0xCC,$/;"	e	enum:RealViewCtrl::__anon19
TestOsc4	./dev/arm/rv_ctrl.hh	/^        TestOsc4   = 0xD0$/;"	e	enum:RealViewCtrl::__anon19
TestRC	./unittest/refcnttest.cc	/^    TestRC(const char *newTag) : _tag(newTag)$/;"	f	class:__anon3::TestRC
TestRC	./unittest/refcnttest.cc	/^class TestRC : public RefCounted$/;"	c	namespace:__anon3	file:
TestTrie	./unittest/trietest.cc	/^typedef Trie<Addr, uint32_t> TestTrie;$/;"	t	file:
Text	./base/stats/text.cc	/^Text::Text()$/;"	f	class:Stats::Text
Text	./base/stats/text.cc	/^Text::Text(const std::string &file)$/;"	f	class:Stats::Text
Text	./base/stats/text.cc	/^Text::Text(std::ostream &stream)$/;"	f	class:Stats::Text
Text	./base/stats/text.hh	/^class Text : public Output$/;"	c	namespace:Stats
TheISA	./arch/generic/decode_cache.hh	/^namespace TheISA$/;"	n
TheISA	./cpu/checker/cpu.hh	/^namespace TheISA$/;"	n
TheISA	./cpu/checker/thread_context.hh	/^namespace TheISA {$/;"	n
TheISA	./cpu/decode_cache.hh	/^namespace TheISA$/;"	n
TheISA	./cpu/simple/base.hh	/^namespace TheISA$/;"	n
TheISA	./cpu/simple_thread.hh	/^namespace TheISA {$/;"	n
TheISA	./cpu/thread_context.hh	/^namespace TheISA {$/;"	n
TheISA	./cpu/thread_context.hh	/^namespace TheISA$/;"	n
TheISA	./cpu/thread_state.hh	/^namespace TheISA {$/;"	n
Thread	./cpu/o3/commit.hh	/^    typedef O3ThreadState<Impl> Thread;$/;"	t	class:DefaultCommit
Thread	./cpu/o3/cpu.hh	/^    typedef O3ThreadState<Impl> Thread;$/;"	t	class:FullO3CPU
ThreadContext	./cpu/thread_context.hh	/^class ThreadContext$/;"	c
ThreadFault	./arch/mips/faults.hh	/^class ThreadFault : public MipsFault<ThreadFault> {};$/;"	c	namespace:MipsISA
ThreadID	./base/types.hh	/^typedef int16_t ThreadID;$/;"	t
ThreadInfo	./arch/generic/freebsd/threadinfo.hh	/^    ThreadInfo(ThreadContext *_tc)$/;"	f	class:FreeBSD::ThreadInfo
ThreadInfo	./arch/generic/freebsd/threadinfo.hh	/^class ThreadInfo$/;"	c	namespace:FreeBSD
ThreadInfo	./arch/generic/linux/threadinfo.hh	/^    ThreadInfo(ThreadContext *_tc, Addr _pcbb = 0)$/;"	f	class:Linux::ThreadInfo
ThreadInfo	./arch/generic/linux/threadinfo.hh	/^class ThreadInfo$/;"	c	namespace:Linux
ThreadState	./arch/arm/nativetrace.hh	/^        ThreadState()$/;"	f	struct:Trace::ArmNativeTrace::ThreadState
ThreadState	./arch/arm/nativetrace.hh	/^    struct ThreadState {$/;"	s	class:Trace::ArmNativeTrace
ThreadState	./arch/x86/nativetrace.hh	/^    struct ThreadState {$/;"	s	class:Trace::X86NativeTrace
ThreadState	./cpu/thread_state.cc	/^ThreadState::ThreadState(BaseCPU *cpu, ThreadID _tid, Process *_process)$/;"	f	class:ThreadState
ThreadState	./cpu/thread_state.hh	/^struct ThreadState : public Serializable {$/;"	s
ThreadStatus	./cpu/o3/commit.hh	/^    enum ThreadStatus {$/;"	g	class:DefaultCommit
ThreadStatus	./cpu/o3/decode.hh	/^    enum ThreadStatus {$/;"	g	class:DefaultDecode
ThreadStatus	./cpu/o3/fetch.hh	/^    enum ThreadStatus {$/;"	g	class:DefaultFetch
ThreadStatus	./cpu/o3/rename.hh	/^    enum ThreadStatus {$/;"	g	class:DefaultRename
ThreadsyncWait	./cpu/base_dyn_inst.hh	/^        ThreadsyncWait,          \/\/\/ Is a thread synchronization instruction$/;"	e	enum:BaseDynInst::Status
ThreeByte0F38Opcode	./arch/x86/types.hh	/^        ThreeByte0F38Opcode,$/;"	e	enum:X86ISA::OpcodeType
ThreeByte0F38OpcodeState	./arch/x86/decoder.hh	/^        ThreeByte0F38OpcodeState,$/;"	e	enum:X86ISA::Decoder::State
ThreeByte0F3AOpcode	./arch/x86/types.hh	/^        ThreeByte0F3AOpcode,$/;"	e	enum:X86ISA::OpcodeType
ThreeByte0F3AOpcodeState	./arch/x86/decoder.hh	/^        ThreeByte0F3AOpcodeState,$/;"	e	enum:X86ISA::Decoder::State
ThreeByteVexFirstState	./arch/x86/decoder.hh	/^        ThreeByteVexFirstState,$/;"	e	enum:X86ISA::Decoder::State
ThreeByteVexSecondState	./arch/x86/decoder.hh	/^        ThreeByteVexSecondState,$/;"	e	enum:X86ISA::Decoder::State
Threshold	./cpu/o3/inst_queue.hh	/^        Threshold$/;"	e	enum:InstructionQueue::IQPolicy
Threshold	./cpu/o3/lsq.hh	/^        Threshold$/;"	e	enum:LSQ::LSQPolicy
Threshold	./cpu/o3/rob.hh	/^        Threshold$/;"	e	enum:ROB::ROBPolicy
Throttle	./mem/ruby/network/simple/Throttle.cc	/^Throttle::Throttle(int sID, RubySystem *rs, NodeID node, Cycles link_latency,$/;"	f	class:Throttle
Throttle	./mem/ruby/network/simple/Throttle.hh	/^class Throttle : public Consumer$/;"	c
Thumb	./base/loader/object_file.hh	/^        Thumb,$/;"	e	enum:ObjectFile::Arch
ThumbBit	./arch/arm/types.hh	/^            ThumbBit = (1 << 0),$/;"	e	enum:ArmISA::PCState::FlagBits
Tick	./base/types.hh	/^typedef uint64_t Tick;$/;"	t
Tick	./python/m5/params.py	/^class Tick(CheckedInt):     cxx_type = 'Tick';     size = 64; unsigned = True$/;"	c
TickCompareEvent	./arch/sparc/isa.hh	/^            &ISA::processTickCompare> TickCompareEvent;$/;"	t	class:SparcISA::ISA
TickEvent	./cpu/kvm/base.hh	/^        TickEvent(BaseKvmCPU &c)$/;"	f	struct:BaseKvmCPU::TickEvent
TickEvent	./cpu/kvm/base.hh	/^    struct TickEvent : public Event$/;"	s	class:BaseKvmCPU
TickEvent	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::TickEvent::TickEvent(FullO3CPU<Impl> *c)$/;"	f	class:FullO3CPU::TickEvent
TickEvent	./cpu/o3/cpu.hh	/^    class TickEvent : public Event$/;"	c	class:FullO3CPU
TickEvent	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::TickEvent::TickEvent(AtomicSimpleCPU *c)$/;"	f	class:AtomicSimpleCPU::TickEvent
TickEvent	./cpu/simple/atomic.hh	/^    struct TickEvent : public Event$/;"	s	class:AtomicSimpleCPU
TickEvent	./cpu/simple/timing.hh	/^            TickEvent(TimingSimpleCPU *_cpu) : pkt(NULL), cpu(_cpu) {}$/;"	f	struct:TimingSimpleCPU::TimingCPUPort::TickEvent
TickEvent	./cpu/simple/timing.hh	/^        struct TickEvent : public Event$/;"	s	class:TimingSimpleCPU::TimingCPUPort
TickEvent	./cpu/testers/networktest/networktest.hh	/^        TickEvent(NetworkTest *c) : Event(CPU_Tick_Pri), cpu(c) {}$/;"	f	class:NetworkTest::TickEvent
TickEvent	./cpu/testers/networktest/networktest.hh	/^    class TickEvent : public Event$/;"	c	class:NetworkTest
TickParamValue	./python/m5/params.py	/^class TickParamValue(NumericParamValue):$/;"	c
Ticked	./sim/ticked_object.cc	/^Ticked::Ticked(ClockedObject &object_,$/;"	f	class:Ticked
Ticked	./sim/ticked_object.hh	/^class Ticked : public Serializable$/;"	c
TickedObject	./sim/TickedObject.py	/^class TickedObject(ClockedObject):$/;"	c
TickedObject	./sim/ticked_object.cc	/^TickedObject::TickedObject(TickedObjectParams *params,$/;"	f	class:TickedObject
TickedObject	./sim/ticked_object.hh	/^class TickedObject : public ClockedObject, public Ticked$/;"	c
Time	./base/time.hh	/^    Time(const Time &val) : _time(val._time) { }$/;"	f	class:Time
Time	./base/time.hh	/^    Time(const timespec &ts) { operator=(ts); }$/;"	f	class:Time
Time	./base/time.hh	/^    Time(const timeval &tv) { operator=(tv); }$/;"	f	class:Time
Time	./base/time.hh	/^    Time(uint64_t sec, uint64_t nsec) { set(sec, nsec); }$/;"	f	class:Time
Time	./base/time.hh	/^    explicit Time() { clear(); }$/;"	f	class:Time
Time	./base/time.hh	/^    explicit Time(double sec) { operator=(sec); }$/;"	f	class:Time
Time	./base/time.hh	/^class Time$/;"	c
Time	./python/m5/params.py	/^class Time(ParamValue):$/;"	c
TimeBufStruct	./cpu/o3/comm.hh	/^struct TimeBufStruct {$/;"	s
TimeBuffer	./cpu/timebuf.hh	/^    TimeBuffer()$/;"	f	class:TimeBuffer
TimeBuffer	./cpu/timebuf.hh	/^    TimeBuffer(int p, int f)$/;"	f	class:TimeBuffer
TimeBuffer	./cpu/timebuf.hh	/^class TimeBuffer$/;"	c
TimeStruct	./cpu/o3/commit.hh	/^    typedef typename CPUPol::TimeStruct TimeStruct;$/;"	t	class:DefaultCommit
TimeStruct	./cpu/o3/cpu.hh	/^    typedef typename CPUPolicy::TimeStruct TimeStruct;$/;"	t	class:FullO3CPU
TimeStruct	./cpu/o3/cpu_policy.hh	/^    typedef TimeBufStruct<Impl> TimeStruct;$/;"	t	struct:SimpleCPUPolicy
TimeStruct	./cpu/o3/decode.hh	/^    typedef typename CPUPol::TimeStruct TimeStruct;$/;"	t	class:DefaultDecode
TimeStruct	./cpu/o3/fetch.hh	/^    typedef typename CPUPol::TimeStruct TimeStruct;$/;"	t	class:DefaultFetch
TimeStruct	./cpu/o3/iew.hh	/^    typedef typename CPUPol::TimeStruct TimeStruct;$/;"	t	class:DefaultIEW
TimeStruct	./cpu/o3/inst_queue.hh	/^    typedef typename Impl::CPUPol::TimeStruct TimeStruct;$/;"	t	class:InstructionQueue
TimeStruct	./cpu/o3/rename.hh	/^    typedef typename CPUPol::TimeStruct TimeStruct;$/;"	t	class:DefaultRename
Timer	./dev/arm/timer_cpulocal.cc	/^CpuLocalTimer::Timer::Timer()$/;"	f	class:CpuLocalTimer::Timer
Timer	./dev/arm/timer_cpulocal.hh	/^    class Timer : public Serializable$/;"	c	class:CpuLocalTimer
Timer	./dev/arm/timer_sp804.cc	/^Sp804::Timer::Timer(std::string __name, Sp804 *_parent, int int_num, Tick _clock)$/;"	f	class:Sp804::Timer
Timer	./dev/arm/timer_sp804.hh	/^    class Timer : public Serializable$/;"	c	class:Sp804
TimerControlReg	./dev/arm/timer_cpulocal.hh	/^            TimerControlReg 	   = 0x08,$/;"	e	enum:CpuLocalTimer::Timer::__anon22
TimerCounterReg	./dev/arm/timer_cpulocal.hh	/^            TimerCounterReg 	   = 0x04,$/;"	e	enum:CpuLocalTimer::Timer::__anon22
TimerIntStatusReg	./dev/arm/timer_cpulocal.hh	/^            TimerIntStatusReg      = 0x0C,$/;"	e	enum:CpuLocalTimer::Timer::__anon22
TimerLoadReg	./dev/arm/timer_cpulocal.hh	/^            TimerLoadReg    	   = 0x00,$/;"	e	enum:CpuLocalTimer::Timer::__anon22
TimerTable	./mem/ruby/structures/TimerTable.cc	/^TimerTable::TimerTable()$/;"	f	class:TimerTable
TimerTable	./mem/ruby/structures/TimerTable.hh	/^class TimerTable$/;"	c
TimingCPUPort	./cpu/simple/timing.hh	/^        TimingCPUPort(const std::string& _name, TimingSimpleCPU* _cpu)$/;"	f	class:TimingSimpleCPU::TimingCPUPort
TimingCPUPort	./cpu/simple/timing.hh	/^    class TimingCPUPort : public MasterPort$/;"	c	class:TimingSimpleCPU
TimingExpr	./cpu/TimingExpr.py	/^class TimingExpr(SimObject):$/;"	c
TimingExpr	./cpu/timing_expr.hh	/^    TimingExpr(const TimingExprParams *params) :$/;"	f	class:TimingExpr
TimingExpr	./cpu/timing_expr.hh	/^class TimingExpr : public SimObject$/;"	c
TimingExpr0	./cpu/TimingExpr.py	/^class TimingExpr0(TimingExprLiteral):$/;"	c
TimingExprBin	./cpu/TimingExpr.py	/^class TimingExprBin(TimingExpr):$/;"	c
TimingExprBin	./cpu/timing_expr.hh	/^    TimingExprBin(const TimingExprBinParams *params) :$/;"	f	class:TimingExprBin
TimingExprBin	./cpu/timing_expr.hh	/^class TimingExprBin : public TimingExpr$/;"	c
TimingExprEvalContext	./cpu/timing_expr.cc	/^TimingExprEvalContext::TimingExprEvalContext(const StaticInstPtr &inst_,$/;"	f	class:TimingExprEvalContext
TimingExprEvalContext	./cpu/timing_expr.hh	/^class TimingExprEvalContext$/;"	c
TimingExprIf	./cpu/TimingExpr.py	/^class TimingExprIf(TimingExpr):$/;"	c
TimingExprIf	./cpu/timing_expr.hh	/^    TimingExprIf(const TimingExprIfParams *params) :$/;"	f	class:TimingExprIf
TimingExprIf	./cpu/timing_expr.hh	/^class TimingExprIf : public TimingExpr$/;"	c
TimingExprLet	./cpu/TimingExpr.py	/^class TimingExprLet(TimingExpr):$/;"	c
TimingExprLet	./cpu/timing_expr.hh	/^    TimingExprLet(const TimingExprLetParams *params) :$/;"	f	class:TimingExprLet
TimingExprLet	./cpu/timing_expr.hh	/^class TimingExprLet : public TimingExpr$/;"	c
TimingExprLiteral	./cpu/TimingExpr.py	/^class TimingExprLiteral(TimingExpr):$/;"	c
TimingExprLiteral	./cpu/timing_expr.hh	/^    TimingExprLiteral(const TimingExprLiteralParams *params) :$/;"	f	class:TimingExprLiteral
TimingExprLiteral	./cpu/timing_expr.hh	/^class TimingExprLiteral : public TimingExpr$/;"	c
TimingExprOp	./cpu/TimingExpr.py	/^class TimingExprOp(Enum):$/;"	c
TimingExprReadIntReg	./cpu/TimingExpr.py	/^class TimingExprReadIntReg(TimingExpr):$/;"	c
TimingExprReadIntReg	./cpu/timing_expr.hh	/^    TimingExprReadIntReg(const TimingExprReadIntRegParams *params) :$/;"	f	class:TimingExprReadIntReg
TimingExprReadIntReg	./cpu/timing_expr.hh	/^class TimingExprReadIntReg : public TimingExpr$/;"	c
TimingExprRef	./cpu/TimingExpr.py	/^class TimingExprRef(TimingExpr):$/;"	c
TimingExprRef	./cpu/timing_expr.hh	/^    TimingExprRef(const TimingExprRefParams *params) :$/;"	f	class:TimingExprRef
TimingExprRef	./cpu/timing_expr.hh	/^class TimingExprRef : public TimingExpr$/;"	c
TimingExprSrcReg	./cpu/TimingExpr.py	/^class TimingExprSrcReg(TimingExpr):$/;"	c
TimingExprSrcReg	./cpu/timing_expr.hh	/^    TimingExprSrcReg(const TimingExprSrcRegParams *params) :$/;"	f	class:TimingExprSrcReg
TimingExprSrcReg	./cpu/timing_expr.hh	/^class TimingExprSrcReg : public TimingExpr$/;"	c
TimingExprUn	./cpu/TimingExpr.py	/^class TimingExprUn(TimingExpr):$/;"	c
TimingExprUn	./cpu/timing_expr.hh	/^    TimingExprUn(const TimingExprUnParams *params) :$/;"	f	class:TimingExprUn
TimingExprUn	./cpu/timing_expr.hh	/^class TimingExprUn : public TimingExpr$/;"	c
TimingSimpleCPU	./cpu/simple/TimingSimpleCPU.py	/^class TimingSimpleCPU(BaseSimpleCPU):$/;"	c
TimingSimpleCPU	./cpu/simple/timing.cc	/^TimingSimpleCPU::TimingSimpleCPU(TimingSimpleCPUParams *p)$/;"	f	class:TimingSimpleCPU
TimingSimpleCPU	./cpu/simple/timing.hh	/^class TimingSimpleCPU : public BaseSimpleCPU$/;"	c
TlbEntry	./arch/alpha/pagetable.hh	/^    TlbEntry()$/;"	f	struct:AlphaISA::TlbEntry
TlbEntry	./arch/alpha/pagetable.hh	/^    TlbEntry(Addr _asn, Addr _vaddr, Addr _paddr,$/;"	f	struct:AlphaISA::TlbEntry
TlbEntry	./arch/alpha/pagetable.hh	/^struct TlbEntry : public Serializable$/;"	s	namespace:AlphaISA
TlbEntry	./arch/arm/pagetable.hh	/^    TlbEntry() :$/;"	f	struct:ArmISA::TlbEntry
TlbEntry	./arch/arm/pagetable.hh	/^    TlbEntry(Addr _asn, Addr _vaddr, Addr _paddr,$/;"	f	struct:ArmISA::TlbEntry
TlbEntry	./arch/arm/pagetable.hh	/^struct TlbEntry : public Serializable$/;"	s	namespace:ArmISA
TlbEntry	./arch/mips/pagetable.hh	/^    TlbEntry() {}$/;"	f	struct:MipsISA::TlbEntry
TlbEntry	./arch/mips/pagetable.hh	/^    TlbEntry(Addr asn, Addr vaddr, Addr paddr,$/;"	f	struct:MipsISA::TlbEntry
TlbEntry	./arch/mips/pagetable.hh	/^struct TlbEntry$/;"	s	namespace:MipsISA
TlbEntry	./arch/power/tlb.hh	/^    TlbEntry()$/;"	f	struct:PowerISA::TlbEntry
TlbEntry	./arch/power/tlb.hh	/^    TlbEntry(Addr asn, Addr vaddr, Addr paddr,$/;"	f	struct:PowerISA::TlbEntry
TlbEntry	./arch/power/tlb.hh	/^struct TlbEntry$/;"	s	namespace:PowerISA
TlbEntry	./arch/sparc/pagetable.hh	/^    TlbEntry()$/;"	f	struct:SparcISA::TlbEntry
TlbEntry	./arch/sparc/pagetable.hh	/^    TlbEntry(Addr asn, Addr vaddr, Addr paddr,$/;"	f	struct:SparcISA::TlbEntry
TlbEntry	./arch/sparc/pagetable.hh	/^struct TlbEntry$/;"	s	namespace:SparcISA
TlbEntry	./arch/x86/pagetable.cc	/^TlbEntry::TlbEntry()$/;"	f	class:X86ISA::TlbEntry
TlbEntry	./arch/x86/pagetable.cc	/^TlbEntry::TlbEntry(Addr asn, Addr _vaddr, Addr _paddr,$/;"	f	class:X86ISA::TlbEntry
TlbEntry	./arch/x86/pagetable.hh	/^    struct TlbEntry : public Serializable$/;"	s	namespace:X86ISA
TlbEntryTrie	./arch/x86/pagetable.hh	/^typedef Trie<Addr, X86ISA::TlbEntry> TlbEntryTrie;$/;"	t
TlbFault	./arch/mips/faults.hh	/^    TlbFault(Addr _asid, Addr _vaddr, Addr _vpn, bool _store) :$/;"	f	class:MipsISA::TlbFault
TlbFault	./arch/mips/faults.hh	/^class TlbFault : public AddressFault<T>$/;"	c	namespace:MipsISA
TlbInvalidFault	./arch/mips/faults.hh	/^    TlbInvalidFault(Addr asid, Addr vaddr, Addr vpn, bool store) :$/;"	f	class:MipsISA::TlbInvalidFault
TlbInvalidFault	./arch/mips/faults.hh	/^class TlbInvalidFault : public TlbFault<TlbInvalidFault>$/;"	c	namespace:MipsISA
TlbMap	./arch/sparc/tlb_map.hh	/^class TlbMap$/;"	c	namespace:SparcISA
TlbModifiedFault	./arch/mips/faults.hh	/^    TlbModifiedFault(Addr asid, Addr vaddr, Addr vpn) :$/;"	f	class:MipsISA::TlbModifiedFault
TlbModifiedFault	./arch/mips/faults.hh	/^class TlbModifiedFault : public TlbFault<TlbModifiedFault>$/;"	c	namespace:MipsISA
TlbRange	./arch/sparc/pagetable.hh	/^struct TlbRange$/;"	s	namespace:SparcISA
TlbRefillFault	./arch/mips/faults.hh	/^    TlbRefillFault(Addr asid, Addr vaddr, Addr vpn, bool store) :$/;"	f	class:MipsISA::TlbRefillFault
TlbRefillFault	./arch/mips/faults.hh	/^class TlbRefillFault : public TlbFault<TlbRefillFault>$/;"	c	namespace:MipsISA
Topology	./mem/ruby/network/Topology.cc	/^Topology::Topology(uint32_t num_routers,$/;"	f	class:Topology
Topology	./mem/ruby/network/Topology.hh	/^class Topology$/;"	c
TotalGlobals	./arch/sparc/isa.hh	/^    static const int TotalGlobals = (MaxGL + 1) * NumGlobalRegs;$/;"	m	class:SparcISA::ISA
TotalInstIntRegs	./arch/sparc/isa.hh	/^        TotalInstIntRegs = PreviousWindowOffset + NumWindowedRegs$/;"	e	enum:SparcISA::ISA::InstIntRegOffsets
TotalNumRegs	./arch/alpha/registers.hh	/^const int TotalNumRegs =$/;"	m	namespace:AlphaISA
TotalNumRegs	./arch/arm/registers.hh	/^const int TotalNumRegs = NumIntRegs + NumFloatRegs + NumMiscRegs;$/;"	m	namespace:ArmISA
TotalNumRegs	./arch/mips/registers.hh	/^const int TotalNumRegs = NumIntRegs + NumFloatRegs + NumMiscRegs;$/;"	m	namespace:MipsISA
TotalNumRegs	./arch/sparc/registers.hh	/^const int TotalNumRegs = NumIntRegs + NumFloatRegs + NumMiscRegs;$/;"	m	namespace:SparcISA
TotalWindowed	./arch/sparc/isa.hh	/^    static const int TotalWindowed = NWindows * RegsPerWindow;$/;"	m	class:SparcISA::ISA
TouchKitId	./dev/ps2.hh	/^    TouchKitId      = 0x0a,$/;"	e	enum:Ps2::__anon4
TournamentBP	./cpu/pred/BranchPredictor.py	/^class TournamentBP(BranchPredictor):$/;"	c
TournamentBP	./cpu/pred/tournament.cc	/^TournamentBP::TournamentBP(const TournamentBPParams *params)$/;"	f	class:TournamentBP
TournamentBP	./cpu/pred/tournament.hh	/^class TournamentBP : public BPredUnit$/;"	c
TpReadId	./dev/ps2.hh	/^    TpReadId        = 0xe1,$/;"	e	enum:Ps2::__anon4
Trace	./arch/arm/nativetrace.cc	/^namespace Trace {$/;"	n	file:
Trace	./arch/arm/nativetrace.hh	/^namespace Trace {$/;"	n
Trace	./arch/sparc/nativetrace.cc	/^namespace Trace {$/;"	n	file:
Trace	./arch/sparc/nativetrace.hh	/^namespace Trace {$/;"	n
Trace	./arch/x86/nativetrace.cc	/^namespace Trace {$/;"	n	file:
Trace	./arch/x86/nativetrace.hh	/^namespace Trace {$/;"	n
Trace	./base/trace.cc	/^namespace Trace$/;"	n	file:
Trace	./base/trace.hh	/^namespace Trace {$/;"	n
Trace	./cpu/exetrace.cc	/^namespace Trace {$/;"	n	file:
Trace	./cpu/exetrace.hh	/^namespace Trace {$/;"	n
Trace	./cpu/inst_pb_trace.cc	/^namespace Trace {$/;"	n	file:
Trace	./cpu/inst_pb_trace.hh	/^namespace Trace {$/;"	n
Trace	./cpu/inteltrace.cc	/^namespace Trace {$/;"	n	file:
Trace	./cpu/inteltrace.hh	/^namespace Trace {$/;"	n
Trace	./cpu/nativetrace.cc	/^namespace Trace {$/;"	n	file:
Trace	./cpu/nativetrace.hh	/^namespace Trace {$/;"	n
Trace	./cpu/simple/base.hh	/^namespace Trace {$/;"	n
Trace	./cpu/static_inst.hh	/^namespace Trace {$/;"	n
Trace	./sim/insttracer.hh	/^namespace Trace {$/;"	n
TraceCPU	./cpu/trace/TraceCPU.py	/^class TraceCPU(BaseCPU):$/;"	c
TraceCPU	./cpu/trace/trace_cpu.cc	/^TraceCPU::TraceCPU(TraceCPUParams *params)$/;"	f	class:TraceCPU
TraceCPU	./cpu/trace/trace_cpu.hh	/^class TraceCPU : public BaseCPU$/;"	c
TraceElement	./cpu/testers/traffic_gen/generators.hh	/^    struct TraceElement {$/;"	s	class:TraceGen
TraceElement	./cpu/trace/trace_cpu.hh	/^        struct TraceElement {$/;"	s	class:TraceCPU::FixedRetryGen
TraceGen	./cpu/testers/traffic_gen/generators.hh	/^    TraceGen(const std::string& _name, MasterID master_id, Tick _duration,$/;"	f	class:TraceGen
TraceGen	./cpu/testers/traffic_gen/generators.hh	/^class TraceGen : public BaseGen$/;"	c
TraceInfo	./cpu/o3/probe/elastic_trace.hh	/^        TraceInfo()$/;"	f	struct:ElasticTrace::TraceInfo
TraceInfo	./cpu/o3/probe/elastic_trace.hh	/^    struct TraceInfo$/;"	s	class:ElasticTrace
TraceRecord	./mem/ruby/system/CacheRecorder.hh	/^class TraceRecord {$/;"	c
TrafficGen	./cpu/testers/traffic_gen/TrafficGen.py	/^class TrafficGen(MemObject):$/;"	c
TrafficGen	./cpu/testers/traffic_gen/traffic_gen.cc	/^TrafficGen::TrafficGen(const TrafficGenParams* p)$/;"	f	class:TrafficGen
TrafficGen	./cpu/testers/traffic_gen/traffic_gen.hh	/^class TrafficGen : public MemObject$/;"	c
TrafficGenPort	./cpu/testers/traffic_gen/traffic_gen.hh	/^        TrafficGenPort(const std::string& name, TrafficGen& traffic_gen)$/;"	f	class:TrafficGen::TrafficGenPort
TrafficGenPort	./cpu/testers/traffic_gen/traffic_gen.hh	/^    class TrafficGenPort : public MasterPort$/;"	c	class:TrafficGen
TranMethod	./arch/arm/faults.hh	/^    enum TranMethod$/;"	g	class:ArmISA::ArmFault
Transaction	./mem/mem_checker.hh	/^        Transaction(Serial _serial,$/;"	f	class:MemChecker::Transaction
Transaction	./mem/mem_checker.hh	/^    class Transaction$/;"	c	class:MemChecker
TransactionList	./mem/mem_checker.hh	/^    typedef std::list<Transaction> TransactionList;$/;"	t	class:MemChecker
Transfer	./dev/storage/ide_disk.hh	/^    Transfer,$/;"	e	enum:Events
Transfer_Data_Dma	./dev/storage/ide_disk.hh	/^    Transfer_Data_Dma,$/;"	e	enum:DevState
Transfer_Data_In	./dev/storage/ide_disk.hh	/^    Transfer_Data_In,$/;"	e	enum:DevState
Transfer_Data_Out	./dev/storage/ide_disk.hh	/^    Transfer_Data_Out,$/;"	e	enum:DevState
Transition	./cpu/testers/traffic_gen/traffic_gen.hh	/^    struct Transition {$/;"	s	class:TrafficGen
Transition	./mem/slicc/symbols/Transition.py	/^class Transition(Symbol):$/;"	c
TransitionDeclAST	./mem/slicc/ast/TransitionDeclAST.py	/^class TransitionDeclAST(DeclAST):$/;"	c
Translated	./cpu/minor/fetch1.hh	/^            Translated, \/* Translation complete *\/$/;"	e	enum:Minor::Fetch1::FetchRequest::FetchRequestState
Translated	./cpu/minor/lsq.hh	/^            Translated, \/* Finished address translation *\/$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
Translation	./arch/generic/tlb.hh	/^    class Translation$/;"	c	class:BaseTLB
TranslationCompleted	./cpu/base_dyn_inst.hh	/^        TranslationCompleted,$/;"	e	enum:BaseDynInst::Flags
TranslationEvent	./cpu/minor/lsq.hh	/^            TranslationEvent(SplitDataRequest &owner_)$/;"	f	class:Minor::LSQ::SplitDataRequest::TranslationEvent
TranslationEvent	./cpu/minor/lsq.hh	/^        class TranslationEvent : public Event$/;"	c	class:Minor::LSQ::SplitDataRequest
TranslationLL	./arch/arm/faults.hh	/^        TranslationLL = SynchPtyErrOnTranslTableWalkLL + 4,$/;"	e	enum:ArmISA::ArmFault::FaultSource
TranslationStarted	./cpu/base_dyn_inst.hh	/^        TranslationStarted,$/;"	e	enum:BaseDynInst::Flags
TransmitConfigurationRegister	./dev/net/ns_gige_reg.h	/^enum TransmitConfigurationRegister {$/;"	g
TrapEvent	./base/remote_gdb.hh	/^        TrapEvent(BaseRemoteGDB *g) : gdb(g)$/;"	f	class:BaseRemoteGDB::TrapEvent
TrapEvent	./base/remote_gdb.hh	/^    class TrapEvent : public Event$/;"	c	class:BaseRemoteGDB
TrapEvent	./cpu/o3/commit.hh	/^    class TrapEvent : public Event {$/;"	c	class:DefaultCommit
TrapEvent	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::TrapEvent::TrapEvent(DefaultCommit<Impl> *_commit,$/;"	f	class:DefaultCommit::TrapEvent
TrapFault	./arch/mips/faults.hh	/^class TrapFault : public MipsFault<TrapFault> {};$/;"	c	namespace:MipsISA
TrapInstruction	./arch/sparc/faults.hh	/^    TrapInstruction(uint32_t n) : EnumeratedFault<TrapInstruction>(n)$/;"	f	class:SparcISA::TrapInstruction
TrapInstruction	./arch/sparc/faults.hh	/^class TrapInstruction : public EnumeratedFault<TrapInstruction>$/;"	c	namespace:SparcISA
TrapLevelZero	./arch/sparc/faults.hh	/^class TrapLevelZero : public SparcFault<TrapLevelZero> {};$/;"	c	namespace:SparcISA
TrapPending	./cpu/o3/commit.hh	/^        TrapPending,$/;"	e	enum:DefaultCommit::ThreadStatus
TrapPending	./cpu/o3/fetch.hh	/^        TrapPending,$/;"	e	enum:DefaultFetch::ThreadStatus
TrapType	./arch/sparc/faults.hh	/^typedef uint32_t TrapType;$/;"	t	namespace:SparcISA
TreeType	./mem/stack_dist_calc.hh	/^    typedef std::vector<IndexNodeMap> TreeType;$/;"	t	class:StackDistCalc
Trie	./base/trie.hh	/^    Trie() : head(0, 0, NULL)$/;"	f	class:Trie
Trie	./base/trie.hh	/^class Trie$/;"	c
TriggerIntOffset	./arch/x86/intmessage.hh	/^    static const Addr TriggerIntOffset = 0;$/;"	m	namespace:X86ISA
Tru64	./base/loader/object_file.hh	/^        Tru64,$/;"	e	enum:ObjectFile::OpSys
Tru64	./kern/tru64/tru64.hh	/^class Tru64 : public OperatingSystem$/;"	c
Tru64AlphaSystem	./arch/alpha/AlphaSystem.py	/^class Tru64AlphaSystem(AlphaSystem):$/;"	c
Tru64AlphaSystem	./arch/alpha/tru64/system.cc	/^Tru64AlphaSystem::Tru64AlphaSystem(Tru64AlphaSystem::Params *p)$/;"	f	class:Tru64AlphaSystem
Tru64AlphaSystem	./arch/alpha/tru64/system.hh	/^class Tru64AlphaSystem : public AlphaSystem$/;"	c
Tru64_F64	./kern/tru64/tru64.hh	/^class Tru64_F64 : public Tru64$/;"	c
Tru64_PreF64	./kern/tru64/tru64.hh	/^class Tru64_PreF64 : public Tru64$/;"	c
True	./arch/x86/insts/microop.hh	/^            True,$/;"	e	enum:X86ISA::ConditionTests::CondTest
TruncPage	./arch/alpha/utility.hh	/^TruncPage(Addr addr)$/;"	f	namespace:AlphaISA
TruncPage	./arch/mips/utility.hh	/^TruncPage(Addr addr)$/;"	f	namespace:MipsISA
TsbPageSize	./arch/sparc/tlb.hh	/^    enum TsbPageSize {$/;"	g	class:SparcISA::TLB
Tsunami	./dev/alpha/Tsunami.py	/^class Tsunami(Platform):$/;"	c
Tsunami	./dev/alpha/tsunami.cc	/^Tsunami::Tsunami(const Params *p)$/;"	f	class:Tsunami
Tsunami	./dev/alpha/tsunami.hh	/^class Tsunami : public Platform$/;"	c
TsunamiCChip	./dev/alpha/Tsunami.py	/^class TsunamiCChip(BasicPioDevice):$/;"	c
TsunamiCChip	./dev/alpha/tsunami_cchip.cc	/^TsunamiCChip::TsunamiCChip(const Params *p)$/;"	f	class:TsunamiCChip
TsunamiCChip	./dev/alpha/tsunami_cchip.hh	/^class TsunamiCChip : public BasicPioDevice$/;"	c
TsunamiIO	./dev/alpha/Tsunami.py	/^class TsunamiIO(BasicPioDevice):$/;"	c
TsunamiIO	./dev/alpha/tsunami_io.cc	/^TsunamiIO::TsunamiIO(const Params *p)$/;"	f	class:TsunamiIO
TsunamiIO	./dev/alpha/tsunami_io.hh	/^class TsunamiIO : public BasicPioDevice$/;"	c
TsunamiPChip	./dev/alpha/Tsunami.py	/^class TsunamiPChip(GenericPciHost):$/;"	c
TsunamiPChip	./dev/alpha/tsunami_pchip.cc	/^TsunamiPChip::TsunamiPChip(const Params *p)$/;"	f	class:TsunamiPChip
TsunamiPChip	./dev/alpha/tsunami_pchip.hh	/^class TsunamiPChip : public GenericPciHost$/;"	c
TteRead	./arch/sparc/tlb.cc	/^TLB::TteRead(int entry)$/;"	f	class:SparcISA::TLB
TteTag	./arch/sparc/pagetable.hh	/^    TteTag() : entry(0), populated(false) {}$/;"	f	class:SparcISA::TteTag
TteTag	./arch/sparc/pagetable.hh	/^    TteTag(uint64_t e) : entry(e), populated(true) {}$/;"	f	class:SparcISA::TteTag
TteTag	./arch/sparc/pagetable.hh	/^class TteTag$/;"	c	namespace:SparcISA
Twin32_t	./base/bigint.hh	/^typedef m5_twin32_t Twin32_t;$/;"	t
Twin64_t	./base/bigint.hh	/^typedef m5_twin64_t Twin64_t;$/;"	t
TwoByteOpcode	./arch/x86/types.hh	/^        TwoByteOpcode,$/;"	e	enum:X86ISA::OpcodeType
TwoByteOpcodeState	./arch/x86/decoder.hh	/^        TwoByteOpcodeState,$/;"	e	enum:X86ISA::Decoder::State
TwoByteVexState	./arch/x86/decoder.hh	/^        TwoByteVexState,$/;"	e	enum:X86ISA::Decoder::State
TwoPhase	./dev/intel_8254_timer.hh	/^        TwoPhase$/;"	e	enum:Intel8254Timer::ReadWriteVal
TxData	./dev/net/sinic.hh	/^        uint64_t TxData;       \/\/ 0x58$/;"	m	struct:Sinic::Device::__anon11
TxData	./dev/net/sinic.hh	/^        uint64_t TxData;$/;"	m	struct:Sinic::Device::VirtualReg
TxDesc	./dev/net/i8254xGBe_defs.hh	/^struct TxDesc {$/;"	s	namespace:iGbReg
TxDescCache	./dev/net/i8254xGBe.cc	/^IGbE::TxDescCache::TxDescCache(IGbE *i, const std::string n, int s)$/;"	f	class:IGbE::TxDescCache
TxDescCache	./dev/net/i8254xGBe.hh	/^    class TxDescCache  : public DescCache<iGbReg::TxDesc>$/;"	c	class:IGbE
TxDone	./dev/net/sinic.hh	/^        uint64_t TxDone;       \/\/ 0x60$/;"	m	struct:Sinic::Device::__anon11
TxDone	./dev/net/sinic.hh	/^        uint64_t TxDone;$/;"	m	struct:Sinic::Device::VirtualReg
TxEvent	./dev/net/ethertap.hh	/^        TxEvent(EtherTap *_tap) : tap(_tap) {}$/;"	f	class:EtherTap::TxEvent
TxEvent	./dev/net/ethertap.hh	/^    class TxEvent : public Event$/;"	c	class:EtherTap
TxEvent	./dev/net/ns_gige.hh	/^    typedef EventWrapper<NSGigE, &NSGigE::txEventTransmit> TxEvent;$/;"	t	class:NSGigE
TxEvent	./dev/net/sinic.hh	/^    typedef EventWrapper<Device, &Device::txEventTransmit> TxEvent;$/;"	t	class:Sinic::Device
TxFifoHigh	./dev/net/sinic.hh	/^        uint32_t TxFifoHigh;   \/\/ 0x3c$/;"	m	struct:Sinic::Device::__anon11
TxFifoLow	./dev/net/sinic.hh	/^        uint32_t TxFifoLow;    \/\/ 0x34$/;"	m	struct:Sinic::Device::__anon11
TxFifoSize	./dev/net/sinic.hh	/^        uint32_t TxFifoSize;   \/\/ 0x2c$/;"	m	struct:Sinic::Device::__anon11
TxKickEvent	./dev/net/ns_gige.hh	/^    typedef EventWrapper<NSGigE, &NSGigE::txKick> TxKickEvent;$/;"	t	class:NSGigE
TxKickEvent	./dev/net/sinic.hh	/^    typedef EventWrapper<Device, &Device::txKick> TxKickEvent;$/;"	t	class:Sinic::Device
TxLink	./dev/net/dist_etherlink.hh	/^        TxLink(const std::string &name, DistEtherLink *p,$/;"	f	class:DistEtherLink::TxLink
TxLink	./dev/net/dist_etherlink.hh	/^    class TxLink : public Link$/;"	c	class:DistEtherLink
TxMaxCopy	./dev/net/sinic.hh	/^        uint32_t TxMaxCopy;    \/\/ 0x14$/;"	m	struct:Sinic::Device::__anon11
TxQueueEvent	./dev/net/etherlink.hh	/^        typedef EventWrapper<Link, &Link::processTxQueue> TxQueueEvent;$/;"	t	class:EtherLink::Link
TxState	./dev/net/ns_gige.hh	/^    enum TxState$/;"	g	class:NSGigE
TxState	./dev/net/sinic.hh	/^    enum TxState {$/;"	g	class:Sinic::Device
TxStateStrings	./dev/net/sinic.cc	/^const char *TxStateStrings[] =$/;"	m	namespace:Sinic	file:
TxWait	./dev/net/sinic.hh	/^        uint64_t TxWait;       \/\/ 0x68$/;"	m	struct:Sinic::Device::__anon11
TxdOp	./dev/net/i8254xGBe_defs.hh	/^namespace TxdOp {$/;"	n	namespace:iGbReg
Type	./arch/x86/bios/smbios.hh	/^    const static uint8_t Type = 0;$/;"	m	class:X86ISA::SMBios::BiosInformation
Type	./base/flags.hh	/^    typedef T Type;$/;"	t	class:Flags
Type	./dev/sparc/iob.hh	/^    enum Type {$/;"	g	class:Iob
Type	./mem/slicc/symbols/Type.py	/^class Type(Symbol):$/;"	c
Type	./sim/vptr.hh	/^    typedef T Type;$/;"	t	class:VPtr
TypeAST	./mem/slicc/ast/TypeAST.py	/^class TypeAST(AST):$/;"	c
TypeDeclAST	./mem/slicc/ast/TypeDeclAST.py	/^class TypeDeclAST(DeclAST):$/;"	c
TypeFieldAST	./mem/slicc/ast/TypeFieldAST.py	/^class TypeFieldAST(AST):$/;"	c
TypeFieldEnumAST	./mem/slicc/ast/TypeFieldEnumAST.py	/^class TypeFieldEnumAST(TypeFieldAST):$/;"	c
TypeFieldStateAST	./mem/slicc/ast/TypeFieldStateAST.py	/^class TypeFieldStateAST(TypeFieldAST):$/;"	c
TypedBufferArg	./sim/syscall_emul_buf.hh	/^    TypedBufferArg(Addr _addr, int _size = sizeof(T))$/;"	f	class:TypedBufferArg
TypedBufferArg	./sim/syscall_emul_buf.hh	/^class TypedBufferArg : public BaseBufferArg$/;"	c
TypematicInfo	./dev/x86/i8042.hh	/^        TypematicInfo = 0xF3,$/;"	e	enum:X86ISA::PS2Keyboard::Command
U	./arch/sparc/faults.hh	/^        U, User = U,$/;"	e	enum:SparcISA::SparcFaultBase::PrivilegeLevel
UART8250_BASE	./dev/mips/access.h	41;"	d
UART8250_END	./dev/mips/access.h	42;"	d
UART_BEINTR	./dev/arm/pl011.hh	/^    static const uint16_t UART_BEINTR = 1 << 9;$/;"	m	class:Pl011
UART_CDCINTR	./dev/arm/pl011.hh	/^    static const uint16_t UART_CDCINTR = 1 << 2;$/;"	m	class:Pl011
UART_CR	./dev/arm/pl011.hh	/^    static const int UART_CR   = 0x030;$/;"	m	class:Pl011
UART_CTSINTR	./dev/arm/pl011.hh	/^    static const uint16_t UART_CTSINTR = 1 << 1;$/;"	m	class:Pl011
UART_DR	./dev/arm/pl011.hh	/^    static const int UART_DR = 0x000;$/;"	m	class:Pl011
UART_DSRINTR	./dev/arm/pl011.hh	/^    static const uint16_t UART_DSRINTR = 1 << 3;$/;"	m	class:Pl011
UART_FBRD	./dev/arm/pl011.hh	/^    static const int UART_FBRD = 0x028;$/;"	m	class:Pl011
UART_FEINTR	./dev/arm/pl011.hh	/^    static const uint16_t UART_FEINTR = 1 << 7;$/;"	m	class:Pl011
UART_FR	./dev/arm/pl011.hh	/^    static const int UART_FR = 0x018;$/;"	m	class:Pl011
UART_FR_CTS	./dev/arm/pl011.hh	/^    static const int UART_FR_CTS  = 0x001;$/;"	m	class:Pl011
UART_FR_RXFE	./dev/arm/pl011.hh	/^    static const int UART_FR_RXFE = 0x010;$/;"	m	class:Pl011
UART_FR_TXFE	./dev/arm/pl011.hh	/^    static const int UART_FR_TXFE = 0x080;$/;"	m	class:Pl011
UART_IBRD	./dev/arm/pl011.hh	/^    static const int UART_IBRD = 0x024;$/;"	m	class:Pl011
UART_ICR	./dev/arm/pl011.hh	/^    static const int UART_ICR  = 0x044;$/;"	m	class:Pl011
UART_IER_RDI	./dev/mips/maltareg.h	162;"	d
UART_IER_RDI	./dev/uart8250.hh	/^const uint8_t UART_IER_RDI  = 0x01;$/;"	v
UART_IER_RLSI	./dev/mips/maltareg.h	164;"	d
UART_IER_RLSI	./dev/uart8250.hh	/^const uint8_t UART_IER_RLSI = 0x04;$/;"	v
UART_IER_THRI	./dev/mips/maltareg.h	163;"	d
UART_IER_THRI	./dev/uart8250.hh	/^const uint8_t UART_IER_THRI = 0x02;$/;"	v
UART_IFLS	./dev/arm/pl011.hh	/^    static const int UART_IFLS = 0x034;$/;"	m	class:Pl011
UART_IMSC	./dev/arm/pl011.hh	/^    static const int UART_IMSC = 0x038;$/;"	m	class:Pl011
UART_LCRH	./dev/arm/pl011.hh	/^    static const int UART_LCRH = 0x02C;$/;"	m	class:Pl011
UART_LSR_DR	./dev/mips/maltareg.h	169;"	d
UART_LSR_DR	./dev/uart8250.hh	/^const uint8_t UART_LSR_DR   = 0x01;$/;"	v
UART_LSR_TEMT	./dev/mips/maltareg.h	167;"	d
UART_LSR_TEMT	./dev/uart8250.hh	/^const uint8_t UART_LSR_TEMT = 0x40;$/;"	v
UART_LSR_THRE	./dev/mips/maltareg.h	168;"	d
UART_LSR_THRE	./dev/uart8250.hh	/^const uint8_t UART_LSR_THRE = 0x20;$/;"	v
UART_MCR_LOOP	./dev/mips/maltareg.h	171;"	d
UART_MCR_LOOP	./dev/uart8250.hh	/^const uint8_t UART_MCR_LOOP = 0x10;$/;"	v
UART_MIS	./dev/arm/pl011.hh	/^    static const int UART_MIS  = 0x040;$/;"	m	class:Pl011
UART_OEINTR	./dev/arm/pl011.hh	/^    static const uint16_t UART_OEINTR = 1 << 10;$/;"	m	class:Pl011
UART_PEINTR	./dev/arm/pl011.hh	/^    static const uint16_t UART_PEINTR = 1 << 8;$/;"	m	class:Pl011
UART_RIINTR	./dev/arm/pl011.hh	/^    static const uint16_t UART_RIINTR = 1 << 0;$/;"	m	class:Pl011
UART_RIS	./dev/arm/pl011.hh	/^    static const int UART_RIS  = 0x03C;$/;"	m	class:Pl011
UART_RTINTR	./dev/arm/pl011.hh	/^    static const uint16_t UART_RTINTR = 1 << 6;$/;"	m	class:Pl011
UART_RXINTR	./dev/arm/pl011.hh	/^    static const uint16_t UART_RXINTR = 1 << 4;$/;"	m	class:Pl011
UART_TXINTR	./dev/arm/pl011.hh	/^    static const uint16_t UART_TXINTR = 1 << 5;$/;"	m	class:Pl011
UDMAControl	./dev/storage/ide_ctrl.cc	/^    UDMAControl = 0x48,$/;"	e	enum:ConfRegOffset	file:
UDMATiming	./dev/storage/ide_ctrl.cc	/^    UDMATiming = 0x4A,$/;"	e	enum:ConfRegOffset	file:
UDelayEvent	./kern/freebsd/events.hh	/^    UDelayEvent(PCEventQueue *q, const std::string &desc, Addr addr,$/;"	f	class:FreeBSD::UDelayEvent
UDelayEvent	./kern/freebsd/events.hh	/^class UDelayEvent : public SkipFuncEvent$/;"	c	namespace:FreeBSD
UDelayEvent	./kern/linux/events.hh	/^    UDelayEvent(PCEventQueue *q, const std::string &desc, Addr addr,$/;"	f	class:Linux::UDelayEvent
UDelayEvent	./kern/linux/events.hh	/^class UDelayEvent : public SkipFuncEvent$/;"	c	namespace:Linux
UEBit	./arch/x86/regs/misc.hh	/^        UEBit = 1 << 4,$/;"	e	enum:X86ISA::X87StatusBit
UFSDevice	./dev/arm/ufs_device.hh	/^    std::vector<UFSSCSIDevice*> UFSDevice;$/;"	m	class:UFSHostDevice
UFSHCDSGEntry	./dev/arm/ufs_device.hh	/^    struct UFSHCDSGEntry {$/;"	s	class:UFSHostDevice
UFSHCIMem	./dev/arm/ufs_device.hh	/^    HCIMem UFSHCIMem;$/;"	m	class:UFSHostDevice
UFSHCIRegisters	./dev/arm/ufs_device.hh	/^    enum UFSHCIRegisters {$/;"	g	class:UFSHostDevice
UFSHostDevice	./dev/arm/UFSHostDevice.py	/^class UFSHostDevice(DmaDevice):$/;"	c
UFSHostDevice	./dev/arm/ufs_device.cc	/^UFSHostDevice::UFSHostDevice(const UFSHostDeviceParams* p) :$/;"	f	class:UFSHostDevice
UFSHostDevice	./dev/arm/ufs_device.hh	/^class UFSHostDevice : public DmaDevice$/;"	c
UFSHostDeviceStats	./dev/arm/ufs_device.hh	/^    struct UFSHostDeviceStats {$/;"	s	class:UFSHostDevice
UFSSCSIDevice	./dev/arm/ufs_device.cc	/^UFSHostDevice::UFSSCSIDevice::UFSSCSIDevice(const UFSHostDeviceParams* p,$/;"	f	class:UFSHostDevice::UFSSCSIDevice
UFSSCSIDevice	./dev/arm/ufs_device.hh	/^    class UFSSCSIDevice: SimObject$/;"	c	class:UFSHostDevice
UFSSlots	./dev/arm/ufs_device.hh	/^    const uint8_t UFSSlots;$/;"	m	class:UFSHostDevice
UICCommandCOMPL	./dev/arm/ufs_device.hh	/^    static const unsigned int UICCommandCOMPL = 0x400;\/\/UFS_BIT(10)$/;"	m	class:UFSHostDevice
UICCommandReady	./dev/arm/ufs_device.hh	/^    static const unsigned int UICCommandReady = 0x08;\/\/UFS_BIT(3)$/;"	m	class:UFSHostDevice
UIE	./dev/arm/vgic.hh	/^    Bitfield<1> UIE;$/;"	m	class:VGic
UInt16	./python/m5/params.py	/^class UInt16(CheckedInt):   cxx_type = 'uint16_t'; size = 16; unsigned = True$/;"	c
UInt32	./python/m5/params.py	/^class UInt32(CheckedInt):   cxx_type = 'uint32_t'; size = 32; unsigned = True$/;"	c
UInt64	./python/m5/params.py	/^class UInt64(CheckedInt):   cxx_type = 'uint64_t'; size = 64; unsigned = True$/;"	c
UInt8	./python/m5/params.py	/^class UInt8(CheckedInt):    cxx_type =  'uint8_t'; size =  8; unsigned = True$/;"	c
ULL	./base/types.hh	50;"	d
UNSERIALIZE_ARRAY	./sim/serialize.hh	163;"	d
UNSERIALIZE_CONTAINER	./sim/serialize.hh	169;"	d
UNSERIALIZE_ENUM	./sim/serialize.hh	153;"	d
UNSERIALIZE_EVENT	./sim/serialize.hh	174;"	d
UNSERIALIZE_OBJ	./sim/serialize.hh	181;"	d
UNSERIALIZE_OBJPTR	./sim/serialize.hh	185;"	d
UNSERIALIZE_OPT_SCALAR	./sim/serialize.hh	148;"	d
UNSERIALIZE_SCALAR	./sim/serialize.hh	147;"	d
UNSIGNED	./arch/mips/dsp.hh	/^enum { UNSIGNED, SIGNED };$/;"	e	enum:MipsISA::__anon89
UPCState	./arch/generic/types.hh	/^    UPCState() : _upc(0), _nupc(0) {}$/;"	f	class:GenericISA::UPCState
UPCState	./arch/generic/types.hh	/^    UPCState(Addr val) : _upc(0), _nupc(0) { set(val); }$/;"	f	class:GenericISA::UPCState
UPCState	./arch/generic/types.hh	/^class UPCState : public SimplePCState<MachInst>$/;"	c	namespace:GenericISA
UPIUHeaderDataIndWord0	./dev/arm/ufs_device.hh	/^        static const unsigned int UPIUHeaderDataIndWord0 = 0x0000C022;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
UPIUHeaderDataIndWord1	./dev/arm/ufs_device.hh	/^        static const unsigned int UPIUHeaderDataIndWord1 = 0x00000000;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
UPIUHeaderDataIndWord2	./dev/arm/ufs_device.hh	/^        static const unsigned int UPIUHeaderDataIndWord2 = 0x40000000;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
UPIUMessage	./dev/arm/ufs_device.hh	/^    struct UPIUMessage {$/;"	s	class:UFSHostDevice
US_ASYNC_NOCANCEL	./kern/tru64/tru64.hh	309;"	d
US_CANCEL	./kern/tru64/tru64.hh	306;"	d
US_CANCEL_BITS	./kern/tru64/tru64.hh	310;"	d
US_CANCEL_MASK	./kern/tru64/tru64.hh	311;"	d
US_FP_OWNED	./kern/tru64/tru64.hh	303;"	d
US_NOCANCEL	./kern/tru64/tru64.hh	307;"	d
US_ONSTACK	./kern/tru64/tru64.hh	297;"	d
US_PROFILE	./kern/tru64/tru64.hh	298;"	d
US_SIGSTACK	./kern/tru64/tru64.hh	296;"	d
US_SYSCALL	./kern/tru64/tru64.hh	299;"	d
US_SYS_NOCANCEL	./kern/tru64/tru64.hh	308;"	d
US_TRAP	./kern/tru64/tru64.hh	300;"	d
US_YELLOW	./kern/tru64/tru64.hh	301;"	d
US_YZONE	./kern/tru64/tru64.hh	302;"	d
USegBase	./arch/alpha/isa_traits.hh	/^const Addr USegBase = ULL(0x0);$/;"	m	namespace:AlphaISA
USegBase	./arch/arm/isa_traits.hh	/^    const Addr USegBase = ULL(0x0);$/;"	m	namespace:ArmISA
USegBase	./arch/mips/isa_traits.hh	/^const Addr USegBase = ULL(0x0);$/;"	m	namespace:MipsISA
USegEnd	./arch/alpha/isa_traits.hh	/^const Addr USegEnd = ULL(0x000003ffffffffff);$/;"	m	namespace:AlphaISA
USegEnd	./arch/arm/isa_traits.hh	/^    const Addr USegEnd = ULL(0x7FFFFFFF);$/;"	m	namespace:ArmISA
USegEnd	./arch/mips/isa_traits.hh	/^const Addr USegEnd = ULL(0x7FFFFFFF);$/;"	m	namespace:MipsISA
UTPEvent	./dev/arm/ufs_device.hh	/^    EventWrapper<UFSHostDevice, &UFSHostDevice::finalUTP> UTPEvent;$/;"	m	class:UFSHostDevice
UTPTaskREQCOMPL	./dev/arm/ufs_device.hh	/^    static const unsigned int UTPTaskREQCOMPL = 0x200;\/\/UFS_BIT(9)$/;"	m	class:UFSHostDevice
UTPTransferCMDDesc	./dev/arm/ufs_device.hh	/^    struct UTPTransferCMDDesc {$/;"	s	class:UFSHostDevice
UTPTransferREQCOMPL	./dev/arm/ufs_device.hh	/^    static const unsigned int UTPTransferREQCOMPL = 0x01;\/\/UFS_BIT(0)$/;"	m	class:UFSHostDevice
UTPTransferReqDesc	./dev/arm/ufs_device.hh	/^    struct UTPTransferReqDesc {$/;"	s	class:UFSHostDevice
UTPUPIUHeader	./dev/arm/ufs_device.hh	/^    struct UTPUPIUHeader {$/;"	s	class:UFSHostDevice
UTPUPIURSP	./dev/arm/ufs_device.hh	/^    struct UTPUPIURSP {$/;"	s	class:UFSHostDevice
UTPUPIUTaskReq	./dev/arm/ufs_device.hh	/^    struct UTPUPIUTaskReq {$/;"	s	class:UFSHostDevice
UXTB	./arch/arm/types.hh	/^        UXTB = 0,$/;"	e	enum:ArmISA::ArmExtendType
UXTH	./arch/arm/types.hh	/^        UXTH = 1,$/;"	e	enum:ArmISA::ArmExtendType
UXTW	./arch/arm/types.hh	/^        UXTW = 2,$/;"	e	enum:ArmISA::ArmExtendType
UXTX	./arch/arm/types.hh	/^        UXTX = 3,$/;"	e	enum:ArmISA::ArmExtendType
Uart	./dev/Uart.py	/^class Uart(BasicPioDevice):$/;"	c
Uart	./dev/uart.cc	/^Uart::Uart(const Params *p, Addr pio_size)$/;"	f	class:Uart
Uart	./dev/uart.hh	/^class Uart : public BasicPioDevice$/;"	c
Uart8250	./dev/Uart.py	/^class Uart8250(Uart):$/;"	c
Uart8250	./dev/uart8250.cc	/^Uart8250::Uart8250(const Params *p)$/;"	f	class:Uart8250
Uart8250	./dev/uart8250.hh	/^class Uart8250 : public Uart$/;"	c
UdpHdr	./base/inet.hh	/^struct UdpHdr : public udp_hdr$/;"	s	namespace:Net
UdpPort	./python/m5/params.py	/^class UdpPort(CheckedInt):  cxx_type = 'uint16_t'; size = 16; unsigned = True$/;"	c
UdpPtr	./base/inet.hh	/^    UdpPtr() : p(0), _off(0) {}$/;"	f	class:Net::UdpPtr
UdpPtr	./base/inet.hh	/^    UdpPtr(const Ip6Ptr &ptr) : p(0), _off(0) { set(ptr); }$/;"	f	class:Net::UdpPtr
UdpPtr	./base/inet.hh	/^    UdpPtr(const IpPtr &ptr) : p(0), _off(0) { set(ptr); }$/;"	f	class:Net::UdpPtr
UdpPtr	./base/inet.hh	/^    UdpPtr(const UdpPtr &ptr) : p(ptr.p), _off(ptr._off) {}$/;"	f	class:Net::UdpPtr
UdpPtr	./base/inet.hh	/^class UdpPtr$/;"	c	namespace:Net
UnImplMask	./arch/alpha/pagetable.hh	/^    static const Addr UnImplMask = ~ImplMask;$/;"	m	struct:AlphaISA::VAddr
UnImplMask	./arch/power/pagetable.hh	/^    static const Addr UnImplMask = ~ImplMask;$/;"	m	struct:PowerISA::VAddr
UnaryNode	./base/statistics.hh	/^    UnaryNode(NodePtr &p) : l(p) {}$/;"	f	class:Stats::UnaryNode
UnaryNode	./base/statistics.hh	/^class UnaryNode : public Node$/;"	c	namespace:Stats
Unblocking	./cpu/o3/decode.hh	/^        Unblocking$/;"	e	enum:DefaultDecode::ThreadStatus
Unblocking	./cpu/o3/iew.hh	/^        Unblocking$/;"	e	enum:DefaultIEW::StageStatus
Unblocking	./cpu/o3/rename.hh	/^        Unblocking,$/;"	e	enum:DefaultRename::ThreadStatus
UndefinedInstruction	./arch/arm/faults.hh	/^    UndefinedInstruction(ExtMachInst _machInst, uint32_t _iss,$/;"	f	class:ArmISA::UndefinedInstruction
UndefinedInstruction	./arch/arm/faults.hh	/^    UndefinedInstruction(ExtMachInst _machInst,$/;"	f	class:ArmISA::UndefinedInstruction
UndefinedInstruction	./arch/arm/faults.hh	/^class UndefinedInstruction : public ArmFaultVals<UndefinedInstruction>$/;"	c	namespace:ArmISA
UndefinedVariable	./python/m5/util/smartdict.py	/^class UndefinedVariable(object):$/;"	c
Underflow	./arch/mips/registers.hh	/^    Underflow,$/;"	e	enum:MipsISA::FCSRBits
UnifiedFreeList	./cpu/o3/free_list.cc	/^UnifiedFreeList::UnifiedFreeList(const std::string &_my_name,$/;"	f	class:UnifiedFreeList
UnifiedFreeList	./cpu/o3/free_list.hh	/^class UnifiedFreeList$/;"	c
UnifiedRenameMap	./cpu/o3/rename_map.hh	/^    UnifiedRenameMap() : regFile(nullptr) {};$/;"	f	class:UnifiedRenameMap
UnifiedRenameMap	./cpu/o3/rename_map.hh	/^class UnifiedRenameMap$/;"	c
UnimpFault	./sim/faults.hh	/^    UnimpFault(std::string _str)$/;"	f	class:UnimpFault
UnimpFault	./sim/faults.hh	/^class UnimpFault : public FaultBase$/;"	c
UnimpInstFault	./arch/x86/faults.hh	/^    class UnimpInstFault : public FaultBase$/;"	c	namespace:X86ISA
Unimplemented	./arch/mips/registers.hh	/^    Unimplemented$/;"	e	enum:MipsISA::FCSRBits
UnimplementedOpcodeFault	./arch/alpha/faults.hh	/^class UnimplementedOpcodeFault : public AlphaFault$/;"	c	namespace:AlphaISA
UnimplementedOpcodeFault	./arch/power/faults.hh	/^    UnimplementedOpcodeFault()$/;"	f	class:PowerISA::UnimplementedOpcodeFault
UnimplementedOpcodeFault	./arch/power/faults.hh	/^class UnimplementedOpcodeFault : public PowerFault$/;"	c	namespace:PowerISA
UnitTest	./unittest/unittest.cc	/^namespace UnitTest {$/;"	n	file:
UnitTest	./unittest/unittest.hh	/^namespace UnitTest {$/;"	n
Unknown	./mem/request.hh	/^        Unknown = 1024,$/;"	e	enum:ContextSwitchTaskId::TaskId
UnknownArch	./base/loader/object_file.hh	/^        UnknownArch,$/;"	e	enum:ObjectFile::Arch
UnknownOp	./arch/arm/insts/misc.hh	/^    UnknownOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass) :$/;"	f	class:UnknownOp
UnknownOp	./arch/arm/insts/misc.hh	/^class UnknownOp : public PredOp$/;"	c
UnknownOp64	./arch/arm/insts/misc64.hh	/^    UnknownOp64(const char *mnem, ExtMachInst _machInst, OpClass __opClass) :$/;"	f	class:UnknownOp64
UnknownOp64	./arch/arm/insts/misc64.hh	/^class UnknownOp64 : public ArmStaticInst$/;"	c
UnknownOpSys	./base/loader/object_file.hh	/^        UnknownOpSys,$/;"	e	enum:ObjectFile::OpSys
UnknownTran	./arch/arm/faults.hh	/^        UnknownTran$/;"	e	enum:ArmISA::ArmFault::TranMethod
UnmapInfo	./cpu/o3/rob.hh	/^    typedef std::pair<RegIndex, PhysRegIndex> UnmapInfo;$/;"	t	class:ROB
UnpredictedBranch	./cpu/minor/pipe_data.hh	/^        UnpredictedBranch,$/;"	e	enum:Minor::BranchData::Reason
Unsigned	./python/m5/params.py	/^class Unsigned(CheckedInt): cxx_type = 'unsigned'; size = 32; unsigned = True$/;"	c
UpdateCP0	./arch/mips/isa.hh	/^            UpdateCP0$/;"	e	enum:MipsISA::ISA::CP0EventType
UpdateEvent	./sim/dvfs_handler.hh	/^        UpdateEvent() : Event(DVFS_Update_Pri), domainIDToSet(0),$/;"	f	struct:DVFSHandler::UpdateEvent
UpdateEvent	./sim/dvfs_handler.hh	/^    struct UpdateEvent : public Event {$/;"	s	class:DVFSHandler
UpdatePerfLevelEvents	./sim/dvfs_handler.hh	/^    typedef std::map<DomainID, UpdateEvent> UpdatePerfLevelEvents;$/;"	t	class:DVFSHandler
UpgradeFailResp	./mem/packet.hh	/^        UpgradeFailResp,        \/\/ Valid for SCUpgradeReq only$/;"	e	enum:MemCmd::Command
UpgradeReq	./mem/packet.hh	/^        UpgradeReq,$/;"	e	enum:MemCmd::Command
UpgradeResp	./mem/packet.hh	/^        UpgradeResp,$/;"	e	enum:MemCmd::Command
UpperKeys	./dev/ps2.cc	/^const uint32_t UpperKeys = 0xff00;$/;"	m	namespace:Ps2	file:
User	./arch/sparc/faults.hh	/^        U, User = U,$/;"	e	enum:SparcISA::SparcFaultBase::PrivilegeLevel
UserDesc32	./arch/x86/linux/process.cc	/^struct UserDesc32 {$/;"	s	file:
UserDesc64	./arch/x86/linux/process.cc	/^struct UserDesc64 {$/;"	s	file:
UserMode	./arch/arm/tlb.hh	/^        UserMode = 0x10,$/;"	e	enum:ArmISA::TLB::ArmFlags
UsesModRMOneByte	./arch/x86/decoder.hh	/^    static ByteTable UsesModRMOneByte;$/;"	m	class:X86ISA::Decoder
UsesModRMOneByte	./arch/x86/decoder_tables.cc	/^    const Decoder::ByteTable Decoder::UsesModRMOneByte =$/;"	m	class:X86ISA::Decoder	file:
UsesModRMThreeByte0F38	./arch/x86/decoder.hh	/^    static ByteTable UsesModRMThreeByte0F38;$/;"	m	class:X86ISA::Decoder
UsesModRMThreeByte0F38	./arch/x86/decoder_tables.cc	/^    const Decoder::ByteTable Decoder::UsesModRMThreeByte0F38 =$/;"	m	class:X86ISA::Decoder	file:
UsesModRMThreeByte0F3A	./arch/x86/decoder.hh	/^    static ByteTable UsesModRMThreeByte0F3A;$/;"	m	class:X86ISA::Decoder
UsesModRMThreeByte0F3A	./arch/x86/decoder_tables.cc	/^    const Decoder::ByteTable Decoder::UsesModRMThreeByte0F3A =$/;"	m	class:X86ISA::Decoder	file:
UsesModRMTwoByte	./arch/x86/decoder.hh	/^    static ByteTable UsesModRMTwoByte;$/;"	m	class:X86ISA::Decoder
UsesModRMTwoByte	./arch/x86/decoder_tables.cc	/^    const Decoder::ByteTable Decoder::UsesModRMTwoByte =$/;"	m	class:X86ISA::Decoder	file:
V0	./arch/mips/pagetable.hh	/^    bool V0;    \/\/ Even entry Valid Bit$/;"	m	struct:MipsISA::PTE
V0	./arch/power/pagetable.hh	/^    bool V0;   \/\/ Even entry Valid Bit$/;"	m	struct:PowerISA::PTE
V1	./arch/mips/pagetable.hh	/^    bool V1;    \/\/ Odd entry Valid Bit$/;"	m	struct:MipsISA::PTE
V1	./arch/power/pagetable.hh	/^    bool V1;   \/\/ Odd entry Valid Bit$/;"	m	struct:PowerISA::PTE
V2	./arch/x86/decoder_tables.cc	/^    const uint8_t V2 = Vex2Prefix;$/;"	m	namespace:X86ISA	file:
V3	./arch/x86/decoder_tables.cc	/^    const uint8_t V3 = Vex3Prefix;$/;"	m	namespace:X86ISA	file:
VABits	./arch/arm/isa_traits.hh	/^    const unsigned VABits = 32;$/;"	m	namespace:ArmISA
VABits	./arch/mips/isa_traits.hh	/^const unsigned VABits = 32;$/;"	m	namespace:MipsISA
VAWatchpoint	./arch/sparc/faults.hh	/^class VAWatchpoint : public SparcFault<VAWatchpoint> {};$/;"	c	namespace:SparcISA
VA_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum flit_stage {I_, VA_, SA_, ST_, LT_, NUM_FLIT_STAGE_};$/;"	e	enum:flit_stage
VAddr	./arch/alpha/pagetable.hh	/^    VAddr(Addr a) : addr(a) {}$/;"	f	struct:AlphaISA::VAddr
VAddr	./arch/alpha/pagetable.hh	/^struct VAddr$/;"	s	namespace:AlphaISA
VAddr	./arch/arm/pagetable.hh	/^    VAddr(Addr a) { panic("not implemented yet."); }$/;"	f	struct:ArmISA::VAddr
VAddr	./arch/arm/pagetable.hh	/^struct VAddr$/;"	s	namespace:ArmISA
VAddr	./arch/mips/pagetable.hh	/^struct VAddr$/;"	s	namespace:MipsISA
VAddr	./arch/power/pagetable.hh	/^    VAddr(Addr a)$/;"	f	struct:PowerISA::VAddr
VAddr	./arch/power/pagetable.hh	/^struct VAddr$/;"	s	namespace:PowerISA
VAddr	./arch/sparc/pagetable.hh	/^    VAddr(Addr a) { panic("not implemented yet."); }$/;"	f	struct:SparcISA::VAddr
VAddr	./arch/sparc/pagetable.hh	/^struct VAddr$/;"	s	namespace:SparcISA
VAddrAMask	./arch/sparc/isa_traits.hh	/^const Addr VAddrAMask = ULL(0xFFFFFFFF);$/;"	m	namespace:SparcISA
VAddrImpl	./arch/alpha/ev5.hh	/^inline Addr VAddrImpl(Addr a) { return a & VAddrImplMask; }$/;"	f	namespace:AlphaISA
VAddrImpl	./arch/arm/isa_traits.hh	/^    inline Addr VAddrImpl(Addr a) { return a & VAddrImplMask; }$/;"	f	namespace:ArmISA
VAddrImpl	./arch/mips/isa_traits.hh	/^inline Addr VAddrImpl(Addr a) { return a & VAddrImplMask; }$/;"	f	namespace:MipsISA
VAddrImplBits	./arch/alpha/ev5.hh	/^const int VAddrImplBits = 43;$/;"	m	namespace:AlphaISA
VAddrImplMask	./arch/alpha/ev5.hh	/^const Addr VAddrImplMask = (ULL(1) << VAddrImplBits) - 1;$/;"	m	namespace:AlphaISA
VAddrImplMask	./arch/arm/isa_traits.hh	/^    const Addr VAddrImplMask = (ULL(1) << VABits) - 1;$/;"	m	namespace:ArmISA
VAddrImplMask	./arch/mips/isa_traits.hh	/^const Addr VAddrImplMask = (ULL(1) << VABits) - 1;$/;"	m	namespace:MipsISA
VAddrOffset	./arch/alpha/ev5.hh	/^inline Addr VAddrOffset(Addr a) { return a & PageOffset; }$/;"	f	namespace:AlphaISA
VAddrOffset	./arch/arm/isa_traits.hh	/^    inline Addr VAddrOffset(Addr a) { return a & ArmISA::PageOffset; }$/;"	f	namespace:ArmISA
VAddrOffset	./arch/mips/isa_traits.hh	/^inline Addr VAddrOffset(Addr a) { return a & MipsISA::PageOffset; }$/;"	f	namespace:MipsISA
VAddrSpaceEV5	./arch/alpha/ev5.hh	/^inline Addr VAddrSpaceEV5(Addr a) { return a >> 41 & 0x3; }$/;"	f	namespace:AlphaISA
VAddrSpaceEV6	./arch/alpha/ev5.hh	/^inline Addr VAddrSpaceEV6(Addr a) { return a >> 41 & 0x7f; }$/;"	f	namespace:AlphaISA
VAddrUnImplMask	./arch/alpha/ev5.hh	/^const Addr VAddrUnImplMask = ~VAddrImplMask;$/;"	m	namespace:AlphaISA
VAddrUnImplMask	./arch/arm/isa_traits.hh	/^    const Addr VAddrUnImplMask = ~VAddrImplMask;$/;"	m	namespace:ArmISA
VAddrUnImplMask	./arch/mips/isa_traits.hh	/^const Addr VAddrUnImplMask = ~VAddrImplMask;$/;"	m	namespace:MipsISA
VAddrVPN	./arch/alpha/ev5.hh	/^inline Addr VAddrVPN(Addr a) { return a >> PageShift; }$/;"	f	namespace:AlphaISA
VAddrVPN	./arch/arm/isa_traits.hh	/^    inline Addr VAddrVPN(Addr a) { return a >> ArmISA::PageShift; }$/;"	f	namespace:ArmISA
VAddrVPN	./arch/mips/isa_traits.hh	/^inline Addr VAddrVPN(Addr a) { return a >> MipsISA::PageShift; }$/;"	f	namespace:MipsISA
VC_AB_	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum VC_state_type {IDLE_, VC_AB_, ACTIVE_, NUM_VC_STATE_TYPE_};$/;"	e	enum:VC_state_type
VC_state_type	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum VC_state_type {IDLE_, VC_AB_, ACTIVE_, NUM_VC_STATE_TYPE_};$/;"	g
VCallocator_d	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.cc	/^VCallocator_d::VCallocator_d(Router_d *router)$/;"	f	class:VCallocator_d
VCallocator_d	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.hh	/^class VCallocator_d : public Consumer$/;"	c
VCarbiter	./mem/ruby/network/garnet/flexible-pipeline/VCarbiter.cc	/^VCarbiter::VCarbiter(Router *router)$/;"	f	class:VCarbiter
VCarbiter	./mem/ruby/network/garnet/flexible-pipeline/VCarbiter.hh	/^class VCarbiter : public Consumer$/;"	c
VCounter	./base/stats/types.hh	/^typedef std::vector<Counter> VCounter;$/;"	t	namespace:Stats
VDD	./mem/DRAMCtrl.py	/^    VDD = '1.2V'$/;"	v	class:DDR4_2400_x64
VDD	./mem/DRAMCtrl.py	/^    VDD = '1.5V'$/;"	v	class:DDR3_1600_x64
VDD	./mem/DRAMCtrl.py	/^    VDD = '1.5V'$/;"	v	class:DDR3_2133_x64
VDD	./mem/DRAMCtrl.py	/^    VDD = '1.8V'$/;"	v	class:LPDDR2_S4_1066_x32
VDD	./mem/DRAMCtrl.py	/^    VDD = '1.8V'$/;"	v	class:LPDDR3_1600_x32
VDD	./mem/DRAMCtrl.py	/^    VDD = Param.Voltage("0V", "Main Voltage Range")$/;"	v	class:DRAMCtrl
VDD2	./mem/DRAMCtrl.py	/^    VDD2 = '1.2V'$/;"	v	class:LPDDR2_S4_1066_x32
VDD2	./mem/DRAMCtrl.py	/^    VDD2 = '1.2V'$/;"	v	class:LPDDR3_1600_x32
VDD2	./mem/DRAMCtrl.py	/^    VDD2 = '2.5V'$/;"	v	class:DDR4_2400_x64
VDD2	./mem/DRAMCtrl.py	/^    VDD2 = Param.Voltage("0V", "2nd Voltage Range")$/;"	v	class:DRAMCtrl
VDR	./dev/net/ns_gige_reg.h	/^    VDR =               0xc4,$/;"	e	enum:DeviceRegisterAddress
VEM	./dev/arm/vgic.hh	/^        uint8_t VEM;$/;"	m	struct:VGic::vcpuIntData
VERSION_RESETV	./dev/arm/hdlcd.cc	/^      version(VERSION_RESETV),$/;"	v
VERSION_RESETV	./dev/arm/hdlcd.hh	/^    static constexpr size_t VERSION_RESETV = 0x1CDC0000;$/;"	m	class:HDLcd
VExpressMCC	./dev/arm/RealView.py	/^class VExpressMCC(SubSystem):$/;"	c
VExpress_EMM	./dev/arm/RealView.py	/^class VExpress_EMM(RealView):$/;"	c
VExpress_EMM64	./dev/arm/RealView.py	/^class VExpress_EMM64(VExpress_EMM):$/;"	c
VGIC_CPU_MAX	./dev/arm/vgic.hh	/^    static const int VGIC_CPU_MAX       = 256;$/;"	m	class:VGic
VGic	./dev/arm/RealView.py	/^class VGic(PioDevice):$/;"	c
VGic	./dev/arm/vgic.cc	/^VGic::VGic(const Params *p)$/;"	f	class:VGic
VGic	./dev/arm/vgic.hh	/^class VGic : public PioDevice$/;"	c
VGrp0DIE	./dev/arm/vgic.hh	/^    Bitfield<5> VGrp0DIE;$/;"	m	class:VGic
VGrp0EIE	./dev/arm/vgic.hh	/^    Bitfield<4> VGrp0EIE;$/;"	m	class:VGic
VGrp1DIE	./dev/arm/vgic.hh	/^    Bitfield<7> VGrp1DIE;$/;"	m	class:VGic
VGrp1EIE	./dev/arm/vgic.hh	/^    Bitfield<6> VGrp1EIE;$/;"	m	class:VGic
VIFBit	./arch/x86/regs/misc.hh	/^        VIFBit = 1 << 19,$/;"	e	enum:X86ISA::RFLAGBit
VIPBit	./arch/x86/regs/misc.hh	/^        VIPBit = 1 << 20,$/;"	e	enum:X86ISA::RFLAGBit
VIRTIO_RING_F_EVENT_IDX	./dev/virtio/virtio_ring.h	59;"	d
VIRTIO_RING_F_INDIRECT_DESC	./dev/virtio/virtio_ring.h	53;"	d
VLANIPReceiveControlRegister	./dev/net/ns_gige_reg.h	/^enum VLANIPReceiveControlRegister {$/;"	g
VLANIPTransmitControlRegister	./dev/net/ns_gige_reg.h	/^enum VLANIPTransmitControlRegister {$/;"	g
VLAN_FILTER_TABLE_SIZE	./dev/net/i8254xGBe_defs.hh	/^const uint8_t VLAN_FILTER_TABLE_SIZE    = 128;$/;"	m	namespace:iGbReg
VMABP	./dev/arm/vgic.hh	/^        uint8_t VMABP;$/;"	m	struct:VGic::vcpuIntData
VMAckCtl	./dev/arm/vgic.hh	/^        uint8_t VMAckCtl;$/;"	m	struct:VGic::vcpuIntData
VMBP	./dev/arm/vgic.hh	/^        uint8_t VMBP;$/;"	m	struct:VGic::vcpuIntData
VMBit	./arch/x86/regs/misc.hh	/^        VMBit = 1 << 17,$/;"	e	enum:X86ISA::RFLAGBit
VMCBPR	./dev/arm/vgic.hh	/^        uint8_t VMCBPR;$/;"	m	struct:VGic::vcpuIntData
VMFiqEn	./dev/arm/vgic.hh	/^        uint8_t VMFiqEn;$/;"	m	struct:VGic::vcpuIntData
VMGrp0En	./dev/arm/vgic.hh	/^        uint8_t VMGrp0En;$/;"	m	struct:VGic::vcpuIntData
VMGrp1En	./dev/arm/vgic.hh	/^        uint8_t VMGrp1En;$/;"	m	struct:VGic::vcpuIntData
VMPriMask	./dev/arm/vgic.hh	/^        uint8_t VMPriMask;$/;"	m	struct:VGic::vcpuIntData
VNET_type	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum VNET_type {CTRL_VNET_, DATA_VNET_, NULL_VNET_, NUM_VNET_TYPE_};$/;"	g
VOLT_AT_PERF_LEVEL	./dev/arm/energy_ctrl.hh	/^        VOLT_AT_PERF_LEVEL,$/;"	e	enum:EnergyCtrl::Registers
VPN	./arch/mips/pagetable.hh	/^    Addr VPN;$/;"	m	struct:MipsISA::PTE
VPN	./arch/power/pagetable.hh	/^    Addr VPN;$/;"	m	struct:PowerISA::PTE
VPTE	./arch/alpha/types.hh	/^    static const ArchFlagsType VPTE    = 0x01;$/;"	m	struct:AlphaISA::AlphaRequestFlags
VPtr	./sim/vptr.hh	/^    VPtr(const VPtr<U> &vp)$/;"	f	class:VPtr
VPtr	./sim/vptr.hh	/^    explicit VPtr(ThreadContext *_tc, Addr p = 0)$/;"	f	class:VPtr
VPtr	./sim/vptr.hh	/^class VPtr$/;"	c
VRCR	./dev/net/ns_gige_reg.h	/^    VRCR =              0xbc,$/;"	e	enum:DeviceRegisterAddress
VRCR_DUTF	./dev/net/ns_gige_reg.h	/^     VRCR_DUTF =        0x00000008,$/;"	e	enum:VLANIPReceiveControlRegister
VRCR_DVTF	./dev/net/ns_gige_reg.h	/^     VRCR_DVTF =        0x00000004,$/;"	e	enum:VLANIPReceiveControlRegister
VRCR_IPEN	./dev/net/ns_gige_reg.h	/^     VRCR_IPEN =        0x00000010,$/;"	e	enum:VLANIPReceiveControlRegister
VRCR_RIPE	./dev/net/ns_gige_reg.h	/^     VRCR_RIPE =        0x00000020,$/;"	e	enum:VLANIPReceiveControlRegister
VRCR_RTCPE	./dev/net/ns_gige_reg.h	/^     VRCR_RTCPE =       0x00000040,$/;"	e	enum:VLANIPReceiveControlRegister
VRCR_RUDPE	./dev/net/ns_gige_reg.h	/^     VRCR_RUDPE =       0x00000080,$/;"	e	enum:VLANIPReceiveControlRegister
VRCR_VTDEN	./dev/net/ns_gige_reg.h	/^     VRCR_VTDEN =       0x00000001$/;"	e	enum:VLANIPReceiveControlRegister
VRCR_VTREN	./dev/net/ns_gige_reg.h	/^     VRCR_VTREN =       0x00000002,$/;"	e	enum:VLANIPReceiveControlRegister
VRING_AVAIL_F_NO_INTERRUPT	./dev/virtio/virtio_ring.h	50;"	d
VRING_DESC_F_INDIRECT	./dev/virtio/virtio_ring.h	41;"	d
VRING_DESC_F_NEXT	./dev/virtio/virtio_ring.h	37;"	d
VRING_DESC_F_WRITE	./dev/virtio/virtio_ring.h	39;"	d
VRING_USED_F_NO_NOTIFY	./dev/virtio/virtio_ring.h	46;"	d
VReg	./arch/arm/insts/neon64_mem.hh	/^struct VReg {$/;"	s	namespace:ArmISA
VResult	./base/stats/types.hh	/^typedef std::vector<Result> VResult;$/;"	t	namespace:Stats
VSyscallPage	./arch/x86/process.hh	/^        class VSyscallPage$/;"	c	class:X86ISA::I386LiveProcess
VSyscallPage	./arch/x86/process.hh	/^        class VSyscallPage$/;"	c	class:X86ISA::X86_64LiveProcess
VTCR	./dev/net/ns_gige_reg.h	/^    VTCR =              0xc0,$/;"	e	enum:DeviceRegisterAddress
VTCR_GCHK	./dev/net/ns_gige_reg.h	/^     VTCR_GCHK =        0x00000004,$/;"	e	enum:VLANIPTransmitControlRegister
VTCR_PPCHK	./dev/net/ns_gige_reg.h	/^     VTCR_PPCHK =       0x00000008,$/;"	e	enum:VLANIPTransmitControlRegister
VTCR_VGTI	./dev/net/ns_gige_reg.h	/^     VTCR_VGTI =        0x00000001$/;"	e	enum:VLANIPTransmitControlRegister
VTCR_VPPTI	./dev/net/ns_gige_reg.h	/^     VTCR_VPPTI =       0x00000002,$/;"	e	enum:VLANIPTransmitControlRegister
VW	./arch/x86/decoder_tables.cc	/^        VW = VWordImm,$/;"	e	enum:X86ISA::SizeType	file:
VWordImm	./arch/x86/decoder_tables.cc	/^        VWordImm,$/;"	e	enum:X86ISA::SizeType	file:
V_Back_Porch	./dev/arm/hdlcd.hh	/^        V_Back_Porch     = 0x0204,$/;"	e	enum:HDLcd::RegisterOffset
V_Data	./dev/arm/hdlcd.hh	/^        V_Data           = 0x0208,$/;"	e	enum:HDLcd::RegisterOffset
V_Front_Porch	./dev/arm/hdlcd.hh	/^        V_Front_Porch    = 0x020C,$/;"	e	enum:HDLcd::RegisterOffset
V_Sync	./dev/arm/hdlcd.hh	/^        V_Sync           = 0x0200,$/;"	e	enum:HDLcd::RegisterOffset
VaOutOfRange	./arch/sparc/tlb.hh	/^        VaOutOfRange = 0x20,$/;"	e	enum:SparcISA::TLB::FaultTypes
VaOutOfRangeJmp	./arch/sparc/tlb.hh	/^        VaOutOfRangeJmp = 0x40$/;"	e	enum:SparcISA::TLB::FaultTypes
Valid	./arch/mips/pagetable.hh	/^    bool Valid() { return (V0 | V1); };$/;"	f	struct:MipsISA::PTE
Valid	./arch/power/pagetable.hh	/^    Valid()$/;"	f	struct:PowerISA::PTE
Value	./base/statistics.hh	/^class Value : public ValueBase<Value>$/;"	c	namespace:Stats
ValueBase	./base/statistics.hh	/^    ValueBase() : proxy(NULL) { }$/;"	f	class:Stats::ValueBase
ValueBase	./base/statistics.hh	/^class ValueBase : public DataWrap<Derived, ScalarInfoProxy>$/;"	c	namespace:Stats
ValueProxy	./base/statistics.hh	/^    ValueProxy(T &val) : scalar(&val) {}$/;"	f	class:Stats::ValueProxy
ValueProxy	./base/statistics.hh	/^class ValueProxy : public ProxyInfo$/;"	c	namespace:Stats
ValueToString	./base/stats/text.cc	/^ValueToString(Result value, int precision)$/;"	f	namespace:Stats
Var	./mem/slicc/symbols/Var.py	/^class Var(Symbol):$/;"	c
VarExprAST	./mem/slicc/ast/VarExprAST.py	/^class VarExprAST(ExprAST):$/;"	c
Variable	./python/m5/util/smartdict.py	/^class Variable(str):$/;"	c
Vector	./base/statistics.hh	/^class Vector : public VectorBase<Vector, StatStor>$/;"	c	namespace:Stats
Vector2d	./base/statistics.hh	/^class Vector2d : public Vector2dBase<Vector2d, StatStor>$/;"	c	namespace:Stats
Vector2dBase	./base/statistics.hh	/^    Vector2dBase()$/;"	f	class:Stats::Vector2dBase
Vector2dBase	./base/statistics.hh	/^class Vector2dBase : public DataWrapVec2d<Derived, Vector2dInfoProxy>$/;"	c	namespace:Stats
Vector2dInfo	./base/stats/info.hh	/^class Vector2dInfo : public Info$/;"	c	namespace:Stats
Vector2dInfoProxy	./base/statistics.hh	/^    Vector2dInfoProxy(Stat &stat) : InfoProxy<Stat, Vector2dInfo>(stat) {}$/;"	f	class:Stats::Vector2dInfoProxy
Vector2dInfoProxy	./base/statistics.hh	/^class Vector2dInfoProxy : public InfoProxy<Stat, Vector2dInfo>$/;"	c	namespace:Stats
VectorAverageDeviation	./base/statistics.hh	/^class VectorAverageDeviation$/;"	c	namespace:Stats
VectorBase	./base/statistics.hh	/^    VectorBase()$/;"	f	class:Stats::VectorBase
VectorBase	./base/statistics.hh	/^class VectorBase : public DataWrapVec<Derived, VectorInfoProxy>$/;"	c	namespace:Stats
VectorDistBase	./base/statistics.hh	/^    VectorDistBase()$/;"	f	class:Stats::VectorDistBase
VectorDistBase	./base/statistics.hh	/^class VectorDistBase : public DataWrapVec<Derived, VectorDistInfoProxy>$/;"	c	namespace:Stats
VectorDistInfo	./base/stats/info.hh	/^class VectorDistInfo : public Info$/;"	c	namespace:Stats
VectorDistInfoProxy	./base/statistics.hh	/^    VectorDistInfoProxy(Stat &stat) : InfoProxy<Stat, VectorDistInfo>(stat) {}$/;"	f	class:Stats::VectorDistInfoProxy
VectorDistInfoProxy	./base/statistics.hh	/^class VectorDistInfoProxy : public InfoProxy<Stat, VectorDistInfo>$/;"	c	namespace:Stats
VectorDistribution	./base/statistics.hh	/^class VectorDistribution : public VectorDistBase<VectorDistribution, DistStor>$/;"	c	namespace:Stats
VectorInfo	./base/stats/info.hh	/^class VectorInfo : public Info$/;"	c	namespace:Stats
VectorInfoProxy	./base/statistics.hh	/^    VectorInfoProxy(Stat &stat) : InfoProxy<Stat, VectorInfo>(stat) {}$/;"	f	class:Stats::VectorInfoProxy
VectorInfoProxy	./base/statistics.hh	/^class VectorInfoProxy : public InfoProxy<Stat, VectorInfo>$/;"	c	namespace:Stats
VectorMasterPort	./python/m5/params.py	/^class VectorMasterPort(VectorPort):$/;"	c
VectorParam	./python/m5/params.py	/^VectorParam = ParamFactory(VectorParamDesc)$/;"	v
VectorParamDesc	./python/m5/params.py	/^class VectorParamDesc(ParamDesc):$/;"	c
VectorParamValue	./python/m5/params.py	/^class VectorParamValue(list):$/;"	c
VectorPort	./python/m5/params.py	/^class VectorPort(Port):$/;"	c
VectorPortElementRef	./python/m5/params.py	/^class VectorPortElementRef(PortRef):$/;"	c
VectorPortRef	./python/m5/params.py	/^class VectorPortRef(object):$/;"	c
VectorPrint	./base/stats/text.cc	/^struct VectorPrint$/;"	s	namespace:Stats	file:
VectorProxy	./base/statistics.hh	/^    VectorProxy(Stat &s, off_type o, size_type l)$/;"	f	class:Stats::VectorProxy
VectorProxy	./base/statistics.hh	/^    VectorProxy(const VectorProxy &sp)$/;"	f	class:Stats::VectorProxy
VectorProxy	./base/statistics.hh	/^class VectorProxy$/;"	c	namespace:Stats
VectorSlavePort	./python/m5/params.py	/^class VectorSlavePort(VectorPort):$/;"	c
VectorStandardDeviation	./base/statistics.hh	/^class VectorStandardDeviation$/;"	c	namespace:Stats
VectorStatNode	./base/statistics.hh	/^    VectorStatNode(const VectorInfo *d) : data(d) { }$/;"	f	class:Stats::VectorStatNode
VectorStatNode	./base/statistics.hh	/^class VectorStatNode : public Node$/;"	c	namespace:Stats
VendorAndLargestExtFunc	./arch/x86/cpuid.cc	/^        VendorAndLargestExtFunc,$/;"	e	enum:X86ISA::ExtendedCpuidFunctions	file:
VendorAndLargestStdFunc	./arch/x86/cpuid.cc	/^        VendorAndLargestStdFunc,$/;"	e	enum:X86ISA::StandardCpuidFunction	file:
VendorID	./dev/net/Ethernet.py	/^    VendorID = 0x100B$/;"	v	class:NSGigE
VendorID	./dev/net/Ethernet.py	/^    VendorID = 0x1291$/;"	v	class:Sinic
VendorID	./dev/net/Ethernet.py	/^    VendorID = 0x8086$/;"	v	class:IGbE
VendorID	./dev/pci/CopyEngine.py	/^    VendorID = 0x8086$/;"	v	class:CopyEngine
VendorID	./dev/pci/PciDevice.py	/^    VendorID = Param.UInt16("Vendor ID")$/;"	v	class:PciDevice
VendorID	./dev/storage/Ide.py	/^    VendorID = 0x8086$/;"	v	class:IdeController
VendorID	./dev/virtio/VirtIO.py	/^    VendorID = 0x1AF4$/;"	v	class:PciVirtIO
Version	./dev/arm/hdlcd.hh	/^        Version          = 0x0000,$/;"	e	enum:HDLcd::RegisterOffset
VersionMajor	./dev/storage/disk_image.cc	/^const uint32_t CowDiskImage::VersionMajor = 1;$/;"	m	class:CowDiskImage	file:
VersionMajor	./dev/storage/disk_image.hh	/^    static const uint32_t VersionMajor;$/;"	m	class:CowDiskImage
VersionMinor	./dev/storage/disk_image.cc	/^const uint32_t CowDiskImage::VersionMinor = 0;$/;"	m	class:CowDiskImage	file:
VersionMinor	./dev/storage/disk_image.hh	/^    static const uint32_t VersionMinor;$/;"	m	class:CowDiskImage
Vex	./arch/x86/types.hh	/^        Vex,$/;"	e	enum:X86ISA::OpcodeType
Vex2Prefix	./arch/x86/types.hh	/^        Vex2Prefix,$/;"	e	enum:X86ISA::Prefixes
Vex3Prefix	./arch/x86/types.hh	/^        Vex3Prefix,$/;"	e	enum:X86ISA::Prefixes
VfpFirstMicroop	./arch/arm/insts/vfp.hh	/^    VfpFirstMicroop,$/;"	e	enum:ArmISA::VfpMicroMode
VfpLastMicroop	./arch/arm/insts/vfp.hh	/^    VfpLastMicroop$/;"	e	enum:ArmISA::VfpMicroMode
VfpMacroOp	./arch/arm/insts/vfp.hh	/^    VfpMacroOp(const char *mnem, ExtMachInst _machInst,$/;"	f	class:ArmISA::VfpMacroOp
VfpMacroOp	./arch/arm/insts/vfp.hh	/^class VfpMacroOp : public PredMacroOp$/;"	c	namespace:ArmISA
VfpMicroMode	./arch/arm/insts/vfp.hh	/^enum VfpMicroMode {$/;"	g	namespace:ArmISA
VfpMicroop	./arch/arm/insts/vfp.hh	/^    VfpMicroop,$/;"	e	enum:ArmISA::VfpMicroMode
VfpNotAMicroop	./arch/arm/insts/vfp.hh	/^    VfpNotAMicroop,$/;"	e	enum:ArmISA::VfpMicroMode
VfpRoundAway	./arch/arm/insts/vfp.hh	/^    VfpRoundAway = 4$/;"	e	enum:ArmISA::VfpRoundingMode
VfpRoundDown	./arch/arm/insts/vfp.hh	/^    VfpRoundDown = 2,$/;"	e	enum:ArmISA::VfpRoundingMode
VfpRoundNearest	./arch/arm/insts/vfp.hh	/^    VfpRoundNearest = 0,$/;"	e	enum:ArmISA::VfpRoundingMode
VfpRoundUpward	./arch/arm/insts/vfp.hh	/^    VfpRoundUpward = 1,$/;"	e	enum:ArmISA::VfpRoundingMode
VfpRoundZero	./arch/arm/insts/vfp.hh	/^    VfpRoundZero = 3,$/;"	e	enum:ArmISA::VfpRoundingMode
VfpRoundingMode	./arch/arm/insts/vfp.hh	/^enum VfpRoundingMode$/;"	g	namespace:ArmISA
VfpSavedState	./arch/arm/insts/vfp.hh	/^typedef int VfpSavedState;$/;"	t	namespace:ArmISA
VirtAddress	./dev/virtio/base.hh	/^    typedef uint16_t VirtAddress;$/;"	t	class:VirtIODeviceBase
VirtDescriptor	./dev/virtio/base.cc	/^VirtDescriptor::VirtDescriptor(PortProxy &_memProxy, VirtQueue &_queue,$/;"	f	class:VirtDescriptor
VirtDescriptor	./dev/virtio/base.hh	/^class VirtDescriptor$/;"	c
VirtIO9PBase	./dev/virtio/VirtIO9P.py	/^class VirtIO9PBase(VirtIODeviceBase):$/;"	c
VirtIO9PBase	./dev/virtio/fs9p.cc	/^VirtIO9PBase::VirtIO9PBase(Params *params)$/;"	f	class:VirtIO9PBase
VirtIO9PBase	./dev/virtio/fs9p.hh	/^class VirtIO9PBase : public VirtIODeviceBase$/;"	c
VirtIO9PDiod	./dev/virtio/VirtIO9P.py	/^class VirtIO9PDiod(VirtIO9PProxy):$/;"	c
VirtIO9PDiod	./dev/virtio/fs9p.cc	/^VirtIO9PDiod::VirtIO9PDiod(Params *params)$/;"	f	class:VirtIO9PDiod
VirtIO9PDiod	./dev/virtio/fs9p.hh	/^class VirtIO9PDiod : public VirtIO9PProxy$/;"	c
VirtIO9PProxy	./dev/virtio/VirtIO9P.py	/^class VirtIO9PProxy(VirtIO9PBase):$/;"	c
VirtIO9PProxy	./dev/virtio/fs9p.cc	/^VirtIO9PProxy::VirtIO9PProxy(Params *params)$/;"	f	class:VirtIO9PProxy
VirtIO9PProxy	./dev/virtio/fs9p.hh	/^class VirtIO9PProxy : public VirtIO9PBase$/;"	c
VirtIO9PSocket	./dev/virtio/VirtIO9P.py	/^class VirtIO9PSocket(VirtIO9PProxy):$/;"	c
VirtIO9PSocket	./dev/virtio/fs9p.cc	/^VirtIO9PSocket::VirtIO9PSocket(Params *params)$/;"	f	class:VirtIO9PSocket
VirtIO9PSocket	./dev/virtio/fs9p.hh	/^class VirtIO9PSocket : public VirtIO9PProxy$/;"	c
VirtIOBlock	./dev/virtio/VirtIOBlock.py	/^class VirtIOBlock(VirtIODeviceBase):$/;"	c
VirtIOBlock	./dev/virtio/block.cc	/^VirtIOBlock::VirtIOBlock(Params *params)$/;"	f	class:VirtIOBlock
VirtIOBlock	./dev/virtio/block.hh	/^class VirtIOBlock : public VirtIODeviceBase$/;"	c
VirtIOConsole	./dev/virtio/VirtIOConsole.py	/^class VirtIOConsole(VirtIODeviceBase):$/;"	c
VirtIOConsole	./dev/virtio/console.cc	/^VirtIOConsole::VirtIOConsole(Params *params)$/;"	f	class:VirtIOConsole
VirtIOConsole	./dev/virtio/console.hh	/^class VirtIOConsole : public VirtIODeviceBase$/;"	c
VirtIODeviceBase	./dev/virtio/VirtIO.py	/^class VirtIODeviceBase(SimObject):$/;"	c
VirtIODeviceBase	./dev/virtio/base.cc	/^VirtIODeviceBase::VirtIODeviceBase(Params *params, DeviceId id,$/;"	f	class:VirtIODeviceBase
VirtIODeviceBase	./dev/virtio/base.hh	/^class VirtIODeviceBase : public SimObject$/;"	c
VirtQueue	./dev/virtio/base.cc	/^VirtQueue::VirtQueue(PortProxy &proxy, uint16_t size)$/;"	f	class:VirtQueue
VirtQueue	./dev/virtio/base.hh	/^class VirtQueue : public Serializable {$/;"	c
VirtRing	./dev/virtio/base.hh	/^        VirtRing<T>(PortProxy &proxy, uint16_t size)$/;"	f	class:VirtQueue::VirtRing
VirtRing	./dev/virtio/base.hh	/^    class VirtRing$/;"	c	class:VirtQueue
Virtual8086Mode	./arch/x86/types.hh	/^        Virtual8086Mode,$/;"	e	enum:X86ISA::X86SubMode
VirtualChannel_d	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.cc	/^VirtualChannel_d::VirtualChannel_d(int id)$/;"	f	class:VirtualChannel_d
VirtualChannel_d	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^class VirtualChannel_d$/;"	c
VirtualCount	./dev/net/sinic.hh	/^        uint32_t VirtualCount; \/\/ 0x20$/;"	m	struct:Sinic::Device::__anon11
VirtualDataAbort	./arch/arm/faults.hh	/^    VirtualDataAbort(Addr _addr, TlbEntry::DomainType _domain, bool _write,$/;"	f	class:ArmISA::VirtualDataAbort
VirtualDataAbort	./arch/arm/faults.hh	/^class VirtualDataAbort : public AbortFault<VirtualDataAbort>$/;"	c	namespace:ArmISA
VirtualFastInterrupt	./arch/arm/faults.cc	/^VirtualFastInterrupt::VirtualFastInterrupt()$/;"	f	class:ArmISA::VirtualFastInterrupt
VirtualFastInterrupt	./arch/arm/faults.hh	/^class VirtualFastInterrupt : public ArmFaultVals<VirtualFastInterrupt>$/;"	c	namespace:ArmISA
VirtualID	./dev/arm/vgic.hh	/^    Bitfield<9,0> VirtualID;$/;"	m	class:VGic
VirtualInterrupt	./arch/arm/faults.cc	/^VirtualInterrupt::VirtualInterrupt()$/;"	f	class:ArmISA::VirtualInterrupt
VirtualInterrupt	./arch/arm/faults.hh	/^class VirtualInterrupt : public ArmFaultVals<VirtualInterrupt>$/;"	c	namespace:ArmISA
VirtualList	./dev/net/sinic.hh	/^    typedef std::list<unsigned> VirtualList;$/;"	t	class:Sinic::Device
VirtualMask	./dev/net/sinicreg.hh	/^static const int VirtualMask = 0xff;$/;"	m	namespace:Sinic::Regs
VirtualReg	./dev/net/sinic.hh	/^        VirtualReg()$/;"	f	struct:Sinic::Device::VirtualReg
VirtualReg	./dev/net/sinic.hh	/^    struct VirtualReg {$/;"	s	class:Sinic::Device
VirtualRegs	./dev/net/sinic.hh	/^    typedef std::vector<VirtualReg> VirtualRegs;$/;"	t	class:Sinic::Device
VirtualShift	./dev/net/sinicreg.hh	/^static const int VirtualShift = 8;$/;"	m	namespace:Sinic::Regs
VisitorPtr	./mem/cache/cache.hh	/^    typedef bool (Cache::*VisitorPtr)(CacheBlk &blk);$/;"	t	class:CacheBlkVisitorWrapper
VldMultOp	./arch/arm/insts/macromem.cc	/^VldMultOp::VldMultOp(const char *mnem, ExtMachInst machInst, OpClass __opClass,$/;"	f	class:ArmISA::VldMultOp
VldMultOp	./arch/arm/insts/macromem.hh	/^class VldMultOp : public PredMacroOp$/;"	c	namespace:ArmISA
VldMultOp64	./arch/arm/insts/macromem.cc	/^VldMultOp64::VldMultOp64(const char *mnem, ExtMachInst machInst,$/;"	f	class:ArmISA::VldMultOp64
VldMultOp64	./arch/arm/insts/macromem.hh	/^class VldMultOp64 : public PredMacroOp$/;"	c	namespace:ArmISA
VldSingleOp	./arch/arm/insts/macromem.cc	/^VldSingleOp::VldSingleOp(const char *mnem, ExtMachInst machInst,$/;"	f	class:ArmISA::VldSingleOp
VldSingleOp	./arch/arm/insts/macromem.hh	/^class VldSingleOp : public PredMacroOp$/;"	c	namespace:ArmISA
VldSingleOp64	./arch/arm/insts/macromem.cc	/^VldSingleOp64::VldSingleOp64(const char *mnem, ExtMachInst machInst,$/;"	f	class:ArmISA::VldSingleOp64
VldSingleOp64	./arch/arm/insts/macromem.hh	/^class VldSingleOp64 : public PredMacroOp$/;"	c	namespace:ArmISA
VmsaTran	./arch/arm/faults.hh	/^        VmsaTran,$/;"	e	enum:ArmISA::ArmFault::TranMethod
VncInput	./base/vnc/Vnc.py	/^class VncInput(SimObject):$/;"	c
VncInput	./base/vnc/vncinput.cc	/^VncInput::VncInput(const Params *p)$/;"	f	class:VncInput
VncInput	./base/vnc/vncinput.hh	/^class VncInput : public SimObject$/;"	c
VncKeyboard	./base/vnc/vncinput.hh	/^class VncKeyboard$/;"	c
VncMouse	./base/vnc/vncinput.hh	/^class VncMouse$/;"	c
VncOK	./base/vnc/vncserver.hh	/^    const static uint32_t VncOK   = 0;$/;"	m	class:VncServer
VncServer	./base/vnc/Vnc.py	/^class VncServer(VncInput):$/;"	c
VncServer	./base/vnc/vncserver.cc	/^VncServer::VncServer(const Params *p)$/;"	f	class:VncServer
VncServer	./base/vnc/vncserver.hh	/^class VncServer : public VncInput$/;"	c
Voltage	./python/m5/params.py	/^class Voltage(float,ParamValue):$/;"	c
VoltageDomain	./sim/VoltageDomain.py	/^class VoltageDomain(SimObject):$/;"	c
VoltageDomain	./sim/voltage_domain.cc	/^VoltageDomain::VoltageDomain(const Params *p)$/;"	f	class:VoltageDomain
VoltageDomain	./sim/voltage_domain.hh	/^class VoltageDomain : public SimObject$/;"	c
Voltages	./sim/voltage_domain.hh	/^    typedef std::vector<double> Voltages;$/;"	t	class:VoltageDomain
VstMultOp	./arch/arm/insts/macromem.cc	/^VstMultOp::VstMultOp(const char *mnem, ExtMachInst machInst, OpClass __opClass,$/;"	f	class:ArmISA::VstMultOp
VstMultOp	./arch/arm/insts/macromem.hh	/^class VstMultOp : public PredMacroOp$/;"	c	namespace:ArmISA
VstMultOp64	./arch/arm/insts/macromem.cc	/^VstMultOp64::VstMultOp64(const char *mnem, ExtMachInst machInst,$/;"	f	class:ArmISA::VstMultOp64
VstMultOp64	./arch/arm/insts/macromem.hh	/^class VstMultOp64 : public PredMacroOp$/;"	c	namespace:ArmISA
VstSingleOp	./arch/arm/insts/macromem.cc	/^VstSingleOp::VstSingleOp(const char *mnem, ExtMachInst machInst,$/;"	f	class:ArmISA::VstSingleOp
VstSingleOp	./arch/arm/insts/macromem.hh	/^class VstSingleOp : public PredMacroOp$/;"	c	namespace:ArmISA
VstSingleOp64	./arch/arm/insts/macromem.cc	/^VstSingleOp64::VstSingleOp64(const char *mnem, ExtMachInst machInst,$/;"	f	class:ArmISA::VstSingleOp64
VstSingleOp64	./arch/arm/insts/macromem.hh	/^class VstSingleOp64 : public PredMacroOp$/;"	c	namespace:ArmISA
WCSR	./dev/net/ns_gige_reg.h	/^    WCSR =              0x40,$/;"	e	enum:DeviceRegisterAddress
WDCC_ACKMC	./dev/storage/ide_wdcreg.h	96;"	d
WDCC_CHECK_PWR	./dev/storage/ide_wdcreg.h	109;"	d
WDCC_DIAGNOSE	./dev/storage/ide_wdcreg.h	86;"	d
WDCC_FLUSHCACHE	./dev/storage/ide_wdcreg.h	100;"	d
WDCC_FLUSHCACHE_EXT	./dev/storage/ide_wdcreg.h	120;"	d
WDCC_FORMAT	./dev/storage/ide_wdcreg.h	85;"	d
WDCC_IDENTIFY	./dev/storage/ide_wdcreg.h	101;"	d
WDCC_IDLE	./dev/storage/ide_wdcreg.h	104;"	d
WDCC_IDLE_IMMED	./dev/storage/ide_wdcreg.h	105;"	d
WDCC_IDP	./dev/storage/ide_wdcreg.h	87;"	d
WDCC_LOCK	./dev/storage/ide_wdcreg.h	97;"	d
WDCC_NOP	./dev/storage/ide_wdcreg.h	77;"	d
WDCC_READ	./dev/storage/ide_wdcreg.h	80;"	d
WDCC_READDMA	./dev/storage/ide_wdcreg.h	93;"	d
WDCC_READDMA_EXT	./dev/storage/ide_wdcreg.h	117;"	d
WDCC_READMULTI	./dev/storage/ide_wdcreg.h	89;"	d
WDCC_READMULTI_EXT	./dev/storage/ide_wdcreg.h	114;"	d
WDCC_READ_EXT	./dev/storage/ide_wdcreg.h	111;"	d
WDCC_RECAL	./dev/storage/ide_wdcreg.h	78;"	d
WDCC_SETMULTI	./dev/storage/ide_wdcreg.h	91;"	d
WDCC_SLEEP	./dev/storage/ide_wdcreg.h	106;"	d
WDCC_STANDBY	./dev/storage/ide_wdcreg.h	107;"	d
WDCC_STANDBY_IMMED	./dev/storage/ide_wdcreg.h	108;"	d
WDCC_UNLOCK	./dev/storage/ide_wdcreg.h	98;"	d
WDCC_WRITE	./dev/storage/ide_wdcreg.h	81;"	d
WDCC_WRITEDMA	./dev/storage/ide_wdcreg.h	94;"	d
WDCC_WRITEDMA_EXT	./dev/storage/ide_wdcreg.h	118;"	d
WDCC_WRITEMULTI	./dev/storage/ide_wdcreg.h	90;"	d
WDCC_WRITEMULTI_EXT	./dev/storage/ide_wdcreg.h	115;"	d
WDCC_WRITE_EXT	./dev/storage/ide_wdcreg.h	112;"	d
WDCC__LONG	./dev/storage/ide_wdcreg.h	82;"	d
WDCC__NORETRY	./dev/storage/ide_wdcreg.h	83;"	d
WDCE_ABRT	./dev/storage/ide_wdcreg.h	70;"	d
WDCE_AMNF	./dev/storage/ide_wdcreg.h	72;"	d
WDCE_BBK	./dev/storage/ide_wdcreg.h	64;"	d
WDCE_CRC	./dev/storage/ide_wdcreg.h	65;"	d
WDCE_IDNF	./dev/storage/ide_wdcreg.h	68;"	d
WDCE_MC	./dev/storage/ide_wdcreg.h	67;"	d
WDCE_MCR	./dev/storage/ide_wdcreg.h	69;"	d
WDCE_TK0NF	./dev/storage/ide_wdcreg.h	71;"	d
WDCE_UNC	./dev/storage/ide_wdcreg.h	66;"	d
WDCI_CMD	./dev/storage/ide_wdcreg.h	187;"	d
WDCI_IN	./dev/storage/ide_wdcreg.h	188;"	d
WDCI_RELEASE	./dev/storage/ide_wdcreg.h	189;"	d
WDCS_BITS	./dev/storage/ide_wdcreg.h	59;"	d
WDCS_BSY	./dev/storage/ide_wdcreg.h	51;"	d
WDCS_CORR	./dev/storage/ide_wdcreg.h	56;"	d
WDCS_DRDY	./dev/storage/ide_wdcreg.h	52;"	d
WDCS_DRQ	./dev/storage/ide_wdcreg.h	55;"	d
WDCS_DSC	./dev/storage/ide_wdcreg.h	54;"	d
WDCS_DWF	./dev/storage/ide_wdcreg.h	53;"	d
WDCS_ERR	./dev/storage/ide_wdcreg.h	58;"	d
WDCS_IDX	./dev/storage/ide_wdcreg.h	57;"	d
WDCTL_4BIT	./dev/storage/ide_wdcreg.h	44;"	d
WDCTL_IDS	./dev/storage/ide_wdcreg.h	46;"	d
WDCTL_RST	./dev/storage/ide_wdcreg.h	45;"	d
WDC_CAP_DMA	./dev/storage/ide_atareg.h	109;"	d
WDC_CAP_IORDY	./dev/storage/ide_atareg.h	106;"	d
WDC_CAP_IORDY_DSBL	./dev/storage/ide_atareg.h	107;"	d
WDC_CAP_LBA	./dev/storage/ide_atareg.h	108;"	d
WDC_CFG_ATAPI	./dev/storage/ide_atareg.h	71;"	d
WDC_CFG_ATAPI_MASK	./dev/storage/ide_atareg.h	70;"	d
WDC_CMD1_AHEAD	./dev/storage/ide_atareg.h	199;"	d
WDC_CMD1_CACHE	./dev/storage/ide_atareg.h	200;"	d
WDC_CMD1_DVRST	./dev/storage/ide_atareg.h	196;"	d
WDC_CMD1_HPA	./dev/storage/ide_atareg.h	195;"	d
WDC_CMD1_NOP	./dev/storage/ide_atareg.h	192;"	d
WDC_CMD1_PKT	./dev/storage/ide_atareg.h	201;"	d
WDC_CMD1_PM	./dev/storage/ide_atareg.h	202;"	d
WDC_CMD1_RB	./dev/storage/ide_atareg.h	193;"	d
WDC_CMD1_REMOV	./dev/storage/ide_atareg.h	203;"	d
WDC_CMD1_RLSE	./dev/storage/ide_atareg.h	198;"	d
WDC_CMD1_SEC	./dev/storage/ide_atareg.h	204;"	d
WDC_CMD1_SMART	./dev/storage/ide_atareg.h	205;"	d
WDC_CMD1_SRV	./dev/storage/ide_atareg.h	197;"	d
WDC_CMD1_WB	./dev/storage/ide_atareg.h	194;"	d
WDC_CMD2_DM	./dev/storage/ide_atareg.h	219;"	d
WDC_CMD2_RMSN	./dev/storage/ide_atareg.h	215;"	d
WDC_EXT_GEOM	./dev/storage/ide_atareg.h	130;"	d
WDC_EXT_MODES	./dev/storage/ide_atareg.h	129;"	d
WDC_EXT_UDMA_MODES	./dev/storage/ide_atareg.h	128;"	d
WDC_MULTI_MASK	./dev/storage/ide_atareg.h	139;"	d
WDC_MULTI_VALID	./dev/storage/ide_atareg.h	138;"	d
WDC_QUEUE_DEPTH_MASK	./dev/storage/ide_atareg.h	163;"	d
WDC_RMSN_SUPP	./dev/storage/ide_atareg.h	265;"	d
WDC_RMSN_SUPP_MASK	./dev/storage/ide_atareg.h	264;"	d
WDC_SEC_EN	./dev/storage/ide_atareg.h	272;"	d
WDC_SEC_ESE_SUPP	./dev/storage/ide_atareg.h	268;"	d
WDC_SEC_EXP	./dev/storage/ide_atareg.h	269;"	d
WDC_SEC_FROZEN	./dev/storage/ide_atareg.h	270;"	d
WDC_SEC_LEV_MAX	./dev/storage/ide_atareg.h	267;"	d
WDC_SEC_LOCKED	./dev/storage/ide_atareg.h	271;"	d
WDC_SEC_SUPP	./dev/storage/ide_atareg.h	273;"	d
WDC_VER_ATA1	./dev/storage/ide_atareg.h	176;"	d
WDC_VER_ATA10	./dev/storage/ide_atareg.h	185;"	d
WDC_VER_ATA11	./dev/storage/ide_atareg.h	186;"	d
WDC_VER_ATA12	./dev/storage/ide_atareg.h	187;"	d
WDC_VER_ATA13	./dev/storage/ide_atareg.h	188;"	d
WDC_VER_ATA14	./dev/storage/ide_atareg.h	189;"	d
WDC_VER_ATA2	./dev/storage/ide_atareg.h	177;"	d
WDC_VER_ATA3	./dev/storage/ide_atareg.h	178;"	d
WDC_VER_ATA4	./dev/storage/ide_atareg.h	179;"	d
WDC_VER_ATA5	./dev/storage/ide_atareg.h	180;"	d
WDC_VER_ATA6	./dev/storage/ide_atareg.h	181;"	d
WDC_VER_ATA7	./dev/storage/ide_atareg.h	182;"	d
WDC_VER_ATA8	./dev/storage/ide_atareg.h	183;"	d
WDC_VER_ATA9	./dev/storage/ide_atareg.h	184;"	d
WDSD_CHS	./dev/storage/ide_wdcreg.h	162;"	d
WDSD_IBM	./dev/storage/ide_wdcreg.h	161;"	d
WDSD_LBA	./dev/storage/ide_wdcreg.h	163;"	d
WDSF_8BIT_PIO_DS	./dev/storage/ide_wdcreg.h	140;"	d
WDSF_8BIT_PIO_EN	./dev/storage/ide_wdcreg.h	123;"	d
WDSF_AAM_DS	./dev/storage/ide_wdcreg.h	152;"	d
WDSF_AAM_EN	./dev/storage/ide_wdcreg.h	133;"	d
WDSF_APM_DS	./dev/storage/ide_wdcreg.h	143;"	d
WDSF_APM_EN	./dev/storage/ide_wdcreg.h	127;"	d
WDSF_CFA_MODE1_DS	./dev/storage/ide_wdcreg.h	146;"	d
WDSF_CFA_MODE1_EN	./dev/storage/ide_wdcreg.h	130;"	d
WDSF_ECC_DS	./dev/storage/ide_wdcreg.h	139;"	d
WDSF_ECC_EN	./dev/storage/ide_wdcreg.h	145;"	d
WDSF_EN_WR_CACHE	./dev/storage/ide_wdcreg.h	124;"	d
WDSF_POD_DS	./dev/storage/ide_wdcreg.h	138;"	d
WDSF_POD_EN	./dev/storage/ide_wdcreg.h	153;"	d
WDSF_PREFETCH_SET	./dev/storage/ide_wdcreg.h	151;"	d
WDSF_PUIS_DS	./dev/storage/ide_wdcreg.h	144;"	d
WDSF_PUIS_EN	./dev/storage/ide_wdcreg.h	128;"	d
WDSF_PUIS_SPINUP	./dev/storage/ide_wdcreg.h	129;"	d
WDSF_READAHEAD_DS	./dev/storage/ide_wdcreg.h	135;"	d
WDSF_READAHEAD_EN	./dev/storage/ide_wdcreg.h	150;"	d
WDSF_READ_NATIVE_MAX	./dev/storage/ide_wdcreg.h	156;"	d
WDSF_REASSIGN_DS	./dev/storage/ide_wdcreg.h	142;"	d
WDSF_REASSIGN_EN	./dev/storage/ide_wdcreg.h	126;"	d
WDSF_RETRY_DS	./dev/storage/ide_wdcreg.h	132;"	d
WDSF_RETRY_EN	./dev/storage/ide_wdcreg.h	148;"	d
WDSF_RLSE_DS	./dev/storage/ide_wdcreg.h	154;"	d
WDSF_RLSE_EN	./dev/storage/ide_wdcreg.h	136;"	d
WDSF_RMSN_DS	./dev/storage/ide_wdcreg.h	131;"	d
WDSF_RMSN_EN	./dev/storage/ide_wdcreg.h	147;"	d
WDSF_SEEK	./dev/storage/ide_wdcreg.h	157;"	d
WDSF_SET_CACHE_SGMT	./dev/storage/ide_wdcreg.h	134;"	d
WDSF_SET_CURRENT	./dev/storage/ide_wdcreg.h	149;"	d
WDSF_SET_MODE	./dev/storage/ide_wdcreg.h	125;"	d
WDSF_SRV_DS	./dev/storage/ide_wdcreg.h	155;"	d
WDSF_SRV_EN	./dev/storage/ide_wdcreg.h	137;"	d
WDSF_VERIFY	./dev/storage/ide_wdcreg.h	158;"	d
WDSF_WRITE_CACHE_DS	./dev/storage/ide_wdcreg.h	141;"	d
WO	./arch/x86/decoder_tables.cc	/^        WO = WordImm,$/;"	e	enum:X86ISA::SizeType	file:
WORD_TO_DOUBLE	./arch/arm/types.hh	/^        WORD_TO_DOUBLE,$/;"	e	enum:ArmISA::ConvertType
WORD_TO_DOUBLE	./arch/mips/types.hh	/^    WORD_TO_DOUBLE,$/;"	e	enum:MipsISA::ConvertType
WORD_TO_LONG	./arch/arm/types.hh	/^        WORD_TO_LONG,$/;"	e	enum:ArmISA::ConvertType
WORD_TO_LONG	./arch/mips/types.hh	/^    WORD_TO_LONG,$/;"	e	enum:MipsISA::ConvertType
WORD_TO_PS	./arch/arm/types.hh	/^        WORD_TO_PS,$/;"	e	enum:ArmISA::ConvertType
WORD_TO_PS	./arch/mips/types.hh	/^    WORD_TO_PS,$/;"	e	enum:MipsISA::ConvertType
WORD_TO_SINGLE	./arch/arm/types.hh	/^        WORD_TO_SINGLE,$/;"	e	enum:ArmISA::ConvertType
WORD_TO_SINGLE	./arch/mips/types.hh	/^    WORD_TO_SINGLE,$/;"	e	enum:MipsISA::ConvertType
WRITE	./mem/dram_ctrl.hh	/^        WRITE,$/;"	e	enum:DRAMCtrl::BusState
WRITE_TO_READ	./mem/dram_ctrl.hh	/^        WRITE_TO_READ$/;"	e	enum:DRAMCtrl::BusState
WaitForClientInit	./base/vnc/vncserver.hh	/^        WaitForClientInit,$/;"	e	enum:VncServer::ConnectionState
WaitForProtocolVersion	./base/vnc/vncserver.hh	/^        WaitForProtocolVersion,$/;"	e	enum:VncServer::ConnectionState
WaitForSecurityResponse	./base/vnc/vncserver.hh	/^        WaitForSecurityResponse,$/;"	e	enum:VncServer::ConnectionState
WaitRec	./sim/process.hh	/^        WaitRec(Addr chan, ThreadContext *ctx)$/;"	f	struct:Process::WaitRec
WaitRec	./sim/process.hh	/^    struct WaitRec$/;"	s	class:Process
Waiting	./arch/x86/pagetable_walker.hh	/^                Waiting,$/;"	e	enum:X86ISA::Walker::WalkerState::State
WaitingBufType	./mem/ruby/slicc_interface/AbstractController.hh	/^    typedef std::map<Addr, MsgVecType* > WaitingBufType;$/;"	t	class:AbstractController
WakeupFetch	./cpu/minor/pipe_data.hh	/^        WakeupFetch,$/;"	e	enum:Minor::BranchData::Reason
Walker	./arch/x86/pagetable_walker.hh	/^        Walker(const Params *params) :$/;"	f	class:X86ISA::Walker
Walker	./arch/x86/pagetable_walker.hh	/^    class Walker : public MemObject$/;"	c	namespace:X86ISA
WalkerPort	./arch/x86/pagetable_walker.hh	/^            WalkerPort(const std::string &_name, Walker * _walker) :$/;"	f	class:X86ISA::Walker::WalkerPort
WalkerPort	./arch/x86/pagetable_walker.hh	/^        class WalkerPort : public MasterPort$/;"	c	class:X86ISA::Walker
WalkerSenderState	./arch/x86/pagetable_walker.hh	/^            WalkerSenderState(WalkerState * _senderWalk) :$/;"	f	struct:X86ISA::Walker::WalkerSenderState
WalkerSenderState	./arch/x86/pagetable_walker.hh	/^        struct WalkerSenderState : public Packet::SenderState$/;"	s	class:X86ISA::Walker
WalkerState	./arch/arm/table_walker.cc	/^TableWalker::WalkerState::WalkerState() :$/;"	f	class:TableWalker::WalkerState
WalkerState	./arch/arm/table_walker.hh	/^    class WalkerState$/;"	c	class:ArmISA::TableWalker
WalkerState	./arch/x86/pagetable_walker.hh	/^            WalkerState(Walker * _walker, BaseTLB::Translation *_translation,$/;"	f	class:X86ISA::Walker::WalkerState
WalkerState	./arch/x86/pagetable_walker.hh	/^        class WalkerState$/;"	c	class:X86ISA::Walker
WarnFunc	./arch/generic/debugfaults.hh	/^        WarnFunc,$/;"	e	enum:GenericISA::M5DebugFault::DebugFunc
WarnOnce	./sim/syscall_emul.hh	/^        WarnOnce = 2$/;"	e	enum:SyscallDesc::Flags
WarnOnceFunc	./arch/generic/debugfaults.hh	/^        WarnOnceFunc$/;"	e	enum:GenericISA::M5DebugFault::DebugFunc
WarnUnimplemented	./arch/arm/insts/pseudo.cc	/^WarnUnimplemented::WarnUnimplemented(const char *_mnemonic,$/;"	f	class:WarnUnimplemented
WarnUnimplemented	./arch/arm/insts/pseudo.hh	/^class WarnUnimplemented : public ArmStaticInst$/;"	c
WatchDogReset	./arch/sparc/faults.hh	/^class WatchDogReset : public SparcFault<WatchDogReset> {};$/;"	c	namespace:SparcISA
WatchdogControlReg	./dev/arm/timer_cpulocal.hh	/^            WatchdogControlReg     = 0x28,$/;"	e	enum:CpuLocalTimer::Timer::__anon22
WatchdogCounterReg	./dev/arm/timer_cpulocal.hh	/^            WatchdogCounterReg     = 0x24,$/;"	e	enum:CpuLocalTimer::Timer::__anon22
WatchdogDisableReg	./dev/arm/timer_cpulocal.hh	/^            WatchdogDisableReg     = 0x34,$/;"	e	enum:CpuLocalTimer::Timer::__anon22
WatchdogIntStatusReg	./dev/arm/timer_cpulocal.hh	/^            WatchdogIntStatusReg   = 0x2C,$/;"	e	enum:CpuLocalTimer::Timer::__anon22
WatchdogLoadReg	./dev/arm/timer_cpulocal.hh	/^            WatchdogLoadReg        = 0x20,$/;"	e	enum:CpuLocalTimer::Timer::__anon22
WatchdogResetStatusReg	./dev/arm/timer_cpulocal.hh	/^            WatchdogResetStatusReg = 0x30,$/;"	e	enum:CpuLocalTimer::Timer::__anon22
WholeTranslationState	./cpu/translation.hh	/^    WholeTranslationState(RequestPtr _req, RequestPtr _sreqLow,$/;"	f	class:WholeTranslationState
WholeTranslationState	./cpu/translation.hh	/^    WholeTranslationState(RequestPtr _req, uint8_t *_data, uint64_t *_res,$/;"	f	class:WholeTranslationState
WholeTranslationState	./cpu/translation.hh	/^class WholeTranslationState$/;"	c
WideIO_200_x128	./mem/DRAMCtrl.py	/^class WideIO_200_x128(DRAMCtrl):$/;"	c
Width	./base/bitmap.hh	/^        uint32_t Width;$/;"	m	struct:Bitmap::InfoHeaderV1
WildcardState	./mem/slicc/symbols/State.py	/^class WildcardState(State):$/;"	c
WindowOverlap	./arch/sparc/isa.hh	/^    static const int WindowOverlap = 8;$/;"	m	class:SparcISA::ISA
WireBuffer	./mem/ruby/structures/WireBuffer.cc	/^WireBuffer::WireBuffer(const Params *p)$/;"	f	class:WireBuffer
WireBuffer	./mem/ruby/structures/WireBuffer.hh	/^class WireBuffer : public SimObject$/;"	c
WordImm	./arch/x86/decoder_tables.cc	/^        WordImm,$/;"	e	enum:X86ISA::SizeType	file:
WrapMode	./dev/x86/i8042.hh	/^        WrapMode = 0xEE,$/;"	e	enum:X86ISA::PS2Mouse::Command
Write	./arch/generic/tlb.hh	/^    enum Mode { Read, Write, Execute };$/;"	e	enum:BaseTLB::Mode
WriteCluster	./mem/mem_checker.hh	/^        WriteCluster()$/;"	f	class:MemChecker::WriteCluster
WriteCluster	./mem/mem_checker.hh	/^    class WriteCluster$/;"	c	class:MemChecker
WriteClusterList	./mem/mem_checker.hh	/^    typedef std::list<WriteCluster> WriteClusterList;$/;"	t	class:MemChecker
WriteCommandByte	./dev/x86/i8042.hh	/^        WriteCommandByte = 0x60,$/;"	e	enum:X86ISA::I8042::Command
WriteControllerRamBase	./dev/x86/i8042.hh	/^        WriteControllerRamBase = 0x60,$/;"	e	enum:X86ISA::I8042::Command
WriteKeyboardOutputBuff	./dev/x86/i8042.hh	/^        WriteKeyboardOutputBuff = 0xD2,$/;"	e	enum:X86ISA::I8042::Command
WriteLineReq	./mem/packet.hh	/^        WriteLineReq,$/;"	e	enum:MemCmd::Command
WriteMouseOutputBuff	./dev/x86/i8042.hh	/^        WriteMouseOutputBuff = 0xD3,$/;"	e	enum:X86ISA::I8042::Command
WriteOutputPort	./dev/x86/i8042.hh	/^        WriteOutputPort = 0xD1,$/;"	e	enum:X86ISA::I8042::Command
WritePort	./cpu/o3/FuncUnitConfig.py	/^class WritePort(FUDesc):$/;"	c
WriteReq	./mem/packet.hh	/^        WriteReq,$/;"	e	enum:MemCmd::Command
WriteResp	./mem/packet.hh	/^        WriteResp,$/;"	e	enum:MemCmd::Command
WriteToMouse	./dev/x86/i8042.hh	/^        WriteToMouse = 0xD4,$/;"	e	enum:X86ISA::I8042::Command
WriteWait	./dev/storage/ide_disk.hh	/^    WriteWait,$/;"	e	enum:Events
WritebackClean	./mem/packet.hh	/^        WritebackClean,$/;"	e	enum:MemCmd::Command
WritebackDirty	./mem/packet.hh	/^        WritebackDirty,$/;"	e	enum:MemCmd::Command
WritebackEvent	./cpu/o3/lsq_unit.hh	/^    class WritebackEvent : public Event {$/;"	c	class:LSQUnit
WritebackEvent	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::WritebackEvent::WritebackEvent(DynInstPtr &_inst, PacketPtr _pkt,$/;"	f	class:LSQUnit::WritebackEvent
X	./arch/x86/regs/int.hh	/^        Bitfield<15,0> X;$/;"	m	namespace:X86ISA
X86ACPIRSDP	./arch/x86/bios/ACPI.py	/^class X86ACPIRSDP(SimObject):$/;"	c
X86ACPIRSDT	./arch/x86/bios/ACPI.py	/^class X86ACPIRSDT(X86ACPISysDescTable):$/;"	c
X86ACPISysDescTable	./arch/x86/bios/ACPI.py	/^class X86ACPISysDescTable(SimObject):$/;"	c
X86ACPIXSDT	./arch/x86/bios/ACPI.py	/^class X86ACPIXSDT(X86ACPISysDescTable):$/;"	c
X86Abort	./arch/x86/faults.hh	/^        X86Abort(const char * name, const char * mnem,$/;"	f	class:X86ISA::X86Abort
X86Abort	./arch/x86/faults.hh	/^    class X86Abort : public X86FaultBase$/;"	c	namespace:X86ISA
X86AuxiliaryVectorTypes	./arch/x86/process.hh	/^    enum X86AuxiliaryVectorTypes {$/;"	g	namespace:X86ISA
X86E820Entry	./arch/x86/bios/E820.py	/^class X86E820Entry(SimObject):$/;"	c
X86E820Table	./arch/x86/bios/E820.py	/^class X86E820Table(SimObject):$/;"	c
X86Fault	./arch/x86/faults.hh	/^        X86Fault(const char * name, const char * mnem,$/;"	f	class:X86ISA::X86Fault
X86Fault	./arch/x86/faults.hh	/^    class X86Fault : public X86FaultBase$/;"	c	namespace:X86ISA
X86FaultBase	./arch/x86/faults.hh	/^        X86FaultBase(const char * _faultName, const char * _mnem,$/;"	f	class:X86ISA::X86FaultBase
X86FaultBase	./arch/x86/faults.hh	/^    class X86FaultBase : public FaultBase$/;"	c	namespace:X86ISA
X86GdbRegCache	./arch/x86/remote_gdb.hh	/^    class X86GdbRegCache : public BaseGdbRegCache$/;"	c	class:X86ISA::RemoteGDB
X86I8259CascadeMode	./dev/x86/I8259.py	/^class X86I8259CascadeMode(Enum):$/;"	c
X86ISA	./arch/x86/X86ISA.py	/^class X86ISA(SimObject):$/;"	c
X86ISA	./arch/x86/bios/acpi.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/bios/e820.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/bios/intelmp.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/bios/smbios.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/cpuid.cc	/^namespace X86ISA {$/;"	n	file:
X86ISA	./arch/x86/cpuid.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/decoder.cc	/^namespace X86ISA$/;"	n	file:
X86ISA	./arch/x86/decoder.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/decoder_tables.cc	/^namespace X86ISA$/;"	n	file:
X86ISA	./arch/x86/emulenv.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/faults.cc	/^namespace X86ISA$/;"	n	file:
X86ISA	./arch/x86/faults.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/insts/badmicroop.cc	/^namespace X86ISA$/;"	n	file:
X86ISA	./arch/x86/insts/badmicroop.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/insts/macroop.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/insts/microfpop.cc	/^namespace X86ISA$/;"	n	file:
X86ISA	./arch/x86/insts/microfpop.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/insts/microldstop.cc	/^namespace X86ISA$/;"	n	file:
X86ISA	./arch/x86/insts/microldstop.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/insts/micromediaop.cc	/^namespace X86ISA$/;"	n	file:
X86ISA	./arch/x86/insts/micromediaop.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/insts/microop.cc	/^namespace X86ISA$/;"	n	file:
X86ISA	./arch/x86/insts/microop.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/insts/microregop.cc	/^namespace X86ISA$/;"	n	file:
X86ISA	./arch/x86/insts/microregop.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/insts/static_inst.cc	/^namespace X86ISA$/;"	n	file:
X86ISA	./arch/x86/insts/static_inst.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/interrupts.cc	/^namespace X86ISA$/;"	n	file:
X86ISA	./arch/x86/interrupts.hh	/^namespace X86ISA {$/;"	n
X86ISA	./arch/x86/intmessage.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/isa.cc	/^namespace X86ISA$/;"	n	file:
X86ISA	./arch/x86/isa.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/isa_traits.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/kernel_stats.hh	/^namespace X86ISA {$/;"	n
X86ISA	./arch/x86/ldstflags.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/linux/process.hh	/^namespace X86ISA {$/;"	n
X86ISA	./arch/x86/locked_mem.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/memhelpers.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/microcode_rom.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/mmapped_ipr.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/pagetable.cc	/^namespace X86ISA$/;"	n	file:
X86ISA	./arch/x86/pagetable.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/pagetable_walker.cc	/^namespace X86ISA {$/;"	n	file:
X86ISA	./arch/x86/pagetable_walker.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/process.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/pseudo_inst.cc	/^namespace X86ISA {$/;"	n	file:
X86ISA	./arch/x86/pseudo_inst.hh	/^namespace X86ISA {$/;"	n
X86ISA	./arch/x86/registers.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/regs/apic.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/regs/ccr.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/regs/float.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/regs/int.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/regs/misc.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/regs/msr.cc	/^namespace X86ISA$/;"	n	file:
X86ISA	./arch/x86/regs/msr.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/regs/segment.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/remote_gdb.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/stacktrace.cc	/^namespace X86ISA$/;"	n	file:
X86ISA	./arch/x86/stacktrace.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/system.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/tlb.cc	/^namespace X86ISA {$/;"	n	file:
X86ISA	./arch/x86/tlb.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/types.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/utility.cc	/^namespace X86ISA {$/;"	n	file:
X86ISA	./arch/x86/utility.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/vtophys.cc	/^namespace X86ISA$/;"	n	file:
X86ISA	./arch/x86/vtophys.hh	/^namespace X86ISA$/;"	n
X86ISA	./arch/x86/x86_traits.hh	/^namespace X86ISA$/;"	n
X86ISA	./dev/x86/cmos.hh	/^namespace X86ISA$/;"	n
X86ISA	./dev/x86/i8042.hh	/^namespace X86ISA$/;"	n
X86ISA	./dev/x86/i82094aa.hh	/^namespace X86ISA$/;"	n
X86ISA	./dev/x86/i8237.hh	/^namespace X86ISA$/;"	n
X86ISA	./dev/x86/i8254.hh	/^namespace X86ISA$/;"	n
X86ISA	./dev/x86/i8259.hh	/^namespace X86ISA$/;"	n
X86ISA	./dev/x86/intdev.hh	/^namespace X86ISA {$/;"	n
X86ISA	./dev/x86/south_bridge.hh	/^namespace X86ISA$/;"	n
X86ISA	./dev/x86/speaker.hh	/^namespace X86ISA$/;"	n
X86ISAInst	./arch/x86/microcode_rom.hh	/^namespace X86ISAInst$/;"	n
X86IntLine	./dev/x86/X86IntPin.py	/^class X86IntLine(SimObject):$/;"	c
X86IntSinkPin	./dev/x86/X86IntPin.py	/^class X86IntSinkPin(SimObject):$/;"	c
X86IntSourcePin	./dev/x86/X86IntPin.py	/^class X86IntSourcePin(SimObject):$/;"	c
X86Intel8254Timer	./dev/x86/i8254.hh	/^        X86Intel8254Timer(const std::string &name, I8254 * _parent) :$/;"	f	class:X86ISA::I8254::X86Intel8254Timer
X86Intel8254Timer	./dev/x86/i8254.hh	/^    class X86Intel8254Timer : public Intel8254Timer$/;"	c	class:X86ISA::I8254
X86IntelMPAddrSpaceMapping	./arch/x86/bios/IntelMP.py	/^class X86IntelMPAddrSpaceMapping(X86IntelMPExtConfigEntry):$/;"	c
X86IntelMPAddressType	./arch/x86/bios/IntelMP.py	/^class X86IntelMPAddressType(Enum):$/;"	c
X86IntelMPBaseConfigEntry	./arch/x86/bios/IntelMP.py	/^class X86IntelMPBaseConfigEntry(SimObject):$/;"	c
X86IntelMPBus	./arch/x86/bios/IntelMP.py	/^class X86IntelMPBus(X86IntelMPBaseConfigEntry):$/;"	c
X86IntelMPBusHierarchy	./arch/x86/bios/IntelMP.py	/^class X86IntelMPBusHierarchy(X86IntelMPExtConfigEntry):$/;"	c
X86IntelMPCompatAddrSpaceMod	./arch/x86/bios/IntelMP.py	/^class X86IntelMPCompatAddrSpaceMod(X86IntelMPExtConfigEntry):$/;"	c
X86IntelMPConfigTable	./arch/x86/bios/IntelMP.py	/^class X86IntelMPConfigTable(SimObject):$/;"	c
X86IntelMPExtConfigEntry	./arch/x86/bios/IntelMP.py	/^class X86IntelMPExtConfigEntry(SimObject):$/;"	c
X86IntelMPFloatingPointer	./arch/x86/bios/IntelMP.py	/^class X86IntelMPFloatingPointer(SimObject):$/;"	c
X86IntelMPIOAPIC	./arch/x86/bios/IntelMP.py	/^class X86IntelMPIOAPIC(X86IntelMPBaseConfigEntry):$/;"	c
X86IntelMPIOIntAssignment	./arch/x86/bios/IntelMP.py	/^class X86IntelMPIOIntAssignment(X86IntelMPBaseConfigEntry):$/;"	c
X86IntelMPInterruptType	./arch/x86/bios/IntelMP.py	/^class X86IntelMPInterruptType(Enum):$/;"	c
X86IntelMPLocalIntAssignment	./arch/x86/bios/IntelMP.py	/^class X86IntelMPLocalIntAssignment(X86IntelMPBaseConfigEntry):$/;"	c
X86IntelMPPolarity	./arch/x86/bios/IntelMP.py	/^class X86IntelMPPolarity(Enum):$/;"	c
X86IntelMPProcessor	./arch/x86/bios/IntelMP.py	/^class X86IntelMPProcessor(X86IntelMPBaseConfigEntry):$/;"	c
X86IntelMPRangeList	./arch/x86/bios/IntelMP.py	/^class X86IntelMPRangeList(Enum):$/;"	c
X86IntelMPTriggerMode	./arch/x86/bios/IntelMP.py	/^class X86IntelMPTriggerMode(Enum):$/;"	c
X86Interrupt	./arch/x86/faults.hh	/^        X86Interrupt(const char * name, const char * mnem,$/;"	f	class:X86ISA::X86Interrupt
X86Interrupt	./arch/x86/faults.hh	/^    class X86Interrupt : public X86FaultBase$/;"	c	namespace:X86ISA
X86KvmCPU	./cpu/kvm/X86KvmCPU.py	/^class X86KvmCPU(BaseKvmCPU):$/;"	c
X86KvmCPU	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::X86KvmCPU(X86KvmCPUParams *params)$/;"	f	class:X86KvmCPU
X86KvmCPU	./cpu/kvm/x86_cpu.hh	/^class X86KvmCPU : public BaseKvmCPU$/;"	c
X86Linux32	./arch/x86/linux/linux.hh	/^class X86Linux32 : public Linux$/;"	c
X86Linux64	./arch/x86/linux/linux.hh	/^class X86Linux64 : public Linux$/;"	c
X86LiveProcess	./arch/x86/process.cc	/^X86LiveProcess::X86LiveProcess(LiveProcessParams * params, ObjectFile *objFile,$/;"	f	class:X86LiveProcess
X86LiveProcess	./arch/x86/process.hh	/^    class X86LiveProcess : public LiveProcess$/;"	c	namespace:X86ISA
X86LocalApic	./arch/x86/X86LocalApic.py	/^class X86LocalApic(BasicPioDevice):$/;"	c
X86MicroopBase	./arch/x86/insts/microop.hh	/^        X86MicroopBase(ExtMachInst _machInst,$/;"	f	class:X86ISA::X86MicroopBase
X86MicroopBase	./arch/x86/insts/microop.hh	/^    class X86MicroopBase : public X86StaticInst$/;"	c	namespace:X86ISA
X86Mode	./arch/x86/types.hh	/^    enum X86Mode {$/;"	g	namespace:X86ISA
X86NativeTrace	./arch/x86/X86NativeTrace.py	/^class X86NativeTrace(NativeTrace):$/;"	c
X86NativeTrace	./arch/x86/nativetrace.cc	/^X86NativeTrace::X86NativeTrace(const Params *p)$/;"	f	class:Trace::X86NativeTrace
X86NativeTrace	./arch/x86/nativetrace.hh	/^class X86NativeTrace : public NativeTrace$/;"	c	namespace:Trace
X86PagetableWalker	./arch/x86/X86TLB.py	/^class X86PagetableWalker(MemObject):$/;"	c
X86RTC	./dev/x86/cmos.hh	/^        X86RTC(EventManager *em, const std::string &n, const struct tm time,$/;"	f	class:X86ISA::Cmos::X86RTC
X86RTC	./dev/x86/cmos.hh	/^    class X86RTC : public MC146818$/;"	c	class:X86ISA::Cmos
X86SMBiosBiosInformation	./arch/x86/bios/SMBios.py	/^class X86SMBiosBiosInformation(X86SMBiosSMBiosStructure):$/;"	c
X86SMBiosSMBiosStructure	./arch/x86/bios/SMBios.py	/^class X86SMBiosSMBiosStructure(SimObject):$/;"	c
X86SMBiosSMBiosTable	./arch/x86/bios/SMBios.py	/^class X86SMBiosSMBiosTable(SimObject):$/;"	c
X86StaticInst	./arch/x86/insts/static_inst.hh	/^        X86StaticInst(const char *mnem,$/;"	f	class:X86ISA::X86StaticInst
X86StaticInst	./arch/x86/insts/static_inst.hh	/^    class X86StaticInst : public StaticInst$/;"	c	namespace:X86ISA
X86SubMode	./arch/x86/types.hh	/^    enum X86SubMode {$/;"	g	namespace:X86ISA
X86System	./arch/x86/X86System.py	/^class X86System(System):$/;"	c
X86System	./arch/x86/system.cc	/^X86System::X86System(Params *p) :$/;"	f	class:X86System
X86System	./arch/x86/system.hh	/^class X86System : public System$/;"	c
X86TLB	./arch/x86/X86TLB.py	/^class X86TLB(BaseTLB):$/;"	c
X86Trap	./arch/x86/faults.hh	/^        X86Trap(const char * name, const char * mnem,$/;"	f	class:X86ISA::X86Trap
X86Trap	./arch/x86/faults.hh	/^    class X86Trap : public X86FaultBase$/;"	c	namespace:X86ISA
X86_64	./base/loader/object_file.hh	/^        X86_64,$/;"	e	enum:ObjectFile::Arch
X86_64LinuxProcess	./arch/x86/linux/process.cc	/^X86_64LinuxProcess::X86_64LinuxProcess(LiveProcessParams * params,$/;"	f	class:X86_64LinuxProcess
X86_64LinuxProcess	./arch/x86/linux/process.hh	/^class X86_64LinuxProcess : public X86_64LiveProcess$/;"	c	namespace:X86ISA
X86_64LiveProcess	./arch/x86/process.cc	/^X86_64LiveProcess::X86_64LiveProcess(LiveProcessParams *params,$/;"	f	class:X86_64LiveProcess
X86_64LiveProcess	./arch/x86/process.hh	/^    class X86_64LiveProcess : public X86LiveProcess$/;"	c	namespace:X86ISA
X87FpExceptionPending	./arch/x86/faults.hh	/^        X87FpExceptionPending() :$/;"	f	class:X86ISA::X87FpExceptionPending
X87FpExceptionPending	./arch/x86/faults.hh	/^    class X87FpExceptionPending : public X86Fault$/;"	c	namespace:X86ISA
X87StatusBit	./arch/x86/regs/misc.hh	/^    enum X87StatusBit {$/;"	g	namespace:X86ISA
XBAR	./python/m5/util/dot_writer.py	/^    XBAR = 2$/;"	v	class:NodeType
XPelsPerMeter	./base/bitmap.hh	/^        uint32_t XPelsPerMeter;$/;"	m	struct:Bitmap::InfoHeaderV1
XReg	./arch/arm/insts/neon64_mem.hh	/^typedef uint64_t XReg;$/;"	t	namespace:ArmISA
XSDT	./arch/x86/bios/acpi.cc	/^X86ISA::ACPI::XSDT::XSDT(Params *p) :$/;"	f	class:X86ISA::ACPI::XSDT
XSDT	./arch/x86/bios/acpi.hh	/^class XSDT : public SysDescTable$/;"	c	namespace:X86ISA::ACPI
XferCap	./dev/pci/CopyEngine.py	/^    XferCap = Param.MemorySize('4kB', "Number of bits of transfer size that are supported")$/;"	v	class:CopyEngine
XopPrefix	./arch/x86/types.hh	/^        XopPrefix,$/;"	e	enum:X86ISA::Prefixes
YPelsPerMeter	./base/bitmap.hh	/^        uint32_t YPelsPerMeter;$/;"	m	struct:Bitmap::InfoHeaderV1
ZEBit	./arch/x86/regs/misc.hh	/^        ZEBit = 1 << 2,$/;"	e	enum:X86ISA::X87StatusBit
ZF	./arch/x86/insts/microop.hh	/^            ZF,$/;"	e	enum:X86ISA::ConditionTests::CondTest
ZFBit	./arch/x86/regs/misc.hh	/^        ZFBit = 1 << 6,$/;"	e	enum:X86ISA::CondFlagBit
ZMAGIC	./base/loader/exec_aout.h	47;"	d
ZW	./arch/x86/decoder_tables.cc	/^        ZW = ZWordImm,$/;"	e	enum:X86ISA::SizeType	file:
ZWordImm	./arch/x86/decoder_tables.cc	/^        ZWordImm,$/;"	e	enum:X86ISA::SizeType	file:
ZeroCopyMark	./dev/net/sinic.hh	/^        uint32_t ZeroCopyMark; \/\/ 0x1c$/;"	m	struct:Sinic::Device::__anon11
ZeroCopySize	./dev/net/sinic.hh	/^        uint32_t ZeroCopySize; \/\/ 0x18$/;"	m	struct:Sinic::Device::__anon11
ZeroPGE	./arch/alpha/linux/system.hh	/^    Addr ZeroPGE() const   { return KernelStart + 0x0A000; }$/;"	f	class:LinuxAlphaSystem
ZeroPGE	./arch/mips/linux/system.hh	/^    Addr ZeroPGE() const   { return KernelStart + 0x0A000; }$/;"	f	class:LinuxMipsSystem
ZeroReg	./arch/alpha/registers.hh	/^const RegIndex ZeroReg = 31;     \/\/ architecturally meaningful$/;"	m	namespace:AlphaISA
ZeroReg	./arch/arm/registers.hh	/^const int ZeroReg = INTREG_ZERO;$/;"	m	namespace:ArmISA
ZeroReg	./arch/mips/registers.hh	/^const int ZeroReg = 0;$/;"	m	namespace:MipsISA
ZeroReg	./arch/power/registers.hh	/^const int ZeroReg = NumIntRegs - 1;$/;"	m	namespace:PowerISA
ZeroReg	./arch/sparc/registers.hh	/^const int ZeroReg = 0;      \/\/ architecturally meaningful$/;"	m	namespace:SparcISA
ZeroReg	./arch/x86/registers.hh	/^const int ZeroReg = NUM_INTREGS;$/;"	m	namespace:X86ISA
_DEV_ATA_ATAREG_H_	./dev/storage/ide_atareg.h	34;"	d
_DEV_IC_WDCREG_H_	./dev/storage/ide_wdcreg.h	39;"	d
_F64_readv	./kern/tru64/tru64_syscalls.hh	/^        _F64_readv = 263,$/;"	e	enum:SystemCalls::__anon102
_F64_writev	./kern/tru64/tru64_syscalls.hh	/^        _F64_writev = 264,$/;"	e	enum:SystemCalls::__anon102
_GLIBCPP_USE_C99	./base/stats/text.cc	32;"	d	file:
_NextEthernetAddr	./python/m5/params.py	/^_NextEthernetAddr = "00:90:00:00:00:01"$/;"	v
_SYM_H	./base/loader/coff_sym.h	52;"	d
_SYS_EXEC_AOUT_H_	./base/loader/exec_aout.h	38;"	d
_SYS_EXEC_ECOFF_H_	./base/loader/exec_ecoff.h	38;"	d
_SYS_NMLN	./kern/linux/linux.hh	/^    static const int _SYS_NMLN = 65;$/;"	m	class:Linux
_SYS_NMLN	./kern/operatingsystem.hh	/^    static const int _SYS_NMLN = 65;$/;"	m	class:OperatingSystem
_SYS_NMLN	./kern/solaris/solaris.hh	/^    static const int _SYS_NMLN = 257;$/;"	m	class:Solaris
_SYS_NMLN	./kern/tru64/tru64.hh	/^    static const int _SYS_NMLN = 32;$/;"	m	class:Tru64
_VIRTIO_RING_H	./dev/virtio/virtio_ring.h	2;"	d
__ABSTRACT_MEMORY_HH__	./mem/abstract_mem.hh	50;"	d
__ALPHA_ACCESS_H__	./dev/alpha/access.h	32;"	d
__ALPHA_ALPHA_LINUX_LINUX_HH__	./arch/alpha/linux/linux.hh	32;"	d
__ALPHA_ALPHA_TRU64_TRU64_HH__	./arch/alpha/tru64/tru64.hh	32;"	d
__ALPHA_LINUX_PROCESS_HH__	./arch/alpha/linux/process.hh	32;"	d
__AOUT_MACHDEP_H__	./arch/alpha/aout_machdep.h	33;"	d
__AOUT_OBJECT_HH__	./base/loader/aout_object.hh	32;"	d
__ARCH_ALPHA_DECODER_HH__	./arch/alpha/decoder.hh	32;"	d
__ARCH_ALPHA_EV5_HH__	./arch/alpha/ev5.hh	34;"	d
__ARCH_ALPHA_FAULTS_HH__	./arch/alpha/faults.hh	33;"	d
__ARCH_ALPHA_FREEBSD_SYSTEM_HH__	./arch/alpha/freebsd/system.hh	32;"	d
__ARCH_ALPHA_INTERRUPT_HH__	./arch/alpha/interrupts.hh	33;"	d
__ARCH_ALPHA_IPR_HH__	./arch/alpha/ipr.hh	33;"	d
__ARCH_ALPHA_ISA_HH__	./arch/alpha/isa.hh	32;"	d
__ARCH_ALPHA_ISA_TRAITS_HH__	./arch/alpha/isa_traits.hh	33;"	d
__ARCH_ALPHA_KERNEL_STATS_HH__	./arch/alpha/kernel_stats.hh	33;"	d
__ARCH_ALPHA_LINUX_SYSTEM_HH__	./arch/alpha/linux/system.hh	34;"	d
__ARCH_ALPHA_LOCKED_MEM_HH__	./arch/alpha/locked_mem.hh	44;"	d
__ARCH_ALPHA_MICROCODE_ROM_HH__	./arch/alpha/microcode_rom.hh	32;"	d
__ARCH_ALPHA_MMAPPED_IPR_HH__	./arch/alpha/mmapped_ipr.hh	32;"	d
__ARCH_ALPHA_MT_HH__	./arch/alpha/mt.hh	33;"	d
__ARCH_ALPHA_OSFPAL_HH__	./arch/alpha/osfpal.hh	32;"	d
__ARCH_ALPHA_PAGETABLE_H__	./arch/alpha/pagetable.hh	33;"	d
__ARCH_ALPHA_PROCESS_HH__	./arch/alpha/process.hh	33;"	d
__ARCH_ALPHA_PSEUDO_INST_HH__	./arch/alpha/pseudo_inst.hh	32;"	d
__ARCH_ALPHA_REGISTERS_HH__	./arch/alpha/registers.hh	32;"	d
__ARCH_ALPHA_REGREDIR_HH__	./arch/alpha/regredir.hh	32;"	d
__ARCH_ALPHA_REMOTE_GDB_HH__	./arch/alpha/remote_gdb.hh	34;"	d
__ARCH_ALPHA_STACKTRACE_HH__	./arch/alpha/stacktrace.hh	32;"	d
__ARCH_ALPHA_SYSTEM_HH__	./arch/alpha/system.hh	33;"	d
__ARCH_ALPHA_TLB_HH__	./arch/alpha/tlb.hh	33;"	d
__ARCH_ALPHA_TRU64_PROCESS_HH__	./arch/alpha/tru64/process.hh	32;"	d
__ARCH_ALPHA_TRU64_SYSTEM_HH__	./arch/alpha/tru64/system.hh	33;"	d
__ARCH_ALPHA_TYPES_HH__	./arch/alpha/types.hh	33;"	d
__ARCH_ALPHA_UTILITY_HH__	./arch/alpha/utility.hh	33;"	d
__ARCH_ALPHA_VPTR_HH__	./sim/vptr.hh	32;"	d
__ARCH_ALPHA_VTOPHYS_H__	./arch/alpha/vtophys.hh	33;"	d
__ARCH_ARM_CCREGS_HH__	./arch/arm/ccregs.hh	40;"	d
__ARCH_ARM_DECODER_HH__	./arch/arm/decoder.hh	44;"	d
__ARCH_ARM_FREEBSD_FREEBSD_HH__	./arch/arm/freebsd/freebsd.hh	34;"	d
__ARCH_ARM_FREEBSD_PROCESS_HH__	./arch/arm/freebsd/process.hh	34;"	d
__ARCH_ARM_FREEBSD_SYSTEM_HH__	./arch/arm/freebsd/system.hh	34;"	d
__ARCH_ARM_INSTS_BRANCH64_HH__	./arch/arm/insts/branch64.hh	40;"	d
__ARCH_ARM_INSTS_BRANCH_HH__	./arch/arm/insts/branch.hh	43;"	d
__ARCH_ARM_INSTS_DATA64_HH__	./arch/arm/insts/data64.hh	40;"	d
__ARCH_ARM_INSTS_FPLIB_HH__	./arch/arm/insts/fplib.hh	50;"	d
__ARCH_ARM_INSTS_MISC64_HH__	./arch/arm/insts/misc64.hh	41;"	d
__ARCH_ARM_INSTS_MISC_HH__	./arch/arm/insts/misc.hh	41;"	d
__ARCH_ARM_INSTS_MULT_HH__	./arch/arm/insts/mult.hh	40;"	d
__ARCH_ARM_INSTS_NEON64_MEM_HH__	./arch/arm/insts/neon64_mem.hh	45;"	d
__ARCH_ARM_INSTS_PREDINST_HH__	./arch/arm/insts/pred_inst.hh	43;"	d
__ARCH_ARM_INSTS_PSEUDO_HH__	./arch/arm/insts/pseudo.hh	45;"	d
__ARCH_ARM_INSTS_STATICINST_HH__	./arch/arm/insts/static_inst.hh	43;"	d
__ARCH_ARM_INSTS_VFP_HH__	./arch/arm/insts/vfp.hh	41;"	d
__ARCH_ARM_INTERRUPT_HH__	./arch/arm/interrupts.hh	44;"	d
__ARCH_ARM_INTREGS_HH__	./arch/arm/intregs.hh	46;"	d
__ARCH_ARM_ISA_DEVICE_HH__	./arch/arm/isa_device.hh	41;"	d
__ARCH_ARM_ISA_HH__	./arch/arm/isa.hh	44;"	d
__ARCH_ARM_ISA_TRAITS_HH__	./arch/arm/isa_traits.hh	46;"	d
__ARCH_ARM_KERNEL_STATS_HH__	./arch/arm/kernel_stats.hh	32;"	d
__ARCH_ARM_KVM_ARMV8_CPU_HH__	./arch/arm/kvm/armv8_cpu.hh	41;"	d
__ARCH_ARM_KVM_ARM_CPU_HH__	./arch/arm/kvm/arm_cpu.hh	41;"	d
__ARCH_ARM_KVM_BASE_CPU_HH__	./arch/arm/kvm/base_cpu.hh	41;"	d
__ARCH_ARM_KVM_GIC_HH__	./arch/arm/kvm/gic.hh	41;"	d
__ARCH_ARM_LINUX_ATAG_HH__	./arch/arm/linux/atag.hh	41;"	d
__ARCH_ARM_LINUX_LINUX_HH__	./arch/arm/linux/linux.hh	46;"	d
__ARCH_ARM_LINUX_SYSTEM_HH__	./arch/arm/linux/system.hh	44;"	d
__ARCH_ARM_LOCKED_MEM_HH__	./arch/arm/locked_mem.hh	47;"	d
__ARCH_ARM_MACROMEM_HH__	./arch/arm/insts/macromem.hh	43;"	d
__ARCH_ARM_MEM64_HH__	./arch/arm/insts/mem64.hh	40;"	d
__ARCH_ARM_MEM_HH__	./arch/arm/insts/mem.hh	43;"	d
__ARCH_ARM_MICROCODE_ROM_HH__	./arch/arm/microcode_rom.hh	32;"	d
__ARCH_ARM_MISCREGS_HH__	./arch/arm/miscregs.hh	44;"	d
__ARCH_ARM_MMAPPED_IPR_HH__	./arch/arm/mmapped_ipr.hh	34;"	d
__ARCH_ARM_NATIVETRACE_HH__	./arch/arm/nativetrace.hh	32;"	d
__ARCH_ARM_PAGETABLE_H__	./arch/arm/pagetable.hh	44;"	d
__ARCH_ARM_PMU_HH__	./arch/arm/pmu.hh	42;"	d
__ARCH_ARM_PSEUDO_INST_HH__	./arch/arm/pseudo_inst.hh	32;"	d
__ARCH_ARM_REGISTERS_HH__	./arch/arm/registers.hh	44;"	d
__ARCH_ARM_REMOTE_GDB_HH__	./arch/arm/remote_gdb.hh	49;"	d
__ARCH_ARM_STACKTRACE_HH__	./arch/arm/stacktrace.hh	32;"	d
__ARCH_ARM_STAGE2_LOOKUP_HH__	./arch/arm/stage2_lookup.hh	42;"	d
__ARCH_ARM_STAGE2_MMU_HH__	./arch/arm/stage2_mmu.hh	41;"	d
__ARCH_ARM_SYSTEM_HH__	./arch/arm/system.hh	44;"	d
__ARCH_ARM_TABLE_WALKER_HH__	./arch/arm/table_walker.hh	42;"	d
__ARCH_ARM_TLB_HH__	./arch/arm/tlb.hh	44;"	d
__ARCH_ARM_TYPES_HH__	./arch/arm/types.hh	44;"	d
__ARCH_ARM_UTILITY_HH__	./arch/arm/utility.hh	46;"	d
__ARCH_ARM_VTOPHYS_H__	./arch/arm/vtophys.hh	35;"	d
__ARCH_GENERIC_DEBUGFAULTS_HH__	./arch/generic/debugfaults.hh	41;"	d
__ARCH_GENERIC_DECODE_CACHE_HH__	./arch/generic/decode_cache.hh	32;"	d
__ARCH_GENERIC_FREEBSD_THREADINFO_HH__	./arch/generic/freebsd/threadinfo.hh	34;"	d
__ARCH_GENERIC_LINUX_THREADINFO_HH__	./arch/generic/linux/threadinfo.hh	34;"	d
__ARCH_GENERIC_MEMHELPERS_HH__	./arch/generic/memhelpers.hh	44;"	d
__ARCH_GENERIC_MMAPPED_IPR_HH__	./arch/generic/mmapped_ipr.hh	32;"	d
__ARCH_GENERIC_PSEUDO_INST_HH__	./arch/generic/pseudo_inst.hh	32;"	d
__ARCH_GENERIC_TLB_HH__	./arch/generic/tlb.hh	44;"	d
__ARCH_GENERIC_TYPES_HH__	./arch/generic/types.hh	32;"	d
__ARCH_LINUX_X86_SYSTEM_HH__	./arch/x86/linux/system.hh	41;"	d
__ARCH_MIPS_BARE_IRON_SYSTEM_HH__	./arch/mips/bare_iron/system.hh	32;"	d
__ARCH_MIPS_DECODER_HH__	./arch/mips/decoder.hh	32;"	d
__ARCH_MIPS_DSP_HH__	./arch/mips/dsp.hh	32;"	d
__ARCH_MIPS_DT_CONSTANTS_HH__	./arch/mips/dt_constants.hh	32;"	d
__ARCH_MIPS_INTERRUPT_HH__	./arch/mips/interrupts.hh	32;"	d
__ARCH_MIPS_ISA_HH__	./arch/mips/isa.hh	32;"	d
__ARCH_MIPS_ISA_TRAITS_HH__	./arch/mips/isa_traits.hh	35;"	d
__ARCH_MIPS_KERNEL_STATS_HH__	./arch/mips/kernel_stats.hh	33;"	d
__ARCH_MIPS_LINUX_ALIGNED_HH__	./arch/mips/linux/aligned.hh	33;"	d
__ARCH_MIPS_LINUX_HWRPB_HH__	./arch/mips/linux/hwrpb.hh	26;"	d
__ARCH_MIPS_LINUX_LINUX_HH__	./arch/mips/linux/linux.hh	32;"	d
__ARCH_MIPS_LINUX_SYSTEM_HH__	./arch/mips/linux/system.hh	34;"	d
__ARCH_MIPS_LINUX_THREAD_INFO_H__	./arch/mips/linux/thread_info.hh	33;"	d
__ARCH_MIPS_LOCKED_MEM_HH__	./arch/mips/locked_mem.hh	44;"	d
__ARCH_MIPS_MICROCODE_ROM_HH__	./arch/mips/microcode_rom.hh	32;"	d
__ARCH_MIPS_MMAPPED_IPR_HH__	./arch/mips/mmapped_ipr.hh	32;"	d
__ARCH_MIPS_MT_CONSTANTS_HH__	./arch/mips/mt_constants.hh	33;"	d
__ARCH_MIPS_MT_HH__	./arch/mips/mt.hh	32;"	d
__ARCH_MIPS_PAGETABLE_H__	./arch/mips/pagetable.hh	35;"	d
__ARCH_MIPS_PRA_CONSTANTS_HH__	./arch/mips/pra_constants.hh	32;"	d
__ARCH_MIPS_PSEUDO_INST_HH__	./arch/mips/pseudo_inst.hh	32;"	d
__ARCH_MIPS_REGISTERS_HH__	./arch/mips/registers.hh	33;"	d
__ARCH_MIPS_REMOTE_GDB_HH__	./arch/mips/remote_gdb.hh	35;"	d
__ARCH_MIPS_STACKTRACE_HH__	./arch/mips/stacktrace.hh	32;"	d
__ARCH_MIPS_SYSTEM_HH__	./arch/mips/system.hh	35;"	d
__ARCH_MIPS_TLB_HH__	./arch/mips/tlb.hh	36;"	d
__ARCH_MIPS_TYPES_HH__	./arch/mips/types.hh	32;"	d
__ARCH_MIPS_UTILITY_HH__	./arch/mips/utility.hh	35;"	d
__ARCH_MIPS_VTOPHYS_H__	./arch/mips/vtophys.hh	35;"	d
__ARCH_NULL_CPU_DUMMY_HH__	./arch/null/cpu_dummy.hh	41;"	d
__ARCH_NULL_ISA_TRAITS_HH__	./arch/null/isa_traits.hh	41;"	d
__ARCH_NULL_REGISTERS_HH__	./arch/null/registers.hh	41;"	d
__ARCH_NULL_REMOTE_GDB_HH__	./arch/null/remote_gdb.hh	41;"	d
__ARCH_NULL_TYPES_HH__	./arch/null/types.hh	41;"	d
__ARCH_NULL_UTILITY_HH__	./arch/null/utility.hh	41;"	d
__ARCH_POWER_DECODER_HH__	./arch/power/decoder.hh	32;"	d
__ARCH_POWER_FAULTS_HH__	./arch/power/faults.hh	34;"	d
__ARCH_POWER_INSTS_BRANCH_HH__	./arch/power/insts/branch.hh	32;"	d
__ARCH_POWER_INSTS_CONDITION_HH__	./arch/power/insts/condition.hh	32;"	d
__ARCH_POWER_INSTS_FLOATING_HH__	./arch/power/insts/floating.hh	33;"	d
__ARCH_POWER_INSTS_INTEGER_HH__	./arch/power/insts/integer.hh	32;"	d
__ARCH_POWER_INSTS_MISC_HH__	./arch/power/insts/misc.hh	32;"	d
__ARCH_POWER_INSTS_STATICINST_HH__	./arch/power/insts/static_inst.hh	32;"	d
__ARCH_POWER_INTERRUPT_HH__	./arch/power/interrupts.hh	32;"	d
__ARCH_POWER_ISA_HH__	./arch/power/isa.hh	34;"	d
__ARCH_POWER_ISA_TRAITS_HH__	./arch/power/isa_traits.hh	36;"	d
__ARCH_POWER_KERNEL_STATS_HH__	./arch/power/kernel_stats.hh	32;"	d
__ARCH_POWER_LINUX_LINUX_HH__	./arch/power/linux/linux.hh	33;"	d
__ARCH_POWER_LOCKED_MEM_HH__	./arch/power/locked_mem.hh	36;"	d
__ARCH_POWER_MEM_HH__	./arch/power/insts/mem.hh	32;"	d
__ARCH_POWER_MICROCODE_ROM_HH__	./arch/power/microcode_rom.hh	34;"	d
__ARCH_POWER_MISCREGS_HH__	./arch/power/miscregs.hh	32;"	d
__ARCH_POWER_MMAPPED_IPR_HH__	./arch/power/mmapped_ipr.hh	36;"	d
__ARCH_POWER_PAGETABLE_H__	./arch/power/pagetable.hh	39;"	d
__ARCH_POWER_PSEUDO_INST_HH__	./arch/power/pseudo_inst.hh	32;"	d
__ARCH_POWER_REGISTERS_HH__	./arch/power/registers.hh	32;"	d
__ARCH_POWER_REMOTE_GDB_HH__	./arch/power/remote_gdb.hh	38;"	d
__ARCH_POWER_STACKTRACE_HH__	./arch/power/stacktrace.hh	36;"	d
__ARCH_POWER_TLB_HH__	./arch/power/tlb.hh	38;"	d
__ARCH_POWER_TYPES_HH__	./arch/power/types.hh	32;"	d
__ARCH_POWER_UTILITY_HH__	./arch/power/utility.hh	36;"	d
__ARCH_POWER_VTOPHYS_HH__	./arch/power/vtophys.hh	37;"	d
__ARCH_SPARC_ASI_HH__	./arch/sparc/asi.hh	33;"	d
__ARCH_SPARC_DECODER_HH__	./arch/sparc/decoder.hh	32;"	d
__ARCH_SPARC_HANDLERS_HH__	./arch/sparc/handlers.hh	32;"	d
__ARCH_SPARC_INTERRUPT_HH__	./arch/sparc/interrupts.hh	33;"	d
__ARCH_SPARC_ISA_HH__	./arch/sparc/isa.hh	32;"	d
__ARCH_SPARC_ISA_TRAITS_HH__	./arch/sparc/isa_traits.hh	33;"	d
__ARCH_SPARC_KERNEL_STATS_HH__	./arch/sparc/kernel_stats.hh	32;"	d
__ARCH_SPARC_LINUX_LINUX_HH__	./arch/sparc/linux/linux.hh	32;"	d
__ARCH_SPARC_LOCKED_MEM_HH__	./arch/sparc/locked_mem.hh	32;"	d
__ARCH_SPARC_MICROCODE_ROM_HH__	./arch/sparc/microcode_rom.hh	32;"	d
__ARCH_SPARC_MISCREGS_HH__	./arch/sparc/miscregs.hh	33;"	d
__ARCH_SPARC_MMAPPED_IPR_HH__	./arch/sparc/mmapped_ipr.hh	32;"	d
__ARCH_SPARC_MT_HH__	./arch/sparc/mt.hh	33;"	d
__ARCH_SPARC_NATIVETRACE_HH__	./arch/sparc/nativetrace.hh	32;"	d
__ARCH_SPARC_PAGETABLE_HH__	./arch/sparc/pagetable.hh	32;"	d
__ARCH_SPARC_PSEUDO_INST_HH__	./arch/sparc/pseudo_inst.hh	32;"	d
__ARCH_SPARC_REGISTERS_HH__	./arch/sparc/registers.hh	33;"	d
__ARCH_SPARC_REMOTE_GDB_HH__	./arch/sparc/remote_gdb.hh	34;"	d
__ARCH_SPARC_SOLARIS_SOLARIS_HH__	./arch/sparc/solaris/solaris.hh	32;"	d
__ARCH_SPARC_SPARC_TRAITS_HH__	./arch/sparc/sparc_traits.hh	32;"	d
__ARCH_SPARC_STACKTRACE_HH__	./arch/sparc/stacktrace.hh	32;"	d
__ARCH_SPARC_SYSTEM_HH__	./arch/sparc/system.hh	32;"	d
__ARCH_SPARC_TLB_HH__	./arch/sparc/tlb.hh	32;"	d
__ARCH_SPARC_TLB_MAP_HH__	./arch/sparc/tlb_map.hh	32;"	d
__ARCH_SPARC_TYPES_HH__	./arch/sparc/types.hh	32;"	d
__ARCH_SPARC_UTILITY_HH__	./arch/sparc/utility.hh	32;"	d
__ARCH_SPARC_VTOPHYS_H__	./arch/sparc/vtophys.hh	33;"	d
__ARCH_X86_APICREGS_HH__	./arch/x86/regs/apic.hh	32;"	d
__ARCH_X86_BIOS_ACPI_HH__	./arch/x86/bios/acpi.hh	41;"	d
__ARCH_X86_BIOS_E820_HH__	./arch/x86/bios/e820.hh	41;"	d
__ARCH_X86_BIOS_INTELMP_HH__	./arch/x86/bios/intelmp.hh	41;"	d
__ARCH_X86_BIOS_SMBIOS_HH__	./arch/x86/bios/smbios.hh	44;"	d
__ARCH_X86_CCREGS_HH__	./arch/x86/regs/ccr.hh	41;"	d
__ARCH_X86_CPUID_HH__	./arch/x86/cpuid.hh	32;"	d
__ARCH_X86_DECODER_HH__	./arch/x86/decoder.hh	32;"	d
__ARCH_X86_EMULENV_HH__	./arch/x86/emulenv.hh	41;"	d
__ARCH_X86_FAULTS_HH__	./arch/x86/faults.hh	41;"	d
__ARCH_X86_FLOATREGS_HH__	./arch/x86/regs/float.hh	41;"	d
__ARCH_X86_INSTS_BADMICROOP_HH__	./arch/x86/insts/badmicroop.hh	41;"	d
__ARCH_X86_INSTS_MACROOP_HH__	./arch/x86/insts/macroop.hh	41;"	d
__ARCH_X86_INSTS_MICROFPOP_HH__	./arch/x86/insts/microfpop.hh	41;"	d
__ARCH_X86_INSTS_MICROLDSTOP_HH__	./arch/x86/insts/microldstop.hh	41;"	d
__ARCH_X86_INSTS_MICROMEDIAOP_HH__	./arch/x86/insts/micromediaop.hh	32;"	d
__ARCH_X86_INSTS_MICROOP_HH__	./arch/x86/insts/microop.hh	41;"	d
__ARCH_X86_INSTS_MICROREGOP_HH__	./arch/x86/insts/microregop.hh	41;"	d
__ARCH_X86_INSTS_STATICINST_HH__	./arch/x86/insts/static_inst.hh	41;"	d
__ARCH_X86_INTERRUPTS_HH__	./arch/x86/interrupts.hh	54;"	d
__ARCH_X86_INTMESSAGE_HH__	./arch/x86/intmessage.hh	32;"	d
__ARCH_X86_INTREGS_HH__	./arch/x86/regs/int.hh	41;"	d
__ARCH_X86_ISATRAITS_HH__	./arch/x86/isa_traits.hh	41;"	d
__ARCH_X86_ISA_HH__	./arch/x86/isa.hh	32;"	d
__ARCH_X86_KERNELSTATS_HH__	./arch/x86/kernel_stats.hh	41;"	d
__ARCH_X86_LDSTFLAGS_HH__	./arch/x86/ldstflags.hh	41;"	d
__ARCH_X86_LINUX_LINUX_HH__	./arch/x86/linux/linux.hh	41;"	d
__ARCH_X86_LOCKEDMEM_HH__	./arch/x86/locked_mem.hh	32;"	d
__ARCH_X86_MEMHELPERS_HH__	./arch/x86/memhelpers.hh	32;"	d
__ARCH_X86_MICROCODE_ROM_HH__	./arch/x86/microcode_rom.hh	32;"	d
__ARCH_X86_MISCREGS_HH__	./arch/x86/regs/misc.hh	41;"	d
__ARCH_X86_MMAPPEDIPR_HH__	./arch/x86/mmapped_ipr.hh	41;"	d
__ARCH_X86_NATIVETRACE_HH__	./arch/x86/nativetrace.hh	32;"	d
__ARCH_X86_PAGETABLE_HH__	./arch/x86/pagetable.hh	42;"	d
__ARCH_X86_PAGE_TABLE_WALKER_HH__	./arch/x86/pagetable_walker.hh	41;"	d
__ARCH_X86_PROCESS_HH__	./arch/x86/process.hh	41;"	d
__ARCH_X86_PSEUDO_INST_HH__	./arch/x86/pseudo_inst.hh	32;"	d
__ARCH_X86_REGISTERS_HH__	./arch/x86/registers.hh	42;"	d
__ARCH_X86_REG_MSR_HH__	./arch/x86/regs/msr.hh	32;"	d
__ARCH_X86_REMOTEGDB_HH__	./arch/x86/remote_gdb.hh	44;"	d
__ARCH_X86_SEGMENTREGS_HH__	./arch/x86/regs/segment.hh	41;"	d
__ARCH_X86_STACKTRACE_HH__	./arch/x86/stacktrace.hh	32;"	d
__ARCH_X86_SYSTEM_HH__	./arch/x86/system.hh	41;"	d
__ARCH_X86_TLB_HH__	./arch/x86/tlb.hh	41;"	d
__ARCH_X86_TYPES_HH__	./arch/x86/types.hh	41;"	d
__ARCH_X86_UTILITY_HH__	./arch/x86/utility.hh	41;"	d
__ARCH_X86_VTOPHYS_HH__	./arch/x86/vtophys.hh	41;"	d
__ARCH_X86_X86TRAITS_HH__	./arch/x86/x86_traits.hh	39;"	d
__ARM_FAULTS_HH__	./arch/arm/faults.hh	48;"	d
__ARM_LINUX_PROCESS_HH__	./arch/arm/linux/process.hh	44;"	d
__ARM_PROCESS_HH__	./arch/arm/process.hh	44;"	d
__ASYNC_HH__	./sim/async.hh	33;"	d
__BASE_ADDR_RANGE_HH__	./base/addr_range.hh	46;"	d
__BASE_ADDR_RANGE_MAP_HH__	./base/addr_range_map.hh	45;"	d
__BASE_ATOMICIO_HH__	./base/atomicio.hh	32;"	d
__BASE_BARRIER_HH__	./base/barrier.hh	41;"	d
__BASE_BIGINT_HH__	./base/bigint.hh	37;"	d
__BASE_BITFIELD_HH__	./base/bitfield.hh	33;"	d
__BASE_BITMAP_HH__	./base/bitmap.hh	43;"	d
__BASE_BITUNION_HH__	./base/bitunion.hh	32;"	d
__BASE_CALLBACK_HH__	./base/callback.hh	32;"	d
__BASE_CAST_HH__	./base/cast.hh	32;"	d
__BASE_CIRCLEBUF_HH__	./base/circlebuf.hh	41;"	d
__BASE_COMPILER_HH__	./base/compiler.hh	44;"	d
__BASE_CONDCODE_HH__	./base/condcodes.hh	32;"	d
__BASE_CPRINTF_FORMATS_HH__	./base/cprintf_formats.hh	32;"	d
__BASE_CPRINTF_HH__	./base/cprintf.hh	35;"	d
__BASE_DEBUG_HH__	./base/debug.hh	33;"	d
__BASE_FENV_HH__	./base/fenv.hh	32;"	d
__BASE_FLAGS_HH__	./base/flags.hh	32;"	d
__BASE_FRAMEBUFFER_HH__	./base/framebuffer.hh	41;"	d
__BASE_INET_HH__	./base/inet.hh	48;"	d
__BASE_INTMATH_HH__	./base/intmath.hh	32;"	d
__BASE_LOADER_HEX_FILE_HH__	./base/loader/hex_file.hh	32;"	d
__BASE_LOADER_RAW_OBJECT_HH__	./base/loader/raw_object.hh	32;"	d
__BASE_MATCH_HH__	./base/match.hh	36;"	d
__BASE_MISC_HH__	./base/misc.hh	46;"	d
__BASE_OUTPUT_HH__	./base/output.hh	33;"	d
__BASE_RANDOM_HH__	./base/random.hh	50;"	d
__BASE_REFCNT_HH__	./base/refcnt.hh	32;"	d
__BASE_STATISTICS_HH__	./base/statistics.hh	48;"	d
__BASE_STATS_INFO_HH__	./base/stats/info.hh	32;"	d
__BASE_STATS_OUTPUT_HH__	./base/stats/output.hh	32;"	d
__BASE_STATS_TEXT_HH__	./base/stats/text.hh	32;"	d
__BASE_STATS_TYPES_HH__	./base/stats/types.hh	32;"	d
__BASE_STL_HELPERS_HH__	./base/stl_helpers.hh	32;"	d
__BASE_STR_HH__	./base/str.hh	33;"	d
__BASE_TAGS_HH__	./mem/cache/tags/base.hh	50;"	d
__BASE_TIMEBUF_HH__	./cpu/timebuf.hh	33;"	d
__BASE_TIME_HH__	./base/time.hh	33;"	d
__BASE_TRACE_HH__	./base/trace.hh	37;"	d
__BASE_TRIE_HH__	./base/trie.hh	32;"	d
__BASE_TYPES_HH__	./base/types.hh	38;"	d
__BASE_VNC_VNC_INPUT_HH__	./base/vnc/vncinput.hh	46;"	d
__BASE_VNC_VNC_SERVER_HH__	./base/vnc/vncserver.hh	46;"	d
__BASE__CHUNK_GENERATOR_HH__	./base/chunk_generator.hh	32;"	d
__BASE__CP_ANNOTATE_HH__	./base/cp_annotate.hh	44;"	d
__BitUnion	./base/bitunion.hh	268;"	d
__CPU_ACTIVITY_HH__	./cpu/activity.hh	32;"	d
__CPU_BASE_DYN_INST_HH__	./cpu/base_dyn_inst.hh	47;"	d
__CPU_BASE_DYN_INST_IMPL_HH__	./cpu/base_dyn_inst_impl.hh	44;"	d
__CPU_BASE_HH__	./cpu/base.hh	47;"	d
__CPU_CHECKER_CPU_HH__	./cpu/checker/cpu.hh	45;"	d
__CPU_CHECKER_CPU_IMPL_HH__	./cpu/checker/cpu_impl.hh	46;"	d
__CPU_CHECKER_THREAD_CONTEXT_HH__	./cpu/checker/thread_context.hh	45;"	d
__CPU_CPUEVENT_HH__	./cpu/cpuevent.hh	32;"	d
__CPU_DECODE_CACHE_HH__	./cpu/decode_cache.hh	32;"	d
__CPU_DIRECTEDTEST_DIRECTEDGENERATOR_HH__	./cpu/testers/directedtest/DirectedGenerator.hh	30;"	d
__CPU_DIRECTEDTEST_INVALIDATEGENERATOR_HH__	./cpu/testers/directedtest/InvalidateGenerator.hh	36;"	d
__CPU_DIRECTEDTEST_RUBYDIRECTEDTESTER_HH__	./cpu/testers/directedtest/RubyDirectedTester.hh	31;"	d
__CPU_DIRECTEDTEST_SERIESREQUESTGENERATOR_HH__	./cpu/testers/directedtest/SeriesRequestGenerator.hh	36;"	d
__CPU_DUMMY_CHECKER_HH__	./cpu/dummy_checker.hh	41;"	d
__CPU_EXEC_CONTEXT_HH__	./cpu/exec_context.hh	45;"	d
__CPU_EXETRACE_HH__	./cpu/exetrace.hh	33;"	d
__CPU_FUNC_UNIT_HH__	./cpu/func_unit.hh	32;"	d
__CPU_INST_PB_TRACE_HH__	./cpu/inst_pb_trace.hh	41;"	d
__CPU_INTELTRACE_HH__	./cpu/inteltrace.hh	33;"	d
__CPU_KVM_BASE_HH__	./cpu/kvm/base.hh	41;"	d
__CPU_KVM_DEVICE_HH__	./cpu/kvm/device.hh	41;"	d
__CPU_KVM_KVMVM_HH__	./cpu/kvm/vm.hh	42;"	d
__CPU_KVM_PERFEVENT_HH__	./cpu/kvm/perfevent.hh	41;"	d
__CPU_KVM_TIMER_HH__	./cpu/kvm/timer.hh	41;"	d
__CPU_KVM_X86_CPU_HH__	./cpu/kvm/x86_cpu.hh	32;"	d
__CPU_MEMTEST_MEMTEST_HH__	./cpu/testers/memtest/memtest.hh	46;"	d
__CPU_MINOR_ACTIVITY_HH__	./cpu/minor/activity.hh	48;"	d
__CPU_MINOR_BUFFERS_HH__	./cpu/minor/buffers.hh	47;"	d
__CPU_MINOR_CPU_HH__	./cpu/minor/cpu.hh	47;"	d
__CPU_MINOR_DECODE_HH__	./cpu/minor/decode.hh	48;"	d
__CPU_MINOR_DYN_INST_HH__	./cpu/minor/dyn_inst.hh	49;"	d
__CPU_MINOR_EXECUTE_HH__	./cpu/minor/execute.hh	48;"	d
__CPU_MINOR_EXEC_CONTEXT_HH__	./cpu/minor/exec_context.hh	54;"	d
__CPU_MINOR_FETCH1_HH__	./cpu/minor/fetch1.hh	48;"	d
__CPU_MINOR_FETCH2_HH__	./cpu/minor/fetch2.hh	48;"	d
__CPU_MINOR_FUNC_UNIT_HH__	./cpu/minor/func_unit.hh	47;"	d
__CPU_MINOR_NEW_LSQ_HH__	./cpu/minor/lsq.hh	48;"	d
__CPU_MINOR_PIPELINE_HH__	./cpu/minor/pipeline.hh	48;"	d
__CPU_MINOR_PIPE_DATA_HH__	./cpu/minor/pipe_data.hh	53;"	d
__CPU_MINOR_SCOREBOARD_HH__	./cpu/minor/scoreboard.hh	47;"	d
__CPU_MINOR_STATS_HH__	./cpu/minor/stats.hh	47;"	d
__CPU_MINOR_TRACE_HH__	./cpu/minor/trace.hh	51;"	d
__CPU_NATIVETRACE_HH__	./cpu/nativetrace.hh	32;"	d
__CPU_NETWORKTEST_NETWORKTEST_HH__	./cpu/testers/networktest/networktest.hh	32;"	d
__CPU_O3_CHECKER_HH__	./cpu/o3/checker.hh	44;"	d
__CPU_O3_COMMIT_HH__	./cpu/o3/commit.hh	45;"	d
__CPU_O3_COMMIT_IMPL_HH__	./cpu/o3/commit_impl.hh	45;"	d
__CPU_O3_COMM_HH__	./cpu/o3/comm.hh	45;"	d
__CPU_O3_CPU_HH__	./cpu/o3/cpu.hh	48;"	d
__CPU_O3_CPU_POLICY_HH__	./cpu/o3/cpu_policy.hh	33;"	d
__CPU_O3_DECODE_HH__	./cpu/o3/decode.hh	44;"	d
__CPU_O3_DECODE_IMPL_HH__	./cpu/o3/decode_impl.hh	44;"	d
__CPU_O3_DEP_GRAPH_HH__	./cpu/o3/dep_graph.hh	44;"	d
__CPU_O3_DERIV_HH__	./cpu/o3/deriv.hh	32;"	d
__CPU_O3_DYN_INST_HH__	./cpu/o3/dyn_inst.hh	45;"	d
__CPU_O3_DYN_INST_IMPL_HH__	./cpu/o3/dyn_inst_impl.hh	44;"	d
__CPU_O3_FETCH_HH__	./cpu/o3/fetch.hh	45;"	d
__CPU_O3_FETCH_IMPL_HH__	./cpu/o3/fetch_impl.hh	46;"	d
__CPU_O3_FREE_LIST_HH__	./cpu/o3/free_list.hh	33;"	d
__CPU_O3_FU_POOL_HH__	./cpu/o3/fu_pool.hh	44;"	d
__CPU_O3_IEW_HH__	./cpu/o3/iew.hh	44;"	d
__CPU_O3_IEW_IMPL_IMPL_HH__	./cpu/o3/iew_impl.hh	45;"	d
__CPU_O3_IMPL_HH__	./cpu/o3/impl.hh	32;"	d
__CPU_O3_INST_QUEUE_HH__	./cpu/o3/inst_queue.hh	45;"	d
__CPU_O3_INST_QUEUE_IMPL_HH__	./cpu/o3/inst_queue_impl.hh	46;"	d
__CPU_O3_LSQ_HH__	./cpu/o3/lsq.hh	45;"	d
__CPU_O3_LSQ_IMPL_HH__	./cpu/o3/lsq_impl.hh	45;"	d
__CPU_O3_LSQ_UNIT_HH__	./cpu/o3/lsq_unit.hh	46;"	d
__CPU_O3_LSQ_UNIT_IMPL_HH__	./cpu/o3/lsq_unit_impl.hh	47;"	d
__CPU_O3_MEM_DEP_UNIT_HH__	./cpu/o3/mem_dep_unit.hh	44;"	d
__CPU_O3_MEM_DEP_UNIT_IMPL_HH__	./cpu/o3/mem_dep_unit_impl.hh	44;"	d
__CPU_O3_PROBE_ELASTIC_TRACE_HH__	./cpu/o3/probe/elastic_trace.hh	51;"	d
__CPU_O3_PROBE_SIMPLE_TRACE_HH__	./cpu/o3/probe/simple_trace.hh	47;"	d
__CPU_O3_REGFILE_HH__	./cpu/o3/regfile.hh	34;"	d
__CPU_O3_RENAME_HH__	./cpu/o3/rename.hh	45;"	d
__CPU_O3_RENAME_IMPL_HH__	./cpu/o3/rename_impl.hh	46;"	d
__CPU_O3_RENAME_MAP_HH__	./cpu/o3/rename_map.hh	50;"	d
__CPU_O3_ROB_HH__	./cpu/o3/rob.hh	45;"	d
__CPU_O3_ROB_IMPL_HH__	./cpu/o3/rob_impl.hh	45;"	d
__CPU_O3_SCOREBOARD_HH__	./cpu/o3/scoreboard.hh	35;"	d
__CPU_O3_STORE_SET_HH__	./cpu/o3/store_set.hh	32;"	d
__CPU_O3_THREAD_CONTEXT_HH__	./cpu/o3/thread_context.hh	45;"	d
__CPU_O3_THREAD_CONTEXT_IMPL_HH__	./cpu/o3/thread_context_impl.hh	46;"	d
__CPU_O3_THREAD_STATE_HH__	./cpu/o3/thread_state.hh	44;"	d
__CPU_PRED_2BIT_LOCAL_PRED_HH__	./cpu/pred/2bit_local.hh	45;"	d
__CPU_PRED_BI_MODE_PRED_HH__	./cpu/pred/bi_mode.hh	36;"	d
__CPU_PRED_BPRED_UNIT_HH__	./cpu/pred/bpred_unit.hh	48;"	d
__CPU_PRED_BTB_HH__	./cpu/pred/btb.hh	32;"	d
__CPU_PRED_RAS_HH__	./cpu/pred/ras.hh	32;"	d
__CPU_PRED_SAT_COUNTER_HH__	./cpu/pred/sat_counter.hh	32;"	d
__CPU_PRED_TOURNAMENT_PRED_HH__	./cpu/pred/tournament.hh	46;"	d
__CPU_PROFILE_HH__	./cpu/profile.hh	32;"	d
__CPU_QUIESCE_EVENT_HH__	./cpu/quiesce_event.hh	32;"	d
__CPU_RUBYTEST_CHECKTABLE_HH__	./cpu/testers/rubytest/CheckTable.hh	31;"	d
__CPU_RUBYTEST_CHECK_HH__	./cpu/testers/rubytest/Check.hh	31;"	d
__CPU_RUBYTEST_RUBYTESTER_HH__	./cpu/testers/rubytest/RubyTester.hh	43;"	d
__CPU_SIMPLE_ATOMIC_HH__	./cpu/simple/atomic.hh	44;"	d
__CPU_SIMPLE_BASE_HH__	./cpu/simple/base.hh	47;"	d
__CPU_SIMPLE_EXEC_CONTEXT_HH__	./cpu/simple/exec_context.hh	46;"	d
__CPU_SIMPLE_PROBES_SIMPOINT_HH__	./cpu/simple/probes/simpoint.hh	42;"	d
__CPU_SIMPLE_THREAD_HH__	./cpu/simple_thread.hh	46;"	d
__CPU_SIMPLE_TIMING_HH__	./cpu/simple/timing.hh	44;"	d
__CPU_STATIC_INST_FWD_HH__	./cpu/static_inst_fwd.hh	32;"	d
__CPU_STATIC_INST_HH__	./cpu/static_inst.hh	33;"	d
__CPU_THREAD_CONTEXT_HH__	./cpu/thread_context.hh	45;"	d
__CPU_THREAD_STATE_HH__	./cpu/thread_state.hh	32;"	d
__CPU_TIMING_EXPR_HH__	./cpu/timing_expr.hh	50;"	d
__CPU_TRACE_TRACE_CPU_HH__	./cpu/trace/trace_cpu.hh	43;"	d
__CPU_TRAFFIC_GEN_GENERATORS_HH__	./cpu/testers/traffic_gen/generators.hh	51;"	d
__CPU_TRAFFIC_GEN_TRAFFIC_GEN_HH__	./cpu/testers/traffic_gen/traffic_gen.hh	42;"	d
__CPU_TRANSLATION_HH__	./cpu/translation.hh	46;"	d
__CPU__OP_CLASS_HH__	./cpu/op_class.hh	44;"	d
__CPU__REG_CLASS_HH__	./cpu/reg_class.hh	32;"	d
__DEV_8254_HH__	./dev/intel_8254_timer.hh	34;"	d
__DEV_ALPHA_BACKDOOR_HH__	./dev/alpha/backdoor.hh	36;"	d
__DEV_ARM_A9SCU_HH__	./dev/arm/a9scu.hh	41;"	d
__DEV_ARM_ABSTRACT_NVM_HH__	./dev/arm/abstract_nvm.hh	41;"	d
__DEV_ARM_AMBA_DEVICE_HH__	./dev/arm/amba_device.hh	50;"	d
__DEV_ARM_AMBA_FAKE_H__	./dev/arm/amba_fake.hh	52;"	d
__DEV_ARM_BASE_GIC_H__	./dev/arm/base_gic.hh	45;"	d
__DEV_ARM_ENERGY_CTRL_HH__	./dev/arm/energy_ctrl.hh	58;"	d
__DEV_ARM_FLASH_DEVICE_HH__	./dev/arm/flash_device.hh	40;"	d
__DEV_ARM_GENERIC_TIMER_HH__	./dev/arm/generic_timer.hh	42;"	d
__DEV_ARM_GIC_PL390_H__	./dev/arm/gic_pl390.hh	49;"	d
__DEV_ARM_GIC_V2M_H__	./dev/arm/gic_v2m.hh	47;"	d
__DEV_ARM_HDLCD_HH__	./dev/arm/hdlcd.hh	77;"	d
__DEV_ARM_LOCALTIMER_HH__	./dev/arm/timer_cpulocal.hh	42;"	d
__DEV_ARM_NOMALI_GPU_HH__	./dev/arm/gpu_nomali.hh	41;"	d
__DEV_ARM_PL011_H__	./dev/arm/pl011.hh	50;"	d
__DEV_ARM_PL050_HH__	./dev/arm/kmi.hh	49;"	d
__DEV_ARM_PL111_HH__	./dev/arm/pl111.hh	47;"	d
__DEV_ARM_RTC_PL310_HH__	./dev/arm/rtc_pl031.hh	41;"	d
__DEV_ARM_RV_HH__	./dev/arm/rv_ctrl.hh	41;"	d
__DEV_ARM_RealView_HH__	./dev/arm/realview.hh	50;"	d
__DEV_ARM_SP804_HH__	./dev/arm/timer_sp804.hh	41;"	d
__DEV_ARM_UFS_DEVICE_HH__	./dev/arm/ufs_device.hh	145;"	d
__DEV_ARM_VGIC_H__	./dev/arm/vgic.hh	53;"	d
__DEV_BADDEV_HH__	./dev/baddev.hh	37;"	d
__DEV_DIST_ETHERLINK_HH__	./dev/net/dist_etherlink.hh	51;"	d
__DEV_DIST_IFACE_HH__	./dev/net/dist_iface.hh	78;"	d
__DEV_DIST_PACKET_HH__	./dev/net/dist_packet.hh	54;"	d
__DEV_DMA_DEVICE_HH__	./dev/dma_device.hh	46;"	d
__DEV_I2C_BUS_HH__	./dev/i2c/bus.hh	46;"	d
__DEV_I2C_DEVICE_HH__	./dev/i2c/device.hh	46;"	d
__DEV_IO_DEVICE_HH__	./dev/io_device.hh	45;"	d
__DEV_MALTA_HH__	./dev/mips/malta.hh	39;"	d
__DEV_MALTA_IO_HH__	./dev/mips/malta_io.hh	38;"	d
__DEV_MC146818_HH__	./dev/mc146818.hh	34;"	d
__DEV_NET_ETHERBUS_HH__	./dev/net/etherbus.hh	36;"	d
__DEV_NET_ETHERDEVICE_HH__	./dev/net/etherdevice.hh	37;"	d
__DEV_NET_ETHERDUMP_HH__	./dev/net/etherdump.hh	36;"	d
__DEV_NET_ETHERINT_HH__	./dev/net/etherint.hh	37;"	d
__DEV_NET_ETHERLINK_HH__	./dev/net/etherlink.hh	48;"	d
__DEV_NET_ETHEROBJECT_HH__	./dev/net/etherobject.hh	37;"	d
__DEV_NET_ETHERPKT_HH__	./dev/net/etherpkt.hh	37;"	d
__DEV_NET_ETHERTAP_HH__	./dev/net/ethertap.hh	36;"	d
__DEV_NET_I8254XGBE_HH__	./dev/net/i8254xGBe.hh	36;"	d
__DEV_NET_NS_GIGE_HH__	./dev/net/ns_gige.hh	38;"	d
__DEV_NET_PKTFIFO_HH__	./dev/net/pktfifo.hh	32;"	d
__DEV_NET_SINICREG_HH__	./dev/net/sinicreg.hh	32;"	d
__DEV_NET_SINIC_HH__	./dev/net/sinic.hh	32;"	d
__DEV_NET_TCP_IFACE_HH__	./dev/net/tcp_iface.hh	53;"	d
__DEV_NS_GIGE_REG_H__	./dev/net/ns_gige_reg.h	37;"	d
__DEV_PCI_COPY_ENGINE_HH__	./dev/pci/copy_engine.hh	49;"	d
__DEV_PCI_DEVICE_HH__	./dev/pci/device.hh	50;"	d
__DEV_PCI_HOST_HH__	./dev/pci/host.hh	41;"	d
__DEV_PCI_TYPES_HH__	./dev/pci/types.hh	41;"	d
__DEV_PC_HH__	./dev/x86/pc.hh	38;"	d
__DEV_PIXELPUMP_HH__	./dev/pixelpump.hh	41;"	d
__DEV_PLATFORM_HH__	./dev/platform.hh	38;"	d
__DEV_PS2_HH__	./dev/ps2.hh	41;"	d
__DEV_SPARC_DTOD_HH__	./dev/sparc/dtod.hh	37;"	d
__DEV_SPARC_IOB_HH__	./dev/sparc/iob.hh	37;"	d
__DEV_SPARC_MM_DISK_HH__	./dev/sparc/mm_disk.hh	37;"	d
__DEV_STORAGE_DISK_IMAGE_HH__	./dev/storage/disk_image.hh	36;"	d
__DEV_STORAGE_IDE_CTRL_HH__	./dev/storage/ide_ctrl.hh	38;"	d
__DEV_STORAGE_IDE_DISK_HH__	./dev/storage/ide_disk.hh	48;"	d
__DEV_STORAGE_SIMPLE_DISK_HH__	./dev/storage/simple_disk.hh	36;"	d
__DEV_T1000_HH__	./dev/sparc/t1000.hh	38;"	d
__DEV_TERMINAL_HH__	./dev/terminal.hh	37;"	d
__DEV_TSUNAMI_HH__	./dev/alpha/tsunami.hh	38;"	d
__DEV_TSUNAMI_IO_HH__	./dev/alpha/tsunami_io.hh	38;"	d
__DEV_UART8250_HH__	./dev/uart8250.hh	36;"	d
__DEV_VIRTIO_BASE_HH__	./dev/virtio/base.hh	41;"	d
__DEV_VIRTIO_BLOCK_HH__	./dev/virtio/block.hh	41;"	d
__DEV_VIRTIO_CONSOLE_HH__	./dev/virtio/console.hh	41;"	d
__DEV_VIRTIO_FS9P_HH__	./dev/virtio/fs9p.hh	41;"	d
__DEV_VIRTIO_PCI_HH__	./dev/virtio/pci.hh	41;"	d
__DEV_X86_CMOS_HH__	./dev/x86/cmos.hh	32;"	d
__DEV_X86_I8042_HH__	./dev/x86/i8042.hh	32;"	d
__DEV_X86_I82094AA_HH__	./dev/x86/i82094aa.hh	32;"	d
__DEV_X86_I8237_HH__	./dev/x86/i8237.hh	32;"	d
__DEV_X86_I8254_HH__	./dev/x86/i8254.hh	32;"	d
__DEV_X86_I8259_HH__	./dev/x86/i8259.hh	32;"	d
__DEV_X86_INTDEV_HH__	./dev/x86/intdev.hh	44;"	d
__DEV_X86_SOUTH_BRIDGE_HH__	./dev/x86/south_bridge.hh	32;"	d
__DEV_X86_SPEAKER_HH__	./dev/x86/speaker.hh	32;"	d
__DTB_OBJECT_HH__	./base/loader/dtb_object.hh	32;"	d
__DUMP_MBUF_HH__	./kern/tru64/dump_mbuf.hh	32;"	d
__ECOFF_OBJECT_HH__	./base/loader/ecoff_object.hh	32;"	d
__ELF_OBJECT_HH__	./base/loader/elf_object.hh	44;"	d
__FAULTS_HH__	./sim/faults.hh	33;"	d
__FD_ENTRY_HH__	./sim/fd_entry.hh	33;"	d
__FREEBSD_HH__	./kern/freebsd/freebsd.hh	34;"	d
__FUNCTION__	./base/misc.hh	55;"	d
__HMC_CONTROLLER__	./mem/hmc_controller.hh	50;"	d
__HOSTINFO_HH__	./base/hostinfo.hh	32;"	d
__INIFILE_HH__	./base/inifile.hh	33;"	d
__INSTRECORD_HH__	./sim/insttracer.hh	45;"	d
__INTR_CONTROL_HH__	./cpu/intr_control.hh	33;"	d
__ISA_FAKE_HH__	./dev/isa_fake.hh	36;"	d
__KERNEL_STATS_HH__	./kern/kernel_stats.hh	33;"	d
__KERN_ALPHA_IDLE_EVENT_HH__	./arch/alpha/idle_event.hh	34;"	d
__KERN_FREEBSD_EVENTS_HH__	./kern/freebsd/events.hh	34;"	d
__KERN_LINUX_EVENTS_HH__	./kern/linux/events.hh	33;"	d
__KERN_MIPS_IDLE_EVENT_HH__	./arch/mips/idle_event.hh	34;"	d
__KERN_OPERATINGSYSTEM_HH__	./kern/operatingsystem.hh	32;"	d
__KERN_TRU64_TRU64_SYSCALLS_HH__	./kern/tru64/tru64_syscalls.hh	32;"	d
__LINUX_HH__	./kern/linux/linux.hh	32;"	d
__M5_NAN	./base/stats/text.cc	62;"	d	file:
__MALTAREG_H__	./dev/mips/maltareg.h	38;"	d
__MALTA_CCHIP_HH__	./dev/mips/malta_cchip.hh	37;"	d
__MBUF_HH__	./kern/tru64/mbuf.hh	32;"	d
__MEM_ADDR_MAPPER_HH__	./mem/addr_mapper.hh	41;"	d
__MEM_BRIDGE_HH__	./mem/bridge.hh	52;"	d
__MEM_CACHE_BASE_HH__	./mem/cache/base.hh	51;"	d
__MEM_CACHE_BLK_HH__	./mem/cache/blk.hh	49;"	d
__MEM_CACHE_CACHE_HH__	./mem/cache/cache.hh	53;"	d
__MEM_CACHE_MSHR_HH__	./mem/cache/mshr.hh	49;"	d
__MEM_CACHE_MSHR_QUEUE_HH__	./mem/cache/mshr_queue.hh	49;"	d
__MEM_CACHE_PREFETCH_BASE_HH__	./mem/cache/prefetch/base.hh	50;"	d
__MEM_CACHE_PREFETCH_QUEUED_HH__	./mem/cache/prefetch/queued.hh	41;"	d
__MEM_CACHE_PREFETCH_STRIDE_HH__	./mem/cache/prefetch/stride.hh	49;"	d
__MEM_CACHE_PREFETCH_TAGGED_HH__	./mem/cache/prefetch/tagged.hh	37;"	d
__MEM_CACHE_TAGS_BASESETASSOC_HH__	./mem/cache/tags/base_set_assoc.hh	49;"	d
__MEM_CACHE_TAGS_CACHESET_HH__	./mem/cache/tags/cacheset.hh	49;"	d
__MEM_CACHE_TAGS_FA_LRU_HH__	./mem/cache/tags/fa_lru.hh	49;"	d
__MEM_CACHE_TAGS_LRU_HH__	./mem/cache/tags/lru.hh	51;"	d
__MEM_CACHE_TAGS_RANDOM_REPL_HH__	./mem/cache/tags/random_repl.hh	40;"	d
__MEM_COHERENT_XBAR_HH__	./mem/coherent_xbar.hh	52;"	d
__MEM_COMM_MONITOR_HH__	./mem/comm_monitor.hh	42;"	d
__MEM_DRAMSIM2_HH__	./mem/dramsim2.hh	45;"	d
__MEM_DRAMSIM2_WRAPPER_HH__	./mem/dramsim2_wrapper.hh	46;"	d
__MEM_DRAM_CTRL_HH__	./mem/dram_ctrl.hh	52;"	d
__MEM_DRAM_POWER_HH__	./mem/drampower.hh	46;"	d
__MEM_EXTERNAL_MASTER__	./mem/external_master.hh	60;"	d
__MEM_EXTERNAL_SLAVE__	./mem/external_slave.hh	61;"	d
__MEM_FS_PORT_PROXY_HH__	./mem/fs_translating_port_proxy.hh	60;"	d
__MEM_MEM_CHECKER_HH__	./mem/mem_checker.hh	42;"	d
__MEM_MEM_CHECKER_MONITOR_HH__	./mem/mem_checker_monitor.hh	43;"	d
__MEM_MEM_OBJECT_HH__	./mem/mem_object.hh	50;"	d
__MEM_MPORT_HH__	./mem/mport.hh	44;"	d
__MEM_MULTI_LEVEL_PAGE_TABLE_HH__	./mem/multi_level_page_table.hh	37;"	d
__MEM_NONCOHERENT_XBAR_HH__	./mem/noncoherent_xbar.hh	52;"	d
__MEM_PACKET_ACCESS_HH__	./mem/packet_access.hh	52;"	d
__MEM_PACKET_HH__	./mem/packet.hh	53;"	d
__MEM_PACKET_QUEUE_HH__	./mem/packet_queue.hh	45;"	d
__MEM_PAGE_TABLE_HH__	./mem/page_table.hh	38;"	d
__MEM_PHYSICAL_HH__	./mem/physical.hh	41;"	d
__MEM_PORT_HH__	./mem/port.hh	51;"	d
__MEM_PORT_PROXY_HH__	./mem/port_proxy.hh	60;"	d
__MEM_PROBES_BASE_HH__	./mem/probes/base.hh	41;"	d
__MEM_PROBES_MEM_TRACE_HH__	./mem/probes/mem_trace.hh	41;"	d
__MEM_PROBES_STACK_DIST_HH__	./mem/probes/stack_dist.hh	41;"	d
__MEM_QPORT_HH__	./mem/qport.hh	41;"	d
__MEM_REQUEST_HH__	./mem/request.hh	53;"	d
__MEM_RUBY_BUFFERS_MESSAGEBUFFER_HH__	./mem/ruby/network/MessageBuffer.hh	35;"	d
__MEM_RUBY_COMMON_ADDRESS_HH__	./mem/ruby/common/Address.hh	30;"	d
__MEM_RUBY_COMMON_CONSUMER_HH__	./mem/ruby/common/Consumer.hh	36;"	d
__MEM_RUBY_COMMON_DATABLOCK_HH__	./mem/ruby/common/DataBlock.hh	30;"	d
__MEM_RUBY_COMMON_HISTOGRAM_HH__	./mem/ruby/common/Histogram.hh	30;"	d
__MEM_RUBY_COMMON_NETDEST_HH__	./mem/ruby/common/NetDest.hh	30;"	d
__MEM_RUBY_COMMON_SET_HH__	./mem/ruby/common/Set.hh	33;"	d
__MEM_RUBY_COMMON_SUBBLOCK_HH__	./mem/ruby/common/SubBlock.hh	30;"	d
__MEM_RUBY_FILTERS_ABSTRACTBLOOMFILTER_HH__	./mem/ruby/filters/AbstractBloomFilter.hh	30;"	d
__MEM_RUBY_FILTERS_BLOCKBLOOMFILTER_HH__	./mem/ruby/filters/BlockBloomFilter.hh	30;"	d
__MEM_RUBY_FILTERS_BULKBLOOMFILTER_HH__	./mem/ruby/filters/BulkBloomFilter.hh	30;"	d
__MEM_RUBY_FILTERS_H3BLOOMFILTER_HH__	./mem/ruby/filters/H3BloomFilter.hh	30;"	d
__MEM_RUBY_FILTERS_LSBCOUNTINGBLOOMFILTER_HH__	./mem/ruby/filters/LSB_CountingBloomFilter.hh	30;"	d
__MEM_RUBY_FILTERS_MULTIBITSELBLOOMFILTER_HH__	./mem/ruby/filters/MultiBitSelBloomFilter.hh	30;"	d
__MEM_RUBY_FILTERS_MULTIGRAINBLOOMFILTER_HH__	./mem/ruby/filters/MultiGrainBloomFilter.hh	30;"	d
__MEM_RUBY_FILTERS_NONCOUNTINGBLOOMFILTER_HH__	./mem/ruby/filters/NonCountingBloomFilter.hh	30;"	d
__MEM_RUBY_NETWORK_BASIC_LINK_HH__	./mem/ruby/network/BasicLink.hh	30;"	d
__MEM_RUBY_NETWORK_BASIC_ROUTER_HH__	./mem/ruby/network/BasicRouter.hh	30;"	d
__MEM_RUBY_NETWORK_FAULT_MODEL_HH__	./mem/ruby/network/fault_model/FaultModel.hh	41;"	d
__MEM_RUBY_NETWORK_GARNET_BASEGARNETNETWORK_HH__	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	37;"	d
__MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_CREDIT_LINK_D_HH__	./mem/ruby/network/garnet/fixed-pipeline/CreditLink_d.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_FLIT_BUFFER_D_HH__	./mem/ruby/network/garnet/fixed-pipeline/flitBuffer_d.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_FLIT_D_HH__	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_GARNETNETWORK_D_HH__	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_INPUT_UNIT_D_HH__	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_LINK_HH__	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.hh	30;"	d
__MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_NETWORK_INTERFACE_D_HH__	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_NETWORK_LINK_D_HH__	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_OUTPUT_UNIT_D_HH__	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_OUT_VC_STATE_D_HH__	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_ROUTER_D_HH__	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_ROUTING_UNIT_D_HH__	./mem/ruby/network/garnet/fixed-pipeline/RoutingUnit_d.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_SWITCH_D_HH__	./mem/ruby/network/garnet/fixed-pipeline/Switch_d.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_SW_ALLOCATOR_D_HH__	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_VC_ALLOCATOR_D_HH__	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_VIRTUAL_CHANNEL_D_HH__	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FLEXIBLE_PIPELINE_FLEXIBLE_CONSUMER_HH__	./mem/ruby/network/garnet/flexible-pipeline/FlexibleConsumer.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FLEXIBLE_PIPELINE_FLIT_BUFFER_HH__	./mem/ruby/network/garnet/flexible-pipeline/flitBuffer.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FLEXIBLE_PIPELINE_FLIT_HH__	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	39;"	d
__MEM_RUBY_NETWORK_GARNET_FLEXIBLE_PIPELINE_GARNET_NETWORK_HH__	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FLEXIBLE_PIPELINE_IN_VC_STATE_HH__	./mem/ruby/network/garnet/flexible-pipeline/InVcState.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FLEXIBLE_PIPELINE_LINK_HH__	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.hh	30;"	d
__MEM_RUBY_NETWORK_GARNET_FLEXIBLE_PIPELINE_NETWORK_INTERFACE_HH__	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FLEXIBLE_PIPELINE_NETWORK_LINK_HH__	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FLEXIBLE_PIPELINE_OUT_VC_STATE_HH__	./mem/ruby/network/garnet/flexible-pipeline/OutVcState.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FLEXIBLE_PIPELINE_ROUTER_HH__	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_FLEXIBLE_PIPELINE_VC_ARBITER_HH__	./mem/ruby/network/garnet/flexible-pipeline/VCarbiter.hh	32;"	d
__MEM_RUBY_NETWORK_GARNET_NETWORKHEADER_HH__	./mem/ruby/network/garnet/NetworkHeader.hh	32;"	d
__MEM_RUBY_NETWORK_NETWORK_HH__	./mem/ruby/network/Network.hh	41;"	d
__MEM_RUBY_NETWORK_SIMPLE_LINK_HH__	./mem/ruby/network/simple/SimpleLink.hh	30;"	d
__MEM_RUBY_NETWORK_SIMPLE_PERFECTSWITCH_HH__	./mem/ruby/network/simple/PerfectSwitch.hh	37;"	d
__MEM_RUBY_NETWORK_SIMPLE_SIMPLENETWORK_HH__	./mem/ruby/network/simple/SimpleNetwork.hh	30;"	d
__MEM_RUBY_NETWORK_SIMPLE_SWITCH_HH__	./mem/ruby/network/simple/Switch.hh	40;"	d
__MEM_RUBY_NETWORK_SIMPLE_THROTTLE_HH__	./mem/ruby/network/simple/Throttle.hh	39;"	d
__MEM_RUBY_NETWORK_TOPOLOGY_HH__	./mem/ruby/network/Topology.hh	41;"	d
__MEM_RUBY_PROFILER_ACCESSTRACEFORADDRESS_HH__	./mem/ruby/profiler/AccessTraceForAddress.hh	30;"	d
__MEM_RUBY_PROFILER_ADDRESSPROFILER_HH__	./mem/ruby/profiler/AddressProfiler.hh	30;"	d
__MEM_RUBY_PROFILER_MEMCNTRLPROFILER_HH__	./mem/ruby/profiler/MemCntrlProfiler.hh	30;"	d
__MEM_RUBY_PROFILER_PROFILER_HH__	./mem/ruby/profiler/Profiler.hh	46;"	d
__MEM_RUBY_PROFILER_STORETRACE_HH__	./mem/ruby/profiler/StoreTrace.hh	30;"	d
__MEM_RUBY_RECORDER_CACHERECORDER_HH__	./mem/ruby/system/CacheRecorder.hh	36;"	d
__MEM_RUBY_SLICC_INTERFACE_ABSTRACTCACHEENTRY_HH__	./mem/ruby/slicc_interface/AbstractCacheEntry.hh	34;"	d
__MEM_RUBY_SLICC_INTERFACE_ABSTRACTCONTROLLER_HH__	./mem/ruby/slicc_interface/AbstractController.hh	30;"	d
__MEM_RUBY_SLICC_INTERFACE_ABSTRACTENTRY_HH__	./mem/ruby/slicc_interface/AbstractEntry.hh	30;"	d
__MEM_RUBY_SLICC_INTERFACE_MESSAGE_HH__	./mem/ruby/slicc_interface/Message.hh	30;"	d
__MEM_RUBY_SLICC_INTERFACE_RUBYSLICCUTIL_HH__	./mem/ruby/slicc_interface/RubySlicc_Util.hh	34;"	d
__MEM_RUBY_SLICC_INTERFACE_RUBYSLICC_COMPONENTMAPPINGS_HH__	./mem/ruby/slicc_interface/RubySlicc_ComponentMapping.hh	30;"	d
__MEM_RUBY_SLICC_INTERFACE_RUBYSLICC_INCLUDES_HH__	./mem/ruby/slicc_interface/RubySlicc_includes.hh	30;"	d
__MEM_RUBY_SLICC_INTERFACE_RUBY_REQUEST_HH__	./mem/ruby/slicc_interface/RubyRequest.hh	30;"	d
__MEM_RUBY_STRUCTURES_ABSTRACTREPLACEMENTPOLICY_HH__	./mem/ruby/structures/AbstractReplacementPolicy.hh	30;"	d
__MEM_RUBY_STRUCTURES_BANKEDARRAY_HH__	./mem/ruby/structures/BankedArray.hh	33;"	d
__MEM_RUBY_STRUCTURES_CACHEMEMORY_HH__	./mem/ruby/structures/CacheMemory.hh	31;"	d
__MEM_RUBY_STRUCTURES_DIRECTORYMEMORY_HH__	./mem/ruby/structures/DirectoryMemory.hh	30;"	d
__MEM_RUBY_STRUCTURES_LRUPOLICY_HH__	./mem/ruby/structures/LRUPolicy.hh	30;"	d
__MEM_RUBY_STRUCTURES_MEMORYNODE_HH__	./mem/ruby/structures/MemoryNode.hh	39;"	d
__MEM_RUBY_STRUCTURES_MEMORY_CONTROL_HH__	./mem/ruby/structures/RubyMemoryControl.hh	31;"	d
__MEM_RUBY_STRUCTURES_PERFECTCACHEMEMORY_HH__	./mem/ruby/structures/PerfectCacheMemory.hh	30;"	d
__MEM_RUBY_STRUCTURES_PERSISTENTTABLE_HH__	./mem/ruby/structures/PersistentTable.hh	30;"	d
__MEM_RUBY_STRUCTURES_PREFETCHER_HH__	./mem/ruby/structures/Prefetcher.hh	30;"	d
__MEM_RUBY_STRUCTURES_PSEUDOLRUPOLICY_HH__	./mem/ruby/structures/PseudoLRUPolicy.hh	31;"	d
__MEM_RUBY_STRUCTURES_TBETABLE_HH__	./mem/ruby/structures/TBETable.hh	30;"	d
__MEM_RUBY_STRUCTURES_TIMERTABLE_HH__	./mem/ruby/structures/TimerTable.hh	30;"	d
__MEM_RUBY_STRUCTURES_WIREBUFFER_HH__	./mem/ruby/structures/WireBuffer.hh	33;"	d
__MEM_RUBY_SYSTEM_DMASEQUENCER_HH__	./mem/ruby/system/DMASequencer.hh	30;"	d
__MEM_RUBY_SYSTEM_MACHINEID_HH__	./mem/ruby/common/MachineID.hh	30;"	d
__MEM_RUBY_SYSTEM_RUBYPORTPROXY_HH__	./mem/ruby/system/RubyPortProxy.hh	49;"	d
__MEM_RUBY_SYSTEM_RUBYPORT_HH__	./mem/ruby/system/RubyPort.hh	43;"	d
__MEM_RUBY_SYSTEM_SEQUENCER_HH__	./mem/ruby/system/Sequencer.hh	30;"	d
__MEM_RUBY_SYSTEM_SYSTEM_HH__	./mem/ruby/system/RubySystem.hh	36;"	d
__MEM_SERIAL_LINK_HH__	./mem/serial_link.hh	54;"	d
__MEM_SE_TRANSLATING_PORT_PROXY_HH__	./mem/se_translating_port_proxy.hh	46;"	d
__MEM_SNOOP_FILTER_HH__	./mem/snoop_filter.hh	46;"	d
__MEM_STACK_DIST_CALC_HH__	./mem/stack_dist_calc.hh	42;"	d
__MEM_TPORT_HH__	./mem/tport.hh	45;"	d
__MEM_XBAR_HH__	./mem/xbar.hh	52;"	d
__MIPS_ACCESS_H__	./dev/mips/access.h	32;"	d
__MIPS_FAULTS_HH__	./arch/mips/faults.hh	37;"	d
__MIPS_LINUX_PROCESS_HH__	./arch/mips/linux/process.hh	33;"	d
__MIPS_PROCESS_HH__	./arch/mips/process.hh	33;"	d
__OBJECT_FILE_HH__	./base/loader/object_file.hh	33;"	d
__PCIREG_H__	./dev/pci/pcireg.h	49;"	d
__PC_EVENT_HH__	./cpu/pc_event.hh	33;"	d
__POLLEVENT_H__	./base/pollevent.hh	32;"	d
__POWER_LINUX_PROCESS_HH__	./arch/power/linux/process.hh	34;"	d
__POWER_PROCESS_HH__	./arch/power/process.hh	34;"	d
__PRINTABLE_HH__	./base/printable.hh	34;"	d
__PRINTF_HH__	./kern/tru64/printf.hh	32;"	d
__PRINTK_HH__	./kern/linux/printk.hh	33;"	d
__PROCESS_HH__	./sim/process.hh	34;"	d
__PROTO_PROTOIO_HH__	./proto/protoio.hh	47;"	d
__PYTHON_SWIG_PYEVENT_HH__	./python/swig/pyevent.hh	32;"	d
__REMOTE_GDB_HH__	./base/remote_gdb.hh	35;"	d
__SERIALIZE_HH__	./sim/serialize.hh	51;"	d
__SIMPLE_MEMORY_HH__	./mem/simple_mem.hh	50;"	d
__SIM_ARGUMENTS_HH__	./sim/arguments.hh	32;"	d
__SIM_BACKTRACE_HH__	./sim/backtrace.hh	40;"	d
__SIM_BYTE_SWAP_HH__	./sim/byteswap.hh	38;"	d
__SIM_CLOCKED_OBJECT_HH__	./sim/clocked_object.hh	48;"	d
__SIM_CLOCK_DOMAIN_HH__	./sim/clock_domain.hh	50;"	d
__SIM_CORE_HH__	./sim/core.hh	35;"	d
__SIM_CXX_CONFIG_HH__	./sim/cxx_config.hh	54;"	d
__SIM_CXX_CONFIG_INI_HH__	./sim/cxx_config_ini.hh	47;"	d
__SIM_CXX_MANAGER_HH__	./sim/cxx_manager.hh	53;"	d
__SIM_DEBUG_HH__	./sim/debug.hh	32;"	d
__SIM_DRAIN_HH__	./sim/drain.hh	41;"	d
__SIM_DVFS_HANDLER_HH__	./sim/dvfs_handler.hh	51;"	d
__SIM_EMUL_DRIVER_HH	./sim/emul_driver.hh	32;"	d
__SIM_EVENTQ_HH__	./sim/eventq.hh	39;"	d
__SIM_EVENTQ_IMPL_HH__	./sim/eventq_impl.hh	36;"	d
__SIM_EXIT_HH__	./sim/sim_exit.hh	33;"	d
__SIM_FULL_SYSTEM_HH__	./sim/full_system.hh	32;"	d
__SIM_GLOBAL_EVENT_HH__	./sim/global_event.hh	33;"	d
__SIM_INIT_HH__	./sim/init.hh	32;"	d
__SIM_INIT_SIGNALS_HH__	./sim/init_signals.hh	32;"	d
__SIM_MICROCODE_ROM_HH__	./sim/microcode_rom.hh	32;"	d
__SIM_OBJECT_HH__	./sim/sim_object.hh	50;"	d
__SIM_PROBE_MEM_HH__	./sim/probe/mem.hh	40;"	d
__SIM_PROBE_PMU_HH__	./sim/probe/pmu.hh	40;"	d
__SIM_PROBE_PROBE_HH__	./sim/probe/probe.hh	62;"	d
__SIM_PROCESS_IMPL_HH__	./sim/process_impl.hh	33;"	d
__SIM_PSEUDO_INST_HH__	./sim/pseudo_inst.hh	44;"	d
__SIM_PY_INTERACT_HH__	./sim/py_interact.hh	32;"	d
__SIM_ROOT_HH__	./sim/root.hh	42;"	d
__SIM_SIM_EVENTS_HH__	./sim/sim_events.hh	46;"	d
__SIM_STATS_HH__	./sim/stats.hh	32;"	d
__SIM_STAT_CONTROL_HH__	./sim/stat_control.hh	45;"	d
__SIM_STAT_REGISTER_H__	./sim/stat_register.hh	45;"	d
__SIM_SUB_SYSTEM_HH__	./sim/sub_system.hh	46;"	d
__SIM_SYSCALLRETURN_HH__	./sim/syscallreturn.hh	32;"	d
__SIM_SYSCALL_EMUL_BUF_HH__	./sim/syscall_emul_buf.hh	32;"	d
__SIM_SYSCALL_EMUL_HH__	./sim/syscall_emul.hh	46;"	d
__SIM_TICKED_OBJECT_HH__	./sim/ticked_object.hh	49;"	d
__SIM_VOLTAGE_DOMAIN_HH__	./sim/voltage_domain.hh	42;"	d
__SINIC_REG32	./dev/net/sinicreg.hh	34;"	d
__SINIC_REG64	./dev/net/sinicreg.hh	35;"	d
__SINIC_VAL32	./dev/net/sinicreg.hh	37;"	d
__SINIC_VAL64	./dev/net/sinicreg.hh	47;"	d
__SMT_HH__	./cpu/smt.hh	37;"	d
__SOCKET_HH__	./base/socket.hh	32;"	d
__SOLARIS_HH__	./kern/solaris/solaris.hh	32;"	d
__SPARC_FAULTS_HH__	./arch/sparc/faults.hh	33;"	d
__SPARC_LINUX_PROCESS_HH__	./arch/sparc/linux/process.hh	32;"	d
__SPARC_PROCESS_HH__	./arch/sparc/process.hh	33;"	d
__SPARC_SOLARIS_PROCESS_HH__	./arch/sparc/solaris/process.hh	32;"	d
__STD_TYPES_HH__	./cpu/inst_seq.hh	33;"	d
__SYMTAB_HH__	./base/loader/symtab.hh	33;"	d
__SYSTEM_EVENTS_HH__	./kern/system_events.hh	34;"	d
__SYSTEM_HH__	./sim/system.hh	48;"	d
__SubBitUnion	./base/bitunion.hh	293;"	d
__TRU64_EVENTS_HH__	./kern/tru64/tru64_events.hh	33;"	d
__TRU64_HH__	./kern/tru64/tru64.hh	33;"	d
__TSUNAMIREG_H__	./dev/alpha/tsunamireg.h	36;"	d
__TSUNAMI_CCHIP_HH__	./dev/alpha/tsunami_cchip.hh	36;"	d
__TSUNAMI_PCHIP_HH__	./dev/alpha/tsunami_pchip.hh	36;"	d
__UART_HH__	./dev/uart.hh	36;"	d
__UNITTEST_UNITTEST_HH__	./unittest/unittest.hh	36;"	d
__X86_LINUX_PROCESS_HH__	./arch/x86/linux/process.hh	41;"	d
___SIM_INITPARAM_KEYS_HH__	./sim/initparam_keys.hh	44;"	d
___unused	./kern/linux/linux.hh	/^        int64_t         ___unused[3];$/;"	m	struct:Linux::__anon98
__add__	./arch/isa_parser.py	/^    def __add__(self, other):$/;"	m	class:GenCode	file:
__add__	./python/m5/params.py	/^    def __add__(self, other):$/;"	m	class:Addr	file:
__add__	./python/m5/util/smartdict.py	/^    def __add__(self, other):$/;"	m	class:Variable	file:
__all__	./mem/slicc/ast/MethodCallExprAST.py	/^__all__ = [ "MemberMethodCallExprAST", "ClassMethodCallExprAST" ]$/;"	v
__all__	./mem/slicc/symbols/Action.py	/^__all__ = [ "Action" ]$/;"	v
__all__	./mem/slicc/symbols/Event.py	/^__all__ = [ "Event" ]$/;"	v
__all__	./mem/slicc/symbols/Func.py	/^__all__ = [ "Func" ]$/;"	v
__all__	./mem/slicc/symbols/RequestType.py	/^__all__ = [ "RequestType" ]$/;"	v
__all__	./mem/slicc/symbols/State.py	/^__all__ = [ "State" ]$/;"	v
__all__	./mem/slicc/symbols/StateMachine.py	/^__all__ = [ "StateMachine" ]$/;"	v
__all__	./mem/slicc/symbols/Symbol.py	/^__all__ = [ "Symbol" ]$/;"	v
__all__	./mem/slicc/symbols/SymbolTable.py	/^__all__ = [ "SymbolTable" ]$/;"	v
__all__	./mem/slicc/symbols/Transition.py	/^__all__ = [ "Transition" ]$/;"	v
__all__	./mem/slicc/symbols/Type.py	/^__all__ = [ "Type" ]$/;"	v
__all__	./mem/slicc/symbols/Var.py	/^__all__ = [ "Var" ]$/;"	v
__all__	./mem/slicc/util.py	/^__all__ = [ 'PairContainer', 'Location' ]$/;"	v
__all__	./python/m5/SimObject.py	/^__all__ = [ 'SimObject' ]$/;"	v
__all__	./python/m5/event.py	/^__all__ = [ 'create', 'Event', 'ProgressEvent', 'SimExit', 'mainq' ]$/;"	v
__all__	./python/m5/main.py	/^__all__ = [ 'options', 'arguments', 'main' ]$/;"	v
__all__	./python/m5/params.py	/^__all__ = ['Param', 'VectorParam',$/;"	v
__all__	./python/m5/proxy.py	/^__all__ = ['Parent', 'Self']$/;"	v
__all__	./python/m5/ticks.py	/^__all__ = [ 'setGlobalFrequency', 'fixGlobalFrequency', 'fromSeconds',$/;"	v
__all__	./python/m5/util/attrdict.py	/^__all__ = [ 'attrdict', 'multiattrdict', 'optiondict' ]$/;"	v
__all__	./python/m5/util/code_formatter.py	/^__all__ = [ "code_formatter" ]$/;"	v
__all__	./python/m5/util/multidict.py	/^__all__ = [ 'multidict' ]$/;"	v
__all__	./python/m5/util/orderdict.py	/^__all__ = [ 'orderdict' ]$/;"	v
__all__	./python/m5/util/smartdict.py	/^__all__ = [ 'SmartDict' ]$/;"	v
__and__	./python/m5/util/region.py	/^    def __and__(self, other):$/;"	m	class:Regions	file:
__base_message	./base/misc.hh	/^__base_message(std::ostream &stream, const char *prefix, bool verbose,$/;"	f
__base_message_epilogue	./base/misc.cc	/^__base_message_epilogue(std::ostream &stream, bool verbose,$/;"	f
__blksize_pad	./arch/power/linux/linux.hh	/^        uint32_t __blksize_pad;$/;"	m	struct:PowerLinux::__anon55
__call__	./python/m5/SimObject.py	/^    def __call__(self, **kwargs):$/;"	f	file:
__call__	./python/m5/event.py	/^    def __call__(self):$/;"	m	class:ProgressEvent	file:
__call__	./python/m5/options.py	/^    def __call__(self, option, opt_str, value, parser):$/;"	m	class:splitter	file:
__call__	./python/m5/params.py	/^    def __call__(cls):$/;"	m	class:NullSimObject	file:
__call__	./python/m5/params.py	/^    def __call__(self, **kwargs):$/;"	m	class:SimObjectVector	file:
__call__	./python/m5/params.py	/^    def __call__(self, *args, **kwargs):$/;"	m	class:ParamFactory	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:Bool	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:CheckedInt	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:Clock	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:Current	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:Enum	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:EthernetAddr	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:Float	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:Frequency	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:IpAddress	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:IpNetmask	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:IpWithPort	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:Latency	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:MemoryBandwidth	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:NetworkBandwidth	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:String	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:TickParamValue	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:Time	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:VectorParamDesc	file:
__call__	./python/m5/params.py	/^    def __call__(self, value):$/;"	m	class:Voltage	file:
__call__	./python/m5/util/__init__.py	/^    def __call__(cls, *args, **kwargs):$/;"	m	class:Singleton	file:
__call__	./python/m5/util/code_formatter.py	/^    def __call__(self, *args, **kwargs):$/;"	m	class:code_formatter	file:
__contains__	./mem/slicc/util.py	/^    def __contains__(self, item):$/;"	m	class:PairContainer	file:
__contains__	./python/m5/debug.py	/^    def __contains__(self, item):$/;"	m	class:AllFlags	file:
__contains__	./python/m5/util/code_formatter.py	/^    def __contains__(self, item):$/;"	m	class:code_formatter	file:
__contains__	./python/m5/util/jobfile.py	/^    def __contains__(self, attr):$/;"	m	class:Data	file:
__contains__	./python/m5/util/multidict.py	/^    def __contains__(self, key):$/;"	m	class:multidict	file:
__contains__	./python/m5/util/region.py	/^    def __contains__(self, other):$/;"	m	class:Region	file:
__contains__	./python/m5/util/region.py	/^    def __contains__(self, position):$/;"	m	class:Regions	file:
__data	./base/bitunion.hh	/^        Data __data;$/;"	m	class:BitfieldBackend::BitfieldBase
__delattr__	./python/m5/util/attrdict.py	/^    def __delattr__(self, attr):$/;"	m	class:attrdict	file:
__delitem__	./python/m5/util/code_formatter.py	/^    def __delitem__(self, item):$/;"	m	class:code_formatter	file:
__delitem__	./python/m5/util/multidict.py	/^    def __delitem__(self, key):$/;"	m	class:multidict	file:
__delitem__	./python/m5/util/orderdict.py	/^    def __delitem__(self, key):$/;"	m	class:orderdict	file:
__delitem__	./python/m5/util/sorteddict.py	/^    def __delitem__(self, key):$/;"	m	class:SortedDict	file:
__div__	./python/m5/params.py	/^    def __div__(self, other):$/;"	m	class:NumericParamValue	file:
__div__	./python/m5/util/smartdict.py	/^    def __div__(self, other):$/;"	m	class:Variable	file:
__egid	./sim/process.hh	/^    uint64_t __egid;$/;"	m	class:LiveProcess
__eq__	./python/m5/params.py	/^    def __eq__(self, other):$/;"	m	class:IpAddress	file:
__eq__	./python/m5/params.py	/^    def __eq__(self, other):$/;"	m	class:IpNetmask	file:
__eq__	./python/m5/params.py	/^    def __eq__(self, other):$/;"	m	class:IpWithPort	file:
__eq__	./python/m5/util/region.py	/^    def __eq__(self, other): return type(self) == type(other)$/;"	m	class:_neg_inf	file:
__eq__	./python/m5/util/region.py	/^    def __eq__(self, other): return type(self) == type(other)$/;"	m	class:_pos_inf	file:
__eq__	./python/m5/util/region.py	/^    def __eq__(self, other):$/;"	m	class:Region	file:
__eq__	./python/m5/util/smartdict.py	/^    def __eq__(self, other):$/;"	m	class:Variable	file:
__euid	./sim/process.hh	/^    uint64_t __euid;$/;"	m	class:LiveProcess
__exit_epilogue	./base/misc.cc	/^__exit_epilogue(int code,$/;"	f
__exit_message	./base/misc.hh	/^__exit_message(const char *prefix, int code,$/;"	f
__float__	./python/m5/params.py	/^    def __float__(self):$/;"	m	class:NumericParamValue	file:
__float__	./python/m5/util/smartdict.py	/^    def __float__(self):$/;"	m	class:Variable	file:
__ge__	./python/m5/util/region.py	/^    def __ge__(self, other): return True$/;"	m	class:_pos_inf	file:
__ge__	./python/m5/util/region.py	/^    def __ge__(self, other): return type(self) == type(other)$/;"	m	class:_neg_inf	file:
__ge__	./python/m5/util/region.py	/^    def __ge__(self, other):$/;"	m	class:Region	file:
__ge__	./python/m5/util/smartdict.py	/^    def __ge__(self, other):$/;"	m	class:Variable	file:
__get_hostname	./base/hostinfo.cc	/^__get_hostname()$/;"	f
__getattr__	./python/m5/SimObject.py	/^    def __getattr__(cls, attr):$/;"	m	class:MetaSimObject	file:
__getattr__	./python/m5/SimObject.py	/^    def __getattr__(self, attr):$/;"	f	file:
__getattr__	./python/m5/options.py	/^    def __getattr__(self, attr):$/;"	m	class:OptionParser	file:
__getattr__	./python/m5/params.py	/^    def __getattr__(self, attr):$/;"	m	class:Clock	file:
__getattr__	./python/m5/params.py	/^    def __getattr__(self, attr):$/;"	m	class:Frequency	file:
__getattr__	./python/m5/params.py	/^    def __getattr__(self, attr):$/;"	m	class:Latency	file:
__getattr__	./python/m5/params.py	/^    def __getattr__(self, attr):$/;"	m	class:ParamDesc	file:
__getattr__	./python/m5/params.py	/^    def __getattr__(self, attr):$/;"	m	class:ParamFactory	file:
__getattr__	./python/m5/params.py	/^    def __getattr__(self, attr):$/;"	m	class:PortRef	file:
__getattr__	./python/m5/proxy.py	/^    def __getattr__(self, attr):$/;"	m	class:AttrProxy	file:
__getattr__	./python/m5/proxy.py	/^    def __getattr__(self, attr):$/;"	m	class:ProxyFactory	file:
__getattr__	./python/m5/util/attrdict.py	/^    def __getattr__(self, attr):$/;"	m	class:attrdict	file:
__getattr__	./python/m5/util/attrdict.py	/^    def __getattr__(self, attr):$/;"	m	class:multiattrdict	file:
__getattr__	./python/m5/util/attrdict.py	/^    def __getattr__(self, attr):$/;"	m	class:optiondict	file:
__getattr__	./python/m5/util/code_formatter.py	/^        def __getattr__(self, attr):$/;"	m	class:code_formatter.Foo	file:
__getattr__	./python/m5/util/grammar.py	/^    def __getattr__(self, attr):$/;"	m	class:Grammar	file:
__getattribute__	./python/m5/util/jobfile.py	/^    def __getattribute__(self, attr):$/;"	m	class:Option	file:
__getitem__	./arch/isa_parser.py	/^    def __getitem__(self, i):    # Allow object (self) to be$/;"	m	class:ISAParser	file:
__getitem__	./arch/isa_parser.py	/^    def __getitem__(self, index):$/;"	m	class:OperandList	file:
__getitem__	./mem/slicc/util.py	/^    def __getitem__(self, item):$/;"	m	class:PairContainer	file:
__getitem__	./python/m5/SimObject.py	/^    def __getitem__(self, key):$/;"	f	file:
__getitem__	./python/m5/debug.py	/^    def __getitem__(self, item):$/;"	m	class:AllFlags	file:
__getitem__	./python/m5/params.py	/^    def __getitem__(self, key):$/;"	m	class:VectorPortRef	file:
__getitem__	./python/m5/proxy.py	/^    def __getitem__(self, key):$/;"	m	class:AttrProxy	file:
__getitem__	./python/m5/util/code_formatter.py	/^    def __getitem__(self, item):$/;"	m	class:code_formatter	file:
__getitem__	./python/m5/util/code_formatter.py	/^    def __getitem__(self, item):$/;"	m	class:lookup	file:
__getitem__	./python/m5/util/jobfile.py	/^    def __getitem__(self, key):$/;"	m	class:Data	file:
__getitem__	./python/m5/util/multidict.py	/^    def __getitem__(self, key):$/;"	m	class:multidict	file:
__getitem__	./python/m5/util/smartdict.py	/^    def __getitem__(self, key):$/;"	m	class:SmartDict	file:
__getstate__	./python/m5/util/attrdict.py	/^    def __getstate__(self):$/;"	m	class:attrdict	file:
__gid	./sim/process.hh	/^    uint64_t __gid;$/;"	m	class:LiveProcess
__gt__	./python/m5/util/region.py	/^    def __gt__(self, other): return False$/;"	m	class:_neg_inf	file:
__gt__	./python/m5/util/region.py	/^    def __gt__(self, other): return type(self) != type(other)$/;"	m	class:_pos_inf	file:
__gt__	./python/m5/util/region.py	/^    def __gt__(self, other):$/;"	m	class:Region	file:
__gt__	./python/m5/util/smartdict.py	/^    def __gt__(self, other):$/;"	m	class:Variable	file:
__has_builtin	./base/bitfield.hh	198;"	d
__iadd__	./arch/isa_parser.py	/^    def __iadd__(self, incr):$/;"	m	class:LineTracker	file:
__iadd__	./python/m5/util/code_formatter.py	/^    def __iadd__(self, data):$/;"	m	class:code_formatter	file:
__iand__	./python/m5/util/region.py	/^    def __iand__(self, other):$/;"	m	class:Regions	file:
__init__	./arch/isa_parser.py	/^        def __init__(self, name, filename, includes, strings):$/;"	m	class:ISAParser.CpuModel
__init__	./arch/isa_parser.py	/^    def __init__(self):$/;"	m	class:NoFormat
__init__	./arch/isa_parser.py	/^    def __init__(self, *items):$/;"	m	class:Stack
__init__	./arch/isa_parser.py	/^    def __init__(self, filename, lineno=1):$/;"	m	class:LineTracker
__init__	./arch/isa_parser.py	/^    def __init__(self, first, second=None):$/;"	m	class:ISAParserError
__init__	./arch/isa_parser.py	/^    def __init__(self, id, params, code):$/;"	m	class:Format
__init__	./arch/isa_parser.py	/^    def __init__(self, output_dir):$/;"	m	class:ISAParser
__init__	./arch/isa_parser.py	/^    def __init__(self, parser, code):$/;"	m	class:OperandList
__init__	./arch/isa_parser.py	/^    def __init__(self, parser, code, master_list):$/;"	m	class:SubOperandList
__init__	./arch/isa_parser.py	/^    def __init__(self, parser, full_name, ext, is_src, is_dest):$/;"	m	class:Operand
__init__	./arch/isa_parser.py	/^    def __init__(self, parser, mnem, class_name, base_class = '',$/;"	m	class:InstObjParams
__init__	./arch/isa_parser.py	/^    def __init__(self, parser, t):$/;"	m	class:Template
__init__	./arch/isa_parser.py	/^    def __init__(self, parser,$/;"	m	class:GenCode
__init__	./arch/micro_asm.py	/^    def __init__(self):$/;"	m	class:Block
__init__	./arch/micro_asm.py	/^    def __init__(self):$/;"	m	class:Directive
__init__	./arch/micro_asm.py	/^    def __init__(self):$/;"	m	class:Label
__init__	./arch/micro_asm.py	/^    def __init__(self):$/;"	m	class:Microop
__init__	./arch/micro_asm.py	/^    def __init__(self):$/;"	m	class:Statement
__init__	./arch/micro_asm.py	/^    def __init__(self, macro_type, microops,$/;"	m	class:MicroAssembler
__init__	./arch/micro_asm.py	/^    def __init__(self, name):$/;"	m	class:Micro_Container
__init__	./arch/micro_asm.py	/^    def __init__(self, name):$/;"	m	class:Rom
__init__	./arch/micro_asm.py	/^    def __init__(self, name, target):$/;"	m	class:Rom_Macroop
__init__	./arch/micro_asm_test.py	/^    def __init__(self):$/;"	m	class:Bah
__init__	./arch/micro_asm_test.py	/^    def __init__(self):$/;"	m	class:Bah_Tweaked
__init__	./arch/micro_asm_test.py	/^    def __init__(self):$/;"	m	class:Dah
__init__	./arch/micro_asm_test.py	/^    def __init__(self, first_param, second_param):$/;"	m	class:Hoop
__init__	./arch/micro_asm_test.py	/^    def __init__(self, name):$/;"	m	class:TestMacroop
__init__	./mem/slicc/ast/AST.py	/^    def __init__(self, slicc, pairs=None):$/;"	m	class:AST
__init__	./mem/slicc/ast/ActionDeclAST.py	/^    def __init__(self, slicc, ident, pairs, statement_list):$/;"	m	class:ActionDeclAST
__init__	./mem/slicc/ast/AssignStatementAST.py	/^    def __init__(self, slicc, lvalue, rvalue):$/;"	m	class:AssignStatementAST
__init__	./mem/slicc/ast/CheckAllocateStatementAST.py	/^    def __init__(self, slicc, variable):$/;"	m	class:CheckAllocateStatementAST
__init__	./mem/slicc/ast/CheckNextCycleAST.py	/^    def __init__(self, slicc):$/;"	m	class:CheckNextCycleAST
__init__	./mem/slicc/ast/DeclAST.py	/^    def __init__(self, slicc, pairs = None):$/;"	m	class:DeclAST
__init__	./mem/slicc/ast/DeclListAST.py	/^    def __init__(self, slicc, decls):$/;"	m	class:DeclListAST
__init__	./mem/slicc/ast/EnqueueStatementAST.py	/^    def __init__(self, slicc, queue_name, type_ast, lexpr, statements):$/;"	m	class:EnqueueStatementAST
__init__	./mem/slicc/ast/EnumDeclAST.py	/^    def __init__(self, slicc, type_ast, pairs, fields):$/;"	m	class:EnumDeclAST
__init__	./mem/slicc/ast/EnumExprAST.py	/^    def __init__(self, slicc, type_ast, value):$/;"	m	class:EnumExprAST
__init__	./mem/slicc/ast/ExprAST.py	/^    def __init__(self, slicc):$/;"	m	class:ExprAST
__init__	./mem/slicc/ast/ExprStatementAST.py	/^    def __init__(self, slicc, expr):$/;"	m	class:ExprStatementAST
__init__	./mem/slicc/ast/FormalParamAST.py	/^    def __init__(self, slicc, type_ast, ident, default = None, pointer = False):$/;"	m	class:FormalParamAST
__init__	./mem/slicc/ast/FuncCallExprAST.py	/^    def __init__(self, slicc, proc_name, exprs):$/;"	m	class:FuncCallExprAST
__init__	./mem/slicc/ast/FuncDeclAST.py	/^    def __init__(self, slicc, return_type, ident, formals, pairs, statements):$/;"	m	class:FuncDeclAST
__init__	./mem/slicc/ast/IfStatementAST.py	/^    def __init__(self, slicc, cond, then, else_):$/;"	m	class:IfStatementAST
__init__	./mem/slicc/ast/InPortDeclAST.py	/^    def __init__(self, slicc, ident, msg_type, var_expr, pairs, statements):$/;"	m	class:InPortDeclAST
__init__	./mem/slicc/ast/IsValidPtrExprAST.py	/^    def __init__(self, slicc, variable, flag):$/;"	m	class:IsValidPtrExprAST
__init__	./mem/slicc/ast/LiteralExprAST.py	/^    def __init__(self, slicc, literal, type):$/;"	m	class:LiteralExprAST
__init__	./mem/slicc/ast/LocalVariableAST.py	/^    def __init__(self, slicc, type_ast, ident, pointer = False):$/;"	m	class:LocalVariableAST
__init__	./mem/slicc/ast/MachineAST.py	/^    def __init__(self, slicc, mtype, pairs_ast, config_parameters, decls):$/;"	m	class:MachineAST
__init__	./mem/slicc/ast/MemberExprAST.py	/^    def __init__(self, slicc, expr_ast, field):$/;"	m	class:MemberExprAST
__init__	./mem/slicc/ast/MethodCallExprAST.py	/^    def __init__(self, slicc, obj_expr_ast, func_call):$/;"	m	class:MemberMethodCallExprAST
__init__	./mem/slicc/ast/MethodCallExprAST.py	/^    def __init__(self, slicc, proc_name, expr_ast_vec):$/;"	m	class:MethodCallExprAST
__init__	./mem/slicc/ast/MethodCallExprAST.py	/^    def __init__(self, slicc, type_ast, proc_name, expr_ast_vec):$/;"	m	class:ClassMethodCallExprAST
__init__	./mem/slicc/ast/NewExprAST.py	/^    def __init__(self, slicc, type_ast):$/;"	m	class:NewExprAST
__init__	./mem/slicc/ast/ObjDeclAST.py	/^    def __init__(self, slicc, type_ast, ident, pairs, rvalue, pointer):$/;"	m	class:ObjDeclAST
__init__	./mem/slicc/ast/OodAST.py	/^    def __init__(self, slicc):$/;"	m	class:OodAST
__init__	./mem/slicc/ast/OperatorExprAST.py	/^    def __init__(self, slicc, left, op, right):$/;"	m	class:InfixOperatorExprAST
__init__	./mem/slicc/ast/OperatorExprAST.py	/^    def __init__(self, slicc, op, operand):$/;"	m	class:PrefixOperatorExprAST
__init__	./mem/slicc/ast/OutPortDeclAST.py	/^    def __init__(self, slicc, ident, msg_type, var_expr, pairs):$/;"	m	class:OutPortDeclAST
__init__	./mem/slicc/ast/PairAST.py	/^    def __init__(self, slicc, key, value):$/;"	m	class:PairAST
__init__	./mem/slicc/ast/PairListAST.py	/^    def __init__(self, slicc):$/;"	m	class:PairListAST
__init__	./mem/slicc/ast/PeekStatementAST.py	/^    def __init__(self, slicc, queue_name, type_ast, pairs, statements, method):$/;"	m	class:PeekStatementAST
__init__	./mem/slicc/ast/ReturnStatementAST.py	/^    def __init__(self, slicc, expr_ast):$/;"	m	class:ReturnStatementAST
__init__	./mem/slicc/ast/StallAndWaitStatementAST.py	/^    def __init__(self, slicc, in_port, address):$/;"	m	class:StallAndWaitStatementAST
__init__	./mem/slicc/ast/StateDeclAST.py	/^    def __init__(self, slicc, type_ast, pairs, states):$/;"	m	class:StateDeclAST
__init__	./mem/slicc/ast/StatementAST.py	/^    def __init__(self, slicc, pairs=None):$/;"	m	class:StatementAST
__init__	./mem/slicc/ast/StatementListAST.py	/^    def __init__(self, slicc, statements):$/;"	m	class:StatementListAST
__init__	./mem/slicc/ast/StaticCastAST.py	/^    def __init__(self, slicc, type_ast, type_modifier, expr_ast):$/;"	m	class:StaticCastAST
__init__	./mem/slicc/ast/TransitionDeclAST.py	/^    def __init__(self, slicc, request_types, states, events, next_state,$/;"	m	class:TransitionDeclAST
__init__	./mem/slicc/ast/TypeAST.py	/^    def __init__(self, slicc, ident):$/;"	m	class:TypeAST
__init__	./mem/slicc/ast/TypeDeclAST.py	/^    def __init__(self, slicc, type_ast, pairs, field_asts):$/;"	m	class:TypeDeclAST
__init__	./mem/slicc/ast/TypeFieldAST.py	/^    def __init__(self, slicc, pairs):$/;"	m	class:TypeFieldAST
__init__	./mem/slicc/ast/TypeFieldEnumAST.py	/^    def __init__(self, slicc, field_id, pairs_ast):$/;"	m	class:TypeFieldEnumAST
__init__	./mem/slicc/ast/TypeFieldStateAST.py	/^    def __init__(self, slicc, field_id, perm_ast, pairs_ast):$/;"	m	class:TypeFieldStateAST
__init__	./mem/slicc/ast/VarExprAST.py	/^    def __init__(self, slicc, var):$/;"	m	class:VarExprAST
__init__	./mem/slicc/parser.py	/^    def __init__(self, filename, base_dir, verbose=False, traceback=False, **kwargs):$/;"	m	class:SLICC
__init__	./mem/slicc/symbols/Action.py	/^  def __init__(self, table, ident, resources, location, pairs):$/;"	m	class:Action
__init__	./mem/slicc/symbols/Func.py	/^    def __init__(self, table, ident, name, location, return_type, param_types,$/;"	m	class:Func
__init__	./mem/slicc/symbols/StateMachine.py	/^    def __init__(self, symtab, ident, location, pairs, config_parameters):$/;"	m	class:StateMachine
__init__	./mem/slicc/symbols/Symbol.py	/^    def __init__(self, symtab, ident, location, pairs=None):$/;"	m	class:Symbol
__init__	./mem/slicc/symbols/SymbolTable.py	/^    def __init__(self, slicc):$/;"	m	class:SymbolTable
__init__	./mem/slicc/symbols/Transition.py	/^    def __init__(self, table, machine, state, event, nextState, actions,$/;"	m	class:Transition
__init__	./mem/slicc/symbols/Type.py	/^    def __init__(self, ident, pairs):$/;"	m	class:Enumeration
__init__	./mem/slicc/symbols/Type.py	/^    def __init__(self, symtab, ident, location, type, code, pairs,$/;"	m	class:DataMember
__init__	./mem/slicc/symbols/Type.py	/^    def __init__(self, table, ident, location, pairs, machine=None):$/;"	m	class:Type
__init__	./mem/slicc/symbols/Var.py	/^    def __init__(self, symtab, ident, location, type, code, pairs,$/;"	m	class:Var
__init__	./mem/slicc/util.py	/^    def __init__(self, filename, lineno, no_warning=False):$/;"	m	class:Location
__init__	./mem/slicc/util.py	/^    def __init__(self, pairs=None):$/;"	m	class:PairContainer
__init__	./python/importer.py	/^    def __init__(self):$/;"	m	class:CodeImporter
__init__	./python/m5/SimObject.py	/^    def __init__(cls, name, bases, dict):$/;"	m	class:MetaSimObject
__init__	./python/m5/SimObject.py	/^    def __init__(self, **kwargs):$/;"	f
__init__	./python/m5/SimObject.py	/^  def __init__(self, type, desc, type_str, example, default_val, access_str):$/;"	m	class:ParamInfo
__init__	./python/m5/debug.py	/^    def __init__(self):$/;"	m	class:AllFlags
__init__	./python/m5/event.py	/^    def __init__(self, eventq, period):$/;"	m	class:ProgressEvent
__init__	./python/m5/event.py	/^    def __init__(self, priority=None):$/;"	m	class:Event
__init__	./python/m5/options.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:OptionParser
__init__	./python/m5/options.py	/^    def __init__(self, split):$/;"	m	class:splitter
__init__	./python/m5/params.py	/^    def __init__(cls, name, bases, dict):$/;"	m	class:CheckedIntType
__init__	./python/m5/params.py	/^    def __init__(cls, name, bases, init_dict):$/;"	m	class:MetaEnum
__init__	./python/m5/params.py	/^    def __init__(self, *args):$/;"	m	class:MasterPort
__init__	./python/m5/params.py	/^    def __init__(self, *args):$/;"	m	class:SlavePort
__init__	./python/m5/params.py	/^    def __init__(self, *args):$/;"	m	class:VectorMasterPort
__init__	./python/m5/params.py	/^    def __init__(self, *args):$/;"	m	class:VectorPort
__init__	./python/m5/params.py	/^    def __init__(self, *args):$/;"	m	class:VectorSlavePort
__init__	./python/m5/params.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:AddrRange
__init__	./python/m5/params.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:IpNetmask
__init__	./python/m5/params.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:IpWithPort
__init__	./python/m5/params.py	/^    def __init__(self, param_desc_class, ptype_str = None):$/;"	m	class:ParamFactory
__init__	./python/m5/params.py	/^    def __init__(self, ptype_str, ptype, *args, **kwargs):$/;"	m	class:ParamDesc
__init__	./python/m5/params.py	/^    def __init__(self, simobj, name, role):$/;"	m	class:PortRef
__init__	./python/m5/params.py	/^    def __init__(self, simobj, name, role):$/;"	m	class:VectorPortRef
__init__	./python/m5/params.py	/^    def __init__(self, simobj, name, role, index):$/;"	m	class:VectorPortElementRef
__init__	./python/m5/params.py	/^    def __init__(self, value):$/;"	m	class:Addr
__init__	./python/m5/params.py	/^    def __init__(self, value):$/;"	m	class:Bool
__init__	./python/m5/params.py	/^    def __init__(self, value):$/;"	m	class:CheckedInt
__init__	./python/m5/params.py	/^    def __init__(self, value):$/;"	m	class:Clock
__init__	./python/m5/params.py	/^    def __init__(self, value):$/;"	m	class:Enum
__init__	./python/m5/params.py	/^    def __init__(self, value):$/;"	m	class:EthernetAddr
__init__	./python/m5/params.py	/^    def __init__(self, value):$/;"	m	class:Float
__init__	./python/m5/params.py	/^    def __init__(self, value):$/;"	m	class:Frequency
__init__	./python/m5/params.py	/^    def __init__(self, value):$/;"	m	class:IpAddress
__init__	./python/m5/params.py	/^    def __init__(self, value):$/;"	m	class:Latency
__init__	./python/m5/params.py	/^    def __init__(self, value):$/;"	m	class:MemorySize
__init__	./python/m5/params.py	/^    def __init__(self, value):$/;"	m	class:MemorySize32
__init__	./python/m5/params.py	/^    def __init__(self, value):$/;"	m	class:Time
__init__	./python/m5/proxy.py	/^    def __init__(self, search_self, search_up):$/;"	m	class:BaseProxy
__init__	./python/m5/proxy.py	/^    def __init__(self, search_self, search_up):$/;"	m	class:ProxyFactory
__init__	./python/m5/proxy.py	/^    def __init__(self, search_self, search_up, attr):$/;"	m	class:AttrProxy
__init__	./python/m5/util/code_formatter.py	/^        def __init__(self, **kwargs):$/;"	m	class:code_formatter.Foo
__init__	./python/m5/util/code_formatter.py	/^    def __init__(cls, name, bases, dct):$/;"	m	class:code_formatter_meta
__init__	./python/m5/util/code_formatter.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:code_formatter
__init__	./python/m5/util/code_formatter.py	/^    def __init__(self, formatter, frame, *args, **kwargs):$/;"	m	class:lookup
__init__	./python/m5/util/grammar.py	/^    def __init__(self, message, token=None):$/;"	m	class:ParseError
__init__	./python/m5/util/jobfile.py	/^    def __init__(self, name, desc, **kwargs):$/;"	m	class:Configuration
__init__	./python/m5/util/jobfile.py	/^    def __init__(self, name, desc, **kwargs):$/;"	m	class:Data
__init__	./python/m5/util/jobfile.py	/^    def __init__(self, name, desc, **kwargs):$/;"	m	class:Group
__init__	./python/m5/util/jobfile.py	/^    def __init__(self, name, desc, **kwargs):$/;"	m	class:Option
__init__	./python/m5/util/jobfile.py	/^    def __init__(self, name, desc, **kwargs):$/;"	m	class:SubOption
__init__	./python/m5/util/jobfile.py	/^    def __init__(self, options):$/;"	m	class:Job
__init__	./python/m5/util/multidict.py	/^    def __init__(self, parent = {}, **kwargs):$/;"	m	class:multidict
__init__	./python/m5/util/orderdict.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:orderdict
__init__	./python/m5/util/region.py	/^    def __init__(self, *args):$/;"	m	class:Regions
__init__	./python/m5/util/terminal.py	/^    def __init__(self, cap_string):$/;"	m	class:ColorStrings
__int__	./arch/isa_parser.py	/^    def __int__(self):$/;"	m	class:LineTracker	file:
__int__	./python/m5/params.py	/^    def __int__(self):$/;"	m	class:NumericParamValue	file:
__int__	./python/m5/util/smartdict.py	/^    def __int__(self):$/;"	m	class:Variable	file:
__internalConcatAttrs	./arch/isa_parser.py	/^    def __internalConcatAttrs(self, attr_name, filter, result):$/;"	m	class:OperandList	file:
__iter__	./python/m5/util/jobfile.py	/^    def __iter__(self):$/;"	m	class:Data	file:
__junk2	./dev/storage/ide_atareg.h	/^    uint8_t	__junk2;$/;"	m	struct:ataparams
__junk3	./dev/storage/ide_atareg.h	/^    uint8_t	__junk3;$/;"	m	struct:ataparams
__junk4	./dev/storage/ide_atareg.h	/^    uint8_t	__junk4;$/;"	m	struct:ataparams
__le__	./python/m5/util/region.py	/^    def __le__(self, other): return True$/;"	m	class:_neg_inf	file:
__le__	./python/m5/util/region.py	/^    def __le__(self, other): return type(self) == type(other)$/;"	m	class:_pos_inf	file:
__le__	./python/m5/util/region.py	/^    def __le__(self, other):$/;"	m	class:Region	file:
__le__	./python/m5/util/smartdict.py	/^    def __le__(self, other):$/;"	m	class:Variable	file:
__len__	./arch/isa_parser.py	/^    def __len__(self):$/;"	m	class:OperandList	file:
__len__	./python/m5/SimObject.py	/^    def __len__(self):$/;"	f	file:
__len__	./python/m5/params.py	/^    def __len__(self):$/;"	m	class:PortRef	file:
__len__	./python/m5/params.py	/^    def __len__(self):$/;"	m	class:VectorPortRef	file:
__len__	./python/m5/util/multidict.py	/^    def __len__(self):$/;"	m	class:multidict	file:
__len__	./python/m5/util/region.py	/^    def __len__(self):$/;"	m	class:Regions	file:
__long__	./python/m5/params.py	/^    def __long__(self):$/;"	m	class:NumericParamValue	file:
__long__	./python/m5/util/smartdict.py	/^    def __long__(self):$/;"	m	class:Variable	file:
__lt__	./python/m5/util/region.py	/^    def __lt__(self, other): return False$/;"	m	class:_pos_inf	file:
__lt__	./python/m5/util/region.py	/^    def __lt__(self, other): return type(self) != type(other)$/;"	m	class:_neg_inf	file:
__lt__	./python/m5/util/region.py	/^    def __lt__(self, other):$/;"	m	class:Region	file:
__lt__	./python/m5/util/smartdict.py	/^    def __lt__(self, other):$/;"	m	class:Variable	file:
__metaclass__	./python/m5/SimObject.py	/^    __metaclass__ = MetaSimObject$/;"	v	class:SimObject
__metaclass__	./python/m5/params.py	/^    __metaclass__ = CheckedIntType$/;"	v	class:CheckedInt
__metaclass__	./python/m5/params.py	/^    __metaclass__ = MetaEnum$/;"	v	class:Enum
__metaclass__	./python/m5/params.py	/^    __metaclass__ = MetaParamValue$/;"	v	class:ParamValue
__metaclass__	./python/m5/params.py	/^    __metaclass__ = MetaParamValue$/;"	v	class:VectorParamValue
__metaclass__	./python/m5/params.py	/^    __metaclass__ = Singleton$/;"	v	class:NullSimObject
__metaclass__	./python/m5/params.py	/^    __metaclass__ = Singleton$/;"	v	class:PortParamDesc
__metaclass__	./python/m5/util/code_formatter.py	/^    __metaclass__ = code_formatter_meta$/;"	v	class:code_formatter
__mul__	./python/m5/params.py	/^    def __mul__(self, other):$/;"	m	class:NumericParamValue	file:
__mul__	./python/m5/proxy.py	/^    def __mul__(self, other):$/;"	m	class:BaseProxy	file:
__mul__	./python/m5/util/smartdict.py	/^    def __mul__(self, other):$/;"	m	class:Variable	file:
__nan	./base/stats/text.cc	/^__nan()$/;"	f
__ne__	./python/m5/params.py	/^    def __ne__(self, other):$/;"	m	class:IpAddress	file:
__ne__	./python/m5/util/region.py	/^    def __ne__(self, other): return type(self) != type(other)$/;"	m	class:_neg_inf	file:
__ne__	./python/m5/util/region.py	/^    def __ne__(self, other): return type(self) != type(other)$/;"	m	class:_pos_inf	file:
__ne__	./python/m5/util/region.py	/^    def __ne__(self, other):$/;"	m	class:Region	file:
__ne__	./python/m5/util/smartdict.py	/^    def __ne__(self, other):$/;"	m	class:Variable	file:
__new__	./python/m5/SimObject.py	/^    def __new__(mcls, name, bases, dict):$/;"	m	class:MetaSimObject	file:
__new__	./python/m5/params.py	/^    def __new__(cls, value):$/;"	m	class:Current	file:
__new__	./python/m5/params.py	/^    def __new__(cls, value):$/;"	m	class:MemoryBandwidth	file:
__new__	./python/m5/params.py	/^    def __new__(cls, value):$/;"	m	class:NetworkBandwidth	file:
__new__	./python/m5/params.py	/^    def __new__(cls, value):$/;"	m	class:Voltage	file:
__new__	./python/m5/params.py	/^    def __new__(mcls, name, bases, dct):$/;"	m	class:MetaParamValue	file:
__new__	./python/m5/params.py	/^    def __new__(mcls, name, bases, dict):$/;"	m	class:MetaEnum	file:
__new__	./python/m5/util/region.py	/^    def __new__(cls, *args):$/;"	m	class:Region	file:
__new__	./sim/Root.py	/^    def __new__(cls, **kwargs):$/;"	m	class:Root	file:
__nonzero__	./python/m5/params.py	/^    def __nonzero__(self):$/;"	m	class:Bool	file:
__nonzero__	./python/m5/util/smartdict.py	/^    def __nonzero__(self):$/;"	m	class:UndefinedVariable	file:
__nonzero__	./python/m5/util/smartdict.py	/^    def __nonzero__(self):$/;"	m	class:Variable	file:
__obsolete1	./dev/storage/ide_atareg.h	/^    uint16_t	__obsolete1;$/;"	m	struct:ataparams
__pad0	./arch/arm/linux/linux.hh	/^        uint32_t __pad0;$/;"	m	struct:ArmLinux64::__anon77
__pad0	./arch/arm/linux/linux.hh	/^        uint32_t __pad0;$/;"	m	struct:ArmLinux64::__anon78
__pad0	./arch/arm/linux/linux.hh	/^        uint8_t   __pad0[4];$/;"	m	struct:ArmLinux32::__anon75
__pad0	./arch/x86/linux/linux.hh	/^        uint32_t __pad0;$/;"	m	struct:X86Linux64::__anon59
__pad0	./arch/x86/linux/linux.hh	/^        uint8_t __pad0[4];$/;"	m	struct:X86Linux32::__anon62
__pad0	./kern/linux/linux.hh	/^        uint32_t        __pad0;$/;"	m	struct:Linux::__anon98
__pad1	./arch/arm/linux/linux.hh	/^        uint32_t __pad1;$/;"	m	struct:ArmLinux32::__anon74
__pad1	./arch/power/linux/linux.hh	/^        uint32_t __pad1;$/;"	m	struct:PowerLinux::__anon54
__pad1	./arch/sparc/linux/linux.hh	/^        char __pad1[4];$/;"	m	struct:SparcLinux::__anon44
__pad2	./arch/arm/linux/linux.hh	/^        uint32_t __pad2;$/;"	m	struct:ArmLinux32::__anon74
__pad2	./arch/power/linux/linux.hh	/^        uint32_t __pad2;$/;"	m	struct:PowerLinux::__anon54
__pad2	./arch/power/linux/linux.hh	/^        uint64_t __pad2;$/;"	m	struct:PowerLinux::__anon55
__pad2	./arch/sparc/linux/linux.hh	/^        char __pad2[4];$/;"	m	struct:SparcLinux::__anon44
__pad3	./arch/arm/linux/linux.hh	/^        uint8_t   __pad3[4];$/;"	m	struct:ArmLinux32::__anon75
__pad3	./arch/sparc/linux/linux.hh	/^        uint8_t __pad3[8];$/;"	m	struct:Sparc32Linux::__anon46
__pad3	./arch/x86/linux/linux.hh	/^        uint8_t __pad3[4];$/;"	m	struct:X86Linux32::__anon62
__pad4	./arch/sparc/linux/linux.hh	/^        uint8_t __pad4[8];$/;"	m	struct:Sparc32Linux::__anon46
__padding1	./arch/x86/linux/process.cc	/^    uint32_t __padding1;$/;"	m	struct:UserDesc64	file:
__pid	./sim/process.hh	/^    uint64_t __pid;$/;"	m	class:LiveProcess
__ppid	./sim/process.hh	/^    uint64_t __ppid;$/;"	m	class:LiveProcess
__radd__	./python/m5/util/smartdict.py	/^    def __radd__(self, other):$/;"	m	class:Variable	file:
__rdiv__	./python/m5/util/smartdict.py	/^    def __rdiv__(self, other):$/;"	m	class:Variable	file:
__repr__	./mem/slicc/ast/ActionDeclAST.py	/^    def __repr__(self):$/;"	m	class:ActionDeclAST	file:
__repr__	./mem/slicc/ast/AssignStatementAST.py	/^    def __repr__(self):$/;"	m	class:AssignStatementAST	file:
__repr__	./mem/slicc/ast/CheckAllocateStatementAST.py	/^    def __repr__(self):$/;"	m	class:CheckAllocateStatementAST	file:
__repr__	./mem/slicc/ast/CheckNextCycleAST.py	/^    def __repr__(self):$/;"	m	class:CheckNextCycleAST	file:
__repr__	./mem/slicc/ast/DeclListAST.py	/^    def __repr__(self):$/;"	m	class:DeclListAST	file:
__repr__	./mem/slicc/ast/EnqueueStatementAST.py	/^    def __repr__(self):$/;"	m	class:EnqueueStatementAST	file:
__repr__	./mem/slicc/ast/EnumDeclAST.py	/^    def __repr__(self):$/;"	m	class:EnumDeclAST	file:
__repr__	./mem/slicc/ast/EnumExprAST.py	/^    def __repr__(self):$/;"	m	class:EnumExprAST	file:
__repr__	./mem/slicc/ast/ExprStatementAST.py	/^    def __repr__(self):$/;"	m	class:ExprStatementAST	file:
__repr__	./mem/slicc/ast/FormalParamAST.py	/^    def __repr__(self):$/;"	m	class:FormalParamAST	file:
__repr__	./mem/slicc/ast/FuncCallExprAST.py	/^    def __repr__(self):$/;"	m	class:FuncCallExprAST	file:
__repr__	./mem/slicc/ast/FuncDeclAST.py	/^    def __repr__(self):$/;"	m	class:FuncDeclAST	file:
__repr__	./mem/slicc/ast/IfStatementAST.py	/^    def __repr__(self):$/;"	m	class:IfStatementAST	file:
__repr__	./mem/slicc/ast/InPortDeclAST.py	/^    def __repr__(self):$/;"	m	class:InPortDeclAST	file:
__repr__	./mem/slicc/ast/IsValidPtrExprAST.py	/^    def __repr__(self):$/;"	m	class:IsValidPtrExprAST	file:
__repr__	./mem/slicc/ast/LiteralExprAST.py	/^    def __repr__(self):$/;"	m	class:LiteralExprAST	file:
__repr__	./mem/slicc/ast/LocalVariableAST.py	/^    def __repr__(self):$/;"	m	class:LocalVariableAST	file:
__repr__	./mem/slicc/ast/MachineAST.py	/^    def __repr__(self):$/;"	m	class:MachineAST	file:
__repr__	./mem/slicc/ast/MemberExprAST.py	/^    def __repr__(self):$/;"	m	class:MemberExprAST	file:
__repr__	./mem/slicc/ast/MethodCallExprAST.py	/^    def __repr__(self):$/;"	m	class:ClassMethodCallExprAST	file:
__repr__	./mem/slicc/ast/MethodCallExprAST.py	/^    def __repr__(self):$/;"	m	class:MemberMethodCallExprAST	file:
__repr__	./mem/slicc/ast/NewExprAST.py	/^    def __repr__(self):$/;"	m	class:NewExprAST	file:
__repr__	./mem/slicc/ast/ObjDeclAST.py	/^    def __repr__(self):$/;"	m	class:ObjDeclAST	file:
__repr__	./mem/slicc/ast/OodAST.py	/^    def __repr__(self):$/;"	m	class:OodAST	file:
__repr__	./mem/slicc/ast/OperatorExprAST.py	/^    def __repr__(self):$/;"	m	class:InfixOperatorExprAST	file:
__repr__	./mem/slicc/ast/OperatorExprAST.py	/^    def __repr__(self):$/;"	m	class:PrefixOperatorExprAST	file:
__repr__	./mem/slicc/ast/OutPortDeclAST.py	/^    def __repr__(self):$/;"	m	class:OutPortDeclAST	file:
__repr__	./mem/slicc/ast/PairAST.py	/^    def __repr__(self):$/;"	m	class:PairAST	file:
__repr__	./mem/slicc/ast/PairListAST.py	/^    def __repr__(self):$/;"	m	class:PairListAST	file:
__repr__	./mem/slicc/ast/PeekStatementAST.py	/^    def __repr__(self):$/;"	m	class:PeekStatementAST	file:
__repr__	./mem/slicc/ast/ReturnStatementAST.py	/^    def __repr__(self):$/;"	m	class:ReturnStatementAST	file:
__repr__	./mem/slicc/ast/StallAndWaitStatementAST.py	/^    def __repr__(self):$/;"	m	class:StallAndWaitStatementAST	file:
__repr__	./mem/slicc/ast/StateDeclAST.py	/^    def __repr__(self):$/;"	m	class:StateDeclAST	file:
__repr__	./mem/slicc/ast/StatementListAST.py	/^    def __repr__(self):$/;"	m	class:StatementListAST	file:
__repr__	./mem/slicc/ast/StaticCastAST.py	/^    def __repr__(self):$/;"	m	class:StaticCastAST	file:
__repr__	./mem/slicc/ast/TransitionDeclAST.py	/^    def __repr__(self):$/;"	m	class:TransitionDeclAST	file:
__repr__	./mem/slicc/ast/TypeAST.py	/^    def __repr__(self):$/;"	m	class:TypeAST	file:
__repr__	./mem/slicc/ast/TypeDeclAST.py	/^    def __repr__(self):$/;"	m	class:TypeDeclAST	file:
__repr__	./mem/slicc/ast/TypeFieldEnumAST.py	/^    def __repr__(self):$/;"	m	class:TypeFieldEnumAST	file:
__repr__	./mem/slicc/ast/TypeFieldStateAST.py	/^    def __repr__(self):$/;"	m	class:TypeFieldStateAST	file:
__repr__	./mem/slicc/ast/VarExprAST.py	/^    def __repr__(self):$/;"	m	class:VarExprAST	file:
__repr__	./mem/slicc/symbols/Action.py	/^  def __repr__(self):$/;"	m	class:Action	file:
__repr__	./mem/slicc/symbols/Event.py	/^    def __repr__(self):$/;"	m	class:Event	file:
__repr__	./mem/slicc/symbols/Func.py	/^    def __repr__(self):$/;"	m	class:Func	file:
__repr__	./mem/slicc/symbols/RequestType.py	/^    def __repr__(self):$/;"	m	class:RequestType	file:
__repr__	./mem/slicc/symbols/State.py	/^    def __repr__(self):$/;"	m	class:State	file:
__repr__	./mem/slicc/symbols/State.py	/^    def __repr__(self):$/;"	m	class:WildcardState	file:
__repr__	./mem/slicc/symbols/StateMachine.py	/^    def __repr__(self):$/;"	m	class:StateMachine	file:
__repr__	./mem/slicc/symbols/Symbol.py	/^    def __repr__(self):$/;"	m	class:Symbol	file:
__repr__	./mem/slicc/symbols/SymbolTable.py	/^    def __repr__(self):$/;"	m	class:SymbolTable	file:
__repr__	./mem/slicc/symbols/Transition.py	/^    def __repr__(self):$/;"	m	class:Transition	file:
__repr__	./mem/slicc/symbols/Var.py	/^    def __repr__(self):$/;"	m	class:Var	file:
__repr__	./python/m5/util/jobfile.py	/^    def __repr__(self):$/;"	m	class:Data	file:
__repr__	./python/m5/util/multidict.py	/^    def __repr__(self):$/;"	m	class:multidict	file:
__repr__	./python/m5/util/region.py	/^    def __repr__(self): return '<neg_inf>'$/;"	m	class:_neg_inf	file:
__repr__	./python/m5/util/region.py	/^    def __repr__(self): return '<pos_inf>'$/;"	m	class:_pos_inf	file:
__repr__	./python/m5/util/region.py	/^    def __repr__(self):$/;"	m	class:Region	file:
__repr__	./python/m5/util/region.py	/^    def __repr__(self):$/;"	m	class:Regions	file:
__repr__	./python/m5/util/sorteddict.py	/^    def __repr__(self):$/;"	m	class:SortedDict	file:
__reserved	./base/stats/info.hh	/^const FlagsType __reserved =    init | display;$/;"	m	namespace:Stats
__reserved1	./dev/net/i8254xGBe_defs.hh	/^            uint16_t __reserved1:5;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon8
__reserved1	./dev/storage/ide_atareg.h	/^    uint16_t	__reserved1;$/;"	m	struct:ataparams
__reserved10	./dev/storage/ide_atareg.h	/^    uint16_t	__reserved10[49];	\/* 206-254: reserved *\/$/;"	m	struct:ataparams
__reserved2	./dev/storage/ide_atareg.h	/^    uint16_t	__reserved2;$/;"	m	struct:ataparams
__reserved3	./dev/storage/ide_atareg.h	/^    uint16_t	__reserved3[2];$/;"	m	struct:ataparams
__reserved4	./dev/storage/ide_atareg.h	/^    uint16_t	__reserved4[2];$/;"	m	struct:ataparams
__reserved6	./dev/storage/ide_atareg.h	/^    uint16_t	__reserved6[5];		\/* 95-99: reserved *\/$/;"	m	struct:ataparams
__reserved7	./dev/storage/ide_atareg.h	/^    uint16_t	__reserved7[23];	\/* 104-126: reserved *\/$/;"	m	struct:ataparams
__reserved8	./dev/storage/ide_atareg.h	/^    uint16_t	__reserved8[31];	\/* 129-159: vendor specific *\/$/;"	m	struct:ataparams
__reserved9	./dev/storage/ide_atareg.h	/^    uint16_t	__reserved9[15];	\/* 161-175: reserved for CFA *\/$/;"	m	struct:ataparams
__retired1	./dev/storage/ide_atareg.h	/^    uint16_t	__retired1[2];		\/* 4-5: # of unform. bytes\/track *\/$/;"	m	struct:ataparams
__retired2	./dev/storage/ide_atareg.h	/^    uint16_t	__retired2[3];$/;"	m	struct:ataparams
__retired3	./dev/storage/ide_atareg.h	/^    uint16_t	__retired3[2];$/;"	m	struct:ataparams
__retired4	./dev/storage/ide_atareg.h	/^    uint16_t	__retired4;$/;"	m	struct:ataparams
__rmul__	./python/m5/params.py	/^    __rmul__ = __mul__$/;"	v	class:NumericParamValue
__rmul__	./python/m5/proxy.py	/^    __rmul__ = __mul__$/;"	v	class:BaseProxy
__rmul__	./python/m5/util/smartdict.py	/^    def __rmul__(self, other):$/;"	m	class:Variable	file:
__rsub__	./python/m5/util/smartdict.py	/^    def __rsub__(self, other):$/;"	m	class:Variable	file:
__rtruediv__	./python/m5/util/smartdict.py	/^    def __rtruediv__(self, other):$/;"	m	class:Variable	file:
__setattr__	./python/m5/SimObject.py	/^    def __setattr__(cls, attr, value):$/;"	m	class:MetaSimObject	file:
__setattr__	./python/m5/SimObject.py	/^    def __setattr__(self, attr, value):$/;"	f	file:
__setattr__	./python/m5/SimObject.py	/^  def __setattr__(self, name, value):$/;"	m	class:ParamInfo	file:
__setattr__	./python/m5/options.py	/^    def __setattr__(self, attr, value):$/;"	m	class:OptionParser	file:
__setattr__	./python/m5/params.py	/^    def __setattr__(self, attr, value):$/;"	m	class:VectorParamValue	file:
__setattr__	./python/m5/proxy.py	/^    def __setattr__(self, attr, value):$/;"	m	class:BaseProxy	file:
__setattr__	./python/m5/util/attrdict.py	/^    def __setattr__(self, attr, value):$/;"	m	class:attrdict	file:
__setitem__	./mem/slicc/symbols/Symbol.py	/^    def __setitem__(self, key, value):$/;"	m	class:Symbol	file:
__setitem__	./mem/slicc/util.py	/^    def __setitem__(self, item, value):$/;"	m	class:PairContainer	file:
__setitem__	./python/m5/params.py	/^    def __setitem__(self, key, value):$/;"	m	class:SimObjectVector	file:
__setitem__	./python/m5/params.py	/^    def __setitem__(self, key, value):$/;"	m	class:VectorPortRef	file:
__setitem__	./python/m5/util/code_formatter.py	/^    def __setitem__(self, item, val):$/;"	m	class:lookup	file:
__setitem__	./python/m5/util/code_formatter.py	/^    def __setitem__(self, item, value):$/;"	m	class:code_formatter	file:
__setitem__	./python/m5/util/multidict.py	/^    def __setitem__(self, key, value):$/;"	m	class:multidict	file:
__setitem__	./python/m5/util/orderdict.py	/^    def __setitem__(self, key, item):$/;"	m	class:orderdict	file:
__setitem__	./python/m5/util/smartdict.py	/^    def __setitem__(self, key, item):$/;"	m	class:SmartDict	file:
__setitem__	./python/m5/util/sorteddict.py	/^    def __setitem__(self, key, item):$/;"	m	class:SortedDict	file:
__setstate__	./python/m5/util/attrdict.py	/^    def __setstate__(self, state):$/;"	m	class:attrdict	file:
__st_ino	./arch/arm/linux/linux.hh	/^        uint32_t  __st_ino;$/;"	m	struct:ArmLinux32::__anon75
__st_ino	./arch/x86/linux/linux.hh	/^        uint32_t __st_ino;$/;"	m	struct:X86Linux32::__anon62
__stattest	./unittest/stattest.cc	/^__stattest()$/;"	f
__str__	./arch/isa_parser.py	/^    def __str__(self):$/;"	m	class:ISAParserError	file:
__str__	./arch/isa_parser.py	/^    def __str__(self):$/;"	m	class:LineTracker	file:
__str__	./arch/isa_parser.py	/^    def __str__(self):$/;"	m	class:Template	file:
__str__	./arch/micro_asm.py	/^    def __str__(self):$/;"	m	class:Micro_Container	file:
__str__	./arch/micro_asm.py	/^    def __str__(self):$/;"	m	class:Rom_Macroop	file:
__str__	./arch/micro_asm_test.py	/^    def __str__(self):$/;"	m	class:Hoop	file:
__str__	./mem/slicc/ast/TypeAST.py	/^    def __str__(self):$/;"	m	class:TypeAST	file:
__str__	./mem/slicc/symbols/Symbol.py	/^    def __str__(self):$/;"	m	class:Symbol	file:
__str__	./mem/slicc/util.py	/^    def __str__(self):$/;"	m	class:Location	file:
__str__	./python/m5/SimObject.py	/^    def __str__(cls):$/;"	m	class:MetaSimObject	file:
__str__	./python/m5/SimObject.py	/^    def __str__(self):$/;"	f	file:
__str__	./python/m5/params.py	/^    def __str__(self):$/;"	m	class:AddrRange	file:
__str__	./python/m5/params.py	/^    def __str__(self):$/;"	m	class:Bool	file:
__str__	./python/m5/params.py	/^    def __str__(self):$/;"	m	class:Clock	file:
__str__	./python/m5/params.py	/^    def __str__(self):$/;"	m	class:Current	file:
__str__	./python/m5/params.py	/^    def __str__(self):$/;"	m	class:Enum	file:
__str__	./python/m5/params.py	/^    def __str__(self):$/;"	m	class:EthernetAddr	file:
__str__	./python/m5/params.py	/^    def __str__(self):$/;"	m	class:IpAddress	file:
__str__	./python/m5/params.py	/^    def __str__(self):$/;"	m	class:IpNetmask	file:
__str__	./python/m5/params.py	/^    def __str__(self):$/;"	m	class:IpWithPort	file:
__str__	./python/m5/params.py	/^    def __str__(self):$/;"	m	class:NetworkBandwidth	file:
__str__	./python/m5/params.py	/^    def __str__(self):$/;"	m	class:NullSimObject	file:
__str__	./python/m5/params.py	/^    def __str__(self):$/;"	m	class:NumericParamValue	file:
__str__	./python/m5/params.py	/^    def __str__(self):$/;"	m	class:PortRef	file:
__str__	./python/m5/params.py	/^    def __str__(self):$/;"	m	class:Time	file:
__str__	./python/m5/params.py	/^    def __str__(self):$/;"	m	class:VectorPortElementRef	file:
__str__	./python/m5/params.py	/^    def __str__(self):$/;"	m	class:VectorPortRef	file:
__str__	./python/m5/params.py	/^    def __str__(self):$/;"	m	class:Voltage	file:
__str__	./python/m5/proxy.py	/^    def __str__(self):$/;"	m	class:BaseProxy	file:
__str__	./python/m5/util/code_formatter.py	/^    def __str__(self):$/;"	m	class:code_formatter	file:
__str__	./python/m5/util/jobfile.py	/^    def __str__(self):$/;"	m	class:Data	file:
__str__	./python/m5/util/multidict.py	/^    def __str__(self):$/;"	m	class:multidict	file:
__sub__	./python/m5/params.py	/^    def __sub__(self, other):$/;"	m	class:NumericParamValue	file:
__sub__	./python/m5/util/smartdict.py	/^    def __sub__(self, other):$/;"	m	class:Variable	file:
__tgid	./arch/mips/linux/process.hh	/^    uint64_t __tgid;$/;"	m	class:MipsLinuxProcess
__to_number	./base/str.hh	/^__to_number(const std::string &value)$/;"	f
__truediv__	./python/m5/util/smartdict.py	/^    def __truediv__(self, other):$/;"	m	class:Variable	file:
__tu_cksum	./base/inet.cc	/^__tu_cksum(const IpPtr &ip)$/;"	f	namespace:Net
__tu_cksum6	./base/inet.cc	/^__tu_cksum6(const Ip6Ptr &ip6)$/;"	f	namespace:Net
__uid	./sim/process.hh	/^    uint64_t __uid;$/;"	m	class:LiveProcess
__unused4	./arch/power/linux/linux.hh	/^        uint32_t __unused4;$/;"	m	struct:PowerLinux::__anon54
__unused4	./arch/power/linux/linux.hh	/^        uint32_t __unused4;$/;"	m	struct:PowerLinux::__anon55
__unused4	./arch/sparc/linux/linux.hh	/^        uint32_t __unused4;$/;"	m	struct:Sparc32Linux::__anon46
__unused4	./arch/sparc/linux/linux.hh	/^        uint64_t __unused4[2];$/;"	m	struct:SparcLinux::__anon44
__unused5	./arch/power/linux/linux.hh	/^        uint32_t __unused5;$/;"	m	struct:PowerLinux::__anon54
__unused5	./arch/power/linux/linux.hh	/^        uint32_t __unused5;$/;"	m	struct:PowerLinux::__anon55
__unused5	./arch/sparc/linux/linux.hh	/^        uint32_t __unused5;$/;"	m	struct:Sparc32Linux::__anon46
_active	./base/debug.cc	/^bool SimpleFlag::_active = false;$/;"	m	class:Debug::SimpleFlag	file:
_active	./base/debug.hh	/^    static bool _active; \/\/ whether debug tracings are enabled$/;"	m	class:Debug::SimpleFlag
_add_cls_child	./python/m5/SimObject.py	/^    def _add_cls_child(cls, name, child):$/;"	m	class:MetaSimObject
_addr	./dev/i2c/device.hh	/^    uint8_t _addr;$/;"	m	class:I2CDevice
_address	./dev/virtio/base.hh	/^    Addr _address;$/;"	m	class:VirtQueue
_allDrainable	./sim/drain.hh	/^    std::unordered_set<Drainable *> _allDrainable;$/;"	m	class:DrainManager
_append	./python/m5/util/code_formatter.py	/^    def _append(self, data):$/;"	m	class:code_formatter
_arm	./kern/kernel_stats.hh	/^    Stats::Scalar _arm;$/;"	m	class:Kernel::Statistics
_asid	./mem/request.hh	/^    int _asid;$/;"	m	class:Request
_asm_	./arch/alpha/pagetable.hh	/^    bool _asm_()  const { return (entry >>  4) & 0x1; }$/;"	f	struct:AlphaISA::PageTableEntry
_attr	./arch/arm/tlb.hh	/^    uint64_t _attr;      \/\/ Memory attributes for last accessed TLB entry$/;"	m	class:ArmISA::TLB
_base	./dev/virtio/base.hh	/^        Addr _base;$/;"	m	class:VirtQueue::VirtRing
_baseMasterPort	./mem/port.hh	/^    BaseMasterPort* _baseMasterPort;$/;"	m	class:BaseSlavePort
_baseSlavePort	./mem/port.hh	/^    BaseSlavePort* _baseSlavePort;$/;"	m	class:BaseMasterPort
_bool_dict	./python/m5/util/convert.py	/^_bool_dict = {$/;"	v
_burstSize	./mem/dramsim2_wrapper.hh	/^    unsigned int _burstSize;$/;"	m	class:DRAMSim2Wrapper
_busAddr	./dev/pci/device.hh	/^    const PciBusAddr _busAddr;$/;"	m	class:PciDevice
_cacheLineSize	./cpu/base.hh	/^    const unsigned int _cacheLineSize;$/;"	m	class:BaseCPU
_cacheLineSize	./mem/port_proxy.hh	/^    const unsigned int _cacheLineSize;$/;"	m	class:PortProxy
_cacheLineSize	./sim/system.hh	/^    const unsigned int _cacheLineSize;$/;"	m	class:System
_cached_ports	./cpu/BaseCPU.py	/^    _cached_ports = ['icache_port', 'dcache_port']$/;"	v
_callpal	./arch/alpha/kernel_stats.hh	/^    Stats::Vector _callpal;$/;"	m	class:AlphaISA::Kernel::Statistics
_canceled	./dev/dma_device.hh	/^        bool _canceled;$/;"	m	class:DmaReadFifo::DmaDoneEvent
_case	./unittest/unittest.cc	/^const char *_case = NULL;$/;"	m	namespace:__anon2	file:
_casePrinted	./unittest/unittest.cc	/^bool _casePrinted = false;$/;"	m	namespace:__anon2	file:
_changeMemoryMode	./python/m5/simulate.py	/^def _changeMemoryMode(system, mode):$/;"	f
_check	./python/m5/params.py	/^    def _check(self):$/;"	m	class:CheckedInt
_check	./python/m5/params.py	/^    def _check(self):$/;"	m	class:NumericParamValue
_clockPeriod	./mem/dramsim2_wrapper.hh	/^    double _clockPeriod;$/;"	m	class:DRAMSim2Wrapper
_clockPeriod	./sim/clock_domain.hh	/^    Tick _clockPeriod;$/;"	m	class:ClockDomain
_cls_get_port_ref	./python/m5/SimObject.py	/^    def _cls_get_port_ref(cls, attr):$/;"	m	class:MetaSimObject
_cmos	./dev/x86/SouthBridge.py	/^    _cmos = Cmos(pio_addr=x86IOAddress(0x70))$/;"	v	class:SouthBridge
_contextId	./cpu/thread_state.hh	/^    ContextID _contextId;$/;"	m	struct:ThreadState
_contextId	./mem/request.hh	/^    ContextID _contextId;$/;"	m	class:Request
_control	./dev/arm/generic_timer.hh	/^    ArchTimerCtrl _control;$/;"	m	class:ArchTimer
_count	./arch/alpha/faults.cc	/^FaultStat AlignmentFault::_count;$/;"	m	class:AlphaISA::AlignmentFault	file:
_count	./arch/alpha/faults.cc	/^FaultStat ArithmeticFault::_count;$/;"	m	class:AlphaISA::ArithmeticFault	file:
_count	./arch/alpha/faults.cc	/^FaultStat DtbAcvFault::_count;$/;"	m	class:AlphaISA::DtbAcvFault	file:
_count	./arch/alpha/faults.cc	/^FaultStat DtbAlignmentFault::_count;$/;"	m	class:AlphaISA::DtbAlignmentFault	file:
_count	./arch/alpha/faults.cc	/^FaultStat DtbPageFault::_count;$/;"	m	class:AlphaISA::DtbPageFault	file:
_count	./arch/alpha/faults.cc	/^FaultStat FloatEnableFault::_count;$/;"	m	class:AlphaISA::FloatEnableFault	file:
_count	./arch/alpha/faults.cc	/^FaultStat IntegerOverflowFault::_count;$/;"	m	class:AlphaISA::IntegerOverflowFault	file:
_count	./arch/alpha/faults.cc	/^FaultStat InterruptFault::_count;$/;"	m	class:AlphaISA::InterruptFault	file:
_count	./arch/alpha/faults.cc	/^FaultStat ItbAcvFault::_count;$/;"	m	class:AlphaISA::ItbAcvFault	file:
_count	./arch/alpha/faults.cc	/^FaultStat ItbPageFault::_count;$/;"	m	class:AlphaISA::ItbPageFault	file:
_count	./arch/alpha/faults.cc	/^FaultStat MachineCheckFault::_count;$/;"	m	class:AlphaISA::MachineCheckFault	file:
_count	./arch/alpha/faults.cc	/^FaultStat NDtbMissFault::_count;$/;"	m	class:AlphaISA::NDtbMissFault	file:
_count	./arch/alpha/faults.cc	/^FaultStat PDtbMissFault::_count;$/;"	m	class:AlphaISA::PDtbMissFault	file:
_count	./arch/alpha/faults.cc	/^FaultStat PalFault::_count;$/;"	m	class:AlphaISA::PalFault	file:
_count	./arch/alpha/faults.cc	/^FaultStat ResetFault::_count;$/;"	m	class:AlphaISA::ResetFault	file:
_count	./arch/alpha/faults.cc	/^FaultStat UnimplementedOpcodeFault::_count;$/;"	m	class:AlphaISA::UnimplementedOpcodeFault	file:
_count	./arch/alpha/faults.hh	/^    static FaultStat _count;$/;"	m	class:AlphaISA::AlignmentFault
_count	./arch/alpha/faults.hh	/^    static FaultStat _count;$/;"	m	class:AlphaISA::ArithmeticFault
_count	./arch/alpha/faults.hh	/^    static FaultStat _count;$/;"	m	class:AlphaISA::DtbAcvFault
_count	./arch/alpha/faults.hh	/^    static FaultStat _count;$/;"	m	class:AlphaISA::DtbAlignmentFault
_count	./arch/alpha/faults.hh	/^    static FaultStat _count;$/;"	m	class:AlphaISA::DtbPageFault
_count	./arch/alpha/faults.hh	/^    static FaultStat _count;$/;"	m	class:AlphaISA::FloatEnableFault
_count	./arch/alpha/faults.hh	/^    static FaultStat _count;$/;"	m	class:AlphaISA::IntegerOverflowFault
_count	./arch/alpha/faults.hh	/^    static FaultStat _count;$/;"	m	class:AlphaISA::InterruptFault
_count	./arch/alpha/faults.hh	/^    static FaultStat _count;$/;"	m	class:AlphaISA::ItbAcvFault
_count	./arch/alpha/faults.hh	/^    static FaultStat _count;$/;"	m	class:AlphaISA::ItbPageFault
_count	./arch/alpha/faults.hh	/^    static FaultStat _count;$/;"	m	class:AlphaISA::MachineCheckFault
_count	./arch/alpha/faults.hh	/^    static FaultStat _count;$/;"	m	class:AlphaISA::NDtbMissFault
_count	./arch/alpha/faults.hh	/^    static FaultStat _count;$/;"	m	class:AlphaISA::PDtbMissFault
_count	./arch/alpha/faults.hh	/^    static FaultStat _count;$/;"	m	class:AlphaISA::PalFault
_count	./arch/alpha/faults.hh	/^    static FaultStat _count;$/;"	m	class:AlphaISA::ResetFault
_count	./arch/alpha/faults.hh	/^    static FaultStat _count;$/;"	m	class:AlphaISA::UnimplementedOpcodeFault
_count	./sim/drain.hh	/^    std::atomic_uint _count;$/;"	m	class:DrainManager
_counter	./dev/net/pktfifo.hh	/^    uint64_t _counter;$/;"	m	class:PacketFifo
_counterLimit	./dev/arm/generic_timer.hh	/^    uint64_t _counterLimit;$/;"	m	class:ArchTimer
_counterLimitReachedEvent	./dev/arm/generic_timer.hh	/^    _counterLimitReachedEvent;$/;"	m	class:ArchTimer
_cpa	./base/cp_annotate.cc	/^CPA *CPA::_cpa;$/;"	m	class:CPA	file:
_cpa	./base/cp_annotate.hh	/^    static CPA *_cpa;$/;"	m	class:CPA
_cpu	./dev/arm/generic_timer.hh	/^        const unsigned _cpu;$/;"	m	class:ArchTimer::Interrupt
_cpuId	./cpu/base.hh	/^    int _cpuId;$/;"	m	class:BaseCPU
_curEventQueue	./sim/eventq.cc	/^__thread EventQueue *_curEventQueue = NULL;$/;"	v
_curTick	./sim/eventq.hh	/^    Tick _curTick;$/;"	m	class:EventQueue
_data	./dev/dma_device.hh	/^        std::vector<uint8_t> _data;$/;"	m	class:DmaReadFifo::DmaDoneEvent
_data	./dev/net/i8254xGBe_defs.hh	/^        T _data;$/;"	m	struct:iGbReg::Regs::Reg
_data	./dev/pci/copy_engine_defs.hh	/^    T _data;$/;"	m	struct:CopyEngineReg::Reg
_dataMasterId	./cpu/base.hh	/^    MasterID _dataMasterId;$/;"	m	class:BaseCPU
_decoderFlavour	./arch/arm/isa.hh	/^        const Enums::DecoderFlavour _decoderFlavour;$/;"	m	class:ArmISA::ISA
_defaultNumPhysCCRegs	./cpu/o3/O3CPU.py	/^    _defaultNumPhysCCRegs = 0$/;"	v	class:DerivO3CPU
_deferred_event_types	./arch/arm/ArmPMU.py	/^    _deferred_event_types = []$/;"	v
_del_keys	./python/m5/util/sorteddict.py	/^    def _del_keys(self):$/;"	m	class:SortedDict
_desc	./base/debug.hh	/^    const char *_desc;$/;"	m	class:Debug::Flag
_destMiscRegIdx	./cpu/o3/dyn_inst.hh	/^    std::array<short, TheISA::MaxMiscDestRegs> _destMiscRegIdx;$/;"	m	class:BaseO3DynInst
_destMiscRegVal	./cpu/o3/dyn_inst.hh	/^    std::array<MiscReg, TheISA::MaxMiscDestRegs> _destMiscRegVal;$/;"	m	class:BaseO3DynInst
_destRegIdx	./cpu/base_dyn_inst.hh	/^    std::array<PhysRegIndex, TheISA::MaxInstDestRegs> _destRegIdx;$/;"	m	class:BaseDynInst
_destRegIdx	./cpu/static_inst.hh	/^    RegIndex _destRegIdx[MaxInstDestRegs];$/;"	m	class:StaticInst
_deviceStatus	./dev/virtio/base.hh	/^    DeviceStatus _deviceStatus;$/;"	m	class:VirtIODeviceBase
_dirty	./arch/arm/table_walker.hh	/^        bool _dirty;$/;"	m	class:ArmISA::TableWalker::L1Descriptor
_dirty	./arch/arm/table_walker.hh	/^        bool _dirty;$/;"	m	class:ArmISA::TableWalker::L2Descriptor
_dirty	./arch/arm/table_walker.hh	/^        bool _dirty;$/;"	m	class:ArmISA::TableWalker::LongDescriptor
_disableSanityCheck	./mem/packet_queue.hh	/^    bool _disableSanityCheck;$/;"	m	class:PacketQueue
_dma1	./dev/x86/SouthBridge.py	/^    _dma1 = I8237(pio_addr=x86IOAddress(0x0))$/;"	v	class:SouthBridge
_domainID	./sim/clock_domain.hh	/^    const uint32_t _domainID;$/;"	m	class:SrcClockDomain
_done	./dev/dma_device.hh	/^        bool _done;$/;"	m	class:DmaReadFifo::DmaDoneEvent
_doneEvent	./dev/net/dist_etherlink.hh	/^        DoneEvent _doneEvent;$/;"	m	class:DistEtherLink::RxLink
_drain	./python/m5/simulate.py	/^    def _drain():$/;"	f	function:drain
_drainManager	./sim/drain.hh	/^    DrainManager &_drainManager;$/;"	m	class:Drainable
_drainState	./sim/drain.hh	/^    mutable DrainState _drainState;$/;"	m	class:Drainable
_drain_manager	./python/m5/simulate.py	/^_drain_manager = internal.drain.DrainManager.instance()$/;"	v
_draining	./dev/net/dist_iface.hh	/^        bool _draining;$/;"	m	class:DistIface::SyncEvent
_dump	./python/m5/util/multidict.py	/^    def _dump(self):$/;"	m	class:multidict
_dumpkey	./python/m5/util/multidict.py	/^    def _dumpkey(self, key):$/;"	m	class:multidict
_enabled	./base/cp_annotate.hh	/^    bool _enabled;$/;"	m	class:CPA
_enabled	./base/statistics.cc	/^bool _enabled = false;$/;"	m	namespace:Stats	file:
_enabled	./sim/root.hh	/^    bool _enabled;$/;"	m	class:Root
_end	./base/addr_range.hh	/^    Addr _end;$/;"	m	class:AddrRange
_extraData	./mem/request.hh	/^    uint64_t _extraData;$/;"	m	class:Request
_failures	./unittest/unittest.cc	/^unsigned _failures = 0;$/;"	m	namespace:__anon2	file:
_flags	./base/flags.hh	/^    T _flags;$/;"	m	class:Flags
_flags	./mem/request.hh	/^    Flags _flags;$/;"	m	class:Request
_flatDestRegIdx	./cpu/base_dyn_inst.hh	/^    std::array<TheISA::RegIndex, TheISA::MaxInstDestRegs> _flatDestRegIdx;$/;"	m	class:BaseDynInst
_flushMva	./arch/arm/tlb.cc	/^TLB::_flushMva(Addr mva, uint64_t asn, bool secure_lookup, bool hyp,$/;"	f	class:TLB
_foe	./arch/alpha/pagetable.hh	/^    bool _foe()  const { return (entry >>  3) & 0x1; }$/;"	f	struct:AlphaISA::PageTableEntry
_for	./arch/alpha/pagetable.hh	/^    bool _for()  const { return (entry >>  1) & 0x1; }$/;"	f	struct:AlphaISA::PageTableEntry
_format_char	./base/cprintf_formats.hh	/^_format_char(std::ostream &out, const T &data, Format &fmt)$/;"	f	namespace:cp
_format_float	./base/cprintf_formats.hh	/^_format_float(std::ostream &out, const T &data, Format &fmt)$/;"	f	namespace:cp
_format_integer	./base/cprintf_formats.hh	/^_format_integer(std::ostream &out, const T &data, Format &fmt)$/;"	f	namespace:cp
_format_string	./base/cprintf_formats.hh	/^_format_string(std::ostream &out, const T &data, Format &fmt)$/;"	f	namespace:cp
_fow	./arch/alpha/pagetable.hh	/^    bool _fow()  const { return (entry >>  2) & 0x1; }$/;"	f	struct:AlphaISA::PageTableEntry
_freq	./dev/arm/generic_timer.hh	/^    uint64_t _freq;$/;"	m	class:SystemCounter
_gdtSize	./arch/x86/process.hh	/^        Addr _gdtSize;$/;"	m	class:X86ISA::X86LiveProcess
_gdtStart	./arch/x86/process.hh	/^        Addr _gdtStart;$/;"	m	class:X86ISA::X86LiveProcess
_genericTimer	./arch/arm/system.hh	/^    GenericTimer *_genericTimer;$/;"	m	class:ArmSystem
_get_next	./python/m5/params.py	/^    def _get_next(self):$/;"	m	class:VectorPortRef
_get_port_ref	./python/m5/SimObject.py	/^    def _get_port_ref(self, attr):$/;"	f
_get_sorted	./python/m5/util/sorteddict.py	/^    def _get_sorted(self):$/;"	m	class:SortedDict
_gh	./arch/alpha/pagetable.hh	/^    int  _gh()   const { return (entry >>  5) & 0x3; }$/;"	f	struct:AlphaISA::PageTableEntry
_gic	./dev/arm/generic_timer.hh	/^        BaseGic &_gic;$/;"	m	class:ArchTimer::Interrupt
_globalEvent	./sim/global_event.hh	/^        BaseGlobalEvent *_globalEvent;$/;"	m	class:BaseGlobalEvent::BarrierEvent
_hasKernelIRQChip	./cpu/kvm/vm.hh	/^    bool _hasKernelIRQChip;$/;"	m	class:KvmVM
_haveLPAE	./arch/arm/system.hh	/^    const bool _haveLPAE;$/;"	m	class:ArmSystem
_haveLPAE	./arch/arm/table_walker.hh	/^    bool _haveLPAE;$/;"	m	class:ArmISA::TableWalker
_haveLargeAsid64	./arch/arm/system.hh	/^    const bool _haveLargeAsid64;$/;"	m	class:ArmSystem
_haveLargeAsid64	./arch/arm/table_walker.hh	/^    bool _haveLargeAsid64;$/;"	m	class:ArmISA::TableWalker
_haveSecurity	./arch/arm/system.hh	/^    const bool _haveSecurity;$/;"	m	class:ArmSystem
_haveVirtualization	./arch/arm/system.hh	/^    const bool _haveVirtualization;$/;"	m	class:ArmSystem
_haveVirtualization	./arch/arm/table_walker.hh	/^    bool _haveVirtualization;$/;"	m	class:ArmISA::TableWalker
_height	./base/framebuffer.hh	/^    unsigned _height;$/;"	m	class:FrameBuffer
_highestELIs64	./arch/arm/system.hh	/^    bool _highestELIs64;$/;"	m	class:ArmSystem
_hwrei	./kern/kernel_stats.hh	/^    Stats::Scalar _hwrei;$/;"	m	class:Kernel::Statistics
_hypervisor_desc_base	./arch/sparc/SparcSystem.py	/^    _hypervisor_desc_base = 0x1f12080000$/;"	v	class:SparcSystem
_id	./cpu/timebuf.hh	/^    int _id;$/;"	m	class:TimeBuffer
_index	./dev/virtio/base.hh	/^    Index _index;$/;"	m	class:VirtDescriptor
_instMasterId	./cpu/base.hh	/^    MasterID _instMasterId;$/;"	m	class:BaseCPU
_instance	./sim/drain.cc	/^DrainManager DrainManager::_instance;$/;"	m	class:DrainManager	file:
_instance	./sim/drain.hh	/^    static DrainManager _instance;$/;"	m	class:DrainManager
_instantiate	./python/m5/params.py	/^    def _instantiate(self, parent = None, path = ''):$/;"	m	class:NullSimObject
_interrupt	./dev/arm/generic_timer.hh	/^    Interrupt _interrupt;$/;"	m	class:ArchTimer
_interrupt	./dev/arm/gpu_nomali.cc	/^NoMaliGpu::_interrupt(nomali_handle_t h, void *usr, nomali_int_t intno, int set)$/;"	f	class:NoMaliGpu
_interval	./cpu/base.hh	/^    Tick _interval;$/;"	m	class:CPUProgressEvent
_io_apic	./dev/x86/SouthBridge.py	/^    _io_apic = I82094AA(pio_addr=0xFEC00000)$/;"	v	class:SouthBridge
_ip	./base/inet.hh	/^    uint32_t _ip;$/;"	m	struct:Net::IpAddress
_iplCount	./kern/kernel_stats.hh	/^    Stats::Vector _iplCount;$/;"	m	class:Kernel::Statistics
_iplGood	./kern/kernel_stats.hh	/^    Stats::Vector _iplGood;$/;"	m	class:Kernel::Statistics
_iplTicks	./kern/kernel_stats.hh	/^    Stats::Vector _iplTicks;$/;"	m	class:Kernel::Statistics
_iplUsed	./kern/kernel_stats.hh	/^    Stats::Formula _iplUsed;$/;"	m	class:Kernel::Statistics
_irq	./dev/arm/generic_timer.hh	/^        const unsigned _irq;$/;"	m	class:ArchTimer::Interrupt
_isDirty	./mem/cache/cache.hh	/^    bool _isDirty;$/;"	m	class:CacheBlkIsDirtyVisitor
_isSecure	./mem/packet.hh	/^    bool _isSecure;$/;"	m	class:Packet
_isUncacheable	./mem/cache/mshr.hh	/^    bool _isUncacheable;$/;"	m	class:MSHR
_itstate	./arch/arm/types.hh	/^        uint8_t _itstate;$/;"	m	class:ArmISA::PCState
_keyboard	./dev/x86/SouthBridge.py	/^            command_port=x86IOAddress(0x64))$/;"	v	class:SouthBridge
_keys	./python/m5/util/sorteddict.py	/^    def _keys(self):$/;"	m	class:SortedDict
_kids	./base/debug.hh	/^    std::vector<Flag *> _kids;$/;"	m	class:Debug::CompoundFlag
_kre	./arch/alpha/pagetable.hh	/^    bool _kre()  const { return (entry >>  8) & 0x1; }$/;"	f	struct:AlphaISA::PageTableEntry
_kvmRun	./cpu/kvm/base.hh	/^    struct kvm_run *_kvmRun;$/;"	m	class:BaseKvmCPU	typeref:struct:BaseKvmCPU::kvm_run
_kwe	./arch/alpha/pagetable.hh	/^    bool _kwe()  const { return (entry >> 12) & 0x1; }$/;"	f	struct:AlphaISA::PageTableEntry
_lastExpectedData	./mem/mem_checker.hh	/^        std::vector<uint8_t> _lastExpectedData;$/;"	m	class:MemChecker::ByteTracker
_last_avail	./dev/virtio/base.hh	/^    uint16_t _last_avail;$/;"	m	class:VirtQueue
_left_eq	./python/m5/util/sorteddict.py	/^    def _left_eq(self, key):$/;"	m	class:SortedDict
_left_ge	./python/m5/util/sorteddict.py	/^    def _left_ge(self, key):$/;"	m	class:SortedDict
_left_gt	./python/m5/util/sorteddict.py	/^    def _left_gt(self, key):$/;"	m	class:SortedDict
_llseekFunc	./sim/syscall_emul.cc	/^_llseekFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)$/;"	f
_masterId	./cpu/testers/rubytest/RubyTester.hh	/^    MasterID _masterId;$/;"	m	class:RubyTester
_masterId	./mem/request.hh	/^    MasterID _masterId;$/;"	m	class:Request
_masterPort	./mem/port.hh	/^    MasterPort* _masterPort;$/;"	m	class:SlavePort
_maxVnicDistance	./dev/net/sinic.hh	/^    int _maxVnicDistance;$/;"	m	class:Sinic::Device
_maxsize	./dev/net/pktfifo.hh	/^    unsigned _maxsize;$/;"	m	class:PacketFifo
_mem_regions	./dev/arm/RealView.py	/^    _mem_regions = [(Addr('2GB'), Addr('2GB')), (Addr('34GB'), Addr('30GB')),$/;"	v	class:VExpress_EMM64
_mem_regions	./dev/arm/RealView.py	/^    _mem_regions = [(Addr('2GB'), Addr('2GB'))]$/;"	v	class:VExpress_EMM
_mem_regions	./dev/arm/RealView.py	/^    _mem_regions = [(Addr(0), Addr('256MB'))]$/;"	v	class:RealView
_memory_modes	./python/m5/simulate.py	/^_memory_modes = {$/;"	v
_mode	./arch/alpha/kernel_stats.hh	/^    Stats::Vector _mode;$/;"	m	class:AlphaISA::Kernel::Statistics
_modeFraction	./arch/alpha/kernel_stats.hh	/^    Stats::Formula _modeFraction;$/;"	m	class:AlphaISA::Kernel::Statistics
_modeGood	./arch/alpha/kernel_stats.hh	/^    Stats::Vector _modeGood;$/;"	m	class:AlphaISA::Kernel::Statistics
_modeTicks	./arch/alpha/kernel_stats.hh	/^    Stats::Vector _modeTicks;$/;"	m	class:AlphaISA::Kernel::Statistics
_mulcheck	./python/m5/proxy.py	/^    def _mulcheck(self, result):$/;"	m	class:BaseProxy
_n	./arch/sparc/faults.hh	/^    uint32_t _n;$/;"	m	class:SparcISA::EnumeratedFault
_name	./arch/alpha/faults.cc	/^FaultName AlignmentFault::_name = "unalign";$/;"	m	class:AlphaISA::AlignmentFault	file:
_name	./arch/alpha/faults.cc	/^FaultName ArithmeticFault::_name = "arith";$/;"	m	class:AlphaISA::ArithmeticFault	file:
_name	./arch/alpha/faults.cc	/^FaultName DtbAcvFault::_name = "dtb_acv_fault";$/;"	m	class:AlphaISA::DtbAcvFault	file:
_name	./arch/alpha/faults.cc	/^FaultName DtbAlignmentFault::_name = "unalign";$/;"	m	class:AlphaISA::DtbAlignmentFault	file:
_name	./arch/alpha/faults.cc	/^FaultName DtbPageFault::_name = "dtb_page_fault";$/;"	m	class:AlphaISA::DtbPageFault	file:
_name	./arch/alpha/faults.cc	/^FaultName FloatEnableFault::_name = "fen";$/;"	m	class:AlphaISA::FloatEnableFault	file:
_name	./arch/alpha/faults.cc	/^FaultName IntegerOverflowFault::_name = "intover";$/;"	m	class:AlphaISA::IntegerOverflowFault	file:
_name	./arch/alpha/faults.cc	/^FaultName InterruptFault::_name = "interrupt";$/;"	m	class:AlphaISA::InterruptFault	file:
_name	./arch/alpha/faults.cc	/^FaultName ItbAcvFault::_name = "iaccvio";$/;"	m	class:AlphaISA::ItbAcvFault	file:
_name	./arch/alpha/faults.cc	/^FaultName ItbPageFault::_name = "itbmiss";$/;"	m	class:AlphaISA::ItbPageFault	file:
_name	./arch/alpha/faults.cc	/^FaultName MachineCheckFault::_name = "mchk";$/;"	m	class:AlphaISA::MachineCheckFault	file:
_name	./arch/alpha/faults.cc	/^FaultName NDtbMissFault::_name = "dtb_miss_single";$/;"	m	class:AlphaISA::NDtbMissFault	file:
_name	./arch/alpha/faults.cc	/^FaultName PDtbMissFault::_name = "dtb_miss_double";$/;"	m	class:AlphaISA::PDtbMissFault	file:
_name	./arch/alpha/faults.cc	/^FaultName PalFault::_name = "pal";$/;"	m	class:AlphaISA::PalFault	file:
_name	./arch/alpha/faults.cc	/^FaultName ResetFault::_name = "reset";$/;"	m	class:AlphaISA::ResetFault	file:
_name	./arch/alpha/faults.cc	/^FaultName UnimplementedOpcodeFault::_name = "opdec";$/;"	m	class:AlphaISA::UnimplementedOpcodeFault	file:
_name	./arch/alpha/faults.hh	/^    static FaultName _name;$/;"	m	class:AlphaISA::AlignmentFault
_name	./arch/alpha/faults.hh	/^    static FaultName _name;$/;"	m	class:AlphaISA::ArithmeticFault
_name	./arch/alpha/faults.hh	/^    static FaultName _name;$/;"	m	class:AlphaISA::DtbAcvFault
_name	./arch/alpha/faults.hh	/^    static FaultName _name;$/;"	m	class:AlphaISA::DtbAlignmentFault
_name	./arch/alpha/faults.hh	/^    static FaultName _name;$/;"	m	class:AlphaISA::DtbPageFault
_name	./arch/alpha/faults.hh	/^    static FaultName _name;$/;"	m	class:AlphaISA::FloatEnableFault
_name	./arch/alpha/faults.hh	/^    static FaultName _name;$/;"	m	class:AlphaISA::IntegerOverflowFault
_name	./arch/alpha/faults.hh	/^    static FaultName _name;$/;"	m	class:AlphaISA::InterruptFault
_name	./arch/alpha/faults.hh	/^    static FaultName _name;$/;"	m	class:AlphaISA::ItbAcvFault
_name	./arch/alpha/faults.hh	/^    static FaultName _name;$/;"	m	class:AlphaISA::ItbPageFault
_name	./arch/alpha/faults.hh	/^    static FaultName _name;$/;"	m	class:AlphaISA::MachineCheckFault
_name	./arch/alpha/faults.hh	/^    static FaultName _name;$/;"	m	class:AlphaISA::NDtbMissFault
_name	./arch/alpha/faults.hh	/^    static FaultName _name;$/;"	m	class:AlphaISA::PDtbMissFault
_name	./arch/alpha/faults.hh	/^    static FaultName _name;$/;"	m	class:AlphaISA::PalFault
_name	./arch/alpha/faults.hh	/^    static FaultName _name;$/;"	m	class:AlphaISA::ResetFault
_name	./arch/alpha/faults.hh	/^    static FaultName _name;$/;"	m	class:AlphaISA::UnimplementedOpcodeFault
_name	./arch/power/faults.hh	/^    FaultName _name;$/;"	m	class:PowerISA::PowerFault
_name	./base/debug.hh	/^    const char *_name;$/;"	m	class:Debug::Flag
_name	./base/trace.hh	/^    const std::string _name;$/;"	m	class:Named
_name	./cpu/activity.hh	/^    std::string _name;$/;"	m	class:ActivityRecorder
_name	./cpu/o3/free_list.hh	/^    const std::string _name;$/;"	m	class:UnifiedFreeList
_name	./cpu/o3/mem_dep_unit.hh	/^    std::string _name;$/;"	m	class:MemDepUnit
_name	./cpu/o3/scoreboard.hh	/^    const std::string _name;$/;"	m	class:Scoreboard
_name	./cpu/testers/traffic_gen/generators.hh	/^    const std::string _name;$/;"	m	class:BaseGen
_name	./dev/arm/generic_timer.hh	/^    const std::string _name;$/;"	m	class:ArchTimer
_name	./dev/arm/timer_cpulocal.hh	/^        std::string _name;$/;"	m	class:CpuLocalTimer::Timer
_name	./dev/arm/timer_sp804.hh	/^        std::string _name;$/;"	m	class:Sp804::Timer
_name	./dev/intel_8254_timer.hh	/^        std::string _name;$/;"	m	class:Intel8254Timer::Counter
_name	./dev/intel_8254_timer.hh	/^    std::string _name;$/;"	m	class:Intel8254Timer
_name	./dev/mc146818.hh	/^    std::string _name;$/;"	m	class:MC146818
_name	./dev/net/i8254xGBe.hh	/^        std::string _name;$/;"	m	class:IGbE::DescCache
_name	./dev/pixelpump.hh	/^        const std::string _name;$/;"	m	class:BasePixelPump::PixelEvent
_name	./dev/storage/ide_ctrl.hh	/^        std::string _name;$/;"	m	struct:IdeController::Channel
_name	./mem/cache/prefetch/stride.hh	/^        const std::string _name;$/;"	m	class:StridePrefetcher::PCTable
_name	./mem/page_table.hh	/^    const std::string _name;$/;"	m	class:PageTableBase
_name	./mem/physical.hh	/^    std::string _name;$/;"	m	class:PhysicalMemory
_name	./mem/xbar.hh	/^        std::string _name;$/;"	m	class:BaseXBar::Layer
_neg_inf	./python/m5/util/region.py	/^class _neg_inf(object):$/;"	c
_netmask	./base/inet.hh	/^    uint8_t _netmask;$/;"	m	struct:Net::IpNetmask
_new_param	./python/m5/SimObject.py	/^    def _new_param(cls, name, pdesc):$/;"	m	class:MetaSimObject
_new_port	./python/m5/SimObject.py	/^    def _new_port(cls, name, port):$/;"	m	class:MetaSimObject
_nextItstate	./arch/arm/types.hh	/^        uint8_t _nextItstate;$/;"	m	class:ArmISA::PCState
_nextStatus	./cpu/o3/commit.hh	/^    CommitStatus _nextStatus;$/;"	m	class:DefaultCommit
_nnpc	./arch/generic/types.hh	/^    Addr _nnpc;$/;"	m	class:GenericISA::DelaySlotPCState
_nomb	./arch/alpha/pagetable.hh	/^    bool _nomb() const { return (entry >>  7) & 0x1; }$/;"	f	struct:AlphaISA::PageTableEntry
_npc	./arch/generic/types.hh	/^    Addr _npc;$/;"	m	class:GenericISA::PCStateBase
_numCCDestRegs	./cpu/static_inst.hh	/^    int8_t _numCCDestRegs;$/;"	m	class:StaticInst
_numContexts	./sim/system.hh	/^    int _numContexts;$/;"	m	class:System
_numDestMiscRegs	./cpu/o3/dyn_inst.hh	/^    uint8_t _numDestMiscRegs;$/;"	m	class:BaseO3DynInst
_numDestRegs	./cpu/static_inst.hh	/^    int8_t _numDestRegs;$/;"	m	class:StaticInst
_numFPDestRegs	./cpu/static_inst.hh	/^    int8_t _numFPDestRegs;$/;"	m	class:StaticInst
_numIntDestRegs	./cpu/static_inst.hh	/^    int8_t _numIntDestRegs;$/;"	m	class:StaticInst
_numSrcRegs	./cpu/static_inst.hh	/^    int8_t _numSrcRegs;$/;"	m	class:StaticInst
_nupc	./arch/generic/types.hh	/^    MicroPC _nupc;$/;"	m	class:GenericISA::DelaySlotUPCState
_nupc	./arch/generic/types.hh	/^    MicroPC _nupc;$/;"	m	class:GenericISA::UPCState
_nvram_base	./arch/sparc/SparcSystem.py	/^    _nvram_base = 0x1f11000000$/;"	v	class:SparcSystem
_off	./base/inet.hh	/^    int _off;$/;"	m	class:Net::TcpPtr
_off	./base/inet.hh	/^    int _off;$/;"	m	class:Net::UdpPtr
_offset	./dev/arm/generic_timer.hh	/^    uint64_t _offset;$/;"	m	class:ArchTimer
_opClass	./cpu/static_inst.hh	/^    OpClass _opClass;$/;"	m	class:StaticInst
_pad1	./kern/linux/linux.hh	/^        int32_t         _pad1;          \/\/!< for alignment$/;"	m	struct:Linux::__anon97
_paddr	./mem/request.hh	/^    Addr _paddr;$/;"	m	class:Request
_pageStart	./arch/mips/pagetable.hh	/^    Addr _pageStart;$/;"	m	struct:MipsISA::TlbEntry
_pageStart	./arch/power/tlb.hh	/^    Addr _pageStart;$/;"	m	struct:PowerISA::TlbEntry
_params	./sim/sim_object.hh	/^    const SimObjectParams *_params;$/;"	m	class:SimObject
_params	./sim/system.hh	/^    Params *_params;$/;"	m	class:System
_parent	./dev/arm/generic_timer.hh	/^    SimObject &_parent;$/;"	m	class:ArchTimer
_parse_isa_desc	./arch/isa_parser.py	/^    def _parse_isa_desc(self, isa_desc_file):$/;"	m	class:ISAParser
_partition_desc_base	./arch/sparc/SparcSystem.py	/^    _partition_desc_base = 0x1f12000000$/;"	v	class:SparcSystem
_passes	./unittest/unittest.cc	/^unsigned _passes = 0;$/;"	m	namespace:__anon2	file:
_pc	./arch/generic/types.hh	/^    Addr _pc;$/;"	m	class:GenericISA::PCStateBase
_pc	./mem/request.hh	/^    Addr _pc;$/;"	m	class:Request
_pcState	./cpu/simple_thread.hh	/^    TheISA::PCState _pcState;$/;"	m	class:SimpleThread
_perfLevel	./sim/clock_domain.hh	/^    PerfLevel _perfLevel;$/;"	m	class:SrcClockDomain
_perfLevel	./sim/voltage_domain.hh	/^    PerfLevel _perfLevel;$/;"	m	class:VoltageDomain
_period	./dev/arm/generic_timer.hh	/^    Tick _period;$/;"	m	class:SystemCounter
_period	./sim/root.hh	/^    Time _period;$/;"	m	class:Root
_periodTick	./sim/root.hh	/^    Tick _periodTick;$/;"	m	class:Root
_pfn	./arch/alpha/pagetable.hh	/^    Addr _pfn()  const { return (entry >> 32) & 0xffffffff; }$/;"	f	struct:AlphaISA::PageTableEntry
_physAddrRange64	./arch/arm/system.hh	/^    const uint8_t _physAddrRange64;$/;"	m	class:ArmSystem
_pic1	./dev/x86/SouthBridge.py	/^    _pic1 = I8259(pio_addr=x86IOAddress(0x20), mode='I8259Master')$/;"	v	class:SouthBridge
_pic2	./dev/x86/SouthBridge.py	/^    _pic2 = I8259(pio_addr=x86IOAddress(0xA0), mode='I8259Slave')$/;"	v	class:SouthBridge
_pid	./cpu/base.hh	/^    uint32_t _pid;$/;"	m	class:BaseCPU
_pit	./dev/x86/SouthBridge.py	/^    _pit = I8254(pio_addr=x86IOAddress(0x40))$/;"	v	class:SouthBridge
_port	./base/inet.hh	/^    uint16_t _port;$/;"	m	struct:Net::IpWithPort
_port	./mem/port_proxy.hh	/^    MasterPort &_port;$/;"	m	class:PortProxy
_posX	./dev/pixelpump.hh	/^    unsigned _posX;$/;"	m	class:BasePixelPump
_pos_inf	./python/m5/util/region.py	/^class _pos_inf(object):$/;"	c
_ppi	./dev/arm/generic_timer.hh	/^        const bool _ppi;$/;"	m	class:ArchTimer::Interrupt
_prevDestRegIdx	./cpu/base_dyn_inst.hh	/^    std::array<PhysRegIndex, TheISA::MaxInstDestRegs> _prevDestRegIdx;$/;"	m	class:BaseDynInst
_printOnPass	./unittest/unittest.cc	/^bool _printOnPass = (getenv("PRINT_ON_PASS") != NULL);$/;"	m	namespace:__anon2	file:
_priority	./sim/eventq.hh	/^    Priority _priority; \/\/!< event priority$/;"	m	class:Event
_programHeaderCount	./base/loader/elf_object.hh	/^    uint16_t _programHeaderCount;$/;"	m	class:ElfObject
_programHeaderSize	./base/loader/elf_object.hh	/^    uint16_t _programHeaderSize;$/;"	m	class:ElfObject
_programHeaderTable	./base/loader/elf_object.hh	/^    Addr _programHeaderTable;$/;"	m	class:ElfObject
_proxy	./dev/virtio/base.hh	/^        PortProxy &_proxy;$/;"	m	class:VirtQueue::VirtRing
_queueSelect	./dev/virtio/base.hh	/^    QueueID _queueSelect;$/;"	m	class:VirtIODeviceBase
_queueSize	./mem/dramsim2_wrapper.hh	/^    unsigned int _queueSize;$/;"	m	class:DRAMSim2Wrapper
_queues	./dev/virtio/base.hh	/^    std::vector<VirtQueue *> _queues;$/;"	m	class:VirtIODeviceBase
_quiesce	./kern/kernel_stats.hh	/^    Stats::Scalar _quiesce;$/;"	m	class:Kernel::Statistics
_readySrcRegIdx	./cpu/base_dyn_inst.hh	/^    std::bitset<MaxInstSrcRegs> _readySrcRegIdx;$/;"	m	class:BaseDynInst
_regCntkctl	./dev/arm/generic_timer.hh	/^    uint32_t _regCntkctl;$/;"	m	class:SystemCounter
_regIndexList	./arch/arm/kvm/arm_cpu.hh	/^    mutable RegIndexVector _regIndexList;$/;"	m	class:ArmKvmCPU
_regIndexList	./arch/arm/kvm/base_cpu.hh	/^    mutable RegIndexVector _regIndexList;$/;"	m	class:BaseArmKvmCPU
_repeatEvent	./cpu/base.hh	/^    bool _repeatEvent;$/;"	m	class:CPUProgressEvent
_reqInstSeqNum	./mem/request.hh	/^    InstSeqNum _reqInstSeqNum;$/;"	m	class:Request
_reqQueue	./mem/cache/cache.hh	/^        CacheReqPacketQueue _reqQueue;$/;"	m	class:Cache::MemSidePort
_requestSize	./dev/dma_device.hh	/^        size_t _requestSize;$/;"	m	class:DmaReadFifo::DmaDoneEvent
_reserved	./dev/net/pktfifo.hh	/^    unsigned _reserved;$/;"	m	class:PacketFifo
_resetAddr64	./arch/arm/system.hh	/^    const Addr _resetAddr64;$/;"	m	class:ArmSystem
_resetTick	./dev/arm/generic_timer.hh	/^    Tick _resetTick;$/;"	m	class:SystemCounter
_resolution	./cpu/kvm/timer.hh	/^    mutable Tick _resolution;$/;"	m	class:BaseKvmTimer
_right_eq	./python/m5/util/sorteddict.py	/^    def _right_eq(self, key):$/;"	m	class:SortedDict
_right_le	./python/m5/util/sorteddict.py	/^    def _right_le(self, key):$/;"	m	class:SortedDict
_right_lt	./python/m5/util/sorteddict.py	/^    def _right_lt(self, key):$/;"	m	class:SortedDict
_rom_base	./arch/sparc/SparcSystem.py	/^    _rom_base = 0xfff0000000$/;"	v	class:SparcSystem
_root	./sim/root.cc	/^Root *Root::_root = NULL;$/;"	m	class:Root	file:
_root	./sim/root.hh	/^    static Root *_root;$/;"	m	class:Root
_rsv0	./arch/alpha/pagetable.hh	/^    int  _rsv0() const { return (entry >> 14) & 0x3; }$/;"	f	struct:AlphaISA::PageTableEntry
_rsv1	./arch/alpha/pagetable.hh	/^    int  _rsv1() const { return (entry >> 10) & 0x3; }$/;"	f	struct:AlphaISA::PageTableEntry
_set	./base/time.cc	/^Time::_set(bool monotonic)$/;"	f	class:Time
_set_keyword	./python/m5/SimObject.py	/^    def _set_keyword(cls, keyword, val, kwtype):$/;"	m	class:MetaSimObject
_set_param	./python/m5/SimObject.py	/^    def _set_param(cls, name, value, param):$/;"	m	class:MetaSimObject
_set_sorted	./python/m5/util/sorteddict.py	/^    def _set_sorted(self, val):$/;"	m	class:SortedDict
_size	./arch/arm/linux/atag.hh	/^    uint32_t _size;$/;"	m	class:AtagHeader
_size	./arch/arm/types.hh	/^        uint8_t _size;$/;"	m	class:ArmISA::PCState
_size	./arch/sparc/pagetable.hh	/^    _size() const$/;"	f	class:SparcISA::PageTableEntry
_size	./arch/x86/types.hh	/^        uint8_t _size;$/;"	m	class:X86ISA::PCState
_size	./base/statistics.hh	/^    size_type _size;$/;"	m	class:Stats::Vector2dBase
_size	./base/statistics.hh	/^    size_type _size;$/;"	m	class:Stats::VectorBase
_size	./base/statistics.hh	/^    size_type _size;$/;"	m	class:Stats::VectorDistBase
_size	./dev/net/pktfifo.hh	/^    unsigned _size;$/;"	m	class:PacketFifo
_size	./dev/virtio/base.hh	/^    const uint16_t _size;$/;"	m	class:VirtQueue
_size	./mem/request.hh	/^    unsigned _size;$/;"	m	class:Request
_slavePort	./mem/port.hh	/^    SlavePort* _slavePort;$/;"	m	class:MasterPort
_snoopRespQueue	./mem/cache/cache.hh	/^        SnoopRespPacketQueue _snoopRespQueue;$/;"	m	class:Cache::MemSidePort
_socketId	./cpu/base.hh	/^    const uint32_t _socketId;$/;"	m	class:BaseCPU
_speaker	./dev/x86/SouthBridge.py	/^    _speaker = PcSpeaker(pio_addr=x86IOAddress(0x61))$/;"	v	class:SouthBridge
_spinThreshold	./sim/root.hh	/^    Time _spinThreshold;$/;"	m	class:Root
_split	./arch/isa_parser.py	/^        def _split(sec):$/;"	f	function:ISAParser.p_global_let
_srcRegIdx	./cpu/base_dyn_inst.hh	/^    std::array<PhysRegIndex, TheISA::MaxInstSrcRegs> _srcRegIdx;$/;"	m	class:BaseDynInst
_srcRegIdx	./cpu/static_inst.hh	/^    RegIndex _srcRegIdx[MaxInstSrcRegs];$/;"	m	class:StaticInst
_stage1Tlb	./arch/arm/stage2_mmu.hh	/^    TLB *_stage1Tlb;$/;"	m	class:ArmISA::Stage2MMU
_stage2Tlb	./arch/arm/stage2_mmu.hh	/^    TLB *_stage2Tlb;$/;"	m	class:ArmISA::Stage2MMU
_start	./base/addr_range.hh	/^    Addr _start;$/;"	m	class:AddrRange
_start	./base/circlebuf.hh	/^    size_t _start;$/;"	m	class:CircleBuf
_state	./sim/drain.hh	/^    DrainState _state;$/;"	m	class:DrainManager
_status	./base/debug.hh	/^    bool _status;  \/\/ flag status$/;"	m	class:Debug::SimpleFlag
_status	./cpu/kvm/base.hh	/^    Status _status;$/;"	m	class:BaseKvmCPU
_status	./cpu/o3/commit.hh	/^    CommitStatus _status;$/;"	m	class:DefaultCommit
_status	./cpu/o3/cpu.hh	/^    Status _status;$/;"	m	class:FullO3CPU
_status	./cpu/o3/decode.hh	/^    DecodeStatus _status;$/;"	m	class:DefaultDecode
_status	./cpu/o3/fetch.hh	/^    FetchStatus _status;$/;"	m	class:DefaultFetch
_status	./cpu/o3/iew.hh	/^    Status _status;$/;"	m	class:DefaultIEW
_status	./cpu/o3/rename.hh	/^    RenameStatus _status;$/;"	m	class:DefaultRename
_status	./cpu/simple/base.hh	/^    Status _status;$/;"	m	class:BaseSimpleCPU
_status	./cpu/thread_state.hh	/^    ThreadContext::Status _status;$/;"	m	struct:ThreadState
_stop	./base/circlebuf.hh	/^    size_t _stop;$/;"	m	class:CircleBuf
_sw	./arch/alpha/pagetable.hh	/^    Addr _sw()   const { return (entry >> 16) & 0xffff; }$/;"	f	struct:AlphaISA::PageTableEntry
_swap_context	./arch/alpha/kernel_stats.hh	/^    Stats::Scalar _swap_context;$/;"	m	class:AlphaISA::Kernel::Statistics
_switchedOut	./cpu/base.hh	/^    bool _switchedOut;$/;"	m	class:BaseCPU
_syscall	./kern/kernel_stats.hh	/^    Stats::Vector _syscall;$/;"	m	class:Kernel::Statistics
_system	./mem/abstract_mem.hh	/^    System *_system;$/;"	m	class:AbstractMemory
_systemCounter	./dev/arm/generic_timer.hh	/^    SystemCounter &_systemCounter;$/;"	m	class:ArchTimer
_systemPort	./sim/system.hh	/^    SystemPort _systemPort;$/;"	m	class:System
_tag	./unittest/refcnttest.cc	/^    const char *_tag;$/;"	m	class:__anon3::TestRC	file:
_taskId	./cpu/base.hh	/^    uint32_t _taskId;$/;"	m	class:BaseCPU
_taskId	./mem/request.hh	/^    uint32_t _taskId;$/;"	m	class:Request
_tc	./mem/fs_translating_port_proxy.hh	/^    ThreadContext* _tc;$/;"	m	class:FSTranslatingPortProxy
_the_instance	./sim/Root.py	/^    _the_instance = None$/;"	v	class:Root
_threadId	./cpu/thread_state.hh	/^    ThreadID _threadId;$/;"	m	struct:ThreadState
_threadId	./mem/request.hh	/^    ThreadID _threadId;$/;"	m	class:Request
_time	./base/time.hh	/^    timespec _time;$/;"	m	class:Time
_time	./mem/request.hh	/^    Tick _time;$/;"	m	class:Request
_timings	./dev/pixelpump.hh	/^    DisplayTimings _timings;$/;"	m	class:BasePixelPump
_tracing	./base/debug.hh	/^    bool _tracing; \/\/ tracing is enabled and flag is on$/;"	m	class:Debug::SimpleFlag
_transLatency	./sim/dvfs_handler.hh	/^    const Tick _transLatency;$/;"	m	class:DVFSHandler
_type	./base/remote_gdb.hh	/^        int _type;$/;"	m	class:BaseRemoteGDB::TrapEvent
_uncached_master_ports	./cpu/BaseCPU.py	/^    _uncached_master_ports = []$/;"	v
_uncached_slave_ports	./cpu/BaseCPU.py	/^    _uncached_slave_ports = []$/;"	v
_underrun	./dev/pixelpump.hh	/^    bool _underrun;$/;"	m	class:BasePixelPump
_upc	./arch/generic/types.hh	/^    MicroPC _upc;$/;"	m	class:GenericISA::DelaySlotUPCState
_upc	./arch/generic/types.hh	/^    MicroPC _upc;$/;"	m	class:GenericISA::UPCState
_update	./python/m5/debug.py	/^    def _update(self):$/;"	m	class:AllFlags
_ure	./arch/alpha/pagetable.hh	/^    bool _ure()  const { return (entry >>  9) & 0x1; }$/;"	f	struct:AlphaISA::PageTableEntry
_uwe	./arch/alpha/pagetable.hh	/^    bool _uwe()  const { return (entry >> 13) & 0x1; }$/;"	f	struct:AlphaISA::PageTableEntry
_vaddr	./mem/request.hh	/^    Addr _vaddr;$/;"	m	class:Request
_vect	./arch/alpha/faults.cc	/^FaultVect AlignmentFault::_vect = 0x0301;$/;"	m	class:AlphaISA::AlignmentFault	file:
_vect	./arch/alpha/faults.cc	/^FaultVect ArithmeticFault::_vect = 0x0501;$/;"	m	class:AlphaISA::ArithmeticFault	file:
_vect	./arch/alpha/faults.cc	/^FaultVect DtbAcvFault::_vect = 0x0381;$/;"	m	class:AlphaISA::DtbAcvFault	file:
_vect	./arch/alpha/faults.cc	/^FaultVect DtbAlignmentFault::_vect = 0x0301;$/;"	m	class:AlphaISA::DtbAlignmentFault	file:
_vect	./arch/alpha/faults.cc	/^FaultVect DtbPageFault::_vect = 0x0381;$/;"	m	class:AlphaISA::DtbPageFault	file:
_vect	./arch/alpha/faults.cc	/^FaultVect FloatEnableFault::_vect = 0x0581;$/;"	m	class:AlphaISA::FloatEnableFault	file:
_vect	./arch/alpha/faults.cc	/^FaultVect IntegerOverflowFault::_vect = 0x0501;$/;"	m	class:AlphaISA::IntegerOverflowFault	file:
_vect	./arch/alpha/faults.cc	/^FaultVect InterruptFault::_vect = 0x0101;$/;"	m	class:AlphaISA::InterruptFault	file:
_vect	./arch/alpha/faults.cc	/^FaultVect ItbAcvFault::_vect = 0x0081;$/;"	m	class:AlphaISA::ItbAcvFault	file:
_vect	./arch/alpha/faults.cc	/^FaultVect ItbPageFault::_vect = 0x0181;$/;"	m	class:AlphaISA::ItbPageFault	file:
_vect	./arch/alpha/faults.cc	/^FaultVect MachineCheckFault::_vect = 0x0401;$/;"	m	class:AlphaISA::MachineCheckFault	file:
_vect	./arch/alpha/faults.cc	/^FaultVect NDtbMissFault::_vect = 0x0201;$/;"	m	class:AlphaISA::NDtbMissFault	file:
_vect	./arch/alpha/faults.cc	/^FaultVect PDtbMissFault::_vect = 0x0281;$/;"	m	class:AlphaISA::PDtbMissFault	file:
_vect	./arch/alpha/faults.cc	/^FaultVect PalFault::_vect = 0x2001;$/;"	m	class:AlphaISA::PalFault	file:
_vect	./arch/alpha/faults.cc	/^FaultVect ResetFault::_vect = 0x0001;$/;"	m	class:AlphaISA::ResetFault	file:
_vect	./arch/alpha/faults.cc	/^FaultVect UnimplementedOpcodeFault::_vect = 0x0481;$/;"	m	class:AlphaISA::UnimplementedOpcodeFault	file:
_vect	./arch/alpha/faults.hh	/^    static FaultVect _vect;$/;"	m	class:AlphaISA::AlignmentFault
_vect	./arch/alpha/faults.hh	/^    static FaultVect _vect;$/;"	m	class:AlphaISA::ArithmeticFault
_vect	./arch/alpha/faults.hh	/^    static FaultVect _vect;$/;"	m	class:AlphaISA::DtbAcvFault
_vect	./arch/alpha/faults.hh	/^    static FaultVect _vect;$/;"	m	class:AlphaISA::DtbAlignmentFault
_vect	./arch/alpha/faults.hh	/^    static FaultVect _vect;$/;"	m	class:AlphaISA::DtbPageFault
_vect	./arch/alpha/faults.hh	/^    static FaultVect _vect;$/;"	m	class:AlphaISA::FloatEnableFault
_vect	./arch/alpha/faults.hh	/^    static FaultVect _vect;$/;"	m	class:AlphaISA::IntegerOverflowFault
_vect	./arch/alpha/faults.hh	/^    static FaultVect _vect;$/;"	m	class:AlphaISA::InterruptFault
_vect	./arch/alpha/faults.hh	/^    static FaultVect _vect;$/;"	m	class:AlphaISA::ItbAcvFault
_vect	./arch/alpha/faults.hh	/^    static FaultVect _vect;$/;"	m	class:AlphaISA::ItbPageFault
_vect	./arch/alpha/faults.hh	/^    static FaultVect _vect;$/;"	m	class:AlphaISA::MachineCheckFault
_vect	./arch/alpha/faults.hh	/^    static FaultVect _vect;$/;"	m	class:AlphaISA::NDtbMissFault
_vect	./arch/alpha/faults.hh	/^    static FaultVect _vect;$/;"	m	class:AlphaISA::PDtbMissFault
_vect	./arch/alpha/faults.hh	/^    static FaultVect _vect;$/;"	m	class:AlphaISA::PalFault
_vect	./arch/alpha/faults.hh	/^    static FaultVect _vect;$/;"	m	class:AlphaISA::ResetFault
_vect	./arch/alpha/faults.hh	/^    static FaultVect _vect;$/;"	m	class:AlphaISA::UnimplementedOpcodeFault
_videoHeight	./base/vnc/vncinput.hh	/^    uint16_t _videoHeight;$/;"	m	class:VncInput
_videoWidth	./base/vnc/vncinput.hh	/^    uint16_t _videoWidth;$/;"	m	class:VncInput
_voltageDomain	./sim/clock_domain.hh	/^    VoltageDomain *_voltageDomain;$/;"	m	class:ClockDomain
_when	./sim/eventq.hh	/^    Tick _when;         \/\/!< timestamp when event should be processed$/;"	m	class:Event
_width	./base/framebuffer.hh	/^    unsigned _width;$/;"	m	class:FrameBuffer
a	./arch/arm/miscregs.hh	/^        Bitfield<1>    a;       \/\/ Alignment check enable$/;"	m	namespace:ArmISA
a	./arch/arm/miscregs.hh	/^        Bitfield<8> a;$/;"	m	namespace:ArmISA
a	./arch/mips/mt_constants.hh	/^    Bitfield<13>     a;$/;"	m	namespace:MipsISA
a	./arch/x86/pagetable.hh	/^        Bitfield<5> a;$/;"	m	namespace:X86ISA
a	./arch/x86/regs/misc.hh	/^            Bitfield<40> a; \/\/ Accessed$/;"	m	namespace:X86ISA
a	./base/bigint.hh	/^    uint32_t a;$/;"	m	struct:m5_twin32_t
a	./base/bigint.hh	/^    uint64_t a;$/;"	m	struct:m5_twin64_t
a	./base/loader/exec_ecoff.h	/^        struct ecoff_aouthdr a;$/;"	m	struct:ecoff_exechdr	typeref:struct:ecoff_exechdr::ecoff_aouthdr
a0	./arch/mips/mt_constants.hh	/^    Bitfield<20, 18> a0;$/;"	m	namespace:MipsISA
a0	./kern/tru64/tru64.hh	/^            uint64_t a0;        \/\/!< a0$/;"	m	struct:Tru64::nxm_thread_attr::__anon106
a1	./arch/arm/miscregs.hh	/^        Bitfield<22> a1; \/\/ EL1$/;"	m	namespace:ArmISA
a1	./arch/arm/miscregs.hh	/^        Bitfield<22> a1;$/;"	m	namespace:ArmISA
a9scu	./dev/arm/RealView.py	/^    a9scu  = A9SCU(pio_addr=0x1f000000)$/;"	v	class:RealViewPBX
a_type	./sim/process.hh	/^    IntType a_type;$/;"	m	struct:AuxVector
a_val	./sim/process.hh	/^    IntType a_val;$/;"	m	struct:AuxVector
aa	./arch/power/types.hh	/^    Bitfield<1>      aa;$/;"	m	namespace:PowerISA
aaci_fake	./dev/arm/RealView.py	/^    aaci_fake      = AmbaFake(pio_addr=0x1C040000)$/;"	v	class:VExpress_EMM
aaci_fake	./dev/arm/RealView.py	/^    aaci_fake     = AmbaFake(pio_addr=0x10004000)$/;"	v	class:RealViewEB
aaci_fake	./dev/arm/RealView.py	/^    aaci_fake     = AmbaFake(pio_addr=0x10004000)$/;"	v	class:RealViewPBX
aarch64	./arch/arm/insts/static_inst.hh	/^    bool aarch64;$/;"	m	class:ArmISA::ArmStaticInst
aarch64	./arch/arm/table_walker.hh	/^        bool aarch64;$/;"	m	class:ArmISA::TableWalker::LongDescriptor
aarch64	./arch/arm/table_walker.hh	/^        bool aarch64;$/;"	m	class:ArmISA::TableWalker::WalkerState
aarch64	./arch/arm/tlb.hh	/^    bool aarch64;$/;"	m	class:ArmISA::TLB
aarch64	./arch/arm/types.hh	/^        Bitfield<34>     aarch64;$/;"	m	namespace:ArmISA
aarch64	./arch/arm/types.hh	/^        aarch64() const$/;"	f	class:ArmISA::PCState
aarch64	./arch/arm/types.hh	/^        aarch64(bool val)$/;"	f	class:ArmISA::PCState
aarch64EL	./arch/arm/tlb.hh	/^    ExceptionLevel aarch64EL;$/;"	m	class:ArmISA::TLB
aarch64FaultSources	./arch/arm/faults.cc	/^uint8_t ArmFault::aarch64FaultSources[] = {$/;"	m	class:ArmISA::ArmFault	file:
aarch64FaultSources	./arch/arm/faults.hh	/^    static uint8_t aarch64FaultSources[NumFaultSources];$/;"	m	class:ArmISA::ArmFault
abortDisable	./arch/arm/faults.cc	/^AbortFault<T>::abortDisable(ThreadContext *tc)$/;"	f	class:ArmISA::AbortFault
abortDisable	./arch/arm/faults.cc	/^FastInterrupt::abortDisable(ThreadContext *tc)$/;"	f	class:ArmISA::FastInterrupt
abortDisable	./arch/arm/faults.cc	/^Interrupt::abortDisable(ThreadContext *tc)$/;"	f	class:ArmISA::Interrupt
abortDisable	./arch/arm/faults.hh	/^        const bool abortDisable;$/;"	m	struct:ArmISA::ArmFault::FaultVals
abortDisable	./arch/arm/faults.hh	/^    virtual bool abortDisable(ThreadContext* tc) { return vals.abortDisable; }$/;"	f	class:ArmISA::ArmFaultVals
abortDma	./dev/storage/ide_disk.cc	/^IdeDisk::abortDma()$/;"	f	class:IdeDisk
abortFrame	./dev/arm/hdlcd.cc	/^HDLcd::DmaEngine::abortFrame()$/;"	f	class:HDLcd::DmaEngine
abortHandler	./sim/init_signals.cc	/^abortHandler(int sigtype)$/;"	f
abortWrite	./mem/mem_checker.cc	/^MemChecker::ByteTracker::abortWrite(MemChecker::Serial serial)$/;"	f	class:MemChecker::ByteTracker
abortWrite	./mem/mem_checker.cc	/^MemChecker::WriteCluster::abortWrite(MemChecker::Serial serial)$/;"	f	class:MemChecker::WriteCluster
abortWrite	./mem/mem_checker.hh	/^MemChecker::abortWrite(MemChecker::Serial serial, Addr addr, size_t size)$/;"	f	class:MemChecker
abspath	./sim/init.hh	/^    const char *abspath;$/;"	m	struct:EmbeddedPython
abstract	./arch/arm/kvm/BaseArmKvmCPU.py	/^    abstract = True$/;"	v	class:BaseArmKvmCPU
abstract	./arch/generic/BaseTLB.py	/^    abstract = True$/;"	v	class:BaseTLB
abstract	./arch/x86/bios/ACPI.py	/^    abstract = True$/;"	v	class:X86ACPISysDescTable
abstract	./arch/x86/bios/IntelMP.py	/^    abstract = True$/;"	v	class:X86IntelMPBaseConfigEntry
abstract	./arch/x86/bios/IntelMP.py	/^    abstract = True$/;"	v	class:X86IntelMPExtConfigEntry
abstract	./arch/x86/bios/SMBios.py	/^    abstract = True$/;"	v	class:X86SMBiosSMBiosStructure
abstract	./cpu/BaseCPU.py	/^    abstract = True$/;"	v	class:BaseCPU
abstract	./cpu/CPUTracers.py	/^    abstract = True$/;"	v	class:NativeTrace
abstract	./cpu/CheckerCPU.py	/^    abstract = True$/;"	v	class:CheckerCPU
abstract	./cpu/TimingExpr.py	/^    abstract = True;$/;"	v	class:TimingExpr
abstract	./cpu/kvm/BaseKvmCPU.py	/^    abstract = True$/;"	v	class:BaseKvmCPU
abstract	./cpu/pred/BranchPredictor.py	/^    abstract = True$/;"	v	class:BranchPredictor
abstract	./cpu/simple/BaseSimpleCPU.py	/^    abstract = True$/;"	v	class:BaseSimpleCPU
abstract	./cpu/testers/directedtest/RubyDirectedTester.py	/^    abstract = True$/;"	v	class:DirectedGenerator
abstract	./dev/Device.py	/^    abstract = True$/;"	v	class:BasicPioDevice
abstract	./dev/Device.py	/^    abstract = True$/;"	v	class:DmaDevice
abstract	./dev/Device.py	/^    abstract = True$/;"	v	class:PioDevice
abstract	./dev/Platform.py	/^    abstract = True$/;"	v	class:Platform
abstract	./dev/Uart.py	/^    abstract = True$/;"	v	class:Uart
abstract	./dev/arm/AbstractNVM.py	/^    abstract = True$/;"	v	class:AbstractNVM
abstract	./dev/arm/Gic.py	/^    abstract = True$/;"	v	class:BaseGic
abstract	./dev/arm/RealView.py	/^    abstract = True$/;"	v	class:AmbaDmaDevice
abstract	./dev/arm/RealView.py	/^    abstract = True$/;"	v	class:AmbaIntDevice
abstract	./dev/arm/RealView.py	/^    abstract = True$/;"	v	class:AmbaPioDevice
abstract	./dev/i2c/I2C.py	/^    abstract = True$/;"	v	class:I2CDevice
abstract	./dev/net/Ethernet.py	/^    abstract = True$/;"	v	class:EtherDevBase
abstract	./dev/net/Ethernet.py	/^    abstract = True$/;"	v	class:EtherDevice
abstract	./dev/net/Ethernet.py	/^    abstract = True$/;"	v	class:EtherObject
abstract	./dev/pci/PciDevice.py	/^    abstract = True$/;"	v	class:PciDevice
abstract	./dev/pci/PciHost.py	/^    abstract = True$/;"	v	class:PciHost
abstract	./dev/storage/DiskImage.py	/^    abstract = True$/;"	v	class:DiskImage
abstract	./dev/virtio/VirtIO.py	/^    abstract = True$/;"	v	class:VirtIODeviceBase
abstract	./dev/virtio/VirtIO9P.py	/^    abstract = True$/;"	v	class:VirtIO9PBase
abstract	./dev/virtio/VirtIO9P.py	/^    abstract = True$/;"	v	class:VirtIO9PProxy
abstract	./mem/AbstractMemory.py	/^    abstract = True$/;"	v	class:AbstractMemory
abstract	./mem/AddrMapper.py	/^    abstract = True$/;"	v	class:AddrMapper
abstract	./mem/MemObject.py	/^    abstract = True$/;"	v	class:MemObject
abstract	./mem/XBar.py	/^    abstract = True$/;"	v	class:BaseXBar
abstract	./mem/cache/Cache.py	/^    abstract = True$/;"	v	class:BaseCache
abstract	./mem/cache/prefetch/Prefetcher.py	/^    abstract = True$/;"	v	class:BasePrefetcher
abstract	./mem/cache/prefetch/Prefetcher.py	/^    abstract = True$/;"	v	class:QueuedPrefetcher
abstract	./mem/cache/tags/Tags.py	/^    abstract = True$/;"	v	class:BaseSetAssoc
abstract	./mem/cache/tags/Tags.py	/^    abstract = True$/;"	v	class:BaseTags
abstract	./mem/probes/BaseMemProbe.py	/^    abstract = True$/;"	v	class:BaseMemProbe
abstract	./mem/ruby/network/Network.py	/^    abstract = True$/;"	v	class:RubyNetwork
abstract	./mem/ruby/network/garnet/BaseGarnetNetwork.py	/^    abstract = True$/;"	v	class:BaseGarnetNetwork
abstract	./mem/ruby/slicc_interface/Controller.py	/^    abstract = True$/;"	v	class:RubyController
abstract	./mem/ruby/system/Sequencer.py	/^    abstract = True$/;"	v	class:RubyPort
abstract	./python/m5/SimObject.py	/^    abstract = True$/;"	v	class:SimObject
abstract	./sim/ClockDomain.py	/^    abstract = True$/;"	v	class:ClockDomain
abstract	./sim/ClockedObject.py	/^    abstract = True$/;"	v	class:ClockedObject
abstract	./sim/InstTracer.py	/^    abstract = True$/;"	v	class:InstTracer
abstract	./sim/Process.py	/^    abstract = True$/;"	v	class:EmulatedDriver
abstract	./sim/Process.py	/^    abstract = True$/;"	v	class:Process
abstract	./sim/SubSystem.py	/^    abstract = False$/;"	v	class:SubSystem
abstract	./sim/TickedObject.py	/^    abstract = True$/;"	v	class:TickedObject
ac	./arch/x86/regs/misc.hh	/^        Bitfield<18> ac; \/\/ Alignment Check$/;"	m	namespace:X86ISA
acb	./dev/arm/pl111.hh	/^        Bitfield<10,6> acb;$/;"	m	class:Pl111
acc	./arch/alpha/remote_gdb.cc	/^RemoteGDB::acc(Addr va, size_t len)$/;"	f	class:RemoteGDB
acc	./arch/arm/remote_gdb.cc	/^RemoteGDB::acc(Addr va, size_t len)$/;"	f	class:RemoteGDB
acc	./arch/mips/remote_gdb.cc	/^RemoteGDB::acc(Addr va, size_t len)$/;"	f	class:RemoteGDB
acc	./arch/power/remote_gdb.cc	/^RemoteGDB::acc(Addr va, size_t len)$/;"	f	class:RemoteGDB
acc	./arch/sparc/remote_gdb.cc	/^RemoteGDB::acc(Addr va, size_t len)$/;"	f	class:RemoteGDB
acc	./arch/x86/remote_gdb.cc	/^RemoteGDB::acc(Addr va, size_t len)$/;"	f	class:RemoteGDB
accept	./base/remote_gdb.cc	/^GDBListener::accept()$/;"	f	class:GDBListener
accept	./base/socket.cc	/^ListenSocket::accept(bool nodelay)$/;"	f	class:ListenSocket
accept	./base/vnc/vncserver.cc	/^VncServer::accept()$/;"	f	class:VncServer
accept	./dev/net/ethertap.cc	/^TapListener::accept()$/;"	f	class:TapListener
accept	./dev/net/tcp_iface.cc	/^TCPIface::accept()$/;"	f	class:TCPIface
accept	./dev/terminal.cc	/^Terminal::accept()$/;"	f	class:Terminal
accept	./kern/tru64/tru64_syscalls.hh	/^        accept = 30,$/;"	e	enum:SystemCalls::__anon102
acceptArp	./dev/net/ns_gige.hh	/^    bool acceptArp;$/;"	m	class:NSGigE
acceptBroadcast	./dev/net/ns_gige.hh	/^    bool acceptBroadcast;$/;"	m	class:NSGigE
acceptMulticast	./dev/net/ns_gige.hh	/^    bool acceptMulticast;$/;"	m	class:NSGigE
acceptPerfect	./dev/net/ns_gige.hh	/^    bool acceptPerfect;$/;"	m	class:NSGigE
acceptUnicast	./dev/net/ns_gige.hh	/^    bool acceptUnicast;$/;"	m	class:NSGigE
access	./cpu/timebuf.hh	/^    T *access(int idx)$/;"	f	class:TimeBuffer
access	./kern/tru64/tru64_syscalls.hh	/^        access = 33,$/;"	e	enum:SystemCalls::__anon102
access	./mem/abstract_mem.cc	/^AbstractMemory::access(PacketPtr pkt)$/;"	f	class:AbstractMemory
access	./mem/cache/cache.cc	/^Cache::access(PacketPtr pkt, CacheBlk *&blk, Cycles &lat,$/;"	f	class:Cache
access	./mem/physical.cc	/^PhysicalMemory::access(PacketPtr pkt)$/;"	f	class:PhysicalMemory
accessAndRespond	./mem/dram_ctrl.cc	/^DRAMCtrl::accessAndRespond(PacketPtr pkt, Tick static_latency)$/;"	f	class:DRAMCtrl
accessAndRespond	./mem/dramsim2.cc	/^DRAMSim2::accessAndRespond(PacketPtr pkt)$/;"	f	class:DRAMSim2
accessBMI	./dev/storage/ide_ctrl.cc	/^IdeController::Channel::accessBMI(Addr offset,$/;"	f	class:IdeController::Channel
accessBlock	./mem/cache/tags/fa_lru.cc	/^FALRU::accessBlock(Addr addr, bool is_secure, Cycles &lat, int context_src)$/;"	f	class:FALRU
accessBlock	./mem/cache/tags/fa_lru.cc	/^FALRU::accessBlock(Addr addr, bool is_secure, Cycles &lat, int context_src,$/;"	f	class:FALRU
accessBlock	./mem/cache/tags/lru.cc	/^LRU::accessBlock(Addr addr, bool is_secure, Cycles &lat, int master_id)$/;"	f	class:LRU
accessBlock	./mem/cache/tags/random_repl.cc	/^RandomRepl::accessBlock(Addr addr, bool is_secure, Cycles &lat, int master_id)$/;"	f	class:RandomRepl
accessCommand	./dev/storage/ide_ctrl.cc	/^IdeController::Channel::accessCommand(Addr offset,$/;"	f	class:IdeController::Channel
accessControl	./dev/storage/ide_ctrl.cc	/^IdeController::Channel::accessControl(Addr offset,$/;"	f	class:IdeController::Channel
accessDelta	./mem/request.hh	/^    Tick accessDelta;$/;"	m	class:Request
accessDevice	./dev/arm/flash_device.cc	/^FlashDevice::accessDevice(uint64_t address, uint32_t amount, Callback *event,$/;"	f	class:FlashDevice
accessFunc	./sim/syscall_emul.cc	/^accessFunc(SyscallDesc *desc, int callnum, LiveProcess *p, ThreadContext *tc)$/;"	f
accessFunc	./sim/syscall_emul.cc	/^accessFunc(SyscallDesc *desc, int callnum, LiveProcess *p, ThreadContext *tc,$/;"	f
accessLatency	./mem/cache/tags/base.hh	/^    const Cycles accessLatency;$/;"	m	class:BaseTags
accessLatency	./mem/ruby/structures/BankedArray.hh	/^    Cycles accessLatency;$/;"	m	class:BankedArray
accessNonunitFilter	./mem/ruby/structures/Prefetcher.cc	/^Prefetcher::accessNonunitFilter(Addr address, int *stride,$/;"	f	class:Prefetcher
accessTimes	./dev/arm/flash_device.cc	/^FlashDevice::accessTimes(uint64_t block, Actions action)$/;"	f	class:FlashDevice
accessUnitFilter	./mem/ruby/structures/Prefetcher.cc	/^Prefetcher::accessUnitFilter(std::vector<Addr>& filter_table,$/;"	f	class:Prefetcher
access_backing_store	./mem/ruby/system/DMASequencer.hh	/^        bool access_backing_store;$/;"	m	class:DMASequencer::MemSlavePort
access_backing_store	./mem/ruby/system/RubyPort.hh	/^        bool access_backing_store;$/;"	m	class:RubyPort::MemSlavePort
access_backing_store	./mem/ruby/system/RubySystem.py	/^        store and only use ruby for timing.")$/;"	v	class:RubySystem
accesses	./arch/arm/tlb.hh	/^    Stats::Formula accesses;$/;"	m	class:ArmISA::TLB
accesses	./arch/mips/tlb.hh	/^    Stats::Formula accesses;$/;"	m	class:MipsISA::TLB
accesses	./arch/power/tlb.hh	/^    Stats::Formula accesses;$/;"	m	class:PowerISA::TLB
accesses	./mem/cache/base.hh	/^    Stats::Formula accesses[MemCmd::NUM_MEM_CMDS];$/;"	m	class:BaseCache
accesses	./mem/cache/tags/fa_lru.hh	/^    Stats::Scalar accesses;$/;"	m	class:FALRU
accessesInFlight	./cpu/minor/lsq.hh	/^    bool accessesInFlight() const$/;"	f	class:Minor::LSQ
acct	./kern/tru64/tru64_syscalls.hh	/^        acct = 51,$/;"	e	enum:SystemCalls::__anon102
ack	./base/inet.hh	/^    uint32_t ack() const { return ntohl(th_ack); }$/;"	f	struct:Net::TcpHdr
ack	./dev/x86/i8042.cc	/^X86ISA::PS2Device::ack()$/;"	f	class:X86ISA::PS2Device
ackCallback	./mem/ruby/system/DMASequencer.cc	/^DMASequencer::ackCallback()$/;"	f	class:DMASequencer
ackNext	./dev/arm/kmi.hh	/^    int ackNext;$/;"	m	class:Pl050
ack_id	./dev/arm/gic_pl390.hh	/^        Bitfield<9,0> ack_id;$/;"	m	class:Pl390
acknowledge	./dev/virtio/base.hh	/^        Bitfield<0> acknowledge;$/;"	m	class:VirtIODeviceBase
acpi_description_table_pointer	./arch/x86/X86System.py	/^    acpi_description_table_pointer = Param.X86ACPIRSDP($/;"	v	class:X86System
actAllowedAt	./mem/dram_ctrl.hh	/^        Tick actAllowedAt;$/;"	m	class:DRAMCtrl::Bank
actBackEnergy	./mem/dram_ctrl.hh	/^        Stats::Scalar actBackEnergy;$/;"	m	class:DRAMCtrl::Rank
actEnergy	./mem/dram_ctrl.hh	/^        Stats::Scalar actEnergy;$/;"	m	class:DRAMCtrl::Rank
actTicks	./mem/dram_ctrl.hh	/^        std::deque<Tick> actTicks;$/;"	m	class:DRAMCtrl::Rank
actionAfterWb	./dev/net/i8254xGBe.cc	/^IGbE::TxDescCache::actionAfterWb() $/;"	f	class:IGbE::TxDescCache
actionAfterWb	./dev/net/i8254xGBe.hh	/^        virtual void actionAfterWb() {}$/;"	f	class:IGbE::DescCache
actionComplete	./dev/arm/flash_device.cc	/^FlashDevice::actionComplete()$/;"	f	class:FlashDevice
actions	./mem/slicc/generate/tex.py	/^                actions = trans.getActionShorthands()$/;"	v
activate	./cpu/checker/thread_context.hh	/^    void activate() { actualTC->activate(); }$/;"	f	class:CheckerThreadContext
activate	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::activate()$/;"	f	class:O3ThreadContext
activate	./cpu/simple_thread.cc	/^SimpleThread::activate()$/;"	f	class:SimpleThread
activate	./cpu/thread_context.hh	/^    void activate() { actualTC->activate(); }$/;"	f	class:ProxyThreadContext
activateBank	./mem/dram_ctrl.cc	/^DRAMCtrl::activateBank(Rank& rank_ref, Bank& bank_ref,$/;"	f	class:DRAMCtrl
activateContext	./cpu/base.hh	/^    virtual void activateContext(ThreadID thread_num) {}$/;"	f	class:BaseCPU
activateContext	./cpu/kvm/base.cc	/^BaseKvmCPU::activateContext(ThreadID thread_num)$/;"	f	class:BaseKvmCPU
activateContext	./cpu/minor/cpu.cc	/^MinorCPU::activateContext(ThreadID thread_id)$/;"	f	class:MinorCPU
activateContext	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::activateContext(ThreadID tid)$/;"	f	class:FullO3CPU
activateContext	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::activateContext(ThreadID thread_num)$/;"	f	class:AtomicSimpleCPU
activateContext	./cpu/simple/timing.cc	/^TimingSimpleCPU::activateContext(ThreadID thread_num)$/;"	f	class:TimingSimpleCPU
activateEvent	./mem/dram_ctrl.hh	/^        activateEvent;$/;"	m	class:DRAMCtrl::Rank
activateStage	./cpu/activity.cc	/^ActivityRecorder::activateStage(const int idx)$/;"	f	class:ActivityRecorder
activateStage	./cpu/o3/cpu.hh	/^    void activateStage(const StageIdx idx)$/;"	f	class:FullO3CPU
activateStage	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::activateStage()$/;"	f	class:DefaultIEW
activateThread	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::activateThread(ThreadID tid)$/;"	f	class:FullO3CPU
activate_waiting_context	./kern/tru64/tru64.hh	/^    activate_waiting_context(Addr uaddr, LiveProcess *process,$/;"	f	class:Tru64
activationLimit	./mem/dram_ctrl.hh	/^    const uint32_t activationLimit;$/;"	m	class:DRAMCtrl
activation_limit	./mem/DRAMCtrl.py	/^    activation_limit = 0$/;"	v	class:GDDR5_4000_x64
activation_limit	./mem/DRAMCtrl.py	/^    activation_limit = 0$/;"	v	class:HMC_2500_x32
activation_limit	./mem/DRAMCtrl.py	/^    activation_limit = 2$/;"	v	class:WideIO_200_x128
activation_limit	./mem/DRAMCtrl.py	/^    activation_limit = 4$/;"	v	class:DDR3_1600_x64
activation_limit	./mem/DRAMCtrl.py	/^    activation_limit = 4$/;"	v	class:DDR4_2400_x64
activation_limit	./mem/DRAMCtrl.py	/^    activation_limit = 4$/;"	v	class:HBM_1000_4H_x128
activation_limit	./mem/DRAMCtrl.py	/^    activation_limit = 4$/;"	v	class:LPDDR2_S4_1066_x32
activation_limit	./mem/DRAMCtrl.py	/^    activation_limit = 4$/;"	v	class:LPDDR3_1600_x32
activation_limit	./mem/DRAMCtrl.py	/^    activation_limit = Param.Unsigned("Max number of activates in window")$/;"	v	class:DRAMCtrl
active	./arch/sparc/miscregs.hh	/^    const static int active      = 0x01;$/;"	m	struct:SparcISA::STS
active	./base/remote_gdb.hh	/^    bool active;$/;"	m	class:BaseRemoteGDB
active	./cpu/activity.hh	/^    bool active() { return activityCount; }$/;"	f	class:ActivityRecorder
active	./cpu/kvm/vm.hh	/^        bool active;$/;"	m	class:KvmVM::MemorySlot
active	./dev/pixelpump.hh	/^        bool active() const { return scheduled() || suspended; }$/;"	f	class:BasePixelPump::PixelEvent
active	./dev/pixelpump.hh	/^    bool active() const { return evBeginLine.active(); }$/;"	f	class:BasePixelPump
active	./dev/storage/ide_ctrl.hh	/^        Bitfield<0> active;$/;"	m	class:IdeController
activeCpus	./sim/system.hh	/^    std::vector<bool> activeCpus;$/;"	m	class:System
activeDoorbells	./dev/arm/ufs_device.hh	/^    uint8_t activeDoorbells;$/;"	m	class:UFSHostDevice
activeInstPeriod	./cpu/kvm/base.hh	/^    uint64_t activeInstPeriod;$/;"	m	class:BaseKvmCPU
activeInt	./dev/arm/gic_pl390.hh	/^    uint32_t activeInt[INT_BITS_MAX];$/;"	m	class:Pl390
activeRank	./mem/dram_ctrl.hh	/^    uint8_t activeRank;$/;"	m	class:DRAMCtrl
activeThreads	./cpu/o3/commit.hh	/^    std::list<ThreadID> *activeThreads;$/;"	m	class:DefaultCommit
activeThreads	./cpu/o3/cpu.hh	/^    std::list<ThreadID> activeThreads;$/;"	m	class:FullO3CPU
activeThreads	./cpu/o3/decode.hh	/^    std::list<ThreadID> *activeThreads;$/;"	m	class:DefaultDecode
activeThreads	./cpu/o3/fetch.hh	/^    std::list<ThreadID> *activeThreads;$/;"	m	class:DefaultFetch
activeThreads	./cpu/o3/iew.hh	/^    std::list<ThreadID> *activeThreads;$/;"	m	class:DefaultIEW
activeThreads	./cpu/o3/inst_queue.hh	/^    std::list<ThreadID> *activeThreads;$/;"	m	class:InstructionQueue
activeThreads	./cpu/o3/lsq.hh	/^    std::list<ThreadID> *activeThreads;$/;"	m	class:LSQ
activeThreads	./cpu/o3/rename.hh	/^    std::list<ThreadID> *activeThreads;$/;"	m	class:DefaultRename
activeThreads	./cpu/o3/rob.hh	/^    std::list<ThreadID> *activeThreads;$/;"	m	class:ROB
activeThreads	./cpu/simple/base.hh	/^    std::list<ThreadID> activeThreads;$/;"	m	class:BaseSimpleCPU
active_request	./mem/ruby/system/DMASequencer.hh	/^    DMARequest active_request;$/;"	m	class:DMASequencer
activity	./cpu/activity.cc	/^ActivityRecorder::activity()$/;"	f	class:ActivityRecorder
activity	./cpu/o3/O3CPU.py	/^    activity = Param.Unsigned(0, "Initial count")$/;"	v	class:DerivO3CPU
activityBuffer	./cpu/activity.hh	/^    TimeBuffer<bool> activityBuffer;$/;"	m	class:ActivityRecorder
activityCount	./cpu/activity.hh	/^    int activityCount;$/;"	m	class:ActivityRecorder
activityRec	./cpu/o3/cpu.hh	/^    ActivityRecorder activityRec;$/;"	m	class:FullO3CPU
activityRecorder	./cpu/minor/cpu.hh	/^    Minor::MinorActivityRecorder *activityRecorder;$/;"	m	class:MinorCPU
activityRecorder	./cpu/minor/pipeline.hh	/^    MinorActivityRecorder activityRecorder;$/;"	m	class:Minor::Pipeline
activityThisCycle	./cpu/o3/cpu.hh	/^    void activityThisCycle() { activityRec.activity(); }$/;"	f	class:FullO3CPU
activityThisCycle	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::activityThisCycle()$/;"	f	class:DefaultIEW
actualTC	./cpu/checker/thread_context.hh	/^    TC *actualTC;$/;"	m	class:CheckerThreadContext
actualTC	./cpu/thread_context.hh	/^    TC *actualTC;$/;"	m	class:ProxyThreadContext
adaptive_routing	./mem/ruby/network/simple/SimpleNetwork.py	/^    adaptive_routing = Param.Bool(False, "enable adaptive routing");$/;"	v	class:SimpleNetwork
add	./arch/arm/insts/mem.hh	/^    bool add;$/;"	m	class:ArmISA::Memory
add	./arch/arm/pmu.cc	/^PMU::CounterState::add(uint64_t delta)$/;"	f	class:ArmISA::PMU::CounterState
add	./arch/x86/bios/IntelMP.py	/^    add = Param.Bool(False,$/;"	v	class:X86IntelMPCompatAddrSpaceMod
add	./base/callback.hh	/^    add(Callback *callback)$/;"	f	class:CallbackQueue
add	./base/callback.hh	/^    add(T &obj)$/;"	f	class:CallbackQueue
add	./base/callback.hh	/^    add(T *obj)$/;"	f	class:CallbackQueue
add	./base/cp_annotate.cc	/^CPA::add(int t, int f, int c, int sm, int stq, int32_t d)$/;"	f	class:CPA
add	./base/inifile.cc	/^IniFile::Section::add(const std::string &assignment)$/;"	f	class:IniFile::Section
add	./base/inifile.cc	/^IniFile::add(const string &str)$/;"	f	class:IniFile
add	./base/statistics.cc	/^HistStor::add(HistStor *hs)$/;"	f	class:Stats::HistStor
add	./base/statistics.hh	/^    void add(DistBase &d) { data()->add(d.data()); }$/;"	f	class:Stats::DistBase
add	./mem/cache/mshr.cc	/^MSHR::TargetList::add(PacketPtr pkt, Tick readyTime,$/;"	f	class:MSHR::TargetList
add	./mem/ruby/common/Histogram.cc	/^Histogram::add(Histogram& hist)$/;"	f	class:Histogram
add	./mem/ruby/common/Histogram.cc	/^Histogram::add(int64_t value)$/;"	f	class:Histogram
add	./mem/ruby/common/NetDest.cc	/^NetDest::add(MachineID newElement)$/;"	f	class:NetDest
add	./mem/ruby/common/Set.hh	/^    add(NodeID index)$/;"	f	class:Set
add128	./arch/arm/insts/fplib.cc	/^add128(uint64_t *x0, uint64_t *x1, uint64_t a0, uint64_t a1, uint64_t b0,$/;"	f	namespace:ArmISA
addAction	./mem/slicc/symbols/StateMachine.py	/^    def addAction(self, action):$/;"	m	class:StateMachine
addAddressTraceSample	./mem/ruby/profiler/Profiler.cc	/^Profiler::addAddressTraceSample(const RubyRequest& msg, NodeID id)$/;"	f	class:Profiler
addArchEvents	./arch/arm/ArmPMU.py	/^    def addArchEvents(self,$/;"	f
addBootCmdLine	./base/loader/dtb_object.cc	/^DtbObject::addBootCmdLine(const char* _args, size_t len)$/;"	f	class:DtbObject
addCCReg	./cpu/o3/free_list.hh	/^    void addCCReg(PhysRegIndex freed_reg) { ccList.addReg(freed_reg); }$/;"	f	class:UnifiedFreeList
addCapability	./cpu/func_unit.cc	/^FuncUnit::addCapability(OpClass cap, unsigned oplat, bool pipeline)$/;"	f	class:FuncUnit
addCheck	./cpu/testers/rubytest/CheckTable.cc	/^CheckTable::addCheck(Addr address)$/;"	f	class:CheckTable
addCheckerCpu	./cpu/BaseCPU.py	/^    def addCheckerCpu(self):$/;"	f
addCheckerCpu	./cpu/minor/MinorCPU.py	/^    def addCheckerCpu(self):$/;"	m	class:MinorCPU
addCheckerCpu	./cpu/o3/O3CPU.py	/^    def addCheckerCpu(self):$/;"	m	class:DerivO3CPU
addCheckerCpu	./cpu/simple/BaseSimpleCPU.py	/^    def addCheckerCpu(self):$/;"	m	class:BaseSimpleCPU
addCommittedInst	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::addCommittedInst(const DynInstPtr &head_inst)$/;"	f	class:ElasticTrace
addConsoleFuncEvent	./arch/alpha/system.hh	/^    addConsoleFuncEvent(const char *lbl)$/;"	f	class:AlphaSystem
addConsoleFuncEvent	./arch/mips/system.hh	/^    addConsoleFuncEvent(const char *lbl)$/;"	f	class:MipsSystem
addDataMember	./mem/slicc/symbols/Type.py	/^    def addDataMember(self, ident, type, pairs, init_code):$/;"	m	class:Type
addDebugFlag	./mem/slicc/symbols/StateMachine.py	/^    def addDebugFlag(self, flag):$/;"	m	class:StateMachine
addDepTraceRecord	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::addDepTraceRecord(const DynInstPtr &head_inst,$/;"	f	class:ElasticTrace
addDepsOnParent	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::addDepsOnParent(GraphNode *new_node,$/;"	f	class:TraceCPU::ElasticDataGen
addDerivedDomain	./sim/clock_domain.hh	/^    void addDerivedDomain(DerivedClockDomain *clock_domain)$/;"	f	class:ClockDomain
addEntry	./base/inifile.cc	/^IniFile::Section::addEntry(const std::string &entryName,$/;"	f	class:IniFile::Section
addEnum	./mem/slicc/symbols/Type.py	/^    def addEnum(self, ident, pairs):$/;"	m	class:Type
addEvent	./mem/slicc/symbols/StateMachine.py	/^    def addEvent(self, event):$/;"	m	class:StateMachine
addEventProbe	./arch/arm/ArmPMU.py	/^    def addEventProbe(self, event_id, obj, *args):$/;"	f
addEventProbe	./arch/arm/pmu.cc	/^PMU::addEventProbe(unsigned int id, SimObject *obj, const char *probe_name)$/;"	f	class:ArmISA::PMU
addFU	./cpu/o3/fu_pool.cc	/^FUPool::FUIdxQueue::addFU(int fu_idx)$/;"	f	class:FUPool::FUIdxQueue
addFlag	./base/debug.hh	/^    addFlag(Flag *f)$/;"	f	class:Debug::CompoundFlag
addFloatReg	./cpu/o3/free_list.hh	/^    void addFloatReg(PhysRegIndex freed_reg) { floatList.addReg(freed_reg); }$/;"	f	class:UnifiedFreeList
addFunc	./mem/slicc/symbols/StateMachine.py	/^    def addFunc(self, func):$/;"	m	class:StateMachine
addFunc	./mem/slicc/symbols/Type.py	/^    def addFunc(self, func):$/;"	m	class:Type
addFuncEvent	./sim/system.hh	/^    T *addFuncEvent(const SymbolTable *symtab, const char *lbl)$/;"	f	class:System
addFuncEvent	./sim/system.hh	/^    T *addFuncEvent(const SymbolTable *symtab, const char *lbl,$/;"	f	class:System
addFuncEventOrPanic	./sim/system.hh	/^    T *addFuncEventOrPanic(const SymbolTable *symtab, const char *lbl,$/;"	f	class:System
addHalfLsb	./arch/mips/dsp.cc	/^MipsISA::addHalfLsb(uint64_t value, int32_t lsbpos)$/;"	f	class:MipsISA
addHypervisorFuncEvent	./arch/sparc/system.hh	/^    addHypervisorFuncEvent(const char *lbl)$/;"	f	class:SparcSystem
addIfReady	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::addIfReady(DynInstPtr &inst)$/;"	f	class:InstructionQueue
addInPort	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.cc	/^NetworkInterface_d::addInPort(NetworkLink_d *in_link,$/;"	f	class:NetworkInterface_d
addInPort	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^Router_d::addInPort(NetworkLink_d *in_link, CreditLink_d *credit_link)$/;"	f	class:Router_d
addInPort	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.cc	/^NetworkInterface::addInPort(NetworkLink *in_link)$/;"	f	class:NetworkInterface
addInPort	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::addInPort(NetworkLink *in_link)$/;"	f	class:Router
addInPort	./mem/ruby/network/simple/PerfectSwitch.cc	/^PerfectSwitch::addInPort(const vector<MessageBuffer*>& in)$/;"	f	class:PerfectSwitch
addInPort	./mem/ruby/network/simple/Switch.cc	/^Switch::addInPort(const vector<MessageBuffer*>& in)$/;"	f	class:Switch
addInPort	./mem/slicc/symbols/StateMachine.py	/^    def addInPort(self, var):$/;"	m	class:StateMachine
addInst	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::addInst(DynInstPtr &inst)$/;"	f	class:FullO3CPU
addIntReg	./cpu/o3/free_list.hh	/^    void addIntReg(PhysRegIndex freed_reg) { intList.addReg(freed_reg); }$/;"	f	class:UnifiedFreeList
addKernelFuncEvent	./sim/system.hh	/^    T *addKernelFuncEvent(const char *lbl, Args... args)$/;"	f	class:System
addKernelFuncEventOrPanic	./sim/system.hh	/^    T *addKernelFuncEventOrPanic(const char *lbl, Args... args)$/;"	f	class:System
addLink	./mem/ruby/network/Topology.cc	/^Topology::addLink(SwitchID src, SwitchID dest, BasicLink* link, $/;"	f	class:Topology
addLinks	./mem/ruby/network/simple/Throttle.cc	/^Throttle::addLinks(const vector<MessageBuffer*>& in_vec,$/;"	f	class:Throttle
addListener	./sim/probe/probe.cc	/^ProbeManager::addListener(std::string pointName, ProbeListener &listener)$/;"	f	class:ProbeManager
addListener	./sim/probe/probe.hh	/^    void addListener(ProbeListener *l)$/;"	f	class:ProbePointArg
addLockedAddr	./mem/abstract_mem.hh	/^    void addLockedAddr(LockedAddr addr) { lockedAddrList.push_back(addr); }$/;"	f	class:AbstractMemory
addModule	./sim/init.cc	/^EmbeddedPython::addModule() const$/;"	f	class:EmbeddedPython
addNetDest	./mem/ruby/common/NetDest.cc	/^NetDest::addNetDest(const NetDest& netDest)$/;"	f	class:NetDest
addNode	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.cc	/^NetworkInterface_d::addNode(vector<MessageBuffer *>& in,$/;"	f	class:NetworkInterface_d
addNode	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.cc	/^NetworkInterface::addNode(vector<MessageBuffer*>& in,$/;"	f	class:NetworkInterface
addObject	./mem/slicc/symbols/StateMachine.py	/^    def addObject(self, obj):$/;"	m	class:StateMachine
addOpenbootFuncEvent	./arch/sparc/system.hh	/^    addOpenbootFuncEvent(const char *lbl)$/;"	f	class:SparcSystem
addOutPort	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.cc	/^NetworkInterface_d::addOutPort(NetworkLink_d *out_link,$/;"	f	class:NetworkInterface_d
addOutPort	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^Router_d::addOutPort(NetworkLink_d *out_link,$/;"	f	class:Router_d
addOutPort	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.cc	/^NetworkInterface::addOutPort(NetworkLink *out_link)$/;"	f	class:NetworkInterface
addOutPort	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::addOutPort(NetworkLink *out_link, const NetDest& routing_table_entry,$/;"	f	class:Router
addOutPort	./mem/ruby/network/simple/PerfectSwitch.cc	/^PerfectSwitch::addOutPort(const vector<MessageBuffer*>& out,$/;"	f	class:PerfectSwitch
addOutPort	./mem/ruby/network/simple/Switch.cc	/^Switch::addOutPort(const vector<MessageBuffer*>& out,$/;"	f	class:Switch
addPMU	./cpu/trace/TraceCPU.py	/^    def addPMU(self, pmu = None):$/;"	m	class:TraceCPU
addPair	./mem/slicc/ast/PairListAST.py	/^    def addPair(self, pair_ast):$/;"	m	class:PairListAST
addPalFuncEvent	./arch/alpha/system.hh	/^    addPalFuncEvent(const char *lbl)$/;"	f	class:AlphaSystem
addPoint	./sim/probe/probe.cc	/^ProbeManager::addPoint(ProbePoint &point)$/;"	f	class:ProbeManager
addPrivateSplitL1Caches	./cpu/BaseCPU.py	/^    def addPrivateSplitL1Caches(self, ic, dc, iwc = None, dwc = None):$/;"	f
addReadyMemInst	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::addReadyMemInst(DynInstPtr &ready_inst)$/;"	f	class:InstructionQueue
addRecord	./mem/ruby/system/CacheRecorder.cc	/^CacheRecorder::addRecord(int cntrl, Addr data_addr, Addr pc_addr,$/;"	f	class:CacheRecorder
addReg	./cpu/o3/free_list.hh	/^    void addReg(PhysRegIndex reg) { freeRegs.push(reg); }$/;"	f	class:SimpleFreeList
addReg	./cpu/o3/free_list.hh	/^UnifiedFreeList::addReg(PhysRegIndex freed_reg)$/;"	f	class:UnifiedFreeList
addRenaming	./sim/cxx_manager.cc	/^void CxxConfigManager::addRenaming(const Renaming &renaming)$/;"	f	class:CxxConfigManager
addRequestType	./mem/slicc/symbols/StateMachine.py	/^    def addRequestType(self, request_type):$/;"	m	class:StateMachine
addResetFuncEvent	./arch/sparc/system.hh	/^    addResetFuncEvent(const char *lbl)$/;"	f	class:SparcSystem
addRoute	./mem/ruby/network/garnet/fixed-pipeline/RoutingUnit_d.cc	/^RoutingUnit_d::addRoute(const NetDest& routing_table_entry)$/;"	f	class:RoutingUnit_d
addSample	./mem/ruby/profiler/AccessTraceForAddress.cc	/^AccessTraceForAddress::addSample(int value)$/;"	f	class:AccessTraceForAddress
addSection	./base/inifile.cc	/^IniFile::addSection(const string &sectionName)$/;"	f	class:IniFile
addSet	./mem/ruby/common/Set.hh	/^    addSet(const Set& obj)$/;"	f	class:Set
addSimPointProbe	./cpu/simple/AtomicSimpleCPU.py	/^    def addSimPointProbe(self, interval):$/;"	m	class:AtomicSimpleCPU
addSink	./dev/x86/intdev.hh	/^    addSink(IntSinkPin *sink)$/;"	f	class:X86ISA::IntSourcePin
addSquashedInst	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::addSquashedInst(const DynInstPtr &head_inst)$/;"	f	class:ElasticTrace
addState	./mem/slicc/symbols/StateMachine.py	/^    def addState(self, state):$/;"	m	class:StateMachine
addStride	./arch/arm/insts/vfp.cc	/^VfpMacroOp::addStride(IntRegIndex idx, unsigned stride)$/;"	f	class:ArmISA::VfpMacroOp
addString	./arch/x86/bios/smbios.cc	/^X86ISA::SMBios::SMBiosStructure::addString(string & newString)$/;"	f	class:X86ISA::SMBios::SMBiosStructure
addToDependents	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::addToDependents(DynInstPtr &new_inst)$/;"	f	class:InstructionQueue
addToOrderList	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::addToOrderList(OpClass op_class)$/;"	f	class:InstructionQueue
addToPath	./python/m5/util/__init__.py	/^def addToPath(path):$/;"	f
addToProducers	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::addToProducers(DynInstPtr &new_inst)$/;"	f	class:InstructionQueue
addToReadQueue	./mem/dram_ctrl.cc	/^DRAMCtrl::addToReadQueue(PacketPtr pkt, unsigned int pktCount)$/;"	f	class:DRAMCtrl
addToReadyList	./mem/cache/mshr_queue.cc	/^MSHRQueue::addToReadyList(MSHR *mshr)$/;"	f	class:MSHRQueue
addToRetryList	./mem/ruby/system/RubyPort.cc	/^RubyPort::MemSlavePort::addToRetryList()$/;"	f	class:RubyPort::MemSlavePort
addToRetryList	./mem/ruby/system/RubyPort.hh	/^    void addToRetryList(MemSlavePort * port)$/;"	f	class:RubyPort
addToSortedReadyList	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::addToSortedReadyList(NodeSeqNum seq_num,$/;"	f	class:TraceCPU::ElasticDataGen
addToWriteQueue	./mem/dram_ctrl.cc	/^DRAMCtrl::addToWriteQueue(PacketPtr pkt, unsigned int pktCount)$/;"	f	class:DRAMCtrl
addTraceSample	./mem/ruby/profiler/AddressProfiler.cc	/^AddressProfiler::addTraceSample(Addr data_addr, Addr pc_addr,$/;"	f	class:AddressProfiler
addTransition	./mem/slicc/symbols/StateMachine.py	/^    def addTransition(self, trans):$/;"	m	class:StateMachine
addTwoLevelCacheHierarchy	./cpu/BaseCPU.py	/^    def addTwoLevelCacheHierarchy(self, ic, dc, l2c, iwc = None, dwc = None):$/;"	f
addType	./mem/slicc/symbols/StateMachine.py	/^    def addType(self, type):$/;"	m	class:StateMachine
addWeight	./mem/ruby/network/garnet/fixed-pipeline/RoutingUnit_d.cc	/^RoutingUnit_d::addWeight(int link_weight)$/;"	f	class:RoutingUnit_d
add_arg	./base/cprintf.hh	/^    add_arg(const T &data)$/;"	f	struct:cp::Print
add_child	./python/m5/SimObject.py	/^    def add_child(self, name, child):$/;"	f
add_entry	./arch/x86/bios/IntelMP.py	/^    def add_entry(self, entry):$/;"	m	class:X86IntelMPConfigTable
add_microop	./arch/micro_asm.py	/^    def add_microop(self, mnemonic, microop):$/;"	m	class:Micro_Container
add_module	./python/importer.py	/^    def add_module(self, filename, abspath, modpath, code):$/;"	m	class:CodeImporter
add_module	./python/importer.py	/^add_module = importer.add_module$/;"	v
add_option	./python/m5/options.py	/^    def add_option(self, *args, **kwargs):$/;"	m	class:OptionParser
addext	./base/inet.hh	/^    const uint32_t *addext() const { return &opt_data.addext[0]; }$/;"	f	struct:Net::IpOpt
addfilter	./python/m5/util/jobfile.py	/^    def addfilter(self, filt, pos=True):$/;"	m	class:Configuration
addr	./arch/alpha/pagetable.hh	/^    Addr addr;$/;"	m	struct:AlphaISA::VAddr
addr	./arch/power/pagetable.hh	/^    Addr addr;$/;"	m	struct:PowerISA::VAddr
addr	./arch/x86/bios/E820.py	/^    addr = Param.Addr(0, 'address of the beginning of the region')$/;"	v	class:X86E820Entry
addr	./arch/x86/bios/e820.hh	/^        Addr addr;$/;"	m	class:X86ISA::E820Entry
addr	./arch/x86/bios/intelmp.hh	/^    uint64_t addr;$/;"	m	class:X86ISA::IntelMP::AddrSpaceMapping
addr	./arch/x86/faults.hh	/^        Addr addr;$/;"	m	class:X86ISA::PageFault
addr	./arch/x86/types.hh	/^        Bitfield<3> addr;$/;"	m	namespace:X86ISA
addr	./base/chunk_generator.hh	/^    Addr addr() const { return curAddr; }$/;"	f	class:ChunkGenerator
addr	./base/inet.hh	/^    const uint8_t *addr() const { return &data[0]; }$/;"	f	struct:Net::EthAddr
addr	./base/inet.hh	/^    ip6_addr_t addr;$/;"	m	struct:Net::ip6_opt_dstopts
addr	./base/inet.hh	/^    ip6_addr_t addr;$/;"	m	struct:Net::ip6_opt_routing_type2
addr	./cpu/testers/traffic_gen/generators.hh	/^        Addr addr;$/;"	m	struct:TraceGen::TraceElement
addr	./cpu/testers/traffic_gen/generators.hh	/^    Addr addr;$/;"	m	class:DramGen
addr	./cpu/trace/trace_cpu.hh	/^            Addr addr;$/;"	m	struct:TraceCPU::FixedRetryGen::TraceElement
addr	./dev/arm/Gic.py	/^    addr = Param.Addr("Address for frame PIO")$/;"	v	class:Gicv2mFrame
addr	./dev/arm/gic_v2m.hh	/^    const Addr          addr;$/;"	m	class:Gicv2mFrame
addr	./dev/virtio/virtio_ring.h	/^    uint64_t addr;$/;"	m	struct:vring_desc
addr	./mem/abstract_mem.hh	/^    Addr addr;$/;"	m	class:LockedAddr
addr	./mem/dram_ctrl.hh	/^        Addr addr;$/;"	m	class:DRAMCtrl::DRAMPacket
addr	./mem/packet.hh	/^    Addr addr;$/;"	m	class:Packet
addr	./sim/insttracer.hh	/^    Addr addr; \/\/\/< The address that was accessed$/;"	m	class:Trace::InstRecord
addr	./sim/probe/mem.hh	/^    Addr addr;$/;"	m	struct:ProbePoints::PacketInfo
addr	./sim/syscall_emul_buf.hh	/^    const Addr addr;        \/\/\/< address of buffer in target address space$/;"	m	class:BaseBufferArg
addrBlockOffset	./cpu/minor/lsq.cc	/^addrBlockOffset(Addr addr, unsigned int block_size)$/;"	f	namespace:Minor
addrCacheMap	./arch/x86/decoder.hh	/^    AddrCacheMap addrCacheMap;$/;"	m	class:X86ISA::Decoder
addrCompleteEvent	./dev/pci/copy_engine.hh	/^            addrCompleteEvent;$/;"	m	class:CopyEngine::CopyEngineChannel
addrLength	./arch/x86/bios/intelmp.hh	/^    uint64_t addrLength;$/;"	m	class:X86ISA::IntelMP::AddrSpaceMapping
addrMap	./mem/physical.hh	/^    AddrRangeMap<AbstractMemory*> addrMap;$/;"	m	class:PhysicalMemory
addrMapping	./cpu/testers/traffic_gen/generators.hh	/^    unsigned int addrMapping;$/;"	m	class:DramGen
addrMapping	./mem/dram_ctrl.hh	/^    Enums::AddrMap addrMapping;$/;"	m	class:DRAMCtrl
addrOffset	./cpu/testers/traffic_gen/generators.hh	/^    Addr addrOffset;$/;"	m	class:TraceGen
addrRanges	./arch/arm/kvm/gic.hh	/^    const AddrRangeList addrRanges;$/;"	m	class:KvmGic
addrRanges	./dev/arm/generic_timer.hh	/^    const AddrRangeList addrRanges;$/;"	m	class:GenericTimerMem
addrRanges	./dev/arm/hdlcd.hh	/^    const AddrRangeList addrRanges;$/;"	m	class:HDLcd
addrRanges	./mem/cache/base.hh	/^    const AddrRangeList addrRanges;$/;"	m	class:BaseCache
addrRanges	./mem/external_slave.hh	/^    AddrRangeList addrRanges;$/;"	m	class:ExternalSlave
addrSize	./arch/x86/insts/microop.hh	/^        uint8_t addrSize;$/;"	m	class:X86ISA::X86MicroopBase
addrSize	./arch/x86/types.hh	/^        uint8_t addrSize;$/;"	m	struct:X86ISA::ExtMachInst
addrStack	./cpu/pred/ras.hh	/^    std::vector<TheISA::PCState> addrStack;$/;"	m	class:ReturnAddrStack
addrTable	./base/loader/symtab.hh	/^    ATable addrTable;$/;"	m	class:SymbolTable
addrType	./arch/x86/bios/intelmp.hh	/^    uint8_t addrType;$/;"	m	class:X86ISA::IntelMP::AddrSpaceMapping
addr_hi	./dev/pci/pcireg.h	/^        uint32_t addr_hi;$/;"	m	struct:MSIXTable::__anon30
addr_increment_size	./cpu/testers/directedtest/RubyDirectedTester.py	/^    addr_increment_size = Param.Int(64, "address increment size")$/;"	v	class:InvalidateGenerator
addr_increment_size	./cpu/testers/directedtest/RubyDirectedTester.py	/^    addr_increment_size = Param.Int(64, "address increment size")$/;"	v	class:SeriesRequestGenerator
addr_lo	./dev/pci/pcireg.h	/^        uint32_t addr_lo;$/;"	m	struct:MSIXTable::__anon30
addr_mapping	./mem/DRAMCtrl.py	/^    addr_mapping = 'RoCoRaBaCh'$/;"	v	class:HMC_2500_x32
addr_mapping	./mem/DRAMCtrl.py	/^    addr_mapping = Param.AddrMap('RoRaBaCoCh', "Address mapping policy")$/;"	v	class:DRAMCtrl
addr_ranges	./mem/ExternalSlave.py	/^    addr_ranges = VectorParam.AddrRange([], 'Addresses served by'$/;"	v	class:ExternalSlave
addr_ranges	./mem/cache/Cache.py	/^    addr_ranges = VectorParam.AddrRange([AllMemory],$/;"	v	class:BaseCache
address	./arch/x86/bios/IntelMP.py	/^    address = Param.Addr(0, 'starting address of the mapping')$/;"	v	class:X86IntelMPAddrSpaceMapping
address	./arch/x86/bios/IntelMP.py	/^    address = Param.UInt32(0xfec00000, 'address of this APIC')$/;"	v	class:X86IntelMPIOAPIC
address	./arch/x86/bios/intelmp.hh	/^    uint32_t address;$/;"	m	class:X86ISA::IntelMP::IOAPIC
address	./dev/arm/ufs_device.hh	/^        Addr address;$/;"	m	struct:UFSHostDevice::taskStart
address	./dev/arm/ufs_device.hh	/^        Addr address;$/;"	m	struct:UFSHostDevice::transferDoneInfo
address	./dev/arm/ufs_device.hh	/^        Addr address;$/;"	m	struct:UFSHostDevice::transferStart
address	./dev/x86/cmos.hh	/^    uint8_t address;$/;"	m	class:X86ISA::Cmos
address	./kern/tru64/tru64.hh	/^        Addr    address;        \/\/!< address hint$/;"	m	struct:Tru64::vm_stack
addressMonitor	./cpu/base.hh	/^    std::vector<AddressMonitor> addressMonitor;$/;"	m	class:BaseCPU
addressSize	./arch/x86/emulenv.hh	/^        int addressSize;$/;"	m	struct:X86ISA::EmulEnv
addressSize	./arch/x86/insts/microldstop.hh	/^        const uint8_t addressSize;$/;"	m	class:X86ISA::LdStOp
addressToCacheSet	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::addressToCacheSet(Addr address) const$/;"	f	class:CacheMemory
addressToInt	./mem/ruby/slicc_interface/RubySlicc_Util.hh	/^addressToInt(Addr addr)$/;"	f
address_type	./arch/x86/bios/IntelMP.py	/^    address_type = Param.X86IntelMPAddressType('IOAddress',$/;"	v	class:X86IntelMPAddrSpaceMapping
addrv	./arch/x86/regs/misc.hh	/^        Bitfield<58> addrv; \/\/ Error-address register valid$/;"	m	namespace:X86ISA
adds_list	./mem/ruby/filters/H3BloomFilter.hh	/^    int adds_list[6]; \/\/= {841,627,1555,241,7777,65391};$/;"	m	class:H3BloomFilter
addsymbol	./sim/pseudo_inst.cc	/^addsymbol(ThreadContext *tc, Addr addr, Addr symbolAddr)$/;"	f	namespace:PseudoInst
adjtime	./kern/tru64/tru64_syscalls.hh	/^        adjtime = 140,$/;"	e	enum:SystemCalls::__anon102
adjustTableSizeAArch64	./arch/arm/table_walker.cc	/^TableWalker::adjustTableSizeAArch64(unsigned tsz)$/;"	f	class:TableWalker
adoptOrphanParams	./python/m5/SimObject.py	/^    def adoptOrphanParams(self):$/;"	f
adoptPacketData	./cpu/minor/pipe_data.cc	/^ForwardLineData::adoptPacketData(Packet *packet)$/;"	f	class:Minor::ForwardLineData
adr	./base/loader/coff_sym.h	/^    coff_addr   adr;            \/* memory address of beginning of file *\/$/;"	m	struct:ecoff_fdr
adr	./base/loader/coff_sym.h	/^    coff_addr   adr;            \/* memory address of start of procedure *\/$/;"	m	struct:pdr
advSimdHalfPrecision	./arch/arm/miscregs.hh	/^        Bitfield<23, 20> advSimdHalfPrecision;$/;"	m	namespace:ArmISA
advSimdInteger	./arch/arm/miscregs.hh	/^        Bitfield<15, 12> advSimdInteger;$/;"	m	namespace:ArmISA
advSimdLoadStore	./arch/arm/miscregs.hh	/^        Bitfield<11, 8> advSimdLoadStore;$/;"	m	namespace:ArmISA
advSimdRegisters	./arch/arm/miscregs.hh	/^        Bitfield<3, 0> advSimdRegisters;$/;"	m	namespace:ArmISA
advSimdSinglePrecision	./arch/arm/miscregs.hh	/^        Bitfield<19, 16> advSimdSinglePrecision;$/;"	m	namespace:ArmISA
adv_read	./dev/net/i8254xGBe_defs.hh	/^        } adv_read;$/;"	m	union:iGbReg::RxDesc::__anon5	typeref:struct:iGbReg::RxDesc::__anon5::__anon7
adv_wb	./dev/net/i8254xGBe_defs.hh	/^        } adv_wb ;$/;"	m	union:iGbReg::RxDesc::__anon5	typeref:struct:iGbReg::RxDesc::__anon5::__anon8
advance	./arch/arm/types.hh	/^        advance()$/;"	f	class:ArmISA::PCState
advance	./arch/generic/types.hh	/^    advance()$/;"	f	class:GenericISA::DelaySlotPCState
advance	./arch/generic/types.hh	/^    advance()$/;"	f	class:GenericISA::SimplePCState
advance	./arch/x86/types.hh	/^        advance()$/;"	f	class:X86ISA::PCState
advance	./cpu/activity.cc	/^ActivityRecorder::advance()$/;"	f	class:ActivityRecorder
advance	./cpu/minor/buffers.hh	/^    advance()$/;"	f	class:Minor::SelfStallingPipeline
advance	./cpu/minor/func_unit.cc	/^FUPipeline::advance()$/;"	f	class:Minor::FUPipeline
advance	./cpu/timebuf.hh	/^    advance()$/;"	f	class:TimeBuffer
advanceInst	./cpu/simple/timing.cc	/^TimingSimpleCPU::advanceInst(const Fault &fault)$/;"	f	class:TimingSimpleCPU
advancePC	./arch/alpha/utility.hh	/^advancePC(PCState &pc, const StaticInstPtr &inst)$/;"	f	namespace:AlphaISA
advancePC	./arch/arm/insts/macromem.hh	/^    advancePC(PCState &pcState) const$/;"	f	class:ArmISA::MicroOp
advancePC	./arch/arm/insts/macromem.hh	/^    advancePC(PCState &pcState) const$/;"	f	class:ArmISA::MicroOpX
advancePC	./arch/arm/insts/mem.hh	/^    advancePC(PCState &pcState) const$/;"	f	class:ArmISA::MightBeMicro
advancePC	./arch/arm/insts/mem64.hh	/^    advancePC(PCState &pcState) const$/;"	f	class:ArmISA::MightBeMicro64
advancePC	./arch/arm/insts/pred_inst.hh	/^    advancePC(PCState &pcState) const$/;"	f	class:ArmISA::PredMicroop
advancePC	./arch/arm/insts/static_inst.hh	/^    advancePC(PCState &pcState) const$/;"	f	class:ArmISA::ArmStaticInst
advancePC	./arch/arm/insts/vfp.hh	/^    advancePC(PCState &pcState) const$/;"	f	class:ArmISA::FpOp
advancePC	./arch/arm/utility.hh	/^advancePC(PCState &pc, const StaticInstPtr &inst)$/;"	f	namespace:ArmISA
advancePC	./arch/mips/utility.hh	/^advancePC(PCState &pc, const StaticInstPtr &inst)$/;"	f	namespace:MipsISA
advancePC	./arch/power/insts/static_inst.hh	/^    advancePC(PowerISA::PCState &pcState) const$/;"	f	class:PowerISA::PowerStaticInst
advancePC	./arch/power/utility.hh	/^advancePC(PCState &pc, const StaticInstPtr &inst)$/;"	f	namespace:PowerISA
advancePC	./arch/sparc/utility.hh	/^advancePC(PCState &pc, const StaticInstPtr &inst)$/;"	f	namespace:SparcISA
advancePC	./arch/x86/insts/microop.hh	/^        advancePC(PCState &pcState) const$/;"	f	class:X86ISA::X86MicroopBase
advancePC	./arch/x86/insts/static_inst.hh	/^        advancePC(PCState &pcState) const$/;"	f	class:X86ISA::X86StaticInst
advancePC	./arch/x86/utility.hh	/^    advancePC(PCState &pc, const StaticInstPtr &inst)$/;"	f	namespace:X86ISA
advancePC	./cpu/checker/cpu_impl.hh	/^Checker<Impl>::advancePC(const Fault &fault)$/;"	f	class:Checker
advancePC	./cpu/simple/base.cc	/^BaseSimpleCPU::advancePC(const Fault &fault)$/;"	f	class:BaseSimpleCPU
advance_stage	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    advance_stage(flit_stage t_stage, Cycles newTime)$/;"	f	class:flit_d
af	./arch/arm/table_walker.hh	/^        bool af() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
af	./arch/x86/regs/misc.hh	/^        Bitfield<4> af; \/\/ Auxiliary Flag$/;"	m	namespace:X86ISA
af	./arch/x86/regs/misc.hh	/^        Bitfield<4> af;$/;"	m	namespace:X86ISA
afe	./arch/arm/miscregs.hh	/^        Bitfield<29>   afe;     \/\/ Access flag enable (AArch32 only)$/;"	m	namespace:ArmISA
afs_syscall	./kern/tru64/tru64_syscalls.hh	/^        afs_syscall = 258,$/;"	e	enum:SystemCalls::__anon102
ageTaskId	./mem/cache/tags/base.hh	/^    Stats::Vector2d ageTaskId;$/;"	m	class:BaseTags
aggregateRecords	./mem/ruby/system/CacheRecorder.cc	/^CacheRecorder::aggregateRecords(uint8_t **buf, uint64_t total_size)$/;"	f	class:CacheRecorder
ah	./base/cp_annotate.hh	/^    AnnotateHeader ah;$/;"	m	class:CPA
ahbmaster	./dev/arm/pl111.hh	/^        Bitfield<4> ahbmaster;$/;"	m	class:Pl111
ahp	./arch/arm/miscregs.hh	/^        Bitfield<26> ahp;$/;"	m	namespace:ArmISA
aiMap	./mem/stack_dist_calc.hh	/^    AddressIndexMap aiMap;$/;"	m	class:StackDistCalc
aie	./dev/mc146818.hh	/^        Bitfield<5> aie;       \/\/\/ 1 = enable alarm interrupt$/;"	m	class:MC146818
align	./kern/tru64/tru64.hh	/^        uint64_t        align;          \/\/!< address alignment$/;"	m	struct:Tru64::vm_stack
alignFaults	./arch/arm/tlb.hh	/^    mutable Stats::Scalar alignFaults;$/;"	m	class:ArmISA::TLB
allClasses	./python/m5/SimObject.py	/^allClasses = {}$/;"	v
allDisabled	./base/socket.cc	/^ListenSocket::allDisabled()$/;"	f	class:ListenSocket
allEnums	./python/m5/params.py	/^allEnums = {}$/;"	v
allFlags	./base/debug.cc	/^allFlags()$/;"	f	namespace:Debug
allFlagsVersion	./base/debug.cc	/^int allFlagsVersion = 0;$/;"	m	namespace:Debug	file:
allParams	./python/m5/params.py	/^allParams = {}$/;"	v
allProbesReg	./cpu/o3/probe/elastic_trace.hh	/^    bool allProbesReg;$/;"	m	class:ElasticTrace
allSet	./base/flags.hh	/^    bool allSet() const { return !(~_flags); }$/;"	f	class:Flags
allSet	./base/flags.hh	/^    bool allSet(Type flags) const { return (_flags & flags) == flags; }$/;"	f	class:Flags
all_instructions	./mem/ruby/system/RubySystem.py	/^    all_instructions = Param.Bool(False, "")$/;"	v	class:RubySystem
alljobs	./python/m5/util/jobfile.py	/^    def alljobs(self, groups=None):$/;"	m	class:Configuration
alloc	./mem/ruby/common/DataBlock.cc	/^DataBlock::alloc()$/;"	f	class:DataBlock
alloc	./sim/arguments.cc	/^Arguments::Data::alloc(size_t size)$/;"	f	class:Arguments::Data
allocAssoc	./mem/cache/tags/base_set_assoc.hh	/^    unsigned allocAssoc;$/;"	m	class:BaseSetAssoc
allocFD	./sim/process.cc	/^Process::allocFD(int sim_fd, const string& filename, int flags, int mode,$/;"	f	class:Process
allocIter	./mem/cache/mshr.hh	/^    Iterator allocIter;$/;"	m	class:MSHR
allocMemSlot	./cpu/kvm/vm.cc	/^KvmVM::allocMemSlot(uint64_t size)$/;"	f	class:KvmVM
allocOnFill	./mem/cache/mshr.hh	/^    bool allocOnFill;$/;"	m	class:MSHR
allocPhysPages	./sim/system.cc	/^System::allocPhysPages(int npages)$/;"	f	class:System
allocVCPUID	./cpu/kvm/vm.cc	/^KvmVM::allocVCPUID()$/;"	f	class:KvmVM
allocate	./mem/cache/mshr.cc	/^MSHR::allocate(Addr blk_addr, unsigned blk_size, PacketPtr target,$/;"	f	class:MSHR
allocate	./mem/cache/mshr_queue.cc	/^MSHRQueue::allocate(Addr blk_addr, unsigned blk_size, PacketPtr pkt,$/;"	f	class:MSHRQueue
allocate	./mem/packet.hh	/^    allocate()$/;"	f	class:Packet
allocate	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::allocate(Addr address, AbstractCacheEntry *entry, bool touch)$/;"	f	class:CacheMemory
allocate	./mem/ruby/structures/CacheMemory.hh	/^    AbstractCacheEntry* allocate(Addr address, AbstractCacheEntry* new_entry)$/;"	f	class:CacheMemory
allocate	./mem/ruby/structures/DirectoryMemory.cc	/^DirectoryMemory::allocate(Addr address, AbstractEntry *entry)$/;"	f	class:DirectoryMemory
allocate	./mem/ruby/structures/PerfectCacheMemory.hh	/^PerfectCacheMemory<ENTRY>::allocate(Addr address)$/;"	f	class:PerfectCacheMemory
allocate	./mem/ruby/structures/TBETable.hh	/^TBETable<ENTRY>::allocate(Addr address)$/;"	f	class:TBETable
allocateBlock	./mem/cache/cache.cc	/^Cache::allocateBlock(Addr addr, bool is_secure, PacketList &writebacks)$/;"	f	class:Cache
allocateBufferInternal	./mem/cache/base.hh	/^    MSHR *allocateBufferInternal(MSHRQueue *mq, Addr addr, int size,$/;"	f	class:BaseCache
allocateLine	./cpu/minor/pipe_data.cc	/^ForwardLineData::allocateLine(unsigned int width_)$/;"	f	class:Minor::ForwardLineData
allocateMem	./sim/process.cc	/^Process::allocateMem(Addr vaddr, int64_t size, bool clobber)$/;"	f	class:Process
allocateMissBuffer	./mem/cache/base.hh	/^    MSHR *allocateMissBuffer(PacketPtr pkt, Tick time, bool sched_send = true)$/;"	f	class:BaseCache
allocateNewContext	./mem/cache/prefetch/stride.cc	/^StridePrefetcher::PCTable::allocateNewContext(int context)$/;"	f	class:StridePrefetcher::PCTable
allocatePID	./sim/system.hh	/^    uint64_t allocatePID()$/;"	f	class:System
allocateTarget	./mem/cache/mshr.cc	/^MSHR::allocateTarget(PacketPtr pkt, Tick whenReady, Counter _order,$/;"	f	class:MSHR
allocateVoid	./mem/ruby/structures/CacheMemory.hh	/^    void allocateVoid(Addr address, AbstractCacheEntry* new_entry)$/;"	f	class:CacheMemory
allocateWriteBuffer	./mem/cache/base.hh	/^    MSHR *allocateWriteBuffer(PacketPtr pkt, Tick time)$/;"	f	class:BaseCache
allocated	./mem/cache/mshr_queue.hh	/^    int allocated;$/;"	m	class:MSHRQueue
allocatedList	./mem/cache/mshr_queue.hh	/^    MSHR::List allocatedList;$/;"	m	class:MSHRQueue
allocating	./mem/se_translating_port_proxy.hh	/^    AllocType allocating;$/;"	m	class:SETranslatingPortProxy
allowEarlyMemIssue	./cpu/minor/execute.hh	/^    bool allowEarlyMemIssue;$/;"	m	class:Minor::Execute
allow_idling	./cpu/minor/pipeline.hh	/^    bool allow_idling;$/;"	m	class:Minor::Pipeline
alphaAccess	./dev/alpha/backdoor.hh	/^        Access *alphaAccess;$/;"	m	union:AlphaBackdoor::__anon16
alreadyPushed	./cpu/minor/buffers.hh	/^    bool alreadyPushed() { return !BubbleTraits::isBubble(*pushWire); }$/;"	f	class:Minor::SelfStallingPipeline
alreadyScheduled	./mem/ruby/common/Consumer.hh	/^    alreadyScheduled(Tick time)$/;"	f	class:Consumer
altAddr	./arch/x86/decoder.hh	/^    uint8_t altAddr;$/;"	m	class:X86ISA::Decoder
altAddr	./arch/x86/regs/misc.hh	/^        Bitfield<15, 14> altAddr;$/;"	m	namespace:X86ISA
altOp	./arch/x86/decoder.hh	/^    uint8_t altOp;$/;"	m	class:X86ISA::Decoder
altOp	./arch/x86/regs/misc.hh	/^        Bitfield<11, 10> altOp;$/;"	m	namespace:X86ISA
alt_plock	./kern/tru64/tru64_syscalls.hh	/^        alt_plock = 181,$/;"	e	enum:SystemCalls::__anon102
alt_setsid	./kern/tru64/tru64_syscalls.hh	/^        alt_setsid = 188,$/;"	e	enum:SystemCalls::__anon102
alt_sigpending	./kern/tru64/tru64_syscalls.hh	/^        alt_sigpending = 187,$/;"	e	enum:SystemCalls::__anon102
alternate_form	./base/cprintf_formats.hh	/^    bool alternate_form;$/;"	m	struct:cp::Format
am	./arch/sparc/miscregs.hh	/^    Bitfield<3> am;$/;"	m	namespace:SparcISA
am	./arch/x86/regs/misc.hh	/^        Bitfield<18> am; \/\/ Alignment Mask$/;"	m	namespace:X86ISA
ambaId	./dev/arm/amba_device.hh	/^    uint64_t ambaId;$/;"	m	class:AmbaDmaDevice
ambaId	./dev/arm/amba_device.hh	/^    uint64_t ambaId;$/;"	m	class:AmbaPioDevice
amba_id	./dev/arm/RealView.py	/^    amba_id = 0;$/;"	v	class:AmbaFake
amba_id	./dev/arm/RealView.py	/^    amba_id = 0x00141000$/;"	v	class:HDLcd
amba_id	./dev/arm/RealView.py	/^    amba_id = 0x00141050$/;"	v	class:Pl050
amba_id	./dev/arm/RealView.py	/^    amba_id = 0x00141111$/;"	v	class:Pl111
amba_id	./dev/arm/RealView.py	/^    amba_id = 0x00141804$/;"	v	class:Sp804
amba_id	./dev/arm/RealView.py	/^    amba_id = 0x00341031$/;"	v	class:PL031
amba_id	./dev/arm/RealView.py	/^    amba_id = Param.UInt32("ID of AMBA device for kernel detection")$/;"	v	class:AmbaDmaDevice
amba_id	./dev/arm/RealView.py	/^    amba_id = Param.UInt32("ID of AMBA device for kernel detection")$/;"	v	class:AmbaPioDevice
amo	./arch/arm/miscregs.hh	/^        Bitfield<5>      amo;$/;"	m	namespace:ArmISA
amountOfReadTransfers	./dev/arm/ufs_device.hh	/^        uint32_t amountOfReadTransfers;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
amountOfWriteTransfers	./dev/arm/ufs_device.hh	/^        uint32_t amountOfWriteTransfers;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
anBegin	./dev/net/i8254xGBe.hh	/^    void anBegin(std::string sm, std::string st, int flags = CPA::FL_NONE) {$/;"	f	class:IGbE
anBegin	./dev/pci/copy_engine.hh	/^        inline void anBegin(const char *s)$/;"	f	class:CopyEngine::CopyEngineChannel
anDq	./dev/net/i8254xGBe.hh	/^    void anDq(std::string sm, std::string q) {$/;"	f	class:IGbE
anDq	./dev/pci/copy_engine.hh	/^        inline void anDq()$/;"	f	class:CopyEngine::CopyEngineChannel
anPq	./dev/net/i8254xGBe.hh	/^    void anPq(std::string sm, std::string q, int num = 1) {$/;"	f	class:IGbE
anPq	./dev/pci/copy_engine.hh	/^        inline void anPq()$/;"	f	class:CopyEngine::CopyEngineChannel
anQ	./dev/net/i8254xGBe.hh	/^    void anQ(std::string sm, std::string q) {$/;"	f	class:IGbE
anQ	./dev/pci/copy_engine.hh	/^        inline void anQ(const char * s, uint64_t id, int size = 1)$/;"	f	class:CopyEngine::CopyEngineChannel
anRq	./dev/net/i8254xGBe.hh	/^    void anRq(std::string sm, std::string q, int num = 1) {$/;"	f	class:IGbE
anWait	./dev/pci/copy_engine.hh	/^        inline void anWait()$/;"	f	class:CopyEngine::CopyEngineChannel
anWe	./dev/net/i8254xGBe.hh	/^    void anWe(std::string sm, std::string q) {$/;"	f	class:IGbE
anWf	./dev/net/i8254xGBe.hh	/^    void anWf(std::string sm, std::string q) {$/;"	f	class:IGbE
anchorString	./arch/x86/bios/smbios.cc	/^        SMBiosHeader::IntermediateHeader::anchorString[] = "_DMI_";$/;"	m	class:X86ISA::SMBios::SMBiosTable::SMBiosHeader::IntermediateHeader	file:
anchorString	./arch/x86/bios/smbios.cc	/^const char X86ISA::SMBios::SMBiosTable::SMBiosHeader::anchorString[] = "_SM_";$/;"	m	class:X86ISA::SMBios::SMBiosTable::SMBiosHeader	file:
anchorString	./arch/x86/bios/smbios.hh	/^            static const char anchorString[];$/;"	m	struct:X86ISA::SMBios::SMBiosTable::SMBiosHeader::IntermediateHeader
anchorString	./arch/x86/bios/smbios.hh	/^        static const char anchorString[];$/;"	m	struct:X86ISA::SMBios::SMBiosTable::SMBiosHeader
annDescQ	./dev/net/i8254xGBe.hh	/^            annUsedDescQ, annUnusedCacheQ, annDescQ;$/;"	m	class:IGbE::DescCache
annSmFetch	./dev/net/i8254xGBe.hh	/^        std::string annSmFetch, annSmWb, annUnusedDescQ, annUsedCacheQ,$/;"	m	class:IGbE::DescCache
annSmWb	./dev/net/i8254xGBe.hh	/^        std::string annSmFetch, annSmWb, annUnusedDescQ, annUsedCacheQ,$/;"	m	class:IGbE::DescCache
annUnusedCacheQ	./dev/net/i8254xGBe.hh	/^            annUsedDescQ, annUnusedCacheQ, annDescQ;$/;"	m	class:IGbE::DescCache
annUnusedDescQ	./dev/net/i8254xGBe.hh	/^        std::string annSmFetch, annSmWb, annUnusedDescQ, annUsedCacheQ,$/;"	m	class:IGbE::DescCache
annUsedCacheQ	./dev/net/i8254xGBe.hh	/^        std::string annSmFetch, annSmWb, annUnusedDescQ, annUsedCacheQ,$/;"	m	class:IGbE::DescCache
annUsedDescQ	./dev/net/i8254xGBe.hh	/^            annUsedDescQ, annUnusedCacheQ, annDescQ;$/;"	m	class:IGbE::DescCache
annotate	./arch/arm/faults.cc	/^AbortFault<T>::annotate(ArmFault::AnnotationIDs id, uint64_t val)$/;"	f	class:ArmISA::AbortFault
annotate	./arch/arm/faults.cc	/^DataAbort::annotate(AnnotationIDs id, uint64_t val)$/;"	f	class:ArmISA::DataAbort
annotate	./arch/arm/faults.hh	/^    virtual void annotate(AnnotationIDs id, uint64_t val) {}$/;"	f	class:ArmISA::ArmFault
annotateFault	./arch/arm/insts/static_inst.hh	/^    annotateFault(ArmFault *fault) {}$/;"	f	class:ArmISA::ArmStaticInst
annotateIdx	./base/cp_annotate.hh	/^    std::vector<uint64_t> annotateIdx;$/;"	m	class:CPA
annotes	./arch/alpha/types.hh	/^enum annotes$/;"	g	namespace:AlphaISA
anyListening	./base/socket.cc	/^bool ListenSocket::anyListening = false;$/;"	m	class:ListenSocket	file:
anyListening	./base/socket.hh	/^    static bool anyListening;$/;"	m	class:ListenSocket
anyListening	./dev/net/tcp_iface.cc	/^bool TCPIface::anyListening = false;$/;"	m	class:TCPIface	file:
anyListening	./dev/net/tcp_iface.hh	/^    static bool anyListening;$/;"	m	class:TCPIface
anyToFrequency	./python/m5/util/convert.py	/^def anyToFrequency(value):$/;"	f
anyToLatency	./python/m5/util/convert.py	/^def anyToLatency(value):$/;"	f
anyislistening	./dev/net/tcp_iface.hh	/^    bool anyislistening() const { return anyListening; }$/;"	f	class:TCPIface
aoutHdr	./base/loader/ecoff_object.hh	/^    ecoff_aouthdr *aoutHdr;$/;"	m	class:EcoffObject
aout_exechdr	./arch/alpha/aout_machdep.h	/^struct aout_exechdr {$/;"	s
ap	./arch/arm/pagetable.hh	/^    uint8_t ap;             \/\/ Access permissions bits$/;"	m	struct:ArmISA::TlbEntry
ap	./arch/arm/table_walker.hh	/^        static uint8_t ap(bool rw, bool user)$/;"	f	class:ArmISA::TableWalker::LongDescriptor
ap	./arch/arm/table_walker.hh	/^        uint8_t ap() const$/;"	f	class:ArmISA::TableWalker::L1Descriptor
ap	./arch/arm/table_walker.hh	/^        uint8_t ap() const$/;"	f	class:ArmISA::TableWalker::L2Descriptor
ap	./arch/arm/table_walker.hh	/^        uint8_t ap() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
apTable	./arch/arm/table_walker.hh	/^        uint8_t apTable() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
apiVersion	./cpu/kvm/vm.hh	/^    int apiVersion;$/;"	m	class:Kvm
apicTimerEvent	./arch/x86/interrupts.hh	/^    ApicTimerEvent apicTimerEvent;$/;"	m	class:X86ISA::Interrupts
apic_id	./dev/x86/I82094AA.py	/^    apic_id = Param.Int(1, 'APIC id for this IO APIC')$/;"	v	class:I82094AA
append	./arch/isa_parser.py	/^    def append(self, op_desc):$/;"	m	class:OperandList
append	./python/m5/util/code_formatter.py	/^    def append(self, data):$/;"	m	class:code_formatter
append	./python/m5/util/region.py	/^    def append(self, *args):$/;"	m	class:Regions
appendValue	./base/inifile.hh	/^        void appendValue(const std::string &v) { value += " "; value += v; }$/;"	f	class:IniFile::Entry
applyMethod	./python/m5/util/__init__.py	/^def applyMethod(obj, meth, *args, **kwargs):$/;"	f
applyOrMap	./python/m5/util/__init__.py	/^def applyOrMap(objOrSeq, meth, *args, **kwargs):$/;"	f
ar	./arch/arm/faults.hh	/^    bool ar;$/;"	m	class:ArmISA::DataAbort
ar	./arch/mips/pra_constants.hh	/^    Bitfield<12, 10> ar;$/;"	m	namespace:MipsISA
arbId	./dev/x86/i82094aa.hh	/^    uint8_t arbId;$/;"	m	class:X86ISA::I82094AA
arbitrate_inports	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.cc	/^SWallocator_d::arbitrate_inports()$/;"	f	class:SWallocator_d
arbitrate_invcs	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.cc	/^VCallocator_d::arbitrate_invcs()$/;"	f	class:VCallocator_d
arbitrate_outports	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.cc	/^SWallocator_d::arbitrate_outports()$/;"	f	class:SWallocator_d
arbitrate_outvcs	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.cc	/^VCallocator_d::arbitrate_outvcs()$/;"	f	class:VCallocator_d
arch	./arch/arm/process.hh	/^    ObjectFile::Arch arch;$/;"	m	class:ArmLiveProcess
arch	./base/loader/object_file.hh	/^    Arch  arch;$/;"	m	class:ObjectFile
archIsDrained	./cpu/kvm/base.hh	/^    virtual bool archIsDrained() const { return true; }$/;"	f	class:BaseKvmCPU
archIsDrained	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::archIsDrained() const$/;"	f	class:X86KvmCPU
archPrctlFunc	./arch/x86/linux/process.cc	/^archPrctlFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
archReg	./cpu/o3/rename.hh	/^        RegIndex archReg;$/;"	m	struct:DefaultRename::RenameHistory
areNSlotsAvailable	./mem/ruby/network/MessageBuffer.cc	/^MessageBuffer::areNSlotsAvailable(unsigned int n, Tick current_time)$/;"	f	class:MessageBuffer
areNSlotsAvailable	./mem/ruby/structures/RubyMemoryControl.hh	/^    bool areNSlotsAvailable(int n) { return true; };  \/\/ infinite queue length$/;"	f	class:RubyMemoryControl
areNSlotsAvailable	./mem/ruby/structures/TBETable.hh	/^    areNSlotsAvailable(int n, Tick current_time) const$/;"	f	class:TBETable
areNSlotsAvailable	./mem/ruby/structures/WireBuffer.hh	/^    bool areNSlotsAvailable(int n, Tick current_time) { return true; };$/;"	f	class:WireBuffer
area	./base/framebuffer.hh	/^    unsigned area() const { return _width * _height; }$/;"	f	class:FrameBuffer
areaChanged	./dev/net/i8254xGBe.cc	/^IGbE::DescCache<T>::areaChanged()$/;"	f	class:IGbE::DescCache
arg	./cpu/TimingExpr.py	/^    arg = Param.TimingExpr("expression")$/;"	v	class:TimingExprUn
arg	./cpu/timing_expr.hh	/^    TimingExpr *arg;$/;"	m	class:TimingExprUn
argDivToNs	./kern/freebsd/events.hh	/^    uint64_t argDivToNs;$/;"	m	class:FreeBSD::UDelayEvent
argDivToNs	./kern/linux/events.hh	/^    uint64_t argDivToNs;$/;"	m	class:Linux::UDelayEvent
argMultToNs	./kern/freebsd/events.hh	/^    uint64_t argMultToNs;$/;"	m	class:FreeBSD::UDelayEvent
argMultToNs	./kern/linux/events.hh	/^    uint64_t argMultToNs;$/;"	m	class:Linux::UDelayEvent
argsInit	./arch/alpha/process.cc	/^AlphaLiveProcess::argsInit(int intSize, int pageSize)$/;"	f	class:AlphaLiveProcess
argsInit	./arch/arm/process.cc	/^ArmLiveProcess::argsInit(int pageSize, IntRegIndex spIndex)$/;"	f	class:ArmLiveProcess
argsInit	./arch/mips/process.cc	/^MipsLiveProcess::argsInit(int pageSize)$/;"	f	class:MipsLiveProcess
argsInit	./arch/power/process.cc	/^PowerLiveProcess::argsInit(int intSize, int pageSize)$/;"	f	class:PowerLiveProcess
argsInit	./arch/sparc/process.cc	/^Sparc32LiveProcess::argsInit(int intSize, int pageSize)$/;"	f	class:Sparc32LiveProcess
argsInit	./arch/sparc/process.cc	/^Sparc64LiveProcess::argsInit(int intSize, int pageSize)$/;"	f	class:Sparc64LiveProcess
argsInit	./arch/sparc/process.cc	/^SparcLiveProcess::argsInit(int pageSize)$/;"	f	class:SparcLiveProcess
argsInit	./arch/x86/process.cc	/^I386LiveProcess::argsInit(int intSize, int pageSize)$/;"	f	class:I386LiveProcess
argsInit	./arch/x86/process.cc	/^X86LiveProcess::argsInit(int pageSize,$/;"	f	class:X86LiveProcess
argsInit	./arch/x86/process.cc	/^X86_64LiveProcess::argsInit(int intSize, int pageSize)$/;"	f	class:X86_64LiveProcess
argv	./sim/process.hh	/^    std::vector<std::string> argv;$/;"	m	class:LiveProcess
arm	./cpu/kvm/timer.cc	/^PerfKvmTimer::arm(Tick ticks)$/;"	f	class:PerfKvmTimer
arm	./cpu/kvm/timer.cc	/^PosixKvmTimer::arm(Tick ticks)$/;"	f	class:PosixKvmTimer
arm	./kern/kernel_stats.hh	/^    void arm() { _arm++; }$/;"	f	class:Kernel::Statistics
arm	./sim/pseudo_inst.cc	/^arm(ThreadContext *tc)$/;"	f	namespace:PseudoInst
armMonitor	./cpu/base.cc	/^BaseCPU::armMonitor(ThreadID tid, Addr address)$/;"	f	class:BaseCPU
armMonitor	./cpu/base_dyn_inst.hh	/^    void armMonitor(Addr address) { cpu->armMonitor(threadNumber, address); }$/;"	f	class:BaseDynInst
armMonitor	./cpu/minor/exec_context.hh	/^    void armMonitor(Addr address) { getCpuPtr()->armMonitor(0, address); }$/;"	f	class:Minor::ExecContext
armPcElrOffset	./arch/arm/faults.hh	/^        const uint8_t armPcElrOffset;$/;"	m	struct:ArmISA::ArmFault::FaultVals
armPcElrOffset	./arch/arm/faults.hh	/^    uint8_t armPcElrOffset() { return vals.armPcElrOffset; }$/;"	f	class:ArmISA::ArmFaultVals
armPcOffset	./arch/arm/faults.hh	/^        const uint8_t armPcOffset;$/;"	m	struct:ArmISA::ArmFault::FaultVals
armPcOffset	./arch/arm/faults.hh	/^    uint8_t armPcOffset(bool isHyp)   { return isHyp ? vals.armPcElrOffset$/;"	f	class:ArmISA::ArmFaultVals
armed	./cpu/base.hh	/^    bool armed;$/;"	m	struct:AddressMonitor
arrayParamIn	./base/circlebuf.hh	/^arrayParamIn(CheckpointIn &cp, const std::string &name,$/;"	f
arrayParamIn	./sim/serialize.cc	/^arrayParamIn(CheckpointIn &cp, const string &name, T *param, unsigned size)$/;"	f
arrayParamIn	./sim/serialize.cc	/^arrayParamIn(CheckpointIn &cp, const string &name, list<T> &param)$/;"	f
arrayParamIn	./sim/serialize.cc	/^arrayParamIn(CheckpointIn &cp, const string &name, set<T> &param)$/;"	f
arrayParamIn	./sim/serialize.cc	/^arrayParamIn(CheckpointIn &cp, const string &name, vector<T> &param)$/;"	f
arrayParamOut	./base/circlebuf.hh	/^arrayParamOut(CheckpointOut &cp, const std::string &name,$/;"	f
arrayParamOut	./sim/serialize.cc	/^arrayParamOut(CheckpointOut &os, const string &name, const list<T> &param)$/;"	f
arrayParamOut	./sim/serialize.cc	/^arrayParamOut(CheckpointOut &os, const string &name, const set<T> &param)$/;"	f
arrayParamOut	./sim/serialize.cc	/^arrayParamOut(CheckpointOut &os, const string &name, const vector<T> &param)$/;"	f
arrayParamOut	./sim/serialize.cc	/^arrayParamOut(CheckpointOut &os, const string &name,$/;"	f
as	./arch/arm/miscregs.hh	/^        Bitfield<36> as; \/\/ EL1$/;"	m	namespace:ArmISA
as	./arch/arm/miscregs.hh	/^        Bitfield<36> as;$/;"	m	namespace:ArmISA
as_double	./sim/insttracer.hh	/^        double as_double;$/;"	m	union:Trace::InstRecord::__anon110
as_int	./sim/insttracer.hh	/^        uint64_t as_int;$/;"	m	union:Trace::InstRecord::__anon110
aseDn	./arch/mips/pra_constants.hh	/^    Bitfield<12, 8>  aseDn;$/;"	m	namespace:MipsISA
aseUp	./arch/mips/pra_constants.hh	/^    Bitfield<31, 30> aseUp;$/;"	m	namespace:MipsISA
asedis	./arch/arm/miscregs.hh	/^        Bitfield<31> asedis;$/;"	m	namespace:ArmISA
asi	./arch/sparc/decoder.hh	/^    MiscReg asi;$/;"	m	class:SparcISA::Decoder
asi	./arch/sparc/isa.hh	/^    uint8_t asi;            \/\/ Address Space Identifier$/;"	m	class:SparcISA::ISA
asiIsAsIfUser	./arch/sparc/asi.cc	/^asiIsAsIfUser(ASI asi)$/;"	f	namespace:SparcISA
asiIsBlock	./arch/sparc/asi.cc	/^asiIsBlock(ASI asi)$/;"	f	namespace:SparcISA
asiIsCmt	./arch/sparc/asi.cc	/^asiIsCmt(ASI asi)$/;"	f	namespace:SparcISA
asiIsFloatingLoad	./arch/sparc/asi.cc	/^asiIsFloatingLoad(ASI asi)$/;"	f	namespace:SparcISA
asiIsHPriv	./arch/sparc/asi.cc	/^asiIsHPriv(ASI asi)$/;"	f	namespace:SparcISA
asiIsIO	./arch/sparc/asi.cc	/^asiIsIO(ASI asi)$/;"	f	namespace:SparcISA
asiIsInterrupt	./arch/sparc/asi.cc	/^asiIsInterrupt(ASI asi)$/;"	f	namespace:SparcISA
asiIsLittle	./arch/sparc/asi.cc	/^asiIsLittle(ASI asi)$/;"	f	namespace:SparcISA
asiIsMmu	./arch/sparc/asi.cc	/^asiIsMmu(ASI asi)$/;"	f	namespace:SparcISA
asiIsNoFault	./arch/sparc/asi.cc	/^asiIsNoFault(ASI asi)$/;"	f	namespace:SparcISA
asiIsNucleus	./arch/sparc/asi.cc	/^asiIsNucleus(ASI asi)$/;"	f	namespace:SparcISA
asiIsPartialStore	./arch/sparc/asi.cc	/^asiIsPartialStore(ASI asi)$/;"	f	namespace:SparcISA
asiIsPrimary	./arch/sparc/asi.cc	/^asiIsPrimary(ASI asi)$/;"	f	namespace:SparcISA
asiIsPriv	./arch/sparc/asi.cc	/^asiIsPriv(ASI asi)$/;"	f	namespace:SparcISA
asiIsQueue	./arch/sparc/asi.cc	/^asiIsQueue(ASI asi)$/;"	f	namespace:SparcISA
asiIsReal	./arch/sparc/asi.cc	/^asiIsReal(ASI asi)$/;"	f	namespace:SparcISA
asiIsReg	./arch/sparc/asi.cc	/^asiIsReg(ASI asi)$/;"	f	namespace:SparcISA
asiIsScratchPad	./arch/sparc/asi.cc	/^asiIsScratchPad(ASI asi)$/;"	f	namespace:SparcISA
asiIsSecondary	./arch/sparc/asi.cc	/^asiIsSecondary(ASI asi)$/;"	f	namespace:SparcISA
asiIsSparcError	./arch/sparc/asi.cc	/^asiIsSparcError(ASI asi)$/;"	f	namespace:SparcISA
asiIsTwin	./arch/sparc/asi.cc	/^asiIsTwin(ASI asi)$/;"	f	namespace:SparcISA
asiIsUnPriv	./arch/sparc/asi.cc	/^asiIsUnPriv(ASI asi)$/;"	f	namespace:SparcISA
asid	./arch/arm/miscregs.hh	/^      Bitfield<7,0>  asid;$/;"	m	namespace:ArmISA
asid	./arch/arm/pagetable.hh	/^    uint16_t asid;          \/\/ Address Space Identifier$/;"	m	struct:ArmISA::TlbEntry
asid	./arch/arm/table_walker.hh	/^        uint16_t asid;$/;"	m	class:ArmISA::TableWalker::WalkerState
asid	./arch/arm/tlb.hh	/^    uint16_t asid;$/;"	m	class:ArmISA::TLB
asid	./arch/mips/dt_constants.hh	/^    Bitfield<12, 5>  asid;$/;"	m	namespace:MipsISA
asid	./arch/mips/faults.hh	/^    Addr asid;$/;"	m	class:MipsISA::TlbFault
asid	./arch/mips/mt_constants.hh	/^    Bitfield<7,  0>  asid;$/;"	m	namespace:MipsISA
asid	./arch/mips/pagetable.hh	/^    uint8_t asid;$/;"	m	struct:MipsISA::PTE
asid	./arch/mips/pra_constants.hh	/^    Bitfield<23, 16> asid;$/;"	m	namespace:MipsISA
asid	./arch/mips/pra_constants.hh	/^    Bitfield<7,  0>  asid;$/;"	m	namespace:MipsISA
asid	./arch/power/pagetable.hh	/^    uint8_t asid;$/;"	m	struct:PowerISA::PTE
asid	./cpu/base_dyn_inst.hh	/^    short asid;$/;"	m	class:BaseDynInst
asid	./cpu/o3/probe/elastic_trace.hh	/^        uint32_t asid;$/;"	m	struct:ElasticTrace::TraceInfo
asid	./cpu/trace/trace_cpu.hh	/^            uint32_t asid;$/;"	m	class:TraceCPU::ElasticDataGen::GraphNode
asid	./mem/cache/blk.hh	/^    int asid;$/;"	m	class:CacheBlk
asidM	./arch/mips/dt_constants.hh	/^    Bitfield<20, 13> asidM;$/;"	m	namespace:MipsISA
askBusy	./dev/net/etherint.hh	/^    bool askBusy() {return peer->isBusy(); }$/;"	f	class:EtherInt
asma	./arch/alpha/pagetable.hh	/^    bool asma;              \/\/ address space match$/;"	m	struct:AlphaISA::TlbEntry
asn	./arch/alpha/pagetable.hh	/^    uint8_t asn;            \/\/ address space number$/;"	m	struct:AlphaISA::TlbEntry
assemble	./arch/micro_asm.py	/^    def assemble(self, asm):$/;"	m	class:MicroAssembler
assembler	./arch/micro_asm_test.py	/^assembler = MicroAssembler(TestMacroop, microops, Rom('main ROM'), Rom_Macroop)$/;"	v
assert32	./arch/arm/isa.hh	/^        inline void assert32(ThreadContext *tc) {$/;"	f	class:ArmISA::ISA
assert64	./arch/arm/isa.hh	/^        inline void assert64(ThreadContext *tc) {$/;"	f	class:ArmISA::ISA
assertType	./mem/slicc/ast/VarExprAST.py	/^    def assertType(self, type_ident):$/;"	m	class:VarExprAST
assign	./mem/ruby/common/DataBlock.hh	/^DataBlock::assign(uint8_t *data)$/;"	f	class:DataBlock
assignRE	./arch/isa_parser.py	/^assignRE = re.compile(r'\\s*=(?!=)', re.MULTILINE)$/;"	v
assignRobDep	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::assignRobDep(TraceInfo* past_record, TraceInfo* new_record) {$/;"	f	class:ElasticTrace
assignThreadContext	./sim/process.hh	/^    void assignThreadContext(ContextID context_id)$/;"	f	class:Process
assoc	./mem/cache/Cache.py	/^    assoc = Param.Unsigned("Associativity")$/;"	v	class:BaseCache
assoc	./mem/cache/tags/Tags.py	/^    assoc = Param.Int(Parent.assoc, "associativity")$/;"	v	class:BaseSetAssoc
assoc	./mem/cache/tags/base_set_assoc.hh	/^    const unsigned assoc;$/;"	m	class:BaseSetAssoc
assoc	./mem/cache/tags/cacheset.hh	/^    int assoc;$/;"	m	class:CacheSet
assoc	./mem/ruby/structures/ReplacementPolicy.py	/^    assoc = Param.Int(Parent.assoc, "associativity")$/;"	v	class:ReplacementPolicy
assoc	./mem/ruby/structures/RubyCache.py	/^    assoc = Param.Int("");$/;"	v	class:RubyCache
asym	./base/loader/coff_sym.h	/^    SYMR        asym;           \/* symbol for the external *\/$/;"	m	struct:ecoff_extsym
asyncEventMutex	./sim/simulate.cc	/^std::mutex asyncEventMutex;$/;"	v
asyncInsert	./sim/eventq.cc	/^EventQueue::asyncInsert(Event *event)$/;"	f	class:EventQueue
async_daemon	./kern/tru64/tru64_syscalls.hh	/^        async_daemon = 163,$/;"	e	enum:SystemCalls::__anon102
async_event	./sim/async.cc	/^volatile bool async_event = false;$/;"	v
async_exception	./sim/async.cc	/^volatile bool async_exception = false;$/;"	v
async_exit	./sim/async.cc	/^volatile bool async_exit = false;$/;"	v
async_io	./sim/async.cc	/^volatile bool async_io = false;$/;"	v
async_queue	./sim/eventq.hh	/^    std::list<Event*> async_queue;$/;"	m	class:EventQueue
async_queue_mutex	./sim/eventq.hh	/^    std::mutex async_queue_mutex;$/;"	m	class:EventQueue
async_statdump	./sim/async.cc	/^volatile bool async_statdump = false;$/;"	v
async_statreset	./sim/async.cc	/^volatile bool async_statreset = false;$/;"	v
at	./arch/mips/pra_constants.hh	/^    Bitfield<14, 13> at;$/;"	m	namespace:MipsISA
atEndOfBlock	./dev/dma_device.hh	/^    bool atEndOfBlock() const {$/;"	f	class:DmaReadFifo
atags_addr	./arch/arm/ArmSystem.py	/^                                "be written")$/;"	v	class:GenericArmSystem
atap_acoustic_def	./dev/storage/ide_atareg.h	/^    uint8_t	atap_acoustic_def;	\/*     recommended level *\/$/;"	m	struct:ataparams
atap_acoustic_val	./dev/storage/ide_atareg.h	/^    uint8_t	atap_acoustic_val;	\/* 94: Current acoustic level *\/$/;"	m	struct:ataparams
atap_apm_val	./dev/storage/ide_atareg.h	/^    uint16_t	atap_apm_val;		\/* 91: current APM value *\/$/;"	m	struct:ataparams
atap_ata_major	./dev/storage/ide_atareg.h	/^    uint16_t	atap_ata_major;		\/* 80: Major version number *\/$/;"	m	struct:ataparams
atap_ata_minor	./dev/storage/ide_atareg.h	/^    uint16_t	atap_ata_minor;		\/* 81: Minor version number *\/$/;"	m	struct:ataparams
atap_capabilities1	./dev/storage/ide_atareg.h	/^    uint8_t	atap_capabilities1;	\/* 49: capability flags *\/$/;"	m	struct:ataparams
atap_capabilities2	./dev/storage/ide_atareg.h	/^    uint16_t	atap_capabilities2;	\/* 50: capability flags (ATA) *\/$/;"	m	struct:ataparams
atap_capacity	./dev/storage/ide_atareg.h	/^    uint32_t	atap_capacity;	\/* 60-61: total capacity (LBA only) *\/$/;"	m	struct:ataparams
atap_cfa_power	./dev/storage/ide_atareg.h	/^    uint16_t	atap_cfa_power;		\/* 160: CFA powermode *\/$/;"	m	struct:ataparams
atap_checksum	./dev/storage/ide_atareg.h	/^    uint8_t	atap_checksum;		\/*      Checksum *\/$/;"	m	struct:ataparams
atap_cmd1_en	./dev/storage/ide_atareg.h	/^    uint16_t	atap_cmd1_en;		\/* 85: cmd\/features enabled *\/$/;"	m	struct:ataparams
atap_cmd2_en	./dev/storage/ide_atareg.h	/^    uint16_t	atap_cmd2_en;		\/* 86: cmd\/features enabled *\/$/;"	m	struct:ataparams
atap_cmd_def	./dev/storage/ide_atareg.h	/^    uint16_t	atap_cmd_def;		\/* 87: cmd\/features default *\/$/;"	m	struct:ataparams
atap_cmd_ext	./dev/storage/ide_atareg.h	/^    uint16_t	atap_cmd_ext;		\/* 84: command\/features supp. ext. *\/$/;"	m	struct:ataparams
atap_cmd_set1	./dev/storage/ide_atareg.h	/^    uint16_t	atap_cmd_set1;		\/* 82: command set supported *\/$/;"	m	struct:ataparams
atap_cmd_set2	./dev/storage/ide_atareg.h	/^    uint16_t	atap_cmd_set2;		\/* 83: command set supported *\/$/;"	m	struct:ataparams
atap_config	./dev/storage/ide_atareg.h	/^    uint16_t	atap_config;		\/* 0: general configuration *\/$/;"	m	struct:ataparams
atap_curcapacity	./dev/storage/ide_atareg.h	/^    uint16_t	atap_curcapacity[2];	\/* 57-58: current capacity *\/$/;"	m	struct:ataparams
atap_curcylinders	./dev/storage/ide_atareg.h	/^    uint16_t	atap_curcylinders;	\/* 54: current logical cylinders *\/$/;"	m	struct:ataparams
atap_curheads	./dev/storage/ide_atareg.h	/^    uint16_t	atap_curheads;		\/* 55: current logical heads *\/$/;"	m	struct:ataparams
atap_curmulti	./dev/storage/ide_atareg.h	/^    uint8_t	atap_curmulti;		\/* 59: current multi-sector setting *\/$/;"	m	struct:ataparams
atap_curmulti_valid	./dev/storage/ide_atareg.h	/^    uint8_t	atap_curmulti_valid;	\/* 59: current multi-sector setting *\/$/;"	m	struct:ataparams
atap_cursectors	./dev/storage/ide_atareg.h	/^    uint16_t	atap_cursectors;	\/* 56: current logical sectors\/tracks *\/$/;"	m	struct:ataparams
atap_cylinders	./dev/storage/ide_atareg.h	/^    uint16_t	atap_cylinders;		\/* 1: # of non-removable cylinders *\/$/;"	m	struct:ataparams
atap_dmamode_act	./dev/storage/ide_atareg.h	/^    uint8_t	atap_dmamode_act;	\/*     multiword DMA mode active *\/$/;"	m	struct:ataparams
atap_dmamode_supp	./dev/storage/ide_atareg.h	/^    uint8_t	atap_dmamode_supp;	\/* 63: multiword DMA mode supported *\/$/;"	m	struct:ataparams
atap_dmatiming_mimi	./dev/storage/ide_atareg.h	/^    uint16_t	atap_dmatiming_mimi;	\/* 65: minimum DMA cycle time *\/$/;"	m	struct:ataparams
atap_dmatiming_recom	./dev/storage/ide_atareg.h	/^    uint16_t	atap_dmatiming_recom;	\/* 66: recommended DMA cycle time *\/$/;"	m	struct:ataparams
atap_eseu_time	./dev/storage/ide_atareg.h	/^    uint16_t	atap_eseu_time;		\/* 90: Enhanced SEU compl. time *\/$/;"	m	struct:ataparams
atap_extensions	./dev/storage/ide_atareg.h	/^    uint16_t	atap_extensions;	\/* 53: extensions supported *\/$/;"	m	struct:ataparams
atap_heads	./dev/storage/ide_atareg.h	/^    uint16_t	atap_heads;		\/* 3: # of heads *\/$/;"	m	struct:ataparams
atap_hwreset_res	./dev/storage/ide_atareg.h	/^    uint16_t	atap_hwreset_res;	\/* 93: Hardware reset value *\/$/;"	m	struct:ataparams
atap_max_lba	./dev/storage/ide_atareg.h	/^    uint16_t	atap_max_lba[4];	\/* 100-103: Max. user LBA add *\/$/;"	m	struct:ataparams
atap_media_serial	./dev/storage/ide_atareg.h	/^    uint8_t	atap_media_serial[60];	\/* 176-205: media serial number *\/$/;"	m	struct:ataparams
atap_model	./dev/storage/ide_atareg.h	/^    uint8_t	atap_model[40];		\/* 27-46: model number *\/$/;"	m	struct:ataparams
atap_mpasswd_rev	./dev/storage/ide_atareg.h	/^    uint16_t	atap_mpasswd_rev;	\/* 92: Master Password revision *\/$/;"	m	struct:ataparams
atap_multi	./dev/storage/ide_atareg.h	/^    uint16_t	atap_multi;		\/* 47: maximum sectors per irq (ATA) *\/$/;"	m	struct:ataparams
atap_olddmatiming	./dev/storage/ide_atareg.h	/^    uint8_t	atap_olddmatiming;	\/* 52: old DMA timing mode (ATA) *\/$/;"	m	struct:ataparams
atap_oldpiotiming	./dev/storage/ide_atareg.h	/^    uint8_t	atap_oldpiotiming;	\/* 51: old PIO timing mode *\/$/;"	m	struct:ataparams
atap_piomode_supp	./dev/storage/ide_atareg.h	/^    uint8_t	atap_piomode_supp;	\/* 64: PIO mode supported *\/$/;"	m	struct:ataparams
atap_piotiming	./dev/storage/ide_atareg.h	/^    uint16_t	atap_piotiming;		\/* 67: mini PIO cycle time without FC *\/$/;"	m	struct:ataparams
atap_piotiming_iordy	./dev/storage/ide_atareg.h	/^    uint16_t	atap_piotiming_iordy;	\/* 68: mini PIO cycle time with IORDY FC *\/$/;"	m	struct:ataparams
atap_pkt_br	./dev/storage/ide_atareg.h	/^    uint16_t	atap_pkt_br;		\/* 71: time (ns) to bus release *\/$/;"	m	struct:ataparams
atap_pkt_bsyclr	./dev/storage/ide_atareg.h	/^    uint16_t	atap_pkt_bsyclr;	\/* 72: tme to clear BSY after service *\/$/;"	m	struct:ataparams
atap_queuedepth	./dev/storage/ide_atareg.h	/^    uint16_t	atap_queuedepth;	\/* 75: *\/$/;"	m	struct:ataparams
atap_revision	./dev/storage/ide_atareg.h	/^    uint8_t	atap_revision[8];	\/* 23-26: firmware revision *\/$/;"	m	struct:ataparams
atap_rmsn_supp	./dev/storage/ide_atareg.h	/^    uint16_t	atap_rmsn_supp;		\/* 127: remov. media status notif. *\/$/;"	m	struct:ataparams
atap_sata_caps	./dev/storage/ide_atareg.h	/^    uint16_t	atap_sata_caps;		\/* 76: SATA capabilities *\/$/;"	m	struct:ataparams
atap_sata_features_en	./dev/storage/ide_atareg.h	/^    uint16_t	atap_sata_features_en;	\/* 79: SATA features enabled *\/$/;"	m	struct:ataparams
atap_sata_features_supp	./dev/storage/ide_atareg.h	/^    uint16_t	atap_sata_features_supp;\/* 78: SATA features supported *\/$/;"	m	struct:ataparams
atap_sata_reserved	./dev/storage/ide_atareg.h	/^    uint16_t	atap_sata_reserved;	\/* 77: reserved *\/$/;"	m	struct:ataparams
atap_sec_st	./dev/storage/ide_atareg.h	/^    uint16_t	atap_sec_st;		\/* 128: security status *\/$/;"	m	struct:ataparams
atap_sectors	./dev/storage/ide_atareg.h	/^    uint16_t	atap_sectors;		\/* 6: # of sectors *\/$/;"	m	struct:ataparams
atap_serial	./dev/storage/ide_atareg.h	/^    uint8_t	atap_serial[20];	\/* 10-19: serial number *\/$/;"	m	struct:ataparams
atap_seu_time	./dev/storage/ide_atareg.h	/^    uint16_t	atap_seu_time;		\/* 89: Sec. Erase Unit compl. time *\/$/;"	m	struct:ataparams
atap_signature	./dev/storage/ide_atareg.h	/^    uint8_t	atap_signature;		\/* 255: Signature *\/$/;"	m	struct:ataparams
atap_udmamode_act	./dev/storage/ide_atareg.h	/^    uint8_t	atap_udmamode_act;	\/*     Ultra-DMA mode active *\/$/;"	m	struct:ataparams
atap_udmamode_supp	./dev/storage/ide_atareg.h	/^    uint8_t	atap_udmamode_supp;	\/* 88: Ultra-DMA mode supported *\/$/;"	m	struct:ataparams
atap_vendor	./dev/storage/ide_atareg.h	/^    uint8_t	atap_vendor;	        \/* 49: vendor  *\/$/;"	m	struct:ataparams
ataparams	./dev/storage/ide_atareg.h	/^struct ataparams {$/;"	s
ate	./arch/mips/dt_constants.hh	/^    Bitfield<27>     ate;$/;"	m	namespace:MipsISA
atomic	./cpu/testers/memtest/memtest.hh	/^    const bool atomic;$/;"	m	class:MemTest
atomic_read	./base/atomicio.cc	/^atomic_read(int fd, void *s, size_t n)$/;"	f
atomic_write	./base/atomicio.cc	/^atomic_write(int fd, const void *s, size_t n)$/;"	f
attach	./base/remote_gdb.cc	/^BaseRemoteGDB::attach(int f)$/;"	f	class:BaseRemoteGDB
attach	./cpu/kvm/perfevent.cc	/^PerfKvmCounter::attach(PerfKvmCounterConfig &config,$/;"	f	class:PerfKvmCounter
attach	./cpu/kvm/perfevent.hh	/^    void attach(PerfKvmCounterConfig &config, pid_t tid) {$/;"	f	class:PerfKvmCounter
attach	./cpu/kvm/perfevent.hh	/^    void attach(PerfKvmCounterConfig &config,$/;"	f	class:PerfKvmCounter
attach	./dev/net/ethertap.cc	/^EtherTap::attach(int fd)$/;"	f	class:EtherTap
attachIO	./dev/alpha/Tsunami.py	/^    def attachIO(self, bus):$/;"	m	class:Tsunami
attachIO	./dev/arm/RealView.py	/^    def attachIO(self, bus):$/;"	m	class:RealViewEB
attachIO	./dev/arm/RealView.py	/^    def attachIO(self, bus):$/;"	m	class:RealViewPBX
attachIO	./dev/arm/RealView.py	/^    def attachIO(self, bus):$/;"	m	class:VExpress_EMM
attachIO	./dev/mips/Malta.py	/^    def attachIO(self, bus):$/;"	m	class:Malta
attachIO	./dev/sparc/T1000.py	/^    def attachIO(self, bus):$/;"	m	class:T1000
attachIO	./dev/x86/Pc.py	/^    def attachIO(self, bus, dma_ports = []):$/;"	m	class:Pc
attachIO	./dev/x86/SouthBridge.py	/^    def attachIO(self, bus, dma_ports):$/;"	m	class:SouthBridge
attachOnChipIO	./dev/arm/RealView.py	/^    def attachOnChipIO(self, bus, bridge):$/;"	m	class:RealViewEB
attachOnChipIO	./dev/arm/RealView.py	/^    def attachOnChipIO(self, bus, bridge):$/;"	m	class:RealViewPBX
attachOnChipIO	./dev/arm/RealView.py	/^    def attachOnChipIO(self, bus, bridge=None):$/;"	m	class:VExpress_EMM
attachOnChipIO	./dev/sparc/T1000.py	/^    def attachOnChipIO(self, bus):$/;"	m	class:T1000
attachPciDevices	./dev/arm/RealView.py	/^    def attachPciDevices(self):$/;"	m	class:RealView
attachPciDevices	./dev/arm/RealView.py	/^    def attachPciDevices(self):$/;"	m	class:VExpress_EMM
attached	./base/remote_gdb.hh	/^    bool attached;$/;"	m	class:BaseRemoteGDB
attached	./cpu/kvm/perfevent.hh	/^    bool attached() const { return fd != -1; }$/;"	f	class:PerfKvmCounter
attnStatus	./dev/pci/copy_engine_defs.hh	/^    uint32_t attnStatus; \/\/ Read clears$/;"	m	struct:CopyEngineReg::Regs
atto	./python/m5/util/convert.py	/^atto  = 1.0e-18$/;"	v
attr	./arch/arm/miscregs.hh	/^        Bitfield<63, 56> attr;$/;"	m	namespace:ArmISA
attr	./cpu/kvm/perfevent.hh	/^    struct perf_event_attr attr;$/;"	m	class:PerfKvmCounterConfig	typeref:struct:PerfKvmCounterConfig::perf_event_attr
attr	./kern/tru64/tru64.hh	/^        Addr    attr;           \/\/!< allocation policy$/;"	m	struct:Tru64::vm_stack
attrIndx	./arch/arm/table_walker.hh	/^        uint8_t attrIndx() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
attrdict	./python/m5/util/attrdict.py	/^class attrdict(dict):$/;"	c
attributes	./arch/arm/pagetable.hh	/^    uint64_t attributes;    \/\/ Memory attributes formatted for PAR$/;"	m	struct:ArmISA::TlbEntry
attributes	./mem/packet.hh	/^        const std::bitset<NUM_COMMAND_ATTRIBUTES> attributes;$/;"	m	struct:MemCmd::CommandInfo
audcntl	./kern/tru64/tru64_syscalls.hh	/^        audcntl = 252,$/;"	e	enum:SystemCalls::__anon102
audgen	./kern/tru64/tru64_syscalls.hh	/^        audgen = 253,$/;"	e	enum:SystemCalls::__anon102
autoDestroy	./base/callback.hh	/^    const bool autoDestroy;$/;"	m	class:MakeCallback
autoDestruct	./base/callback.hh	/^    virtual void autoDestruct() {}$/;"	f	class:Callback
autoDestruct	./base/callback.hh	/^    void autoDestruct() { if (autoDestroy) delete this; }$/;"	f	class:MakeCallback
autoEOI	./dev/x86/i8259.hh	/^    bool autoEOI;$/;"	m	class:X86ISA::I8259
autoReload	./dev/arm/timer_cpulocal.hh	/^            Bitfield<1>   autoReload;$/;"	m	class:CpuLocalTimer::Timer
auxNil	./base/loader/coff_sym.h	388;"	d
avail	./dev/net/pktfifo.hh	/^    unsigned avail() const { return _maxsize - _size - _reserved; }$/;"	f	class:PacketFifo
avail	./dev/virtio/base.hh	/^    VirtRing<VirtDescriptor::Index> avail;$/;"	m	class:VirtQueue
avail	./dev/virtio/virtio_ring.h	/^    struct vring_avail *avail;$/;"	m	struct:vring	typeref:struct:vring::vring_avail
available	./base/cp_annotate.hh	/^    static bool available()                                 { return false; }$/;"	f	class:CPA
available	./base/cp_annotate.hh	/^    static bool available()  { return true; }$/;"	f	class:CPA
averageDoorbell	./dev/arm/ufs_device.hh	/^        Stats::Average averageDoorbell;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
averagePower	./mem/dram_ctrl.hh	/^        Stats::Scalar averagePower;$/;"	m	class:DRAMCtrl::Rank
averageReadBW	./mem/comm_monitor.hh	/^        Stats::Formula averageReadBW;$/;"	m	struct:CommMonitor::MonitorStats
averageReadSSDBW	./dev/arm/ufs_device.hh	/^        Stats::Formula averageReadSSDBW;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
averageReadSSDQueue	./dev/arm/ufs_device.hh	/^        Stats::Average averageReadSSDQueue;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
averageSCSIQueue	./dev/arm/ufs_device.hh	/^        Stats::Average averageSCSIQueue;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
averageWriteBW	./mem/comm_monitor.hh	/^        Stats::Formula averageWriteBW;$/;"	m	struct:CommMonitor::MonitorStats
averageWriteSSDBW	./dev/arm/ufs_device.hh	/^        Stats::Formula averageWriteSSDBW;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
averageWriteSSDQueue	./dev/arm/ufs_device.hh	/^        Stats::Average averageWriteSSDQueue;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
avgBusLat	./mem/dram_ctrl.hh	/^    Stats::Formula avgBusLat;$/;"	m	class:DRAMCtrl
avgGap	./mem/dram_ctrl.hh	/^    Stats::Formula avgGap;$/;"	m	class:DRAMCtrl
avgMemAccLat	./mem/dram_ctrl.hh	/^    Stats::Formula avgMemAccLat;$/;"	m	class:DRAMCtrl
avgMissLatency	./mem/cache/base.hh	/^    Stats::Formula avgMissLatency[MemCmd::NUM_MEM_CMDS];$/;"	m	class:BaseCache
avgMshrMissLatency	./mem/cache/base.hh	/^    Stats::Formula avgMshrMissLatency[MemCmd::NUM_MEM_CMDS];$/;"	m	class:BaseCache
avgMshrUncacheableLatency	./mem/cache/base.hh	/^    Stats::Formula avgMshrUncacheableLatency[MemCmd::NUM_MEM_CMDS];$/;"	m	class:BaseCache
avgOccs	./mem/cache/tags/base.hh	/^    Stats::Formula avgOccs;$/;"	m	class:BaseTags
avgQLat	./mem/dram_ctrl.hh	/^    Stats::Formula avgQLat;$/;"	m	class:DRAMCtrl
avgRdBW	./mem/dram_ctrl.hh	/^    Stats::Formula avgRdBW;$/;"	m	class:DRAMCtrl
avgRdBWSys	./mem/dram_ctrl.hh	/^    Stats::Formula avgRdBWSys;$/;"	m	class:DRAMCtrl
avgRdQLen	./mem/dram_ctrl.hh	/^    Stats::Average avgRdQLen;$/;"	m	class:DRAMCtrl
avgRefs	./mem/cache/tags/base.hh	/^    Stats::Formula avgRefs;$/;"	m	class:BaseTags
avgVnicDistance	./dev/net/sinic.hh	/^    Stats::Formula avgVnicDistance;$/;"	m	class:Sinic::Device
avgWrBW	./mem/dram_ctrl.hh	/^    Stats::Formula avgWrBW;$/;"	m	class:DRAMCtrl
avgWrBWSys	./mem/dram_ctrl.hh	/^    Stats::Formula avgWrBWSys;$/;"	m	class:DRAMCtrl
avgWrQLen	./mem/dram_ctrl.hh	/^    Stats::Average avgWrQLen;$/;"	m	class:DRAMCtrl
avg_blocked	./mem/cache/base.hh	/^    Stats::Formula avg_blocked;$/;"	m	class:BaseCache
avl	./arch/x86/pagetable.hh	/^        Bitfield<11, 9> avl;$/;"	m	namespace:X86ISA
avl	./arch/x86/regs/misc.hh	/^        Bitfield<52> avl; \/\/ Available To Software$/;"	m	namespace:X86ISA
avl	./arch/x86/regs/misc.hh	/^        Bitfield<5> avl;$/;"	m	namespace:X86ISA
avoidQuiesceLiveLock	./cpu/o3/commit.hh	/^    bool avoidQuiesceLiveLock;$/;"	m	class:DefaultCommit
avs	./dev/arm/pl111.hh	/^        Bitfield<11> avs;$/;"	m	class:Pl111
aw	./arch/arm/miscregs.hh	/^        Bitfield<5> aw;$/;"	m	namespace:ArmISA
awaitingResponse	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::HardwareResource::awaitingResponse() const {$/;"	f	class:TraceCPU::ElasticDataGen::HardwareResource
b	./arch/arm/miscregs.hh	/^        Bitfield<7>    b;       \/\/ Endianness support (dropped in ARMv7)$/;"	m	namespace:ArmISA
b	./arch/x86/regs/misc.hh	/^        Bitfield<54> b; \/\/ Default Operand Size$/;"	m	namespace:X86ISA
b	./arch/x86/types.hh	/^            Bitfield<13> b;$/;"	m	namespace:X86ISA
b	./arch/x86/types.hh	/^        Bitfield<0> b;$/;"	m	namespace:X86ISA
b	./base/bigint.hh	/^    uint32_t b;$/;"	m	struct:m5_twin32_t
b	./base/bigint.hh	/^    uint64_t b;$/;"	m	struct:m5_twin64_t
b0	./arch/x86/regs/misc.hh	/^        Bitfield<0> b0;$/;"	m	namespace:X86ISA
b1	./arch/x86/regs/misc.hh	/^        Bitfield<1> b1;$/;"	m	namespace:X86ISA
b2	./arch/x86/regs/misc.hh	/^        Bitfield<2> b2;$/;"	m	namespace:X86ISA
b3	./arch/x86/regs/misc.hh	/^        Bitfield<3> b3;$/;"	m	namespace:X86ISA
bCond	./base/barrier.hh	/^    std::condition_variable bCond;$/;"	m	class:Barrier
bMutex	./base/barrier.hh	/^    std::mutex bMutex;$/;"	m	class:Barrier
ba	./arch/power/insts/condition.hh	/^    uint32_t ba;$/;"	m	class:PowerISA::CondLogicOp
ba	./arch/power/types.hh	/^    Bitfield<20, 16> ba;$/;"	m	namespace:PowerISA
back	./kern/tru64/mbuf.hh	/^        Addr    forw, back;     \/\/ 0x20, 0x28$/;"	m	struct:tru64::m_ext::ext_refq
backComSize	./cpu/o3/O3CPU.py	/^    backComSize = Param.Unsigned(5, "Time buffer size for backwards communication")$/;"	v	class:DerivO3CPU
backdoor	./dev/alpha/Tsunami.py	/^    backdoor = AlphaBackdoor(pio_addr=0x80200000000, disk=Parent.simple_disk)$/;"	v	class:Tsunami
backendLatency	./mem/dram_ctrl.hh	/^    const Tick backendLatency;$/;"	m	class:DRAMCtrl
backingStore	./mem/physical.hh	/^    std::vector<std::pair<AddrRange, uint8_t*>> backingStore;$/;"	m	class:PhysicalMemory
backtrace	./arch/isa_parser.py	/^def backtrace(filename_stack):$/;"	f
badMicroop	./arch/x86/insts/badmicroop.cc	/^const StaticInstPtr badMicroop =$/;"	m	namespace:X86ISA	file:
badMode	./arch/arm/types.hh	/^    badMode(OperatingMode mode)$/;"	f	namespace:ArmISA
badMode32	./arch/arm/types.hh	/^    badMode32(OperatingMode mode)$/;"	f	namespace:ArmISA
badVPN2	./arch/mips/pra_constants.hh	/^    Bitfield<22, 4>  badVPN2;$/;"	m	namespace:MipsISA
badaddrEvent	./arch/alpha/tru64/system.hh	/^    BadAddrEvent *badaddrEvent;$/;"	m	class:Tru64AlphaSystem
baddr_t	./dev/storage/simple_disk.hh	/^    typedef uint64_t baddr_t;$/;"	t	class:SimpleDisk
badvaddr	./arch/mips/remote_gdb.hh	/^            uint32_t badvaddr;$/;"	m	struct:MipsISA::RemoteGDB::MipsGdbRegCache::__anon83
bandwidth	./mem/SimpleMemory.py	/^    bandwidth = Param.MemoryBandwidth('12.8GB\/s',$/;"	v	class:SimpleMemory
bandwidth	./mem/simple_mem.hh	/^    const double bandwidth;$/;"	m	class:SimpleMemory
bandwidth_bins	./mem/CommMonitor.py	/^    bandwidth_bins = Param.Unsigned('20', "# bins in bandwidth histograms")$/;"	v	class:CommMonitor
bandwidth_factor	./mem/ruby/network/BasicLink.py	/^    bandwidth_factor = 16$/;"	v	class:BasicExtLink
bandwidth_factor	./mem/ruby/network/BasicLink.py	/^    bandwidth_factor = 16$/;"	v	class:BasicIntLink
bandwidth_factor	./mem/ruby/network/BasicLink.py	/^    bandwidth_factor = Param.Int("generic bandwidth factor, usually in bytes")$/;"	v	class:BasicLink
bank	./mem/dram_ctrl.hh	/^        const uint8_t bank;$/;"	m	class:DRAMCtrl::DRAMPacket
bank	./mem/dram_ctrl.hh	/^        uint8_t bank;$/;"	m	class:DRAMCtrl::Bank
bankBits	./cpu/testers/traffic_gen/generators.hh	/^    const unsigned int bankBits;$/;"	m	class:DramGen
bankBits	./mem/ruby/structures/BankedArray.hh	/^    unsigned int bankBits;$/;"	m	class:BankedArray
bankGroupArch	./mem/dram_ctrl.hh	/^    const bool bankGroupArch;$/;"	m	class:DRAMCtrl
bankGroupsPerRank	./mem/dram_ctrl.hh	/^    const uint32_t bankGroupsPerRank;$/;"	m	class:DRAMCtrl
bankId	./mem/dram_ctrl.hh	/^        const uint16_t bankId;$/;"	m	class:DRAMCtrl::DRAMPacket
bankRef	./mem/dram_ctrl.hh	/^        Bank& bankRef;$/;"	m	class:DRAMCtrl::DRAMPacket
bankType	./arch/mips/isa.hh	/^        std::vector<BankType> bankType;$/;"	m	class:MipsISA::ISA
bank_bit_0	./mem/ruby/structures/RubyMemoryControl.py	/^    bank_bit_0 = Param.Int(8, "");$/;"	v	class:RubyMemoryControl
bank_busy_time	./mem/ruby/structures/RubyMemoryControl.py	/^    bank_busy_time = Param.Int(11, "");$/;"	v	class:RubyMemoryControl
bank_groups_per_rank	./mem/DRAMCtrl.py	/^    bank_groups_per_rank = 0$/;"	v	class:HBM_1000_4H_x128
bank_groups_per_rank	./mem/DRAMCtrl.py	/^    bank_groups_per_rank = 4$/;"	v	class:DDR4_2400_x64
bank_groups_per_rank	./mem/DRAMCtrl.py	/^    bank_groups_per_rank = 4$/;"	v	class:GDDR5_4000_x64
bank_groups_per_rank	./mem/DRAMCtrl.py	/^    bank_groups_per_rank = Param.Unsigned(0, "Number of bank groups per rank")$/;"	v	class:DRAMCtrl
bank_queue_size	./mem/ruby/structures/RubyMemoryControl.py	/^    bank_queue_size = Param.Int(12, "");$/;"	v	class:RubyMemoryControl
bankedIntPriority	./dev/arm/gic_pl390.hh	/^    uint8_t bankedIntPriority[CPU_MAX][SGI_MAX + PPI_MAX];$/;"	m	class:Pl390
bankgr	./mem/dram_ctrl.hh	/^        uint8_t bankgr;$/;"	m	class:DRAMCtrl::Bank
banks	./mem/dram_ctrl.hh	/^        std::vector<Bank> banks;$/;"	m	class:DRAMCtrl::Rank
banks	./mem/ruby/structures/BankedArray.hh	/^    unsigned int banks;$/;"	m	class:BankedArray
banksPerRank	./mem/dram_ctrl.hh	/^    const uint32_t banksPerRank;$/;"	m	class:DRAMCtrl
banks_per_rank	./mem/DRAMCtrl.py	/^    banks_per_rank = 16$/;"	v	class:DDR4_2400_x64
banks_per_rank	./mem/DRAMCtrl.py	/^    banks_per_rank = 16$/;"	v	class:GDDR5_4000_x64
banks_per_rank	./mem/DRAMCtrl.py	/^    banks_per_rank = 16$/;"	v	class:HBM_1000_4H_x64
banks_per_rank	./mem/DRAMCtrl.py	/^    banks_per_rank = 2$/;"	v	class:HMC_2500_x32
banks_per_rank	./mem/DRAMCtrl.py	/^    banks_per_rank = 4$/;"	v	class:WideIO_200_x128
banks_per_rank	./mem/DRAMCtrl.py	/^    banks_per_rank = 8$/;"	v	class:DDR3_1600_x64
banks_per_rank	./mem/DRAMCtrl.py	/^    banks_per_rank = 8$/;"	v	class:HBM_1000_4H_x128
banks_per_rank	./mem/DRAMCtrl.py	/^    banks_per_rank = 8$/;"	v	class:LPDDR2_S4_1066_x32
banks_per_rank	./mem/DRAMCtrl.py	/^    banks_per_rank = 8$/;"	v	class:LPDDR3_1600_x32
banks_per_rank	./mem/DRAMCtrl.py	/^    banks_per_rank = Param.Unsigned("Number of banks per rank")$/;"	v	class:DRAMCtrl
banks_per_rank	./mem/ruby/structures/RubyMemoryControl.py	/^    banks_per_rank = Param.Int(8, "");$/;"	v	class:RubyMemoryControl
bare_iron	./arch/mips/MipsSystem.py	/^    bare_iron = Param.Bool(False, "Using Bare Iron Mode?")$/;"	v	class:MipsSystem
bare_iron	./arch/mips/MipsSystem.py	/^    bare_iron = True$/;"	v	class:BareIronMipsSystem
barrier	./sim/global_event.hh	/^    Barrier barrier;$/;"	m	class:BaseGlobalEvent
barrierEvent	./sim/global_event.hh	/^    std::vector<BarrierEvent *> barrierEvent;$/;"	m	class:BaseGlobalEvent
base	./arch/arm/freebsd/process.hh	/^        int base;$/;"	m	struct:ArmFreebsdProcessBits::SyscallTable
base	./arch/arm/insts/mem.hh	/^    IntRegIndex base;$/;"	m	class:ArmISA::Memory
base	./arch/arm/insts/mem.hh	/^    IntRegIndex base;$/;"	m	class:ArmISA::RfeOp
base	./arch/arm/insts/mem.hh	/^    IntRegIndex base;$/;"	m	class:ArmISA::Swap
base	./arch/arm/insts/mem64.hh	/^    IntRegIndex base;$/;"	m	class:ArmISA::Memory64
base	./arch/arm/insts/mem64.hh	/^    IntRegIndex base;$/;"	m	class:ArmISA::SysDC64
base	./arch/arm/linux/process.hh	/^        int base;$/;"	m	struct:ArmLinuxProcessBits::SyscallTable
base	./arch/mips/faults.hh	/^    virtual FaultVect base(ThreadContext *tc) const$/;"	f	class:MipsISA::MipsFaultBase
base	./arch/x86/emulenv.hh	/^        RegIndex base;$/;"	m	struct:X86ISA::EmulEnv
base	./arch/x86/insts/microldstop.hh	/^        const RegIndex base;$/;"	m	class:X86ISA::LdStOp
base	./arch/x86/pagetable.hh	/^        Bitfield<51, 12> base;$/;"	m	namespace:X86ISA
base	./arch/x86/process.hh	/^            Addr base;$/;"	m	class:X86ISA::I386LiveProcess::VSyscallPage
base	./arch/x86/process.hh	/^            Addr base;$/;"	m	class:X86ISA::X86_64LiveProcess::VSyscallPage
base	./arch/x86/regs/misc.hh	/^        Bitfield<31, 0> base;$/;"	m	namespace:X86ISA
base	./arch/x86/regs/misc.hh	/^        Bitfield<51, 12> base;$/;"	m	namespace:X86ISA
base	./arch/x86/types.hh	/^        Bitfield<2,0> base;$/;"	m	namespace:X86ISA
base	./base/cprintf_formats.hh	/^    enum { dec, hex, oct } base;$/;"	m	struct:cp::Format	typeref:enum:cp::Format::__anon117
base	./cpu/timebuf.hh	/^    unsigned base;$/;"	m	class:TimeBuffer
base	./dev/arm/RealView.py	/^    base = Param.Addr(0, "Base address")$/;"	v	class:GenericTimerMem
baseAddr	./base/loader/object_file.hh	/^        Addr     baseAddr;$/;"	m	struct:ObjectFile::Section
baseAddr	./dev/arm/ufs_device.hh	/^        uint32_t baseAddr;$/;"	m	struct:UFSHostDevice::UFSHCDSGEntry
baseAddr	./dev/pci/pcireg.h	/^        uint32_t baseAddr[6];$/;"	m	struct:PCIConfig::__anon26
baseAddr	./dev/storage/ide_disk.hh	/^    uint32_t baseAddr;$/;"	m	struct:PrdEntry
baseAddr1	./cpu/testers/memtest/memtest.hh	/^    Addr baseAddr1;$/;"	m	class:MemTest
baseAddr2	./cpu/testers/memtest/memtest.hh	/^    Addr baseAddr2;$/;"	m	class:MemTest
baseCCRegIndex	./cpu/o3/regfile.hh	/^    unsigned baseCCRegIndex;$/;"	m	class:PhysRegFile
baseCheck	./base/statistics.cc	/^Info::baseCheck() const$/;"	f	class:Stats::Info
baseClasses	./python/m5/SimObject.py	/^baseClasses = allClasses.copy()$/;"	v
baseCpu	./cpu/thread_state.hh	/^    BaseCPU *baseCpu;$/;"	m	struct:ThreadState
baseEntries	./arch/x86/bios/intelmp.hh	/^    std::vector<BaseConfigEntry *> baseEntries;$/;"	m	class:X86ISA::IntelMP::ConfigTable
baseEnums	./python/m5/params.py	/^baseEnums = allEnums.copy()$/;"	v
baseFilename	./sim/serialize.cc	/^const char *CheckpointIn::baseFilename = "m5.cpt";$/;"	m	class:CheckpointIn	file:
baseFilename	./sim/serialize.hh	/^    static const char *baseFilename;$/;"	m	class:CheckpointIn
baseFloatRegIndex	./cpu/o3/regfile.hh	/^    unsigned baseFloatRegIndex;$/;"	m	class:PhysRegFile
baseHigh	./arch/x86/regs/misc.hh	/^        Bitfield<63, 56> baseHigh;$/;"	m	namespace:X86ISA
baseInstances	./python/m5/SimObject.py	/^baseInstances = instanceDict.copy()$/;"	v
baseIsSP	./arch/arm/insts/mem64.hh	/^    bool baseIsSP;$/;"	m	class:ArmISA::Memory64
baseLow	./arch/x86/regs/misc.hh	/^        Bitfield<39, 16> baseLow;$/;"	m	namespace:X86ISA
basePC	./arch/x86/decoder.hh	/^    Addr basePC;$/;"	m	class:X86ISA::Decoder
baseParams	./python/m5/params.py	/^baseParams = allParams.copy()$/;"	v
basePtr	./mem/multi_level_page_table.hh	/^    Addr basePtr;$/;"	m	class:MultiLevelPageTable
base_addr	./arch/x86/linux/process.cc	/^    uint32_t base_addr;$/;"	m	struct:UserDesc32	file:
base_addr	./arch/x86/linux/process.cc	/^    uint64_t base_addr;$/;"	m	struct:UserDesc64	file:
base_entries	./arch/x86/bios/IntelMP.py	/^    base_entries = VectorParam.X86IntelMPBaseConfigEntry([],$/;"	v	class:X86IntelMPConfigTable
base_message	./base/misc.hh	171;"	d
base_message_once	./base/misc.hh	181;"	d
baseaddr	./dev/arm/pl111.hh	/^        Bitfield<2> baseaddr;$/;"	m	class:Pl111
baseline_fault_vector_database	./mem/ruby/network/fault_model/FaultModel.py	/^    baseline_fault_vector_database = VectorParam.Float([$/;"	v	class:FaultModel
basic_bus_busy_time	./mem/ruby/structures/RubyMemoryControl.py	/^    basic_bus_busy_time = Param.Int(2, "");$/;"	v	class:RubyMemoryControl
bb	./arch/power/insts/condition.hh	/^    uint32_t bb;$/;"	m	class:PowerISA::CondLogicOp
bb	./arch/power/types.hh	/^    Bitfield<15, 11> bb;$/;"	m	namespace:PowerISA
bbMap	./cpu/simple/probes/simpoint.hh	/^    std::unordered_map<BasicBlockRange, BBInfo> bbMap;$/;"	m	class:SimPoint
bcd	./dev/arm/pl111.hh	/^        Bitfield<26> bcd;$/;"	m	class:Pl111
bcd	./dev/intel_8254_timer.hh	/^        Bitfield<0> bcd;$/;"	m	class:Intel8254Timer
bcdize	./dev/mc146818.cc	/^bcdize(uint8_t val)$/;"	f	file:
bd	./arch/mips/pra_constants.hh	/^    Bitfield<31>     bd;$/;"	m	namespace:MipsISA
bd	./arch/power/types.hh	/^    Bitfield<15,  2> bd;$/;"	m	namespace:PowerISA
bd	./arch/x86/regs/misc.hh	/^        Bitfield<13> bd;$/;"	m	namespace:X86ISA
bdelayDoneSeqNum	./cpu/o3/decode.hh	/^    Addr bdelayDoneSeqNum[Impl::MaxThreads];$/;"	m	class:DefaultDecode
be	./arch/mips/pra_constants.hh	/^    Bitfield<15>     be;$/;"	m	namespace:MipsISA
bebo	./dev/arm/pl111.hh	/^        Bitfield<9> bebo;$/;"	m	class:Pl111
begin	./arch/sparc/tlb_map.hh	/^    begin()$/;"	f	class:SparcISA::TlbMap
begin	./base/addr_range_map.hh	/^    begin() const$/;"	f	class:AddrRangeMap
begin	./base/addr_range_map.hh	/^    begin()$/;"	f	class:AddrRangeMap
begin	./base/stats/text.cc	/^Text::begin()$/;"	f	class:Stats::Text
begin	./dev/net/pktfifo.hh	/^    const_iterator begin() const { return fifo.begin(); }$/;"	f	class:PacketFifo
begin	./dev/net/pktfifo.hh	/^    iterator begin() { return fifo.begin(); }$/;"	f	class:PacketFifo
beginLine	./dev/pixelpump.cc	/^BasePixelPump::beginLine()$/;"	f	class:BasePixelPump
behind_pci	./dev/x86/Pc.py	/^    behind_pci = IsaFake(pio_addr=x86IOAddress(0xcf8), pio_size=8)$/;"	v	class:Pc
bepo	./dev/arm/pl111.hh	/^        Bitfield<10> bepo;$/;"	m	class:Pl111
best	./base/cprintf_formats.hh	/^    enum { best, fixed, scientific } float_format;$/;"	e	enum:cp::Format::__anon119
betog	./sim/byteswap.hh	/^    inline T betog(T value) {return betole(value);}$/;"	f	namespace:LittleEndianGuest
betog	./sim/byteswap.hh	/^    inline T betog(T value) {return value;}$/;"	f	namespace:BigEndianGuest
betoh	./sim/byteswap.hh	/^template <typename T> inline T betoh(T value) {return swap_byte(value);}$/;"	f
betoh	./sim/byteswap.hh	/^template <typename T> inline T betoh(T value) {return value;}$/;"	f
betole	./sim/byteswap.hh	/^template <typename T> inline T betole(T value) {return swap_byte(value);}$/;"	f
bev	./arch/mips/pra_constants.hh	/^    Bitfield<22>     bev;$/;"	m	namespace:MipsISA
bf	./arch/power/insts/condition.hh	/^    uint32_t bf;$/;"	m	class:PowerISA::CondMoveOp
bf	./arch/power/types.hh	/^    Bitfield<25, 23> bf;$/;"	m	namespace:PowerISA
bfa	./arch/power/insts/condition.hh	/^    uint32_t bfa;$/;"	m	class:PowerISA::CondMoveOp
bfa	./arch/power/types.hh	/^    Bitfield<20, 18> bfa;$/;"	m	namespace:PowerISA
bgr	./dev/arm/pl111.hh	/^        Bitfield<8> bgr;$/;"	m	class:Pl111
bi	./arch/power/insts/branch.hh	/^    uint32_t bi;$/;"	m	class:PowerISA::BranchCond
bi	./arch/power/types.hh	/^    Bitfield<20, 16> bi;$/;"	m	namespace:PowerISA
bigPkt	./cpu/simple/timing.hh	/^        PacketPtr bigPkt;$/;"	m	class:TimingSimpleCPU::SplitFragmentSenderState
bigThumb	./arch/arm/decoder.hh	/^    bool bigThumb;$/;"	m	class:ArmISA::Decoder
bigThumb	./arch/arm/types.hh	/^        Bitfield<35>     bigThumb;$/;"	m	namespace:ArmISA
big_endian	./dev/arm/hdlcd.hh	/^        Bitfield<31>   big_endian;$/;"	m	class:HDLcd
bigendian	./base/vnc/vncinput.hh	/^        uint8_t bigendian;$/;"	m	struct:VncInput::PixelFormat
binaryOp	./arch/arm/insts/vfp.cc	/^FpOp::binaryOp(FPSCR &fpscr, fpType op1, fpType op2,$/;"	f	class:ArmISA::FpOp
bind	./kern/tru64/tru64_syscalls.hh	/^        bind = 104,$/;"	e	enum:SystemCalls::__anon102
bind	./mem/port.cc	/^MasterPort::bind(BaseSlavePort& slave_port)$/;"	f	class:MasterPort
bind	./mem/port.cc	/^SlavePort::bind(MasterPort& master_port)$/;"	f	class:SlavePort
bindAllPorts	./sim/cxx_manager.cc	/^CxxConfigManager::bindAllPorts()$/;"	f	class:CxxConfigManager
bindMasterPort	./sim/cxx_manager.cc	/^CxxConfigManager::bindMasterPort(SimObject *object,$/;"	f	class:CxxConfigManager
bindObjectPorts	./sim/cxx_manager.cc	/^CxxConfigManager::bindObjectPorts(SimObject *object)$/;"	f	class:CxxConfigManager
bindPort	./sim/cxx_manager.cc	/^CxxConfigManager::bindPort($/;"	f	class:CxxConfigManager
bist	./dev/pci/pcireg.h	/^        uint8_t bist;$/;"	m	struct:PCIConfig::__anon26
bit2	./unittest/bituniontest.cc	/^    Bitfield<2> bit2;$/;"	m	namespace:__anon1	file:
bit41	./unittest/bituniontest.cc	/^        Bitfield<41> bit41;$/;"	m	namespace:__anon1	file:
bit41Signed	./unittest/bituniontest.cc	/^        SignedBitfield<41> bit41Signed;$/;"	m	namespace:__anon1	file:
bitIndex	./mem/ruby/common/NetDest.hh	/^    NodeID bitIndex(NodeID index) const { return index; }$/;"	f	class:NetDest
bitOp1ArgRE	./arch/isa_parser.py	/^bitOp1ArgRE = re.compile(r'<\\s*(\\w+)\\s*:\\s*>')$/;"	v
bitOpExprRE	./arch/isa_parser.py	/^bitOpExprRE = re.compile(r'\\)<\\s*(\\w+)\\s*:\\s*(\\w+)\\s*>')$/;"	v
bitOpWordRE	./arch/isa_parser.py	/^bitOpWordRE = re.compile(r'(?<![\\w\\.])([\\w\\.]+)<\\s*(\\w+)\\s*:\\s*(\\w+)\\s*>')$/;"	v
bitRemove	./mem/ruby/common/Address.cc	/^bitRemove(Addr addr, unsigned int small, unsigned int big)$/;"	f
bitSelect	./mem/ruby/common/Address.cc	/^bitSelect(Addr addr, unsigned int small, unsigned int big)$/;"	f
bitrev	./arch/mips/dsp.cc	/^MipsISA::bitrev(int32_t value)$/;"	f	class:MipsISA
bits	./base/bitfield.hh	/^bits(T val, int bit)$/;"	f
bits	./base/bitfield.hh	/^bits(T val, int first, int last)$/;"	f
bits	./dev/pci/pcireg.h	/^    uint64_t bits;$/;"	m	struct:MSIXPbaEntry
bits	./mem/ruby/common/Set.hh	/^    std::bitset<NUMBER_BITS_PER_SET> bits;$/;"	m	class:Set
bits43To42	./unittest/bituniontest.cc	/^        Bitfield<43, 42> bits43To42;$/;"	m	namespace:__anon1	file:
bitsToFp	./arch/arm/insts/vfp.hh	/^bitsToFp(uint64_t bits, double junk)$/;"	f	namespace:ArmISA
bitsToFp	./arch/arm/insts/vfp.hh	/^bitsToFp(uint64_t bits, float junk)$/;"	f	namespace:ArmISA
blank_space	./base/cprintf_formats.hh	/^    bool blank_space;$/;"	m	struct:cp::Format
bldrev	./arch/alpha/aout_machdep.h	/^    uint16_t    bldrev;         \/\/\/< ???$/;"	m	struct:aout_exechdr
blk	./mem/cache/blk.hh	/^    CacheBlk *blk;$/;"	m	class:CacheBlkPrintWrapper
blkAddr	./mem/cache/mshr.hh	/^    Addr blkAddr;$/;"	m	class:MSHR
blkAlign	./mem/cache/tags/base_set_assoc.hh	/^    Addr blkAlign(Addr addr) const$/;"	f	class:BaseSetAssoc
blkAlign	./mem/cache/tags/fa_lru.hh	/^    Addr blkAlign(Addr addr) const$/;"	f	class:FALRU
blkMask	./mem/cache/tags/base_set_assoc.hh	/^    unsigned blkMask;$/;"	m	class:BaseSetAssoc
blkSize	./dev/arm/ufs_device.hh	/^        const uint32_t blkSize;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
blkSize	./mem/cache/base.hh	/^    const unsigned blkSize;$/;"	m	class:BaseCache
blkSize	./mem/cache/mshr.hh	/^    unsigned blkSize;$/;"	m	class:MSHR
blkSize	./mem/cache/prefetch/base.hh	/^    unsigned blkSize;$/;"	m	class:BasePrefetcher
blkSize	./mem/cache/tags/base.hh	/^    const unsigned blkSize;$/;"	m	class:BaseTags
blk_size	./dev/arm/FlashDevice.py	/^    blk_size = Param.MemorySize("128kB", "Size of one disk block")$/;"	v	class:FlashDevice
blks	./mem/cache/tags/base_set_assoc.hh	/^    BlkType *blks;$/;"	m	class:BaseSetAssoc
blks	./mem/cache/tags/cacheset.hh	/^    Blktype **blks;$/;"	m	class:CacheSet
blks	./mem/cache/tags/fa_lru.hh	/^    FALRUBlk *blks;$/;"	m	class:FALRU
block	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::block(ThreadID tid)$/;"	f	class:DefaultDecode
block	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::block(ThreadID tid)$/;"	f	class:DefaultIEW
block	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::block(ThreadID tid)$/;"	f	class:DefaultRename
block	./dev/arm/flash_device.hh	/^        uint32_t block;$/;"	m	struct:FlashDevice::PageMapEntry
blockAddrMask	./cpu/testers/memtest/memtest.hh	/^    const Addr blockAddrMask;$/;"	m	class:MemTest
blockAlign	./cpu/testers/memtest/memtest.hh	/^    Addr blockAlign(Addr addr) const$/;"	f	class:MemTest
blockAlign	./mem/cache/base.hh	/^    Addr blockAlign(Addr addr) const { return (addr & ~(Addr(blkSize - 1))); }$/;"	f	class:BaseCache
blockBits	./cpu/testers/traffic_gen/generators.hh	/^    const unsigned int blockBits;$/;"	m	class:DramGen
blockEmptyEntries	./dev/arm/flash_device.hh	/^    std::vector<uint32_t> blockEmptyEntries;$/;"	m	class:FlashDevice
blockMemInst	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::blockMemInst(DynInstPtr& inst)$/;"	f	class:DefaultIEW
blockMemInst	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::blockMemInst(DynInstPtr &blocked_inst)$/;"	f	class:InstructionQueue
blockOnQueue	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::blockOnQueue(Addr addr, MessageBuffer* port)$/;"	f	class:AbstractController
blockSize	./cpu/testers/memtest/memtest.hh	/^    const unsigned blockSize;$/;"	m	class:MemTest
blockSize	./dev/arm/flash_device.hh	/^    const uint32_t blockSize;$/;"	m	class:FlashDevice
blockSizeBits	./cpu/testers/networktest/networktest.hh	/^    unsigned blockSizeBits;$/;"	m	class:NetworkTest
blockThisCycle	./cpu/o3/rename.hh	/^    bool blockThisCycle;$/;"	m	class:DefaultRename
blockValidEntries	./dev/arm/flash_device.hh	/^    std::vector<uint32_t> blockValidEntries;$/;"	m	class:FlashDevice
block_offset	./cpu/testers/networktest/NetworkTest.py	/^    block_offset = Param.Int(6, "block offset in bits")$/;"	v	class:NetworkTest
block_size	./mem/cache/tags/Tags.py	/^    block_size = Param.Int(Parent.cache_line_size, "block size in bytes")$/;"	v	class:BaseTags
block_size	./mem/ruby/structures/ReplacementPolicy.py	/^    block_size = Param.Int(Parent.cache_line_size, "block size in bytes")$/;"	v	class:ReplacementPolicy
block_size_bytes	./mem/ruby/system/RubySystem.py	/^    block_size_bytes = Param.UInt32(64,$/;"	v	class:RubySystem
blocked	./cpu/minor/decode.hh	/^    bool blocked;$/;"	m	class:Minor::Decode
blocked	./cpu/minor/fetch1.hh	/^    bool blocked;$/;"	m	class:Minor::Fetch1
blocked	./cpu/minor/fetch2.hh	/^    bool blocked;$/;"	m	class:Minor::Fetch2
blocked	./mem/cache/base.hh	/^        bool blocked;$/;"	m	class:BaseCache::CacheSlavePort
blocked	./mem/cache/base.hh	/^    uint8_t blocked;$/;"	m	class:BaseCache
blockedCycle	./mem/cache/base.hh	/^    Cycles blockedCycle;$/;"	m	class:BaseCache
blockedMemInsts	./cpu/o3/inst_queue.hh	/^    std::list<DynInstPtr> blockedMemInsts;$/;"	m	class:InstructionQueue
blocked_causes	./mem/cache/base.hh	/^    Stats::Vector blocked_causes;$/;"	m	class:BaseCache
blocked_cycles	./mem/cache/base.hh	/^    Stats::Vector blocked_cycles;$/;"	m	class:BaseCache
blocksPerDisk	./dev/arm/flash_device.hh	/^    uint32_t blocksPerDisk;$/;"	m	class:FlashDevice
blocksize	./cpu/testers/traffic_gen/generators.hh	/^        Addr blocksize;$/;"	m	struct:TraceGen::TraceElement
blocksize	./cpu/testers/traffic_gen/generators.hh	/^    const Addr blocksize;$/;"	m	class:LinearGen
blocksize	./cpu/testers/traffic_gen/generators.hh	/^    const Addr blocksize;$/;"	m	class:RandomGen
blocksize	./cpu/trace/trace_cpu.hh	/^            Addr blocksize;$/;"	m	struct:TraceCPU::FixedRetryGen::TraceElement
blue	./base/bitmap.hh	/^        uint8_t blue;$/;"	m	struct:Bitmap::BmpPixel32
blue	./base/framebuffer.hh	/^    uint8_t blue;$/;"	m	struct:Pixel
blue_select	./dev/arm/hdlcd.hh	/^    ColorSelectReg blue_select;     \/**< Blue color select register *\/$/;"	m	class:HDLcd
bluemax	./base/vnc/vncinput.hh	/^        uint16_t bluemax;$/;"	m	struct:VncInput::PixelFormat
blueshift	./base/vnc/vncinput.hh	/^        uint8_t blueshift;$/;"	m	struct:VncInput::PixelFormat
bmEnabled	./dev/storage/ide_ctrl.hh	/^    bool bmEnabled;$/;"	m	class:IdeController
bmiAddr	./dev/storage/ide_ctrl.hh	/^    Addr bmiAddr, bmiSize;$/;"	m	class:IdeController
bmiRegs	./dev/storage/ide_ctrl.hh	/^        } bmiRegs;$/;"	m	struct:IdeController::Channel	typeref:struct:IdeController::Channel::BMIRegs
bmiSize	./dev/storage/ide_ctrl.hh	/^    Addr bmiAddr, bmiSize;$/;"	m	class:IdeController
bmidtp	./dev/storage/ide_ctrl.hh	/^            uint32_t bmidtp;$/;"	m	struct:IdeController::Channel::BMIRegs
bmp	./dev/arm/hdlcd.hh	/^    Bitmap bmp;$/;"	m	class:HDLcd
bmp	./dev/arm/pl111.hh	/^    Bitmap bmp;$/;"	m	class:Pl111
bo	./arch/power/insts/branch.hh	/^    uint32_t bo;$/;"	m	class:PowerISA::BranchCond
bo	./arch/power/types.hh	/^    Bitfield<25, 21> bo;$/;"	m	namespace:PowerISA
bool_option	./python/m5/options.py	/^    def bool_option(self, name, default, help):$/;"	m	class:OptionParser
bootLoaders	./arch/arm/system.hh	/^    std::vector<std::unique_ptr<ObjectFile>> bootLoaders;$/;"	m	class:ArmSystem
bootReleaseAddr	./arch/arm/freebsd/system.hh	/^    Addr bootReleaseAddr;$/;"	m	class:FreebsdArmSystem
boot_cpu_frequency	./arch/alpha/AlphaSystem.py	/^    boot_cpu_frequency = Param.Frequency(Self.cpu[0].clk_domain.clock[0]$/;"	v	class:LinuxAlphaSystem
boot_cpu_frequency	./arch/mips/MipsSystem.py	/^    boot_cpu_frequency = Param.Frequency(Self.cpu[0].clk_domain.clock[0]$/;"	v	class:LinuxMipsSystem
boot_loader	./arch/arm/ArmSystem.py	/^    boot_loader = VectorParam.String([],$/;"	v	class:ArmSystem
boot_osflags	./sim/System.py	/^    boot_osflags = Param.String("a", "boot flags to pass to the kernel")$/;"	v
bootldr	./arch/arm/system.hh	/^    ObjectFile *bootldr;$/;"	m	class:ArmSystem
bootstrap	./arch/x86/bios/IntelMP.py	/^    bootstrap = Param.Bool(False, 'if this is the bootstrap processor')$/;"	v	class:X86IntelMPProcessor
bottom2	./arch/arm/types.hh	/^        Bitfield<1, 0> bottom2;$/;"	m	namespace:ArmISA
bottom3	./arch/x86/types.hh	/^        Bitfield<2,0> bottom3;$/;"	m	namespace:X86ISA
bottomDW	./dev/x86/i82094aa.hh	/^        Bitfield<31, 0> bottomDW;$/;"	m	class:X86ISA::I82094AA
bottomReserved	./dev/x86/i82094aa.hh	/^        Bitfield<31, 17> bottomReserved;$/;"	m	class:X86ISA::I82094AA
boxOpClass	./cpu/minor/MinorCPU.py	/^    def boxOpClass(op_class):$/;"	f	function:minorMakeOpClassSet
bpHistory	./cpu/pred/bpred_unit.hh	/^        void *bpHistory;$/;"	m	struct:BPredUnit::PredictorHistory
bpc0	./arch/mips/dt_constants.hh	/^    Bitfield<2,  0>  bpc0;$/;"	m	namespace:MipsISA
bpc1	./arch/mips/dt_constants.hh	/^    Bitfield<5,  3>  bpc1;$/;"	m	namespace:MipsISA
bpc10	./arch/mips/dt_constants.hh	/^    Bitfield<5,  3>  bpc10;$/;"	m	namespace:MipsISA
bpc11	./arch/mips/dt_constants.hh	/^    Bitfield<8,  6>  bpc11;$/;"	m	namespace:MipsISA
bpc12	./arch/mips/dt_constants.hh	/^    Bitfield<11, 9>  bpc12;$/;"	m	namespace:MipsISA
bpc13	./arch/mips/dt_constants.hh	/^    Bitfield<14, 12> bpc13;$/;"	m	namespace:MipsISA
bpc14	./arch/mips/dt_constants.hh	/^    Bitfield<17, 15> bpc14;$/;"	m	namespace:MipsISA
bpc2	./arch/mips/dt_constants.hh	/^    Bitfield<8,  6>  bpc2;$/;"	m	namespace:MipsISA
bpc3	./arch/mips/dt_constants.hh	/^    Bitfield<11, 9>  bpc3;$/;"	m	namespace:MipsISA
bpc4	./arch/mips/dt_constants.hh	/^    Bitfield<14, 12> bpc4;$/;"	m	namespace:MipsISA
bpc5	./arch/mips/dt_constants.hh	/^    Bitfield<17, 15> bpc5;$/;"	m	namespace:MipsISA
bpc6	./arch/mips/dt_constants.hh	/^    Bitfield<20, 18> bpc6;$/;"	m	namespace:MipsISA
bpc7	./arch/mips/dt_constants.hh	/^    Bitfield<23, 21> bpc7;$/;"	m	namespace:MipsISA
bpc8	./arch/mips/dt_constants.hh	/^    Bitfield<26, 24> bpc8;$/;"	m	namespace:MipsISA
bpc9	./arch/mips/dt_constants.hh	/^    Bitfield<2,  0>  bpc9;$/;"	m	namespace:MipsISA
bpp	./base/vnc/vncinput.hh	/^        uint8_t bpp;$/;"	m	struct:VncInput::PixelFormat
bpp1	./dev/arm/pl111.hh	/^        bpp1 = 0,$/;"	e	enum:Pl111::LcdMode
bpp12	./dev/arm/pl111.hh	/^        bpp12$/;"	e	enum:Pl111::LcdMode
bpp16	./dev/arm/pl111.hh	/^        bpp16,$/;"	e	enum:Pl111::LcdMode
bpp16m565	./dev/arm/pl111.hh	/^        bpp16m565,$/;"	e	enum:Pl111::LcdMode
bpp2	./dev/arm/pl111.hh	/^        bpp2,$/;"	e	enum:Pl111::LcdMode
bpp24	./dev/arm/pl111.hh	/^        bpp24,$/;"	e	enum:Pl111::LcdMode
bpp4	./dev/arm/pl111.hh	/^        bpp4,$/;"	e	enum:Pl111::LcdMode
bpp8	./dev/arm/pl111.hh	/^        bpp8,$/;"	e	enum:Pl111::LcdMode
bpt	./arch/alpha/osfpal.hh	/^        bpt = 0x80,$/;"	e	enum:PAL::__anon50
braced	./mem/slicc/generate/tex.py	/^    braced = "<>"$/;"	v	class:tex_formatter
braced	./python/m5/util/code_formatter.py	/^    braced = r'{}'$/;"	v	class:code_formatter
branchAddr	./cpu/o3/comm.hh	/^        uint64_t branchAddr;$/;"	m	struct:TimeBufStruct::decodeComm
branchCount	./cpu/o3/comm.hh	/^        unsigned branchCount;$/;"	m	struct:TimeBufStruct::decodeComm
branchCount	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::branchCount()$/;"	f	class:DefaultFetch
branchInp	./cpu/minor/fetch2.hh	/^    Latch<BranchData>::Output branchInp;$/;"	m	class:Minor::Fetch2
branchMispredict	./cpu/o3/comm.hh	/^        bool branchMispredict;$/;"	m	struct:TimeBufStruct::decodeComm
branchMispredict	./cpu/o3/comm.hh	/^    bool branchMispredict[Impl::MaxThreads];$/;"	m	struct:DefaultIEWDefaultCommit
branchMispredicts	./cpu/o3/commit.hh	/^    Stats::Scalar branchMispredicts;$/;"	m	class:DefaultCommit
branchMispredicts	./cpu/o3/iew.hh	/^    Stats::Formula branchMispredicts;$/;"	m	class:DefaultIEW
branchPred	./cpu/minor/MinorCPU.py	/^    branchPred = Param.BranchPredictor(TournamentBP($/;"	v	class:MinorCPU
branchPred	./cpu/o3/O3CPU.py	/^    branchPred = Param.BranchPredictor(TournamentBP(numThreads =$/;"	v	class:DerivO3CPU
branchPred	./cpu/o3/fetch.hh	/^    BPredUnit *branchPred;$/;"	m	class:DefaultFetch
branchPred	./cpu/simple/BaseSimpleCPU.py	/^    branchPred = Param.BranchPredictor(NULL, "Branch Predictor")$/;"	v	class:BaseSimpleCPU
branchPred	./cpu/simple/base.hh	/^    BPredUnit *branchPred;$/;"	m	class:BaseSimpleCPU
branchPredictor	./cpu/minor/fetch2.hh	/^    BPredUnit &branchPredictor;$/;"	m	class:Minor::Fetch2
branchRate	./cpu/o3/fetch.hh	/^    Stats::Formula branchRate;$/;"	m	class:DefaultFetch
branchTaken	./cpu/o3/comm.hh	/^        bool branchTaken; \/\/ *F$/;"	m	struct:TimeBufStruct::commitComm
branchTaken	./cpu/o3/comm.hh	/^        bool branchTaken;$/;"	m	struct:TimeBufStruct::decodeComm
branchTaken	./cpu/o3/comm.hh	/^    bool branchTaken[Impl::MaxThreads];$/;"	m	struct:DefaultIEWDefaultCommit
branchTarget	./arch/arm/insts/branch64.cc	/^BranchImm64::branchTarget(const ArmISA::PCState &branchPC) const$/;"	f	class:ArmISA::BranchImm64
branchTarget	./arch/arm/insts/branch64.cc	/^BranchImmImmReg64::branchTarget(const ArmISA::PCState &branchPC) const$/;"	f	class:ArmISA::BranchImmImmReg64
branchTarget	./arch/arm/insts/branch64.cc	/^BranchImmReg64::branchTarget(const ArmISA::PCState &branchPC) const$/;"	f	class:ArmISA::BranchImmReg64
branchTarget	./arch/power/insts/branch.cc	/^BranchNonPCRel::branchTarget(const PowerISA::PCState &pc) const$/;"	f	class:BranchNonPCRel
branchTarget	./arch/power/insts/branch.cc	/^BranchNonPCRelCond::branchTarget(const PowerISA::PCState &pc) const$/;"	f	class:BranchNonPCRelCond
branchTarget	./arch/power/insts/branch.cc	/^BranchPCRel::branchTarget(const PowerISA::PCState &pc) const$/;"	f	class:BranchPCRel
branchTarget	./arch/power/insts/branch.cc	/^BranchPCRelCond::branchTarget(const PowerISA::PCState &pc) const$/;"	f	class:BranchPCRelCond
branchTarget	./arch/power/insts/branch.cc	/^BranchRegCond::branchTarget(ThreadContext *tc) const$/;"	f	class:BranchRegCond
branchTarget	./cpu/base_dyn_inst.hh	/^    TheISA::PCState branchTarget() const$/;"	f	class:BaseDynInst
branchTarget	./cpu/static_inst.cc	/^StaticInst::branchTarget(ThreadContext *tc) const$/;"	f	class:StaticInst
branchTarget	./cpu/static_inst.cc	/^StaticInst::branchTarget(const TheISA::PCState &pc) const$/;"	f	class:StaticInst
branching	./arch/arm/types.hh	/^        branching() const$/;"	f	class:ArmISA::PCState
branching	./arch/generic/types.hh	/^    branching() const$/;"	f	class:GenericISA::DelaySlotPCState
branching	./arch/generic/types.hh	/^    branching() const$/;"	f	class:GenericISA::DelaySlotUPCState
branching	./arch/generic/types.hh	/^    branching() const$/;"	f	class:GenericISA::SimplePCState
branching	./arch/generic/types.hh	/^    branching() const$/;"	f	class:GenericISA::UPCState
branching	./arch/x86/types.hh	/^        branching() const$/;"	f	class:X86ISA::PCState
brar	./dev/net/ns_gige.hh	/^    uint32_t    brar;$/;"	m	struct:dp_regs
brdr	./dev/net/ns_gige.hh	/^    uint32_t    brdr;$/;"	m	struct:dp_regs
breakAtKernelFunction	./sim/debug.cc	/^breakAtKernelFunction(const char* funcName)$/;"	f
break_ipl	./arch/alpha/ev5.cc	/^int break_ipl = -1;$/;"	m	namespace:AlphaISA	file:
break_iter_t	./base/remote_gdb.hh	/^    typedef break_map_t::iterator break_iter_t;$/;"	t	class:BaseRemoteGDB
break_map_t	./base/remote_gdb.hh	/^    typedef std::map<Addr, HardBreakpoint *> break_map_t;$/;"	t	class:BaseRemoteGDB
break_type	./base/remote_gdb.cc	/^BaseRemoteGDB::break_type(char c)$/;"	f	class:BaseRemoteGDB
breakpoint	./arch/mips/system.cc	/^MipsSystem::breakpoint()$/;"	f	class:MipsSystem
breakpoint	./arch/null/remote_gdb.hh	/^    bool breakpoint() { return false; }$/;"	f	class:BaseRemoteGDB
breakpoint	./base/debug.cc	/^breakpoint()$/;"	f	namespace:Debug
breakpoint	./base/remote_gdb.hh	/^    virtual bool breakpoint()$/;"	f	class:BaseRemoteGDB
breakpoint	./sim/system.cc	/^bool System::breakpoint()$/;"	f	class:System
bridge	./mem/bridge.hh	/^        Bridge& bridge;$/;"	m	class:Bridge::BridgeMasterPort
bridge	./mem/bridge.hh	/^        Bridge& bridge;$/;"	m	class:Bridge::BridgeSlavePort
brief_copyright	./python/m5/main.py	/^    "gem5 is copyrighted software; use the --copyright option for details."$/;"	v
brkFunc	./sim/syscall_emul.cc	/^brkFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)$/;"	f
brk_point	./sim/process.hh	/^    Addr brk_point;             \/\/ top of the data segment$/;"	m	class:Process
broadcast	./base/inet.hh	/^    bool broadcast() const$/;"	f	struct:Net::EthAddr
broadcast	./mem/ruby/common/NetDest.cc	/^NetDest::broadcast()$/;"	f	class:NetDest
broadcast	./mem/ruby/common/NetDest.cc	/^NetDest::broadcast(MachineType machineType)$/;"	f	class:NetDest
broadcast	./mem/ruby/common/Set.hh	/^    void broadcast()$/;"	f	class:Set
broadcast	./mem/ruby/slicc_interface/RubySlicc_ComponentMapping.hh	/^broadcast(MachineType type)$/;"	f
bs	./arch/x86/regs/misc.hh	/^        Bitfield<14> bs;$/;"	m	namespace:X86ISA
bsize	./arch/alpha/aout_machdep.h	/^    uint64_t    bsize;          \/\/\/< bss segment size$/;"	m	struct:aout_exechdr
bsize	./base/loader/exec_ecoff.h	/^        coff_ulong  bsize;$/;"	m	struct:ecoff_aouthdr
bsp	./arch/x86/regs/misc.hh	/^        Bitfield<8> bsp;$/;"	m	namespace:X86ISA
bss	./base/loader/object_file.hh	/^    Section bss;$/;"	m	class:ObjectFile
bssBase	./base/loader/object_file.hh	/^    Addr bssBase() const { return bss.baseAddr; }$/;"	f	class:ObjectFile
bssSize	./base/loader/object_file.hh	/^    size_t bssSize() const { return bss.size; }$/;"	f	class:ObjectFile
bss_start	./arch/alpha/aout_machdep.h	/^    uint64_t    bss_start;      \/\/\/< bss base address$/;"	m	struct:aout_exechdr
bss_start	./base/loader/exec_ecoff.h	/^        coff_ulong  bss_start;$/;"	m	struct:ecoff_aouthdr
bsu	./arch/arm/miscregs.hh	/^        Bitfield<11, 10> bsu;$/;"	m	namespace:ArmISA
bt	./arch/power/insts/condition.hh	/^    uint32_t bt;$/;"	m	class:PowerISA::CondLogicOp
bt	./arch/power/types.hh	/^    Bitfield<25, 21> bt;$/;"	m	namespace:PowerISA
bt	./arch/x86/regs/misc.hh	/^        Bitfield<15> bt;$/;"	m	namespace:X86ISA
bt	./base/loader/coff_sym.h	/^    unsigned bt  : 6;   \/* basic type *\/$/;"	m	struct:__anon112
btAdr	./base/loader/coff_symconst.h	172;"	d
btBit	./base/loader/coff_symconst.h	195;"	d
btChar	./base/loader/coff_symconst.h	173;"	d
btComplex	./base/loader/coff_symconst.h	189;"	d
btDComplex	./base/loader/coff_symconst.h	190;"	d
btDouble	./base/loader/coff_symconst.h	182;"	d
btEnum	./base/loader/coff_symconst.h	185;"	d
btFixedDec	./base/loader/coff_symconst.h	192;"	d
btFloat	./base/loader/coff_symconst.h	181;"	d
btFloatDec	./base/loader/coff_symconst.h	193;"	d
btIndirect	./base/loader/coff_symconst.h	191;"	d
btInt	./base/loader/coff_symconst.h	177;"	d
btLong	./base/loader/coff_symconst.h	179;"	d
btLongLong	./base/loader/coff_symconst.h	198;"	d
btMax	./base/loader/coff_symconst.h	200;"	d
btNil	./base/loader/coff_symconst.h	171;"	d
btPicture	./base/loader/coff_symconst.h	196;"	d
btRange	./base/loader/coff_symconst.h	187;"	d
btSet	./base/loader/coff_symconst.h	188;"	d
btShort	./base/loader/coff_symconst.h	175;"	d
btString	./base/loader/coff_symconst.h	194;"	d
btStruct	./base/loader/coff_symconst.h	183;"	d
btTypedef	./base/loader/coff_symconst.h	186;"	d
btUChar	./base/loader/coff_symconst.h	174;"	d
btUInt	./base/loader/coff_symconst.h	178;"	d
btULong	./base/loader/coff_symconst.h	180;"	d
btULongLong	./base/loader/coff_symconst.h	199;"	d
btUShort	./base/loader/coff_symconst.h	176;"	d
btUnion	./base/loader/coff_symconst.h	184;"	d
btVoid	./base/loader/coff_symconst.h	197;"	d
btb	./cpu/pred/btb.hh	/^    std::vector<BTBEntry> btb;$/;"	m	class:DefaultBTB
btbUpdate	./cpu/pred/2bit_local.cc	/^LocalBP::btbUpdate(Addr branch_addr, void * &bp_history)$/;"	f	class:LocalBP
btbUpdate	./cpu/pred/bi_mode.cc	/^BiModeBP::btbUpdate(Addr branchAddr, void * &bpHistory)$/;"	f	class:BiModeBP
btbUpdate	./cpu/pred/tournament.cc	/^TournamentBP::btbUpdate(Addr branch_addr, void * &bp_history)$/;"	f	class:TournamentBP
btf	./arch/x86/regs/misc.hh	/^        Bitfield<1> btf; \/\/ Branch single step$/;"	m	namespace:X86ISA
bubble	./cpu/minor/buffers.hh	/^    static ElemType bubble() { assert(false); }$/;"	f	class:Minor::NoBubbleTraits
bubble	./cpu/minor/buffers.hh	/^    static ElemType bubble() { return ElemType::bubble(); }$/;"	f	class:Minor::BubbleTraitsAdaptor
bubble	./cpu/minor/buffers.hh	/^    static PtrType bubble() { return ElemType::bubble(); }$/;"	f	class:Minor::BubbleTraitsPtrAdaptor
bubble	./cpu/minor/dyn_inst.hh	/^    static MinorDynInstPtr bubble() { return bubbleInst; }$/;"	f	class:Minor::MinorDynInst
bubble	./cpu/minor/func_unit.hh	/^    static QueuedInst bubble()$/;"	f	class:Minor::QueuedInst
bubble	./cpu/minor/pipe_data.hh	/^    static BranchData bubble() { return BranchData(); }$/;"	f	class:Minor::BranchData
bubble	./cpu/minor/pipe_data.hh	/^    static ForwardLineData bubble() { return ForwardLineData(); }$/;"	f	class:Minor::ForwardLineData
bubbleFill	./cpu/minor/pipe_data.cc	/^ForwardInstData::bubbleFill()$/;"	f	class:Minor::ForwardInstData
bubbleFlag	./cpu/minor/pipe_data.hh	/^    bool bubbleFlag;$/;"	m	class:Minor::ForwardLineData
bubbleInst	./cpu/minor/dyn_inst.cc	/^MinorDynInstPtr MinorDynInst::bubbleInst = NULL;$/;"	m	class:Minor::MinorDynInst	file:
bubbleInst	./cpu/minor/dyn_inst.hh	/^    static MinorDynInstPtr bubbleInst;$/;"	m	class:Minor::MinorDynInst
bucket_size	./base/statistics.hh	/^        Counter bucket_size;$/;"	m	struct:Stats::DistStor::Params
bucket_size	./base/statistics.hh	/^    Counter bucket_size;$/;"	m	class:Stats::DistStor
bucket_size	./base/statistics.hh	/^    Counter bucket_size;$/;"	m	class:Stats::HistStor
bucket_size	./base/stats/info.hh	/^    Counter bucket_size;$/;"	m	struct:Stats::DistData
buckets	./base/statistics.hh	/^        size_type buckets;$/;"	m	struct:Stats::DistStor::Params
buckets	./base/statistics.hh	/^        size_type buckets;$/;"	m	struct:Stats::HistStor::Params
buf	./base/circlebuf.hh	/^    CircleBuf<value_type> buf;$/;"	m	class:Fifo
buf	./base/circlebuf.hh	/^    std::vector<value_type> buf;$/;"	m	class:CircleBuf
buf	./dev/net/i8254xGBe_defs.hh	/^            Addr buf;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon6
bufLen	./dev/net/i8254xGBe_defs.hh	/^        unsigned bufLen() { return pktlen() << 10; }$/;"	f	struct:iGbReg::Regs::SRRCTL
bufPtr	./sim/syscall_emul_buf.hh	/^    uint8_t * const bufPtr; \/\/\/< pointer to buffer in simulator space$/;"	m	class:BaseBufferArg
buff_per_vc	./mem/ruby/network/fault_model/FaultModel.hh	/^        int buff_per_vc;$/;"	m	struct:FaultModel::system_conf
buffer	./cpu/minor/buffers.hh	/^    Buffer buffer;$/;"	m	class:Minor::Latch
buffer	./cpu/timebuf.hh	/^        TimeBuffer<T> *buffer;$/;"	m	class:TimeBuffer::wire
buffer	./dev/arm/ufs_device.hh	/^        std::vector <uint8_t> buffer;$/;"	m	struct:UFSHostDevice::transferInfo
buffer	./dev/dma_device.hh	/^    Fifo<uint8_t> buffer;$/;"	m	class:DmaReadFifo
buffer	./dev/net/ethertap.hh	/^    char *buffer;$/;"	m	class:EtherTap
buffer	./sim/vptr.hh	/^    Addr buffer[(sizeof(T)-1)\/sizeof(Addr) + 1];$/;"	m	class:VPtr
bufferData	./dev/x86/i8042.cc	/^X86ISA::PS2Device::bufferData(const uint8_t *data, int size)$/;"	f	class:X86ISA::PS2Device
bufferPtr	./sim/syscall_emul_buf.hh	/^    void *bufferPtr() { return bufPtr; }$/;"	f	class:BufferArg
buffer_offset	./dev/net/ethertap.hh	/^    uint32_t buffer_offset;$/;"	m	class:EtherTap
buffer_size	./dev/arm/pl111.hh	/^    static const int buffer_size = LcdMaxWidth * LcdMaxHeight * sizeof(uint32_t);$/;"	m	class:Pl111
buffer_size	./mem/ruby/network/MessageBuffer.py	/^                                     (0 allows infinite entries)")$/;"	v	class:MessageBuffer
buffer_size	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.py	/^    buffer_size = Param.UInt32(0,$/;"	v	class:GarnetNetwork
buffer_size	./mem/ruby/network/simple/SimpleNetwork.py	/^    buffer_size = Param.Int(0,$/;"	v	class:SimpleNetwork
buffer_size	./mem/ruby/slicc_interface/Controller.py	/^    buffer_size = Param.UInt32(0, "max buffer size 0 means infinite")$/;"	v	class:RubyController
bufferram	./arch/alpha/linux/linux.hh	/^       uint64_t bufferram; \/* Memory used by buffers *\/$/;"	m	struct:AlphaLinux::__anon51
bufferram	./arch/arm/linux/linux.hh	/^        uint32_t bufferram; \/* Memory used by buffers *\/$/;"	m	struct:ArmLinux32::__anon76
bufferram	./arch/arm/linux/linux.hh	/^        uint64_t bufferram; \/* Memory used by buffers *\/$/;"	m	struct:ArmLinux64::__anon79
bufferram	./arch/mips/linux/linux.hh	/^       uint32_t bufferram; \/* Memory used by buffers *\/$/;"	m	struct:MipsLinux::__anon84
bufferram	./arch/sparc/linux/linux.hh	/^        uint32_t bufferram; \/* Memory used by buffers *\/$/;"	m	struct:Sparc32Linux::__anon47
bufferram	./arch/sparc/linux/linux.hh	/^        uint64_t bufferram; \/* Memory used by buffers *\/$/;"	m	struct:SparcLinux::__anon45
bufferram	./arch/x86/linux/linux.hh	/^        uint64_t bufferram; \/* Memory used by buffers *\/$/;"	m	struct:X86Linux64::__anon61
bufferram	./arch/x86/linux/linux.hh	/^       uint32_t bufferram; \/* Memory used by buffers *\/$/;"	m	struct:X86Linux32::__anon63
buffers_per_ctrl_vc	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.py	/^    buffers_per_ctrl_vc = Param.UInt32(1, "buffers per ctrl virtual channel");$/;"	v	class:GarnetNetwork_d
buffers_per_data_vc	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.py	/^    buffers_per_data_vc = Param.UInt32(4, "buffers per data virtual channel");$/;"	v	class:GarnetNetwork_d
buflen	./dev/net/ethertap.hh	/^    int buflen;$/;"	m	class:EtherTap
bufptr	./dev/net/ns_gige_reg.h	/^    uint32_t bufptr;  \/* pointer to the first fragment or buffer *\/$/;"	m	struct:ns_desc32
bufptr	./dev/net/ns_gige_reg.h	/^    uint64_t bufptr;  \/* pointer to the first fragment or buffer *\/$/;"	m	struct:ns_desc64
bufsz	./dev/net/Ethernet.py	/^    bufsz = Param.Int(10000, "tap buffer size")$/;"	v	class:EtherTap
bugchk	./arch/alpha/osfpal.hh	/^        bugchk = 0x81,$/;"	e	enum:PAL::__anon50
buildInst	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::buildInst(ThreadID tid, StaticInstPtr staticInst,$/;"	f	class:DefaultFetch
buildIntRequest	./arch/x86/intmessage.hh	/^    buildIntRequest(const uint8_t id, T payload, Addr offset, Addr size)$/;"	f	namespace:X86ISA
buildIntRequest	./arch/x86/intmessage.hh	/^    buildIntRequest(const uint8_t id, TriggerIntMessage payload)$/;"	f	namespace:X86ISA
buildIntResponse	./arch/x86/intmessage.hh	/^    buildIntResponse()$/;"	f	namespace:X86ISA
buildOperandNameMap	./arch/isa_parser.py	/^    def buildOperandNameMap(self, user_dict, lineno):$/;"	m	class:ISAParser
buildPacket	./cpu/simple/timing.cc	/^TimingSimpleCPU::buildPacket(RequestPtr req, bool read)$/;"	f	class:TimingSimpleCPU
buildPstateMask	./arch/sparc/isa.cc	/^buildPstateMask()$/;"	f	namespace:SparcISA
buildReadCode	./arch/isa_parser.py	/^    def buildReadCode(self, func = None):$/;"	m	class:Operand
buildRetPC	./arch/alpha/utility.hh	/^buildRetPC(const PCState &curPC, const PCState &callPC)$/;"	f	namespace:AlphaISA
buildRetPC	./arch/arm/utility.hh	/^buildRetPC(const PCState &curPC, const PCState &callPC)$/;"	f	namespace:ArmISA
buildRetPC	./arch/mips/utility.hh	/^buildRetPC(const PCState &curPC, const PCState &callPC)$/;"	f	namespace:MipsISA
buildRetPC	./arch/power/utility.hh	/^buildRetPC(const PCState &curPC, const PCState &callPC)$/;"	f	namespace:PowerISA
buildRetPC	./arch/sparc/utility.hh	/^buildRetPC(const PCState &curPC, const PCState &callPC)$/;"	f	namespace:SparcISA
buildRetPC	./arch/x86/utility.hh	/^    buildRetPC(const PCState &curPC, const PCState &callPC)$/;"	f	namespace:X86ISA
buildSplitPacket	./cpu/simple/timing.cc	/^TimingSimpleCPU::buildSplitPacket(PacketPtr &pkt1, PacketPtr &pkt2,$/;"	f	class:TimingSimpleCPU
buildTable	./mem/slicc/symbols/StateMachine.py	/^    def buildTable(self):$/;"	m	class:StateMachine
buildWriteCode	./arch/isa_parser.py	/^    def buildWriteCode(self, func = None):$/;"	m	class:Operand
burstAlign	./mem/dram_ctrl.hh	/^    Addr burstAlign(Addr addr) const { return (addr & ~(Addr(burstSize - 1))); }$/;"	f	class:DRAMCtrl
burstCount	./mem/dram_ctrl.hh	/^        const unsigned int burstCount;$/;"	m	class:DRAMCtrl::BurstHelper
burstHelper	./mem/dram_ctrl.hh	/^        BurstHelper* burstHelper;$/;"	m	class:DRAMCtrl::DRAMPacket
burstLength	./mem/dram_ctrl.hh	/^    const uint32_t burstLength;$/;"	m	class:DRAMCtrl
burstSize	./mem/dram_ctrl.hh	/^    const uint32_t burstSize;$/;"	m	class:DRAMCtrl
burstSize	./mem/dramsim2_wrapper.cc	/^DRAMSim2Wrapper::burstSize() const$/;"	f	class:DRAMSim2Wrapper
burst_len	./dev/arm/hdlcd.hh	/^        Bitfield<4,0>   burst_len;$/;"	m	class:HDLcd
burst_length	./mem/DRAMCtrl.py	/^    burst_length = 4$/;"	v	class:HBM_1000_4H_x128
burst_length	./mem/DRAMCtrl.py	/^    burst_length = 4$/;"	v	class:HBM_1000_4H_x64
burst_length	./mem/DRAMCtrl.py	/^    burst_length = 4$/;"	v	class:WideIO_200_x128
burst_length	./mem/DRAMCtrl.py	/^    burst_length = 8$/;"	v	class:DDR3_1600_x64
burst_length	./mem/DRAMCtrl.py	/^    burst_length = 8$/;"	v	class:DDR4_2400_x64
burst_length	./mem/DRAMCtrl.py	/^    burst_length = 8$/;"	v	class:GDDR5_4000_x64
burst_length	./mem/DRAMCtrl.py	/^    burst_length = 8$/;"	v	class:HMC_2500_x32
burst_length	./mem/DRAMCtrl.py	/^    burst_length = 8$/;"	v	class:LPDDR2_S4_1066_x32
burst_length	./mem/DRAMCtrl.py	/^    burst_length = 8$/;"	v	class:LPDDR3_1600_x32
burst_length	./mem/DRAMCtrl.py	/^    burst_length = Param.Unsigned("Burst lenght (BL) in beats")$/;"	v	class:DRAMCtrl
burst_length_bins	./mem/CommMonitor.py	/^                                           "histograms")$/;"	v	class:CommMonitor
burstsServiced	./mem/dram_ctrl.hh	/^        unsigned int burstsServiced;$/;"	m	class:DRAMCtrl::BurstHelper
bus	./dev/net/etherbus.hh	/^        EtherBus *bus;$/;"	m	class:EtherBus::DoneEvent
bus	./dev/pci/types.hh	/^    uint8_t bus;$/;"	m	struct:PciBusAddr
busAddr	./dev/pci/device.hh	/^    const PciBusAddr &busAddr() const { return _busAddr; }$/;"	f	class:PciDevice
busAddr	./dev/pci/host.hh	/^        const PciBusAddr busAddr;$/;"	m	class:PciHost::DeviceInterface
busBusyUntil	./mem/dram_ctrl.hh	/^    Tick busBusyUntil;$/;"	m	class:DRAMCtrl
busID	./arch/x86/bios/intelmp.hh	/^    uint8_t busID;$/;"	m	class:X86ISA::IntelMP::AddrSpaceMapping
busID	./arch/x86/bios/intelmp.hh	/^    uint8_t busID;$/;"	m	class:X86ISA::IntelMP::Bus
busID	./arch/x86/bios/intelmp.hh	/^    uint8_t busID;$/;"	m	class:X86ISA::IntelMP::BusHierarchy
busID	./arch/x86/bios/intelmp.hh	/^    uint8_t busID;$/;"	m	class:X86ISA::IntelMP::CompatAddrSpaceMod
busState	./mem/dram_ctrl.hh	/^    BusState busState;$/;"	m	class:DRAMCtrl
busType	./arch/x86/bios/intelmp.hh	/^    std::string busType;$/;"	m	class:X86ISA::IntelMP::Bus
busUtil	./mem/dram_ctrl.hh	/^    Stats::Formula busUtil;$/;"	m	class:DRAMCtrl
busUtilRead	./mem/dram_ctrl.hh	/^    Stats::Formula busUtilRead;$/;"	m	class:DRAMCtrl
busUtilWrite	./mem/dram_ctrl.hh	/^    Stats::Formula busUtilWrite;$/;"	m	class:DRAMCtrl
bus_id	./arch/x86/bios/IntelMP.py	/^    bus_id = Param.UInt8(0, 'bus id assigned by the bios')$/;"	v	class:X86IntelMPBus
bus_id	./arch/x86/bios/IntelMP.py	/^    bus_id = Param.UInt8(0, 'id of the bus being described')$/;"	v	class:X86IntelMPBusHierarchy
bus_id	./arch/x86/bios/IntelMP.py	/^    bus_id = Param.UInt8(0, 'id of the bus being described')$/;"	v	class:X86IntelMPCompatAddrSpaceMod
bus_id	./arch/x86/bios/IntelMP.py	/^    bus_id = Param.UInt8(0, 'id of the bus the address space is mapped to')$/;"	v	class:X86IntelMPAddrSpaceMapping
bus_options	./dev/arm/hdlcd.hh	/^    BusOptsReg bus_options;         \/**< Bus options register *\/$/;"	m	class:HDLcd
bus_type	./arch/x86/bios/IntelMP.py	/^    bus_type = Param.String("", 'string that identify the bus type')$/;"	v	class:X86IntelMPBus
busy	./dev/net/dist_etherlink.hh	/^        bool busy() const { return (bool)packet; }$/;"	f	class:DistEtherLink::Link
busy	./dev/net/etherbus.hh	/^    bool busy() const { return (bool)packet; }$/;"	f	class:EtherBus
busy	./dev/net/etherlink.hh	/^        bool busy() const { return (bool)packet; }$/;"	f	class:EtherLink::Link
busy	./dev/pci/copy_engine.hh	/^        bool busy;$/;"	m	class:CopyEngine::CopyEngineChannel
busy	./dev/sparc/iob.hh	/^        bool busy;$/;"	m	struct:Iob::IntBusy
busy	./mem/ruby/system/DMASequencer.hh	/^    bool busy() { return m_is_busy;}$/;"	f	class:DMASequencer
busyBanks	./mem/ruby/structures/BankedArray.hh	/^    std::vector<AccessRecord> busyBanks;$/;"	m	class:BankedArray
button_mask	./base/vnc/vncinput.hh	/^        uint8_t button_mask;$/;"	m	struct:VncInput::PointerEventMessage
bwInstRead	./mem/abstract_mem.hh	/^    Stats::Formula bwInstRead;$/;"	m	class:AbstractMemory
bwRead	./mem/abstract_mem.hh	/^    Stats::Formula bwRead;$/;"	m	class:AbstractMemory
bwTotal	./mem/abstract_mem.hh	/^    Stats::Formula bwTotal;$/;"	m	class:AbstractMemory
bwWrite	./mem/abstract_mem.hh	/^    Stats::Formula bwWrite;$/;"	m	class:AbstractMemory
bypassCaches	./sim/system.hh	/^    bool bypassCaches() const {$/;"	f	class:System
byte5	./unittest/bituniontest.cc	/^    Bitfield<39, 32> byte5;$/;"	m	namespace:__anon1	file:
byte5RO	./unittest/bituniontest.cc	/^    BitfieldRO<39, 32> byte5RO;$/;"	m	namespace:__anon1	file:
byte5WO	./unittest/bituniontest.cc	/^    BitfieldWO<39, 32> byte5WO;$/;"	m	namespace:__anon1	file:
byte6Signed	./unittest/bituniontest.cc	/^    SignedBitfield<47, 40> byte6Signed;$/;"	m	namespace:__anon1	file:
byte6SignedRO	./unittest/bituniontest.cc	/^    SignedBitfieldRO<47, 40> byte6SignedRO;$/;"	m	namespace:__anon1	file:
byte6SignedWO	./unittest/bituniontest.cc	/^    SignedBitfieldWO<47, 40> byte6SignedWO;$/;"	m	namespace:__anon1	file:
byteCount	./dev/storage/ide_disk.hh	/^    uint16_t byteCount;$/;"	m	struct:PrdEntry
byteMask	./arch/arm/insts/misc.hh	/^    uint8_t byteMask;$/;"	m	class:MsrBase
byte_order	./base/framebuffer.hh	/^    ByteOrder byte_order;$/;"	m	class:PixelConverter
byte_trackers	./mem/mem_checker.hh	/^    std::unordered_map<Addr, ByteTracker> byte_trackers;$/;"	m	class:MemChecker
bytes	./base/inet.hh	/^    const uint8_t *bytes() const { return &data[0]; }$/;"	f	struct:Net::EthAddr
bytes	./base/inet.hh	/^    const uint8_t *bytes() const { return (const uint8_t *)this; }$/;"	f	struct:Net::EthHdr
bytes	./base/inet.hh	/^    const uint8_t *bytes() const { return (const uint8_t *)this; }$/;"	f	struct:Net::Ip6Hdr
bytes	./base/inet.hh	/^    const uint8_t *bytes() const { return (const uint8_t *)this; }$/;"	f	struct:Net::IpHdr
bytes	./base/inet.hh	/^    const uint8_t *bytes() const { return (const uint8_t *)this; }$/;"	f	struct:Net::TcpHdr
bytes	./base/inet.hh	/^    const uint8_t *bytes() const { return (const uint8_t *)this; }$/;"	f	struct:Net::TcpOpt
bytes	./base/inet.hh	/^    const uint8_t *bytes() const { return (const uint8_t *)this; }$/;"	f	struct:Net::UdpHdr
bytes	./base/inet.hh	/^    uint8_t *bytes() { return &data[0]; }$/;"	f	struct:Net::EthAddr
bytes	./base/inet.hh	/^    uint8_t *bytes() { return (uint8_t *)this; }$/;"	f	struct:Net::EthHdr
bytes	./base/inet.hh	/^    uint8_t *bytes() { return (uint8_t *)this; }$/;"	f	struct:Net::Ip6Hdr
bytes	./base/inet.hh	/^    uint8_t *bytes() { return (uint8_t *)this; }$/;"	f	struct:Net::IpHdr
bytes	./base/inet.hh	/^    uint8_t *bytes() { return (uint8_t *)this; }$/;"	f	struct:Net::TcpHdr
bytes	./base/inet.hh	/^    uint8_t *bytes() { return (uint8_t *)this; }$/;"	f	struct:Net::TcpOpt
bytes	./base/inet.hh	/^    uint8_t *bytes() { return (uint8_t *)this; }$/;"	f	struct:Net::UdpHdr
bytesAccessed	./mem/dram_ctrl.hh	/^        uint32_t bytesAccessed;$/;"	m	class:DRAMCtrl::Bank
bytesCopied	./dev/net/i8254xGBe.hh	/^        unsigned bytesCopied;$/;"	m	class:IGbE::RxDescCache
bytesCopied	./dev/pci/copy_engine.hh	/^    Stats::Vector bytesCopied;$/;"	m	class:CopyEngine
bytesInstRead	./mem/abstract_mem.hh	/^    Stats::Vector bytesInstRead;$/;"	m	class:AbstractMemory
bytesPerActivate	./mem/dram_ctrl.hh	/^    Stats::Histogram bytesPerActivate;$/;"	m	class:DRAMCtrl
bytesPerPixel	./dev/arm/pl111.hh	/^    uint8_t bytesPerPixel;$/;"	m	class:Pl111
bytesRead	./mem/abstract_mem.hh	/^    Stats::Vector bytesRead;$/;"	m	class:AbstractMemory
bytesReadDRAM	./mem/dram_ctrl.hh	/^    Stats::Scalar bytesReadDRAM;$/;"	m	class:DRAMCtrl
bytesReadSys	./mem/dram_ctrl.hh	/^    Stats::Scalar bytesReadSys;$/;"	m	class:DRAMCtrl
bytesReadWrQ	./mem/dram_ctrl.hh	/^    Stats::Scalar bytesReadWrQ;$/;"	m	class:DRAMCtrl
bytesSummed	./kern/tru64/mbuf.hh	/^    int32_t     bytesSummed;    \/\/ 0x3C$/;"	m	struct:tru64::m_ext
bytesValid	./mem/packet.hh	/^    std::vector<bool> bytesValid;$/;"	m	class:Packet
bytesWritten	./mem/abstract_mem.hh	/^    Stats::Vector bytesWritten;$/;"	m	class:AbstractMemory
bytesWritten	./mem/dram_ctrl.hh	/^    Stats::Scalar bytesWritten;$/;"	m	class:DRAMCtrl
bytesWrittenSys	./mem/dram_ctrl.hh	/^    Stats::Scalar bytesWrittenSys;$/;"	m	class:DRAMCtrl
bytes_completed	./mem/ruby/system/DMASequencer.hh	/^    int bytes_completed;$/;"	m	struct:DMARequest
bytes_issued	./mem/ruby/system/DMASequencer.hh	/^    int bytes_issued;$/;"	m	struct:DMARequest
bytes_per_pixel	./dev/arm/hdlcd.hh	/^        Bitfield<4,3>  bytes_per_pixel;$/;"	m	class:HDLcd
c	./arch/arm/miscregs.hh	/^        Bitfield<29> c;$/;"	m	namespace:ArmISA
c	./arch/arm/miscregs.hh	/^        Bitfield<2>    c;       \/\/ Cache enable$/;"	m	namespace:ArmISA
c	./arch/arm/pmu.hh	/^        Bitfield<2> c;$/;"	m	class:ArmISA::PMU
c	./arch/mips/pra_constants.hh	/^    Bitfield<5,  3>  c;     \/\/ Coherency attribute$/;"	m	namespace:MipsISA
c	./arch/power/miscregs.hh	/^        Bitfield<16> c;$/;"	m	namespace:PowerISA
c	./arch/x86/regs/misc.hh	/^            Bitfield<42> c; \/\/ Conforming$/;"	m	namespace:X86ISA
c	./base/types.hh	/^    uint64_t c;$/;"	m	class:Cycles
c0_config	./arch/sparc/tlb.hh	/^    uint64_t c0_config;$/;"	m	class:SparcISA::TLB
c0_tsb_ps0	./arch/sparc/tlb.hh	/^    uint64_t c0_tsb_ps0;$/;"	m	class:SparcISA::TLB
c0_tsb_ps1	./arch/sparc/tlb.hh	/^    uint64_t c0_tsb_ps1;$/;"	m	class:SparcISA::TLB
c2	./arch/mips/pra_constants.hh	/^    Bitfield<6>      c2;$/;"	m	namespace:MipsISA
cAuxMax	./base/loader/coff_sym.h	374;"	d
cSwap	./arch/arm/insts/static_inst.hh	/^    cSwap(T val, bool big)$/;"	f	class:ArmISA::ArmStaticInst
ca	./arch/mips/pra_constants.hh	/^    Bitfield<2>      ca;$/;"	m	namespace:MipsISA
ca	./arch/power/miscregs.hh	/^    Bitfield<29> ca;$/;"	m	namespace:PowerISA
cache	./mem/cache/cache.hh	/^        Cache &cache;$/;"	m	class:Cache::CacheReqPacketQueue
cache	./mem/cache/cache.hh	/^        Cache *cache;$/;"	m	class:Cache::CpuSidePort
cache	./mem/cache/cache.hh	/^        Cache *cache;$/;"	m	class:Cache::MemSidePort
cache	./mem/cache/cache.hh	/^    Cache &cache;$/;"	m	class:CacheBlkVisitorWrapper
cache	./mem/cache/prefetch/base.hh	/^    BaseCache* cache;$/;"	m	class:BasePrefetcher
cache	./mem/cache/tags/base.hh	/^    BaseCache *cache;$/;"	m	class:BaseTags
cacheAsi	./arch/sparc/tlb.hh	/^    ASI cacheAsi[2];$/;"	m	class:SparcISA::TLB
cacheAvail	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::cacheAvail(Addr address) const$/;"	f	class:CacheMemory
cacheAvail	./mem/ruby/structures/PerfectCacheMemory.hh	/^PerfectCacheMemory<ENTRY>::cacheAvail(Addr address) const$/;"	f	class:PerfectCacheMemory
cacheBlkSize	./cpu/o3/fetch.hh	/^    unsigned int cacheBlkSize;$/;"	m	class:DefaultFetch
cacheBlockMask	./cpu/minor/lsq.hh	/^    Addr cacheBlockMask;$/;"	m	class:Minor::LSQ
cacheBlockMask	./cpu/o3/lsq_unit.hh	/^    Addr cacheBlockMask;$/;"	m	class:LSQUnit
cacheBlockMask	./cpu/simple/atomic.hh	/^        Addr cacheBlockMask;$/;"	m	class:AtomicSimpleCPU::AtomicCPUDPort
cacheBlockMask	./cpu/simple/timing.hh	/^        Addr cacheBlockMask;$/;"	m	class:TimingSimpleCPU::DcachePort
cacheBlockSize	./dev/dma_device.hh	/^    unsigned int cacheBlockSize() const { return sys->cacheLineSize(); }$/;"	f	class:DmaDevice
cacheBlocked	./cpu/o3/fetch.hh	/^    bool cacheBlocked;$/;"	m	class:DefaultFetch
cacheBlocked	./cpu/o3/lsq_unit.hh	/^        bool cacheBlocked;$/;"	m	class:LSQUnit::LSQSenderState
cacheBoundaries	./mem/cache/tags/fa_lru.hh	/^    FALRUBlk **cacheBoundaries;$/;"	m	class:FALRU
cacheCopies	./mem/cache/base.hh	/^    Stats::Scalar cacheCopies;$/;"	m	class:BaseCache
cacheElement	./mem/page_table.hh	/^    struct cacheElement {$/;"	s	class:PageTableBase
cacheEntry	./arch/sparc/tlb.hh	/^    TlbEntry *cacheEntry[2];$/;"	m	class:SparcISA::TLB
cacheLineSize	./cpu/base.hh	/^    inline unsigned int cacheLineSize() const { return _cacheLineSize; }$/;"	f	class:BaseCPU
cacheLineSize	./dev/pci/pcireg.h	/^        uint8_t cacheLineSize;$/;"	m	struct:PCIConfig::__anon26
cacheLineSize	./sim/system.hh	/^    unsigned int cacheLineSize() const { return _cacheLineSize; }$/;"	f	class:System
cacheMask	./mem/cache/tags/fa_lru.hh	/^    int cacheMask;$/;"	m	class:FALRU
cachePnt	./dev/net/i8254xGBe.hh	/^        int cachePnt;$/;"	m	class:IGbE::DescCache
cachePort	./cpu/testers/networktest/networktest.hh	/^    CpuPort cachePort;$/;"	m	class:NetworkTest
cachePorts	./cpu/o3/O3CPU.py	/^    cachePorts = Param.Unsigned(200, "Cache Ports")$/;"	v	class:DerivO3CPU
cachePorts	./cpu/o3/lsq_unit.hh	/^    int cachePorts;$/;"	m	class:LSQUnit
cacheProbe	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::cacheProbe(Addr address) const$/;"	f	class:CacheMemory
cacheProbe	./mem/ruby/structures/PerfectCacheMemory.hh	/^PerfectCacheMemory<ENTRY>::cacheProbe(Addr newAddress) const$/;"	f	class:PerfectCacheMemory
cacheResponding	./mem/packet.hh	/^    bool cacheResponding() const { return flags.isSet(CACHE_RESPONDING); }$/;"	f	class:Packet
cacheSnoop	./mem/cache/prefetch/queued.hh	/^    const bool cacheSnoop;$/;"	m	class:QueuedPrefetcher
cacheState	./arch/sparc/tlb.hh	/^    uint64_t cacheState;$/;"	m	class:SparcISA::TLB
cacheUnblocked	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::cacheUnblocked()$/;"	f	class:DefaultIEW
cacheUnblocked	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::cacheUnblocked()$/;"	f	class:InstructionQueue
cacheValid	./arch/sparc/tlb.hh	/^    bool cacheValid;$/;"	m	class:SparcISA::TLB
cache_line_size	./sim/System.py	/^    cache_line_size = Param.Unsigned(64, "Cache line size in bytes")$/;"	v
cache_snoop	./mem/cache/prefetch/Prefetcher.py	/^    cache_snoop = Param.Bool(False, "Snoop cache to eliminate redundant request")$/;"	v	class:QueuedPrefetcher
cachedDisassembly	./cpu/static_inst.hh	/^    mutable std::string *cachedDisassembly;$/;"	m	class:StaticInst
cachedLocations	./mem/snoop_filter.hh	/^    SnoopFilterCache cachedLocations;$/;"	m	class:SnoopFilter
cachedMsrIntersection	./cpu/kvm/x86_cpu.hh	/^    mutable Kvm::MSRIndexVector cachedMsrIntersection;$/;"	m	class:X86KvmCPU
cachedPC	./arch/power/insts/branch.hh	/^    mutable Addr cachedPC;$/;"	m	class:PowerISA::PCDependentDisassembly
cachedSymtab	./arch/power/insts/branch.hh	/^    mutable const SymbolTable *cachedSymtab;$/;"	m	class:PowerISA::PCDependentDisassembly
cacheep	./arch/mips/dt_constants.hh	/^    Bitfield<22>     cacheep;$/;"	m	namespace:MipsISA
cachingPage	./dev/arm/ufs_device.cc	/^const unsigned int UFSHostDevice::UFSSCSIDevice::cachingPage[5] =$/;"	m	class:UFSHostDevice::UFSSCSIDevice	file:
cachingPage	./dev/arm/ufs_device.hh	/^        static const unsigned int cachingPage[5];$/;"	m	class:UFSHostDevice::UFSSCSIDevice
calc	./mem/probes/stack_dist.hh	/^    StackDistCalc calc;$/;"	m	class:StackDistProbe
calcEA	./cpu/o3/dyn_inst.hh	/^    Fault calcEA()$/;"	f	class:BaseO3DynInst
calcFreeIQEntries	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::calcFreeIQEntries(ThreadID tid)$/;"	f	class:DefaultRename
calcFreeLQEntries	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::calcFreeLQEntries(ThreadID tid)$/;"	f	class:DefaultRename
calcFreeROBEntries	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::calcFreeROBEntries(ThreadID tid)$/;"	f	class:DefaultRename
calcFreeSQEntries	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::calcFreeSQEntries(ThreadID tid)$/;"	f	class:DefaultRename
calcIndex	./cpu/o3/store_set.hh	/^    inline int calcIndex(Addr PC)$/;"	f	class:StoreSet
calcLocHistIdx	./cpu/pred/tournament.cc	/^TournamentBP::calcLocHistIdx(Addr &branch_addr)$/;"	f	class:TournamentBP
calcPacketTiming	./mem/xbar.cc	/^BaseXBar::calcPacketTiming(PacketPtr pkt, Tick header_delay)$/;"	f	class:BaseXBar
calcPciConfigAddr	./dev/mips/malta.hh	/^    calcPciConfigAddr(int bus, int dev, int func)$/;"	f	class:Malta
calcPciConfigAddr	./dev/sparc/t1000.cc	/^T1000::calcPciConfigAddr(int bus, int dev, int func)$/;"	f	class:T1000
calcPciIOAddr	./dev/mips/malta.hh	/^    calcPciIOAddr(Addr addr)$/;"	f	class:Malta
calcPciIOAddr	./dev/sparc/t1000.cc	/^T1000::calcPciIOAddr(Addr addr)$/;"	f	class:T1000
calcPciMemAddr	./dev/mips/malta.hh	/^    calcPciMemAddr(Addr addr)$/;"	f	class:Malta
calcPciMemAddr	./dev/sparc/t1000.cc	/^T1000::calcPciMemAddr(Addr addr)$/;"	f	class:T1000
calcReceiveTick	./dev/net/dist_iface.cc	/^DistIface::RecvScheduler::calcReceiveTick(Tick send_tick,$/;"	f	class:DistIface::RecvScheduler
calcResolution	./cpu/kvm/timer.cc	/^PerfKvmTimer::calcResolution()$/;"	f	class:PerfKvmTimer
calcResolution	./cpu/kvm/timer.cc	/^PosixKvmTimer::calcResolution()$/;"	f	class:PosixKvmTimer
calcSSID	./cpu/o3/store_set.hh	/^    inline SSID calcSSID(Addr PC)$/;"	f	class:StoreSet
calcStackDist	./mem/stack_dist_calc.cc	/^StackDistCalc::calcStackDist(const Addr r_address, bool mark)$/;"	f	class:StackDistCalc
calcStackDistAndUpdate	./mem/stack_dist_calc.cc	/^StackDistCalc::calcStackDistAndUpdate(const Addr r_address, bool addNewNode)$/;"	f	class:StackDistCalc
calculatePrefetch	./mem/cache/prefetch/stride.cc	/^StridePrefetcher::calculatePrefetch(const PacketPtr &pkt,$/;"	f	class:StridePrefetcher
calculatePrefetch	./mem/cache/prefetch/tagged.cc	/^TaggedPrefetcher::calculatePrefetch(const PacketPtr &pkt,$/;"	f	class:TaggedPrefetcher
calculateVC	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.cc	/^NetworkInterface_d::calculateVC(int vnet)$/;"	f	class:NetworkInterface_d
calculateVC	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.cc	/^NetworkInterface::calculateVC(int vnet)$/;"	f	class:NetworkInterface
calculateVectorIndex	./cpu/timebuf.hh	/^    inline int calculateVectorIndex(int idx) const$/;"	f	class:TimeBuffer
call_sw_alloc	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^Router_d::call_sw_alloc()$/;"	f	class:Router_d
call_switch	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^Router_d::call_switch()$/;"	f	class:Router_d
callbackDataAvail	./dev/uart.hh	/^    MakeCallback<Uart, &Uart::dataAvailable> callbackDataAvail;$/;"	m	class:Uart
callbackDataAvail	./dev/virtio/console.hh	/^                 &VirtIOConsole::TermRecvQueue::trySend> callbackDataAvail;$/;"	m	class:VirtIOConsole
callbackKick	./dev/virtio/pci.hh	/^    MakeCallback<PciVirtIO, &PciVirtIO::kick> callbackKick;$/;"	m	class:PciVirtIO
callbacks	./base/callback.hh	/^    queue callbacks;$/;"	m	class:CallbackQueue
callpal	./arch/alpha/kernel_stats.cc	/^Statistics::callpal(int code, ThreadContext *tc)$/;"	f	class:AlphaISA::Kernel::Statistics
callsys	./arch/alpha/osfpal.hh	/^        callsys = 0x83,$/;"	e	enum:PAL::__anon50
canAccept	./mem/dramsim2_wrapper.cc	/^DRAMSim2Wrapper::canAccept() const$/;"	f	class:DRAMSim2Wrapper
canCommit	./cpu/o3/rob_impl.hh	/^ROB<Impl>::canCommit()$/;"	f	class:ROB
canEarlyIssue	./cpu/minor/dyn_inst.hh	/^    bool canEarlyIssue;$/;"	m	class:Minor::MinorDynInst
canForwardDataToLoad	./cpu/minor/lsq.cc	/^LSQ::StoreBuffer::canForwardDataToLoad(LSQRequestPtr request,$/;"	f	class:Minor::LSQ::StoreBuffer
canHandleInterrupts	./cpu/o3/commit.hh	/^    bool canHandleInterrupts;$/;"	m	class:DefaultCommit
canInsert	./cpu/minor/func_unit.cc	/^FUPipeline::canInsert() const$/;"	f	class:Minor::FUPipeline
canInsert	./cpu/minor/lsq.cc	/^LSQ::StoreBuffer::canInsert() const$/;"	f	class:Minor::LSQ::StoreBuffer
canInstIssue	./cpu/minor/scoreboard.cc	/^Scoreboard::canInstIssue(MinorDynInstPtr inst,$/;"	f	class:Minor::Scoreboard
canPrefetch	./mem/cache/mshr_queue.hh	/^    bool canPrefetch() const$/;"	f	class:MSHRQueue
canPushIntoStoreBuffer	./cpu/minor/lsq.hh	/^    bool canPushIntoStoreBuffer() const { return storeBuffer.canInsert(); }$/;"	f	class:Minor::LSQ
canReadAArch64SysReg	./arch/arm/miscregs.cc	/^canReadAArch64SysReg(MiscRegIndex reg, SCR scr, CPSR cpsr, ThreadContext *tc)$/;"	f	namespace:ArmISA
canReadCoprocReg	./arch/arm/miscregs.cc	/^canReadCoprocReg(MiscRegIndex reg, SCR scr, CPSR cpsr, ThreadContext *tc)$/;"	f	namespace:ArmISA
canRename	./cpu/o3/rename_map.hh	/^    bool canRename(uint32_t intRegs, uint32_t floatRegs, uint32_t ccRegs) const$/;"	f	class:UnifiedRenameMap
canRequest	./cpu/minor/lsq.hh	/^    bool canRequest() { return requests.unreservedRemainingSpace() != 0; }$/;"	f	class:Minor::LSQ
canReserve	./cpu/minor/buffers.hh	/^    bool canReserve() const { return queue.canReserve(); }$/;"	f	class:Minor::InputBuffer
canReserve	./cpu/minor/buffers.hh	/^    bool canReserve() const { return unreservedRemainingSpace() != 0; }$/;"	f	class:Minor::Queue
canSendToMemorySystem	./cpu/minor/lsq.cc	/^LSQ::canSendToMemorySystem()$/;"	f	class:Minor::LSQ
canWB	./cpu/o3/lsq_unit.hh	/^        bool canWB;$/;"	m	struct:LSQUnit::SQEntry
canWriteAArch64SysReg	./arch/arm/miscregs.cc	/^canWriteAArch64SysReg(MiscRegIndex reg, SCR scr, CPSR cpsr, ThreadContext *tc)$/;"	f	namespace:ArmISA
canWriteCoprocReg	./arch/arm/miscregs.cc	/^canWriteCoprocReg(MiscRegIndex reg, SCR scr, CPSR cpsr, ThreadContext *tc)$/;"	f	namespace:ArmISA
cancel	./dev/dma_device.cc	/^DmaReadFifo::DmaDoneEvent::cancel()$/;"	f	class:DmaReadFifo::DmaDoneEvent
cancel_flags	./kern/tru64/tru64.hh	/^        int cancel_flags;       \/\/!< cancel_flags$/;"	m	struct:Tru64::nxm_thread_attr
cancel_state	./kern/tru64/tru64.hh	/^        int             cancel_state;   \/\/!< thread's cancelation state$/;"	m	struct:Tru64::ushared_state
canceled	./dev/dma_device.hh	/^        bool canceled() const { return _canceled; }$/;"	f	class:DmaReadFifo::DmaDoneEvent
cantForwardFromFUIndices	./cpu/minor/MinorCPU.py	/^    cantForwardFromFUIndices = VectorParam.Unsigned([],$/;"	v	class:MinorFU
cantForwardFromFUIndices	./cpu/minor/func_unit.hh	/^    std::vector<bool> cantForwardFromFUIndices;$/;"	m	class:Minor::FUPipeline
cantForwardFromFUIndices	./cpu/minor/func_unit.hh	/^    std::vector<unsigned int> cantForwardFromFUIndices;$/;"	m	class:MinorFU
capCoalescedMMIO	./cpu/kvm/vm.cc	/^Kvm::capCoalescedMMIO() const$/;"	f	class:Kvm
capDebugRegs	./cpu/kvm/vm.cc	/^Kvm::capDebugRegs() const$/;"	f	class:Kvm
capExtendedCPUID	./cpu/kvm/vm.cc	/^Kvm::capExtendedCPUID() const$/;"	f	class:Kvm
capIRQChip	./cpu/kvm/vm.cc	/^Kvm::capIRQChip() const$/;"	f	class:Kvm
capNumMemSlots	./cpu/kvm/vm.cc	/^Kvm::capNumMemSlots() const$/;"	f	class:Kvm
capOneReg	./cpu/kvm/vm.cc	/^Kvm::capOneReg() const$/;"	f	class:Kvm
capSetTSSAddress	./cpu/kvm/vm.cc	/^Kvm::capSetTSSAddress() const$/;"	f	class:Kvm
capUserMemory	./cpu/kvm/vm.cc	/^Kvm::capUserMemory() const$/;"	f	class:Kvm
capUserNMI	./cpu/kvm/vm.cc	/^Kvm::capUserNMI() const$/;"	f	class:Kvm
capVCPUEvents	./cpu/kvm/vm.cc	/^Kvm::capVCPUEvents() const$/;"	f	class:Kvm
capXCRs	./cpu/kvm/vm.cc	/^Kvm::capXCRs() const$/;"	f	class:Kvm
capXSave	./cpu/kvm/vm.cc	/^Kvm::capXSave() const$/;"	f	class:Kvm
cap_string	./python/m5/util/terminal.py	/^    def cap_string(s, *args):$/;"	f	function:null_cap_string
capabilities	./cpu/func_unit.cc	/^FuncUnit::capabilities()$/;"	f	class:FuncUnit
capabilityList	./cpu/func_unit.hh	/^    std::bitset<Num_OpClasses> capabilityList;$/;"	m	class:FuncUnit
capabilityList	./cpu/minor/func_unit.hh	/^    std::bitset<Num_OpClasses> capabilityList;$/;"	m	class:Minor::FUPipeline
capabilityList	./cpu/minor/func_unit.hh	/^    std::vector<bool> capabilityList;$/;"	m	class:MinorOpClassSet
capabilityList	./cpu/o3/fu_pool.hh	/^    std::bitset<Num_OpClasses> capabilityList;$/;"	m	class:FUPool
capabilityPtr	./dev/pci/pcireg.h	/^        uint8_t capabilityPtr;$/;"	m	struct:PCIConfig::__anon26
capability_map	./python/m5/util/terminal.py	/^capability_map = {$/;"	v
capability_names	./python/m5/util/terminal.py	/^capability_names = capability_map.keys()$/;"	v
capacity	./base/circlebuf.hh	/^    size_t capacity() const { return buf.capacity(); }$/;"	f	class:Fifo
capacity	./base/circlebuf.hh	/^    size_t capacity() const { return buf.size(); }$/;"	f	class:CircleBuf
capacity	./cpu/minor/buffers.hh	/^    unsigned int capacity;$/;"	m	class:Minor::Queue
capacity	./dev/virtio/block.hh	/^        uint64_t capacity;$/;"	m	struct:VirtIOBlock::Config
capacityLower	./dev/arm/ufs_device.hh	/^        const uint32_t capacityLower;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
capacityUpper	./dev/arm/ufs_device.hh	/^        const uint32_t capacityUpper;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
caplen	./dev/net/etherdump.cc	/^    uint32_t caplen;            \/\/ length of portion present$/;"	m	struct:pcap_pkthdr	file:
captureBitmap	./base/vnc/vncinput.hh	/^    std::unique_ptr<Bitmap> captureBitmap;$/;"	m	class:VncInput
captureCurrentFrame	./base/vnc/vncinput.hh	/^    int captureCurrentFrame;$/;"	m	class:VncInput
captureEnabled	./base/vnc/vncinput.hh	/^    bool captureEnabled;$/;"	m	class:VncInput
captureFrameBuffer	./base/vnc/vncinput.cc	/^VncInput::captureFrameBuffer()$/;"	f	class:VncInput
captureLastHash	./base/vnc/vncinput.hh	/^    uint64_t captureLastHash;$/;"	m	class:VncInput
captureOutputDirectory	./base/vnc/vncinput.hh	/^    std::string captureOutputDirectory;$/;"	m	class:VncInput
cardbusCIS	./dev/pci/pcireg.h	/^        uint32_t cardbusCIS;$/;"	m	struct:PCIConfig::__anon26
cascadeBits	./dev/x86/i8259.hh	/^    uint8_t cascadeBits;$/;"	m	class:X86ISA::I8259
cascadeMode	./dev/x86/i8259.hh	/^    bool cascadeMode;$/;"	m	class:X86ISA::I8259
categories	./arch/x86/isa/insts/__init__.py	/^categories = ["romutil",$/;"	v
categories	./arch/x86/isa/insts/general_purpose/__init__.py	/^categories = ["arithmetic",$/;"	v
categories	./arch/x86/isa/insts/general_purpose/arithmetic/__init__.py	/^categories = ["add_and_subtract",$/;"	v
categories	./arch/x86/isa/insts/general_purpose/compare_and_test/__init__.py	/^categories = ["bit_scan",$/;"	v
categories	./arch/x86/isa/insts/general_purpose/control_transfer/__init__.py	/^categories = ["call",$/;"	v
categories	./arch/x86/isa/insts/general_purpose/data_conversion/__init__.py	/^categories = ["ascii_adjust",$/;"	v
categories	./arch/x86/isa/insts/general_purpose/data_transfer/__init__.py	/^categories = ["conditional_move",$/;"	v
categories	./arch/x86/isa/insts/general_purpose/flags/__init__.py	/^categories = ["load_and_store",$/;"	v
categories	./arch/x86/isa/insts/general_purpose/input_output/__init__.py	/^categories = ["general_io",$/;"	v
categories	./arch/x86/isa/insts/general_purpose/rotate_and_shift/__init__.py	/^categories = ["rotate",$/;"	v
categories	./arch/x86/isa/insts/general_purpose/string/__init__.py	/^categories = ["compare_strings",$/;"	v
categories	./arch/x86/isa/insts/simd128/__init__.py	/^categories = ["integer",$/;"	v
categories	./arch/x86/isa/insts/simd128/floating_point/__init__.py	/^categories = ["data_transfer",$/;"	v
categories	./arch/x86/isa/insts/simd128/floating_point/arithmetic/__init__.py	/^categories = ["addition",$/;"	v
categories	./arch/x86/isa/insts/simd128/floating_point/compare/__init__.py	/^categories = ["compare_and_write_mask",$/;"	v
categories	./arch/x86/isa/insts/simd128/floating_point/data_conversion/__init__.py	/^categories = ["convert_floating_point_to_floating_point",$/;"	v
categories	./arch/x86/isa/insts/simd128/floating_point/data_reordering/__init__.py	/^categories = ["unpack_and_interleave",$/;"	v
categories	./arch/x86/isa/insts/simd128/floating_point/data_transfer/__init__.py	/^categories = ["move",$/;"	v
categories	./arch/x86/isa/insts/simd128/floating_point/logical/__init__.py	/^categories = ["andp",$/;"	v
categories	./arch/x86/isa/insts/simd128/integer/__init__.py	/^categories = ["data_transfer",$/;"	v
categories	./arch/x86/isa/insts/simd128/integer/arithmetic/__init__.py	/^categories = ["addition",$/;"	v
categories	./arch/x86/isa/insts/simd128/integer/compare/__init__.py	/^categories = ["compare_and_write_mask",$/;"	v
categories	./arch/x86/isa/insts/simd128/integer/data_conversion/__init__.py	/^categories = ["convert_integer_to_floating_point",$/;"	v
categories	./arch/x86/isa/insts/simd128/integer/data_reordering/__init__.py	/^categories = ["pack_with_saturation",$/;"	v
categories	./arch/x86/isa/insts/simd128/integer/data_transfer/__init__.py	/^categories = ["move",$/;"	v
categories	./arch/x86/isa/insts/simd128/integer/logical/__init__.py	/^categories = ["pand",$/;"	v
categories	./arch/x86/isa/insts/simd128/integer/save_and_restore_state/__init__.py	/^categories = ["save_and_restore_state",$/;"	v
categories	./arch/x86/isa/insts/simd128/integer/shift/__init__.py	/^categories = ["left_logical_shift",$/;"	v
categories	./arch/x86/isa/insts/simd64/__init__.py	/^categories = ["integer",$/;"	v
categories	./arch/x86/isa/insts/simd64/floating_point/__init__.py	/^categories = ["data_conversion",$/;"	v
categories	./arch/x86/isa/insts/simd64/floating_point/arithmetic/__init__.py	/^categories = ["addition",$/;"	v
categories	./arch/x86/isa/insts/simd64/floating_point/compare/__init__.py	/^categories = ["compare_and_write_mask",$/;"	v
categories	./arch/x86/isa/insts/simd64/integer/__init__.py	/^categories = ["exit_media_state",$/;"	v
categories	./arch/x86/isa/insts/simd64/integer/arithmetic/__init__.py	/^categories = ["addition",$/;"	v
categories	./arch/x86/isa/insts/simd64/integer/compare/__init__.py	/^categories = ["compare_and_write_mask",$/;"	v
categories	./arch/x86/isa/insts/simd64/integer/data_reordering/__init__.py	/^categories = ["pack_with_saturation",$/;"	v
categories	./arch/x86/isa/insts/simd64/integer/data_transfer/__init__.py	/^categories = ["move",$/;"	v
categories	./arch/x86/isa/insts/simd64/integer/logical/__init__.py	/^categories = ["pand",$/;"	v
categories	./arch/x86/isa/insts/simd64/integer/shift/__init__.py	/^categories = ["left_logical_shift",$/;"	v
categories	./arch/x86/isa/insts/system/__init__.py	/^categories = ["control_registers",$/;"	v
categories	./arch/x86/isa/insts/x87/__init__.py	/^categories = ["data_transfer_and_conversion",$/;"	v
categories	./arch/x86/isa/insts/x87/arithmetic/__init__.py	/^categories = ["addition",$/;"	v
categories	./arch/x86/isa/insts/x87/compare_and_test/__init__.py	/^categories = ["floating_point_ordered_compare",$/;"	v
categories	./arch/x86/isa/insts/x87/control/__init__.py	/^categories = ["initialize",$/;"	v
categories	./arch/x86/isa/insts/x87/data_transfer_and_conversion/__init__.py	/^categories = ["load_or_store_floating_point",$/;"	v
categories	./arch/x86/isa/insts/x87/load_constants/__init__.py	/^categories = ["load_0_1_or_pi",$/;"	v
categories	./arch/x86/isa/insts/x87/stack_management/__init__.py	/^categories = ["stack_control",$/;"	v
categories	./arch/x86/isa/insts/x87/transcendental_functions/__init__.py	/^categories = ["trigonometric_functions",$/;"	v
cause	./arch/mips/remote_gdb.hh	/^            uint32_t cause;$/;"	m	struct:MipsISA::RemoteGDB::MipsGdbRegCache::__anon83
cause	./sim/sim_events.hh	/^    std::string cause;  \/\/ string explaining why we're terminating$/;"	m	class:CountedExitEvent
cause	./sim/sim_events.hh	/^    std::string cause;$/;"	m	class:GlobalSimLoopExitEvent
cause	./sim/sim_events.hh	/^    std::string cause;$/;"	m	class:LocalSimLoopExitEvent
caux	./base/loader/coff_sym.h	/^    coff_int    caux;           \/* count of file's auxiliary entries *\/$/;"	m	struct:ecoff_fdr
cbAUXU	./base/loader/coff_sym.h	387;"	d
cbAuxOffset	./base/loader/coff_sym.h	/^    coff_addr   cbAuxOffset;    \/* offset to start of auxillary symbol entries*\/$/;"	m	struct:ecoff_symhdr
cbDNR	./base/loader/coff_sym.h	347;"	d
cbDnOffset	./base/loader/coff_sym.h	/^    coff_addr   cbDnOffset;     \/* offset to start dense number table *\/$/;"	m	struct:ecoff_symhdr
cbEXTR	./base/loader/coff_sym.h	302;"	d
cbExtOffset	./base/loader/coff_sym.h	/^    coff_addr   cbExtOffset;    \/* offset to start of external symbol entries*\/$/;"	m	struct:ecoff_symhdr
cbFDR	./base/loader/coff_sym.h	175;"	d
cbFIT	./base/loader/coff_sym.h	433;"	d
cbFdOffset	./base/loader/coff_sym.h	/^    coff_addr   cbFdOffset;     \/* offset to file descriptor table *\/$/;"	m	struct:ecoff_symhdr
cbHDRR	./base/loader/coff_sym.h	127;"	d
cbLINER	./base/loader/coff_sym.h	258;"	d
cbLine	./base/loader/coff_sym.h	/^    coff_addr   cbLine;         \/* number of bytes for line number entries *\/$/;"	m	struct:ecoff_symhdr
cbLine	./base/loader/coff_sym.h	/^    coff_addr   cbLine;         \/* size of lines for this file *\/$/;"	m	struct:ecoff_fdr
cbLineOffset	./base/loader/coff_sym.h	/^    coff_addr   cbLineOffset;   \/* byte offset for this procedure from the fd base *\/$/;"	m	struct:pdr
cbLineOffset	./base/loader/coff_sym.h	/^    coff_addr   cbLineOffset;   \/* byte offset from header for this file ln's *\/$/;"	m	struct:ecoff_fdr
cbLineOffset	./base/loader/coff_sym.h	/^    coff_addr   cbLineOffset;   \/* offset to start of line number entries*\/$/;"	m	struct:ecoff_symhdr
cbOPTR	./base/loader/coff_sym.h	410;"	d
cbOptOffset	./base/loader/coff_sym.h	/^    coff_addr   cbOptOffset;    \/* offset to optimization symbol entries *\/$/;"	m	struct:ecoff_symhdr
cbPDR	./base/loader/coff_sym.h	214;"	d
cbPdOffset	./base/loader/coff_sym.h	/^    coff_addr   cbPdOffset;     \/* offset to procedure descriptor table *\/$/;"	m	struct:ecoff_symhdr
cbRFDT	./base/loader/coff_sym.h	424;"	d
cbRNDXR	./base/loader/coff_sym.h	337;"	d
cbRfdOffset	./base/loader/coff_sym.h	/^    coff_addr   cbRfdOffset;    \/* offset to relative file descriptor table *\/$/;"	m	struct:ecoff_symhdr
cbSYMR	./base/loader/coff_sym.h	276;"	d
cbSs	./base/loader/coff_sym.h	/^    coff_addr   cbSs;           \/* number of bytes in the ss *\/$/;"	m	struct:ecoff_fdr
cbSsExtOffset	./base/loader/coff_sym.h	/^    coff_addr   cbSsExtOffset;  \/* offset to start of external strings *\/$/;"	m	struct:ecoff_symhdr
cbSsOffset	./base/loader/coff_sym.h	/^    coff_addr   cbSsOffset;     \/* offset to start of local strings *\/$/;"	m	struct:ecoff_symhdr
cbSymOffset	./base/loader/coff_sym.h	/^    coff_addr   cbSymOffset;    \/* offset to start of local symbols*\/$/;"	m	struct:ecoff_symhdr
cbTIR	./base/loader/coff_sym.h	322;"	d
cc	./base/inet.hh	/^    uint32_t cc() const { return ntohl(opt_data.cc); }$/;"	f	struct:Net::TcpOpt
ccConnect	./python/m5/params.py	/^    def ccConnect(self):$/;"	m	class:PortRef
ccConnect	./python/m5/params.py	/^    def ccConnect(self):$/;"	m	class:VectorPortRef
ccFlagMask	./arch/x86/regs/misc.hh	/^    const uint32_t ccFlagMask = PFBit | AFBit | ZFBit | SFBit;$/;"	m	namespace:X86ISA
ccList	./cpu/o3/free_list.hh	/^    SimpleFreeList ccList;$/;"	m	class:UnifiedFreeList
ccMap	./cpu/o3/rename_map.hh	/^    SimpleRenameMap ccMap;$/;"	m	class:UnifiedRenameMap
ccReg	./arch/x86/registers.hh	/^    CCReg ccReg;$/;"	m	union:X86ISA::__anon56
ccRegFile	./cpu/o3/regfile.hh	/^    std::vector<CCReg> ccRegFile;$/;"	m	class:PhysRegFile
ccRegIndex	./arch/arm/ccregs.hh	/^enum ccRegIndex {$/;"	g	namespace:ArmISA
ccRegName	./arch/arm/ccregs.hh	/^const char * const ccRegName[NUM_CCREGS] = {$/;"	m	namespace:ArmISA
ccRegfileReads	./cpu/o3/cpu.hh	/^    Stats::Scalar ccRegfileReads;$/;"	m	class:FullO3CPU
ccRegfileWrites	./cpu/o3/cpu.hh	/^    Stats::Scalar ccRegfileWrites;$/;"	m	class:FullO3CPU
ccRegs	./cpu/simple_thread.hh	/^    TheISA::CCReg ccRegs[TheISA::NumCCRegs];$/;"	m	class:SimpleThread
cchip	./dev/alpha/Tsunami.py	/^    cchip = TsunamiCChip(pio_addr=0x801a0000000)$/;"	v	class:Tsunami
cchip	./dev/alpha/tsunami.hh	/^    TsunamiCChip *cchip;$/;"	m	class:Tsunami
cchip	./dev/mips/Malta.py	/^    cchip = MaltaCChip(pio_addr=0x801a0000000)$/;"	v	class:Malta
cchip	./dev/mips/malta.hh	/^    MaltaCChip *cchip;$/;"	m	class:Malta
ccprintf	./base/cprintf.hh	/^ccprintf(cp::Print &print)$/;"	f
ccprintf	./base/cprintf.hh	/^ccprintf(cp::Print &print, const T &value, const Args &...args)$/;"	f
ccprintf	./base/cprintf.hh	/^ccprintf(std::ostream &stream, const char *format, const Args &...args)$/;"	f
ccprintf	./base/cprintf.hh	/^ccprintf(std::ostream &stream, const std::string &format, const Args &...args)$/;"	f
ccreg	./arch/arm/registers.hh	/^    CCReg    ccreg;$/;"	m	union:ArmISA::__anon66
ccsr	./dev/net/ns_gige.hh	/^    uint32_t    ccsr;$/;"	m	struct:dp_regs
cd	./arch/arm/miscregs.hh	/^        Bitfield<32>     cd;    \/\/ AArch64$/;"	m	namespace:ArmISA
cd	./arch/x86/regs/misc.hh	/^        Bitfield<30> cd; \/\/ Cache Disable$/;"	m	namespace:X86ISA
cdf	./base/stats/info.hh	/^const FlagsType cdf =           0x0040;$/;"	m	namespace:Stats
cdf	./base/stats/text.cc	/^    Result cdf;$/;"	m	struct:Stats::ScalarPrint	file:
cdslxlate	./kern/tru64/tru64_syscalls.hh	/^        cdslxlate = 265,$/;"	e	enum:SystemCalls::__anon102
ce	./arch/mips/pra_constants.hh	/^    Bitfield<29, 28> ce;$/;"	m	namespace:MipsISA
ce	./dev/pci/copy_engine.hh	/^        CopyEngine *ce;$/;"	m	class:CopyEngine::CopyEngineChannel
cePort	./dev/pci/copy_engine.hh	/^        DmaPort cePort;$/;"	m	class:CopyEngine::CopyEngineChannel
ceilLog2	./base/intmath.hh	/^ceilLog2(const T& n)$/;"	f
ceilPow2	./base/intmath.hh	/^ceilPow2(const T& n)$/;"	f
cf	./arch/x86/regs/misc.hh	/^        Bitfield<0> cf; \/\/ Carry Flag$/;"	m	namespace:X86ISA
cf	./arch/x86/regs/misc.hh	/^        Bitfield<0> cf;$/;"	m	namespace:X86ISA
cf_ctrl	./dev/arm/RealView.py	/^    cf_ctrl = IdeController(disks=[], pci_func=0, pci_dev=0, pci_bus=2,$/;"	v	class:VExpress_EMM
cf_ctrl	./dev/arm/RealView.py	/^    cf_ctrl = IdeController(disks=[], pci_func=0, pci_dev=7, pci_bus=2,$/;"	v	class:RealViewPBX
cflush	./arch/alpha/osfpal.hh	/^        cflush = 0x01,$/;"	e	enum:PAL::__anon50
cfofMask	./arch/x86/regs/misc.hh	/^    const uint32_t cfofMask = CFBit | OFBit;$/;"	m	namespace:X86ISA
ch_b	./base/framebuffer.hh	/^    Channel ch_b;$/;"	m	class:PixelConverter
ch_g	./base/framebuffer.hh	/^    Channel ch_g;$/;"	m	class:PixelConverter
ch_r	./base/framebuffer.hh	/^    Channel ch_r;$/;"	m	class:PixelConverter
chainRead	./dev/virtio/base.cc	/^VirtDescriptor::chainRead(size_t offset, uint8_t *dst, size_t size) const$/;"	f	class:VirtDescriptor
chainSize	./dev/virtio/base.cc	/^VirtDescriptor::chainSize() const$/;"	f	class:VirtDescriptor
chainWrite	./dev/virtio/base.cc	/^VirtDescriptor::chainWrite(size_t offset, const uint8_t *src, size_t size)$/;"	f	class:VirtDescriptor
chan	./dev/pci/copy_engine.hh	/^    std::vector<CopyEngineChannel*> chan;$/;"	m	class:CopyEngine
chanCount	./dev/pci/copy_engine_defs.hh	/^    uint8_t chanCount;$/;"	m	struct:CopyEngineReg::Regs
changeAddress	./cpu/testers/rubytest/Check.cc	/^Check::changeAddress(Addr address)$/;"	f	class:Check
changeConfig	./dev/net/sinic.cc	/^Device::changeConfig(uint32_t newconf)$/;"	f	class:Sinic::Device
changeFlag	./base/debug.cc	/^changeFlag(const char *s, bool value)$/;"	f	namespace:Debug
changeMode	./arch/alpha/kernel_stats.cc	/^Statistics::changeMode(cpu_mode newmode, ThreadContext *tc)$/;"	f	class:AlphaISA::Kernel::Statistics
changePermission	./mem/ruby/slicc_interface/AbstractCacheEntry.cc	/^AbstractCacheEntry::changePermission(AccessPermission new_perm)$/;"	f	class:AbstractCacheEntry
changePermission	./mem/ruby/slicc_interface/AbstractEntry.cc	/^AbstractEntry::changePermission(AccessPermission new_perm)$/;"	f	class:AbstractEntry
changePermission	./mem/ruby/structures/PerfectCacheMemory.hh	/^PerfectCacheMemory<ENTRY>::changePermission(Addr address,$/;"	f	class:PerfectCacheMemory
changeStream	./cpu/minor/fetch1.cc	/^Fetch1::changeStream(const BranchData &branch)$/;"	f	class:Minor::Fetch1
change_thread_state	./cpu/simple/base.cc	/^change_thread_state(ThreadID tid, int activate, int priority)$/;"	f
changed	./arch/arm/nativetrace.hh	/^        bool changed[STATE_NUMVALS];$/;"	m	struct:Trace::ArmNativeTrace::ThreadState
changedPC	./cpu/checker/cpu.hh	/^    bool changedPC;$/;"	m	class:CheckerCPU
changedROBEntries	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::changedROBEntries()$/;"	f	class:DefaultCommit
changedROBNumEntries	./cpu/o3/commit.hh	/^    bool changedROBNumEntries[Impl::MaxThreads];$/;"	m	class:DefaultCommit
channelId	./dev/pci/copy_engine.hh	/^        int channelId;$/;"	m	class:CopyEngine::CopyEngineChannel
channelRead	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::channelRead(Packet *pkt, Addr daddr, int size)$/;"	f	class:CopyEngine::CopyEngineChannel
channelWrite	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::channelWrite(Packet *pkt, Addr daddr, int size)$/;"	f	class:CopyEngine::CopyEngineChannel
channel_width	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.py	/^    channel_width = Param.Int(Parent.bandwidth_factor,$/;"	v	class:NetworkLink
channels	./mem/DRAMCtrl.py	/^    channels = Param.Unsigned(1, "Number of channels")$/;"	v	class:DRAMCtrl
channels	./mem/dram_ctrl.hh	/^    const uint32_t channels;$/;"	m	class:DRAMCtrl
character	./base/cprintf_formats.hh	/^    enum { none, string, integer, character, floating } format;$/;"	e	enum:cp::Format::__anon118
characteristicExtBytes	./arch/x86/bios/smbios.hh	/^    uint16_t characteristicExtBytes;$/;"	m	class:X86ISA::SMBios::BiosInformation
characteristic_ext_bytes	./arch/x86/bios/SMBios.py	/^    characteristic_ext_bytes = VectorParam.ExtCharacteristic([],$/;"	v	class:X86SMBiosBiosInformation
characteristics	./arch/x86/bios/SMBios.py	/^    characteristics = VectorParam.Characteristic([],$/;"	v	class:X86SMBiosBiosInformation
characteristics	./arch/x86/bios/smbios.hh	/^    uint64_t characteristics;$/;"	m	class:X86ISA::SMBios::BiosInformation
chatty_assert	./base/misc.hh	245;"	d
chatty_assert	./base/misc.hh	247;"	d
chdir	./kern/tru64/tru64_syscalls.hh	/^        chdir = 12,$/;"	e	enum:SystemCalls::__anon102
check	./arch/arm/nativetrace.cc	/^Trace::ArmNativeTrace::check(NativeTraceRecord *record)$/;"	f	class:Trace::Trace::ArmNativeTrace
check	./arch/sparc/nativetrace.cc	/^Trace::SparcNativeTrace::check(NativeTraceRecord *record)$/;"	f	class:Trace::Trace::SparcNativeTrace
check	./arch/x86/nativetrace.cc	/^X86NativeTrace::check(NativeTraceRecord *record)$/;"	f	class:Trace::X86NativeTrace
check	./base/statistics.hh	/^    bool check() const { return proxy != NULL; }$/;"	f	class:Stats::ValueBase
check	./base/statistics.hh	/^    bool check() const { return s.check(); }$/;"	f	class:Stats::InfoProxy
check	./base/statistics.hh	/^    bool check() const { return true; }$/;"	f	class:Stats::InfoAccess
check	./base/statistics.hh	/^    bool check() const { return true; }$/;"	f	class:Stats::ProxyInfo
check	./base/statistics.hh	/^    check() const$/;"	f	class:Stats::Vector2dBase
check	./base/statistics.hh	/^    check() const$/;"	f	class:Stats::VectorBase
check	./base/statistics.hh	/^    check() const$/;"	f	class:Stats::VectorDistBase
check	./dev/net/pktfifo.hh	/^    void check() const$/;"	f	class:PacketFifo
check	./mem/cache/tags/fa_lru.cc	/^FALRU::check()$/;"	f	class:FALRU
checkAddrSizeFaultAArch64	./arch/arm/table_walker.cc	/^TableWalker::checkAddrSizeFaultAArch64(Addr addr, int currPhysAddrRange)$/;"	f	class:TableWalker
checkAndIssue	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::checkAndIssue(const GraphNode* node_ptr, bool first)$/;"	f	class:TraceCPU::ElasticDataGen
checkAndSchedExitEvent	./cpu/trace/trace_cpu.cc	/^TraceCPU::checkAndSchedExitEvent()$/;"	f	class:TraceCPU
checkArguments	./mem/slicc/symbols/Func.py	/^    def checkArguments(self, args):$/;"	m	class:Func
checkBpLen	./arch/x86/remote_gdb.hh	/^    bool checkBpLen(size_t len) { return len == 1; }$/;"	f	class:X86ISA::RemoteGDB
checkBpLen	./base/remote_gdb.cc	/^BaseRemoteGDB::checkBpLen(size_t len)$/;"	f	class:BaseRemoteGDB
checkCacheability	./arch/alpha/tlb.cc	/^TLB::checkCacheability(RequestPtr &req, bool itb)$/;"	f	class:AlphaISA::TLB
checkCacheability	./arch/mips/tlb.cc	/^TLB::checkCacheability(RequestPtr &req)$/;"	f	class:TLB
checkCacheability	./arch/power/tlb.cc	/^TLB::checkCacheability(RequestPtr &req)$/;"	f	class:TLB
checkClear	./cpu/o3/store_set.cc	/^StoreSet::checkClear()$/;"	f	class:StoreSet
checkCoherence	./mem/ruby/system/Sequencer.cc	/^Sequencer::checkCoherence(Addr addr)$/;"	f	class:Sequencer
checkCondition	./arch/x86/insts/microop.cc	/^    bool X86MicroopBase::checkCondition(uint64_t flags, int condition) const$/;"	f	class:X86ISA::X86MicroopBase
checkDrain	./dev/arm/flash_device.cc	/^FlashDevice::checkDrain()$/;"	f	class:FlashDevice
checkDrain	./dev/arm/ufs_device.cc	/^UFSHostDevice::checkDrain()$/;"	f	class:UFSHostDevice
checkDrain	./dev/net/i8254xGBe.cc	/^IGbE::checkDrain()$/;"	f	class:IGbE
checkDrainDone	./mem/dram_ctrl.cc	/^DRAMCtrl::Rank::checkDrainDone()$/;"	f	class:DRAMCtrl::Rank
checkELMatch	./arch/arm/tlb.cc	/^TLB::checkELMatch(uint8_t target_el, uint8_t tentry_el, bool ignore_el)$/;"	f	class:TLB
checkEmptyROB	./cpu/o3/commit.hh	/^    bool checkEmptyROB[Impl::MaxThreads];$/;"	m	class:DefaultCommit
checkEnum	./mem/slicc/symbols/Type.py	/^    def checkEnum(self, ident):$/;"	m	class:Type
checkExtension	./cpu/kvm/vm.cc	/^Kvm::checkExtension(int extension) const$/;"	f	class:Kvm
checkFlags	./cpu/checker/cpu.cc	/^CheckerCPU::checkFlags(Request *unverified_req, Addr vAddr,$/;"	f	class:CheckerCPU
checkForDeadlock	./cpu/testers/rubytest/RubyTester.cc	/^RubyTester::checkForDeadlock()$/;"	f	class:RubyTester
checkForInterrupts	./cpu/simple/base.cc	/^BaseSimpleCPU::checkForInterrupts()$/;"	f	class:BaseSimpleCPU
checkForStdio	./base/output.cc	/^OutputDirectory::checkForStdio(const string &name) const$/;"	f	class:OutputDirectory
checkFunctional	./mem/bridge.cc	/^Bridge::BridgeMasterPort::checkFunctional(PacketPtr pkt)$/;"	f	class:Bridge::BridgeMasterPort
checkFunctional	./mem/cache/mshr.cc	/^MSHR::TargetList::checkFunctional(PacketPtr pkt)$/;"	f	class:MSHR::TargetList
checkFunctional	./mem/cache/mshr.cc	/^MSHR::checkFunctional(PacketPtr pkt)$/;"	f	class:MSHR
checkFunctional	./mem/cache/mshr_queue.cc	/^MSHRQueue::checkFunctional(PacketPtr pkt, Addr blk_addr)$/;"	f	class:MSHRQueue
checkFunctional	./mem/packet.cc	/^Packet::checkFunctional(Printable *obj, Addr addr, bool is_secure, int size,$/;"	f	class:Packet
checkFunctional	./mem/packet.hh	/^    checkFunctional(PacketPtr other)$/;"	f	class:Packet
checkFunctional	./mem/packet_queue.cc	/^PacketQueue::checkFunctional(PacketPtr pkt)$/;"	f	class:PacketQueue
checkFunctional	./mem/qport.hh	/^    bool checkFunctional(PacketPtr pkt)$/;"	f	class:QueuedMasterPort
checkFunctional	./mem/qport.hh	/^    bool checkFunctional(PacketPtr pkt)$/;"	f	class:QueuedSlavePort
checkFunctional	./mem/serial_link.cc	/^SerialLink::SerialLinkMasterPort::checkFunctional(PacketPtr pkt)$/;"	f	class:SerialLink::SerialLinkMasterPort
checkGlobalCoherenceInvariant	./mem/ruby/system/RubySystem.cc	/^RubySystem::checkGlobalCoherenceInvariant(const Address& addr)$/;"	f	class:RubySystem
checkInst	./cpu/o3/store_set.cc	/^StoreSet::checkInst(Addr PC)$/;"	f	class:StoreSet
checkInterrupt	./cpu/o3/fetch.hh	/^    checkInterrupt(Addr pc)$/;"	f	class:DefaultFetch
checkInterrupts	./arch/alpha/interrupts.hh	/^    checkInterrupts(ThreadContext *tc) const$/;"	f	class:AlphaISA::Interrupts
checkInterrupts	./arch/arm/interrupts.hh	/^    checkInterrupts(ThreadContext *tc) const$/;"	f	class:ArmISA::Interrupts
checkInterrupts	./arch/mips/interrupts.hh	/^    checkInterrupts(ThreadContext *tc) const$/;"	f	class:MipsISA::Interrupts
checkInterrupts	./arch/power/interrupts.hh	/^    checkInterrupts(ThreadContext *tc) const$/;"	f	class:PowerISA::Interrupts
checkInterrupts	./arch/sparc/interrupts.hh	/^    checkInterrupts(ThreadContext *tc) const$/;"	f	class:SparcISA::Interrupts
checkInterrupts	./arch/x86/interrupts.cc	/^X86ISA::Interrupts::checkInterrupts(ThreadContext *tc) const$/;"	f	class:X86ISA::Interrupts
checkInterrupts	./cpu/base.hh	/^    checkInterrupts(ThreadContext *tc) const$/;"	f	class:BaseCPU
checkInterruptsRaw	./arch/x86/interrupts.cc	/^X86ISA::Interrupts::checkInterruptsRaw() const$/;"	f	class:X86ISA::Interrupts
checkLoads	./cpu/o3/lsq_unit.hh	/^    bool checkLoads;$/;"	m	class:LSQUnit
checkLockedAddrList	./mem/abstract_mem.cc	/^AbstractMemory::checkLockedAddrList(PacketPtr pkt)$/;"	f	class:AbstractMemory
checkMisprediction	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::checkMisprediction(DynInstPtr &inst)$/;"	f	class:DefaultIEW
checkNetworkAllocation	./mem/ruby/network/Network.cc	/^Network::checkNetworkAllocation(NodeID id, bool ordered,$/;"	f	class:Network
checkOverflow	./arch/mips/dsp.cc	/^MipsISA::checkOverflow(uint64_t value, int32_t fmt, int32_t sign,$/;"	f	class:MipsISA
checkPcEventQueue	./cpu/simple/base.cc	/^BaseSimpleCPU::checkPcEventQueue()$/;"	f	class:BaseSimpleCPU
checkPermissions	./arch/arm/tlb.cc	/^TLB::checkPermissions(TlbEntry *te, RequestPtr req, Mode mode)$/;"	f	class:TLB
checkPermissions64	./arch/arm/tlb.cc	/^TLB::checkPermissions64(TlbEntry *te, RequestPtr req, Mode mode,$/;"	f	class:TLB
checkPortCache	./mem/xbar.hh	/^    inline PortID checkPortCache(Addr addr) const {$/;"	f	class:BaseXBar
checkProtocolVersion	./base/vnc/vncserver.cc	/^VncServer::checkProtocolVersion()$/;"	f	class:VncServer
checkR11	./arch/x86/nativetrace.hh	/^    bool checkR11;$/;"	m	class:Trace::X86NativeTrace
checkR11Reg	./arch/x86/nativetrace.cc	/^X86NativeTrace::checkR11Reg(const char * name, uint64_t &mVal, uint64_t &nVal)$/;"	f	class:Trace::X86NativeTrace
checkRaw	./arch/arm/interrupts.hh	/^    checkRaw(InterruptTypes interrupt) const$/;"	f	class:ArmISA::Interrupts
checkRcx	./arch/x86/nativetrace.hh	/^    bool checkRcx;$/;"	m	class:Trace::X86NativeTrace
checkRcxReg	./arch/x86/nativetrace.cc	/^X86NativeTrace::checkRcxReg(const char * name, uint64_t &mVal, uint64_t &nVal)$/;"	f	class:Trace::X86NativeTrace
checkReg	./cpu/nativetrace.hh	/^    checkReg(const char * regName, T &val, T &realVal)$/;"	f	class:Trace::NativeTrace
checkReschedule	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.cc	/^NetworkInterface_d::checkReschedule()$/;"	f	class:NetworkInterface_d
checkReschedule	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.cc	/^NetworkInterface::checkReschedule()$/;"	f	class:NetworkInterface
checkReschedule	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::checkReschedule()$/;"	f	class:Router
checkResourceAvailable	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::checkResourceAvailable(CacheResourceType res, Addr addr)$/;"	f	class:CacheMemory
checkSecurity	./base/vnc/vncserver.cc	/^VncServer::checkSecurity()$/;"	f	class:VncServer
checkSeg	./cpu/kvm/x86_cpu.cc	/^checkSeg(const char *name, const int idx, const struct kvm_segment &seg,$/;"	f	file:
checkSignalsAndUpdate	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::checkSignalsAndUpdate(ThreadID tid)$/;"	f	class:DefaultDecode
checkSignalsAndUpdate	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::checkSignalsAndUpdate(ThreadID tid)$/;"	f	class:DefaultFetch
checkSignalsAndUpdate	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::checkSignalsAndUpdate(ThreadID tid)$/;"	f	class:DefaultIEW
checkSignalsAndUpdate	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::checkSignalsAndUpdate(ThreadID tid)$/;"	f	class:DefaultRename
checkSnoop	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::checkSnoop(PacketPtr pkt)$/;"	f	class:LSQUnit
checkSoftInt	./arch/sparc/ua2005.cc	/^ISA::checkSoftInt(ThreadContext *tc)$/;"	f	class:ISA
checkStall	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::checkStall(ThreadID tid) const$/;"	f	class:DefaultDecode
checkStall	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::checkStall(ThreadID tid) const$/;"	f	class:DefaultFetch
checkStall	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::checkStall(ThreadID tid)$/;"	f	class:DefaultIEW
checkStall	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::checkStall(ThreadID tid)$/;"	f	class:DefaultRename
checkStartEvent	./cpu/testers/rubytest/RubyTester.hh	/^    CheckStartEvent checkStartEvent;$/;"	m	class:RubyTester
checkVal	./unittest/unittest.cc	/^checkVal(const char *file, const unsigned line,$/;"	f	namespace:UnitTest
checkViolations	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::checkViolations(int load_idx, DynInstPtr &inst)$/;"	f	class:LSQUnit
checkWfiWake	./arch/arm/interrupts.hh	/^    checkWfiWake(HCR hcr, CPSR cpsr, SCR scr) const$/;"	f	class:ArmISA::Interrupts
checkWrite	./mem/cache/blk.hh	/^    bool checkWrite(PacketPtr pkt)$/;"	f	class:CacheBlk
checkXMM	./arch/x86/nativetrace.cc	/^X86NativeTrace::checkXMM(int num, uint64_t mXmmBuf[], uint64_t nXmmBuf[])$/;"	f	class:Trace::X86NativeTrace
check_arbiter_reschedule	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::check_arbiter_reschedule()$/;"	f	class:Router
check_flush	./cpu/testers/rubytest/RubyTester.py	/^    check_flush = Param.Bool(False, "check cache flushing")$/;"	v	class:RubyTester
check_for_wakeup	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.cc	/^SWallocator_d::check_for_wakeup()$/;"	f	class:SWallocator_d
check_for_wakeup	./mem/ruby/network/garnet/fixed-pipeline/Switch_d.cc	/^Switch_d::check_for_wakeup()$/;"	f	class:Switch_d
check_for_wakeup	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.cc	/^VCallocator_d::check_for_wakeup()$/;"	f	class:VCallocator_d
check_tracing	./python/m5/main.py	/^    def check_tracing():$/;"	f	function:main
checkchildren	./python/m5/util/jobfile.py	/^    def checkchildren(self, kids):$/;"	m	class:Configuration
checker	./cpu/BaseCPU.py	/^    checker = Param.BaseCPU(NULL, "checker CPU")$/;"	v
checker	./cpu/o3/cpu.hh	/^    Checker<Impl> *checker;$/;"	m	class:FullO3CPU
checker	./cpu/simple/base.hh	/^    CheckerCPU *checker;$/;"	m	class:BaseSimpleCPU
checkerCPU	./cpu/checker/thread_context.hh	/^    CheckerCPU *checkerCPU;$/;"	m	class:CheckerThreadContext
checkerTC	./cpu/checker/thread_context.hh	/^    SimpleThread *checkerTC;$/;"	m	class:CheckerThreadContext
checkpoint	./python/m5/simulate.py	/^def checkpoint(dir):$/;"	f
checkpointReschedule	./sim/eventq.cc	/^EventQueue::checkpointReschedule(Event *event)$/;"	f	class:EventQueue
checkpoints	./python/m5/util/jobfile.py	/^    def checkpoints(self, groups=None):$/;"	m	class:Configuration
checks_to_complete	./cpu/testers/rubytest/RubyTester.py	/^    checks_to_complete = Param.Int(100, "checks to complete")$/;"	v	class:RubyTester
checksum	./kern/tru64/mbuf.hh	/^    Addr        checksum;       \/\/ 0x40$/;"	m	struct:tru64::m_ext
chflags	./kern/tru64/tru64_syscalls.hh	/^        chflags = 34,$/;"	e	enum:SystemCalls::__anon102
child	./dev/storage/DiskImage.py	/^    child = Param.DiskImage(RawDiskImage(read_only=True),$/;"	v	class:CowDiskImage
child	./dev/storage/disk_image.hh	/^    DiskImage *child;$/;"	m	class:CowDiskImage
children	./cpu/profile.hh	/^    ChildList children;$/;"	m	class:ProfileNode
children	./sim/clock_domain.hh	/^    std::vector<DerivedClockDomain*> children;$/;"	m	class:ClockDomain
chkInterrupt	./dev/net/i8254xGBe.cc	/^IGbE::chkInterrupt()$/;"	f	class:IGbE
chmod	./kern/tru64/tru64_syscalls.hh	/^        chmod = 15,$/;"	e	enum:SystemCalls::__anon102
chmodFunc	./sim/syscall_emul.hh	/^chmodFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
choiceCounters	./cpu/pred/bi_mode.hh	/^    std::vector<SatCounter> choiceCounters;$/;"	m	class:BiModeBP
choiceCtrBits	./cpu/pred/BranchPredictor.py	/^    choiceCtrBits = Param.Unsigned(2, "Bits of choice counters")$/;"	v	class:BiModeBP
choiceCtrBits	./cpu/pred/BranchPredictor.py	/^    choiceCtrBits = Param.Unsigned(2, "Bits of choice counters")$/;"	v	class:TournamentBP
choiceCtrBits	./cpu/pred/bi_mode.hh	/^    unsigned choiceCtrBits;$/;"	m	class:BiModeBP
choiceCtrBits	./cpu/pred/tournament.hh	/^    unsigned choiceCtrBits;$/;"	m	class:TournamentBP
choiceCtrs	./cpu/pred/tournament.hh	/^    std::vector<SatCounter> choiceCtrs;$/;"	m	class:TournamentBP
choiceHistoryMask	./cpu/pred/bi_mode.hh	/^    unsigned choiceHistoryMask;$/;"	m	class:BiModeBP
choiceHistoryMask	./cpu/pred/tournament.hh	/^    unsigned choiceHistoryMask;$/;"	m	class:TournamentBP
choicePredictorSize	./cpu/pred/BranchPredictor.py	/^    choicePredictorSize = Param.Unsigned(8192, "Size of choice predictor")$/;"	v	class:BiModeBP
choicePredictorSize	./cpu/pred/BranchPredictor.py	/^    choicePredictorSize = Param.Unsigned(8192, "Size of choice predictor")$/;"	v	class:TournamentBP
choicePredictorSize	./cpu/pred/bi_mode.hh	/^    unsigned choicePredictorSize;$/;"	m	class:BiModeBP
choicePredictorSize	./cpu/pred/tournament.hh	/^    unsigned choicePredictorSize;$/;"	m	class:TournamentBP
choiceThreshold	./cpu/pred/bi_mode.hh	/^    unsigned choiceThreshold;$/;"	m	class:BiModeBP
choiceThreshold	./cpu/pred/tournament.hh	/^    unsigned choiceThreshold;$/;"	m	class:TournamentBP
chooseNext	./mem/dram_ctrl.cc	/^DRAMCtrl::chooseNext(std::deque<DRAMPacket*>& queue, Tick extra_col_delay)$/;"	f	class:DRAMCtrl
chown	./kern/tru64/tru64_syscalls.hh	/^        chown = 16,$/;"	e	enum:SystemCalls::__anon102
chownFunc	./sim/syscall_emul.cc	/^chownFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)$/;"	f
chroot	./kern/tru64/tru64_syscalls.hh	/^        chroot = 61,$/;"	e	enum:SystemCalls::__anon102
chunkIdx	./arch/x86/decoder.hh	/^    int chunkIdx;$/;"	m	class:X86ISA::Decoder
chunkSize	./base/chunk_generator.hh	/^    const unsigned chunkSize;$/;"	m	class:ChunkGenerator
chunks	./arch/x86/decoder.hh	/^        std::vector<MachInst> chunks;$/;"	m	struct:X86ISA::Decoder::InstBytes
ckptCount	./sim/serialize.cc	/^int Serializable::ckptCount = 0;$/;"	m	class:Serializable	file:
ckptCount	./sim/serialize.hh	/^    static int ckptCount;$/;"	m	class:Serializable
ckptMaxCount	./sim/serialize.cc	/^int Serializable::ckptMaxCount = 0;$/;"	m	class:Serializable	file:
ckptMaxCount	./sim/serialize.hh	/^    static int ckptMaxCount;$/;"	m	class:Serializable
ckptPrevCount	./sim/serialize.cc	/^int Serializable::ckptPrevCount = -1;$/;"	m	class:Serializable	file:
ckptPrevCount	./sim/serialize.hh	/^    static int ckptPrevCount;$/;"	m	class:Serializable
ckptRestore	./dev/net/dist_iface.hh	/^        bool ckptRestore;$/;"	m	class:DistIface::RecvScheduler
cksum	./base/inet.cc	/^cksum(const IpPtr &ptr)$/;"	f	namespace:Net
cksum	./base/inet.cc	/^cksum(const TcpPtr &tcp)$/;"	f	namespace:Net
cksum	./base/inet.cc	/^cksum(const UdpPtr &udp)$/;"	f	namespace:Net
cksum	./base/inet.hh	/^    uint8_t cksum() const{ return opt_data.cksum; }$/;"	f	struct:Net::TcpOpt
classCode	./dev/pci/pcireg.h	/^        uint8_t classCode;$/;"	m	struct:PCIConfig::__anon26
classcntl	./kern/tru64/tru64_syscalls.hh	/^        classcntl = 53,$/;"	e	enum:SystemCalls::__anon102
clcd	./dev/arm/RealView.py	/^    clcd   = Pl111(pio_addr=0x10020000, int_num=23)$/;"	v	class:RealViewEB
clcd	./dev/arm/RealView.py	/^    clcd   = Pl111(pio_addr=0x1c1f0000, int_num=46)$/;"	v	class:VExpress_EMM
clcd	./dev/arm/RealView.py	/^    clcd = Pl111(pio_addr=0x10020000, int_num=55)$/;"	v	class:RealViewPBX
clcdCrsrClip	./dev/arm/pl111.hh	/^    uint32_t clcdCrsrClip;$/;"	m	class:Pl111
clcdCrsrConfig	./dev/arm/pl111.hh	/^    uint32_t clcdCrsrConfig;$/;"	m	class:Pl111
clcdCrsrCtrl	./dev/arm/pl111.hh	/^    uint32_t clcdCrsrCtrl;$/;"	m	class:Pl111
clcdCrsrIcr	./dev/arm/pl111.hh	/^    InterruptReg clcdCrsrIcr;$/;"	m	class:Pl111
clcdCrsrImsc	./dev/arm/pl111.hh	/^    InterruptReg clcdCrsrImsc;$/;"	m	class:Pl111
clcdCrsrMis	./dev/arm/pl111.hh	/^    InterruptReg clcdCrsrMis;$/;"	m	class:Pl111
clcdCrsrPalette0	./dev/arm/pl111.hh	/^    uint32_t clcdCrsrPalette0;$/;"	m	class:Pl111
clcdCrsrPalette1	./dev/arm/pl111.hh	/^    uint32_t clcdCrsrPalette1;$/;"	m	class:Pl111
clcdCrsrRis	./dev/arm/pl111.hh	/^    InterruptReg clcdCrsrRis;$/;"	m	class:Pl111
clcdCrsrXY	./dev/arm/pl111.hh	/^    uint32_t clcdCrsrXY;$/;"	m	class:Pl111
cle	./arch/sparc/miscregs.hh	/^    Bitfield<9> cle;$/;"	m	namespace:SparcISA
cleanEvictBlk	./mem/cache/cache.cc	/^Cache::cleanEvictBlk(CacheBlk *blk)$/;"	f	class:Cache
cleanUpRemovedInsts	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::cleanUpRemovedInsts()$/;"	f	class:FullO3CPU
cleanupRefs	./mem/cache/tags/base.hh	/^    virtual void cleanupRefs() {}$/;"	f	class:BaseTags
cleanupRefs	./mem/cache/tags/base_set_assoc.cc	/^BaseSetAssoc::cleanupRefs()$/;"	f	class:BaseSetAssoc
clear	./arch/alpha/interrupts.hh	/^    clear(int int_num, int index)$/;"	f	class:AlphaISA::Interrupts
clear	./arch/alpha/isa.hh	/^        clear()$/;"	f	class:AlphaISA::ISA
clear	./arch/alpha/stacktrace.hh	/^    clear()$/;"	f	class:AlphaISA::StackTrace
clear	./arch/arm/interrupts.hh	/^    clear(int int_num, int index)$/;"	f	class:ArmISA::Interrupts
clear	./arch/arm/isa.cc	/^ISA::clear()$/;"	f	class:ArmISA::ISA
clear	./arch/arm/stacktrace.hh	/^    void clear()$/;"	f	class:ArmISA::StackTrace
clear	./arch/mips/interrupts.cc	/^Interrupts::clear(int int_num, ThreadContext* tc)$/;"	f	class:MipsISA::Interrupts
clear	./arch/mips/interrupts.cc	/^Interrupts::clear(int int_num, int index)$/;"	f	class:MipsISA::Interrupts
clear	./arch/mips/isa.cc	/^ISA::clear()$/;"	f	class:MipsISA::ISA
clear	./arch/mips/stacktrace.hh	/^    void clear()$/;"	f	class:MipsISA::StackTrace
clear	./arch/power/interrupts.hh	/^    clear(int int_num, int index)$/;"	f	class:PowerISA::Interrupts
clear	./arch/power/isa.hh	/^    clear()$/;"	f	class:PowerISA::ISA
clear	./arch/power/stacktrace.hh	/^    clear()$/;"	f	class:PowerISA::StackTrace
clear	./arch/sparc/interrupts.hh	/^    clear(int int_num, int index)$/;"	f	class:SparcISA::Interrupts
clear	./arch/sparc/isa.cc	/^ISA::clear()$/;"	f	class:SparcISA::ISA
clear	./arch/sparc/pagetable.hh	/^    clear()$/;"	f	class:SparcISA::PageTableEntry
clear	./arch/sparc/tlb_map.hh	/^    clear()$/;"	f	class:SparcISA::TlbMap
clear	./arch/x86/interrupts.hh	/^    clear(int int_num, int index)$/;"	f	class:X86ISA::Interrupts
clear	./arch/x86/isa.cc	/^ISA::clear()$/;"	f	class:X86ISA::ISA
clear	./arch/x86/stacktrace.hh	/^        void clear()$/;"	f	class:X86ISA::StackTrace
clear	./base/addr_range_map.hh	/^    clear()$/;"	f	class:AddrRangeMap
clear	./base/callback.hh	/^    clear()$/;"	f	class:CallbackQueue
clear	./base/cprintf_formats.hh	/^    void clear()$/;"	f	struct:cp::Format
clear	./base/flags.hh	/^    void clear() { _flags = 0; }$/;"	f	class:Flags
clear	./base/flags.hh	/^    void clear(Type flags) { _flags &= ~flags; }$/;"	f	class:Flags
clear	./base/framebuffer.cc	/^FrameBuffer::clear()$/;"	f	class:FrameBuffer
clear	./base/loader/symtab.cc	/^SymbolTable::clear()$/;"	f	class:SymbolTable
clear	./base/time.hh	/^    void clear() { memset(&_time, 0, sizeof(_time)); }$/;"	f	class:Time
clear	./base/trie.hh	/^        clear()$/;"	f	struct:Trie::Node
clear	./base/trie.hh	/^    clear()$/;"	f	class:Trie
clear	./cpu/intr_control.cc	/^IntrControl::clear(int cpu_id, int int_num, int index)$/;"	f	class:IntrControl
clear	./cpu/intr_control.hh	/^    clear(int int_num, int index = 0)$/;"	f	class:IntrControl
clear	./cpu/intr_control_noisa.cc	/^IntrControl::clear(int cpu_id, int int_num, int index)$/;"	f	class:IntrControl
clear	./cpu/o3/store_set.cc	/^StoreSet::clear()$/;"	f	class:StoreSet
clear	./cpu/profile.cc	/^FunctionProfile::clear()$/;"	f	class:FunctionProfile
clear	./cpu/profile.cc	/^ProfileNode::clear()$/;"	f	class:ProfileNode
clear	./cpu/testers/traffic_gen/generators.hh	/^        void clear() {$/;"	f	struct:TraceGen::TraceElement
clear	./cpu/trace/trace_cpu.hh	/^            void clear() {$/;"	f	struct:TraceCPU::FixedRetryGen::TraceElement
clear	./dev/arm/generic_timer.cc	/^ArchTimer::Interrupt::clear()$/;"	f	class:ArchTimer::Interrupt
clear	./dev/net/pktfifo.hh	/^    void clear()$/;"	f	class:PacketFifo
clear	./dev/net/pktfifo.hh	/^    void clear()$/;"	f	struct:PacketFifoEntry
clear	./mem/ruby/common/DataBlock.cc	/^DataBlock::clear()$/;"	f	class:DataBlock
clear	./mem/ruby/common/Histogram.cc	/^Histogram::clear(int binsize, uint32_t bins)$/;"	f	class:Histogram
clear	./mem/ruby/common/Histogram.cc	/^Histogram::clear(uint32_t bins)$/;"	f	class:Histogram
clear	./mem/ruby/common/Histogram.hh	/^    void clear() { clear(m_data.size()); }$/;"	f	class:Histogram
clear	./mem/ruby/common/NetDest.cc	/^NetDest::clear()$/;"	f	class:NetDest
clear	./mem/ruby/common/Set.hh	/^    void clear() { bits.reset(); }$/;"	f	class:Set
clear	./mem/ruby/filters/BlockBloomFilter.cc	/^BlockBloomFilter::clear()$/;"	f	class:BlockBloomFilter
clear	./mem/ruby/filters/BulkBloomFilter.cc	/^BulkBloomFilter::clear()$/;"	f	class:BulkBloomFilter
clear	./mem/ruby/filters/H3BloomFilter.cc	/^H3BloomFilter::clear()$/;"	f	class:H3BloomFilter
clear	./mem/ruby/filters/LSB_CountingBloomFilter.cc	/^LSB_CountingBloomFilter::clear()$/;"	f	class:LSB_CountingBloomFilter
clear	./mem/ruby/filters/MultiBitSelBloomFilter.cc	/^MultiBitSelBloomFilter::clear()$/;"	f	class:MultiBitSelBloomFilter
clear	./mem/ruby/filters/MultiGrainBloomFilter.cc	/^MultiGrainBloomFilter::clear()$/;"	f	class:MultiGrainBloomFilter
clear	./mem/ruby/filters/NonCountingBloomFilter.cc	/^NonCountingBloomFilter::clear()$/;"	f	class:NonCountingBloomFilter
clear	./mem/ruby/network/MessageBuffer.cc	/^MessageBuffer::clear()$/;"	f	class:MessageBuffer
clear	./python/m5/SimObject.py	/^def clear():$/;"	f
clear	./python/m5/params.py	/^def clear():$/;"	f
clear	./python/m5/util/code_formatter.py	/^    def clear():$/;"	m	class:code_formatter
clear	./python/m5/util/orderdict.py	/^    def clear(self):$/;"	m	class:orderdict
clear	./python/m5/util/sorteddict.py	/^    def clear(self):$/;"	m	class:SortedDict
clear64	./arch/arm/isa.cc	/^ISA::clear64(const ArmISAParams *p)$/;"	f	class:ArmISA::ISA
clearAll	./arch/alpha/interrupts.hh	/^    clearAll()$/;"	f	class:AlphaISA::Interrupts
clearAll	./arch/arm/interrupts.hh	/^    clearAll()$/;"	f	class:ArmISA::Interrupts
clearAll	./arch/mips/interrupts.cc	/^Interrupts::clearAll()$/;"	f	class:MipsISA::Interrupts
clearAll	./arch/mips/interrupts.cc	/^Interrupts::clearAll(ThreadContext *tc)$/;"	f	class:MipsISA::Interrupts
clearAll	./arch/power/interrupts.hh	/^    clearAll()$/;"	f	class:PowerISA::Interrupts
clearAll	./arch/sparc/interrupts.hh	/^    clearAll()$/;"	f	class:SparcISA::Interrupts
clearAll	./arch/x86/interrupts.hh	/^    clearAll()$/;"	f	class:X86ISA::Interrupts
clearArchRegs	./cpu/checker/thread_context.hh	/^    void clearArchRegs()$/;"	f	class:CheckerThreadContext
clearArchRegs	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::clearArchRegs()$/;"	f	class:O3ThreadContext
clearArchRegs	./cpu/simple_thread.hh	/^    void clearArchRegs()$/;"	f	class:SimpleThread
clearArchRegs	./cpu/thread_context.hh	/^    void clearArchRegs() { actualTC->clearArchRegs(); }$/;"	f	class:ProxyThreadContext
clearBlockCached	./mem/packet.hh	/^    void clearBlockCached()        { flags.clear(BLOCK_CACHED); }$/;"	f	class:Packet
clearBlocked	./mem/cache/base.cc	/^BaseCache::CacheSlavePort::clearBlocked()$/;"	f	class:BaseCache::CacheSlavePort
clearBlocked	./mem/cache/base.hh	/^    void clearBlocked(BlockedCause cause)$/;"	f	class:BaseCache
clearCanCommit	./cpu/base_dyn_inst.hh	/^    void clearCanCommit() { status.reset(CanCommit); }$/;"	f	class:BaseDynInst
clearCanIssue	./cpu/base_dyn_inst.hh	/^    void clearCanIssue() { status.reset(CanIssue); }$/;"	f	class:BaseDynInst
clearConsoleInt	./dev/alpha/tsunami.cc	/^Tsunami::clearConsoleInt()$/;"	f	class:Tsunami
clearConsoleInt	./dev/arm/realview.cc	/^RealView::clearConsoleInt()$/;"	f	class:RealView
clearConsoleInt	./dev/mips/malta.cc	/^Malta::clearConsoleInt()$/;"	f	class:Malta
clearConsoleInt	./dev/sparc/t1000.cc	/^T1000::clearConsoleInt()$/;"	f	class:T1000
clearConsoleInt	./dev/x86/pc.cc	/^Pc::clearConsoleInt()$/;"	f	class:Pc
clearDRIR	./dev/alpha/tsunami_cchip.cc	/^TsunamiCChip::clearDRIR(uint32_t interrupt)$/;"	f	class:TsunamiCChip
clearDebugFlag	./base/debug.cc	/^clearDebugFlag(const char *string)$/;"	f
clearDownstreamPending	./mem/cache/mshr.cc	/^MSHR::TargetList::clearDownstreamPending()$/;"	f	class:MSHR::TargetList
clearDownstreamPending	./mem/cache/mshr.cc	/^MSHR::clearDownstreamPending()$/;"	f	class:MSHR
clearFetchFault	./cpu/o3/comm.hh	/^    bool clearFetchFault;$/;"	m	struct:DefaultFetchDefaultDecode
clearFlags	./sim/eventq.hh	/^    clearFlags()$/;"	f	class:Event
clearFlags	./sim/eventq.hh	/^    clearFlags(Flags _flags)$/;"	f	class:Event
clearFromParent	./cpu/simple/timing.hh	/^        clearFromParent()$/;"	f	class:TimingSimpleCPU::SplitFragmentSenderState
clearIPI	./dev/alpha/tsunami_cchip.cc	/^TsunamiCChip::clearIPI(uint64_t ipintr)$/;"	f	class:TsunamiCChip
clearIPI	./dev/mips/malta_cchip.cc	/^MaltaCChip::clearIPI(uint64_t ipintr)$/;"	f	class:MaltaCChip
clearITI	./dev/alpha/tsunami_cchip.cc	/^TsunamiCChip::clearITI(uint64_t itintr)$/;"	f	class:TsunamiCChip
clearITI	./dev/mips/malta_cchip.cc	/^MaltaCChip::clearITI(uint64_t itintr)$/;"	f	class:MaltaCChip
clearInIQ	./cpu/base_dyn_inst.hh	/^    void clearInIQ() { status.reset(IqEntry); }$/;"	f	class:BaseDynInst
clearInROB	./cpu/base_dyn_inst.hh	/^    void clearInROB() { status.reset(RobEntry); }$/;"	f	class:BaseDynInst
clearInst	./cpu/o3/dep_graph.hh	/^    void clearInst(PhysRegIndex idx)$/;"	f	class:DependencyGraph
clearInstDests	./cpu/minor/scoreboard.cc	/^Scoreboard::clearInstDests(MinorDynInstPtr inst, bool clear_unpredictable)$/;"	f	class:Minor::Scoreboard
clearInt	./arch/arm/kvm/gic.cc	/^KvmGic::clearInt(uint32_t num)$/;"	f	class:KvmGic
clearInt	./dev/arm/gic_pl390.cc	/^Pl390::clearInt(uint32_t number)$/;"	f	class:Pl390
clearInt	./dev/pci/host.cc	/^GenericPciHost::clearInt(const PciBusAddr &addr, PciIntPin pin)$/;"	f	class:GenericPciHost
clearInt	./dev/pci/host.cc	/^PciHost::DeviceInterface::clearInt()$/;"	f	class:PciHost::DeviceInterface
clearInterrupt	./cpu/base.hh	/^    clearInterrupt(ThreadID tid, int int_num, int index)$/;"	f	class:BaseCPU
clearInterrupt	./cpu/o3/comm.hh	/^        bool clearInterrupt; \/\/ *F$/;"	m	struct:TimeBufStruct::commitComm
clearInterrupt	./dev/arm/ufs_device.cc	/^UFSHostDevice::clearInterrupt()$/;"	f	class:UFSHostDevice
clearInterrupts	./cpu/base.hh	/^    clearInterrupts(ThreadID tid)$/;"	f	class:BaseCPU
clearInterrupts	./dev/arm/pl011.hh	/^    void clearInterrupts(uint16_t ints) { setInterrupts(rawInt & ~ints, imsc); }$/;"	f	class:Pl011
clearIntr	./dev/mips/malta_cchip.cc	/^MaltaCChip::clearIntr(uint32_t interrupt)$/;"	f	class:MaltaCChip
clearIntr	./dev/mips/malta_io.cc	/^MaltaIO::clearIntr(uint8_t interrupt)$/;"	f	class:MaltaIO
clearIssued	./cpu/base_dyn_inst.hh	/^    void clearIssued() { status.reset(Issued); }$/;"	f	class:BaseDynInst
clearLQ	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::clearLQ()$/;"	f	class:LSQUnit
clearLoadLocks	./mem/cache/blk.hh	/^    void clearLoadLocks(RequestPtr req = nullptr)$/;"	f	class:CacheBlk
clearLocked	./mem/ruby/slicc_interface/AbstractCacheEntry.cc	/^AbstractCacheEntry::clearLocked()$/;"	f	class:AbstractCacheEntry
clearLocked	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::clearLocked(Addr address)$/;"	f	class:CacheMemory
clearMemBarrier	./cpu/minor/lsq.cc	/^LSQ::clearMemBarrier(MinorDynInstPtr inst)$/;"	f	class:Minor::LSQ
clearNonunitEntry	./mem/ruby/structures/Prefetcher.cc	/^Prefetcher::clearNonunitEntry(uint32_t index)$/;"	f	class:Prefetcher
clearPIC	./dev/alpha/tsunami_io.cc	/^TsunamiIO::clearPIC(uint8_t bitvector)$/;"	f	class:TsunamiIO
clearPPInt	./arch/arm/kvm/gic.cc	/^KvmGic::clearPPInt(uint32_t num, uint32_t cpu)$/;"	f	class:KvmGic
clearPPInt	./dev/arm/gic_pl390.cc	/^Pl390::clearPPInt(uint32_t num, uint32_t cpu)$/;"	f	class:Pl390
clearPciInt	./dev/alpha/tsunami.cc	/^Tsunami::clearPciInt(int line)$/;"	f	class:Tsunami
clearPciInt	./dev/arm/realview.cc	/^RealView::clearPciInt(int line)$/;"	f	class:RealView
clearPciInt	./dev/mips/malta.cc	/^Malta::clearPciInt(int line)$/;"	f	class:Malta
clearPciInt	./dev/platform.cc	/^Platform::clearPciInt(int line)$/;"	f	class:Platform
clearPciInt	./dev/sparc/t1000.cc	/^T1000::clearPciInt(int line)$/;"	f	class:T1000
clearPciInt	./dev/x86/pc.cc	/^Pc::clearPciInt(int line)$/;"	f	class:Pc
clearPeriod	./cpu/o3/store_set.hh	/^    uint64_t clearPeriod;$/;"	m	class:StoreSet
clearPortCache	./mem/xbar.hh	/^    inline void clearPortCache() {$/;"	f	class:BaseXBar
clearReadSignal	./dev/arm/ufs_device.hh	/^        void clearReadSignal() {readCompleted = false;};$/;"	f	class:UFSHostDevice::UFSSCSIDevice
clearRegArrayBit	./arch/x86/interrupts.hh	/^    clearRegArrayBit(ApicRegIndex base, uint8_t vector)$/;"	f	class:X86ISA::Interrupts
clearRegDep	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::GraphNode::clearRegDep() {$/;"	f	class:TraceCPU::ElasticDataGen::GraphNode
clearReservedSpace	./cpu/minor/buffers.hh	/^    void clearReservedSpace() { numReservedSlots = 0; }$/;"	f	class:Minor::Queue
clearRobDep	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::GraphNode::clearRobDep() {$/;"	f	class:TraceCPU::ElasticDataGen::GraphNode
clearSQ	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::clearSQ()$/;"	f	class:LSQUnit
clearSerializeAfter	./cpu/base_dyn_inst.hh	/^    void clearSerializeAfter() { status.reset(SerializeAfter); }$/;"	f	class:BaseDynInst
clearSerializeBefore	./cpu/base_dyn_inst.hh	/^    void clearSerializeBefore() { status.reset(SerializeBefore); }$/;"	f	class:BaseDynInst
clearSignal	./dev/arm/ufs_device.hh	/^        void clearSignal() {transferCompleted = false;};$/;"	f	class:UFSHostDevice::UFSSCSIDevice
clearSingleStep	./base/remote_gdb.cc	/^BaseRemoteGDB::clearSingleStep()$/;"	f	class:BaseRemoteGDB
clearStats	./cpu/testers/directedtest/RubyDirectedTester.hh	/^    void clearStats() {}$/;"	f	class:RubyDirectedTester
clearStats	./cpu/testers/rubytest/RubyTester.hh	/^    void clearStats() {}$/;"	f	class:RubyTester
clearStats	./mem/ruby/network/MessageBuffer.hh	/^    void clearStats() { m_not_avail_count = 0; m_msg_counter = 0; }$/;"	f	class:MessageBuffer
clearStats	./mem/ruby/network/simple/PerfectSwitch.cc	/^PerfectSwitch::clearStats()$/;"	f	class:PerfectSwitch
clearStats	./mem/ruby/network/simple/Throttle.cc	/^Throttle::clearStats()$/;"	f	class:Throttle
clearStats	./mem/ruby/profiler/AddressProfiler.cc	/^AddressProfiler::clearStats()$/;"	f	class:AddressProfiler
clearSummary	./mem/ruby/profiler/StoreTrace.cc	/^StoreTrace::clearSummary()$/;"	f	class:StoreTrace
clearTempBreakpoint	./base/remote_gdb.cc	/^BaseRemoteGDB::clearTempBreakpoint(Addr &bkpt)$/;"	f	class:BaseRemoteGDB
clearTempStoreUntil	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::clearTempStoreUntil(const DynInstPtr head_inst)$/;"	f	class:ElasticTrace
clearUnknownPages	./dev/arm/flash_device.cc	/^FlashDevice::clearUnknownPages(uint32_t index)$/;"	f	class:FlashDevice
clearUsedBits	./arch/sparc/tlb.cc	/^TLB::clearUsedBits()$/;"	f	class:SparcISA::TLB
clear_child	./python/m5/SimObject.py	/^    def clear_child(self, name):$/;"	f
clear_parent	./python/m5/SimObject.py	/^    def clear_parent(self, old_parent):$/;"	f
clear_parent	./python/m5/params.py	/^    def clear_parent(self, old_parent):$/;"	m	class:SimObjectVector
clear_request_vector	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.cc	/^SWallocator_d::clear_request_vector()$/;"	f	class:SWallocator_d
clear_request_vector	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.cc	/^VCallocator_d::clear_request_vector()$/;"	f	class:VCallocator_d
cline	./base/loader/coff_sym.h	/^    coff_int    cline;          \/* count of file's line symbols *\/$/;"	m	struct:ecoff_fdr
clkPeriodAtPerfLevel	./sim/clock_domain.hh	/^    Tick clkPeriodAtPerfLevel() const { return freqOpPoints[perfLevel()]; }$/;"	f	class:SrcClockDomain
clkPeriodAtPerfLevel	./sim/clock_domain.hh	/^    Tick clkPeriodAtPerfLevel(PerfLevel perf_level) const$/;"	f	class:SrcClockDomain
clkPeriodAtPerfLevel	./sim/dvfs_handler.hh	/^    Tick clkPeriodAtPerfLevel(DomainID domain_id, PerfLevel perf_level) const$/;"	f	class:DVFSHandler
clk_divider	./sim/ClockDomain.py	/^    clk_divider = Param.Unsigned(1, "Frequency divider")$/;"	v	class:DerivedClockDomain
clk_domain	./sim/ClockDomain.py	/^    clk_domain = Param.ClockDomain("Parent clock domain")$/;"	v	class:DerivedClockDomain
clk_domain	./sim/ClockedObject.py	/^    clk_domain = Param.ClockDomain(Parent.clk_domain, "Clock domain")$/;"	v	class:ClockedObject
clk_in	./dev/arm/kmi.hh	/^        Bitfield<1> clk_in;$/;"	m	class:Pl050
clkdiv	./dev/arm/kmi.hh	/^    uint8_t clkdiv;$/;"	m	class:Pl050
clksel	./dev/arm/pl111.hh	/^        Bitfield<5> clksel;$/;"	m	class:Pl111
clock	./dev/arm/timer_sp804.hh	/^        const Tick clock;$/;"	m	class:Sp804::Timer
clock	./sim/ClockDomain.py	/^    clock = VectorParam.Clock("Clock period")$/;"	v	class:SrcClockDomain
clock0	./dev/arm/RealView.py	/^    clock0 = Param.Clock('1MHz', "Clock speed of the input")$/;"	v	class:Sp804
clock1	./dev/arm/RealView.py	/^    clock1 = Param.Clock('1MHz', "Clock speed of the input")$/;"	v	class:Sp804
clockDivider	./sim/clock_domain.hh	/^    const uint64_t clockDivider;$/;"	m	class:DerivedClockDomain
clockDomain	./sim/clocked_object.hh	/^    ClockDomain &clockDomain;$/;"	m	class:Clocked
clockEdge	./sim/clocked_object.hh	/^    inline Tick clockEdge(Cycles cycles = Cycles(0)) const$/;"	f	class:Clocked
clockID	./cpu/kvm/timer.hh	/^    clockid_t clockID;$/;"	m	class:PosixKvmTimer
clockPeriod	./dev/arm/rv_ctrl.cc	/^RealViewOsc::clockPeriod(Tick clock_period)$/;"	f	class:RealViewOsc
clockPeriod	./mem/dramsim2_wrapper.cc	/^DRAMSim2Wrapper::clockPeriod() const$/;"	f	class:DRAMSim2Wrapper
clockPeriod	./sim/clock_domain.cc	/^SrcClockDomain::clockPeriod(Tick clock_period)$/;"	f	class:SrcClockDomain
clockPeriod	./sim/clock_domain.hh	/^    Tick clockPeriod() const { return _clockPeriod; }$/;"	f	class:ClockDomain
clockPeriod	./sim/clocked_object.hh	/^    inline Tick clockPeriod() const$/;"	f	class:Clocked
clock_data	./dev/mc146818.hh	/^        uint8_t clock_data[10];$/;"	m	union:MC146818::__anon17
clock_gettimeFunc	./sim/syscall_emul.hh	/^clock_gettimeFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)$/;"	f
clock_remainder	./arch/arm/pmu.hh	/^    unsigned clock_remainder;$/;"	m	class:ArmISA::PMU
clock_t	./arch/arm/freebsd/freebsd.hh	/^    typedef int32_t clock_t;$/;"	t	class:ArmFreebsd32
clock_t	./arch/arm/freebsd/freebsd.hh	/^    typedef int64_t clock_t;$/;"	t	class:ArmFreebsd64
clock_t	./arch/arm/linux/linux.hh	/^    typedef int32_t clock_t;$/;"	t	class:ArmLinux32
clock_t	./arch/arm/linux/linux.hh	/^    typedef int64_t clock_t;$/;"	t	class:ArmLinux64
clock_t	./kern/freebsd/freebsd.hh	/^    typedef int64_t clock_t;$/;"	t	class:FreeBSD
clock_t	./kern/linux/linux.hh	/^    typedef int64_t clock_t;$/;"	t	class:Linux
clocksLeft	./dev/intel_8254_timer.cc	/^Intel8254Timer::Counter::CounterEvent::clocksLeft()$/;"	f	class:Intel8254Timer::Counter::CounterEvent
clone	./mem/ruby/slicc_interface/RubyRequest.hh	/^    MsgPtr clone() const$/;"	f	class:RubyRequest
clone	./python/m5/params.py	/^    def clone(self, simobj, memo):$/;"	m	class:PortRef
clone	./python/m5/params.py	/^    def clone(self, simobj, memo):$/;"	m	class:VectorPortRef
clone	./python/m5/util/jobfile.py	/^    def clone(self):$/;"	m	class:Job
clone	./python/m5/util/jobfile.py	/^    def clone(self, suboptions=True):$/;"	m	class:Option
cloneFunc	./sim/syscall_emul.cc	/^cloneFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
close	./base/loader/hex_file.cc	/^HexFile::close()$/;"	f	class:HexFile
close	./base/loader/object_file.cc	/^ObjectFile::close()$/;"	f	class:ObjectFile
close	./base/output.cc	/^OutputDirectory::close(ostream *openStream) {$/;"	f	class:OutputDirectory
close	./dev/storage/disk_image.cc	/^RawDiskImage::close()$/;"	f	class:RawDiskImage
close	./kern/tru64/tru64_syscalls.hh	/^        close = 6,$/;"	e	enum:SystemCalls::__anon102
closeFunc	./sim/syscall_emul.cc	/^closeFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)$/;"	f
closeStreams	./cpu/inst_pb_trace.cc	/^InstPBTrace::closeStreams()$/;"	f	class:Trace::InstPBTrace
closeStreams	./mem/probes/mem_trace.cc	/^MemTraceProbe::closeStreams()$/;"	f	class:MemTraceProbe
clrfen	./arch/alpha/osfpal.hh	/^        clrfen = 0xae,$/;"	e	enum:PAL::__anon50
cls	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    cls = []$/;"	v	class:GarnetExtLink_d
cls	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    cls = []$/;"	v	class:GarnetIntLink_d
clusivity	./mem/cache/Cache.py	/^    clusivity = Param.Clusivity('mostly_incl',$/;"	v	class:Cache
clusivity	./mem/cache/cache.hh	/^    const Enums::Clusivity clusivity;$/;"	m	class:Cache
cluster_id	./mem/ruby/slicc_interface/Controller.py	/^    cluster_id = Param.UInt32(0, "Id of this controller's cluster")$/;"	v	class:RubyController
cm	./arch/arm/miscregs.hh	/^        Bitfield<13> cm;  \/\/ LPAE$/;"	m	namespace:ArmISA
cmap	./base/statistics.hh	/^    MCounter cmap;$/;"	m	class:Stats::SparseHistStor
cmap	./base/stats/info.hh	/^    MCounter cmap;$/;"	m	struct:Stats::SparseHistData
cmd	./cpu/testers/traffic_gen/generators.hh	/^        MemCmd cmd;$/;"	m	struct:TraceGen::TraceElement
cmd	./cpu/trace/trace_cpu.hh	/^            MemCmd cmd;$/;"	m	struct:TraceCPU::FixedRetryGen::TraceElement
cmd	./mem/packet.hh	/^    Command cmd;$/;"	m	class:MemCmd
cmd	./mem/packet.hh	/^    MemCmd cmd;$/;"	m	class:Packet
cmd	./sim/Process.py	/^    cmd = VectorParam.String("command line (executable plus arguments)")$/;"	v	class:LiveProcess
cmd	./sim/probe/mem.hh	/^    MemCmd cmd;$/;"	m	struct:ProbePoints::PacketInfo
cmdAddr	./dev/storage/ide_ctrl.hh	/^        Addr cmdAddr, cmdSize, ctrlAddr, ctrlSize;$/;"	m	struct:IdeController::Channel
cmdBytes	./dev/storage/ide_disk.hh	/^    uint32_t cmdBytes;$/;"	m	class:IdeDisk
cmdBytesLeft	./dev/storage/ide_disk.hh	/^    uint32_t cmdBytesLeft;$/;"	m	class:IdeDisk
cmdDisable	./dev/arm/hdlcd.cc	/^HDLcd::cmdDisable()$/;"	f	class:HDLcd
cmdEnable	./dev/arm/hdlcd.cc	/^HDLcd::cmdEnable()$/;"	f	class:HDLcd
cmdReg	./dev/storage/ide_disk.hh	/^    CommandReg_t cmdReg;$/;"	m	class:IdeDisk
cmdSize	./dev/storage/ide_ctrl.hh	/^        Addr cmdAddr, cmdSize, ctrlAddr, ctrlSize;$/;"	m	struct:IdeController::Channel
cmdString	./mem/packet.hh	/^    const std::string &cmdString() const { return cmd.toString(); }$/;"	f	class:Packet
cmdSyncAck	./dev/net/dist_packet.hh	/^        cmdSyncAck,$/;"	m	class:DistHeaderPkt::MsgType
cmdSyncReq	./dev/net/dist_packet.hh	/^        cmdSyncReq,$/;"	m	class:DistHeaderPkt::MsgType
cmdToIndex	./mem/packet.hh	/^    inline int cmdToIndex() const { return cmd.toInt(); }$/;"	f	class:Packet
cmd_line_settable	./python/m5/params.py	/^    cmd_line_settable = False$/;"	v	class:Current
cmd_line_settable	./python/m5/params.py	/^    cmd_line_settable = False$/;"	v	class:ParamValue
cmd_line_settable	./python/m5/params.py	/^    cmd_line_settable = False$/;"	v	class:Voltage
cmd_line_settable	./python/m5/params.py	/^    cmd_line_settable = True$/;"	v	class:Bool
cmd_line_settable	./python/m5/params.py	/^    cmd_line_settable = True$/;"	v	class:CheckedInt
cmd_line_settable	./python/m5/params.py	/^    cmd_line_settable = True$/;"	v	class:Enum
cmd_line_settable	./python/m5/params.py	/^    cmd_line_settable = True$/;"	v	class:EthernetAddr
cmd_line_settable	./python/m5/params.py	/^    cmd_line_settable = True$/;"	v	class:Float
cmd_line_settable	./python/m5/params.py	/^    cmd_line_settable = True$/;"	v	class:IpAddress
cmd_line_settable	./python/m5/params.py	/^    cmd_line_settable = True$/;"	v	class:IpNetmask
cmd_line_settable	./python/m5/params.py	/^    cmd_line_settable = True$/;"	v	class:IpWithPort
cmd_line_settable	./python/m5/params.py	/^    cmd_line_settable = True$/;"	v	class:MemoryBandwidth
cmd_line_settable	./python/m5/params.py	/^    cmd_line_settable = True$/;"	v	class:NetworkBandwidth
cmd_line_settable	./python/m5/params.py	/^    cmd_line_settable = True$/;"	v	class:String
cmd_line_settable	./python/m5/params.py	/^    cmd_line_settable = True$/;"	v	class:TickParamValue
cmdline	./arch/arm/linux/atag.hh	/^    void cmdline(const std::string &s)$/;"	f	class:AtagCmdline
cmdsts	./dev/net/ns_gige_reg.h	/^    uint32_t cmdsts;  \/* command\/status field *\/$/;"	m	struct:ns_desc32
cmdsts	./dev/net/ns_gige_reg.h	/^    uint32_t cmdsts;  \/* command\/status field *\/$/;"	m	struct:ns_desc64
cmos	./dev/x86/SouthBridge.py	/^    cmos = Param.Cmos(_cmos, "CMOS memory and real time clock device")$/;"	v	class:SouthBridge
cmos	./dev/x86/south_bridge.hh	/^    X86ISA::Cmos * cmos;$/;"	m	class:SouthBridge
cmp128	./arch/arm/insts/fplib.cc	/^cmp128(uint64_t a0, uint64_t a1, uint64_t b0, uint64_t b1)$/;"	f	namespace:ArmISA
cmpAndSwap	./mem/cache/cache.cc	/^Cache::cmpAndSwap(CacheBlk *blk, PacketPtr pkt)$/;"	f	class:Cache
coId	./arch/mips/pra_constants.hh	/^    Bitfield<23, 16> coId;$/;"	m	namespace:MipsISA
coOp	./arch/mips/pra_constants.hh	/^    Bitfield<31, 24> coOp;$/;"	m	namespace:MipsISA
coProcID	./arch/mips/faults.hh	/^    int coProcID;$/;"	m	class:MipsISA::CoprocessorUnusableFault
coalesceMMIO	./cpu/kvm/vm.cc	/^KvmVM::coalesceMMIO(Addr start, int size)$/;"	f	class:KvmVM
coalesceMMIO	./cpu/kvm/vm.cc	/^KvmVM::coalesceMMIO(const AddrRange &range)$/;"	f	class:KvmVM
coalescedMMIO	./cpu/kvm/KvmVM.py	/^    coalescedMMIO = VectorParam.AddrRange([], "memory ranges for coalesced MMIO")$/;"	v	class:KvmVM
coalescedRxDesc	./dev/net/etherdevice.hh	/^    Stats::Formula coalescedRxDesc;$/;"	m	class:EtherDevice
coalescedRxIdle	./dev/net/etherdevice.hh	/^    Stats::Formula coalescedRxIdle;$/;"	m	class:EtherDevice
coalescedRxOk	./dev/net/etherdevice.hh	/^    Stats::Formula coalescedRxOk;$/;"	m	class:EtherDevice
coalescedRxOrn	./dev/net/etherdevice.hh	/^    Stats::Formula coalescedRxOrn;$/;"	m	class:EtherDevice
coalescedSwi	./dev/net/etherdevice.hh	/^    Stats::Formula coalescedSwi;$/;"	m	class:EtherDevice
coalescedTotal	./dev/net/etherdevice.hh	/^    Stats::Formula coalescedTotal;$/;"	m	class:EtherDevice
coalescedTxDesc	./dev/net/etherdevice.hh	/^    Stats::Formula coalescedTxDesc;$/;"	m	class:EtherDevice
coalescedTxIdle	./dev/net/etherdevice.hh	/^    Stats::Formula coalescedTxIdle;$/;"	m	class:EtherDevice
coalescedTxOk	./dev/net/etherdevice.hh	/^    Stats::Formula coalescedTxOk;$/;"	m	class:EtherDevice
cobol_main	./base/loader/coff_sym.h	/^    unsigned cobol_main:1;      \/* symbol is a cobol main procedure *\/$/;"	m	struct:ecoff_extsym
code	./arch/mips/faults.hh	/^        const ExcCode code;$/;"	m	struct:MipsISA::MipsFaultBase::FaultVals
code	./arch/mips/faults.hh	/^    ExcCode code() const { return MipsFault<TlbModifiedFault>::code(); }$/;"	f	class:MipsISA::TlbModifiedFault
code	./arch/mips/faults.hh	/^    ExcCode code() const { return vals.code; }$/;"	f	class:MipsISA::MipsFault
code	./arch/mips/faults.hh	/^    code() const$/;"	f	class:MipsISA::AddressErrorFault
code	./arch/mips/faults.hh	/^    code() const$/;"	f	class:MipsISA::TlbFault
code	./sim/init.hh	/^    const uint8_t *code;$/;"	m	struct:EmbeddedPython
code	./sim/sim_events.hh	/^    int code;$/;"	m	class:GlobalSimLoopExitEvent
code	./sim/sim_events.hh	/^    int code;$/;"	m	class:LocalSimLoopExitEvent
codeFormatter	./mem/slicc/parser.py	/^    def codeFormatter(self, *args, **kwargs):$/;"	m	class:SLICC
codeFormatter	./mem/slicc/symbols/SymbolTable.py	/^    def codeFormatter(self, *args, **kwargs):$/;"	m	class:SymbolTable
codeOrData	./arch/x86/regs/misc.hh	/^            Bitfield<43> codeOrData;$/;"	m	namespace:X86ISA
code_formatter	./python/m5/util/code_formatter.py	/^class code_formatter(object):$/;"	c
code_formatter_meta	./python/m5/util/code_formatter.py	/^class code_formatter_meta(type):$/;"	c
coerceSimObjectOrVector	./python/m5/SimObject.py	/^def coerceSimObjectOrVector(value):$/;"	f
coff_addr	./arch/alpha/ecoff_machdep.h	/^typedef uint64_t coff_addr;$/;"	t
coff_int	./arch/alpha/ecoff_machdep.h	/^typedef  int32_t coff_int;$/;"	t
coff_long	./arch/alpha/ecoff_machdep.h	/^typedef  int64_t coff_long;$/;"	t
coff_short	./arch/alpha/ecoff_machdep.h	/^typedef  int16_t coff_short;$/;"	t
coff_uint	./arch/alpha/ecoff_machdep.h	/^typedef uint32_t coff_uint;$/;"	t
coff_ulong	./arch/alpha/ecoff_machdep.h	/^typedef uint64_t coff_ulong;$/;"	t
coff_ushort	./arch/alpha/ecoff_machdep.h	/^typedef uint16_t coff_ushort;$/;"	t
colAllowedAt	./mem/dram_ctrl.hh	/^        Tick colAllowedAt;$/;"	m	class:DRAMCtrl::Bank
collateStats	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    virtual void collateStats() {}$/;"	f	class:BaseGarnetNetwork
collateStats	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.cc	/^GarnetNetwork_d::collateStats()$/;"	f	class:GarnetNetwork_d
collateStats	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^Router_d::collateStats()$/;"	f	class:Router_d
collateStats	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.cc	/^GarnetNetwork::collateStats()$/;"	f	class:GarnetNetwork
collateStats	./mem/ruby/network/simple/PerfectSwitch.cc	/^PerfectSwitch::collateStats()$/;"	f	class:PerfectSwitch
collateStats	./mem/ruby/network/simple/SimpleNetwork.cc	/^SimpleNetwork::collateStats()$/;"	f	class:SimpleNetwork
collateStats	./mem/ruby/network/simple/Switch.cc	/^Switch::collateStats()$/;"	f	class:Switch
collateStats	./mem/ruby/network/simple/Throttle.cc	/^Throttle::collateStats()$/;"	f	class:Throttle
collateStats	./mem/ruby/profiler/AddressProfiler.hh	/^    void collateStats() {}$/;"	f	class:AddressProfiler
collateStats	./mem/ruby/profiler/Profiler.cc	/^Profiler::collateStats()$/;"	f	class:Profiler
collateStats	./mem/ruby/slicc_interface/AbstractController.hh	/^    virtual void collateStats()$/;"	f	class:AbstractController
collateStats	./mem/ruby/system/RubySystem.hh	/^    void collateStats() { m_profiler->collateStats(); }$/;"	f	class:RubySystem
collective	./dev/net/dist_packet.hh	/^    enum class ReqType { immediate, collective, pending, none };$/;"	m	class:DistHeaderPkt::ReqType
color_names	./python/m5/util/terminal.py	/^color_names = "Black Red Green Yellow Blue Magenta Cyan".split()$/;"	v
cols	./dev/virtio/console.hh	/^        uint16_t cols;$/;"	m	struct:VirtIOConsole::Config
columnsPerRowBuffer	./mem/dram_ctrl.hh	/^    const uint32_t columnsPerRowBuffer;$/;"	m	class:DRAMCtrl
columnsPerStripe	./mem/dram_ctrl.hh	/^    const uint32_t columnsPerStripe;$/;"	m	class:DRAMCtrl
comInstEventQueue	./cpu/base.hh	/^    EventQueue **comInstEventQueue;$/;"	m	class:BaseCPU
comLoadEventQueue	./cpu/base.hh	/^    EventQueue **comLoadEventQueue;$/;"	m	class:BaseCPU
com_1	./dev/x86/Pc.py	/^    com_1 = Uart8250()$/;"	v	class:Pc
commPage	./arch/arm/freebsd/process.hh	/^    static const Addr commPage;$/;"	m	class:ArmFreebsdProcess32
commPage	./arch/arm/linux/process.cc	/^const Addr ArmLinuxProcess32::commPage = 0xffff0000;$/;"	m	class:ArmLinuxProcess32	file:
commPage	./arch/arm/linux/process.hh	/^    static const Addr commPage;$/;"	m	class:ArmLinuxProcess32
command	./dev/arm/hdlcd.hh	/^    CommandReg command;             \/**< Command register *\/$/;"	m	class:HDLcd
command	./dev/net/ns_gige.hh	/^    uint32_t    command;$/;"	m	struct:dp_regs
command	./dev/net/sinic.cc	/^Device::command(uint32_t command)$/;"	f	class:Sinic::Device
command	./dev/pci/copy_engine_defs.hh	/^    CHANCMD command;$/;"	m	struct:CopyEngineReg::ChanRegs
command	./dev/pci/copy_engine_defs.hh	/^    uint32_t command;$/;"	m	struct:CopyEngineReg::DmaDesc
command	./dev/pci/pcireg.h	/^        uint16_t command;$/;"	m	struct:PCIConfig::__anon26
command	./dev/storage/ide_ctrl.hh	/^            BMICommandReg command;$/;"	m	struct:IdeController::Channel::BMIRegs
command	./dev/storage/ide_disk.hh	/^    uint8_t command;$/;"	m	struct:CommandReg
commandByte	./dev/x86/i8042.hh	/^    CommandByte commandByte;$/;"	m	class:X86ISA::I8042
commandDescBaseAddrHi	./dev/arm/ufs_device.hh	/^        uint32_t commandDescBaseAddrHi;$/;"	m	struct:UFSHostDevice::UTPTransferReqDesc
commandDescBaseAddrLo	./dev/arm/ufs_device.hh	/^        uint32_t commandDescBaseAddrLo;$/;"	m	struct:UFSHostDevice::UTPTransferReqDesc
commandHandler	./dev/arm/ufs_device.cc	/^UFSHostDevice::commandHandler()$/;"	f	class:UFSHostDevice
commandInfo	./mem/packet.cc	/^MemCmd::commandInfo[] =$/;"	m	class:MemCmd	file:
commandInfo	./mem/packet.hh	/^    static const CommandInfo commandInfo[];$/;"	m	class:MemCmd
commandLast	./dev/x86/i8042.hh	/^        Bitfield<3> commandLast;$/;"	m	class:X86ISA::I8042
commandLine	./arch/x86/linux/system.hh	/^    std::string commandLine;$/;"	m	class:LinuxX86System
commandPort	./dev/x86/i8042.hh	/^    Addr commandPort;$/;"	m	class:X86ISA::I8042
commandUPIU	./dev/arm/ufs_device.hh	/^        uint8_t commandUPIU[128];$/;"	m	struct:UFSHostDevice::UTPTransferCMDDesc
command_port	./dev/x86/I8042.py	/^    command_port = Param.Addr('Command\/status port address')$/;"	v	class:I8042
commentRE	./arch/isa_parser.py	/^commentRE = re.compile(r'(^)?[^\\S\\n]*\/(?:\\*(.*?)\\*\/[^\\S\\n]*|\/[^\\n]*)($)?',$/;"	v
commit	./cpu/minor/execute.cc	/^Execute::commit(bool only_commit_microops, bool discard, BranchData &branch)$/;"	f	class:Minor::Execute
commit	./cpu/o3/commit.hh	/^        DefaultCommit<Impl> *commit;$/;"	m	class:DefaultCommit::TrapEvent
commit	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::commit()$/;"	f	class:DefaultCommit
commit	./cpu/o3/cpu.hh	/^    typename CPUPolicy::Commit commit;$/;"	m	class:FullO3CPU
commit	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::commit(const InstSeqNum &inst, ThreadID tid)$/;"	f	class:InstructionQueue
commit	./cpu/o3/probe/elastic_trace.hh	/^        bool commit;$/;"	m	struct:ElasticTrace::TraceInfo
commit	./cpu/o3/rename.hh	/^        bool commit;$/;"	m	struct:DefaultRename::Stalls
commitComm	./cpu/o3/comm.hh	/^    struct commitComm {$/;"	s	struct:TimeBufStruct
commitDrained	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::commitDrained(ThreadID tid)$/;"	f	class:FullO3CPU
commitEligibleSamples	./cpu/o3/commit.hh	/^    Stats::Scalar commitEligibleSamples;$/;"	m	class:DefaultCommit
commitHead	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::commitHead(DynInstPtr &head_inst, unsigned inst_num)$/;"	f	class:DefaultCommit
commitInfo	./cpu/o3/comm.hh	/^    commitComm commitInfo[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
commitInst	./cpu/minor/execute.cc	/^Execute::commitInst(MinorDynInstPtr inst, bool early_memory_issue,$/;"	f	class:Minor::Execute
commitInsts	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::commitInsts()$/;"	f	class:DefaultCommit
commitLimit	./cpu/minor/execute.hh	/^    unsigned int commitLimit;$/;"	m	class:Minor::Execute
commitLoad	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::commitLoad()$/;"	f	class:LSQUnit
commitLoads	./cpu/o3/lsq.hh	/^    void commitLoads(InstSeqNum &youngest_inst, ThreadID tid)$/;"	f	class:LSQ
commitLoads	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::commitLoads(InstSeqNum &youngest_inst)$/;"	f	class:LSQUnit
commitNonSpecStalls	./cpu/o3/commit.hh	/^    Stats::Scalar commitNonSpecStalls;$/;"	m	class:DefaultCommit
commitPolicy	./cpu/o3/commit.hh	/^    CommitPolicy commitPolicy;$/;"	m	class:DefaultCommit
commitRenameMap	./cpu/o3/cpu.hh	/^    typename CPUPolicy::RenameMap commitRenameMap[Impl::MaxThreads];$/;"	m	class:FullO3CPU
commitSquashedInsts	./cpu/o3/commit.hh	/^    Stats::Scalar commitSquashedInsts;$/;"	m	class:DefaultCommit
commitStatus	./cpu/o3/commit.hh	/^    ThreadStatus commitStatus[Impl::MaxThreads];$/;"	m	class:DefaultCommit
commitStores	./cpu/o3/lsq.hh	/^    void commitStores(InstSeqNum &youngest_inst, ThreadID tid)$/;"	f	class:LSQ
commitStores	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::commitStores(InstSeqNum &youngest_inst)$/;"	f	class:LSQUnit
commitTick	./cpu/o3/dyn_inst.hh	/^    int32_t commitTick;$/;"	m	class:BaseO3DynInst
commitTick	./cpu/o3/probe/elastic_trace.hh	/^        Tick commitTick;$/;"	m	struct:ElasticTrace::TraceInfo
commitToDecodeDelay	./cpu/o3/O3CPU.py	/^    commitToDecodeDelay = Param.Cycles(1, "Commit to decode delay")$/;"	v	class:DerivO3CPU
commitToDecodeDelay	./cpu/o3/decode.hh	/^    Cycles commitToDecodeDelay;$/;"	m	class:DefaultDecode
commitToFetchDelay	./cpu/o3/O3CPU.py	/^    commitToFetchDelay = Param.Cycles(1, "Commit to fetch delay")$/;"	v	class:DerivO3CPU
commitToFetchDelay	./cpu/o3/fetch.hh	/^    Cycles commitToFetchDelay;$/;"	m	class:DefaultFetch
commitToIEWDelay	./cpu/o3/O3CPU.py	/^    commitToIEWDelay = Param.Cycles(1, "Commit to "$/;"	v	class:DerivO3CPU
commitToIEWDelay	./cpu/o3/commit.hh	/^    const Cycles commitToIEWDelay;$/;"	m	class:DefaultCommit
commitToIEWDelay	./cpu/o3/iew.hh	/^    Cycles commitToIEWDelay;$/;"	m	class:DefaultIEW
commitToIEWDelay	./cpu/o3/inst_queue.hh	/^    Cycles commitToIEWDelay;$/;"	m	class:InstructionQueue
commitToRenameDelay	./cpu/o3/O3CPU.py	/^    commitToRenameDelay = Param.Cycles(1, "Commit to rename delay")$/;"	v	class:DerivO3CPU
commitToRenameDelay	./cpu/o3/rename.hh	/^    unsigned commitToRenameDelay;$/;"	m	class:DefaultRename
commitWidth	./cpu/o3/O3CPU.py	/^    commitWidth = Param.Unsigned(8, "Commit width")$/;"	v	class:DerivO3CPU
commitWidth	./cpu/o3/commit.hh	/^    const unsigned commitWidth;$/;"	m	class:DefaultCommit
commitWidth	./cpu/o3/rename.hh	/^    unsigned commitWidth;$/;"	m	class:DefaultRename
commit_ptr	./cpu/o3/rename.hh	/^    Commit *commit_ptr;$/;"	m	class:DefaultRename
committed	./cpu/o3/lsq_unit.hh	/^        bool committed;$/;"	m	struct:LSQUnit::SQEntry
committedInsts	./cpu/o3/cpu.hh	/^    Stats::Vector committedInsts;$/;"	m	class:FullO3CPU
committedOps	./cpu/o3/cpu.hh	/^    Stats::Vector committedOps;$/;"	m	class:FullO3CPU
committedStores	./cpu/o3/commit.hh	/^    bool committedStores[Impl::MaxThreads];$/;"	m	class:DefaultCommit
compDelay	./cpu/o3/probe/elastic_trace.hh	/^        int64_t compDelay;$/;"	m	struct:ElasticTrace::TraceInfo
compDelay	./cpu/trace/trace_cpu.hh	/^            uint64_t compDelay;$/;"	m	class:TraceCPU::ElasticDataGen::GraphNode
compDelayPhysRegDep	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::compDelayPhysRegDep(TraceInfo* past_record,$/;"	f	class:ElasticTrace
compDelayRob	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::compDelayRob(TraceInfo* past_record, TraceInfo* new_record)$/;"	f	class:ElasticTrace
compare	./cpu/thread_context.cc	/^ThreadContext::compare(ThreadContext *one, ThreadContext *two)$/;"	f	class:ThreadContext
compareTraceRecords	./mem/ruby/system/CacheRecorder.hh	/^compareTraceRecords(const TraceRecord* n1, const TraceRecord* n2)$/;"	f
compareValue	./dev/arm/generic_timer.hh	/^    uint64_t compareValue() const { return _counterLimit; }$/;"	f	class:ArchTimer
compareVersions	./python/m5/util/__init__.py	/^def compareVersions(v1, v2):$/;"	f
compileDate	./base/date.cc	/^const char *compileDate = __DATE__ " " __TIME__;$/;"	v
complete	./arch/arm/stage2_lookup.hh	/^    bool                    complete;$/;"	m	class:ArmISA::Stage2LookUp
complete	./base/chunk_generator.hh	/^    unsigned complete() const { return curAddr - startAddr; }$/;"	f	class:ChunkGenerator
complete	./cpu/o3/lsq_unit.hh	/^        inline bool complete() { return --outstanding == 0; }$/;"	f	class:LSQUnit::LSQSenderState
complete	./mem/mem_checker.hh	/^        Tick complete;  \/\/!< Completion of last write in cluster$/;"	m	class:MemChecker::WriteCluster
complete	./mem/mem_checker.hh	/^        Tick complete; \/\/!< Completion tick$/;"	m	class:MemChecker::Transaction
completeAcc	./cpu/o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::completeAcc(PacketPtr pkt)$/;"	f	class:BaseO3DynInst
completeAcc	./cpu/static_inst.hh	/^    virtual Fault completeAcc(Packet *pkt, ExecContext *xc,$/;"	f	class:StaticInst
completeBarrier	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::completeBarrier(DynInstPtr &inst)$/;"	f	class:MemDepUnit
completeDataAccess	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::completeDataAccess(PacketPtr pkt)$/;"	f	class:LSQUnit
completeDataAccess	./cpu/simple/timing.cc	/^TimingSimpleCPU::completeDataAccess(PacketPtr pkt)$/;"	f	class:TimingSimpleCPU
completeDrain	./arch/arm/table_walker.cc	/^TableWalker::completeDrain()$/;"	f	class:TableWalker
completeIfetch	./cpu/simple/timing.cc	/^TimingSimpleCPU::completeIfetch(PacketPtr pkt)$/;"	f	class:TimingSimpleCPU
completeMax	./mem/mem_checker.hh	/^        Tick completeMax;$/;"	m	class:MemChecker::WriteCluster
completeMemAccess	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::completeMemAccess(PacketPtr pkt)$/;"	f	class:TraceCPU::ElasticDataGen
completeMemBarrierInst	./cpu/minor/lsq.cc	/^LSQ::completeMemBarrierInst(MinorDynInstPtr inst,$/;"	f	class:Minor::LSQ
completeMemInst	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::completeMemInst(DynInstPtr &completed_inst)$/;"	f	class:InstructionQueue
completeRead	./mem/mem_checker.cc	/^MemChecker::ByteTracker::completeRead(MemChecker::Serial serial,$/;"	f	class:MemChecker::ByteTracker
completeRead	./mem/mem_checker.cc	/^MemChecker::completeRead(MemChecker::Serial serial, Tick complete,$/;"	f	class:MemChecker
completeRequest	./cpu/testers/memtest/memtest.cc	/^MemTest::completeRequest(PacketPtr pkt, bool functional)$/;"	f	class:MemTest
completeRequest	./cpu/testers/networktest/networktest.cc	/^NetworkTest::completeRequest(PacketPtr pkt)$/;"	f	class:NetworkTest
completeStore	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::completeStore(int store_idx)$/;"	f	class:LSQUnit
completeTick	./cpu/o3/dyn_inst.hh	/^    int32_t completeTick;$/;"	m	class:BaseO3DynInst
completeWrite	./mem/mem_checker.cc	/^MemChecker::ByteTracker::completeWrite(MemChecker::Serial serial, Tick complete)$/;"	f	class:MemChecker::ByteTracker
completeWrite	./mem/mem_checker.cc	/^MemChecker::WriteCluster::completeWrite(MemChecker::Serial serial, Tick _complete)$/;"	f	class:MemChecker::WriteCluster
completeWrite	./mem/mem_checker.hh	/^MemChecker::completeWrite(MemChecker::Serial serial, Tick complete,$/;"	f	class:MemChecker
completed	./cpu/o3/lsq_unit.hh	/^        bool completed;$/;"	m	struct:LSQUnit::SQEntry
completed	./cpu/o3/mem_dep_unit.hh	/^        bool completed;$/;"	m	class:MemDepUnit::MemDepEntry
completed	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::completed(DynInstPtr &inst)$/;"	f	class:MemDepUnit
completionAddr	./dev/pci/copy_engine_defs.hh	/^    uint64_t completionAddr;$/;"	m	struct:CopyEngineReg::ChanRegs
completionAddress	./dev/net/i8254xGBe.hh	/^        Addr completionAddress;$/;"	m	class:IGbE::TxDescCache
completionDataReg	./dev/pci/copy_engine.hh	/^        uint64_t completionDataReg;$/;"	m	class:CopyEngine::CopyEngineChannel
completionEnabled	./dev/net/i8254xGBe.hh	/^        bool completionEnabled;$/;"	m	class:IGbE::TxDescCache
completionEvent	./dev/dma_device.hh	/^        Event *completionEvent;$/;"	m	struct:DmaPort::DmaReqState
completionWriteback	./dev/net/i8254xGBe.hh	/^        void completionWriteback(Addr a, bool enabled) {$/;"	f	class:IGbE::TxDescCache
composeBitVector	./arch/x86/bios/smbios.cc	/^composeBitVector(T vec)$/;"	f
computeStats	./mem/cache/tags/base.hh	/^    virtual void computeStats() {}$/;"	f	class:BaseTags
computeStats	./mem/cache/tags/base_set_assoc.cc	/^BaseSetAssoc::computeStats()$/;"	f	class:BaseSetAssoc
conId	./base/cp_annotate.hh	/^    uint64_t conId;$/;"	m	class:CPA
concatAttrLists	./arch/isa_parser.py	/^    def concatAttrLists(self, attr_name):$/;"	m	class:OperandList
concatAttrStrings	./arch/isa_parser.py	/^    def concatAttrStrings(self, attr_name):$/;"	m	class:OperandList
concatSomeAttrLists	./arch/isa_parser.py	/^    def concatSomeAttrLists(self, filter, attr_name):$/;"	m	class:OperandList
concatSomeAttrStrings	./arch/isa_parser.py	/^    def concatSomeAttrStrings(self, filter, attr_name):$/;"	m	class:OperandList
cond	./arch/arm/types.hh	/^        Bitfield<7, 4> cond;$/;"	m	namespace:ArmISA
cond	./cpu/TimingExpr.py	/^    cond = Param.TimingExpr("condition expression")$/;"	v	class:TimingExprIf
cond	./cpu/timing_expr.hh	/^    TimingExpr *cond;$/;"	m	class:TimingExprIf
condCode	./arch/arm/insts/branch64.hh	/^    ConditionCode condCode;$/;"	m	class:ArmISA::BranchImmCond64
condCode	./arch/arm/insts/data64.hh	/^    ConditionCode condCode;$/;"	m	class:ArmISA::DataXCondCompImmOp
condCode	./arch/arm/insts/data64.hh	/^    ConditionCode condCode;$/;"	m	class:ArmISA::DataXCondCompRegOp
condCode	./arch/arm/insts/data64.hh	/^    ConditionCode condCode;$/;"	m	class:ArmISA::DataXCondSelOp
condCode	./arch/arm/insts/pred_inst.hh	/^    ConditionCode condCode;$/;"	m	class:ArmISA::PredOp
condCode	./arch/arm/insts/vfp.hh	/^    ConditionCode condCode;$/;"	m	class:ArmISA::FpCondCompRegOp
condCode	./arch/arm/insts/vfp.hh	/^    ConditionCode condCode;$/;"	m	class:ArmISA::FpCondSelOp
condCode	./arch/arm/types.hh	/^        Bitfield<31, 28> condCode;$/;"	m	namespace:ArmISA
condIncorrect	./cpu/pred/bpred_unit.hh	/^    Stats::Scalar condIncorrect;$/;"	m	class:BPredUnit
condOk	./arch/power/insts/branch.hh	/^    condOk(uint32_t cr) const$/;"	f	class:PowerISA::BranchCond
condPredicted	./cpu/pred/bpred_unit.hh	/^    Stats::Scalar condPredicted;$/;"	m	class:BPredUnit
cond_message	./base/misc.hh	189;"	d
cond_message_once	./base/misc.hh	194;"	d
conditionalSquash	./cpu/o3/thread_context.hh	/^    inline void conditionalSquash()$/;"	f	class:O3ThreadContext
confBase	./dev/pci/host.hh	/^    const Addr confBase;$/;"	m	class:GenericPciHost
confDeviceBits	./dev/pci/host.hh	/^    const uint8_t confDeviceBits;$/;"	m	class:GenericPciHost
confSize	./dev/pci/host.hh	/^    const Addr confSize;$/;"	m	class:GenericPciHost
confTableReported	./mem/abstract_mem.hh	/^    bool confTableReported;$/;"	m	class:AbstractMemory
conf_base	./dev/alpha/Tsunami.py	/^    conf_base = 0x801fe000000$/;"	v	class:TsunamiPChip
conf_base	./dev/pci/PciHost.py	/^    conf_base = Param.Addr("Config space base address")$/;"	v	class:GenericPciHost
conf_base	./dev/x86/Pc.py	/^    conf_base = 0xC000000000000000$/;"	v	class:PcPciHost
conf_device_bits	./dev/pci/PciHost.py	/^    conf_device_bits = Param.UInt8(8, "Number of bits used to as an "$/;"	v	class:GenericPciHost
conf_record_buff_per_vc	./mem/ruby/network/fault_model/FaultModel.hh	/^        conf_record_buff_per_vc,$/;"	e	enum:FaultModel::conf_record_format
conf_record_first_fault_type	./mem/ruby/network/fault_model/FaultModel.hh	/^        conf_record_first_fault_type,$/;"	e	enum:FaultModel::conf_record_format
conf_record_format	./mem/ruby/network/fault_model/FaultModel.hh	/^    enum conf_record_format$/;"	g	class:FaultModel
conf_record_last_fault_type	./mem/ruby/network/fault_model/FaultModel.hh	/^        conf_record_last_fault_type = conf_record_first_fault_type + number_of_fault_types - 1,$/;"	e	enum:FaultModel::conf_record_format
conf_record_vcs	./mem/ruby/network/fault_model/FaultModel.hh	/^        conf_record_vcs,$/;"	e	enum:FaultModel::conf_record_format
conf_size	./dev/alpha/Tsunami.py	/^    conf_size = "16MB"$/;"	v	class:TsunamiPChip
conf_size	./dev/pci/PciHost.py	/^    conf_size = Param.Addr("Config space base address")$/;"	v	class:GenericPciHost
conf_size	./dev/x86/Pc.py	/^    conf_size = "16MB"$/;"	v	class:PcPciHost
conf_table_reported	./dev/arm/RealView.py	/^                                  conf_table_reported = False)$/;"	v	class:VExpress_EMM
conf_table_reported	./mem/AbstractMemory.py	/^    conf_table_reported = Param.Bool(True, "Report to configuration table")$/;"	v	class:AbstractMemory
confdir	./python/m5/config.py	/^        confdir = joinpath(homedir, '.m5')$/;"	v
confdir	./python/m5/config.py	/^confdir = os.environ.get('M5_CONFIG')$/;"	v
confidence	./mem/cache/prefetch/stride.hh	/^        int confidence;$/;"	m	struct:StridePrefetcher::StrideEntry
config	./dev/net/ns_gige.hh	/^    uint32_t    config;$/;"	m	struct:dp_regs
config	./dev/pci/device.hh	/^    PCIConfig config;$/;"	m	class:PciDevice
config	./dev/virtio/block.hh	/^    Config config;$/;"	m	class:VirtIOBlock
config	./dev/virtio/console.hh	/^    Config config;$/;"	m	class:VirtIOConsole
config	./dev/virtio/fs9p.hh	/^    std::unique_ptr<Config> config;$/;"	m	class:VirtIO9PBase
configAddress	./arch/x86/tlb.hh	/^        uint32_t configAddress;$/;"	m	class:X86ISA::TLB
configCP	./arch/mips/isa.cc	/^ISA::configCP()$/;"	f	class:MipsISA::ISA
configDelay	./dev/pci/device.hh	/^    Tick configDelay;$/;"	m	class:PciDevice
configFile	./cpu/testers/traffic_gen/traffic_gen.hh	/^    const std::string configFile;$/;"	m	class:TrafficGen
configFile	./sim/cxx_manager.hh	/^    CxxConfigFileBase &configFile;$/;"	m	class:CxxConfigManager
configManager	./sim/cxx_manager.hh	/^        CxxConfigManager &configManager;$/;"	m	class:CxxConfigManager::SimObjectResolver
configSize	./dev/virtio/base.hh	/^    const size_t configSize;$/;"	m	class:VirtIODeviceBase
config_file	./cpu/testers/traffic_gen/TrafficGen.py	/^    config_file = Param.String("Configuration file describing the behaviour")$/;"	v	class:TrafficGen
config_latency	./dev/pci/PciDevice.py	/^    config_latency = Param.Latency('20ns', "Config read or write latency")$/;"	v	class:PciDevice
config_value	./python/m5/SimObject.py	/^    def config_value(self):$/;"	f
config_value	./python/m5/params.py	/^    def config_value(self):$/;"	m	class:Bool
config_value	./python/m5/params.py	/^    def config_value(self):$/;"	m	class:Clock
config_value	./python/m5/params.py	/^    def config_value(self):$/;"	m	class:Float
config_value	./python/m5/params.py	/^    def config_value(self):$/;"	m	class:Frequency
config_value	./python/m5/params.py	/^    def config_value(self):$/;"	m	class:Latency
config_value	./python/m5/params.py	/^    def config_value(self):$/;"	m	class:MemoryBandwidth
config_value	./python/m5/params.py	/^    def config_value(self):$/;"	m	class:NetworkBandwidth
config_value	./python/m5/params.py	/^    def config_value(self):$/;"	m	class:NullSimObject
config_value	./python/m5/params.py	/^    def config_value(self):$/;"	m	class:NumericParamValue
config_value	./python/m5/params.py	/^    def config_value(self):$/;"	m	class:ParamValue
config_value	./python/m5/params.py	/^    def config_value(self):$/;"	m	class:VectorParamValue
configurations	./mem/ruby/network/fault_model/FaultModel.hh	/^    std::vector <system_conf> configurations;$/;"	m	class:FaultModel
conflictingLoads	./cpu/o3/mem_dep_unit.hh	/^    Stats::Scalar conflictingLoads;$/;"	m	class:MemDepUnit
conflictingStores	./cpu/o3/mem_dep_unit.hh	/^    Stats::Scalar conflictingStores;$/;"	m	class:MemDepUnit
connect	./dev/net/tcp_iface.cc	/^TCPIface::connect()$/;"	f	class:TCPIface
connect	./kern/tru64/tru64_syscalls.hh	/^        connect = 98,$/;"	e	enum:SystemCalls::__anon102
connect	./python/m5/params.py	/^    def connect(self, other):$/;"	m	class:PortRef
connect	./python/m5/params.py	/^    def connect(self, other):$/;"	m	class:VectorPortRef
connect	./python/m5/params.py	/^    def connect(self, simobj, ref):$/;"	m	class:Port
connectAllPorts	./cpu/BaseCPU.py	/^    def connectAllPorts(self, cached_bus, uncached_bus = None):$/;"	f
connectCachedPorts	./cpu/BaseCPU.py	/^    def connectCachedPorts(self, bus):$/;"	f
connectMemPorts	./cpu/checker/thread_context.hh	/^    void connectMemPorts(ThreadContext *tc)$/;"	f	class:CheckerThreadContext
connectPorts	./python/m5/SimObject.py	/^    def connectPorts(self):$/;"	f
connectPorts	./python/swig/pyobject.cc	/^connectPorts(SimObject *o1, const std::string &name1, int i1,$/;"	f
connectSocket	./dev/virtio/fs9p.cc	/^VirtIO9PSocket::connectSocket()$/;"	f	class:VirtIO9PSocket
connectUncachedPorts	./cpu/BaseCPU.py	/^    def connectUncachedPorts(self, bus):$/;"	f
console	./arch/alpha/AlphaSystem.py	/^    console = Param.String("file that contains the console code")$/;"	v	class:AlphaSystem
console	./arch/alpha/stacktrace.hh	/^        console = 2,$/;"	e	enum:AlphaISA::StackTrace::__anon49
console	./arch/alpha/system.hh	/^    ObjectFile *console;$/;"	m	class:AlphaSystem
console	./arch/mips/MipsSystem.py	/^    console = Param.String("file that contains the console code")$/;"	v	class:MipsSystem
console	./arch/mips/stacktrace.hh	/^    static const int console = 2;$/;"	m	class:MipsISA::StackTrace
console	./arch/mips/system.hh	/^    ObjectFile *console;$/;"	m	class:MipsSystem
console	./arch/power/stacktrace.hh	/^    static const int console = 2;$/;"	m	class:PowerISA::StackTrace
console	./arch/x86/stacktrace.hh	/^        static const int console = 2;$/;"	m	class:X86ISA::StackTrace
consoleData	./dev/alpha/backdoor.hh	/^        uint8_t *consoleData;$/;"	m	union:AlphaBackdoor::__anon16
consolePanicEvent	./arch/alpha/system.hh	/^    BreakPCEvent *consolePanicEvent;$/;"	m	class:AlphaSystem
consolePanicEvent	./arch/mips/system.hh	/^    BreakPCEvent *consolePanicEvent;$/;"	m	class:MipsSystem
consoleSymtab	./arch/alpha/system.hh	/^    SymbolTable *consoleSymtab;$/;"	m	class:AlphaSystem
consoleSymtab	./arch/mips/system.hh	/^    SymbolTable *consoleSymtab;$/;"	m	class:MipsSystem
console_in	./dev/terminal.cc	/^Terminal::console_in()$/;"	f	class:Terminal
constUDelaySkipEvent	./arch/arm/freebsd/system.hh	/^    FreeBSD::UDelayEvent *constUDelaySkipEvent;$/;"	m	class:FreebsdArmSystem
constUDelaySkipEvent	./arch/arm/linux/system.hh	/^    Linux::UDelayEvent *constUDelaySkipEvent;$/;"	m	class:LinuxArmSystem
const_iterator	./base/addr_range_map.hh	/^    typedef typename RangeMap::const_iterator const_iterator;$/;"	t	class:AddrRangeMap
const_iterator	./cpu/pc_event.hh	/^    typedef map_t::const_iterator const_iterator;$/;"	t	class:PCEventQueue
const_iterator	./dev/net/pktfifo.hh	/^    typedef fifo_list::const_iterator const_iterator;$/;"	t	class:PacketFifo
const_range_t	./cpu/pc_event.hh	/^    typedef std::pair<const_iterator, const_iterator> const_range_t;$/;"	t	class:PCEventQueue
constant	./base/statistics.hh	/^constant(T val)$/;"	f	namespace:Stats
constantVector	./base/statistics.hh	/^constantVector(T val)$/;"	f	namespace:Stats
consume	./cpu/profile.cc	/^FunctionProfile::consume(const vector<Addr> &stack)$/;"	f	class:FunctionProfile
consume	./cpu/profile.hh	/^FunctionProfile::consume(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:FunctionProfile
consumeByte	./arch/x86/decoder.hh	/^    void consumeByte()$/;"	f	class:X86ISA::Decoder
consumeBytes	./arch/arm/decoder.cc	/^Decoder::consumeBytes(int numBytes)$/;"	f	class:ArmISA::Decoder
consumeBytes	./arch/x86/decoder.hh	/^    void consumeBytes(int numBytes)$/;"	f	class:X86ISA::Decoder
consumeDescriptor	./dev/virtio/base.cc	/^VirtQueue::consumeDescriptor()$/;"	f	class:VirtQueue
consumeLink	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.hh	/^    inline flit_d* consumeLink()    { return linkBuffer->getTopFlit(); }$/;"	f	class:NetworkLink_d
consumeLink	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.cc	/^NetworkLink::consumeLink()$/;"	f	class:NetworkLink
consumerInst	./cpu/o3/iew.hh	/^    Stats::Vector consumerInst;$/;"	m	class:DefaultIEW
cont	./base/cprintf.hh	/^    bool cont;$/;"	m	struct:cp::Print
contained	./unittest/bituniontest.cc	/^    Contained contained;$/;"	m	struct:__anon1::ContainingStruct	file:
containingFunc	./unittest/bituniontest.cc	/^containingFunc(uint64_t init_val, uint64_t fieldVal)$/;"	f	namespace:__anon1
contains	./base/addr_range.hh	/^    bool contains(const Addr& a) const$/;"	f	class:AddrRange
containsAddrRangeOf	./cpu/minor/lsq.cc	/^LSQ::LSQRequest::containsAddrRangeOf($/;"	f	class:Minor::LSQ::LSQRequest
containsAddrRangeOf	./cpu/minor/lsq.cc	/^LSQ::LSQRequest::containsAddrRangeOf(LSQRequestPtr other_request)$/;"	f	class:Minor::LSQ::LSQRequest
contents	./arch/x86/linux/process.cc	/^    Bitfield<2, 1> contents;$/;"	v
context	./arch/alpha/kernel_stats.cc	/^Statistics::context(Addr oldpcbb, Addr newpcbb, ThreadContext *tc)$/;"	f	class:AlphaISA::Kernel::Statistics
context	./base/remote_gdb.hh	/^    ThreadContext *context;$/;"	m	class:BaseRemoteGDB
contextId	./arch/sparc/pagetable.hh	/^    int contextId;$/;"	m	struct:SparcISA::TlbRange
contextId	./cpu/base_dyn_inst.hh	/^    ContextID contextId() const { return thread->contextId(); }$/;"	f	class:BaseDynInst
contextId	./cpu/checker/thread_context.hh	/^    ContextID contextId() const { return actualTC->contextId(); }$/;"	f	class:CheckerThreadContext
contextId	./cpu/minor/exec_context.hh	/^    ContextID contextId() { return thread.contextId(); }$/;"	f	class:Minor::ExecContext
contextId	./cpu/o3/thread_context.hh	/^    virtual ContextID contextId() const { return thread->contextId(); }$/;"	f	class:O3ThreadContext
contextId	./cpu/thread_context.hh	/^    int contextId() const { return actualTC->contextId(); }$/;"	f	class:ProxyThreadContext
contextId	./cpu/thread_state.hh	/^    ContextID contextId() const { return _contextId; }$/;"	f	struct:ThreadState
contextId	./mem/abstract_mem.hh	/^    const ContextID contextId;$/;"	m	class:LockedAddr
contextId	./mem/cache/blk.hh	/^        ContextID contextId;     \/\/ locking context$/;"	m	class:CacheBlk::Lock
contextId	./mem/request.hh	/^    contextId() const$/;"	f	class:Request
contextIds	./sim/process.hh	/^    std::vector<ContextID> contextIds;$/;"	m	class:Process
contiguousHint	./arch/arm/table_walker.hh	/^        bool contiguousHint() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
continueProcessing	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::continueProcessing()$/;"	f	class:CopyEngine::CopyEngineChannel
continued	./base/loader/coff_sym.h	/^    unsigned continued : 1; \/* indicates additional TQ info in next AUX *\/$/;"	m	struct:__anon112
control	./dev/arm/generic_timer.hh	/^    uint32_t control() const { return _control; }$/;"	f	class:ArchTimer
control	./dev/arm/kmi.hh	/^    ControlReg control;$/;"	m	class:Pl050
control	./dev/arm/pl011.hh	/^    uint16_t control;$/;"	m	class:Pl011
control	./dev/arm/timer_sp804.hh	/^        CTRL control;$/;"	m	class:Sp804::Timer
controlPage	./dev/arm/ufs_device.cc	/^const unsigned int UFSHostDevice::UFSSCSIDevice::controlPage[3] =$/;"	m	class:UFSHostDevice::UFSSCSIDevice	file:
controlPage	./dev/arm/ufs_device.hh	/^        static const unsigned int controlPage[3];$/;"	m	class:UFSHostDevice::UFSSCSIDevice
controlVal	./dev/x86/speaker.hh	/^    SpeakerControl controlVal;$/;"	m	class:X86ISA::Speaker
control_msg_size	./mem/ruby/network/Network.py	/^    control_msg_size = Param.Int(8, "")$/;"	v	class:RubyNetwork
controller	./mem/ruby/slicc_interface/AbstractController.hh	/^        AbstractController *controller;$/;"	m	class:AbstractController::MemoryPort
conutdm	./arch/mips/dt_constants.hh	/^    Bitfield<25>     conutdm;$/;"	m	namespace:MipsISA
conv	./dev/arm/hdlcd.hh	/^    PixelConverter conv;$/;"	m	class:HDLcd
convX87TagsToXTags	./arch/x86/utility.cc	/^convX87TagsToXTags(uint16_t ftw)$/;"	f	namespace:X86ISA
convX87XTagsToTags	./arch/x86/utility.cc	/^convX87XTagsToTags(uint8_t ftwx)$/;"	f	namespace:X86ISA
convert	./kern/tru64/tru64_syscalls.hh	/^    static int convert(int syscall_num) {$/;"	f	class:SystemCalls
convert	./python/m5/params.py	/^    def convert(self, value):$/;"	m	class:ParamDesc
convert	./python/m5/params.py	/^    def convert(self, value):$/;"	m	class:VectorParamDesc
convert	./python/m5/util/code_formatter.py	/^        def convert(match):$/;"	f	function:code_formatter.__call__
convert	./python/m5/util/smartdict.py	/^    def convert(self, other):$/;"	m	class:Variable
convertLlToRead	./mem/packet.hh	/^    convertLlToRead()$/;"	f	class:Packet
convertScToWrite	./mem/packet.hh	/^    convertScToWrite()$/;"	f	class:Packet
convertScanCodes	./dev/x86/i8042.hh	/^        Bitfield<6> convertScanCodes;$/;"	m	class:X86ISA::I8042
convertStat64Buf	./sim/syscall_emul.hh	/^convertStat64Buf(target_stat &tgt, host_stat64 *host, bool fakeTTY = false)$/;"	f
convertStatBuf	./sim/syscall_emul.hh	/^convertStatBuf(target_stat &tgt, host_stat *host, bool fakeTTY = false)$/;"	f
converter	./dev/arm/pl111.hh	/^    PixelConverter converter;$/;"	m	class:Pl111
copiesProcessed	./dev/pci/copy_engine.hh	/^    Stats::Vector copiesProcessed;$/;"	m	class:CopyEngine
copt	./base/loader/coff_sym.h	/^    coff_int    copt;           \/* count of file's optimization entries *\/$/;"	m	struct:ecoff_fdr
copy	./base/pollevent.cc	/^PollQueue::copy()$/;"	f	class:PollQueue
copy	./base/refcnt.hh	/^    copy(T *d)$/;"	f	class:RefCountingPtr
copy	./python/m5/util/region.py	/^    def copy(self):$/;"	m	class:Regions
copy	./python/m5/util/sorteddict.py	/^    def copy(self):$/;"	m	class:SortedDict
copyArchRegs	./cpu/checker/thread_context.hh	/^    void copyArchRegs(ThreadContext *tc)$/;"	f	class:CheckerThreadContext
copyArchRegs	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::copyArchRegs(ThreadContext *tc)$/;"	f	class:O3ThreadContext
copyArchRegs	./cpu/simple_thread.cc	/^SimpleThread::copyArchRegs(ThreadContext *src_tc)$/;"	f	class:SimpleThread
copyArchRegs	./cpu/thread_context.hh	/^    void copyArchRegs(ThreadContext *tc) { actualTC->copyArchRegs(tc); }$/;"	f	class:ProxyThreadContext
copyBuffer	./dev/pci/copy_engine.hh	/^        uint8_t *copyBuffer;$/;"	m	class:CopyEngine::CopyEngineChannel
copyError	./mem/packet.hh	/^    void copyError(Packet *pkt) { assert(pkt->isError()); cmd = pkt->cmd; }$/;"	f	class:Packet
copyIn	./base/framebuffer.cc	/^FrameBuffer::copyIn(const uint8_t *fb, const PixelConverter &conv)$/;"	f	class:FrameBuffer
copyIn	./base/framebuffer.hh	/^    void copyIn(const std::vector<uint8_t> &fb, const PixelConverter &conv) {$/;"	f	class:FrameBuffer
copyIn	./sim/syscall_emul_buf.hh	/^    bool copyIn(SETranslatingPortProxy &memproxy)$/;"	f	class:BaseBufferArg
copyIprs	./arch/alpha/ev5.cc	/^copyIprs(ThreadContext *src, ThreadContext *dest)$/;"	f	namespace:AlphaISA
copyMiscRegs	./arch/alpha/utility.cc	/^copyMiscRegs(ThreadContext *src, ThreadContext *dest)$/;"	f	namespace:AlphaISA
copyMiscRegs	./arch/arm/utility.hh	/^copyMiscRegs(ThreadContext *src, ThreadContext *dest)$/;"	f	namespace:ArmISA
copyMiscRegs	./arch/mips/utility.cc	/^copyMiscRegs(ThreadContext *src, ThreadContext *dest)$/;"	f	namespace:MipsISA
copyMiscRegs	./arch/power/utility.hh	/^copyMiscRegs(ThreadContext *src, ThreadContext *dest)$/;"	f	namespace:PowerISA
copyMiscRegs	./arch/sparc/utility.cc	/^copyMiscRegs(ThreadContext *src, ThreadContext *dest)$/;"	f	namespace:SparcISA
copyMiscRegs	./arch/x86/utility.cc	/^copyMiscRegs(ThreadContext *src, ThreadContext *dest)$/;"	f	namespace:X86ISA
copyOut	./arch/arm/linux/atag.hh	/^    uint32_t copyOut(uint8_t *p)$/;"	f	class:AtagHeader
copyOut	./base/framebuffer.cc	/^FrameBuffer::copyOut(uint8_t *fb, const PixelConverter &conv) const$/;"	f	class:FrameBuffer
copyOut	./base/framebuffer.hh	/^    void copyOut(std::vector<uint8_t> &fb, const PixelConverter &conv) const {$/;"	f	class:FrameBuffer
copyOut	./sim/syscall_emul_buf.hh	/^    bool copyOut(SETranslatingPortProxy &memproxy)$/;"	f	class:BaseBufferArg
copyOutStat64Buf	./sim/syscall_emul.hh	/^copyOutStat64Buf(SETranslatingPortProxy &mem, Addr addr,$/;"	f
copyOutStatBuf	./sim/syscall_emul.hh	/^copyOutStatBuf(SETranslatingPortProxy &mem, Addr addr,$/;"	f
copyOutStatfsBuf	./kern/tru64/tru64.hh	/^    copyOutStatfsBuf(SETranslatingPortProxy &mem, Addr addr,$/;"	f	class:Tru64
copyOutStatfsBuf	./kern/tru64/tru64.hh	/^    static void copyOutStatfsBuf(SETranslatingPortProxy &mem, Addr addr,$/;"	f	class:Tru64_F64
copyOutStatfsBuf	./kern/tru64/tru64.hh	/^    static void copyOutStatfsBuf(SETranslatingPortProxy &mem, Addr addr,$/;"	f	class:Tru64_PreF64
copyPartial	./mem/ruby/common/DataBlock.hh	/^DataBlock::copyPartial(const DataBlock & dblk, int offset, int len)$/;"	f	class:DataBlock
copyRegs	./arch/alpha/utility.cc	/^copyRegs(ThreadContext *src, ThreadContext *dest)$/;"	f	namespace:AlphaISA
copyRegs	./arch/arm/utility.cc	/^copyRegs(ThreadContext *src, ThreadContext *dest)$/;"	f	namespace:ArmISA
copyRegs	./arch/mips/utility.cc	/^copyRegs(ThreadContext *src, ThreadContext *dest)$/;"	f	namespace:MipsISA
copyRegs	./arch/power/utility.cc	/^copyRegs(ThreadContext *src, ThreadContext *dest)$/;"	f	namespace:PowerISA
copyRegs	./arch/sparc/utility.cc	/^copyRegs(ThreadContext *src, ThreadContext *dest)$/;"	f	namespace:SparcISA
copyRegs	./arch/x86/utility.cc	/^copyRegs(ThreadContext *src, ThreadContext *dest)$/;"	f	namespace:X86ISA
copyResult	./cpu/checker/cpu_impl.hh	/^Checker<Impl>::copyResult(DynInstPtr &inst, uint64_t mismatch_val,$/;"	f	class:Checker
copyState	./cpu/simple_thread.cc	/^SimpleThread::copyState(ThreadContext *oldContext)$/;"	f	class:SimpleThread
copyStringArray	./sim/process_impl.hh	/^copyStringArray(std::vector<std::string> &strings,$/;"	f
copyout	./dev/net/pktfifo.cc	/^PacketFifo::copyout(void *dest, unsigned offset, unsigned len)$/;"	f	class:PacketFifo
copypal	./arch/alpha/osfpal.hh	/^        copypal = 0xbf,$/;"	e	enum:PAL::__anon50
count	./arch/arm/faults.hh	/^        FaultStat count;$/;"	m	struct:ArmISA::ArmFault::FaultVals
count	./arch/sparc/faults.hh	/^        FaultStat count;$/;"	m	struct:SparcISA::SparcFaultBase::FaultVals
count	./arch/x86/regs/misc.hh	/^        Bitfield<36, 32> count; \/\/ Parameter Count$/;"	m	namespace:X86ISA
count	./arch/x86/regs/misc.hh	/^        Bitfield<7, 0> count; \/\/ Number of error reporting register banks$/;"	m	namespace:X86ISA
count	./base/loader/coff_sym.h	/^    coff_int    count;          \/* count of ranges for variant arm *\/$/;"	m	union:__anon115
count	./base/refcnt.hh	/^    mutable int count;$/;"	m	class:RefCounted
count	./cpu/FuncUnit.py	/^    count = Param.Int("number of these FU's available")$/;"	v	class:FUDesc
count	./cpu/o3/FuncUnitConfig.py	/^    count = 0$/;"	v	class:ReadPort
count	./cpu/o3/FuncUnitConfig.py	/^    count = 0$/;"	v	class:WritePort
count	./cpu/o3/FuncUnitConfig.py	/^    count = 1$/;"	v	class:IprPort
count	./cpu/o3/FuncUnitConfig.py	/^    count = 2$/;"	v	class:FP_MultDiv
count	./cpu/o3/FuncUnitConfig.py	/^    count = 4$/;"	v	class:FP_ALU
count	./cpu/o3/FuncUnitConfig.py	/^    count = 4$/;"	v	class:RdWrPort
count	./cpu/o3/FuncUnitConfig.py	/^    count = 4$/;"	v	class:SIMD_Unit
count	./cpu/o3/FuncUnitConfig.py	/^    count = 6$/;"	v	class:IntALU
count	./cpu/o3/FuncUnitConfig.py	/^    count=2$/;"	v	class:IntMultDiv
count	./cpu/o3/inst_queue.hh	/^    unsigned count[Impl::MaxThreads];$/;"	m	class:InstructionQueue
count	./cpu/profile.hh	/^    Counter count;$/;"	m	class:ProfileNode
count	./cpu/simple/probes/simpoint.hh	/^        uint64_t count;$/;"	m	struct:SimPoint::BBInfo
count	./mem/ruby/common/NetDest.cc	/^NetDest::count() const$/;"	f	class:NetDest
count	./mem/ruby/common/Set.hh	/^    int count() const { return bits.count(); }$/;"	f	class:Set
count	./sim/sim_events.hh	/^    int count;$/;"	m	class:CountedDrainEvent
countBoolVec	./mem/ruby/slicc_interface/RubySlicc_Util.hh	/^countBoolVec(BoolVec bVec)$/;"	f
countCycles	./sim/ticked_object.hh	/^    virtual void countCycles(Cycles delta) {}$/;"	f	class:Ticked
countInst	./cpu/simple/base.cc	/^BaseSimpleCPU::countInst()$/;"	f	class:BaseSimpleCPU
countInsts	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::countInsts()$/;"	f	class:InstructionQueue
countInsts	./cpu/o3/rob_impl.hh	/^ROB<Impl>::countInsts()$/;"	f	class:ROB
countInsts	./cpu/o3/rob_impl.hh	/^ROB<Impl>::countInsts(ThreadID tid)$/;"	f	class:ROB
countInt	./dev/arm/ufs_device.hh	/^    uint32_t countInt;$/;"	m	class:UFSHostDevice
countIssuedStore	./cpu/minor/lsq.cc	/^LSQ::StoreBuffer::countIssuedStore(LSQRequestPtr request)$/;"	f	class:Minor::LSQ::StoreBuffer
countNumSeqPkts	./cpu/testers/traffic_gen/generators.hh	/^    unsigned int countNumSeqPkts;$/;"	m	class:DramGen
countPacketsAfter	./dev/net/pktfifo.hh	/^    int countPacketsAfter(const_iterator i) const$/;"	f	class:PacketFifo
countPacketsBefore	./dev/net/pktfifo.hh	/^    int countPacketsBefore(const_iterator i) const$/;"	f	class:PacketFifo
countReadStarvingForAddress	./mem/ruby/structures/PersistentTable.cc	/^PersistentTable::countReadStarvingForAddress(Addr address) const$/;"	f	class:PersistentTable
countStarvingForAddress	./mem/ruby/structures/PersistentTable.cc	/^PersistentTable::countStarvingForAddress(Addr address) const$/;"	f	class:PersistentTable
countStat	./arch/alpha/faults.hh	/^    FaultStat & countStat() {return _count;}$/;"	f	class:AlphaISA::AlignmentFault
countStat	./arch/alpha/faults.hh	/^    FaultStat & countStat() {return _count;}$/;"	f	class:AlphaISA::ArithmeticFault
countStat	./arch/alpha/faults.hh	/^    FaultStat & countStat() {return _count;}$/;"	f	class:AlphaISA::DtbAcvFault
countStat	./arch/alpha/faults.hh	/^    FaultStat & countStat() {return _count;}$/;"	f	class:AlphaISA::DtbAlignmentFault
countStat	./arch/alpha/faults.hh	/^    FaultStat & countStat() {return _count;}$/;"	f	class:AlphaISA::DtbPageFault
countStat	./arch/alpha/faults.hh	/^    FaultStat & countStat() {return _count;}$/;"	f	class:AlphaISA::FloatEnableFault
countStat	./arch/alpha/faults.hh	/^    FaultStat & countStat() {return _count;}$/;"	f	class:AlphaISA::IntegerOverflowFault
countStat	./arch/alpha/faults.hh	/^    FaultStat & countStat() {return _count;}$/;"	f	class:AlphaISA::InterruptFault
countStat	./arch/alpha/faults.hh	/^    FaultStat & countStat() {return _count;}$/;"	f	class:AlphaISA::ItbAcvFault
countStat	./arch/alpha/faults.hh	/^    FaultStat & countStat() {return _count;}$/;"	f	class:AlphaISA::ItbPageFault
countStat	./arch/alpha/faults.hh	/^    FaultStat & countStat() {return _count;}$/;"	f	class:AlphaISA::MachineCheckFault
countStat	./arch/alpha/faults.hh	/^    FaultStat & countStat() {return _count;}$/;"	f	class:AlphaISA::NDtbMissFault
countStat	./arch/alpha/faults.hh	/^    FaultStat & countStat() {return _count;}$/;"	f	class:AlphaISA::PDtbMissFault
countStat	./arch/alpha/faults.hh	/^    FaultStat & countStat() {return _count;}$/;"	f	class:AlphaISA::PalFault
countStat	./arch/alpha/faults.hh	/^    FaultStat & countStat() {return _count;}$/;"	f	class:AlphaISA::ResetFault
countStat	./arch/alpha/faults.hh	/^    FaultStat & countStat() {return _count;}$/;"	f	class:AlphaISA::UnimplementedOpcodeFault
countStat	./arch/arm/faults.hh	/^    FaultStat & countStat() { return vals.count; }$/;"	f	class:ArmISA::ArmFaultVals
countStat	./arch/sparc/faults.hh	/^    FaultStat & countStat() { return vals.count; }$/;"	f	class:SparcISA::SparcFault
counter	./cpu/pred/sat_counter.hh	/^    uint8_t counter;$/;"	m	class:SatCounter
counter	./dev/intel_8254_timer.hh	/^            Counter* counter;$/;"	m	class:Intel8254Timer::Counter::CounterEvent
counter	./dev/intel_8254_timer.hh	/^    Counter *counter[3];$/;"	m	class:Intel8254Timer
counterAtZero	./dev/arm/timer_sp804.cc	/^Sp804::Timer::counterAtZero()$/;"	f	class:Sp804::Timer
counterInterrupt	./dev/intel_8254_timer.hh	/^    counterInterrupt(unsigned int num)$/;"	f	class:Intel8254Timer
counterInterrupt	./dev/x86/i8254.cc	/^X86ISA::I8254::counterInterrupt(unsigned int num)$/;"	f	class:X86ISA::I8254
counterInterrupt	./dev/x86/i8254.hh	/^        counterInterrupt(unsigned int num)$/;"	f	class:X86ISA::I8254::X86Intel8254Timer
counterLimitReached	./dev/arm/generic_timer.cc	/^ArchTimer::counterLimitReached()$/;"	f	class:ArchTimer
counterMask	./arch/x86/regs/misc.hh	/^        Bitfield<31,24> counterMask;$/;"	m	namespace:X86ISA
counterMatch	./dev/arm/rtc_pl031.cc	/^PL031::counterMatch()$/;"	f	class:PL031
counters	./arch/arm/pmu.hh	/^    std::vector<CounterState> counters;$/;"	m	class:ArmISA::PMU
cp	./arch/sparc/pagetable.hh	/^    bool cp()       const { assert(populated); return bits(entry4u,5,5); }$/;"	f	class:SparcISA::PageTableEntry
cp	./base/cprintf.cc	/^namespace cp {$/;"	n	file:
cp	./base/cprintf.hh	/^namespace cp {$/;"	n
cp	./base/cprintf_formats.hh	/^namespace cp {$/;"	n
cp0	./arch/arm/miscregs.hh	/^        Bitfield<0>  cp0;$/;"	m	namespace:ArmISA
cp0	./arch/arm/miscregs.hh	/^        Bitfield<1, 0> cp0;$/;"	m	namespace:ArmISA
cp0	./arch/mips/isa.hh	/^            ISA::CP0 *cp0;$/;"	m	class:MipsISA::ISA::CP0Event
cp0EventRemoveList	./arch/mips/isa.hh	/^        std::queue<CP0Event*> cp0EventRemoveList;$/;"	m	class:MipsISA::ISA
cp0EventType	./arch/mips/isa.hh	/^            CP0EventType cp0EventType;$/;"	m	class:MipsISA::ISA::CP0Event
cp0Updated	./arch/mips/isa.hh	/^        bool cp0Updated;$/;"	m	class:MipsISA::ISA
cp1	./arch/arm/miscregs.hh	/^        Bitfield<1>  cp1;$/;"	m	namespace:ArmISA
cp1	./arch/arm/miscregs.hh	/^        Bitfield<3, 2> cp1;$/;"	m	namespace:ArmISA
cp10	./arch/arm/miscregs.hh	/^        Bitfield<10> cp10;$/;"	m	namespace:ArmISA
cp10	./arch/arm/miscregs.hh	/^        Bitfield<21, 20> cp10;$/;"	m	namespace:ArmISA
cp11	./arch/arm/miscregs.hh	/^        Bitfield<11> cp11;$/;"	m	namespace:ArmISA
cp11	./arch/arm/miscregs.hh	/^        Bitfield<23, 22> cp11;$/;"	m	namespace:ArmISA
cp12	./arch/arm/miscregs.hh	/^        Bitfield<12> cp12;$/;"	m	namespace:ArmISA
cp12	./arch/arm/miscregs.hh	/^        Bitfield<25, 24> cp12;$/;"	m	namespace:ArmISA
cp13	./arch/arm/miscregs.hh	/^        Bitfield<13> cp13;$/;"	m	namespace:ArmISA
cp13	./arch/arm/miscregs.hh	/^        Bitfield<27, 26> cp13;$/;"	m	namespace:ArmISA
cp15ben	./arch/arm/miscregs.hh	/^        Bitfield<5>    cp15ben; \/\/ CP15 barrier enable$/;"	m	namespace:ArmISA
cp2	./arch/arm/miscregs.hh	/^        Bitfield<2>  cp2;$/;"	m	namespace:ArmISA
cp2	./arch/arm/miscregs.hh	/^        Bitfield<5, 4> cp2;$/;"	m	namespace:ArmISA
cp3	./arch/arm/miscregs.hh	/^        Bitfield<3>  cp3;$/;"	m	namespace:ArmISA
cp3	./arch/arm/miscregs.hh	/^        Bitfield<7, 6> cp3;$/;"	m	namespace:ArmISA
cp4	./arch/arm/miscregs.hh	/^        Bitfield<4>  cp4;$/;"	m	namespace:ArmISA
cp4	./arch/arm/miscregs.hh	/^        Bitfield<9, 8> cp4;$/;"	m	namespace:ArmISA
cp5	./arch/arm/miscregs.hh	/^        Bitfield<11, 10> cp5;$/;"	m	namespace:ArmISA
cp5	./arch/arm/miscregs.hh	/^        Bitfield<5>  cp5;$/;"	m	namespace:ArmISA
cp6	./arch/arm/miscregs.hh	/^        Bitfield<13, 12> cp6;$/;"	m	namespace:ArmISA
cp6	./arch/arm/miscregs.hh	/^        Bitfield<6>  cp6;$/;"	m	namespace:ArmISA
cp7	./arch/arm/miscregs.hh	/^        Bitfield<15, 14> cp7;$/;"	m	namespace:ArmISA
cp7	./arch/arm/miscregs.hh	/^        Bitfield<7>  cp7;$/;"	m	namespace:ArmISA
cp8	./arch/arm/miscregs.hh	/^        Bitfield<17, 16> cp8;$/;"	m	namespace:ArmISA
cp8	./arch/arm/miscregs.hh	/^        Bitfield<8>  cp8;$/;"	m	namespace:ArmISA
cp9	./arch/arm/miscregs.hh	/^        Bitfield<19, 18> cp9;$/;"	m	namespace:ArmISA
cp9	./arch/arm/miscregs.hh	/^        Bitfield<9>  cp9;$/;"	m	namespace:ArmISA
cpNum	./arch/arm/types.hh	/^        Bitfield<11, 8>  cpNum;$/;"	m	namespace:ArmISA
cp_seq	./sim/insttracer.hh	/^    InstSeqNum cp_seq;$/;"	m	class:Trace::InstRecord
cp_seq_valid	./sim/insttracer.hh	/^    bool cp_seq_valid;$/;"	m	class:Trace::InstRecord
cpa	./arch/mips/mt_constants.hh	/^    Bitfield<3> cpa;$/;"	m	namespace:MipsISA
cpa	./base/cp_annotate.cc	/^    CPA *cpa;$/;"	m	class:AnnotateDumpCallback	file:
cpa	./base/cp_annotate.hh	/^    static CPA *cpa()                                        { return NULL; }$/;"	f	class:CPA
cpa	./base/cp_annotate.hh	/^    static CPA *cpa() { return _cpa; }$/;"	f	class:CPA
cpa	./dev/net/i8254xGBe.hh	/^    CPA *cpa;$/;"	m	class:IGbE
cpd	./base/loader/coff_sym.h	/^    coff_int    cpd;            \/* count of procedures for this file *\/$/;"	m	struct:ecoff_fdr
cpi	./cpu/minor/stats.hh	/^    Stats::Formula cpi;$/;"	m	class:Minor::MinorStats
cpi	./cpu/o3/cpu.hh	/^    Stats::Formula cpi;$/;"	m	class:FullO3CPU
cpi	./cpu/trace/trace_cpu.hh	/^    Stats::Formula cpi;$/;"	m	class:TraceCPU
cpl	./arch/x86/regs/misc.hh	/^        Bitfield<5, 4> cpl;$/;"	m	namespace:X86ISA
cpl	./dev/arm/pl111.hh	/^        Bitfield<25,16> cpl;$/;"	m	class:Pl111
cprintf	./base/cprintf.hh	/^cprintf(const char *format, const Args &...args)$/;"	f
cprintf	./base/cprintf.hh	/^cprintf(const std::string &format, const Args &...args)$/;"	f
cpsr	./arch/arm/remote_gdb.hh	/^          uint32_t cpsr;$/;"	m	struct:ArmISA::RemoteGDB::AArch32GdbRegCache::__anon67
cpsr	./arch/arm/remote_gdb.hh	/^          uint64_t cpsr;$/;"	m	struct:ArmISA::RemoteGDB::AArch64GdbRegCache::__anon68
cpsr	./arch/arm/table_walker.hh	/^        CPSR cpsr;$/;"	m	class:ArmISA::TableWalker::WalkerState
cpsr	./arch/arm/tlb.hh	/^    CPSR cpsr;$/;"	m	class:ArmISA::TLB
cpsrWriteByInstr	./arch/arm/insts/static_inst.hh	/^    cpsrWriteByInstr(CPSR cpsr, uint32_t val, SCR scr, NSACR nsacr,$/;"	f	class:ArmISA::ArmStaticInst
cptDir	./sim/serialize.hh	/^    const std::string cptDir;$/;"	m	class:CheckpointIn
cpu	./arch/alpha/interrupts.hh	/^    BaseCPU * cpu;$/;"	m	class:AlphaISA::Interrupts
cpu	./arch/arm/interrupts.hh	/^    BaseCPU * cpu;$/;"	m	class:ArmISA::Interrupts
cpu	./arch/mips/isa.hh	/^            BaseCPU *cpu;$/;"	m	class:MipsISA::ISA::CP0Event
cpu	./arch/power/interrupts.hh	/^    BaseCPU * cpu;$/;"	m	class:PowerISA::Interrupts
cpu	./arch/sparc/interrupts.hh	/^    BaseCPU * cpu;$/;"	m	class:SparcISA::Interrupts
cpu	./arch/x86/interrupts.hh	/^    BaseCPU *cpu;$/;"	m	class:X86ISA::Interrupts
cpu	./base/cp_annotate.hh	/^        uint8_t  cpu;$/;"	m	struct:CPA::AnnotateData
cpu	./cpu/base.hh	/^        BaseCPU *cpu;$/;"	m	class:BaseCPU::ProfileEvent
cpu	./cpu/base.hh	/^    BaseCPU *cpu;$/;"	m	class:CPUProgressEvent
cpu	./cpu/base_dyn_inst.hh	/^    ImplCPU *cpu;$/;"	m	class:BaseDynInst
cpu	./cpu/kvm/base.hh	/^        BaseKvmCPU &cpu;$/;"	m	struct:BaseKvmCPU::TickEvent
cpu	./cpu/minor/cpu.hh	/^        MinorCPU &cpu;$/;"	m	class:MinorCPU::MinorCPUPort
cpu	./cpu/minor/decode.hh	/^    MinorCPU &cpu;$/;"	m	class:Minor::Decode
cpu	./cpu/minor/exec_context.hh	/^    MinorCPU &cpu;$/;"	m	class:Minor::ExecContext
cpu	./cpu/minor/execute.hh	/^    MinorCPU &cpu;$/;"	m	class:Minor::Execute
cpu	./cpu/minor/fetch1.hh	/^    MinorCPU &cpu;$/;"	m	class:Minor::Fetch1
cpu	./cpu/minor/fetch2.hh	/^    MinorCPU &cpu;$/;"	m	class:Minor::Fetch2
cpu	./cpu/minor/lsq.hh	/^    MinorCPU &cpu;$/;"	m	class:Minor::LSQ
cpu	./cpu/minor/pipeline.hh	/^    MinorCPU &cpu;$/;"	m	class:Minor::Pipeline
cpu	./cpu/o3/commit.hh	/^    O3CPU *cpu;$/;"	m	class:DefaultCommit
cpu	./cpu/o3/cpu.hh	/^        FullO3CPU<Impl> *cpu;$/;"	m	class:FullO3CPU::DcachePort
cpu	./cpu/o3/cpu.hh	/^        FullO3CPU<Impl> *cpu;$/;"	m	class:FullO3CPU::TickEvent
cpu	./cpu/o3/decode.hh	/^    O3CPU *cpu;$/;"	m	class:DefaultDecode
cpu	./cpu/o3/fetch.hh	/^    O3CPU *cpu;$/;"	m	class:DefaultFetch
cpu	./cpu/o3/iew.hh	/^    O3CPU *cpu;$/;"	m	class:DefaultIEW
cpu	./cpu/o3/inst_queue.hh	/^    O3CPU *cpu;$/;"	m	class:InstructionQueue
cpu	./cpu/o3/lsq.hh	/^    O3CPU *cpu;$/;"	m	class:LSQ
cpu	./cpu/o3/lsq_unit.hh	/^    O3CPU *cpu;$/;"	m	class:LSQUnit
cpu	./cpu/o3/probe/elastic_trace.hh	/^    FullO3CPU<O3CPUImpl>* cpu;$/;"	m	class:ElasticTrace
cpu	./cpu/o3/rename.hh	/^    O3CPU *cpu;$/;"	m	class:DefaultRename
cpu	./cpu/o3/rob.hh	/^    O3CPU *cpu;$/;"	m	class:ROB
cpu	./cpu/o3/thread_context.hh	/^    O3CPU *cpu;$/;"	m	class:O3ThreadContext
cpu	./cpu/o3/thread_state.hh	/^    O3CPU *cpu;$/;"	m	struct:O3ThreadState
cpu	./cpu/simple/atomic.hh	/^        AtomicSimpleCPU *cpu;$/;"	m	struct:AtomicSimpleCPU::TickEvent
cpu	./cpu/simple/atomic.hh	/^        BaseSimpleCPU *cpu;$/;"	m	class:AtomicSimpleCPU::AtomicCPUDPort
cpu	./cpu/simple/exec_context.hh	/^    BaseSimpleCPU *cpu;$/;"	m	class:SimpleExecContext
cpu	./cpu/simple/timing.hh	/^            TimingSimpleCPU *cpu;$/;"	m	struct:TimingSimpleCPU::TimingCPUPort::TickEvent
cpu	./cpu/simple/timing.hh	/^        TimingSimpleCPU *cpu;$/;"	m	class:TimingSimpleCPU::FetchTranslation
cpu	./cpu/simple/timing.hh	/^        TimingSimpleCPU *cpu;$/;"	m	struct:TimingSimpleCPU::IprEvent
cpu	./cpu/simple/timing.hh	/^        TimingSimpleCPU* cpu;$/;"	m	class:TimingSimpleCPU::TimingCPUPort
cpu	./cpu/testers/networktest/networktest.hh	/^        NetworkTest *cpu;$/;"	m	class:NetworkTest::TickEvent
cpu	./dev/alpha/AlphaBackdoor.py	/^    cpu = Param.BaseCPU(Parent.cpu[0], "Processor")$/;"	v	class:AlphaBackdoor
cpu	./dev/alpha/backdoor.hh	/^    BaseCPU *cpu;$/;"	m	class:AlphaBackdoor
cpu	./dev/arm/generic_timer.hh	/^    unsigned cpu;$/;"	m	class:GenericTimerISA
cpu	./dev/arm/gic_pl390.hh	/^        uint32_t cpu;$/;"	m	class:Pl390::PostIntEvent
cpu	./dev/arm/vgic.hh	/^        uint32_t cpu;$/;"	m	class:VGic::PostVIntEvent
cpu	./dev/sparc/iob.hh	/^        int cpu;$/;"	m	struct:Iob::IntMan
cpuAddr	./dev/arm/gic_pl390.hh	/^    Addr cpuAddr;$/;"	m	class:Pl390
cpuBpr	./dev/arm/gic_pl390.hh	/^    uint8_t cpuBpr[CPU_MAX];$/;"	m	class:Pl390
cpuClearInt	./dev/net/i8254xGBe.cc	/^IGbE::cpuClearInt()$/;"	f	class:IGbE
cpuClock	./dev/alpha/access.h	/^    uint64_t    cpuClock;               \/\/ 10: MHz$/;"	m	struct:AlphaAccess
cpuClock	./dev/mips/access.h	/^    uint64_t    cpuClock;               \/\/ 38: MHz$/;"	m	struct:MipsAccess
cpuDataPort	./cpu/testers/rubytest/RubyTester.py	/^    cpuDataPort = VectorMasterPort("cpu ports to only data caches")$/;"	v	class:RubyTester
cpuEnabled	./dev/arm/gic_pl390.hh	/^    bool cpuEnabled[CPU_MAX];$/;"	m	class:Pl390
cpuEventList	./cpu/cpuevent.cc	/^CpuEvent::CpuEventList CpuEvent::cpuEventList;$/;"	m	class:CpuEvent	file:
cpuEventList	./cpu/cpuevent.hh	/^    static CpuEventList cpuEventList;$/;"	m	class:CpuEvent
cpuFlags	./arch/x86/bios/intelmp.hh	/^    uint8_t cpuFlags;$/;"	m	class:X86ISA::IntelMP::Processor
cpuHighestInt	./dev/arm/gic_pl390.hh	/^    uint32_t cpuHighestInt[CPU_MAX];$/;"	m	class:Pl390
cpuId	./cpu/base.hh	/^    int cpuId() const { return _cpuId; }$/;"	f	class:BaseCPU
cpuId	./cpu/base_dyn_inst.hh	/^    int cpuId() const { return cpu->cpuId(); }$/;"	f	class:BaseDynInst
cpuId	./cpu/checker/thread_context.hh	/^    int cpuId() const { return actualTC->cpuId(); }$/;"	f	class:CheckerThreadContext
cpuId	./cpu/o3/thread_context.hh	/^    virtual int cpuId() const { return cpu->cpuId(); }$/;"	f	class:O3ThreadContext
cpuId	./cpu/thread_context.hh	/^    int cpuId() const { return actualTC->cpuId(); }$/;"	f	class:ProxyThreadContext
cpuId	./cpu/thread_state.hh	/^    int cpuId() const { return baseCpu->cpuId(); }$/;"	f	struct:ThreadState
cpuInstDataPort	./cpu/testers/rubytest/RubyTester.py	/^    cpuInstDataPort = VectorMasterPort("cpu combo ports to inst & data caches")$/;"	v	class:RubyTester
cpuInstPort	./cpu/testers/rubytest/RubyTester.py	/^    cpuInstPort = VectorMasterPort("cpu ports to only inst caches")$/;"	v	class:RubyTester
cpuInterrupt	./dev/net/ns_gige.cc	/^NSGigE::cpuInterrupt()$/;"	f	class:NSGigE
cpuInterrupt	./dev/net/sinic.cc	/^Base::cpuInterrupt()$/;"	f	class:Sinic::Base
cpuIntrAck	./dev/net/ns_gige.hh	/^    void cpuIntrAck() { cpuIntrClear(); }$/;"	f	class:NSGigE
cpuIntrAck	./dev/net/sinic.hh	/^    void cpuIntrAck() { cpuIntrClear(); }$/;"	f	class:Sinic::Base
cpuIntrClear	./dev/net/ns_gige.cc	/^NSGigE::cpuIntrClear()$/;"	f	class:NSGigE
cpuIntrClear	./dev/net/sinic.cc	/^Base::cpuIntrClear()$/;"	f	class:Sinic::Base
cpuIntrEnable	./dev/net/sinic.hh	/^    bool cpuIntrEnable;$/;"	m	class:Sinic::Base
cpuIntrPending	./dev/net/ns_gige.cc	/^NSGigE::cpuIntrPending() const$/;"	f	class:NSGigE
cpuIntrPending	./dev/net/sinic.cc	/^Base::cpuIntrPending() const$/;"	f	class:Sinic::Base
cpuIntrPost	./dev/net/ns_gige.cc	/^NSGigE::cpuIntrPost(Tick when)$/;"	f	class:NSGigE
cpuIntrPost	./dev/net/sinic.cc	/^Base::cpuIntrPost(Tick when)$/;"	f	class:Sinic::Base
cpuList	./cpu/base.hh	/^    static std::vector<BaseCPU *> cpuList;   \/\/!< Static global cpu list$/;"	m	class:BaseCPU
cpuNum	./arch/mips/pra_constants.hh	/^    Bitfield<9,  9>  cpuNum;$/;"	m	namespace:MipsISA
cpuNum	./dev/arm/timer_cpulocal.hh	/^        uint32_t cpuNum;$/;"	m	class:CpuLocalTimer::Timer
cpuPendingIntr	./dev/net/ns_gige.hh	/^    bool cpuPendingIntr;$/;"	m	class:NSGigE
cpuPendingIntr	./dev/net/sinic.hh	/^    bool cpuPendingIntr;$/;"	m	class:Sinic::Base
cpuPioDelay	./dev/arm/gic_pl390.hh	/^    Tick cpuPioDelay;$/;"	m	class:Pl390
cpuPort	./cpu/testers/directedtest/RubyDirectedTester.py	/^    cpuPort = VectorMasterPort("the cpu ports")$/;"	v	class:RubyDirectedTester
cpuPostInt	./dev/net/i8254xGBe.cc	/^IGbE::cpuPostInt()$/;"	f	class:IGbE
cpuPpiActive	./dev/arm/gic_pl390.hh	/^    uint32_t cpuPpiActive[CPU_MAX];$/;"	m	class:Pl390
cpuPpiPending	./dev/arm/gic_pl390.hh	/^    uint32_t cpuPpiPending[CPU_MAX];$/;"	m	class:Pl390
cpuPriority	./dev/arm/gic_pl390.hh	/^    uint8_t cpuPriority[CPU_MAX];$/;"	m	class:Pl390
cpuRange	./arch/arm/kvm/gic.hh	/^    const AddrRange cpuRange;$/;"	m	class:KvmGic
cpuSgiActive	./dev/arm/gic_pl390.hh	/^    uint64_t cpuSgiActive[SGI_MAX];$/;"	m	class:Pl390
cpuSgiActiveExt	./dev/arm/gic_pl390.hh	/^    uint32_t cpuSgiActiveExt[CPU_MAX];$/;"	m	class:Pl390
cpuSgiPending	./dev/arm/gic_pl390.hh	/^    uint64_t cpuSgiPending[SGI_MAX];$/;"	m	class:Pl390
cpuSgiPendingExt	./dev/arm/gic_pl390.hh	/^    uint32_t cpuSgiPendingExt[CPU_MAX];$/;"	m	class:Pl390
cpuSidePort	./mem/cache/base.hh	/^    CacheSlavePort *cpuSidePort;$/;"	m	class:BaseCache
cpuSignature	./arch/x86/bios/intelmp.hh	/^    uint32_t cpuSignature;$/;"	m	class:X86ISA::IntelMP::Processor
cpuStack	./dev/alpha/access.h	/^    uint64_t    cpuStack[64];           \/\/ 70:$/;"	m	struct:AlphaAccess
cpuStack	./dev/mips/access.h	/^    uint32_t    cpuStack[64];           \/\/ 70:$/;"	m	struct:MipsAccess
cpuStartup	./cpu/kvm/vm.cc	/^KvmVM::cpuStartup()$/;"	f	class:KvmVM
cpuTarget	./dev/arm/gic_pl390.hh	/^    uint8_t cpuTarget[INT_LINES_MAX];$/;"	m	class:Pl390
cpuWaitList	./cpu/o3/cpu.hh	/^    std::list<int> cpuWaitList;$/;"	m	class:FullO3CPU
cpu_addr	./arch/arm/kvm/KvmGic.py	/^    cpu_addr = Param.Addr(0x1f000100, "Address for cpu")$/;"	v	class:KvmGic
cpu_addr	./dev/arm/Gic.py	/^    cpu_addr = Param.Addr(0x1f000100, "Address for cpu")$/;"	v	class:Pl390
cpu_binding	./kern/tru64/tru64.hh	/^        uint64_t     cpu_binding;       \/\/!< cpu_binding$/;"	m	struct:Tru64::cpu_info
cpu_ex_binding	./kern/tru64/tru64.hh	/^        uint64_t     cpu_ex_binding;    \/\/!< cpu_ex_binding$/;"	m	struct:Tru64::cpu_info
cpu_id	./cpu/BaseCPU.py	/^    cpu_id = Param.Int(-1, "CPU identifier")$/;"	v
cpu_id	./dev/arm/gic_pl390.hh	/^        Bitfield<12,10> cpu_id;$/;"	m	class:Pl390
cpu_info	./kern/tru64/tru64.hh	/^    struct cpu_info {$/;"	s	class:Tru64
cpu_list	./dev/arm/gic_pl390.hh	/^        Bitfield<23,16> cpu_list;$/;"	m	class:Pl390
cpu_mode	./arch/alpha/kernel_stats.hh	/^enum cpu_mode { kernel, user, idle, cpu_mode_num };$/;"	g	namespace:AlphaISA::Kernel
cpu_mode	./arch/arm/kernel_stats.hh	/^enum cpu_mode { hypervisor, kernel, user, idle, cpu_mode_num };$/;"	g	namespace:ArmISA::Kernel
cpu_mode	./arch/mips/kernel_stats.hh	/^enum cpu_mode { kernel, user, idle, cpu_mode_num };$/;"	g	namespace:MipsISA::Kernel
cpu_mode	./arch/power/kernel_stats.hh	/^enum cpu_mode { hypervisor, kernel, user, idle, cpu_mode_num };$/;"	g	namespace:PowerISA::Kernel
cpu_mode	./arch/sparc/kernel_stats.hh	/^enum cpu_mode { hypervisor, kernel, user, idle, cpu_mode_num };$/;"	g	namespace:SparcISA::Kernel
cpu_mode	./arch/x86/kernel_stats.hh	/^enum cpu_mode {$/;"	g	namespace:X86ISA::Kernel
cpu_mode_num	./arch/alpha/kernel_stats.hh	/^enum cpu_mode { kernel, user, idle, cpu_mode_num };$/;"	e	enum:AlphaISA::Kernel::cpu_mode
cpu_mode_num	./arch/arm/kernel_stats.hh	/^enum cpu_mode { hypervisor, kernel, user, idle, cpu_mode_num };$/;"	e	enum:ArmISA::Kernel::cpu_mode
cpu_mode_num	./arch/mips/kernel_stats.hh	/^enum cpu_mode { kernel, user, idle, cpu_mode_num };$/;"	e	enum:MipsISA::Kernel::cpu_mode
cpu_mode_num	./arch/power/kernel_stats.hh	/^enum cpu_mode { hypervisor, kernel, user, idle, cpu_mode_num };$/;"	e	enum:PowerISA::Kernel::cpu_mode
cpu_mode_num	./arch/sparc/kernel_stats.hh	/^enum cpu_mode { hypervisor, kernel, user, idle, cpu_mode_num };$/;"	e	enum:SparcISA::Kernel::cpu_mode
cpu_mode_num	./arch/x86/kernel_stats.hh	/^    cpu_mode_num$/;"	e	enum:X86ISA::Kernel::cpu_mode
cpu_mondo_head	./arch/sparc/isa.hh	/^    uint64_t cpu_mondo_head;$/;"	m	class:SparcISA::ISA
cpu_mondo_tail	./arch/sparc/isa.hh	/^    uint64_t cpu_mondo_tail;$/;"	m	class:SparcISA::ISA
cpu_pio_delay	./dev/arm/Gic.py	/^    cpu_pio_delay = Param.Latency('10ns', "Delay for PIO r\/w to cpu interface")$/;"	v	class:Pl390
cpu_side	./mem/MemChecker.py	/^    cpu_side = SlavePort("Alias for slave")$/;"	v	class:MemCheckerMonitor
cpu_side	./mem/cache/Cache.py	/^    cpu_side = SlavePort("Upstream port closer to the CPU and\/or device")$/;"	v	class:BaseCache
cpu_type	./kern/tru64/tru64.hh	/^        uint32_t     cpu_type;          \/\/!< cpu_type$/;"	m	struct:Tru64::cpu_info
cpuid	./arch/mips/dt_constants.hh	/^    Bitfield<28, 21> cpuid;$/;"	m	namespace:MipsISA
cpuidv	./arch/mips/dt_constants.hh	/^    Bitfield<29>     cpuidv;$/;"	m	namespace:MipsISA
cpus_in_box	./kern/tru64/tru64.hh	/^        uint32_t     cpus_in_box;       \/\/!< cpus_in_box$/;"	m	struct:Tru64::cpu_info
cpus_present	./kern/tru64/tru64.hh	/^        uint64_t     cpus_present;      \/\/!< cpus_present$/;"	m	struct:Tru64::cpu_info
cpus_running	./kern/tru64/tru64.hh	/^        uint64_t     cpus_running;      \/\/!< cpus_running$/;"	m	struct:Tru64::cpu_info
cr	./arch/power/remote_gdb.hh	/^            uint32_t cr;$/;"	m	struct:PowerISA::RemoteGDB::PowerGdbRegCache::__anon53
cr	./dev/pci/copy_engine.hh	/^        CopyEngineReg::ChanRegs  cr;$/;"	m	class:CopyEngine::CopyEngineChannel
cr1	./arch/power/miscregs.hh	/^    Bitfield<27,24> cr1;$/;"	m	namespace:PowerISA
create	./arch/alpha/freebsd/system.cc	/^FreebsdAlphaSystemParams::create()$/;"	f	class:FreebsdAlphaSystemParams
create	./arch/alpha/interrupts.cc	/^AlphaInterruptsParams::create()$/;"	f	class:AlphaInterruptsParams
create	./arch/alpha/isa.cc	/^AlphaISAParams::create()$/;"	f	class:AlphaISAParams
create	./arch/alpha/linux/system.cc	/^LinuxAlphaSystemParams::create()$/;"	f	class:LinuxAlphaSystemParams
create	./arch/alpha/system.cc	/^AlphaSystemParams::create()$/;"	f	class:AlphaSystemParams
create	./arch/alpha/tlb.cc	/^AlphaTLBParams::create()$/;"	f	class:AlphaTLBParams
create	./arch/alpha/tru64/system.cc	/^Tru64AlphaSystemParams::create()$/;"	f	class:Tru64AlphaSystemParams
create	./arch/arm/freebsd/system.cc	/^FreebsdArmSystemParams::create()$/;"	f	class:FreebsdArmSystemParams
create	./arch/arm/interrupts.cc	/^ArmInterruptsParams::create()$/;"	f	class:ArmInterruptsParams
create	./arch/arm/isa.cc	/^ArmISAParams::create()$/;"	f	class:ArmISAParams
create	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPUParams::create()$/;"	f	class:ArmKvmCPUParams
create	./arch/arm/kvm/armv8_cpu.cc	/^ArmV8KvmCPUParams::create()$/;"	f	class:ArmV8KvmCPUParams
create	./arch/arm/kvm/gic.cc	/^KvmGicParams::create()$/;"	f	class:KvmGicParams
create	./arch/arm/linux/system.cc	/^LinuxArmSystemParams::create()$/;"	f	class:LinuxArmSystemParams
create	./arch/arm/nativetrace.cc	/^ArmNativeTraceParams::create()$/;"	f	class:ArmNativeTraceParams
create	./arch/arm/pmu.cc	/^ArmPMUParams::create()$/;"	f	class:ArmPMUParams
create	./arch/arm/pmu.hh	/^        std::unique_ptr<ProbeListener> create(PMU &pmu, CounterId cid) const$/;"	f	struct:ArmISA::PMU::EventType
create	./arch/arm/stage2_mmu.cc	/^ArmStage2MMUParams::create()$/;"	f	class:ArmStage2MMUParams
create	./arch/arm/system.cc	/^ArmSystemParams::create()$/;"	f	class:ArmSystemParams
create	./arch/arm/system.cc	/^GenericArmSystemParams::create()$/;"	f	class:GenericArmSystemParams
create	./arch/arm/table_walker.cc	/^ArmTableWalkerParams::create()$/;"	f	class:ArmTableWalkerParams
create	./arch/arm/tlb.cc	/^ArmTLBParams::create()$/;"	f	class:ArmTLBParams
create	./arch/mips/bare_iron/system.cc	/^BareIronMipsSystemParams::create()$/;"	f	class:BareIronMipsSystemParams
create	./arch/mips/interrupts.cc	/^MipsInterruptsParams::create()$/;"	f	class:MipsInterruptsParams
create	./arch/mips/isa.cc	/^MipsISAParams::create()$/;"	f	class:MipsISAParams
create	./arch/mips/linux/system.cc	/^LinuxMipsSystemParams::create()$/;"	f	class:LinuxMipsSystemParams
create	./arch/mips/system.cc	/^MipsSystemParams::create()$/;"	f	class:MipsSystemParams
create	./arch/mips/tlb.cc	/^MipsTLBParams::create()$/;"	f	class:MipsTLBParams
create	./arch/power/interrupts.cc	/^PowerInterruptsParams::create()$/;"	f	class:PowerInterruptsParams
create	./arch/power/isa.cc	/^PowerISAParams::create()$/;"	f	class:PowerISAParams
create	./arch/power/tlb.cc	/^PowerTLBParams::create()$/;"	f	class:PowerTLBParams
create	./arch/sparc/interrupts.cc	/^SparcInterruptsParams::create()$/;"	f	class:SparcInterruptsParams
create	./arch/sparc/isa.cc	/^SparcISAParams::create()$/;"	f	class:SparcISAParams
create	./arch/sparc/nativetrace.cc	/^SparcNativeTraceParams::create()$/;"	f	class:SparcNativeTraceParams
create	./arch/sparc/system.cc	/^SparcSystemParams::create()$/;"	f	class:SparcSystemParams
create	./arch/sparc/tlb.cc	/^SparcTLBParams::create()$/;"	f	class:SparcTLBParams
create	./arch/x86/bios/acpi.cc	/^X86ACPIRSDPParams::create()$/;"	f	class:X86ACPIRSDPParams
create	./arch/x86/bios/acpi.cc	/^X86ACPIRSDTParams::create()$/;"	f	class:X86ACPIRSDTParams
create	./arch/x86/bios/acpi.cc	/^X86ACPIXSDTParams::create()$/;"	f	class:X86ACPIXSDTParams
create	./arch/x86/bios/e820.cc	/^X86E820EntryParams::create()$/;"	f	class:X86E820EntryParams
create	./arch/x86/bios/e820.cc	/^X86E820TableParams::create()$/;"	f	class:X86E820TableParams
create	./arch/x86/bios/intelmp.cc	/^X86IntelMPAddrSpaceMappingParams::create()$/;"	f	class:X86IntelMPAddrSpaceMappingParams
create	./arch/x86/bios/intelmp.cc	/^X86IntelMPBusHierarchyParams::create()$/;"	f	class:X86IntelMPBusHierarchyParams
create	./arch/x86/bios/intelmp.cc	/^X86IntelMPBusParams::create()$/;"	f	class:X86IntelMPBusParams
create	./arch/x86/bios/intelmp.cc	/^X86IntelMPCompatAddrSpaceModParams::create()$/;"	f	class:X86IntelMPCompatAddrSpaceModParams
create	./arch/x86/bios/intelmp.cc	/^X86IntelMPConfigTableParams::create()$/;"	f	class:X86IntelMPConfigTableParams
create	./arch/x86/bios/intelmp.cc	/^X86IntelMPFloatingPointerParams::create()$/;"	f	class:X86IntelMPFloatingPointerParams
create	./arch/x86/bios/intelmp.cc	/^X86IntelMPIOAPICParams::create()$/;"	f	class:X86IntelMPIOAPICParams
create	./arch/x86/bios/intelmp.cc	/^X86IntelMPIOIntAssignmentParams::create()$/;"	f	class:X86IntelMPIOIntAssignmentParams
create	./arch/x86/bios/intelmp.cc	/^X86IntelMPLocalIntAssignmentParams::create()$/;"	f	class:X86IntelMPLocalIntAssignmentParams
create	./arch/x86/bios/intelmp.cc	/^X86IntelMPProcessorParams::create()$/;"	f	class:X86IntelMPProcessorParams
create	./arch/x86/bios/smbios.cc	/^X86SMBiosBiosInformationParams::create()$/;"	f	class:X86SMBiosBiosInformationParams
create	./arch/x86/bios/smbios.cc	/^X86SMBiosSMBiosTableParams::create()$/;"	f	class:X86SMBiosSMBiosTableParams
create	./arch/x86/interrupts.cc	/^X86LocalApicParams::create()$/;"	f	class:X86LocalApicParams
create	./arch/x86/isa.cc	/^X86ISAParams::create()$/;"	f	class:X86ISAParams
create	./arch/x86/linux/system.cc	/^LinuxX86SystemParams::create()$/;"	f	class:LinuxX86SystemParams
create	./arch/x86/nativetrace.cc	/^X86NativeTraceParams::create()$/;"	f	class:X86NativeTraceParams
create	./arch/x86/pagetable_walker.cc	/^X86PagetableWalkerParams::create()$/;"	f	class:X86PagetableWalkerParams
create	./arch/x86/system.cc	/^X86SystemParams::create()$/;"	f	class:X86SystemParams
create	./arch/x86/tlb.cc	/^X86TLBParams::create()$/;"	f	class:X86TLBParams
create	./base/cp_annotate.cc	/^CPAParams::create()$/;"	f	class:CPAParams
create	./base/output.cc	/^OutputDirectory::create(const string &name, bool binary, bool no_gz)$/;"	f	class:OutputDirectory
create	./base/vnc/vncinput.cc	/^VncInputParams::create()$/;"	f	class:VncInputParams
create	./base/vnc/vncserver.cc	/^VncServerParams::create()$/;"	f	class:VncServerParams
create	./cpu/dummy_checker.cc	/^DummyCheckerParams::create()$/;"	f	class:DummyCheckerParams
create	./cpu/exetrace.cc	/^ExeTracerParams::create()$/;"	f	class:ExeTracerParams
create	./cpu/func_unit.cc	/^FUDescParams::create()$/;"	f	class:FUDescParams
create	./cpu/func_unit.cc	/^OpDescParams::create()$/;"	f	class:OpDescParams
create	./cpu/inst_pb_trace.cc	/^InstPBTraceParams::create()$/;"	f	class:InstPBTraceParams
create	./cpu/inteltrace.cc	/^IntelTraceParams::create()$/;"	f	class:IntelTraceParams
create	./cpu/intr_control.cc	/^IntrControlParams::create()$/;"	f	class:IntrControlParams
create	./cpu/intr_control_noisa.cc	/^IntrControlParams::create()$/;"	f	class:IntrControlParams
create	./cpu/kvm/vm.cc	/^Kvm::create()$/;"	f	class:Kvm
create	./cpu/kvm/vm.cc	/^KvmVMParams::create()$/;"	f	class:KvmVMParams
create	./cpu/kvm/x86_cpu.cc	/^X86KvmCPUParams::create()$/;"	f	class:X86KvmCPUParams
create	./cpu/minor/cpu.cc	/^MinorCPUParams::create()$/;"	f	class:MinorCPUParams
create	./cpu/minor/func_unit.cc	/^MinorFUParams::create()$/;"	f	class:MinorFUParams
create	./cpu/minor/func_unit.cc	/^MinorFUPoolParams::create()$/;"	f	class:MinorFUPoolParams
create	./cpu/minor/func_unit.cc	/^MinorFUTimingParams::create()$/;"	f	class:MinorFUTimingParams
create	./cpu/minor/func_unit.cc	/^MinorOpClassParams::create()$/;"	f	class:MinorOpClassParams
create	./cpu/minor/func_unit.cc	/^MinorOpClassSetParams::create()$/;"	f	class:MinorOpClassSetParams
create	./cpu/o3/checker.cc	/^O3CheckerParams::create()$/;"	f	class:O3CheckerParams
create	./cpu/o3/deriv.cc	/^DerivO3CPUParams::create()$/;"	f	class:DerivO3CPUParams
create	./cpu/o3/fu_pool.cc	/^FUPoolParams::create()$/;"	f	class:FUPoolParams
create	./cpu/o3/probe/elastic_trace.cc	/^ElasticTraceParams::create()$/;"	f	class:ElasticTraceParams
create	./cpu/o3/probe/simple_trace.cc	/^SimpleTraceParams::create()$/;"	f	class:SimpleTraceParams
create	./cpu/pred/2bit_local.cc	/^LocalBPParams::create()$/;"	f	class:LocalBPParams
create	./cpu/pred/bi_mode.cc	/^BiModeBPParams::create()$/;"	f	class:BiModeBPParams
create	./cpu/pred/tournament.cc	/^TournamentBPParams::create()$/;"	f	class:TournamentBPParams
create	./cpu/simple/atomic.cc	/^AtomicSimpleCPUParams::create()$/;"	f	class:AtomicSimpleCPUParams
create	./cpu/simple/probes/simpoint.cc	/^SimPointParams::create()$/;"	f	class:SimPointParams
create	./cpu/simple/timing.cc	/^TimingSimpleCPUParams::create()$/;"	f	class:TimingSimpleCPUParams
create	./cpu/testers/directedtest/InvalidateGenerator.cc	/^InvalidateGeneratorParams::create()$/;"	f	class:InvalidateGeneratorParams
create	./cpu/testers/directedtest/RubyDirectedTester.cc	/^RubyDirectedTesterParams::create()$/;"	f	class:RubyDirectedTesterParams
create	./cpu/testers/directedtest/SeriesRequestGenerator.cc	/^SeriesRequestGeneratorParams::create()$/;"	f	class:SeriesRequestGeneratorParams
create	./cpu/testers/memtest/memtest.cc	/^MemTestParams::create()$/;"	f	class:MemTestParams
create	./cpu/testers/networktest/networktest.cc	/^NetworkTestParams::create()$/;"	f	class:NetworkTestParams
create	./cpu/testers/rubytest/RubyTester.cc	/^RubyTesterParams::create()$/;"	f	class:RubyTesterParams
create	./cpu/testers/traffic_gen/traffic_gen.cc	/^TrafficGenParams::create()$/;"	f	class:TrafficGenParams
create	./cpu/timing_expr.cc	/^TimingExprBinParams::create()$/;"	f	class:TimingExprBinParams
create	./cpu/timing_expr.cc	/^TimingExprIfParams::create()$/;"	f	class:TimingExprIfParams
create	./cpu/timing_expr.cc	/^TimingExprLetParams::create()$/;"	f	class:TimingExprLetParams
create	./cpu/timing_expr.cc	/^TimingExprLiteralParams::create()$/;"	f	class:TimingExprLiteralParams
create	./cpu/timing_expr.cc	/^TimingExprReadIntRegParams::create()$/;"	f	class:TimingExprReadIntRegParams
create	./cpu/timing_expr.cc	/^TimingExprRefParams::create()$/;"	f	class:TimingExprRefParams
create	./cpu/timing_expr.cc	/^TimingExprSrcRegParams::create()$/;"	f	class:TimingExprSrcRegParams
create	./cpu/timing_expr.cc	/^TimingExprUnParams::create()$/;"	f	class:TimingExprUnParams
create	./cpu/trace/trace_cpu.cc	/^TraceCPUParams::create()$/;"	f	class:TraceCPUParams
create	./dev/alpha/backdoor.cc	/^AlphaBackdoorParams::create()$/;"	f	class:AlphaBackdoorParams
create	./dev/alpha/tsunami.cc	/^TsunamiParams::create()$/;"	f	class:TsunamiParams
create	./dev/alpha/tsunami_cchip.cc	/^TsunamiCChipParams::create()$/;"	f	class:TsunamiCChipParams
create	./dev/alpha/tsunami_io.cc	/^TsunamiIOParams::create()$/;"	f	class:TsunamiIOParams
create	./dev/alpha/tsunami_pchip.cc	/^TsunamiPChipParams::create()$/;"	f	class:TsunamiPChipParams
create	./dev/arm/a9scu.cc	/^A9SCUParams::create()$/;"	f	class:A9SCUParams
create	./dev/arm/amba_fake.cc	/^AmbaFakeParams::create()$/;"	f	class:AmbaFakeParams
create	./dev/arm/energy_ctrl.cc	/^EnergyCtrl * EnergyCtrlParams::create()$/;"	f	class:EnergyCtrlParams
create	./dev/arm/flash_device.cc	/^FlashDeviceParams::create()$/;"	f	class:FlashDeviceParams
create	./dev/arm/generic_timer.cc	/^GenericTimerMemParams::create()$/;"	f	class:GenericTimerMemParams
create	./dev/arm/generic_timer.cc	/^GenericTimerParams::create()$/;"	f	class:GenericTimerParams
create	./dev/arm/gic_pl390.cc	/^Pl390Params::create()$/;"	f	class:Pl390Params
create	./dev/arm/gic_v2m.cc	/^Gicv2mFrameParams::create()$/;"	f	class:Gicv2mFrameParams
create	./dev/arm/gic_v2m.cc	/^Gicv2mParams::create()$/;"	f	class:Gicv2mParams
create	./dev/arm/gpu_nomali.cc	/^NoMaliGpuParams::create()$/;"	f	class:NoMaliGpuParams
create	./dev/arm/hdlcd.cc	/^HDLcdParams::create()$/;"	f	class:HDLcdParams
create	./dev/arm/kmi.cc	/^Pl050Params::create()$/;"	f	class:Pl050Params
create	./dev/arm/pl011.cc	/^Pl011Params::create()$/;"	f	class:Pl011Params
create	./dev/arm/pl111.cc	/^Pl111Params::create()$/;"	f	class:Pl111Params
create	./dev/arm/realview.cc	/^RealViewParams::create()$/;"	f	class:RealViewParams
create	./dev/arm/rtc_pl031.cc	/^PL031Params::create()$/;"	f	class:PL031Params
create	./dev/arm/rv_ctrl.cc	/^RealViewCtrlParams::create()$/;"	f	class:RealViewCtrlParams
create	./dev/arm/rv_ctrl.cc	/^RealViewOscParams::create()$/;"	f	class:RealViewOscParams
create	./dev/arm/timer_cpulocal.cc	/^CpuLocalTimerParams::create()$/;"	f	class:CpuLocalTimerParams
create	./dev/arm/timer_sp804.cc	/^Sp804Params::create()$/;"	f	class:Sp804Params
create	./dev/arm/ufs_device.cc	/^UFSHostDeviceParams::create()$/;"	f	class:UFSHostDeviceParams
create	./dev/arm/vgic.cc	/^VGicParams::create()$/;"	f	class:VGicParams
create	./dev/baddev.cc	/^BadDeviceParams::create()$/;"	f	class:BadDeviceParams
create	./dev/i2c/bus.cc	/^I2CBusParams::create()$/;"	f	class:I2CBusParams
create	./dev/isa_fake.cc	/^IsaFakeParams::create()$/;"	f	class:IsaFakeParams
create	./dev/mips/malta.cc	/^MaltaParams::create()$/;"	f	class:MaltaParams
create	./dev/mips/malta_cchip.cc	/^MaltaCChipParams::create()$/;"	f	class:MaltaCChipParams
create	./dev/mips/malta_io.cc	/^MaltaIOParams::create()$/;"	f	class:MaltaIOParams
create	./dev/net/dist_etherlink.cc	/^DistEtherLinkParams::create()$/;"	f	class:DistEtherLinkParams
create	./dev/net/etherbus.cc	/^EtherBusParams::create()$/;"	f	class:EtherBusParams
create	./dev/net/etherdump.cc	/^EtherDumpParams::create()$/;"	f	class:EtherDumpParams
create	./dev/net/etherlink.cc	/^EtherLinkParams::create()$/;"	f	class:EtherLinkParams
create	./dev/net/ethertap.cc	/^EtherTapParams::create()$/;"	f	class:EtherTapParams
create	./dev/net/i8254xGBe.cc	/^IGbEParams::create()$/;"	f	class:IGbEParams
create	./dev/net/ns_gige.cc	/^NSGigEParams::create()$/;"	f	class:NSGigEParams
create	./dev/net/sinic.cc	/^SinicParams::create()$/;"	f	class:SinicParams
create	./dev/pci/copy_engine.cc	/^CopyEngineParams::create()$/;"	f	class:CopyEngineParams
create	./dev/pci/host.cc	/^GenericPciHostParams::create()$/;"	f	class:GenericPciHostParams
create	./dev/sparc/dtod.cc	/^DumbTODParams::create()$/;"	f	class:DumbTODParams
create	./dev/sparc/iob.cc	/^IobParams::create()$/;"	f	class:IobParams
create	./dev/sparc/mm_disk.cc	/^MmDiskParams::create()$/;"	f	class:MmDiskParams
create	./dev/sparc/t1000.cc	/^T1000Params::create()$/;"	f	class:T1000Params
create	./dev/storage/disk_image.cc	/^CowDiskImageParams::create()$/;"	f	class:CowDiskImageParams
create	./dev/storage/disk_image.cc	/^RawDiskImageParams::create()$/;"	f	class:RawDiskImageParams
create	./dev/storage/ide_ctrl.cc	/^IdeControllerParams::create()$/;"	f	class:IdeControllerParams
create	./dev/storage/ide_disk.cc	/^IdeDiskParams::create()$/;"	f	class:IdeDiskParams
create	./dev/storage/simple_disk.cc	/^SimpleDiskParams::create()$/;"	f	class:SimpleDiskParams
create	./dev/terminal.cc	/^TerminalParams::create()$/;"	f	class:TerminalParams
create	./dev/uart8250.cc	/^Uart8250Params::create()$/;"	f	class:Uart8250Params
create	./dev/virtio/block.cc	/^VirtIOBlockParams::create()$/;"	f	class:VirtIOBlockParams
create	./dev/virtio/console.cc	/^VirtIOConsoleParams::create()$/;"	f	class:VirtIOConsoleParams
create	./dev/virtio/fs9p.cc	/^VirtIO9PDiodParams::create()$/;"	f	class:VirtIO9PDiodParams
create	./dev/virtio/fs9p.cc	/^VirtIO9PSocketParams::create()$/;"	f	class:VirtIO9PSocketParams
create	./dev/virtio/pci.cc	/^PciVirtIOParams::create()$/;"	f	class:PciVirtIOParams
create	./dev/x86/cmos.cc	/^CmosParams::create()$/;"	f	class:CmosParams
create	./dev/x86/i8042.cc	/^I8042Params::create()$/;"	f	class:I8042Params
create	./dev/x86/i82094aa.cc	/^I82094AAParams::create()$/;"	f	class:I82094AAParams
create	./dev/x86/i8237.cc	/^I8237Params::create()$/;"	f	class:I8237Params
create	./dev/x86/i8254.cc	/^I8254Params::create()$/;"	f	class:I8254Params
create	./dev/x86/i8259.cc	/^I8259Params::create()$/;"	f	class:I8259Params
create	./dev/x86/intdev.cc	/^X86IntLineParams::create()$/;"	f	class:X86IntLineParams
create	./dev/x86/intdev.cc	/^X86IntSinkPinParams::create()$/;"	f	class:X86IntSinkPinParams
create	./dev/x86/intdev.cc	/^X86IntSourcePinParams::create()$/;"	f	class:X86IntSourcePinParams
create	./dev/x86/pc.cc	/^PcParams::create()$/;"	f	class:PcParams
create	./dev/x86/south_bridge.cc	/^SouthBridgeParams::create()$/;"	f	class:SouthBridgeParams
create	./dev/x86/speaker.cc	/^PcSpeakerParams::create()$/;"	f	class:PcSpeakerParams
create	./mem/addr_mapper.cc	/^RangeAddrMapperParams::create()$/;"	f	class:RangeAddrMapperParams
create	./mem/bridge.cc	/^BridgeParams::create()$/;"	f	class:BridgeParams
create	./mem/cache/cache.cc	/^CacheParams::create()$/;"	f	class:CacheParams
create	./mem/cache/prefetch/stride.cc	/^StridePrefetcherParams::create()$/;"	f	class:StridePrefetcherParams
create	./mem/cache/prefetch/tagged.cc	/^TaggedPrefetcherParams::create()$/;"	f	class:TaggedPrefetcherParams
create	./mem/cache/tags/fa_lru.cc	/^FALRUParams::create()$/;"	f	class:FALRUParams
create	./mem/cache/tags/lru.cc	/^LRUParams::create()$/;"	f	class:LRUParams
create	./mem/cache/tags/random_repl.cc	/^RandomReplParams::create()$/;"	f	class:RandomReplParams
create	./mem/coherent_xbar.cc	/^CoherentXBarParams::create()$/;"	f	class:CoherentXBarParams
create	./mem/comm_monitor.cc	/^CommMonitorParams::create()$/;"	f	class:CommMonitorParams
create	./mem/dram_ctrl.cc	/^DRAMCtrlParams::create()$/;"	f	class:DRAMCtrlParams
create	./mem/dramsim2.cc	/^DRAMSim2Params::create()$/;"	f	class:DRAMSim2Params
create	./mem/external_master.cc	/^ExternalMasterParams::create()$/;"	f	class:ExternalMasterParams
create	./mem/external_slave.cc	/^ExternalSlaveParams::create()$/;"	f	class:ExternalSlaveParams
create	./mem/hmc_controller.cc	/^HMCControllerParams::create()$/;"	f	class:HMCControllerParams
create	./mem/mem_checker.cc	/^MemCheckerParams::create()$/;"	f	class:MemCheckerParams
create	./mem/mem_checker_monitor.cc	/^MemCheckerMonitorParams::create()$/;"	f	class:MemCheckerMonitorParams
create	./mem/noncoherent_xbar.cc	/^NoncoherentXBarParams::create()$/;"	f	class:NoncoherentXBarParams
create	./mem/probes/mem_trace.cc	/^MemTraceProbeParams::create()$/;"	f	class:MemTraceProbeParams
create	./mem/probes/stack_dist.cc	/^StackDistProbeParams::create()$/;"	f	class:StackDistProbeParams
create	./mem/ruby/network/BasicLink.cc	/^BasicExtLinkParams::create()$/;"	f	class:BasicExtLinkParams
create	./mem/ruby/network/BasicLink.cc	/^BasicIntLinkParams::create()$/;"	f	class:BasicIntLinkParams
create	./mem/ruby/network/BasicLink.cc	/^BasicLinkParams::create()$/;"	f	class:BasicLinkParams
create	./mem/ruby/network/BasicRouter.cc	/^BasicRouterParams::create()$/;"	f	class:BasicRouterParams
create	./mem/ruby/network/MessageBuffer.cc	/^MessageBufferParams::create()$/;"	f	class:MessageBufferParams
create	./mem/ruby/network/fault_model/FaultModel.cc	/^FaultModelParams::create()$/;"	f	class:FaultModelParams
create	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.cc	/^GarnetExtLink_dParams::create()$/;"	f	class:GarnetExtLink_dParams
create	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.cc	/^GarnetIntLink_dParams::create()$/;"	f	class:GarnetIntLink_dParams
create	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.cc	/^GarnetNetwork_dParams::create()$/;"	f	class:GarnetNetwork_dParams
create	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.cc	/^GarnetNetworkInterface_dParams::create()$/;"	f	class:GarnetNetworkInterface_dParams
create	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.cc	/^CreditLink_dParams::create()$/;"	f	class:CreditLink_dParams
create	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.cc	/^NetworkLink_dParams::create()$/;"	f	class:NetworkLink_dParams
create	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^GarnetRouter_dParams::create()$/;"	f	class:GarnetRouter_dParams
create	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.cc	/^GarnetExtLinkParams::create()$/;"	f	class:GarnetExtLinkParams
create	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.cc	/^GarnetIntLinkParams::create()$/;"	f	class:GarnetIntLinkParams
create	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.cc	/^GarnetNetworkParams::create()$/;"	f	class:GarnetNetworkParams
create	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.cc	/^GarnetNetworkInterfaceParams::create()$/;"	f	class:GarnetNetworkInterfaceParams
create	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.cc	/^NetworkLinkParams::create()$/;"	f	class:NetworkLinkParams
create	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^GarnetRouterParams::create()$/;"	f	class:GarnetRouterParams
create	./mem/ruby/network/simple/SimpleLink.cc	/^SimpleExtLinkParams::create()$/;"	f	class:SimpleExtLinkParams
create	./mem/ruby/network/simple/SimpleLink.cc	/^SimpleIntLinkParams::create()$/;"	f	class:SimpleIntLinkParams
create	./mem/ruby/network/simple/SimpleNetwork.cc	/^SimpleNetworkParams::create()$/;"	f	class:SimpleNetworkParams
create	./mem/ruby/network/simple/Switch.cc	/^SwitchParams::create()$/;"	f	class:SwitchParams
create	./mem/ruby/structures/AbstractReplacementPolicy.cc	/^ReplacementPolicyParams::create()$/;"	f	class:ReplacementPolicyParams
create	./mem/ruby/structures/CacheMemory.cc	/^RubyCacheParams::create()$/;"	f	class:RubyCacheParams
create	./mem/ruby/structures/DirectoryMemory.cc	/^RubyDirectoryMemoryParams::create()$/;"	f	class:RubyDirectoryMemoryParams
create	./mem/ruby/structures/LRUPolicy.cc	/^LRUReplacementPolicyParams::create()$/;"	f	class:LRUReplacementPolicyParams
create	./mem/ruby/structures/Prefetcher.cc	/^PrefetcherParams::create()$/;"	f	class:PrefetcherParams
create	./mem/ruby/structures/PseudoLRUPolicy.cc	/^PseudoLRUReplacementPolicyParams::create()$/;"	f	class:PseudoLRUReplacementPolicyParams
create	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControlParams::create()$/;"	f	class:RubyMemoryControlParams
create	./mem/ruby/structures/WireBuffer.cc	/^RubyWireBufferParams::create()$/;"	f	class:RubyWireBufferParams
create	./mem/ruby/system/DMASequencer.cc	/^DMASequencerParams::create()$/;"	f	class:DMASequencerParams
create	./mem/ruby/system/RubyPortProxy.cc	/^RubyPortProxyParams::create()$/;"	f	class:RubyPortProxyParams
create	./mem/ruby/system/RubySystem.cc	/^RubySystemParams::create()$/;"	f	class:RubySystemParams
create	./mem/ruby/system/Sequencer.cc	/^RubySequencerParams::create()$/;"	f	class:RubySequencerParams
create	./mem/serial_link.cc	/^SerialLinkParams::create()$/;"	f	class:SerialLinkParams
create	./mem/simple_mem.cc	/^SimpleMemoryParams::create()$/;"	f	class:SimpleMemoryParams
create	./mem/snoop_filter.cc	/^SnoopFilterParams::create()$/;"	f	class:SnoopFilterParams
create	./python/m5/event.py	/^def create(obj, priority=None):$/;"	f
create	./sim/clock_domain.cc	/^DerivedClockDomainParams::create()$/;"	f	class:DerivedClockDomainParams
create	./sim/clock_domain.cc	/^SrcClockDomainParams::create()$/;"	f	class:SrcClockDomainParams
create	./sim/dvfs_handler.cc	/^DVFSHandlerParams::create()$/;"	f	class:DVFSHandlerParams
create	./sim/probe/probe.cc	/^ProbeListenerObjectParams::create()$/;"	f	class:ProbeListenerObjectParams
create	./sim/process.cc	/^LiveProcess::create(LiveProcessParams * params)$/;"	f	class:LiveProcess
create	./sim/process.cc	/^LiveProcessParams::create()$/;"	f	class:LiveProcessParams
create	./sim/root.cc	/^RootParams::create()$/;"	f	class:RootParams
create	./sim/sub_system.cc	/^SubSystemParams::create()$/;"	f	class:SubSystemParams
create	./sim/system.cc	/^SystemParams::create()$/;"	f	class:SystemParams
create	./sim/voltage_domain.cc	/^VoltageDomainParams::create()$/;"	f	class:VoltageDomainParams
createBackingStore	./mem/physical.cc	/^PhysicalMemory::createBackingStore(AddrRange range,$/;"	f	class:PhysicalMemory
createCCObject	./python/m5/SimObject.py	/^    def createCCObject(self):$/;"	f
createCxxConfigDirectoryEntryFile	./python/m5/SimObject.py	/^def createCxxConfigDirectoryEntryFile(code, name, simobj, is_header):$/;"	f
createDevice	./cpu/kvm/vm.cc	/^KvmVM::createDevice(uint32_t type, uint32_t flags)$/;"	f	class:KvmVM
createDmaEngine	./dev/arm/hdlcd.cc	/^HDLcd::createDmaEngine()$/;"	f	class:HDLcd
createIRQChip	./cpu/kvm/vm.cc	/^KvmVM::createIRQChip()$/;"	f	class:KvmVM
createInterruptController	./cpu/BaseCPU.py	/^    def createInterruptController(self):$/;"	f
createLinks	./mem/ruby/network/Topology.cc	/^Topology::createLinks(Network *net)$/;"	f	class:Topology
createMachineID	./mem/ruby/slicc_interface/RubySlicc_ComponentMapping.hh	/^createMachineID(MachineType type, NodeID id)$/;"	f
createObjectFile	./base/loader/object_file.cc	/^createObjectFile(const string &fname, bool raw)$/;"	f
createRead	./mem/packet.hh	/^    createRead(const RequestPtr req)$/;"	f	class:Packet
createStreams	./proto/protoio.cc	/^ProtoInputStream::createStreams()$/;"	f	class:ProtoInputStream
createSubdirectory	./base/output.cc	/^OutputDirectory::createSubdirectory(const string &name) const$/;"	f	class:OutputDirectory
createSymbol	./mem/slicc/generate/html.py	/^def createSymbol(symbol, title):$/;"	f
createThreads	./cpu/BaseCPU.py	/^    def createThreads(self):$/;"	f
createTimers	./dev/arm/generic_timer.cc	/^GenericTimer::createTimers(unsigned cpus)$/;"	f	class:GenericTimer
createTraceFile	./cpu/inst_pb_trace.cc	/^InstPBTrace::createTraceFile(std::string filename)$/;"	f	class:Trace::InstPBTrace
createVCPU	./cpu/kvm/vm.cc	/^KvmVM::createVCPU(long vcpuID)$/;"	f	class:KvmVM
createVM	./cpu/kvm/vm.cc	/^Kvm::createVM()$/;"	f	class:Kvm
createWrite	./mem/packet.hh	/^    createWrite(const RequestPtr req)$/;"	f	class:Packet
creatorID	./arch/x86/bios/acpi.hh	/^    std::string creatorID;$/;"	m	class:X86ISA::ACPI::SysDescTable
creatorRevision	./arch/x86/bios/acpi.hh	/^    uint32_t creatorRevision;$/;"	m	class:X86ISA::ACPI::SysDescTable
creator_id	./arch/x86/bios/ACPI.py	/^    creator_id = Param.String('',$/;"	v	class:X86ACPISysDescTable
creator_revision	./arch/x86/bios/ACPI.py	/^    creator_revision = Param.UInt32(0,$/;"	v	class:X86ACPISysDescTable
creditQueue	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    flitBuffer_d *creditQueue;$/;"	m	class:InputUnit_d
creditQueue	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    flitBuffer_d *creditQueue;$/;"	m	class:NetworkInterface_d
credit_conservation__credit_generation	./mem/ruby/network/fault_model/FaultModel.hh	/^        credit_conservation__credit_generation,$/;"	e	enum:FaultModel::fault_type
credit_conservation__credit_loss	./mem/ruby/network/fault_model/FaultModel.hh	/^        credit_conservation__credit_loss,$/;"	e	enum:FaultModel::fault_type
credit_links	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    credit_links = VectorParam.CreditLink_d(cls, "backward flow-control links")$/;"	v	class:GarnetExtLink_d
credit_links	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    credit_links = VectorParam.CreditLink_d(cls, "backward flow-control links")$/;"	v	class:GarnetIntLink_d
crfd	./base/loader/coff_sym.h	/^    coff_int    crfd;           \/* count file indirect entries *\/$/;"	m	struct:ecoff_fdr
crfd	./base/loader/coff_sym.h	/^    coff_int    crfd;           \/* number of relative file descriptor entries *\/$/;"	m	struct:ecoff_symhdr
crossproduct	./python/m5/util/__init__.py	/^def crossproduct(items):$/;"	f
cs	./arch/x86/remote_gdb.hh	/^          uint32_t cs;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
cs	./arch/x86/remote_gdb.hh	/^          uint32_t cs;$/;"	m	struct:X86ISA::RemoteGDB::X86GdbRegCache::__anon57
cserve	./arch/alpha/osfpal.hh	/^        cserve = 0x09,$/;"	e	enum:PAL::__anon50
csprintf	./base/cprintf.hh	/^csprintf(const char *format, const Args &...args)$/;"	f
csprintf	./base/cprintf.hh	/^csprintf(const std::string &format, const Args &...args)$/;"	f
csr	./arch/sparc/remote_gdb.hh	/^            uint32_t csr;$/;"	m	struct:SparcISA::RemoteGDB::SPARCGdbRegCache::__anon42
css	./arch/mips/pra_constants.hh	/^    Bitfield<3,  0>  css;$/;"	m	namespace:MipsISA
csum	./dev/net/i8254xGBe_defs.hh	/^                    uint16_t csum;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon8::__anon9::__anon10
csum	./dev/net/i8254xGBe_defs.hh	/^            uint16_t csum;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon6
csym	./base/loader/coff_sym.h	/^    coff_int    csym;           \/* count file's of symbols *\/$/;"	m	struct:ecoff_fdr
ctest	./unittest/cprintftest.cc	68;"	d	file:
ctr	./arch/power/remote_gdb.hh	/^            uint32_t ctr;$/;"	m	struct:PowerISA::RemoteGDB::PowerGdbRegCache::__anon53
ctr	./mem/ruby/network/Network.hh	/^        Network *ctr;$/;"	m	class:Network::StatsCallback
ctr	./mem/ruby/slicc_interface/AbstractController.hh	/^        AbstractController *ctr;$/;"	m	class:AbstractController::StatsCallback
ctrInsts	./cpu/kvm/base.hh	/^    Counter ctrInsts;$/;"	m	class:BaseKvmCPU
ctrOk	./arch/power/insts/branch.hh	/^    ctrOk(uint32_t& ctr) const$/;"	f	class:PowerISA::BranchCond
ctrl	./dev/net/i8254xGBe_defs.hh	/^    CTRL ctrl;$/;"	m	struct:iGbReg::Regs
ctrl	./dev/pci/copy_engine_defs.hh	/^    CHANCTRL ctrl;$/;"	m	struct:CopyEngineReg::ChanRegs
ctrl	./dev/storage/ide_disk.hh	/^    IdeController *ctrl;$/;"	m	class:IdeDisk
ctrl32	./cpu/kvm/x86_cpu.cc	/^        } ctrl32;$/;"	m	union:FXSave::__anon38	typeref:struct:FXSave::__anon38::__anon39	file:
ctrl64	./cpu/kvm/x86_cpu.cc	/^        } ctrl64;$/;"	m	union:FXSave::__anon38	typeref:struct:FXSave::__anon38::__anon40	file:
ctrlAddr	./dev/storage/ide_ctrl.hh	/^        Addr cmdAddr, cmdSize, ctrlAddr, ctrlSize;$/;"	m	struct:IdeController::Channel
ctrlOffset	./dev/storage/ide_ctrl.hh	/^    uint32_t ioShift, ctrlOffset;$/;"	m	class:IdeController
ctrlRange	./dev/arm/generic_timer.hh	/^    const AddrRange ctrlRange;$/;"	m	class:GenericTimerMem
ctrlRead	./dev/arm/generic_timer.cc	/^GenericTimerMem::ctrlRead(Addr addr, size_t size) const$/;"	f	class:GenericTimerMem
ctrlReg	./arch/x86/registers.hh	/^    MiscReg ctrlReg;$/;"	m	union:X86ISA::__anon56
ctrlSize	./dev/storage/ide_ctrl.hh	/^        Addr cmdAddr, cmdSize, ctrlAddr, ctrlSize;$/;"	m	struct:IdeController::Channel
ctrlWrite	./dev/arm/generic_timer.cc	/^GenericTimerMem::ctrlWrite(Addr addr, size_t size, uint64_t value)$/;"	f	class:GenericTimerMem
ctrl_ext	./dev/net/i8254xGBe_defs.hh	/^    CTRL_EXT ctrl_ext;$/;"	m	struct:iGbReg::Regs
ctrl_offset	./dev/storage/Ide.py	/^    ctrl_offset = Param.UInt32(0x0, "IDE disk control offset")$/;"	v	class:IdeController
ctrlreg	./arch/alpha/registers.hh	/^    MiscReg ctrlreg;$/;"	m	union:AlphaISA::AnyReg
ctrlreg	./arch/arm/registers.hh	/^    MiscReg  ctrlreg;$/;"	m	union:ArmISA::__anon66
ctrlreg	./arch/mips/registers.hh	/^    MiscReg  ctrlreg;$/;"	m	union:MipsISA::__anon82
ctrlreg	./arch/power/registers.hh	/^    MiscReg  ctrlreg;$/;"	m	union:PowerISA::__anon52
ctrlreg	./arch/sparc/registers.hh	/^    MiscReg ctrlreg;$/;"	m	union:SparcISA::__anon41
cu0	./arch/mips/pra_constants.hh	/^        Bitfield<28> cu0;$/;"	m	namespace:MipsISA
cu1	./arch/mips/pra_constants.hh	/^        Bitfield<29> cu1;$/;"	m	namespace:MipsISA
cu2	./arch/mips/pra_constants.hh	/^        Bitfield<30> cu2;$/;"	m	namespace:MipsISA
cu3	./arch/mips/pra_constants.hh	/^        Bitfield<31> cu3;$/;"	m	namespace:MipsISA
curAddr	./base/chunk_generator.hh	/^    Addr curAddr;$/;"	m	class:ChunkGenerator
curAddr	./dev/arm/pl111.hh	/^    Addr curAddr;$/;"	m	class:Pl111
curCycle	./sim/clocked_object.hh	/^    inline Cycles curCycle() const$/;"	f	class:Clocked
curDmaDesc	./dev/pci/copy_engine.hh	/^        CopyEngineReg::DmaDesc *curDmaDesc;$/;"	m	class:CopyEngine::CopyEngineChannel
curDoorbell	./dev/arm/ufs_device.hh	/^        Stats::Formula curDoorbell;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
curEventQueue	./sim/eventq.hh	/^inline EventQueue *curEventQueue() { return _curEventQueue; }$/;"	f
curEventQueue	./sim/eventq.hh	/^inline void curEventQueue(EventQueue *q) { _curEventQueue = q; }$/;"	f
curFetching	./dev/net/i8254xGBe.hh	/^        int curFetching;$/;"	m	class:IGbE::DescCache
curMacroStaticInst	./cpu/checker/cpu.hh	/^    StaticInstPtr curMacroStaticInst;$/;"	m	class:CheckerCPU
curMacroStaticInst	./cpu/simple/base.hh	/^    StaticInstPtr curMacroStaticInst;$/;"	m	class:BaseSimpleCPU
curMsg	./cpu/inst_pb_trace.hh	/^    ProtoMessage::Inst *curMsg;$/;"	m	class:Trace::InstPBTrace
curPrd	./dev/storage/ide_disk.hh	/^    PrdTableEntry curPrd;$/;"	m	class:IdeDisk
curPrdAddr	./dev/storage/ide_disk.hh	/^    uint32_t curPrdAddr;$/;"	m	class:IdeDisk
curPrefix	./mem/packet.hh	/^        const std::string &curPrefix() { return *curPrefixPtr; }$/;"	f	class:Packet::PrintReqState
curPrefixPtr	./mem/packet.hh	/^        std::string *curPrefixPtr;$/;"	m	class:Packet::PrintReqState
curSector	./dev/sparc/mm_disk.hh	/^    off_t curSector;$/;"	m	class:MmDisk
curSector	./dev/storage/ide_disk.hh	/^    uint32_t curSector;$/;"	m	class:IdeDisk
curSize	./base/chunk_generator.hh	/^    unsigned  curSize;$/;"	m	class:ChunkGenerator
curState	./base/vnc/vncserver.hh	/^    ConnectionState curState;$/;"	m	class:VncServer
curStaticInst	./cpu/checker/cpu.hh	/^    StaticInstPtr curStaticInst;$/;"	m	class:CheckerCPU
curStaticInst	./cpu/simple/base.hh	/^    StaticInstPtr curStaticInst;$/;"	m	class:BaseSimpleCPU
curTC	./arch/mips/mt_constants.hh	/^    Bitfield<28, 21> curTC;$/;"	m	namespace:MipsISA
curTaskInfo	./arch/generic/linux/threadinfo.hh	/^    curTaskInfo(Addr thread_info = 0)$/;"	f	class:Linux::ThreadInfo
curTaskMm	./arch/generic/linux/threadinfo.hh	/^    curTaskMm(Addr thread_info = 0)$/;"	f	class:Linux::ThreadInfo
curTaskName	./arch/generic/linux/threadinfo.hh	/^    curTaskName(Addr thread_info = 0)$/;"	f	class:Linux::ThreadInfo
curTaskPID	./arch/generic/linux/threadinfo.hh	/^    curTaskPID(Addr thread_info = 0)$/;"	f	class:Linux::ThreadInfo
curTaskStart	./arch/generic/linux/threadinfo.hh	/^    curTaskStart(Addr thread_info = 0)$/;"	f	class:Linux::ThreadInfo
curTaskTGID	./arch/generic/linux/threadinfo.hh	/^    curTaskTGID(Addr thread_info = 0)$/;"	f	class:Linux::ThreadInfo
curThread	./cpu/simple/base.hh	/^    ThreadID curThread;$/;"	m	class:BaseSimpleCPU
curThreadInfo	./arch/generic/linux/threadinfo.hh	/^    curThreadInfo()$/;"	f	class:Linux::ThreadInfo
curTick	./python/m5/simulate.py	/^def curTick():$/;"	f
curTick	./sim/core.hh	/^inline Tick curTick() { return _curEventQueue->getCurTick(); }$/;"	f
curTime	./dev/mc146818.hh	/^    struct tm curTime;$/;"	m	class:MC146818	typeref:struct:MC146818::tm
curTranType	./arch/arm/tlb.hh	/^    ArmTranslationType curTranType;$/;"	m	class:ArmISA::TLB
curVPE	./arch/mips/mt_constants.hh	/^    Bitfield<3,  0>  curVPE;$/;"	m	namespace:MipsISA
currBit	./dev/i2c/bus.hh	/^    int currBit;$/;"	m	class:I2CBus
currEL	./arch/arm/utility.hh	/^currEL(ThreadContext *tc)$/;"	f	namespace:ArmISA
currELHOffset	./arch/arm/faults.hh	/^        const uint16_t currELHOffset;$/;"	m	struct:ArmISA::ArmFault::FaultVals
currELTOffset	./arch/arm/faults.hh	/^        const uint16_t currELTOffset;$/;"	m	struct:ArmISA::ArmFault::FaultVals
currElement	./cpu/testers/traffic_gen/generators.hh	/^    TraceElement currElement;$/;"	m	class:TraceGen
currElement	./cpu/trace/trace_cpu.hh	/^        TraceElement currElement;$/;"	m	class:TraceCPU::FixedRetryGen
currOpMode	./arch/arm/utility.hh	/^currOpMode(ThreadContext *tc)$/;"	f	namespace:ArmISA
currState	./arch/arm/table_walker.hh	/^    WalkerState *currState;$/;"	m	class:ArmISA::TableWalker
currState	./cpu/testers/traffic_gen/traffic_gen.hh	/^    uint32_t currState;$/;"	m	class:TrafficGen
currStates	./arch/x86/pagetable_walker.hh	/^        std::list<WalkerState *> currStates;$/;"	m	class:X86ISA::Walker
current	./arch/arm/nativetrace.hh	/^        int current;$/;"	m	struct:Trace::ArmNativeTrace::ThreadState
current	./base/statistics.hh	/^    Counter current;$/;"	m	class:Stats::AvgStor
currentBBV	./cpu/simple/probes/simpoint.hh	/^    BasicBlockRange currentBBV;$/;"	m	class:SimPoint
currentBBVInstCount	./cpu/simple/probes/simpoint.hh	/^    uint64_t currentBBVInstCount;$/;"	m	class:SimPoint
currentClock	./sim/clock_domain.hh	/^    Stats::Value currentClock;$/;"	m	class:ClockDomain
currentCount	./dev/intel_8254_timer.cc	/^Intel8254Timer::Counter::currentCount()$/;"	f	class:Intel8254Timer::Counter
currentDirectory	./sim/serialize.cc	/^string CheckpointIn::currentDirectory;$/;"	m	class:CheckpointIn	file:
currentDirectory	./sim/serialize.hh	/^    static std::string currentDirectory;$/;"	m	class:CheckpointIn
currentFunctionEnd	./cpu/base.hh	/^    Addr currentFunctionEnd;$/;"	m	class:BaseCPU
currentFunctionStart	./cpu/base.hh	/^    Addr currentFunctionStart;$/;"	m	class:BaseCPU
currentLocation	./mem/slicc/parser.py	/^    def currentLocation(self):$/;"	m	class:SLICC
currentReadSSDQueue	./dev/arm/ufs_device.hh	/^        Stats::Scalar currentReadSSDQueue;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
currentSCSIQueue	./dev/arm/ufs_device.hh	/^        Stats::Scalar currentSCSIQueue;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
currentSection	./sim/serialize.cc	/^Serializable::currentSection()$/;"	f	class:Serializable
currentVoltage	./sim/voltage_domain.hh	/^    Stats::Value currentVoltage;$/;"	m	class:VoltageDomain
currentWriteSSDQueue	./dev/arm/ufs_device.hh	/^        Stats::Scalar currentWriteSSDQueue;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
current_cpu	./kern/tru64/tru64.hh	/^        uint32_t     current_cpu;       \/\/!< current_cpu$/;"	m	struct:Tru64::cpu_info
cursorImage	./dev/arm/pl111.hh	/^    uint32_t cursorImage[CrsrImageSize];$/;"	m	class:Pl111
cv	./arch/sparc/pagetable.hh	/^    bool cv()       const { assert(populated); return bits(entry4u,4,4); }$/;"	f	class:SparcISA::PageTableEntry
cv	./dev/net/dist_iface.hh	/^        std::condition_variable cv;$/;"	m	class:DistIface::Sync
cvec	./base/statistics.hh	/^    VCounter cvec;$/;"	m	class:Stats::DistStor
cvec	./base/statistics.hh	/^    VCounter cvec;$/;"	m	class:Stats::HistStor
cvec	./base/statistics.hh	/^    mutable VCounter cvec;$/;"	m	class:Stats::FormulaInfoProxy
cvec	./base/statistics.hh	/^    mutable VCounter cvec;$/;"	m	class:Stats::VectorInfoProxy
cvec	./base/stats/info.hh	/^    VCounter cvec;$/;"	m	struct:Stats::DistData
cvec	./base/stats/info.hh	/^    mutable VCounter cvec;$/;"	m	class:Stats::Vector2dInfo
cwd	./sim/Process.py	/^    cwd = Param.String('', "current working directory")$/;"	v	class:LiveProcess
cwd	./sim/process.hh	/^    std::string cwd;$/;"	m	class:LiveProcess
cwg	./arch/arm/miscregs.hh	/^      Bitfield<27,24> cwg;$/;"	m	namespace:ArmISA
cwp	./arch/sparc/isa.hh	/^    uint8_t cwp;            \/\/ Current Window Pointer$/;"	m	class:SparcISA::ISA
cx_config	./arch/sparc/tlb.hh	/^    uint64_t cx_config;$/;"	m	class:SparcISA::TLB
cx_tsb_ps0	./arch/sparc/tlb.hh	/^    uint64_t cx_tsb_ps0;$/;"	m	class:SparcISA::TLB
cx_tsb_ps1	./arch/sparc/tlb.hh	/^    uint64_t cx_tsb_ps1;$/;"	m	class:SparcISA::TLB
cxx_bases	./python/m5/SimObject.py	/^    cxx_bases = [ "Drainable", "Serializable" ]$/;"	v	class:SimObject
cxx_bool	./python/m5/SimObject.py	/^        def cxx_bool(b):$/;"	f	function:createCxxConfigDirectoryEntryFile
cxx_class	./arch/alpha/AlphaISA.py	/^    cxx_class = 'AlphaISA::ISA'$/;"	v	class:AlphaISA
cxx_class	./arch/alpha/AlphaInterrupts.py	/^    cxx_class = 'AlphaISA::Interrupts'$/;"	v	class:AlphaInterrupts
cxx_class	./arch/alpha/AlphaTLB.py	/^    cxx_class = 'AlphaISA::TLB'$/;"	v	class:AlphaTLB
cxx_class	./arch/arm/ArmISA.py	/^    cxx_class = 'ArmISA::ISA'$/;"	v	class:ArmISA
cxx_class	./arch/arm/ArmInterrupts.py	/^    cxx_class = 'ArmISA::Interrupts'$/;"	v	class:ArmInterrupts
cxx_class	./arch/arm/ArmNativeTrace.py	/^    cxx_class = 'Trace::ArmNativeTrace'$/;"	v	class:ArmNativeTrace
cxx_class	./arch/arm/ArmPMU.py	/^    cxx_class = 'ArmISA::PMU'$/;"	v	class:ArmPMU
cxx_class	./arch/arm/ArmTLB.py	/^    cxx_class = 'ArmISA::Stage2MMU'$/;"	v	class:ArmStage2MMU
cxx_class	./arch/arm/ArmTLB.py	/^    cxx_class = 'ArmISA::TLB'$/;"	v	class:ArmTLB
cxx_class	./arch/arm/ArmTLB.py	/^    cxx_class = 'ArmISA::TableWalker'$/;"	v	class:ArmTableWalker
cxx_class	./arch/mips/MipsISA.py	/^    cxx_class = 'MipsISA::ISA'$/;"	v	class:MipsISA
cxx_class	./arch/mips/MipsInterrupts.py	/^    cxx_class = 'MipsISA::Interrupts'$/;"	v	class:MipsInterrupts
cxx_class	./arch/mips/MipsTLB.py	/^    cxx_class = 'MipsISA::TLB'$/;"	v	class:MipsTLB
cxx_class	./arch/power/PowerISA.py	/^    cxx_class = 'PowerISA::ISA'$/;"	v	class:PowerISA
cxx_class	./arch/power/PowerInterrupts.py	/^    cxx_class = 'PowerISA::Interrupts'$/;"	v	class:PowerInterrupts
cxx_class	./arch/power/PowerTLB.py	/^    cxx_class = 'PowerISA::TLB'$/;"	v	class:PowerTLB
cxx_class	./arch/sparc/SparcISA.py	/^    cxx_class = 'SparcISA::ISA'$/;"	v	class:SparcISA
cxx_class	./arch/sparc/SparcInterrupts.py	/^    cxx_class = 'SparcISA::Interrupts'$/;"	v	class:SparcInterrupts
cxx_class	./arch/sparc/SparcNativeTrace.py	/^    cxx_class = 'Trace::SparcNativeTrace'$/;"	v	class:SparcNativeTrace
cxx_class	./arch/sparc/SparcTLB.py	/^    cxx_class = 'SparcISA::TLB'$/;"	v	class:SparcTLB
cxx_class	./arch/x86/X86ISA.py	/^    cxx_class = 'X86ISA::ISA'$/;"	v	class:X86ISA
cxx_class	./arch/x86/X86LocalApic.py	/^    cxx_class = 'X86ISA::Interrupts'$/;"	v	class:X86LocalApic
cxx_class	./arch/x86/X86NativeTrace.py	/^    cxx_class = 'Trace::X86NativeTrace'$/;"	v	class:X86NativeTrace
cxx_class	./arch/x86/X86TLB.py	/^    cxx_class = 'X86ISA::TLB'$/;"	v	class:X86TLB
cxx_class	./arch/x86/X86TLB.py	/^    cxx_class = 'X86ISA::Walker'$/;"	v	class:X86PagetableWalker
cxx_class	./arch/x86/bios/ACPI.py	/^    cxx_class = 'X86ISA::ACPI::RSDP'$/;"	v	class:X86ACPIRSDP
cxx_class	./arch/x86/bios/ACPI.py	/^    cxx_class = 'X86ISA::ACPI::RSDT'$/;"	v	class:X86ACPIRSDT
cxx_class	./arch/x86/bios/ACPI.py	/^    cxx_class = 'X86ISA::ACPI::SysDescTable'$/;"	v	class:X86ACPISysDescTable
cxx_class	./arch/x86/bios/ACPI.py	/^    cxx_class = 'X86ISA::ACPI::XSDT'$/;"	v	class:X86ACPIXSDT
cxx_class	./arch/x86/bios/E820.py	/^    cxx_class = 'X86ISA::E820Entry'$/;"	v	class:X86E820Entry
cxx_class	./arch/x86/bios/E820.py	/^    cxx_class = 'X86ISA::E820Table'$/;"	v	class:X86E820Table
cxx_class	./arch/x86/bios/IntelMP.py	/^    cxx_class = 'X86ISA::IntelMP::AddrSpaceMapping'$/;"	v	class:X86IntelMPAddrSpaceMapping
cxx_class	./arch/x86/bios/IntelMP.py	/^    cxx_class = 'X86ISA::IntelMP::BaseConfigEntry'$/;"	v	class:X86IntelMPBaseConfigEntry
cxx_class	./arch/x86/bios/IntelMP.py	/^    cxx_class = 'X86ISA::IntelMP::Bus'$/;"	v	class:X86IntelMPBus
cxx_class	./arch/x86/bios/IntelMP.py	/^    cxx_class = 'X86ISA::IntelMP::BusHierarchy'$/;"	v	class:X86IntelMPBusHierarchy
cxx_class	./arch/x86/bios/IntelMP.py	/^    cxx_class = 'X86ISA::IntelMP::CompatAddrSpaceMod'$/;"	v	class:X86IntelMPCompatAddrSpaceMod
cxx_class	./arch/x86/bios/IntelMP.py	/^    cxx_class = 'X86ISA::IntelMP::ConfigTable'$/;"	v	class:X86IntelMPConfigTable
cxx_class	./arch/x86/bios/IntelMP.py	/^    cxx_class = 'X86ISA::IntelMP::ExtConfigEntry'$/;"	v	class:X86IntelMPExtConfigEntry
cxx_class	./arch/x86/bios/IntelMP.py	/^    cxx_class = 'X86ISA::IntelMP::FloatingPointer'$/;"	v	class:X86IntelMPFloatingPointer
cxx_class	./arch/x86/bios/IntelMP.py	/^    cxx_class = 'X86ISA::IntelMP::IOAPIC'$/;"	v	class:X86IntelMPIOAPIC
cxx_class	./arch/x86/bios/IntelMP.py	/^    cxx_class = 'X86ISA::IntelMP::IOIntAssignment'$/;"	v	class:X86IntelMPIOIntAssignment
cxx_class	./arch/x86/bios/IntelMP.py	/^    cxx_class = 'X86ISA::IntelMP::LocalIntAssignment'$/;"	v	class:X86IntelMPLocalIntAssignment
cxx_class	./arch/x86/bios/IntelMP.py	/^    cxx_class = 'X86ISA::IntelMP::Processor'$/;"	v	class:X86IntelMPProcessor
cxx_class	./arch/x86/bios/SMBios.py	/^    cxx_class = 'X86ISA::SMBios::BiosInformation'$/;"	v	class:X86SMBiosBiosInformation
cxx_class	./arch/x86/bios/SMBios.py	/^    cxx_class = 'X86ISA::SMBios::SMBiosStructure'$/;"	v	class:X86SMBiosSMBiosStructure
cxx_class	./arch/x86/bios/SMBios.py	/^    cxx_class = 'X86ISA::SMBios::SMBiosTable'$/;"	v	class:X86SMBiosSMBiosTable
cxx_class	./cpu/CPUTracers.py	/^    cxx_class = 'Trace::ExeTracer'$/;"	v	class:ExeTracer
cxx_class	./cpu/CPUTracers.py	/^    cxx_class = 'Trace::IntelTrace'$/;"	v	class:IntelTrace
cxx_class	./cpu/CPUTracers.py	/^    cxx_class = 'Trace::NativeTrace'$/;"	v	class:NativeTrace
cxx_class	./cpu/InstPBTrace.py	/^    cxx_class = 'Trace::InstPBTrace'$/;"	v	class:InstPBTrace
cxx_class	./cpu/pred/BranchPredictor.py	/^    cxx_class = 'BPredUnit'$/;"	v	class:BranchPredictor
cxx_class	./cpu/pred/BranchPredictor.py	/^    cxx_class = 'BiModeBP'$/;"	v	class:BiModeBP
cxx_class	./cpu/pred/BranchPredictor.py	/^    cxx_class = 'LocalBP'$/;"	v	class:LocalBP
cxx_class	./cpu/pred/BranchPredictor.py	/^    cxx_class = 'TournamentBP'$/;"	v	class:TournamentBP
cxx_class	./dev/net/Ethernet.py	/^    cxx_class = 'Sinic::Device'$/;"	v	class:Sinic
cxx_class	./dev/pci/PciDevice.py	/^    cxx_class = 'PciDevice'$/;"	v	class:PciDevice
cxx_class	./dev/pci/PciHost.py	/^    cxx_class = 'GenericPciHost'$/;"	v	class:GenericPciHost
cxx_class	./dev/pci/PciHost.py	/^    cxx_class = 'PciHost'$/;"	v	class:PciHost
cxx_class	./dev/x86/Cmos.py	/^    cxx_class='X86ISA::Cmos'$/;"	v	class:Cmos
cxx_class	./dev/x86/I8042.py	/^    cxx_class = 'X86ISA::I8042'$/;"	v	class:I8042
cxx_class	./dev/x86/I82094AA.py	/^    cxx_class = 'X86ISA::I82094AA'$/;"	v	class:I82094AA
cxx_class	./dev/x86/I8237.py	/^    cxx_class = 'X86ISA::I8237'$/;"	v	class:I8237
cxx_class	./dev/x86/I8254.py	/^    cxx_class = 'X86ISA::I8254'$/;"	v	class:I8254
cxx_class	./dev/x86/I8259.py	/^    cxx_class='X86ISA::I8259'$/;"	v	class:I8259
cxx_class	./dev/x86/PcSpeaker.py	/^    cxx_class = 'X86ISA::Speaker'$/;"	v	class:PcSpeaker
cxx_class	./dev/x86/X86IntPin.py	/^    cxx_class = 'X86ISA::IntLine'$/;"	v	class:X86IntLine
cxx_class	./dev/x86/X86IntPin.py	/^    cxx_class = 'X86ISA::IntSinkPin'$/;"	v	class:X86IntSinkPin
cxx_class	./dev/x86/X86IntPin.py	/^    cxx_class = 'X86ISA::IntSourcePin'$/;"	v	class:X86IntSourcePin
cxx_class	./mem/cache/prefetch/Prefetcher.py	/^    cxx_class = "QueuedPrefetcher"$/;"	v	class:QueuedPrefetcher
cxx_class	./mem/cache/prefetch/Prefetcher.py	/^    cxx_class = 'StridePrefetcher'$/;"	v	class:StridePrefetcher
cxx_class	./mem/cache/prefetch/Prefetcher.py	/^    cxx_class = 'TaggedPrefetcher'$/;"	v	class:TaggedPrefetcher
cxx_class	./mem/cache/tags/Tags.py	/^    cxx_class = 'FALRU'$/;"	v	class:FALRU
cxx_class	./mem/cache/tags/Tags.py	/^    cxx_class = 'LRU'$/;"	v	class:LRU
cxx_class	./mem/cache/tags/Tags.py	/^    cxx_class = 'RandomRepl'$/;"	v	class:RandomRepl
cxx_class	./mem/ruby/network/MessageBuffer.py	/^    cxx_class = 'MessageBuffer'$/;"	v	class:MessageBuffer
cxx_class	./mem/ruby/network/Network.py	/^    cxx_class = 'Network'$/;"	v	class:RubyNetwork
cxx_class	./mem/ruby/network/fault_model/FaultModel.py	/^    cxx_class = 'FaultModel' $/;"	v	class:FaultModel
cxx_class	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.py	/^    cxx_class = 'NetworkInterface_d'$/;"	v	class:GarnetNetworkInterface_d
cxx_class	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.py	/^    cxx_class = 'Router_d'$/;"	v	class:GarnetRouter_d
cxx_class	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.py	/^    cxx_class = 'NetworkInterface'$/;"	v	class:GarnetNetworkInterface
cxx_class	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.py	/^    cxx_class = 'Router'$/;"	v	class:GarnetRouter
cxx_class	./mem/ruby/slicc_interface/Controller.py	/^    cxx_class = 'AbstractController'$/;"	v	class:RubyController
cxx_class	./mem/ruby/structures/DirectoryMemory.py	/^    cxx_class = 'DirectoryMemory'$/;"	v	class:RubyDirectoryMemory
cxx_class	./mem/ruby/structures/LRUReplacementPolicy.py	/^    cxx_class = 'LRUPolicy'$/;"	v	class:LRUReplacementPolicy
cxx_class	./mem/ruby/structures/PseudoLRUReplacementPolicy.py	/^    cxx_class = 'PseudoLRUPolicy'$/;"	v	class:PseudoLRUReplacementPolicy
cxx_class	./mem/ruby/structures/ReplacementPolicy.py	/^    cxx_class = 'AbstractReplacementPolicy'$/;"	v	class:ReplacementPolicy
cxx_class	./mem/ruby/structures/RubyCache.py	/^    cxx_class = 'CacheMemory'$/;"	v	class:RubyCache
cxx_class	./mem/ruby/structures/RubyMemoryControl.py	/^    cxx_class = 'RubyMemoryControl'$/;"	v	class:RubyMemoryControl
cxx_class	./mem/ruby/structures/RubyPrefetcher.py	/^    cxx_class = 'Prefetcher'$/;"	v	class:Prefetcher
cxx_class	./mem/ruby/structures/WireBuffer.py	/^    cxx_class = 'WireBuffer'$/;"	v	class:RubyWireBuffer
cxx_class	./mem/ruby/system/Sequencer.py	/^    cxx_class = 'Sequencer'$/;"	v	class:RubySequencer
cxx_class	./sim/InstTracer.py	/^    cxx_class = 'Trace::InstTracer'$/;"	v	class:InstTracer
cxx_config_directory	./sim/cxx_config.cc	/^std::map<std::string, CxxConfigDirectoryEntry *> cxx_config_directory;$/;"	v
cxx_config_param_file	./python/m5/SimObject.py	/^    def cxx_config_param_file(cls, code, is_header):$/;"	m	class:MetaSimObject
cxx_decl	./python/m5/params.py	/^    def cxx_decl(cls, code):$/;"	m	class:MetaEnum
cxx_decl	./python/m5/params.py	/^    def cxx_decl(self, code):$/;"	m	class:ParamDesc
cxx_decl	./python/m5/params.py	/^    def cxx_decl(self, code):$/;"	m	class:Port
cxx_decl	./python/m5/params.py	/^    def cxx_decl(self, code):$/;"	m	class:VectorParamDesc
cxx_def	./python/m5/params.py	/^    def cxx_def(cls, code):$/;"	m	class:MetaEnum
cxx_header	./arch/alpha/AlphaISA.py	/^    cxx_header = "arch\/alpha\/isa.hh"$/;"	v	class:AlphaISA
cxx_header	./arch/alpha/AlphaInterrupts.py	/^    cxx_header = "arch\/alpha\/interrupts.hh"$/;"	v	class:AlphaInterrupts
cxx_header	./arch/alpha/AlphaSystem.py	/^    cxx_header = "arch\/alpha\/freebsd\/system.hh"$/;"	v	class:FreebsdAlphaSystem
cxx_header	./arch/alpha/AlphaSystem.py	/^    cxx_header = "arch\/alpha\/linux\/system.hh"$/;"	v	class:LinuxAlphaSystem
cxx_header	./arch/alpha/AlphaSystem.py	/^    cxx_header = "arch\/alpha\/system.hh"$/;"	v	class:AlphaSystem
cxx_header	./arch/alpha/AlphaSystem.py	/^    cxx_header = "arch\/alpha\/tru64\/system.hh"$/;"	v	class:Tru64AlphaSystem
cxx_header	./arch/alpha/AlphaTLB.py	/^    cxx_header = "arch\/alpha\/tlb.hh"$/;"	v	class:AlphaTLB
cxx_header	./arch/arm/ArmISA.py	/^    cxx_header = "arch\/arm\/isa.hh"$/;"	v	class:ArmISA
cxx_header	./arch/arm/ArmInterrupts.py	/^    cxx_header = "arch\/arm\/interrupts.hh"$/;"	v	class:ArmInterrupts
cxx_header	./arch/arm/ArmNativeTrace.py	/^    cxx_header = "arch\/arm\/nativetrace.hh"$/;"	v	class:ArmNativeTrace
cxx_header	./arch/arm/ArmPMU.py	/^    cxx_header = 'arch\/arm\/pmu.hh'$/;"	v	class:ArmPMU
cxx_header	./arch/arm/ArmSystem.py	/^    cxx_header = "arch\/arm\/freebsd\/system.hh"$/;"	v	class:FreebsdArmSystem
cxx_header	./arch/arm/ArmSystem.py	/^    cxx_header = "arch\/arm\/linux\/system.hh"$/;"	v	class:LinuxArmSystem
cxx_header	./arch/arm/ArmSystem.py	/^    cxx_header = "arch\/arm\/system.hh"$/;"	v	class:ArmSystem
cxx_header	./arch/arm/ArmSystem.py	/^    cxx_header = "arch\/arm\/system.hh"$/;"	v	class:GenericArmSystem
cxx_header	./arch/arm/ArmTLB.py	/^    cxx_header = "arch\/arm\/table_walker.hh"$/;"	v	class:ArmTableWalker
cxx_header	./arch/arm/ArmTLB.py	/^    cxx_header = "arch\/arm\/tlb.hh"$/;"	v	class:ArmTLB
cxx_header	./arch/arm/ArmTLB.py	/^    cxx_header = 'arch\/arm\/stage2_mmu.hh'$/;"	v	class:ArmStage2MMU
cxx_header	./arch/arm/kvm/ArmKvmCPU.py	/^    cxx_header = "arch\/arm\/kvm\/arm_cpu.hh"$/;"	v	class:ArmKvmCPU
cxx_header	./arch/arm/kvm/ArmV8KvmCPU.py	/^    cxx_header = "arch\/arm\/kvm\/armv8_cpu.hh"$/;"	v	class:ArmV8KvmCPU
cxx_header	./arch/arm/kvm/BaseArmKvmCPU.py	/^    cxx_header = "arch\/arm\/kvm\/base_cpu.hh"$/;"	v	class:BaseArmKvmCPU
cxx_header	./arch/arm/kvm/KvmGic.py	/^    cxx_header = "arch\/arm\/kvm\/gic.hh"$/;"	v	class:KvmGic
cxx_header	./arch/generic/BaseTLB.py	/^    cxx_header = "arch\/generic\/tlb.hh"$/;"	v	class:BaseTLB
cxx_header	./arch/mips/MipsISA.py	/^    cxx_header = "arch\/mips\/isa.hh"$/;"	v	class:MipsISA
cxx_header	./arch/mips/MipsInterrupts.py	/^    cxx_header = 'arch\/mips\/interrupts.hh'$/;"	v	class:MipsInterrupts
cxx_header	./arch/mips/MipsSystem.py	/^    cxx_header = 'arch\/mips\/bare_iron\/system.hh'$/;"	v	class:BareIronMipsSystem
cxx_header	./arch/mips/MipsSystem.py	/^    cxx_header = 'arch\/mips\/linux\/system.hh'$/;"	v	class:LinuxMipsSystem
cxx_header	./arch/mips/MipsSystem.py	/^    cxx_header = 'arch\/mips\/system.hh'$/;"	v	class:MipsSystem
cxx_header	./arch/mips/MipsTLB.py	/^    cxx_header = 'arch\/mips\/tlb.hh'$/;"	v	class:MipsTLB
cxx_header	./arch/power/PowerISA.py	/^    cxx_header = "arch\/power\/isa.hh"$/;"	v	class:PowerISA
cxx_header	./arch/power/PowerInterrupts.py	/^    cxx_header = 'arch\/power\/interrupts.hh'$/;"	v	class:PowerInterrupts
cxx_header	./arch/power/PowerTLB.py	/^    cxx_header = 'arch\/power\/tlb.hh'$/;"	v	class:PowerTLB
cxx_header	./arch/sparc/SparcISA.py	/^    cxx_header = "arch\/sparc\/isa.hh"$/;"	v	class:SparcISA
cxx_header	./arch/sparc/SparcInterrupts.py	/^    cxx_header = 'arch\/sparc\/interrupts.hh'$/;"	v	class:SparcInterrupts
cxx_header	./arch/sparc/SparcNativeTrace.py	/^    cxx_header = 'arch\/sparc\/nativetrace.hh'$/;"	v	class:SparcNativeTrace
cxx_header	./arch/sparc/SparcSystem.py	/^    cxx_header = 'arch\/sparc\/system.hh'$/;"	v	class:SparcSystem
cxx_header	./arch/sparc/SparcTLB.py	/^    cxx_header = 'arch\/sparc\/tlb.hh'$/;"	v	class:SparcTLB
cxx_header	./arch/x86/X86ISA.py	/^    cxx_header = "arch\/x86\/isa.hh"$/;"	v	class:X86ISA
cxx_header	./arch/x86/X86LocalApic.py	/^    cxx_header = 'arch\/x86\/interrupts.hh'$/;"	v	class:X86LocalApic
cxx_header	./arch/x86/X86NativeTrace.py	/^    cxx_header = 'arch\/x86\/nativetrace.hh'$/;"	v	class:X86NativeTrace
cxx_header	./arch/x86/X86System.py	/^    cxx_header = 'arch\/x86\/linux\/system.hh'$/;"	v	class:LinuxX86System
cxx_header	./arch/x86/X86System.py	/^    cxx_header = 'arch\/x86\/system.hh'$/;"	v	class:X86System
cxx_header	./arch/x86/X86TLB.py	/^    cxx_header = 'arch\/x86\/pagetable_walker.hh'$/;"	v	class:X86PagetableWalker
cxx_header	./arch/x86/X86TLB.py	/^    cxx_header = 'arch\/x86\/tlb.hh'$/;"	v	class:X86TLB
cxx_header	./arch/x86/bios/ACPI.py	/^    cxx_header = 'arch\/x86\/bios\/acpi.hh'$/;"	v	class:X86ACPIRSDP
cxx_header	./arch/x86/bios/ACPI.py	/^    cxx_header = 'arch\/x86\/bios\/acpi.hh'$/;"	v	class:X86ACPIRSDT
cxx_header	./arch/x86/bios/ACPI.py	/^    cxx_header = 'arch\/x86\/bios\/acpi.hh'$/;"	v	class:X86ACPISysDescTable
cxx_header	./arch/x86/bios/ACPI.py	/^    cxx_header = 'arch\/x86\/bios\/acpi.hh'$/;"	v	class:X86ACPIXSDT
cxx_header	./arch/x86/bios/E820.py	/^    cxx_header = 'arch\/x86\/bios\/e820.hh'$/;"	v	class:X86E820Entry
cxx_header	./arch/x86/bios/E820.py	/^    cxx_header = 'arch\/x86\/bios\/e820.hh'$/;"	v	class:X86E820Table
cxx_header	./arch/x86/bios/IntelMP.py	/^    cxx_header = 'arch\/x86\/bios\/intelmp.hh'$/;"	v	class:X86IntelMPAddrSpaceMapping
cxx_header	./arch/x86/bios/IntelMP.py	/^    cxx_header = 'arch\/x86\/bios\/intelmp.hh'$/;"	v	class:X86IntelMPBaseConfigEntry
cxx_header	./arch/x86/bios/IntelMP.py	/^    cxx_header = 'arch\/x86\/bios\/intelmp.hh'$/;"	v	class:X86IntelMPBus
cxx_header	./arch/x86/bios/IntelMP.py	/^    cxx_header = 'arch\/x86\/bios\/intelmp.hh'$/;"	v	class:X86IntelMPBusHierarchy
cxx_header	./arch/x86/bios/IntelMP.py	/^    cxx_header = 'arch\/x86\/bios\/intelmp.hh'$/;"	v	class:X86IntelMPCompatAddrSpaceMod
cxx_header	./arch/x86/bios/IntelMP.py	/^    cxx_header = 'arch\/x86\/bios\/intelmp.hh'$/;"	v	class:X86IntelMPConfigTable
cxx_header	./arch/x86/bios/IntelMP.py	/^    cxx_header = 'arch\/x86\/bios\/intelmp.hh'$/;"	v	class:X86IntelMPExtConfigEntry
cxx_header	./arch/x86/bios/IntelMP.py	/^    cxx_header = 'arch\/x86\/bios\/intelmp.hh'$/;"	v	class:X86IntelMPFloatingPointer
cxx_header	./arch/x86/bios/IntelMP.py	/^    cxx_header = 'arch\/x86\/bios\/intelmp.hh'$/;"	v	class:X86IntelMPIOAPIC
cxx_header	./arch/x86/bios/IntelMP.py	/^    cxx_header = 'arch\/x86\/bios\/intelmp.hh'$/;"	v	class:X86IntelMPIOIntAssignment
cxx_header	./arch/x86/bios/IntelMP.py	/^    cxx_header = 'arch\/x86\/bios\/intelmp.hh'$/;"	v	class:X86IntelMPLocalIntAssignment
cxx_header	./arch/x86/bios/IntelMP.py	/^    cxx_header = 'arch\/x86\/bios\/intelmp.hh'$/;"	v	class:X86IntelMPProcessor
cxx_header	./arch/x86/bios/SMBios.py	/^    cxx_header = 'arch\/x86\/bios\/smbios.hh'$/;"	v	class:X86SMBiosBiosInformation
cxx_header	./arch/x86/bios/SMBios.py	/^    cxx_header = 'arch\/x86\/bios\/smbios.hh'$/;"	v	class:X86SMBiosSMBiosStructure
cxx_header	./arch/x86/bios/SMBios.py	/^    cxx_header = 'arch\/x86\/bios\/smbios.hh'$/;"	v	class:X86SMBiosSMBiosTable
cxx_header	./base/CPA.py	/^    cxx_header = "base\/cp_annotate.hh"$/;"	v	class:CPA
cxx_header	./base/vnc/Vnc.py	/^    cxx_header = "base\/vnc\/vncinput.hh"$/;"	v	class:VncInput
cxx_header	./base/vnc/Vnc.py	/^    cxx_header = "base\/vnc\/vncserver.hh"$/;"	v	class:VncServer
cxx_header	./cpu/BaseCPU.py	/^    cxx_header = "cpu\/base.hh"$/;"	v	class:BaseCPU
cxx_header	./cpu/CPUTracers.py	/^    cxx_header = "cpu\/exetrace.hh"$/;"	v	class:ExeTracer
cxx_header	./cpu/CPUTracers.py	/^    cxx_header = "cpu\/inteltrace.hh"$/;"	v	class:IntelTrace
cxx_header	./cpu/CPUTracers.py	/^    cxx_header = 'cpu\/nativetrace.hh'$/;"	v	class:NativeTrace
cxx_header	./cpu/CheckerCPU.py	/^    cxx_header = "cpu\/checker\/cpu.hh"$/;"	v	class:CheckerCPU
cxx_header	./cpu/DummyChecker.py	/^    cxx_header = 'cpu\/dummy_checker.hh'$/;"	v	class:DummyChecker
cxx_header	./cpu/FuncUnit.py	/^    cxx_header = "cpu\/func_unit.hh"$/;"	v	class:FUDesc
cxx_header	./cpu/FuncUnit.py	/^    cxx_header = "cpu\/func_unit.hh"$/;"	v	class:OpDesc
cxx_header	./cpu/InstPBTrace.py	/^    cxx_header = 'cpu\/inst_pb_trace.hh'$/;"	v	class:InstPBTrace
cxx_header	./cpu/IntrControl.py	/^    cxx_header = "cpu\/intr_control.hh"$/;"	v	class:IntrControl
cxx_header	./cpu/TimingExpr.py	/^    cxx_header = 'cpu\/timing_expr.hh'$/;"	v	class:TimingExpr
cxx_header	./cpu/TimingExpr.py	/^    cxx_header = 'cpu\/timing_expr.hh'$/;"	v	class:TimingExprBin
cxx_header	./cpu/TimingExpr.py	/^    cxx_header = 'cpu\/timing_expr.hh'$/;"	v	class:TimingExprIf
cxx_header	./cpu/TimingExpr.py	/^    cxx_header = 'cpu\/timing_expr.hh'$/;"	v	class:TimingExprLet
cxx_header	./cpu/TimingExpr.py	/^    cxx_header = 'cpu\/timing_expr.hh'$/;"	v	class:TimingExprLiteral
cxx_header	./cpu/TimingExpr.py	/^    cxx_header = 'cpu\/timing_expr.hh'$/;"	v	class:TimingExprReadIntReg
cxx_header	./cpu/TimingExpr.py	/^    cxx_header = 'cpu\/timing_expr.hh'$/;"	v	class:TimingExprRef
cxx_header	./cpu/TimingExpr.py	/^    cxx_header = 'cpu\/timing_expr.hh'$/;"	v	class:TimingExprSrcReg
cxx_header	./cpu/TimingExpr.py	/^    cxx_header = 'cpu\/timing_expr.hh'$/;"	v	class:TimingExprUn
cxx_header	./cpu/kvm/BaseKvmCPU.py	/^    cxx_header = "cpu\/kvm\/base.hh"$/;"	v	class:BaseKvmCPU
cxx_header	./cpu/kvm/KvmVM.py	/^    cxx_header = "cpu\/kvm\/vm.hh"$/;"	v	class:KvmVM
cxx_header	./cpu/kvm/X86KvmCPU.py	/^    cxx_header = "cpu\/kvm\/x86_cpu.hh"$/;"	v	class:X86KvmCPU
cxx_header	./cpu/minor/MinorCPU.py	/^    cxx_header = "cpu\/minor\/cpu.hh"$/;"	v	class:MinorCPU
cxx_header	./cpu/minor/MinorCPU.py	/^    cxx_header = "cpu\/minor\/func_unit.hh"$/;"	v	class:MinorFU
cxx_header	./cpu/minor/MinorCPU.py	/^    cxx_header = "cpu\/minor\/func_unit.hh"$/;"	v	class:MinorFUPool
cxx_header	./cpu/minor/MinorCPU.py	/^    cxx_header = "cpu\/minor\/func_unit.hh"$/;"	v	class:MinorFUTiming
cxx_header	./cpu/minor/MinorCPU.py	/^    cxx_header = "cpu\/minor\/func_unit.hh"$/;"	v	class:MinorOpClass
cxx_header	./cpu/minor/MinorCPU.py	/^    cxx_header = "cpu\/minor\/func_unit.hh"$/;"	v	class:MinorOpClassSet
cxx_header	./cpu/o3/FUPool.py	/^    cxx_header = "cpu\/o3\/fu_pool.hh"$/;"	v	class:FUPool
cxx_header	./cpu/o3/O3CPU.py	/^    cxx_header = 'cpu\/o3\/deriv.hh'$/;"	v	class:DerivO3CPU
cxx_header	./cpu/o3/O3Checker.py	/^    cxx_header = 'cpu\/o3\/checker.hh'$/;"	v	class:O3Checker
cxx_header	./cpu/o3/probe/ElasticTrace.py	/^    cxx_header = 'cpu\/o3\/probe\/elastic_trace.hh'$/;"	v	class:ElasticTrace
cxx_header	./cpu/o3/probe/SimpleTrace.py	/^    cxx_header = 'cpu\/o3\/probe\/simple_trace.hh'$/;"	v	class:SimpleTrace
cxx_header	./cpu/pred/BranchPredictor.py	/^    cxx_header = "cpu\/pred\/2bit_local.hh"$/;"	v	class:LocalBP
cxx_header	./cpu/pred/BranchPredictor.py	/^    cxx_header = "cpu\/pred\/bi_mode.hh"$/;"	v	class:BiModeBP
cxx_header	./cpu/pred/BranchPredictor.py	/^    cxx_header = "cpu\/pred\/bpred_unit.hh"$/;"	v	class:BranchPredictor
cxx_header	./cpu/pred/BranchPredictor.py	/^    cxx_header = "cpu\/pred\/tournament.hh"$/;"	v	class:TournamentBP
cxx_header	./cpu/simple/AtomicSimpleCPU.py	/^    cxx_header = "cpu\/simple\/atomic.hh"$/;"	v	class:AtomicSimpleCPU
cxx_header	./cpu/simple/BaseSimpleCPU.py	/^    cxx_header = "cpu\/simple\/base.hh"$/;"	v	class:BaseSimpleCPU
cxx_header	./cpu/simple/TimingSimpleCPU.py	/^    cxx_header = "cpu\/simple\/timing.hh"$/;"	v	class:TimingSimpleCPU
cxx_header	./cpu/simple/probes/SimPoint.py	/^    cxx_header = "cpu\/simple\/probes\/simpoint.hh"$/;"	v	class:SimPoint
cxx_header	./cpu/testers/directedtest/RubyDirectedTester.py	/^    cxx_header = "cpu\/testers\/directedtest\/DirectedGenerator.hh"$/;"	v	class:DirectedGenerator
cxx_header	./cpu/testers/directedtest/RubyDirectedTester.py	/^    cxx_header = "cpu\/testers\/directedtest\/InvalidateGenerator.hh"$/;"	v	class:InvalidateGenerator
cxx_header	./cpu/testers/directedtest/RubyDirectedTester.py	/^    cxx_header = "cpu\/testers\/directedtest\/RubyDirectedTester.hh"$/;"	v	class:RubyDirectedTester
cxx_header	./cpu/testers/directedtest/RubyDirectedTester.py	/^    cxx_header = "cpu\/testers\/directedtest\/SeriesRequestGenerator.hh"$/;"	v	class:SeriesRequestGenerator
cxx_header	./cpu/testers/memtest/MemTest.py	/^    cxx_header = "cpu\/testers\/memtest\/memtest.hh"$/;"	v	class:MemTest
cxx_header	./cpu/testers/networktest/NetworkTest.py	/^    cxx_header = "cpu\/testers\/networktest\/networktest.hh"$/;"	v	class:NetworkTest
cxx_header	./cpu/testers/rubytest/RubyTester.py	/^    cxx_header = "cpu\/testers\/rubytest\/RubyTester.hh"$/;"	v	class:RubyTester
cxx_header	./cpu/testers/traffic_gen/TrafficGen.py	/^    cxx_header = "cpu\/testers\/traffic_gen\/traffic_gen.hh"$/;"	v	class:TrafficGen
cxx_header	./cpu/trace/TraceCPU.py	/^    cxx_header = "cpu\/trace\/trace_cpu.hh"$/;"	v	class:TraceCPU
cxx_header	./dev/BadDevice.py	/^    cxx_header = "dev\/baddev.hh"$/;"	v	class:BadDevice
cxx_header	./dev/Device.py	/^    cxx_header = "dev\/io_device.hh"$/;"	v	class:BasicPioDevice
cxx_header	./dev/Device.py	/^    cxx_header = "dev\/io_device.hh"$/;"	v	class:DmaDevice
cxx_header	./dev/Device.py	/^    cxx_header = "dev\/io_device.hh"$/;"	v	class:PioDevice
cxx_header	./dev/Device.py	/^    cxx_header = "dev\/isa_fake.hh"$/;"	v	class:IsaFake
cxx_header	./dev/Platform.py	/^    cxx_header = "dev\/platform.hh"$/;"	v	class:Platform
cxx_header	./dev/Terminal.py	/^    cxx_header = "dev\/terminal.hh"$/;"	v	class:Terminal
cxx_header	./dev/Uart.py	/^    cxx_header = "dev\/uart.hh"$/;"	v	class:Uart
cxx_header	./dev/Uart.py	/^    cxx_header = "dev\/uart8250.hh"$/;"	v	class:Uart8250
cxx_header	./dev/alpha/AlphaBackdoor.py	/^    cxx_header = "dev\/alpha\/backdoor.hh"$/;"	v	class:AlphaBackdoor
cxx_header	./dev/alpha/Tsunami.py	/^    cxx_header = "dev\/alpha\/tsunami.hh"$/;"	v	class:Tsunami
cxx_header	./dev/alpha/Tsunami.py	/^    cxx_header = "dev\/alpha\/tsunami_cchip.hh"$/;"	v	class:TsunamiCChip
cxx_header	./dev/alpha/Tsunami.py	/^    cxx_header = "dev\/alpha\/tsunami_io.hh"$/;"	v	class:TsunamiIO
cxx_header	./dev/alpha/Tsunami.py	/^    cxx_header = "dev\/alpha\/tsunami_pchip.hh"$/;"	v	class:TsunamiPChip
cxx_header	./dev/arm/AbstractNVM.py	/^    cxx_header = "dev\/arm\/abstract_nvm.hh"$/;"	v	class:AbstractNVM
cxx_header	./dev/arm/EnergyCtrl.py	/^    cxx_header = "dev\/arm\/energy_ctrl.hh"$/;"	v	class:EnergyCtrl
cxx_header	./dev/arm/FlashDevice.py	/^    cxx_header = "dev\/arm\/flash_device.hh"$/;"	v	class:FlashDevice
cxx_header	./dev/arm/Gic.py	/^    cxx_header = "dev\/arm\/base_gic.hh"$/;"	v	class:BaseGic
cxx_header	./dev/arm/Gic.py	/^    cxx_header = "dev\/arm\/gic_pl390.hh"$/;"	v	class:Pl390
cxx_header	./dev/arm/Gic.py	/^    cxx_header = "dev\/arm\/gic_v2m.hh"$/;"	v	class:Gicv2m
cxx_header	./dev/arm/Gic.py	/^    cxx_header = "dev\/arm\/gic_v2m.hh"$/;"	v	class:Gicv2mFrame
cxx_header	./dev/arm/NoMali.py	/^    cxx_header = "dev\/arm\/gpu_nomali.hh"$/;"	v	class:NoMaliGpu
cxx_header	./dev/arm/RealView.py	/^    cxx_header = "dev\/arm\/a9scu.hh"$/;"	v	class:A9SCU
cxx_header	./dev/arm/RealView.py	/^    cxx_header = "dev\/arm\/amba_device.hh"$/;"	v	class:AmbaDmaDevice
cxx_header	./dev/arm/RealView.py	/^    cxx_header = "dev\/arm\/amba_device.hh"$/;"	v	class:AmbaIntDevice
cxx_header	./dev/arm/RealView.py	/^    cxx_header = "dev\/arm\/amba_device.hh"$/;"	v	class:AmbaPioDevice
cxx_header	./dev/arm/RealView.py	/^    cxx_header = "dev\/arm\/amba_fake.hh"$/;"	v	class:AmbaFake
cxx_header	./dev/arm/RealView.py	/^    cxx_header = "dev\/arm\/generic_timer.hh"$/;"	v	class:GenericTimer
cxx_header	./dev/arm/RealView.py	/^    cxx_header = "dev\/arm\/generic_timer.hh"$/;"	v	class:GenericTimerMem
cxx_header	./dev/arm/RealView.py	/^    cxx_header = "dev\/arm\/hdlcd.hh"$/;"	v	class:HDLcd
cxx_header	./dev/arm/RealView.py	/^    cxx_header = "dev\/arm\/kmi.hh"$/;"	v	class:Pl050
cxx_header	./dev/arm/RealView.py	/^    cxx_header = "dev\/arm\/pl011.hh"$/;"	v	class:Pl011
cxx_header	./dev/arm/RealView.py	/^    cxx_header = "dev\/arm\/pl111.hh"$/;"	v	class:Pl111
cxx_header	./dev/arm/RealView.py	/^    cxx_header = "dev\/arm\/realview.hh"$/;"	v	class:RealView
cxx_header	./dev/arm/RealView.py	/^    cxx_header = "dev\/arm\/rtc_pl031.hh"$/;"	v	class:PL031
cxx_header	./dev/arm/RealView.py	/^    cxx_header = "dev\/arm\/rv_ctrl.hh"$/;"	v	class:RealViewCtrl
cxx_header	./dev/arm/RealView.py	/^    cxx_header = "dev\/arm\/rv_ctrl.hh"$/;"	v	class:RealViewOsc
cxx_header	./dev/arm/RealView.py	/^    cxx_header = "dev\/arm\/timer_cpulocal.hh"$/;"	v	class:CpuLocalTimer
cxx_header	./dev/arm/RealView.py	/^    cxx_header = "dev\/arm\/timer_sp804.hh"$/;"	v	class:Sp804
cxx_header	./dev/arm/RealView.py	/^    cxx_header = "dev\/arm\/vgic.hh"$/;"	v	class:VGic
cxx_header	./dev/arm/UFSHostDevice.py	/^    cxx_header = "dev\/arm\/ufs_device.hh"$/;"	v	class:UFSHostDevice
cxx_header	./dev/i2c/I2C.py	/^    cxx_header = "dev\/i2c\/bus.hh"$/;"	v	class:I2CBus
cxx_header	./dev/i2c/I2C.py	/^    cxx_header = "dev\/i2c\/device.hh"$/;"	v	class:I2CDevice
cxx_header	./dev/mips/Malta.py	/^    cxx_header = "dev\/mips\/malta.hh"$/;"	v	class:Malta
cxx_header	./dev/mips/Malta.py	/^    cxx_header = "dev\/mips\/malta_cchip.hh"$/;"	v	class:MaltaCChip
cxx_header	./dev/mips/Malta.py	/^    cxx_header = "dev\/mips\/malta_io.hh"$/;"	v	class:MaltaIO
cxx_header	./dev/net/Ethernet.py	/^    cxx_header = "dev\/net\/dist_etherlink.hh"$/;"	v	class:DistEtherLink
cxx_header	./dev/net/Ethernet.py	/^    cxx_header = "dev\/net\/etherbus.hh"$/;"	v	class:EtherBus
cxx_header	./dev/net/Ethernet.py	/^    cxx_header = "dev\/net\/etherdevice.hh"$/;"	v	class:EtherDevBase
cxx_header	./dev/net/Ethernet.py	/^    cxx_header = "dev\/net\/etherdevice.hh"$/;"	v	class:EtherDevice
cxx_header	./dev/net/Ethernet.py	/^    cxx_header = "dev\/net\/etherdump.hh"$/;"	v	class:EtherDump
cxx_header	./dev/net/Ethernet.py	/^    cxx_header = "dev\/net\/etherlink.hh"$/;"	v	class:EtherLink
cxx_header	./dev/net/Ethernet.py	/^    cxx_header = "dev\/net\/etherobject.hh"$/;"	v	class:EtherObject
cxx_header	./dev/net/Ethernet.py	/^    cxx_header = "dev\/net\/ethertap.hh"$/;"	v	class:EtherTap
cxx_header	./dev/net/Ethernet.py	/^    cxx_header = "dev\/net\/i8254xGBe.hh"$/;"	v	class:IGbE
cxx_header	./dev/net/Ethernet.py	/^    cxx_header = "dev\/net\/ns_gige.hh"$/;"	v	class:NSGigE
cxx_header	./dev/net/Ethernet.py	/^    cxx_header = "dev\/net\/sinic.hh"$/;"	v	class:Sinic
cxx_header	./dev/pci/CopyEngine.py	/^    cxx_header = "dev\/pci\/copy_engine.hh"$/;"	v	class:CopyEngine
cxx_header	./dev/pci/PciDevice.py	/^    cxx_header = "dev\/pci\/device.hh"$/;"	v	class:PciDevice
cxx_header	./dev/pci/PciHost.py	/^    cxx_header = "dev\/pci\/host.hh"$/;"	v	class:GenericPciHost
cxx_header	./dev/pci/PciHost.py	/^    cxx_header = "dev\/pci\/host.hh"$/;"	v	class:PciHost
cxx_header	./dev/sparc/T1000.py	/^    cxx_header = "dev\/sparc\/dtod.hh"$/;"	v	class:DumbTOD
cxx_header	./dev/sparc/T1000.py	/^    cxx_header = "dev\/sparc\/iob.hh"$/;"	v	class:Iob
cxx_header	./dev/sparc/T1000.py	/^    cxx_header = "dev\/sparc\/mm_disk.hh"$/;"	v	class:MmDisk
cxx_header	./dev/sparc/T1000.py	/^    cxx_header = "dev\/sparc\/t1000.hh"$/;"	v	class:T1000
cxx_header	./dev/storage/DiskImage.py	/^    cxx_header = "dev\/storage\/disk_image.hh"$/;"	v	class:CowDiskImage
cxx_header	./dev/storage/DiskImage.py	/^    cxx_header = "dev\/storage\/disk_image.hh"$/;"	v	class:DiskImage
cxx_header	./dev/storage/DiskImage.py	/^    cxx_header = "dev\/storage\/disk_image.hh"$/;"	v	class:RawDiskImage
cxx_header	./dev/storage/Ide.py	/^    cxx_header = "dev\/storage\/ide_ctrl.hh"$/;"	v	class:IdeController
cxx_header	./dev/storage/Ide.py	/^    cxx_header = "dev\/storage\/ide_disk.hh"$/;"	v	class:IdeDisk
cxx_header	./dev/storage/SimpleDisk.py	/^    cxx_header = "dev\/storage\/simple_disk.hh"$/;"	v	class:SimpleDisk
cxx_header	./dev/virtio/VirtIO.py	/^    cxx_header = 'dev\/virtio\/base.hh'$/;"	v	class:VirtIODeviceBase
cxx_header	./dev/virtio/VirtIO.py	/^    cxx_header = 'dev\/virtio\/pci.hh'$/;"	v	class:PciVirtIO
cxx_header	./dev/virtio/VirtIO9P.py	/^    cxx_header = 'dev\/virtio\/fs9p.hh'$/;"	v	class:VirtIO9PBase
cxx_header	./dev/virtio/VirtIO9P.py	/^    cxx_header = 'dev\/virtio\/fs9p.hh'$/;"	v	class:VirtIO9PDiod
cxx_header	./dev/virtio/VirtIO9P.py	/^    cxx_header = 'dev\/virtio\/fs9p.hh'$/;"	v	class:VirtIO9PProxy
cxx_header	./dev/virtio/VirtIO9P.py	/^    cxx_header = 'dev\/virtio\/fs9p.hh'$/;"	v	class:VirtIO9PSocket
cxx_header	./dev/virtio/VirtIOBlock.py	/^    cxx_header = 'dev\/virtio\/block.hh'$/;"	v	class:VirtIOBlock
cxx_header	./dev/virtio/VirtIOConsole.py	/^    cxx_header = 'dev\/virtio\/console.hh'$/;"	v	class:VirtIOConsole
cxx_header	./dev/x86/Cmos.py	/^    cxx_header = "dev\/x86\/cmos.hh"$/;"	v	class:Cmos
cxx_header	./dev/x86/I8042.py	/^    cxx_header = "dev\/x86\/i8042.hh"$/;"	v	class:I8042
cxx_header	./dev/x86/I82094AA.py	/^    cxx_header = "dev\/x86\/i82094aa.hh"$/;"	v	class:I82094AA
cxx_header	./dev/x86/I8237.py	/^    cxx_header = "dev\/x86\/i8237.hh"$/;"	v	class:I8237
cxx_header	./dev/x86/I8254.py	/^    cxx_header = "dev\/x86\/i8254.hh"$/;"	v	class:I8254
cxx_header	./dev/x86/I8259.py	/^    cxx_header = "dev\/x86\/i8259.hh"$/;"	v	class:I8259
cxx_header	./dev/x86/Pc.py	/^    cxx_header = "dev\/x86\/pc.hh"$/;"	v	class:Pc
cxx_header	./dev/x86/PcSpeaker.py	/^    cxx_header = "dev\/x86\/speaker.hh"$/;"	v	class:PcSpeaker
cxx_header	./dev/x86/SouthBridge.py	/^    cxx_header = "dev\/x86\/south_bridge.hh"$/;"	v	class:SouthBridge
cxx_header	./dev/x86/X86IntPin.py	/^    cxx_header = "dev\/x86\/intdev.hh"$/;"	v	class:X86IntLine
cxx_header	./dev/x86/X86IntPin.py	/^    cxx_header = "dev\/x86\/intdev.hh"$/;"	v	class:X86IntSinkPin
cxx_header	./dev/x86/X86IntPin.py	/^    cxx_header = "dev\/x86\/intdev.hh"$/;"	v	class:X86IntSourcePin
cxx_header	./mem/AbstractMemory.py	/^    cxx_header = "mem\/abstract_mem.hh"$/;"	v	class:AbstractMemory
cxx_header	./mem/AddrMapper.py	/^    cxx_header = 'mem\/addr_mapper.hh'$/;"	v	class:AddrMapper
cxx_header	./mem/AddrMapper.py	/^    cxx_header = 'mem\/addr_mapper.hh'$/;"	v	class:RangeAddrMapper
cxx_header	./mem/Bridge.py	/^    cxx_header = "mem\/bridge.hh"$/;"	v	class:Bridge
cxx_header	./mem/CommMonitor.py	/^    cxx_header = "mem\/comm_monitor.hh"$/;"	v	class:CommMonitor
cxx_header	./mem/DRAMCtrl.py	/^    cxx_header = "mem\/dram_ctrl.hh"$/;"	v	class:DRAMCtrl
cxx_header	./mem/DRAMSim2.py	/^    cxx_header = "mem\/dramsim2.hh"$/;"	v	class:DRAMSim2
cxx_header	./mem/ExternalMaster.py	/^    cxx_header = "mem\/external_master.hh"$/;"	v	class:ExternalMaster
cxx_header	./mem/ExternalSlave.py	/^    cxx_header = "mem\/external_slave.hh"$/;"	v	class:ExternalSlave
cxx_header	./mem/HMCController.py	/^        cxx_header = "mem\/hmc_controller.hh"$/;"	v	class:HMCController
cxx_header	./mem/MemChecker.py	/^    cxx_header = "mem\/mem_checker.hh"$/;"	v	class:MemChecker
cxx_header	./mem/MemChecker.py	/^    cxx_header = "mem\/mem_checker_monitor.hh"$/;"	v	class:MemCheckerMonitor
cxx_header	./mem/MemObject.py	/^    cxx_header = "mem\/mem_object.hh"$/;"	v	class:MemObject
cxx_header	./mem/SerialLink.py	/^    cxx_header = "mem\/serial_link.hh"$/;"	v	class:SerialLink
cxx_header	./mem/SimpleMemory.py	/^    cxx_header = "mem\/simple_mem.hh"$/;"	v	class:SimpleMemory
cxx_header	./mem/XBar.py	/^    cxx_header = "mem\/coherent_xbar.hh"$/;"	v	class:CoherentXBar
cxx_header	./mem/XBar.py	/^    cxx_header = "mem\/noncoherent_xbar.hh"$/;"	v	class:NoncoherentXBar
cxx_header	./mem/XBar.py	/^    cxx_header = "mem\/snoop_filter.hh"$/;"	v	class:SnoopFilter
cxx_header	./mem/XBar.py	/^    cxx_header = "mem\/xbar.hh"$/;"	v	class:BaseXBar
cxx_header	./mem/cache/Cache.py	/^    cxx_header = "mem\/cache\/base.hh"$/;"	v	class:BaseCache
cxx_header	./mem/cache/Cache.py	/^    cxx_header = 'mem\/cache\/cache.hh'$/;"	v	class:Cache
cxx_header	./mem/cache/prefetch/Prefetcher.py	/^    cxx_header = "mem\/cache\/prefetch\/base.hh"$/;"	v	class:BasePrefetcher
cxx_header	./mem/cache/prefetch/Prefetcher.py	/^    cxx_header = "mem\/cache\/prefetch\/queued.hh"$/;"	v	class:QueuedPrefetcher
cxx_header	./mem/cache/prefetch/Prefetcher.py	/^    cxx_header = "mem\/cache\/prefetch\/stride.hh"$/;"	v	class:StridePrefetcher
cxx_header	./mem/cache/prefetch/Prefetcher.py	/^    cxx_header = "mem\/cache\/prefetch\/tagged.hh"$/;"	v	class:TaggedPrefetcher
cxx_header	./mem/cache/tags/Tags.py	/^    cxx_header = "mem\/cache\/tags\/base.hh"$/;"	v	class:BaseTags
cxx_header	./mem/cache/tags/Tags.py	/^    cxx_header = "mem\/cache\/tags\/base_set_assoc.hh"$/;"	v	class:BaseSetAssoc
cxx_header	./mem/cache/tags/Tags.py	/^    cxx_header = "mem\/cache\/tags\/fa_lru.hh"$/;"	v	class:FALRU
cxx_header	./mem/cache/tags/Tags.py	/^    cxx_header = "mem\/cache\/tags\/lru.hh"$/;"	v	class:LRU
cxx_header	./mem/cache/tags/Tags.py	/^    cxx_header = "mem\/cache\/tags\/random_repl.hh"$/;"	v	class:RandomRepl
cxx_header	./mem/probes/BaseMemProbe.py	/^    cxx_header = "mem\/probes\/base.hh"$/;"	v	class:BaseMemProbe
cxx_header	./mem/probes/MemTraceProbe.py	/^    cxx_header = "mem\/probes\/mem_trace.hh"$/;"	v	class:MemTraceProbe
cxx_header	./mem/probes/StackDistProbe.py	/^    cxx_header = "mem\/probes\/stack_dist.hh"$/;"	v	class:StackDistProbe
cxx_header	./mem/ruby/network/BasicLink.py	/^    cxx_header = "mem\/ruby\/network\/BasicLink.hh"$/;"	v	class:BasicExtLink
cxx_header	./mem/ruby/network/BasicLink.py	/^    cxx_header = "mem\/ruby\/network\/BasicLink.hh"$/;"	v	class:BasicIntLink
cxx_header	./mem/ruby/network/BasicLink.py	/^    cxx_header = "mem\/ruby\/network\/BasicLink.hh"$/;"	v	class:BasicLink
cxx_header	./mem/ruby/network/BasicRouter.py	/^    cxx_header = "mem\/ruby\/network\/BasicRouter.hh"$/;"	v	class:BasicRouter
cxx_header	./mem/ruby/network/MessageBuffer.py	/^    cxx_header = "mem\/ruby\/network\/MessageBuffer.hh"$/;"	v	class:MessageBuffer
cxx_header	./mem/ruby/network/Network.py	/^    cxx_header = "mem\/ruby\/network\/Network.hh"$/;"	v	class:RubyNetwork
cxx_header	./mem/ruby/network/fault_model/FaultModel.py	/^    cxx_header = "mem\/ruby\/network\/fault_model\/FaultModel.hh"$/;"	v	class:FaultModel
cxx_header	./mem/ruby/network/garnet/BaseGarnetNetwork.py	/^    cxx_header = "mem\/ruby\/network\/garnet\/BaseGarnetNetwork.hh"$/;"	v	class:BaseGarnetNetwork
cxx_header	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    cxx_header = "mem\/ruby\/network\/garnet\/fixed-pipeline\/CreditLink_d.hh"$/;"	v	class:CreditLink_d
cxx_header	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    cxx_header = "mem\/ruby\/network\/garnet\/fixed-pipeline\/GarnetLink_d.hh"$/;"	v	class:GarnetExtLink_d
cxx_header	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    cxx_header = "mem\/ruby\/network\/garnet\/fixed-pipeline\/GarnetLink_d.hh"$/;"	v	class:GarnetIntLink_d
cxx_header	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    cxx_header = "mem\/ruby\/network\/garnet\/fixed-pipeline\/NetworkLink_d.hh"$/;"	v	class:NetworkLink_d
cxx_header	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.py	/^    cxx_header = "mem\/ruby\/network\/garnet\/fixed-pipeline\/GarnetNetwork_d.hh"$/;"	v	class:GarnetNetwork_d
cxx_header	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.py	/^    cxx_header = "mem\/ruby\/network\/garnet\/fixed-pipeline\/NetworkInterface_d.hh"$/;"	v	class:GarnetNetworkInterface_d
cxx_header	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.py	/^    cxx_header = "mem\/ruby\/network\/garnet\/fixed-pipeline\/Router_d.hh"$/;"	v	class:GarnetRouter_d
cxx_header	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.py	/^    cxx_header = "mem\/ruby\/network\/garnet\/flexible-pipeline\/GarnetLink.hh"$/;"	v	class:GarnetExtLink
cxx_header	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.py	/^    cxx_header = "mem\/ruby\/network\/garnet\/flexible-pipeline\/GarnetLink.hh"$/;"	v	class:GarnetIntLink
cxx_header	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.py	/^    cxx_header = "mem\/ruby\/network\/garnet\/flexible-pipeline\/NetworkLink.hh"$/;"	v	class:NetworkLink
cxx_header	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.py	/^    cxx_header = "mem\/ruby\/network\/garnet\/flexible-pipeline\/GarnetNetwork.hh"$/;"	v	class:GarnetNetwork
cxx_header	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.py	/^    cxx_header = "mem\/ruby\/network\/garnet\/flexible-pipeline\/NetworkInterface.hh"$/;"	v	class:GarnetNetworkInterface
cxx_header	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.py	/^    cxx_header = "mem\/ruby\/network\/garnet\/flexible-pipeline\/Router.hh"$/;"	v	class:GarnetRouter
cxx_header	./mem/ruby/network/simple/SimpleLink.py	/^    cxx_header = "mem\/ruby\/network\/simple\/SimpleLink.hh"$/;"	v	class:SimpleExtLink
cxx_header	./mem/ruby/network/simple/SimpleLink.py	/^    cxx_header = "mem\/ruby\/network\/simple\/SimpleLink.hh"$/;"	v	class:SimpleIntLink
cxx_header	./mem/ruby/network/simple/SimpleNetwork.py	/^    cxx_header = "mem\/ruby\/network\/simple\/SimpleNetwork.hh"$/;"	v	class:SimpleNetwork
cxx_header	./mem/ruby/network/simple/SimpleNetwork.py	/^    cxx_header = 'mem\/ruby\/network\/simple\/Switch.hh'$/;"	v	class:Switch
cxx_header	./mem/ruby/slicc_interface/Controller.py	/^    cxx_header = "mem\/ruby\/slicc_interface\/AbstractController.hh"$/;"	v	class:RubyController
cxx_header	./mem/ruby/structures/DirectoryMemory.py	/^    cxx_header = "mem\/ruby\/structures\/DirectoryMemory.hh"$/;"	v	class:RubyDirectoryMemory
cxx_header	./mem/ruby/structures/LRUReplacementPolicy.py	/^    cxx_header = 'mem\/ruby\/structures\/LRUPolicy.hh'$/;"	v	class:LRUReplacementPolicy
cxx_header	./mem/ruby/structures/PseudoLRUReplacementPolicy.py	/^    cxx_header = 'mem\/ruby\/structures\/PseudoLRUPolicy.hh'$/;"	v	class:PseudoLRUReplacementPolicy
cxx_header	./mem/ruby/structures/ReplacementPolicy.py	/^    cxx_header = 'mem\/ruby\/structures\/AbstractReplacementPolicy.hh'$/;"	v	class:ReplacementPolicy
cxx_header	./mem/ruby/structures/RubyCache.py	/^    cxx_header = "mem\/ruby\/structures\/CacheMemory.hh"$/;"	v	class:RubyCache
cxx_header	./mem/ruby/structures/RubyMemoryControl.py	/^    cxx_header = "mem\/ruby\/structures\/RubyMemoryControl.hh"$/;"	v	class:RubyMemoryControl
cxx_header	./mem/ruby/structures/RubyPrefetcher.py	/^    cxx_header = "mem\/ruby\/structures\/Prefetcher.hh"$/;"	v	class:Prefetcher
cxx_header	./mem/ruby/structures/WireBuffer.py	/^    cxx_header = "mem\/ruby\/structures\/WireBuffer.hh"$/;"	v	class:RubyWireBuffer
cxx_header	./mem/ruby/system/RubySystem.py	/^    cxx_header = "mem\/ruby\/system\/RubySystem.hh"$/;"	v	class:RubySystem
cxx_header	./mem/ruby/system/Sequencer.py	/^    cxx_header = "mem\/ruby\/system\/DMASequencer.hh"$/;"	v	class:DMASequencer
cxx_header	./mem/ruby/system/Sequencer.py	/^    cxx_header = "mem\/ruby\/system\/RubyPort.hh"$/;"	v	class:RubyPort
cxx_header	./mem/ruby/system/Sequencer.py	/^    cxx_header = "mem\/ruby\/system\/RubyPortProxy.hh"$/;"	v	class:RubyPortProxy
cxx_header	./mem/ruby/system/Sequencer.py	/^    cxx_header = "mem\/ruby\/system\/Sequencer.hh"$/;"	v	class:RubySequencer
cxx_header	./python/m5/SimObject.py	/^    cxx_header = "sim\/sim_object.hh"$/;"	v	class:SimObject
cxx_header	./sim/ClockDomain.py	/^    cxx_header = "sim\/clock_domain.hh"$/;"	v	class:ClockDomain
cxx_header	./sim/ClockDomain.py	/^    cxx_header = "sim\/clock_domain.hh"$/;"	v	class:DerivedClockDomain
cxx_header	./sim/ClockDomain.py	/^    cxx_header = "sim\/clock_domain.hh"$/;"	v	class:SrcClockDomain
cxx_header	./sim/ClockedObject.py	/^    cxx_header = "sim\/clocked_object.hh"$/;"	v	class:ClockedObject
cxx_header	./sim/DVFSHandler.py	/^    cxx_header = "sim\/dvfs_handler.hh"$/;"	v	class:DVFSHandler
cxx_header	./sim/InstTracer.py	/^    cxx_header = "sim\/insttracer.hh"$/;"	v	class:InstTracer
cxx_header	./sim/Process.py	/^    cxx_header = "sim\/emul_driver.hh"$/;"	v	class:EmulatedDriver
cxx_header	./sim/Process.py	/^    cxx_header = "sim\/process.hh"$/;"	v	class:LiveProcess
cxx_header	./sim/Process.py	/^    cxx_header = "sim\/process.hh"$/;"	v	class:Process
cxx_header	./sim/Root.py	/^    cxx_header = "sim\/root.hh"$/;"	v	class:Root
cxx_header	./sim/SubSystem.py	/^    cxx_header = "sim\/sub_system.hh"$/;"	v	class:SubSystem
cxx_header	./sim/System.py	/^    cxx_header = "sim\/system.hh"$/;"	v	class:System
cxx_header	./sim/TickedObject.py	/^    cxx_header = "sim\/ticked_object.hh"$/;"	v	class:TickedObject
cxx_header	./sim/VoltageDomain.py	/^    cxx_header = "sim\/voltage_domain.hh"$/;"	v	class:VoltageDomain
cxx_header	./sim/probe/Probe.py	/^    cxx_header = 'sim\/probe\/probe.hh'$/;"	v	class:ProbeListenerObject
cxx_ini_parse	./python/m5/params.py	/^    def cxx_ini_parse(cls, code, src, dest, ret):$/;"	m	class:AddrRange
cxx_ini_parse	./python/m5/params.py	/^    def cxx_ini_parse(cls, code, src, dest, ret):$/;"	m	class:Bool
cxx_ini_parse	./python/m5/params.py	/^    def cxx_ini_parse(cls, code, src, dest, ret):$/;"	m	class:Cycles
cxx_ini_parse	./python/m5/params.py	/^    def cxx_ini_parse(cls, code, src, dest, ret):$/;"	m	class:Enum
cxx_ini_parse	./python/m5/params.py	/^    def cxx_ini_parse(cls, code, src, dest, ret):$/;"	m	class:ParamValue
cxx_ini_parse	./python/m5/params.py	/^    def cxx_ini_parse(cls, code, src, dest, ret):$/;"	m	class:Time
cxx_ini_parse	./python/m5/params.py	/^    def cxx_ini_parse(self, code, src, dest, ret):$/;"	m	class:Current
cxx_ini_parse	./python/m5/params.py	/^    def cxx_ini_parse(self, code, src, dest, ret):$/;"	m	class:EthernetAddr
cxx_ini_parse	./python/m5/params.py	/^    def cxx_ini_parse(self, code, src, dest, ret):$/;"	m	class:Float
cxx_ini_parse	./python/m5/params.py	/^    def cxx_ini_parse(self, code, src, dest, ret):$/;"	m	class:MemoryBandwidth
cxx_ini_parse	./python/m5/params.py	/^    def cxx_ini_parse(self, code, src, dest, ret):$/;"	m	class:NetworkBandwidth
cxx_ini_parse	./python/m5/params.py	/^    def cxx_ini_parse(self, code, src, dest, ret):$/;"	m	class:NumericParamValue
cxx_ini_parse	./python/m5/params.py	/^    def cxx_ini_parse(self, code, src, dest, ret):$/;"	m	class:String
cxx_ini_parse	./python/m5/params.py	/^    def cxx_ini_parse(self, code, src, dest, ret):$/;"	m	class:TickParamValue
cxx_ini_parse	./python/m5/params.py	/^    def cxx_ini_parse(self, code, src, dest, ret):$/;"	m	class:Voltage
cxx_ini_predecls	./python/m5/params.py	/^    def cxx_ini_predecls(cls, code):$/;"	m	class:AddrRange
cxx_ini_predecls	./python/m5/params.py	/^    def cxx_ini_predecls(cls, code):$/;"	m	class:Bool
cxx_ini_predecls	./python/m5/params.py	/^    def cxx_ini_predecls(cls, code):$/;"	m	class:Current
cxx_ini_predecls	./python/m5/params.py	/^    def cxx_ini_predecls(cls, code):$/;"	m	class:Cycles
cxx_ini_predecls	./python/m5/params.py	/^    def cxx_ini_predecls(cls, code):$/;"	m	class:Float
cxx_ini_predecls	./python/m5/params.py	/^    def cxx_ini_predecls(cls, code):$/;"	m	class:MemoryBandwidth
cxx_ini_predecls	./python/m5/params.py	/^    def cxx_ini_predecls(cls, code):$/;"	m	class:NetworkBandwidth
cxx_ini_predecls	./python/m5/params.py	/^    def cxx_ini_predecls(cls, code):$/;"	m	class:NumericParamValue
cxx_ini_predecls	./python/m5/params.py	/^    def cxx_ini_predecls(cls, code):$/;"	m	class:ParamValue
cxx_ini_predecls	./python/m5/params.py	/^    def cxx_ini_predecls(cls, code):$/;"	m	class:TickParamValue
cxx_ini_predecls	./python/m5/params.py	/^    def cxx_ini_predecls(cls, code):$/;"	m	class:Time
cxx_ini_predecls	./python/m5/params.py	/^    def cxx_ini_predecls(cls, code):$/;"	m	class:Voltage
cxx_param_decl	./python/m5/SimObject.py	/^    def cxx_param_decl(cls, code):$/;"	m	class:MetaSimObject
cxx_predecls	./python/m5/SimObject.py	/^    def cxx_predecls(cls, code):$/;"	m	class:MetaSimObject
cxx_predecls	./python/m5/params.py	/^    def cxx_predecls(cls, code):$/;"	m	class:AddrRange
cxx_predecls	./python/m5/params.py	/^    def cxx_predecls(cls, code):$/;"	m	class:CheckedInt
cxx_predecls	./python/m5/params.py	/^    def cxx_predecls(cls, code):$/;"	m	class:Enum
cxx_predecls	./python/m5/params.py	/^    def cxx_predecls(cls, code):$/;"	m	class:EthernetAddr
cxx_predecls	./python/m5/params.py	/^    def cxx_predecls(cls, code):$/;"	m	class:IpAddress
cxx_predecls	./python/m5/params.py	/^    def cxx_predecls(cls, code):$/;"	m	class:IpNetmask
cxx_predecls	./python/m5/params.py	/^    def cxx_predecls(cls, code):$/;"	m	class:IpWithPort
cxx_predecls	./python/m5/params.py	/^    def cxx_predecls(cls, code):$/;"	m	class:ParamValue
cxx_predecls	./python/m5/params.py	/^    def cxx_predecls(cls, code):$/;"	m	class:TickParamValue
cxx_predecls	./python/m5/params.py	/^    def cxx_predecls(cls, code):$/;"	m	class:Time
cxx_predecls	./python/m5/params.py	/^    def cxx_predecls(self, code):$/;"	m	class:ParamDesc
cxx_predecls	./python/m5/params.py	/^    def cxx_predecls(self, code):$/;"	m	class:Port
cxx_predecls	./python/m5/params.py	/^    def cxx_predecls(self, code):$/;"	m	class:String
cxx_predecls	./python/m5/params.py	/^    def cxx_predecls(self, code):$/;"	m	class:VectorParamDesc
cxx_type	./python/m5/params.py	/^    cxx_type = 'Addr'$/;"	v	class:Addr
cxx_type	./python/m5/params.py	/^    cxx_type = 'AddrRange'$/;"	v	class:AddrRange
cxx_type	./python/m5/params.py	/^    cxx_type = 'Cycles'$/;"	v	class:Cycles
cxx_type	./python/m5/params.py	/^    cxx_type = 'Net::EthAddr'$/;"	v	class:EthernetAddr
cxx_type	./python/m5/params.py	/^    cxx_type = 'Net::IpAddress'$/;"	v	class:IpAddress
cxx_type	./python/m5/params.py	/^    cxx_type = 'Net::IpNetmask'$/;"	v	class:IpNetmask
cxx_type	./python/m5/params.py	/^    cxx_type = 'Net::IpWithPort'$/;"	v	class:IpWithPort
cxx_type	./python/m5/params.py	/^    cxx_type = 'Tick'$/;"	v	class:TickParamValue
cxx_type	./python/m5/params.py	/^    cxx_type = 'bool'$/;"	v	class:Bool
cxx_type	./python/m5/params.py	/^    cxx_type = 'double'$/;"	v	class:Current
cxx_type	./python/m5/params.py	/^    cxx_type = 'double'$/;"	v	class:Float
cxx_type	./python/m5/params.py	/^    cxx_type = 'double'$/;"	v	class:Voltage
cxx_type	./python/m5/params.py	/^    cxx_type = 'float'$/;"	v	class:MemoryBandwidth
cxx_type	./python/m5/params.py	/^    cxx_type = 'float'$/;"	v	class:NetworkBandwidth
cxx_type	./python/m5/params.py	/^    cxx_type = 'std::string'$/;"	v	class:String
cxx_type	./python/m5/params.py	/^    cxx_type = 'tm'$/;"	v	class:Time
cxx_type	./python/m5/params.py	/^    cxx_type = 'uint32_t'$/;"	v	class:MemorySize32
cxx_type	./python/m5/params.py	/^    cxx_type = 'uint64_t'$/;"	v	class:MemorySize
cycle	./sim/clocked_object.hh	/^    mutable Cycles cycle;$/;"	m	class:Clocked
cycleCounter	./arch/arm/pmu.hh	/^    CounterState cycleCounter;$/;"	m	class:ArmISA::PMU
cyclesBeforeInsert	./cpu/minor/func_unit.cc	/^FUPipeline::cyclesBeforeInsert()$/;"	f	class:Minor::FUPipeline
cyclesPerFrame	./dev/pixelpump.hh	/^    Cycles cyclesPerFrame() const {$/;"	f	struct:DisplayTimings
cyclesPerLine	./dev/pixelpump.hh	/^    Cycles cyclesPerLine() const {$/;"	f	struct:DisplayTimings
cyclesSinceLastStopped	./sim/ticked_object.hh	/^    cyclesSinceLastStopped() const$/;"	f	class:Ticked
cyclesToTicks	./sim/clocked_object.hh	/^    inline Tick cyclesToTicks(Cycles c) const$/;"	f	class:Clocked
cyclicIndexDec	./cpu/minor/execute.cc	/^cyclicIndexDec(unsigned int index, unsigned int cycle_size)$/;"	f	namespace:Minor
cyclicIndexInc	./cpu/minor/execute.cc	/^cyclicIndexInc(unsigned int index, unsigned int cycle_size)$/;"	f	namespace:Minor
cyl_high	./dev/storage/ide_disk.hh	/^    uint8_t cyl_high;$/;"	m	struct:CommandReg
cyl_low	./dev/storage/ide_disk.hh	/^    uint8_t cyl_low;$/;"	m	struct:CommandReg
d	./arch/arm/kvm/armv8_cpu.cc	/^    } d[2];$/;"	m	union:KvmFPReg	typeref:union:KvmFPReg::__anon81	file:
d	./arch/arm/miscregs.hh	/^        Bitfield<9> d;          \/\/ AArch64$/;"	m	namespace:ArmISA
d	./arch/arm/pmu.hh	/^        Bitfield<3> d;$/;"	m	class:ArmISA::PMU
d	./arch/mips/dt_constants.hh	/^    Bitfield<25>     d;$/;"	m	namespace:MipsISA
d	./arch/mips/pra_constants.hh	/^    Bitfield<2>      d;     \/\/ Dirty Bit$/;"	m	namespace:MipsISA
d	./arch/power/types.hh	/^    Bitfield<15,  0> d;$/;"	m	namespace:PowerISA
d	./arch/x86/pagetable.hh	/^        Bitfield<6> d;$/;"	m	namespace:X86ISA
d	./arch/x86/regs/misc.hh	/^        Bitfield<54> d; \/\/ Default Operand Size$/;"	m	namespace:X86ISA
d	./cpu/o3/regfile.hh	/^        FloatReg d;$/;"	m	union:PhysRegFile::__anon36
d	./python/m5/util/sorteddict.py	/^    d = SortedDict(x=24,e=5,j=4,b=2,z=26,d=4)$/;"	v	class:SortedDict
d1	./dev/net/i8254xGBe_defs.hh	/^    uint64_t d1;$/;"	m	struct:iGbReg::TxDesc
d2	./dev/net/i8254xGBe_defs.hh	/^    uint64_t d2;$/;"	m	struct:iGbReg::TxDesc
d32dis	./arch/arm/miscregs.hh	/^        Bitfield<30> d32dis;$/;"	m	namespace:ArmISA
dCacheLineSize	./arch/arm/miscregs.hh	/^      Bitfield<19,16> dCacheLineSize;$/;"	m	namespace:ArmISA
dToE	./cpu/minor/pipeline.hh	/^    Latch<ForwardInstData> dToE;$/;"	m	class:Minor::Pipeline
dWord0	./dev/arm/ufs_device.hh	/^            uint32_t dWord0;$/;"	m	struct:UFSHostDevice::UTPTransferReqDesc::RequestDescHeader
dWord0	./dev/arm/ufs_device.hh	/^        uint32_t dWord0;$/;"	m	struct:UFSHostDevice::LUNInfo
dWord0	./dev/arm/ufs_device.hh	/^        uint32_t dWord0;$/;"	m	struct:UFSHostDevice::UTPUPIUHeader
dWord1	./dev/arm/ufs_device.hh	/^            uint32_t dWord1;$/;"	m	struct:UFSHostDevice::UTPTransferReqDesc::RequestDescHeader
dWord1	./dev/arm/ufs_device.hh	/^        uint32_t dWord1;$/;"	m	struct:UFSHostDevice::LUNInfo
dWord1	./dev/arm/ufs_device.hh	/^        uint32_t dWord1;$/;"	m	struct:UFSHostDevice::UTPUPIUHeader
dWord2	./dev/arm/ufs_device.hh	/^            uint32_t dWord2;$/;"	m	struct:UFSHostDevice::UTPTransferReqDesc::RequestDescHeader
dWord2	./dev/arm/ufs_device.hh	/^        uint32_t dWord2;$/;"	m	struct:UFSHostDevice::UTPUPIUHeader
dWord3	./dev/arm/ufs_device.hh	/^            uint32_t dWord3;$/;"	m	struct:UFSHostDevice::UTPTransferReqDesc::RequestDescHeader
d_ino	./kern/tru64/tru64.hh	/^        ino_t d_ino;            \/\/!< file number of entry$/;"	m	struct:Tru64::dirent
d_name	./kern/tru64/tru64.hh	/^        char d_name[256];       \/\/!< dummy name length$/;"	m	struct:Tru64::dirent
d_namlen	./kern/tru64/tru64.hh	/^        uint16_t d_namlen;      \/\/!< length of string in d_name$/;"	m	struct:Tru64::dirent
d_reclen	./kern/tru64/tru64.hh	/^        uint16_t d_reclen;      \/\/!< length of this record$/;"	m	struct:Tru64::dirent
da	./arch/mips/mt_constants.hh	/^    Bitfield<15>     da;$/;"	m	namespace:MipsISA
da	./arch/mips/pra_constants.hh	/^    Bitfield<9,  7>  da;$/;"	m	namespace:MipsISA
dacr	./arch/arm/tlb.hh	/^    uint32_t dacr;$/;"	m	class:ArmISA::TLB
daif	./arch/arm/miscregs.hh	/^        Bitfield<9, 6> daif;    \/\/ AArch64$/;"	m	namespace:ArmISA
data	./arch/alpha/remote_gdb.hh	/^        char *data() const { return (char *)&r; }$/;"	f	class:AlphaISA::RemoteGDB::AlphaGdbRegCache
data	./arch/arm/decoder.hh	/^    MachInst data;$/;"	m	class:ArmISA::Decoder
data	./arch/arm/kvm/armv8_cpu.cc	/^    uint8_t data[32];$/;"	m	union:KvmFPReg	file:
data	./arch/arm/remote_gdb.hh	/^        char *data() const { return (char *)&r; }$/;"	f	class:ArmISA::RemoteGDB::AArch32GdbRegCache
data	./arch/arm/remote_gdb.hh	/^        char *data() const { return (char *)&r; }$/;"	f	class:ArmISA::RemoteGDB::AArch64GdbRegCache
data	./arch/arm/stage2_mmu.hh	/^        uint8_t   *data;$/;"	m	class:ArmISA::Stage2MMU::Stage2Translation
data	./arch/arm/table_walker.hh	/^        uint32_t     data;$/;"	m	class:ArmISA::TableWalker::L2Descriptor
data	./arch/arm/table_walker.hh	/^        uint32_t data;$/;"	m	class:ArmISA::TableWalker::L1Descriptor
data	./arch/arm/table_walker.hh	/^        uint64_t data;$/;"	m	class:ArmISA::TableWalker::LongDescriptor
data	./arch/mips/remote_gdb.hh	/^        char *data() const { return (char *)&r; }$/;"	f	class:MipsISA::RemoteGDB::MipsGdbRegCache
data	./arch/power/remote_gdb.hh	/^        char *data() const { return (char *)&r; }$/;"	f	class:PowerISA::RemoteGDB::PowerGdbRegCache
data	./arch/sparc/remote_gdb.hh	/^        char *data() const { return (char *)&r; }$/;"	f	class:SparcISA::RemoteGDB::SPARC64GdbRegCache
data	./arch/sparc/remote_gdb.hh	/^        char *data() const { return (char *)&r; }$/;"	f	class:SparcISA::RemoteGDB::SPARCGdbRegCache
data	./arch/x86/insts/microldstop.hh	/^        const RegIndex data;$/;"	m	class:X86ISA::LdStOp
data	./arch/x86/remote_gdb.hh	/^        char *data() const { return (char *)&r; }$/;"	f	class:X86ISA::RemoteGDB::AMD64GdbRegCache
data	./arch/x86/remote_gdb.hh	/^        char *data() const { return (char *)&r; }$/;"	f	class:X86ISA::RemoteGDB::X86GdbRegCache
data	./base/cp_annotate.hh	/^        uint32_t data;$/;"	m	struct:CPA::AnnotateData
data	./base/cp_annotate.hh	/^    AnnotateList data;$/;"	m	class:CPA
data	./base/inet.hh	/^    const uint8_t *data() const { return opt_data.data8; }$/;"	f	struct:Net::IpOpt
data	./base/inet.hh	/^    const uint8_t *data() const { return opt_data.data8; }$/;"	f	struct:Net::TcpOpt
data	./base/loader/object_file.hh	/^    Section data;$/;"	m	class:ObjectFile
data	./base/refcnt.hh	/^    T *data;$/;"	m	class:RefCountingPtr
data	./base/statistics.hh	/^    Counter data;$/;"	m	class:Stats::StatStor
data	./base/statistics.hh	/^    Storage *data(off_type index) { return &storage[index]; }$/;"	f	class:Stats::Vector2dBase
data	./base/statistics.hh	/^    Storage *data(off_type index) { return &storage[index]; }$/;"	f	class:Stats::VectorBase
data	./base/statistics.hh	/^    const ScalarInfo *data;$/;"	m	class:Stats::ScalarStatNode
data	./base/statistics.hh	/^    const Storage *data(off_type index) const { return &storage[index]; }$/;"	f	class:Stats::Vector2dBase
data	./base/statistics.hh	/^    const Storage *data(off_type index) const { return &storage[index]; }$/;"	f	class:Stats::VectorBase
data	./base/statistics.hh	/^    const VectorInfo *data;$/;"	m	class:Stats::VectorStatNode
data	./base/statistics.hh	/^    const typename Stat::Storage *data() const { return stat.data(index); }$/;"	f	class:Stats::DistProxy
data	./base/statistics.hh	/^    data() const$/;"	f	class:Stats::DistBase
data	./base/statistics.hh	/^    data() const$/;"	f	class:Stats::ScalarBase
data	./base/statistics.hh	/^    data() const$/;"	f	class:Stats::SparseHistBase
data	./base/statistics.hh	/^    data()$/;"	f	class:Stats::DistBase
data	./base/statistics.hh	/^    data()$/;"	f	class:Stats::ScalarBase
data	./base/statistics.hh	/^    data()$/;"	f	class:Stats::SparseHistBase
data	./base/statistics.hh	/^    data(off_type index) const$/;"	f	class:Stats::VectorDistBase
data	./base/statistics.hh	/^    data(off_type index) const$/;"	f	class:Stats::VectorProxy
data	./base/statistics.hh	/^    data(off_type index)$/;"	f	class:Stats::VectorDistBase
data	./base/statistics.hh	/^    data(off_type index)$/;"	f	class:Stats::VectorProxy
data	./base/statistics.hh	/^    typename Stat::Storage *data() { return stat.data(index); }$/;"	f	class:Stats::DistProxy
data	./base/stats/info.hh	/^    DistData data;$/;"	m	class:Stats::DistInfo
data	./base/stats/info.hh	/^    SparseHistData data;$/;"	m	class:Stats::SparseHistInfo
data	./base/stats/info.hh	/^    std::vector<DistData> data;$/;"	m	class:Stats::VectorDistInfo
data	./base/stats/text.cc	/^    const DistData &data;$/;"	m	struct:Stats::DistPrint	file:
data	./base/stats/text.cc	/^    const SparseHistData &data;$/;"	m	struct:Stats::SparseHistPrint	file:
data	./base/vnc/vncserver.cc	/^VncServer::data()$/;"	f	class:VncServer
data	./cpu/minor/lsq.hh	/^        PacketDataPtr data;$/;"	m	class:Minor::LSQ::LSQRequest
data	./cpu/o3/lsq_unit.hh	/^        char data[16];$/;"	m	struct:LSQUnit::SQEntry
data	./cpu/testers/networktest/networktest.hh	/^        uint8_t *data;$/;"	m	class:NetworkTest::NetworkTestSenderState
data	./cpu/timebuf.hh	/^    char *data;$/;"	m	class:TimeBuffer
data	./cpu/translation.hh	/^    uint8_t *data;$/;"	m	class:WholeTranslationState
data	./dev/dma_device.hh	/^        const uint8_t *data() const { return _data.data(); }$/;"	f	class:DmaReadFifo::DmaDoneEvent
data	./dev/dma_device.hh	/^        uint8_t *data() { return _data.data(); }$/;"	f	class:DmaReadFifo::DmaDoneEvent
data	./dev/net/etherpkt.hh	/^    uint8_t *data;$/;"	m	class:EthPacketData
data	./dev/pci/pcireg.h	/^    uint32_t data[4];$/;"	m	union:MSIXTable
data	./dev/pci/pcireg.h	/^    uint8_t data[12];$/;"	m	union:MSIXCAP
data	./dev/pci/pcireg.h	/^    uint8_t data[24];$/;"	m	union:MSICAP
data	./dev/pci/pcireg.h	/^    uint8_t data[48];$/;"	m	struct:PXCAP
data	./dev/pci/pcireg.h	/^    uint8_t data[64];$/;"	m	union:PCIConfig
data	./dev/pci/pcireg.h	/^    uint8_t data[6];$/;"	m	union:PMCAP
data	./dev/storage/disk_image.hh	/^        uint8_t data[SectorSize];$/;"	m	struct:CowDiskImage::Sector
data	./dev/storage/ide_disk.hh	/^    uint16_t data;$/;"	m	struct:CommandReg
data	./dev/terminal.cc	/^Terminal::data()$/;"	f	class:Terminal
data	./mem/cache/blk.hh	/^    uint8_t *data;$/;"	m	class:CacheBlk
data	./mem/cache/mshr.hh	/^    uint8_t *data;$/;"	m	class:MSHR
data	./mem/mem_checker.hh	/^        uint8_t data;$/;"	m	class:MemChecker::Transaction
data	./mem/packet.hh	/^    PacketDataPtr data;$/;"	m	class:Packet
data	./mem/ruby/slicc_interface/RubyRequest.hh	/^    uint8_t* data;$/;"	m	class:RubyRequest
data	./mem/ruby/system/DMASequencer.hh	/^    uint8_t *data;$/;"	m	struct:DMARequest
data	./sim/arguments.hh	/^        std::list<char *> data;$/;"	m	class:Arguments::Data
data	./sim/arguments.hh	/^    std::shared_ptr<Data> data;$/;"	m	class:Arguments
data	./sim/insttracer.hh	/^    } data;$/;"	m	class:Trace::InstRecord	typeref:union:Trace::InstRecord::__anon110
data	./unittest/circlebuf.cc	/^const char data[] = {$/;"	v
dataAccessLatency	./mem/ruby/structures/RubyCache.py	/^    dataAccessLatency = Param.Cycles(1, "cycles for a data array access")$/;"	v	class:RubyCache
dataAccesses	./mem/cache/tags/base.hh	/^    Stats::Scalar dataAccesses;$/;"	m	class:BaseTags
dataArray	./mem/ruby/structures/CacheMemory.hh	/^    BankedArray dataArray;$/;"	m	class:CacheMemory
dataArrayBanks	./mem/ruby/structures/RubyCache.py	/^    dataArrayBanks = Param.Int(1, "Number of banks for the data array")$/;"	v	class:RubyCache
dataAvailable	./dev/arm/pl011.cc	/^Pl011::dataAvailable()$/;"	f	class:Pl011
dataAvailable	./dev/terminal.hh	/^    bool dataAvailable() { return !rxbuf.empty(); }$/;"	f	class:Terminal
dataAvailable	./dev/uart8250.cc	/^Uart8250::dataAvailable()$/;"	f	class:Uart8250
dataBase	./base/loader/object_file.hh	/^    Addr dataBase() const { return data.baseAddr; }$/;"	f	class:ObjectFile
dataBlks	./mem/cache/tags/base_set_assoc.hh	/^    uint8_t *dataBlks;$/;"	m	class:BaseSetAssoc
dataBuffer	./dev/storage/ide_disk.hh	/^    uint8_t *dataBuffer;$/;"	m	class:IdeDisk
dataCallback	./mem/ruby/system/DMASequencer.cc	/^DMASequencer::dataCallback(const DataBlock & dblk)$/;"	f	class:DMASequencer
dataCount	./dev/arm/ufs_device.hh	/^        uint32_t dataCount;$/;"	m	struct:UFSHostDevice::UPIUMessage
dataDepTraceFile	./cpu/o3/probe/ElasticTrace.py	/^                                    "data dependency tracing")$/;"	v	class:ElasticTrace
dataDescriptor	./dev/net/dist_packet.hh	/^        dataDescriptor,$/;"	m	class:DistHeaderPkt::MsgType
dataDistribution	./dev/arm/flash_device.hh	/^    const Enums::DataDistribution dataDistribution;$/;"	m	class:FlashDevice
dataDynamic	./mem/packet.hh	/^    dataDynamic(T *p)$/;"	f	class:Packet
dataEvent	./base/vnc/vncserver.hh	/^    DataEvent *dataEvent;$/;"	m	class:VncServer
dataEvent	./dev/terminal.hh	/^    DataEvent *dataEvent;$/;"	m	class:Terminal
dataEvent	./dev/virtio/fs9p.hh	/^    std::unique_ptr<DiodDataEvent> dataEvent;$/;"	m	class:VirtIO9PDiod
dataEvent	./dev/virtio/fs9p.hh	/^    std::unique_ptr<SocketDataEvent> dataEvent;$/;"	m	class:VirtIO9PSocket
dataFd	./base/vnc/vncserver.hh	/^    int dataFd; \/\/ data stream file describer$/;"	m	class:VncServer
dataLastTick	./cpu/trace/trace_cpu.hh	/^        Stats::Scalar dataLastTick;$/;"	m	class:TraceCPU::ElasticDataGen
dataLimit	./cpu/testers/traffic_gen/generators.hh	/^    const Addr dataLimit;$/;"	m	class:LinearGen
dataLimit	./cpu/testers/traffic_gen/generators.hh	/^    const Addr dataLimit;$/;"	m	class:RandomGen
dataManipulated	./cpu/testers/traffic_gen/generators.hh	/^    Addr dataManipulated;$/;"	m	class:LinearGen
dataManipulated	./cpu/testers/traffic_gen/generators.hh	/^    Addr dataManipulated;$/;"	m	class:RandomGen
dataMasterID	./cpu/trace/trace_cpu.hh	/^    const MasterID dataMasterID;$/;"	m	class:TraceCPU
dataMasterId	./cpu/base.hh	/^    MasterID dataMasterId() { return _dataMasterId; }$/;"	f	class:BaseCPU
dataMemberType	./mem/slicc/symbols/Type.py	/^    def dataMemberType(self, ident):$/;"	m	class:Type
dataMsg	./dev/arm/ufs_device.hh	/^        std::vector<uint32_t> dataMsg;$/;"	m	struct:UFSHostDevice::UPIUMessage
dataName	./cpu/minor/buffers.hh	/^    std::string dataName;$/;"	m	class:Minor::MinorBuffer
dataName	./cpu/minor/buffers.hh	/^    std::string dataName;$/;"	m	class:Minor::Queue
dataOffset	./dev/arm/ufs_device.hh	/^        uint32_t dataOffset;$/;"	m	struct:UFSHostDevice::UPIUMessage
dataPacketLength	./dev/net/dist_packet.hh	/^            unsigned dataPacketLength;$/;"	m	union:DistHeaderPkt::Header::__anon13
dataPort	./cpu/kvm/base.hh	/^    KVMCpuPort dataPort;$/;"	m	class:BaseKvmCPU
dataPort	./dev/x86/i8042.hh	/^    Addr dataPort;$/;"	m	class:X86ISA::I8042
dataRAMSetup	./arch/arm/miscregs.hh	/^      Bitfield<5>     dataRAMSetup;$/;"	m	namespace:ArmISA
dataRAMSlice	./arch/arm/miscregs.hh	/^      Bitfield<11,10> dataRAMSlice;$/;"	m	namespace:ArmISA
dataReg	./dev/x86/i8042.hh	/^    uint8_t dataReg;$/;"	m	class:X86ISA::I8042
dataSize	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, index;$/;"	m	class:ArmISA::VldSingleOp64
dataSize	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, index;$/;"	m	class:ArmISA::VstSingleOp64
dataSize	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, lane, step;$/;"	m	class:ArmISA::MicroNeonMixLaneOp64
dataSize	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, numRegs, step;$/;"	m	class:ArmISA::MicroNeonMixOp64
dataSize	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, numRegs;$/;"	m	class:ArmISA::VldMultOp64
dataSize	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, numRegs;$/;"	m	class:ArmISA::VstMultOp64
dataSize	./arch/x86/emulenv.hh	/^        int dataSize;$/;"	m	struct:X86ISA::EmulEnv
dataSize	./arch/x86/insts/microfpop.hh	/^        const uint8_t dataSize;$/;"	m	class:X86ISA::FpOp
dataSize	./arch/x86/insts/microldstop.hh	/^        const uint8_t dataSize;$/;"	m	class:X86ISA::LdStOp
dataSize	./arch/x86/insts/microregop.hh	/^        const uint8_t dataSize;$/;"	m	class:X86ISA::RegOpBase
dataSize	./arch/x86/pagetable_walker.hh	/^            int dataSize;$/;"	m	class:X86ISA::Walker::WalkerState
dataSize	./base/loader/object_file.hh	/^    size_t dataSize() const { return data.size; }$/;"	f	class:ObjectFile
dataStatic	./mem/packet.hh	/^    dataStatic(T *p)$/;"	f	class:Packet
dataStaticConst	./mem/packet.hh	/^    dataStaticConst(const T *p)$/;"	f	class:Packet
dataTraceFile	./cpu/trace/TraceCPU.py	/^    dataTraceFile = Param.String("", "Data dependency trace file")$/;"	v	class:TraceCPU
dataTraceFile	./cpu/trace/trace_cpu.hh	/^    std::string instTraceFile, dataTraceFile;$/;"	m	class:TraceCPU
dataTraceStream	./cpu/o3/probe/elastic_trace.hh	/^    ProtoOutputStream* dataTraceStream;$/;"	m	class:ElasticTrace
data_accesses	./arch/alpha/tlb.hh	/^    Stats::Formula data_accesses;$/;"	m	class:AlphaISA::TLB
data_acv	./arch/alpha/tlb.hh	/^    Stats::Formula data_acv;$/;"	m	class:AlphaISA::TLB
data_corruption__all_bits	./mem/ruby/network/fault_model/FaultModel.hh	/^        data_corruption__all_bits,$/;"	e	enum:FaultModel::fault_type
data_corruption__few_bits	./mem/ruby/network/fault_model/FaultModel.hh	/^        data_corruption__few_bits,$/;"	e	enum:FaultModel::fault_type
data_distribution	./dev/arm/FlashDevice.py	/^        planes; otherwise use: sequential")$/;"	v	class:FlashDevice
data_fd	./dev/terminal.hh	/^    int data_fd;$/;"	m	class:Terminal
data_hits	./arch/alpha/tlb.hh	/^    Stats::Formula data_hits;$/;"	m	class:AlphaISA::TLB
data_in	./dev/arm/kmi.hh	/^        Bitfield<0> data_in;$/;"	m	class:Pl050
data_len	./dev/net/ethertap.hh	/^    uint32_t data_len;$/;"	m	class:EtherTap
data_misses	./arch/alpha/tlb.hh	/^    Stats::Formula data_misses;$/;"	m	class:AlphaISA::TLB
data_polarity	./dev/arm/hdlcd.hh	/^        Bitfield<3>    data_polarity;$/;"	m	class:HDLcd
data_port	./dev/x86/I8042.py	/^    data_port = Param.Addr('Data port address')$/;"	v	class:I8042
data_read_req	./cpu/simple/atomic.hh	/^    Request data_read_req;$/;"	m	class:AtomicSimpleCPU
data_start	./arch/alpha/aout_machdep.h	/^    uint64_t    data_start;     \/\/\/< data base address$/;"	m	struct:aout_exechdr
data_start	./base/loader/exec_ecoff.h	/^        coff_ulong  data_start;$/;"	m	struct:ecoff_aouthdr
data_status	./sim/insttracer.hh	/^    } data_status;$/;"	m	class:Trace::InstRecord	typeref:enum:Trace::InstRecord::__anon111
data_write_req	./cpu/simple/atomic.hh	/^    Request data_write_req;$/;"	m	class:AtomicSimpleCPU
dataen_polarity	./dev/arm/hdlcd.hh	/^        Bitfield<2>    dataen_polarity;$/;"	m	class:HDLcd
date	./base/time.cc	/^Time::date(const string &format) const$/;"	f	class:Time
db	./sim/serialize.hh	/^    IniFile *db;$/;"	m	class:CheckpointIn
dbd	./arch/mips/dt_constants.hh	/^    Bitfield<31>     dbd;$/;"	m	namespace:MipsISA
dbgHeader	./arch/arm/table_walker.hh	/^        virtual std::string dbgHeader() const$/;"	f	class:ArmISA::TableWalker::L1Descriptor
dbgHeader	./arch/arm/table_walker.hh	/^        virtual std::string dbgHeader() const$/;"	f	class:ArmISA::TableWalker::L2Descriptor
dbgHeader	./arch/arm/table_walker.hh	/^        virtual std::string dbgHeader() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
dbg_vtophys	./cpu/checker/cpu.cc	/^CheckerCPU::dbg_vtophys(Addr addr)$/;"	f	class:CheckerCPU
dbg_vtophys	./cpu/minor/cpu.cc	/^MinorCPU::dbg_vtophys(Addr addr)$/;"	f	class:MinorCPU
dbg_vtophys	./cpu/simple/base.cc	/^BaseSimpleCPU::dbg_vtophys(Addr addr)$/;"	f	class:BaseSimpleCPU
dbl	./arch/arm/insts/vfp.hh	/^    dbl(uint32_t low, uint32_t high) const$/;"	f	class:ArmISA::FpOp
dbl	./cpu/base_dyn_inst.hh	/^        double dbl;$/;"	m	union:BaseDynInst::Result
dbl	./cpu/checker/cpu.hh	/^        double dbl;$/;"	m	union:CheckerCPU::Result
dblHi	./arch/arm/insts/vfp.hh	/^    dblHi(double val) const$/;"	f	class:ArmISA::FpOp
dblLow	./arch/arm/insts/vfp.hh	/^    dblLow(double val) const$/;"	f	class:ArmISA::FpOp
dbp	./arch/mips/dt_constants.hh	/^    Bitfield<1>      dbp;$/;"	m	namespace:MipsISA
dbusep	./arch/mips/dt_constants.hh	/^    Bitfield<21>     dbusep;$/;"	m	namespace:MipsISA
dc	./arch/arm/miscregs.hh	/^        Bitfield<12>     dc;$/;"	m	namespace:ArmISA
dc	./arch/mips/pra_constants.hh	/^    Bitfield<27>     dc;$/;"	m	namespace:MipsISA
dcache	./mem/ruby/system/Sequencer.py	/^    dcache = Param.RubyCache("")$/;"	v	class:RubySequencer
dcacheGen	./cpu/trace/trace_cpu.hh	/^    ElasticDataGen dcacheGen;$/;"	m	class:TraceCPU
dcacheInterface	./cpu/o3/inst_queue.hh	/^    MemInterface *dcacheInterface;$/;"	m	class:InstructionQueue
dcacheNextEvent	./cpu/trace/trace_cpu.hh	/^    EventWrapper<TraceCPU, &TraceCPU::schedDcacheNext> dcacheNextEvent;$/;"	m	class:TraceCPU
dcachePort	./cpu/checker/cpu.hh	/^    MasterPort *dcachePort;$/;"	m	class:CheckerCPU
dcachePort	./cpu/minor/lsq.hh	/^    DcachePort dcachePort;$/;"	m	class:Minor::LSQ
dcachePort	./cpu/o3/cpu.hh	/^    DcachePort dcachePort;$/;"	m	class:FullO3CPU
dcachePort	./cpu/o3/lsq_unit.hh	/^    MasterPort *dcachePort;$/;"	m	class:LSQUnit
dcachePort	./cpu/simple/atomic.hh	/^    AtomicCPUDPort dcachePort;$/;"	m	class:AtomicSimpleCPU
dcachePort	./cpu/simple/timing.hh	/^    DcachePort dcachePort;$/;"	m	class:TimingSimpleCPU
dcachePort	./cpu/trace/trace_cpu.hh	/^    DcachePort dcachePort;$/;"	m	class:TraceCPU
dcacheRecvTimingResp	./cpu/trace/trace_cpu.cc	/^TraceCPU::dcacheRecvTimingResp(PacketPtr pkt)$/;"	f	class:TraceCPU
dcacheRetryRecvd	./cpu/trace/trace_cpu.cc	/^TraceCPU::dcacheRetryRecvd()$/;"	f	class:TraceCPU
dcacheStallCycles	./cpu/simple/exec_context.hh	/^    Stats::Scalar dcacheStallCycles;$/;"	m	class:SimpleExecContext
dcache_access	./cpu/simple/atomic.hh	/^    bool dcache_access;$/;"	m	class:AtomicSimpleCPU
dcache_hit_latency	./mem/ruby/system/Sequencer.py	/^    dcache_hit_latency = Param.Cycles(1, "Data cache hit latency")$/;"	v	class:RubySequencer
dcache_latency	./cpu/simple/atomic.hh	/^    Tick dcache_latency;$/;"	m	class:AtomicSimpleCPU
dcache_pkt	./cpu/simple/timing.hh	/^    PacketPtr dcache_pkt;$/;"	m	class:TimingSimpleCPU
dcache_port	./cpu/BaseCPU.py	/^    dcache_port = MasterPort("Data Port")$/;"	v
dcc	./dev/arm/RealView.py	/^    dcc = CoreTile2A15DCC()$/;"	v	class:RealViewEB
dcc	./dev/arm/RealView.py	/^    dcc = CoreTile2A15DCC()$/;"	v	class:RealViewPBX
dcc	./dev/arm/RealView.py	/^    dcc = CoreTile2A15DCC()$/;"	v	class:VExpress_EMM
dcc	./dev/arm/RealView.py	/^    dcc = Param.UInt8("Daughterboard Configuration Controller")$/;"	v	class:RealViewOsc
dcc	./dev/arm/rv_ctrl.hh	/^        Bitfield<29, 26> dcc;$/;"	m	class:RealViewCtrl
dcs	./arch/mips/mt_constants.hh	/^    Bitfield<17>     dcs;$/;"	m	namespace:MipsISA
ddbl	./arch/mips/dt_constants.hh	/^    Bitfield<2>      ddbl;$/;"	m	namespace:MipsISA
ddblImpr	./arch/mips/dt_constants.hh	/^    Bitfield<18>     ddblImpr;$/;"	m	namespace:MipsISA
ddbs	./arch/mips/dt_constants.hh	/^    Bitfield<3>      ddbs;$/;"	m	namespace:MipsISA
ddbsImpr	./arch/mips/dt_constants.hh	/^    Bitfield<19>     ddbsImpr;$/;"	m	namespace:MipsISA
de	./arch/x86/regs/misc.hh	/^        Bitfield<3> de; \/\/ Debugging Extensions$/;"	m	namespace:X86ISA
deactivateStage	./cpu/activity.cc	/^ActivityRecorder::deactivateStage(const int idx)$/;"	f	class:ActivityRecorder
deactivateStage	./cpu/o3/cpu.hh	/^    void deactivateStage(const StageIdx idx)$/;"	f	class:FullO3CPU
deactivateStage	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::deactivateStage()$/;"	f	class:DefaultIEW
deactivateThread	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::deactivateThread(ThreadID tid)$/;"	f	class:DefaultCommit
deactivateThread	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::deactivateThread(ThreadID tid)$/;"	f	class:FullO3CPU
deactivateThread	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::deactivateThread(ThreadID tid)$/;"	f	class:DefaultFetch
deadlockCheckEvent	./mem/ruby/system/Sequencer.hh	/^    SequencerWakeupEvent deadlockCheckEvent;$/;"	m	class:Sequencer
deadlock_threshold	./cpu/testers/rubytest/RubyTester.py	/^    deadlock_threshold = Param.Int(50000, "how often to check for deadlock")$/;"	v	class:RubyTester
deadlock_threshold	./mem/ruby/system/Sequencer.py	/^    deadlock_threshold = Param.Cycles(500000,$/;"	v	class:RubySequencer
deallocate	./mem/cache/mshr.cc	/^MSHR::deallocate()$/;"	f	class:MSHR
deallocate	./mem/cache/mshr_queue.cc	/^MSHRQueue::deallocate(MSHR *mshr)$/;"	f	class:MSHRQueue
deallocate	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::deallocate(Addr address)$/;"	f	class:CacheMemory
deallocate	./mem/ruby/structures/PerfectCacheMemory.hh	/^PerfectCacheMemory<ENTRY>::deallocate(Addr address)$/;"	f	class:PerfectCacheMemory
deallocate	./mem/ruby/structures/TBETable.hh	/^TBETable<ENTRY>::deallocate(Addr address)$/;"	f	class:TBETable
deallocateContext	./cpu/kvm/base.cc	/^BaseKvmCPU::deallocateContext(ThreadID thread_num)$/;"	f	class:BaseKvmCPU
deallocateOne	./mem/cache/mshr_queue.cc	/^MSHRQueue::deallocateOne(MSHR *mshr)$/;"	f	class:MSHRQueue
debug	./arch/isa_parser.py	/^debug=False$/;"	v
debugDumpStats	./base/statistics.cc	/^debugDumpStats()$/;"	f
debugObjectBreak	./sim/sim_object.cc	/^SimObject::debugObjectBreak(const string &objs)$/;"	f	class:SimObject
debugObjectBreak	./sim/sim_object.cc	/^debugObjectBreak(const char *objs)$/;"	f
debugPrint	./cpu/testers/rubytest/Check.cc	/^Check::debugPrint()$/;"	f	class:Check
debugPrintfEvent	./arch/alpha/tru64/system.hh	/^    DebugPrintfEvent  *debugPrintfEvent;$/;"	m	class:Tru64AlphaSystem
debugPrintfrEvent	./arch/alpha/tru64/system.hh	/^    DebugPrintfrEvent *debugPrintfrEvent;$/;"	m	class:Tru64AlphaSystem
debugPrintkEvent	./arch/alpha/linux/system.hh	/^    Linux::DebugPrintkEvent *debugPrintkEvent;$/;"	m	class:LinuxAlphaSystem
debugPrintkEvent	./arch/arm/system.hh	/^    Linux::DebugPrintkEvent *debugPrintkEvent;$/;"	m	class:ArmSystem
debugVerify	./sim/eventq.cc	/^EventQueue::debugVerify() const$/;"	f	class:EventQueue
debug_break_id	./base/statistics.cc	/^int debug_break_id = -1;$/;"	m	namespace:Stats	file:
debug_logger	./base/trace.cc	/^Logger *debug_logger = NULL;$/;"	m	namespace:Trace	file:
debug_serialize	./sim/serialize.cc	/^debug_serialize(const string &cpt_dir)$/;"	f
debugbreak	./sim/pseudo_inst.cc	/^debugbreak(ThreadContext *tc)$/;"	f	namespace:PseudoInst
debugger	./base/remote_gdb.cc	/^debugger()$/;"	f
dec	./base/cprintf_formats.hh	/^    enum { dec, hex, oct } base;$/;"	e	enum:cp::Format::__anon117
dec	./base/statistics.hh	/^    void dec(Counter val) { data -= val; }$/;"	f	class:Stats::StatStor
dec	./base/statistics.hh	/^    void dec(Counter val) { set(current - val); }$/;"	f	class:Stats::AvgStor
declare_router	./mem/ruby/network/fault_model/FaultModel.cc	/^FaultModel::declare_router(int number_of_inputs, $/;"	f	class:FaultModel
decode	./arch/alpha/decoder.hh	/^    decode(AlphaISA::PCState &nextPC)$/;"	f	class:AlphaISA::Decoder
decode	./arch/alpha/decoder.hh	/^    decode(ExtMachInst mach_inst, Addr addr)$/;"	f	class:AlphaISA::Decoder
decode	./arch/arm/decoder.cc	/^Decoder::decode(ArmISA::PCState &pc)$/;"	f	class:ArmISA::Decoder
decode	./arch/arm/decoder.hh	/^    StaticInstPtr decode(ExtMachInst mach_inst, Addr addr)$/;"	f	class:ArmISA::Decoder
decode	./arch/generic/decode_cache.cc	/^BasicDecodeCache::decode(TheISA::Decoder *decoder,$/;"	f	class:GenericISA::BasicDecodeCache
decode	./arch/mips/decoder.hh	/^    decode(ExtMachInst mach_inst, Addr addr)$/;"	f	class:MipsISA::Decoder
decode	./arch/mips/decoder.hh	/^    decode(MipsISA::PCState &nextPC)$/;"	f	class:MipsISA::Decoder
decode	./arch/power/decoder.hh	/^    decode(ExtMachInst mach_inst, Addr addr)$/;"	f	class:PowerISA::Decoder
decode	./arch/power/decoder.hh	/^    decode(PowerISA::PCState &nextPC)$/;"	f	class:PowerISA::Decoder
decode	./arch/sparc/decoder.hh	/^    decode(ExtMachInst mach_inst, Addr addr)$/;"	f	class:SparcISA::Decoder
decode	./arch/sparc/decoder.hh	/^    decode(SparcISA::PCState &nextPC)$/;"	f	class:SparcISA::Decoder
decode	./arch/x86/decoder.cc	/^Decoder::decode(ExtMachInst mach_inst, Addr addr)$/;"	f	class:X86ISA::Decoder
decode	./arch/x86/decoder.cc	/^Decoder::decode(PCState &nextPC)$/;"	f	class:X86ISA::Decoder
decode	./cpu/minor/pipeline.hh	/^    Decode decode;$/;"	m	class:Minor::Pipeline
decode	./cpu/o3/cpu.hh	/^    typename CPUPolicy::Decode decode;$/;"	m	class:FullO3CPU
decode	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::decode(bool &status_change, ThreadID tid)$/;"	f	class:DefaultDecode
decode	./cpu/o3/fetch.hh	/^        bool decode;$/;"	m	struct:DefaultFetch::Stalls
decodeAArch64SysReg	./arch/arm/miscregs.cc	/^decodeAArch64SysReg(unsigned op0, unsigned op1,$/;"	f	namespace:ArmISA
decodeAddr	./arch/x86/interrupts.cc	/^decodeAddr(Addr paddr)$/;"	f	namespace:X86ISA
decodeAddr	./mem/dram_ctrl.cc	/^DRAMCtrl::decodeAddr(PacketPtr pkt, Addr dramPktAddr, unsigned size,$/;"	f	class:DRAMCtrl
decodeAddress	./dev/pci/host.cc	/^GenericPciHost::decodeAddress(Addr addr)$/;"	f	class:GenericPciHost
decodeBlock	./cpu/o3/comm.hh	/^    bool decodeBlock[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
decodeBlockedCycles	./cpu/o3/decode.hh	/^    Stats::Scalar decodeBlockedCycles;$/;"	m	class:DefaultDecode
decodeBranchMispred	./cpu/o3/decode.hh	/^    Stats::Scalar decodeBranchMispred;$/;"	m	class:DefaultDecode
decodeBranchResolved	./cpu/o3/decode.hh	/^    Stats::Scalar decodeBranchResolved;$/;"	m	class:DefaultDecode
decodeCP14Reg	./arch/arm/miscregs.cc	/^decodeCP14Reg(unsigned crn, unsigned opc1, unsigned crm, unsigned opc2)$/;"	f	namespace:ArmISA
decodeCP15Reg	./arch/arm/miscregs.cc	/^decodeCP15Reg(unsigned crn, unsigned opc1, unsigned crm, unsigned opc2)$/;"	f	namespace:ArmISA
decodeCP15Reg64	./arch/arm/miscregs.cc	/^decodeCP15Reg64(unsigned crm, unsigned opc1)$/;"	f	namespace:ArmISA
decodeCoProcReg	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::decodeCoProcReg(uint64_t id) const$/;"	f	class:ArmKvmCPU
decodeComm	./cpu/o3/comm.hh	/^    struct decodeComm {$/;"	s	struct:TimeBufStruct
decodeControlMispred	./cpu/o3/decode.hh	/^    Stats::Scalar decodeControlMispred;$/;"	m	class:DefaultDecode
decodeCycleInput	./cpu/minor/MinorCPU.py	/^    decodeCycleInput = Param.Bool(True,$/;"	v	class:MinorCPU
decodeDecodedInsts	./cpu/o3/decode.hh	/^    Stats::Scalar decodeDecodedInsts;$/;"	m	class:DefaultDecode
decodeIdleCycles	./cpu/o3/decode.hh	/^    Stats::Scalar decodeIdleCycles;$/;"	m	class:DefaultDecode
decodeInfo	./cpu/o3/comm.hh	/^    decodeComm decodeInfo[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
decodeInputBufferSize	./cpu/minor/MinorCPU.py	/^    decodeInputBufferSize = Param.Unsigned(3,$/;"	v	class:MinorCPU
decodeInputWidth	./cpu/minor/MinorCPU.py	/^    decodeInputWidth = Param.Unsigned(2,$/;"	v	class:MinorCPU
decodeInsts	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::decodeInsts(ThreadID tid)$/;"	f	class:DefaultDecode
decodeMrsMsrBankedIntRegIndex	./arch/arm/utility.hh	/^decodeMrsMsrBankedIntRegIndex(uint8_t sysM, bool r)$/;"	f	namespace:ArmISA
decodeMrsMsrBankedReg	./arch/arm/utility.cc	/^decodeMrsMsrBankedReg(uint8_t sysM, bool r, bool &isIntReg, int &regIdx,$/;"	f	namespace:ArmISA
decodePages	./arch/generic/decode_cache.hh	/^    DecodeCache::AddrMap<StaticInstPtr> decodePages;$/;"	m	class:GenericISA::BasicDecodeCache
decodePages	./arch/x86/decoder.hh	/^    DecodePages *decodePages;$/;"	m	class:X86ISA::Decoder
decodePhysAddrRange64	./arch/arm/utility.cc	/^decodePhysAddrRange64(uint8_t pa_enc)$/;"	f	namespace:ArmISA
decodePrologue	./arch/alpha/stacktrace.cc	/^StackTrace::decodePrologue(Addr sp, Addr callpc, Addr func, int &size,$/;"	f	class:AlphaISA::StackTrace
decodePrologue	./arch/arm/stacktrace.cc	/^    StackTrace::decodePrologue(Addr sp, Addr callpc, Addr func,$/;"	f	class:ArmISA::StackTrace
decodePrologue	./arch/mips/stacktrace.cc	/^StackTrace::decodePrologue(Addr sp, Addr callpc, Addr func,$/;"	f	class:StackTrace
decodePrologue	./arch/power/stacktrace.cc	/^StackTrace::decodePrologue(Addr sp, Addr callpc, Addr func, int &size,$/;"	f	class:PowerISA::StackTrace
decodePrologue	./arch/x86/stacktrace.cc	/^    StackTrace::decodePrologue(Addr sp, Addr callpc, Addr func,$/;"	f	class:X86ISA::StackTrace
decodeQueue	./cpu/o3/cpu.hh	/^    TimeBuffer<DecodeStruct> decodeQueue;$/;"	m	class:FullO3CPU
decodeQueue	./cpu/o3/decode.hh	/^    TimeBuffer<DecodeStruct> *decodeQueue;$/;"	m	class:DefaultDecode
decodeQueue	./cpu/o3/rename.hh	/^    TimeBuffer<DecodeStruct> *decodeQueue;$/;"	m	class:DefaultRename
decodeRunCycles	./cpu/o3/decode.hh	/^    Stats::Scalar decodeRunCycles;$/;"	m	class:DefaultDecode
decodeSave	./arch/alpha/stacktrace.cc	/^StackTrace::decodeSave(MachInst inst, int &reg, int &disp)$/;"	f	class:AlphaISA::StackTrace
decodeSave	./arch/arm/stacktrace.cc	/^    StackTrace::decodeSave(MachInst inst, int &reg, int &disp)$/;"	f	class:ArmISA::StackTrace
decodeSave	./arch/mips/stacktrace.cc	/^StackTrace::decodeSave(MachInst inst, int &reg, int &disp)$/;"	f	class:StackTrace
decodeSave	./arch/power/stacktrace.cc	/^StackTrace::decodeSave(MachInst inst, int &reg, int &disp)$/;"	f	class:PowerISA::StackTrace
decodeSave	./arch/x86/stacktrace.cc	/^    StackTrace::decodeSave(MachInst inst, int &reg, int &disp)$/;"	f	class:X86ISA::StackTrace
decodeSquashCycles	./cpu/o3/decode.hh	/^    Stats::Scalar decodeSquashCycles;$/;"	m	class:DefaultDecode
decodeSquashedInsts	./cpu/o3/decode.hh	/^    Stats::Scalar decodeSquashedInsts;$/;"	m	class:DefaultDecode
decodeStack	./arch/alpha/stacktrace.cc	/^StackTrace::decodeStack(MachInst inst, int &disp)$/;"	f	class:AlphaISA::StackTrace
decodeStack	./arch/arm/stacktrace.cc	/^    StackTrace::decodeStack(MachInst inst, int &disp)$/;"	f	class:ArmISA::StackTrace
decodeStack	./arch/mips/stacktrace.cc	/^StackTrace::decodeStack(MachInst inst, int &disp)$/;"	f	class:StackTrace
decodeStack	./arch/power/stacktrace.cc	/^StackTrace::decodeStack(MachInst inst, int &disp)$/;"	f	class:PowerISA::StackTrace
decodeStack	./arch/x86/stacktrace.cc	/^    StackTrace::decodeStack(MachInst inst, int &disp)$/;"	f	class:X86ISA::StackTrace
decodeStatus	./cpu/o3/decode.hh	/^    ThreadStatus decodeStatus[Impl::MaxThreads];$/;"	m	class:DefaultDecode
decodeTick	./cpu/o3/dyn_inst.hh	/^    int32_t decodeTick;  \/\/ instruction enters decode phase$/;"	m	class:BaseO3DynInst
decodeToExecuteForwardDelay	./cpu/minor/MinorCPU.py	/^    decodeToExecuteForwardDelay = Param.Cycles(1,$/;"	v	class:MinorCPU
decodeToFetchDelay	./cpu/o3/O3CPU.py	/^    decodeToFetchDelay = Param.Cycles(1, "Decode to fetch delay")$/;"	v	class:DerivO3CPU
decodeToFetchDelay	./cpu/o3/fetch.hh	/^    Cycles decodeToFetchDelay;$/;"	m	class:DefaultFetch
decodeToRenameDelay	./cpu/o3/O3CPU.py	/^    decodeToRenameDelay = Param.Cycles(1, "Decode to rename delay")$/;"	v	class:DerivO3CPU
decodeToRenameDelay	./cpu/o3/rename.hh	/^    int decodeToRenameDelay;$/;"	m	class:DefaultRename
decodeUnblock	./cpu/o3/comm.hh	/^    bool decodeUnblock[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
decodeUnblockCycles	./cpu/o3/decode.hh	/^    Stats::Scalar decodeUnblockCycles;$/;"	m	class:DefaultDecode
decodeVFPCtrlReg	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::decodeVFPCtrlReg(uint64_t id) const$/;"	f	class:ArmKvmCPU
decodeVal	./arch/x86/types.hh	/^        Bitfield<7, 4> decodeVal;$/;"	m	namespace:X86ISA
decodeWidth	./cpu/o3/O3CPU.py	/^    decodeWidth = Param.Unsigned(8, "Decode width")$/;"	v	class:DerivO3CPU
decodeWidth	./cpu/o3/decode.hh	/^    unsigned decodeWidth;$/;"	m	class:DefaultDecode
decodeWidth	./cpu/o3/fetch.hh	/^    unsigned decodeWidth;$/;"	m	class:DefaultFetch
decoder	./cpu/o3/fetch.hh	/^    TheISA::Decoder *decoder[Impl::MaxThreads];$/;"	m	class:DefaultFetch
decoder	./cpu/simple_thread.hh	/^    TheISA::Decoder decoder;$/;"	m	class:SimpleThread
decoderFault	./arch/arm/types.hh	/^        Bitfield<63, 62> decoderFault; \/\/ See DecoderFault$/;"	m	namespace:ArmISA
decoderFlavour	./arch/arm/ArmISA.py	/^    decoderFlavour = Param.DecoderFlavour('Generic', "Decoder flavour specification")$/;"	v	class:ArmISA
decoderFlavour	./arch/arm/decoder.hh	/^    Enums::DecoderFlavour decoderFlavour;$/;"	m	class:ArmISA::Decoder
decoderFlavour	./arch/arm/isa.hh	/^        Enums::DecoderFlavour decoderFlavour() const { return _decoderFlavour; }$/;"	f	class:ArmISA::ISA
decrLdIdx	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::decrLdIdx(int &load_idx) const$/;"	f	class:LSQUnit
decrStIdx	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::decrStIdx(int &store_idx) const$/;"	f	class:LSQUnit
decrTos	./cpu/pred/ras.hh	/^    inline void decrTos()$/;"	f	class:ReturnAddrStack
decref	./base/refcnt.hh	/^    void decref() { if (--count <= 0) delete this; }$/;"	f	class:RefCounted
decref	./python/swig/pyevent.hh	/^    void decref() { Py_DECREF(object); }$/;"	f	class:PythonEvent
decrement	./cpu/pred/sat_counter.hh	/^    void decrement()$/;"	f	class:SatCounter
decrement	./mem/ruby/filters/BlockBloomFilter.cc	/^BlockBloomFilter::decrement(Addr addr)$/;"	f	class:BlockBloomFilter
decrement	./mem/ruby/filters/BulkBloomFilter.cc	/^BulkBloomFilter::decrement(Addr addr)$/;"	f	class:BulkBloomFilter
decrement	./mem/ruby/filters/H3BloomFilter.cc	/^H3BloomFilter::decrement(Addr addr)$/;"	f	class:H3BloomFilter
decrement	./mem/ruby/filters/LSB_CountingBloomFilter.cc	/^LSB_CountingBloomFilter::decrement(Addr addr)$/;"	f	class:LSB_CountingBloomFilter
decrement	./mem/ruby/filters/MultiBitSelBloomFilter.cc	/^MultiBitSelBloomFilter::decrement(Addr addr)$/;"	f	class:MultiBitSelBloomFilter
decrement	./mem/ruby/filters/MultiGrainBloomFilter.cc	/^MultiGrainBloomFilter::decrement(Addr addr)$/;"	f	class:MultiGrainBloomFilter
decrement	./mem/ruby/filters/NonCountingBloomFilter.cc	/^NonCountingBloomFilter::decrement(Addr addr)$/;"	f	class:NonCountingBloomFilter
decrement_credit	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.hh	/^    inline void decrement_credit()  { m_credit_count--; }$/;"	f	class:OutVcState_d
decrement_credit	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.cc	/^OutputUnit_d::decrement_credit(int out_vc)$/;"	f	class:OutputUnit_d
dedent	./python/m5/util/code_formatter.py	/^    def dedent(self, count=1):$/;"	m	class:code_formatter
defAddr	./arch/x86/decoder.hh	/^    uint8_t defAddr;$/;"	m	class:X86ISA::Decoder
defAddr	./arch/x86/regs/misc.hh	/^        Bitfield<13, 12> defAddr;$/;"	m	namespace:X86ISA
defCc	./arch/arm/insts/data64.hh	/^    uint8_t defCc;$/;"	m	class:ArmISA::DataXCondCompImmOp
defCc	./arch/arm/insts/data64.hh	/^    uint8_t defCc;$/;"	m	class:ArmISA::DataXCondCompRegOp
defCc	./arch/arm/insts/vfp.hh	/^    uint8_t defCc;$/;"	m	class:ArmISA::FpCondCompRegOp
defFormat	./arch/isa_parser.py	/^    def defFormat(self, id, params, code, lineno):$/;"	m	class:ISAParser
defOp	./arch/x86/decoder.hh	/^    uint8_t defOp;$/;"	m	class:X86ISA::Decoder
defOp	./arch/x86/regs/misc.hh	/^        Bitfield<9, 8> defOp;$/;"	m	namespace:X86ISA
default	./mem/XBar.py	/^    default = MasterPort("Port for connecting an optional default slave")$/;"	v	class:BaseXBar
defaultCache	./arch/alpha/decoder.cc	/^GenericISA::BasicDecodeCache Decoder::defaultCache;$/;"	m	class:AlphaISA::Decoder	file:
defaultCache	./arch/alpha/decoder.hh	/^    static GenericISA::BasicDecodeCache defaultCache;$/;"	m	class:AlphaISA::Decoder
defaultCache	./arch/arm/decoder.cc	/^GenericISA::BasicDecodeCache Decoder::defaultCache;$/;"	m	class:ArmISA::Decoder	file:
defaultCache	./arch/arm/decoder.hh	/^    static GenericISA::BasicDecodeCache defaultCache;$/;"	m	class:ArmISA::Decoder
defaultCache	./arch/mips/decoder.cc	/^GenericISA::BasicDecodeCache Decoder::defaultCache;$/;"	m	class:MipsISA::Decoder	file:
defaultCache	./arch/mips/decoder.hh	/^    static GenericISA::BasicDecodeCache defaultCache;$/;"	m	class:MipsISA::Decoder
defaultCache	./arch/power/decoder.cc	/^GenericISA::BasicDecodeCache Decoder::defaultCache;$/;"	m	class:PowerISA::Decoder	file:
defaultCache	./arch/power/decoder.hh	/^    static GenericISA::BasicDecodeCache defaultCache;$/;"	m	class:PowerISA::Decoder
defaultCache	./arch/sparc/decoder.cc	/^GenericISA::BasicDecodeCache Decoder::defaultCache;$/;"	m	class:SparcISA::Decoder	file:
defaultCache	./arch/sparc/decoder.hh	/^    static GenericISA::BasicDecodeCache defaultCache;$/;"	m	class:SparcISA::Decoder
defaultConfig	./arch/x86/bios/intelmp.hh	/^    uint8_t defaultConfig;$/;"	m	class:X86ISA::IntelMP::FloatingPointer
defaultNaN	./arch/arm/miscregs.hh	/^        Bitfield<7, 4> defaultNaN;$/;"	m	namespace:ArmISA
defaultPortID	./mem/xbar.hh	/^    PortID defaultPortID;$/;"	m	class:BaseXBar
defaultRange	./mem/xbar.hh	/^    AddrRange defaultRange;$/;"	m	class:BaseXBar
defaultSize	./arch/x86/regs/misc.hh	/^        Bitfield<3> defaultSize;$/;"	m	namespace:X86ISA
default_color	./dev/arm/hdlcd.hh	/^        Bitfield<23,16> default_color;$/;"	m	class:HDLcd
default_config	./arch/x86/bios/IntelMP.py	/^    default_config = Param.UInt8(0, 'which default configuration to use')$/;"	v	class:X86IntelMPFloatingPointer
default_tracer	./cpu/BaseCPU.py	/^default_tracer = ExeTracer()$/;"	v
deferMemInst	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::deferMemInst(DynInstPtr &deferred_inst)$/;"	f	class:InstructionQueue
deferredMemInsts	./cpu/o3/inst_queue.hh	/^    std::list<DynInstPtr> deferredMemInsts;$/;"	m	class:InstructionQueue
deferredPacketReady	./mem/packet_queue.hh	/^    bool deferredPacketReady() const$/;"	f	class:PacketQueue
deferredPacketReadyTime	./mem/packet_queue.hh	/^    Tick deferredPacketReadyTime() const$/;"	f	class:PacketQueue
deferredTargets	./mem/cache/mshr.hh	/^    TargetList deferredTargets;$/;"	m	class:MSHR
defineInst	./arch/isa_parser.py	/^    def defineInst(self, parser, name, args, lineno):$/;"	m	class:Format
defineInst	./arch/isa_parser.py	/^    def defineInst(self, parser, name, args, lineno):$/;"	m	class:NoFormat
defns	./cpu/TimingExpr.py	/^    defns = VectorParam.TimingExpr("expressions for bindings")$/;"	v	class:TimingExprLet
defns	./cpu/timing_expr.hh	/^    std::vector<TimingExpr *> defns;$/;"	m	class:TimingExprLet
degree	./mem/cache/prefetch/Prefetcher.py	/^    degree = Param.Int(2, "Number of prefetches to generate")$/;"	v	class:TaggedPrefetcher
degree	./mem/cache/prefetch/Prefetcher.py	/^    degree = Param.Int(4, "Number of prefetches to generate")$/;"	v	class:StridePrefetcher
degree	./mem/cache/prefetch/stride.hh	/^    const int degree;$/;"	m	class:StridePrefetcher
degree	./mem/cache/prefetch/tagged.hh	/^      int degree;$/;"	m	class:TaggedPrefetcher
del	./base/refcnt.hh	/^    del()$/;"	f	class:RefCountingPtr
delay	./cpu/minor/buffers.hh	/^    Cycles delay;$/;"	m	class:Minor::Latch
delay	./cpu/translation.hh	/^    bool delay;$/;"	m	class:WholeTranslationState
delay	./dev/dma_device.hh	/^        const Tick delay;$/;"	m	struct:DmaPort::DmaReqState
delay	./dev/net/Ethernet.py	/^    delay = Param.Latency('0us', "packet transmit delay")$/;"	v	class:DistEtherLink
delay	./dev/net/Ethernet.py	/^    delay = Param.Latency('0us', "packet transmit delay")$/;"	v	class:EtherLink
delay	./dev/storage/Ide.py	/^    delay = Param.Latency('1us', "Fixed disk delay in microseconds")$/;"	v	class:IdeDisk
delay	./mem/Bridge.py	/^    delay = Param.Latency('0ns', "The latency of this bridge")$/;"	v	class:Bridge
delay	./mem/SerialLink.py	/^    delay = Param.Latency('0ns', "The latency of this serial_link")$/;"	v	class:SerialLink
delay	./mem/bridge.hh	/^        const Cycles delay;$/;"	m	class:Bridge::BridgeMasterPort
delay	./mem/bridge.hh	/^        const Cycles delay;$/;"	m	class:Bridge::BridgeSlavePort
delay	./mem/serial_link.hh	/^        const Cycles delay;$/;"	m	class:SerialLink::SerialLinkMasterPort
delay	./mem/serial_link.hh	/^        const Cycles delay;$/;"	m	class:SerialLink::SerialLinkSlavePort
delayHead	./mem/ruby/network/MessageBuffer.hh	/^    delayHead(Tick current_time, Tick delta)$/;"	f	class:MessageBuffer
delayHistogram	./mem/ruby/profiler/Profiler.hh	/^    Stats::Histogram delayHistogram;$/;"	m	class:Profiler
delayIntEvent	./dev/net/i8254xGBe.cc	/^IGbE::delayIntEvent()$/;"	f	class:IGbE
delayVCHistogram	./mem/ruby/profiler/Profiler.hh	/^    std::vector<Stats::Histogram *> delayVCHistogram;$/;"	m	class:Profiler
delayVar	./dev/net/dist_etherlink.hh	/^        Tick delayVar;$/;"	m	class:DistEtherLink::TxLink
delayVar	./dev/net/etherlink.hh	/^        const Tick delayVar;$/;"	m	class:EtherLink::Link
delay_copy	./dev/net/Ethernet.py	/^    delay_copy = Param.Bool(False, "Delayed copy transmit")$/;"	v	class:Sinic
delay_var	./dev/net/Ethernet.py	/^    delay_var = Param.Latency('0ns', "packet transmit delay variability")$/;"	v	class:DistEtherLink
delay_var	./dev/net/Ethernet.py	/^    delay_var = Param.Latency('0ns', "packet transmit delay variability")$/;"	v	class:EtherLink
delayed	./arch/arm/table_walker.hh	/^        bool delayed;$/;"	m	class:ArmISA::TableWalker::WalkerState
delayedCommit	./cpu/o3/fetch.hh	/^    bool delayedCommit[Impl::MaxThreads];$/;"	m	class:DefaultFetch
delayedStartup	./cpu/kvm/vm.cc	/^KvmVM::delayedStartup()$/;"	f	class:KvmVM
deleteData	./mem/packet.hh	/^    deleteData()$/;"	f	class:Packet
deleteObjects	./sim/cxx_manager.cc	/^CxxConfigManager::deleteObjects()$/;"	f	class:CxxConfigManager
deletePointer	./base/stl_helpers.hh	/^deletePointer(T &ptr)$/;"	f	namespace:m5::stl_helpers
deletePointers	./base/stl_helpers.hh	/^deletePointers(C<T,A> &container)$/;"	f	namespace:m5::stl_helpers
deleteReqs	./cpu/translation.hh	/^    deleteReqs()$/;"	f	class:WholeTranslationState
deleteRequest	./cpu/minor/lsq.cc	/^LSQ::StoreBuffer::deleteRequest(LSQRequestPtr request)$/;"	f	class:Minor::LSQ::StoreBuffer
delim	./python/m5/util/code_formatter.py	/^    delim = r'$'$/;"	v	class:code_formatter
deliverInterrupts	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::deliverInterrupts()$/;"	f	class:X86KvmCPU
deliveryMode	./arch/x86/interrupts.hh	/^        Bitfield<10, 8> deliveryMode;$/;"	m	class:X86ISA::Interrupts
deliveryMode	./arch/x86/intmessage.hh	/^        Bitfield<18, 16> deliveryMode;$/;"	m	namespace:X86ISA
deliveryMode	./arch/x86/regs/apic.hh	/^        Bitfield<10, 8> deliveryMode;$/;"	m	namespace:X86ISA
deliveryMode	./dev/x86/i82094aa.hh	/^        Bitfield<10, 8> deliveryMode;$/;"	m	class:X86ISA::I82094AA
deliveryStatus	./arch/x86/regs/apic.hh	/^        Bitfield<12> deliveryStatus;$/;"	m	namespace:X86ISA
deliveryStatus	./dev/x86/i82094aa.hh	/^        Bitfield<12> deliveryStatus;$/;"	m	class:X86ISA::I82094AA
delta	./cpu/trace/trace_cpu.hh	/^        int64_t delta;$/;"	m	class:TraceCPU::FixedRetryGen
demandAccesses	./mem/cache/base.hh	/^    Stats::Formula demandAccesses;$/;"	m	class:BaseCache
demandAvgMissLatency	./mem/cache/base.hh	/^    Stats::Formula demandAvgMissLatency;$/;"	m	class:BaseCache
demandAvgMshrMissLatency	./mem/cache/base.hh	/^    Stats::Formula demandAvgMshrMissLatency;$/;"	m	class:BaseCache
demandHits	./mem/cache/base.hh	/^    Stats::Formula demandHits;$/;"	m	class:BaseCache
demandMissLatency	./mem/cache/base.hh	/^    Stats::Formula demandMissLatency;$/;"	m	class:BaseCache
demandMissRate	./mem/cache/base.hh	/^    Stats::Formula demandMissRate;$/;"	m	class:BaseCache
demandMisses	./mem/cache/base.hh	/^    Stats::Formula demandMisses;$/;"	m	class:BaseCache
demandMshrHits	./mem/cache/base.hh	/^    Stats::Formula demandMshrHits;$/;"	m	class:BaseCache
demandMshrMissLatency	./mem/cache/base.hh	/^    Stats::Formula demandMshrMissLatency;$/;"	m	class:BaseCache
demandMshrMissRate	./mem/cache/base.hh	/^    Stats::Formula demandMshrMissRate;$/;"	m	class:BaseCache
demandMshrMisses	./mem/cache/base.hh	/^    Stats::Formula demandMshrMisses;$/;"	m	class:BaseCache
demandReserve	./mem/cache/mshr_queue.hh	/^    const int demandReserve;$/;"	m	class:MSHRQueue
demand_mshr_reserve	./mem/cache/Cache.py	/^    demand_mshr_reserve = Param.Unsigned(1, "MSHRs reserved for demand access")$/;"	v	class:BaseCache
demapAll	./arch/sparc/tlb.cc	/^TLB::demapAll(int partition_id)$/;"	f	class:SparcISA::TLB
demapContext	./arch/sparc/tlb.cc	/^TLB::demapContext(int partition_id, int context_id)$/;"	f	class:SparcISA::TLB
demapDataPage	./cpu/base_dyn_inst.hh	/^    void demapDataPage(Addr vaddr, uint64_t asn)$/;"	f	class:BaseDynInst
demapDataPage	./cpu/checker/cpu.hh	/^    void demapDataPage(Addr vaddr, uint64_t asn)$/;"	f	class:CheckerCPU
demapDataPage	./cpu/minor/exec_context.hh	/^    demapDataPage(Addr vaddr, uint64_t asn)$/;"	f	class:Minor::ExecContext
demapDataPage	./cpu/o3/cpu.hh	/^    void demapDataPage(Addr vaddr, uint64_t asn)$/;"	f	class:FullO3CPU
demapDataPage	./cpu/simple_thread.hh	/^    void demapDataPage(Addr vaddr, uint64_t asn)$/;"	f	class:SimpleThread
demapInstPage	./cpu/base_dyn_inst.hh	/^    void demapInstPage(Addr vaddr, uint64_t asn)$/;"	f	class:BaseDynInst
demapInstPage	./cpu/checker/cpu.hh	/^    void demapInstPage(Addr vaddr, uint64_t asn)$/;"	f	class:CheckerCPU
demapInstPage	./cpu/minor/exec_context.hh	/^    demapInstPage(Addr vaddr, uint64_t asn)$/;"	f	class:Minor::ExecContext
demapInstPage	./cpu/o3/cpu.hh	/^    void demapInstPage(Addr vaddr, uint64_t asn)$/;"	f	class:FullO3CPU
demapInstPage	./cpu/simple_thread.hh	/^    void demapInstPage(Addr vaddr, uint64_t asn)$/;"	f	class:SimpleThread
demapPage	./arch/generic/tlb.cc	/^GenericTLB::demapPage(Addr vaddr, uint64_t asn)$/;"	f	class:GenericTLB
demapPage	./arch/mips/tlb.hh	/^    void demapPage(Addr vaddr, uint64_t asn)$/;"	f	class:MipsISA::TLB
demapPage	./arch/power/tlb.hh	/^    demapPage(Addr vaddr, uint64_t asn)$/;"	f	class:PowerISA::TLB
demapPage	./arch/sparc/tlb.cc	/^TLB::demapPage(Addr va, int partition_id, bool real, int context_id)$/;"	f	class:SparcISA::TLB
demapPage	./arch/sparc/tlb.hh	/^    demapPage(Addr vaddr, uint64_t asn)$/;"	f	class:SparcISA::TLB
demapPage	./arch/x86/tlb.cc	/^TLB::demapPage(Addr va, uint64_t asn)$/;"	f	class:X86ISA::TLB
demapPage	./cpu/base_dyn_inst.hh	/^    void demapPage(Addr vaddr, uint64_t asn)$/;"	f	class:BaseDynInst
demapPage	./cpu/minor/exec_context.hh	/^    demapPage(Addr vaddr, uint64_t asn)$/;"	f	class:Minor::ExecContext
demapPage	./cpu/o3/cpu.hh	/^    void demapPage(Addr vaddr, uint64_t asn)$/;"	f	class:FullO3CPU
demapPage	./cpu/simple_thread.hh	/^    void demapPage(Addr vaddr, uint64_t asn)$/;"	f	class:SimpleThread
depCheckShift	./cpu/o3/lsq_unit.hh	/^    unsigned depCheckShift;$/;"	m	class:LSQUnit
depFreeQueue	./cpu/trace/trace_cpu.hh	/^        std::queue<const GraphNode*> depFreeQueue;$/;"	m	class:TraceCPU::ElasticDataGen
depGraph	./cpu/trace/trace_cpu.hh	/^        std::unordered_map<NodeSeqNum, GraphNode*> depGraph;$/;"	m	class:TraceCPU::ElasticDataGen
depPred	./cpu/o3/mem_dep_unit.hh	/^    MemDepPred depPred;$/;"	m	class:MemDepUnit
depTrace	./cpu/o3/probe/elastic_trace.hh	/^    std::vector<TraceInfo*> depTrace;$/;"	m	class:ElasticTrace
depTraceItr	./cpu/o3/probe/elastic_trace.hh	/^    typedef typename std::vector<TraceInfo*>::iterator depTraceItr;$/;"	t	class:ElasticTrace
depTraceRevItr	./cpu/o3/probe/elastic_trace.hh	/^    typedef typename std::reverse_iterator<depTraceItr> depTraceRevItr;$/;"	t	class:ElasticTrace
depWindowSize	./cpu/o3/probe/ElasticTrace.py	/^                                    "dependencies")$/;"	v	class:ElasticTrace
depWindowSize	./cpu/o3/probe/elastic_trace.hh	/^    uint32_t depWindowSize;$/;"	m	class:ElasticTrace
dependGraph	./cpu/o3/dep_graph.hh	/^    DepEntry *dependGraph;$/;"	m	class:DependencyGraph
dependGraph	./cpu/o3/inst_queue.hh	/^    DependencyGraph<DynInstPtr> dependGraph;$/;"	m	class:InstructionQueue
dependInsts	./cpu/o3/mem_dep_unit.hh	/^        std::vector<MemDepEntryPtr> dependInsts;$/;"	m	class:MemDepUnit::MemDepEntry
dependents	./cpu/trace/trace_cpu.hh	/^            std::vector<GraphNode *> dependents;$/;"	m	class:TraceCPU::ElasticDataGen::GraphNode
depth	./base/framebuffer.hh	/^    unsigned depth;$/;"	m	class:PixelConverter
depth	./base/vnc/vncinput.hh	/^        uint8_t depth;$/;"	m	struct:VncInput::PixelFormat
depth	./mem/request.hh	/^    mutable int depth;$/;"	m	class:Request
deque	./doxygen/stl.hh	/^template <class T> class deque {$/;"	c	namespace:std
dequeue	./mem/ruby/network/MessageBuffer.cc	/^MessageBuffer::dequeue(Tick current_time)$/;"	f	class:MessageBuffer
dequeue	./mem/ruby/structures/WireBuffer.cc	/^WireBuffer::dequeue(Tick current_time)$/;"	f	class:WireBuffer
dequeue	./mem/simple_mem.cc	/^SimpleMemory::dequeue()$/;"	f	class:SimpleMemory
dequeueEvent	./mem/simple_mem.hh	/^    EventWrapper<SimpleMemory, &SimpleMemory::dequeue> dequeueEvent;$/;"	m	class:SimpleMemory
desc	./base/debug.hh	/^    std::string desc() const { return _desc; }$/;"	f	class:Debug::Flag
desc	./base/statistics.hh	/^    desc(const std::string &_desc)$/;"	f	class:Stats::DataWrap
desc	./base/stats/info.hh	/^    std::string desc;$/;"	m	class:Stats::Info
desc	./base/stats/text.cc	/^    string desc;$/;"	m	struct:Stats::DistPrint	file:
desc	./base/stats/text.cc	/^    string desc;$/;"	m	struct:Stats::ScalarPrint	file:
desc	./base/stats/text.cc	/^    string desc;$/;"	m	struct:Stats::SparseHistPrint	file:
desc	./base/stats/text.cc	/^    string desc;$/;"	m	struct:Stats::VectorPrint	file:
desc	./dev/virtio/base.hh	/^    vring_desc desc;$/;"	m	class:VirtDescriptor
desc	./dev/virtio/virtio_ring.h	/^    struct vring_desc *desc;$/;"	m	struct:vring	typeref:struct:vring::vring_desc
desc	./mem/slicc/symbols/Symbol.py	/^    def desc(self):$/;"	m	class:Symbol
descChainAddr	./dev/pci/copy_engine_defs.hh	/^    uint64_t descChainAddr;$/;"	m	struct:CopyEngineReg::ChanRegs
descDmaRdBytes	./dev/net/etherdevice.hh	/^    Stats::Scalar descDmaRdBytes;$/;"	m	class:EtherDevice
descDmaReads	./dev/net/etherdevice.hh	/^    Stats::Scalar descDmaReads;$/;"	m	class:EtherDevice
descDmaWrBytes	./dev/net/etherdevice.hh	/^    Stats::Scalar descDmaWrBytes;$/;"	m	class:EtherDevice
descDmaWrites	./dev/net/etherdevice.hh	/^    Stats::Scalar descDmaWrites;$/;"	m	class:EtherDevice
descEnd	./dev/net/i8254xGBe.hh	/^        uint32_t descEnd;$/;"	m	class:IGbE::TxDescCache
descInBlock	./dev/net/i8254xGBe.hh	/^        descInBlock(unsigned num_desc)$/;"	f	class:IGbE::TxDescCache
descLeft	./dev/net/i8254xGBe.hh	/^        descLeft() const$/;"	f	class:IGbE::DescCache
descQueue	./dev/net/dist_iface.hh	/^        std::queue<Desc> descQueue;$/;"	m	class:DistIface::RecvScheduler
descSize	./dev/net/i8254xGBe_defs.hh	/^        unsigned descSize()$/;"	f	struct:iGbReg::Regs::RCTL
descUnused	./dev/net/i8254xGBe.hh	/^        unsigned descUnused() const { return unusedCache.size(); }$/;"	f	class:IGbE::DescCache
descUsed	./dev/net/i8254xGBe.hh	/^        unsigned descUsed() const { return usedCache.size(); }$/;"	f	class:IGbE::DescCache
descendants	./python/m5/SimObject.py	/^    def descendants(self):$/;"	f
descendants	./python/m5/params.py	/^    def descendants(self):$/;"	m	class:SimObjectVector
deschedule	./sim/eventq.hh	/^    deschedule(Event &event)$/;"	f	class:EventManager
deschedule	./sim/eventq.hh	/^    deschedule(Event *event)$/;"	f	class:EventManager
deschedule	./sim/eventq_impl.hh	/^EventQueue::deschedule(Event *event)$/;"	f	class:EventQueue
deschedule	./sim/global_event.cc	/^void BaseGlobalEvent::deschedule()$/;"	f	class:BaseGlobalEvent
descheduleDeadlockEvent	./mem/ruby/system/DMASequencer.hh	/^    void descheduleDeadlockEvent() {}$/;"	f	class:DMASequencer
descheduleDeadlockEvent	./mem/ruby/system/RubyPortProxy.hh	/^    void descheduleDeadlockEvent() { }$/;"	f	class:RubyPortProxy
descheduleDeadlockEvent	./mem/ruby/system/Sequencer.hh	/^    void descheduleDeadlockEvent()$/;"	f	class:Sequencer
descheduleInstCommitEvent	./base/remote_gdb.cc	/^BaseRemoteGDB::descheduleInstCommitEvent(Event *ev)$/;"	f	class:BaseRemoteGDB
descr	./cpu/pc_event.hh	/^    std::string descr() const { return description; }$/;"	f	class:PCEvent
describe	./arch/x86/faults.cc	/^    PageFault::describe() const$/;"	f	class:X86ISA::PageFault
describe	./arch/x86/faults.cc	/^    X86FaultBase::describe() const$/;"	f	class:X86ISA::X86FaultBase
description	./arch/mips/isa.cc	/^ISA::CP0Event::description() const$/;"	f	class:MipsISA::ISA::CP0Event
description	./cpu/base.cc	/^CPUProgressEvent::description() const$/;"	f	class:CPUProgressEvent
description	./cpu/kvm/base.hh	/^        const char *description() const {$/;"	f	struct:BaseKvmCPU::TickEvent
description	./cpu/minor/MinorCPU.py	/^    description = Param.String('', "description string of the decoding\/inst."$/;"	v	class:MinorFUTiming
description	./cpu/minor/func_unit.hh	/^    const MinorFU &description;$/;"	m	class:Minor::FUPipeline
description	./cpu/minor/func_unit.hh	/^    std::string description;$/;"	m	class:MinorFUTiming
description	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::TrapEvent::description() const$/;"	f	class:DefaultCommit::TrapEvent
description	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::TickEvent::description() const$/;"	f	class:FullO3CPU::TickEvent
description	./cpu/o3/fetch.hh	/^        const char *description() const$/;"	f	class:DefaultFetch::FinishTranslationEvent
description	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::FUCompletion::description() const$/;"	f	class:InstructionQueue::FUCompletion
description	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::WritebackEvent::description() const$/;"	f	class:LSQUnit::WritebackEvent
description	./cpu/pc_event.hh	/^    std::string description;$/;"	m	class:PCEvent
description	./cpu/quiesce_event.cc	/^EndQuiesceEvent::description() const$/;"	f	class:EndQuiesceEvent
description	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::TickEvent::description() const$/;"	f	class:AtomicSimpleCPU::TickEvent
description	./cpu/simple/timing.cc	/^TimingSimpleCPU::IprEvent::description() const$/;"	f	class:TimingSimpleCPU::IprEvent
description	./cpu/simple/timing.hh	/^            const char *description() const { return "Timing CPU dcache tick"; }$/;"	f	struct:TimingSimpleCPU::DcachePort::DTickEvent
description	./cpu/simple/timing.hh	/^            const char *description() const { return "Timing CPU icache tick"; }$/;"	f	struct:TimingSimpleCPU::IcachePort::ITickEvent
description	./cpu/simple/timing.hh	/^            const char *description() const { return "Timing CPU tick"; }$/;"	f	struct:TimingSimpleCPU::TimingCPUPort::TickEvent
description	./cpu/testers/directedtest/RubyDirectedTester.hh	/^        virtual const char *description() const { return "Directed tick"; }$/;"	f	class:RubyDirectedTester::DirectedStartEvent
description	./cpu/testers/networktest/networktest.hh	/^        virtual const char *description() const { return "NetworkTest tick"; }$/;"	f	class:NetworkTest::TickEvent
description	./cpu/testers/rubytest/RubyTester.hh	/^        virtual const char *description() const { return "RubyTester tick"; }$/;"	f	class:RubyTester::CheckStartEvent
description	./dev/arm/gic_pl390.hh	/^        const char *description() const { return "Post Interrupt to CPU"; }$/;"	f	class:Pl390::PostIntEvent
description	./dev/arm/vgic.hh	/^        const char *description() const { return "Post VInterrupt to CPU"; }$/;"	f	class:VGic::PostVIntEvent
description	./dev/intel_8254_timer.cc	/^Intel8254Timer::Counter::CounterEvent::description() const$/;"	f	class:Intel8254Timer::Counter::CounterEvent
description	./dev/mc146818.cc	/^MC146818::RTCEvent::description() const$/;"	f	class:MC146818::RTCEvent
description	./dev/mc146818.cc	/^MC146818::RTCTickEvent::description() const$/;"	f	class:MC146818::RTCTickEvent
description	./dev/net/etherbus.hh	/^        virtual const char *description() const$/;"	f	class:EtherBus::DoneEvent
description	./dev/net/ethertap.hh	/^        virtual const char *description() const$/;"	f	class:EtherTap::TxEvent
description	./dev/uart8250.cc	/^Uart8250::IntrEvent::description() const$/;"	f	class:Uart8250::IntrEvent
description	./mem/ruby/system/Sequencer.hh	/^        const char *description() const { return "Sequencer deadlock check"; }$/;"	f	class:Sequencer::SequencerWakeupEvent
description	./sim/debug.cc	/^DebugBreakEvent::description() const$/;"	f	class:DebugBreakEvent
description	./sim/eventq.cc	/^Event::description() const$/;"	f	class:Event
description	./sim/eventq.hh	/^    const char *description() const { return "EventWrapped"; }$/;"	f	class:EventWrapper
description	./sim/global_event.cc	/^GlobalSyncEvent::description() const$/;"	f	class:GlobalSyncEvent
description	./sim/sim_events.cc	/^CountedExitEvent::description() const$/;"	f	class:CountedExitEvent
description	./sim/sim_events.cc	/^GlobalSimLoopExitEvent::description() const$/;"	f	class:GlobalSimLoopExitEvent
description	./sim/sim_events.cc	/^LocalSimLoopExitEvent::description() const$/;"	f	class:LocalSimLoopExitEvent
description	./sim/stat_control.cc	/^    const char *description() const { return "GlobalStatEvent"; }$/;"	f	class:Stats::StatEvent
descriptions	./base/stats/text.cc	/^    bool descriptions;$/;"	m	struct:Stats::DistPrint	file:
descriptions	./base/stats/text.cc	/^    bool descriptions;$/;"	m	struct:Stats::ScalarPrint	file:
descriptions	./base/stats/text.cc	/^    bool descriptions;$/;"	m	struct:Stats::SparseHistPrint	file:
descriptions	./base/stats/text.cc	/^    bool descriptions;$/;"	m	struct:Stats::VectorPrint	file:
descriptions	./base/stats/text.hh	/^    bool descriptions;$/;"	m	class:Stats::Text
descriptors	./dev/virtio/base.hh	/^    std::vector<VirtDescriptor> descriptors;$/;"	m	class:VirtQueue
descs	./arch/arm/freebsd/process.hh	/^        SyscallDesc *descs;$/;"	m	struct:ArmFreebsdProcessBits::SyscallTable
descs	./arch/arm/linux/process.hh	/^        SyscallDesc *descs;$/;"	m	struct:ArmLinuxProcessBits::SyscallTable
dest	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2, op3;$/;"	m	class:ArmISA::DataX3RegOp
dest	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::DataX2RegImmOp
dest	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::DataX2RegOp
dest	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::DataXCondSelOp
dest	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::DataXERegOp
dest	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::DataXSRegOp
dest	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1;$/;"	m	class:ArmISA::DataX1Reg2ImmOp
dest	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1;$/;"	m	class:ArmISA::DataX1RegImmOp
dest	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1;$/;"	m	class:ArmISA::DataX1RegOp
dest	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1;$/;"	m	class:ArmISA::DataXImmOp
dest	./arch/arm/insts/data64.hh	/^    IntRegIndex dest;$/;"	m	class:ArmISA::DataXImmOnlyOp
dest	./arch/arm/insts/macromem.hh	/^    RegIndex dest, dest2, urb;$/;"	m	class:ArmISA::MicroMemPairOp
dest	./arch/arm/insts/macromem.hh	/^    RegIndex dest, op1;$/;"	m	class:ArmISA::MicroNeonMixLaneOp64
dest	./arch/arm/insts/macromem.hh	/^    RegIndex dest, op1;$/;"	m	class:ArmISA::MicroNeonMixOp
dest	./arch/arm/insts/macromem.hh	/^    RegIndex dest, op1;$/;"	m	class:ArmISA::MicroNeonMixOp64
dest	./arch/arm/insts/macromem.hh	/^    RegIndex dest, ura;$/;"	m	class:ArmISA::MicroNeonMemOp
dest	./arch/arm/insts/mem.hh	/^    IntRegIndex dest;$/;"	m	class:ArmISA::Memory
dest	./arch/arm/insts/mem.hh	/^    IntRegIndex dest;$/;"	m	class:ArmISA::Swap
dest	./arch/arm/insts/mem64.hh	/^    IntRegIndex dest;$/;"	m	class:ArmISA::Memory64
dest	./arch/arm/insts/mem64.hh	/^    IntRegIndex dest;$/;"	m	class:ArmISA::SysDC64
dest	./arch/arm/insts/misc.hh	/^    IntRegIndex dest;$/;"	m	class:MrrcOp
dest	./arch/arm/insts/misc.hh	/^    IntRegIndex dest;$/;"	m	class:MrsOp
dest	./arch/arm/insts/misc.hh	/^    IntRegIndex dest;$/;"	m	class:RegImmImmOp
dest	./arch/arm/insts/misc.hh	/^    IntRegIndex dest;$/;"	m	class:RegImmOp
dest	./arch/arm/insts/misc.hh	/^    IntRegIndex dest;$/;"	m	class:RegImmRegOp
dest	./arch/arm/insts/misc.hh	/^    IntRegIndex dest;$/;"	m	class:RegImmRegShiftOp
dest	./arch/arm/insts/misc.hh	/^    IntRegIndex dest;$/;"	m	class:RegMiscRegImmOp
dest	./arch/arm/insts/misc.hh	/^    IntRegIndex dest;$/;"	m	class:RegRegImmImmOp
dest	./arch/arm/insts/misc.hh	/^    IntRegIndex dest;$/;"	m	class:RegRegImmOp
dest	./arch/arm/insts/misc.hh	/^    IntRegIndex dest;$/;"	m	class:RegRegOp
dest	./arch/arm/insts/misc.hh	/^    IntRegIndex dest;$/;"	m	class:RegRegRegImmOp
dest	./arch/arm/insts/misc.hh	/^    IntRegIndex dest;$/;"	m	class:RegRegRegOp
dest	./arch/arm/insts/misc.hh	/^    IntRegIndex dest;$/;"	m	class:RegRegRegRegOp
dest	./arch/arm/insts/misc.hh	/^    MiscRegIndex dest;$/;"	m	class:McrrOp
dest	./arch/arm/insts/misc.hh	/^    MiscRegIndex dest;$/;"	m	class:MiscRegRegImmOp
dest	./arch/arm/insts/misc64.hh	/^    IntRegIndex dest;$/;"	m	class:RegRegImmImmOp64
dest	./arch/arm/insts/misc64.hh	/^    IntRegIndex dest;$/;"	m	class:RegRegRegImmOp64
dest	./arch/arm/insts/pred_inst.hh	/^    IntRegIndex dest, op1, op2, shift;$/;"	m	class:ArmISA::DataRegRegOp
dest	./arch/arm/insts/pred_inst.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::DataRegOp
dest	./arch/arm/insts/pred_inst.hh	/^    IntRegIndex dest, op1;$/;"	m	class:ArmISA::DataImmOp
dest	./arch/arm/insts/vfp.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::FpCondSelOp
dest	./arch/arm/insts/vfp.hh	/^    IntRegIndex dest;$/;"	m	class:ArmISA::FpRegImmOp
dest	./arch/arm/insts/vfp.hh	/^    IntRegIndex dest;$/;"	m	class:ArmISA::FpRegRegImmOp
dest	./arch/arm/insts/vfp.hh	/^    IntRegIndex dest;$/;"	m	class:ArmISA::FpRegRegOp
dest	./arch/arm/insts/vfp.hh	/^    IntRegIndex dest;$/;"	m	class:ArmISA::FpRegRegRegImmOp
dest	./arch/arm/insts/vfp.hh	/^    IntRegIndex dest;$/;"	m	class:ArmISA::FpRegRegRegOp
dest	./arch/arm/insts/vfp.hh	/^    IntRegIndex dest;$/;"	m	class:ArmISA::FpRegRegRegRegOp
dest	./arch/x86/insts/microfpop.hh	/^        const RegIndex dest;$/;"	m	class:X86ISA::FpOp
dest	./arch/x86/insts/micromediaop.hh	/^        const RegIndex dest;$/;"	m	class:X86ISA::MediaOpBase
dest	./arch/x86/insts/microregop.hh	/^        const RegIndex dest;$/;"	m	class:X86ISA::RegOpBase
dest	./dev/pci/copy_engine_defs.hh	/^    Addr dest;$/;"	m	struct:CopyEngineReg::DmaDesc
dest	./dev/x86/i82094aa.hh	/^        Bitfield<63, 56> dest;$/;"	m	class:X86ISA::I82094AA
dest2	./arch/arm/insts/macromem.hh	/^    RegIndex dest, dest2, urb;$/;"	m	class:ArmISA::MicroMemPairOp
dest2	./arch/arm/insts/mem.hh	/^    IntRegIndex dest2;$/;"	m	class:ArmISA::MemoryDImm
dest2	./arch/arm/insts/mem.hh	/^    IntRegIndex dest2;$/;"	m	class:ArmISA::MemoryDReg
dest2	./arch/arm/insts/mem64.hh	/^    IntRegIndex dest2;$/;"	m	class:ArmISA::MemoryDImm64
dest2	./arch/arm/insts/misc.hh	/^    IntRegIndex dest2;$/;"	m	class:MrrcOp
destApicID	./arch/x86/bios/intelmp.hh	/^    uint8_t destApicID;$/;"	m	class:X86ISA::IntelMP::IntAssignment
destApicIntIn	./arch/x86/bios/intelmp.hh	/^    uint8_t destApicIntIn;$/;"	m	class:X86ISA::IntelMP::IntAssignment
destMode	./arch/x86/intmessage.hh	/^        Bitfield<19> destMode;$/;"	m	namespace:X86ISA
destMode	./arch/x86/regs/apic.hh	/^        Bitfield<11> destMode;$/;"	m	namespace:X86ISA
destMode	./dev/x86/i82094aa.hh	/^        Bitfield<11> destMode;$/;"	m	class:X86ISA::I82094AA
destRegIdx	./cpu/base_dyn_inst.hh	/^    RegIndex destRegIdx(int i) const { return staticInst->destRegIdx(i); }$/;"	f	class:BaseDynInst
destRegIdx	./cpu/static_inst.hh	/^    RegIndex destRegIdx(int i) const { return _destRegIdx[i]; }$/;"	f	class:StaticInst
destShorthand	./arch/x86/regs/apic.hh	/^        Bitfield<19, 18> destShorthand;$/;"	m	namespace:X86ISA
destSize	./arch/x86/insts/micromediaop.hh	/^        const uint8_t destSize;$/;"	m	class:X86ISA::MediaOpBase
dest_io_apic_id	./arch/x86/bios/IntelMP.py	/^    dest_io_apic_id = Param.UInt8(0,$/;"	v	class:X86IntelMPIOIntAssignment
dest_io_apic_intin	./arch/x86/bios/IntelMP.py	/^    dest_io_apic_intin = Param.UInt8(0,$/;"	v	class:X86IntelMPIOIntAssignment
dest_local_apic_id	./arch/x86/bios/IntelMP.py	/^    dest_local_apic_id = Param.UInt8(0,$/;"	v	class:X86IntelMPLocalIntAssignment
dest_local_apic_intin	./arch/x86/bios/IntelMP.py	/^    dest_local_apic_intin = Param.UInt8(0,$/;"	v	class:X86IntelMPLocalIntAssignment
destination	./arch/x86/intmessage.hh	/^        Bitfield<7, 0> destination;$/;"	m	namespace:X86ISA
destination	./arch/x86/regs/apic.hh	/^        Bitfield<31, 24> destination;$/;"	m	namespace:X86ISA
destination	./dev/arm/ufs_device.hh	/^        std::vector <uint8_t> destination;$/;"	m	struct:UFSHostDevice::SCSIResumeInfo
destination	./dev/arm/ufs_device.hh	/^        struct UTPTransferReqDesc* destination;$/;"	m	struct:UFSHostDevice::transferStart	typeref:struct:UFSHostDevice::transferStart::UTPTransferReqDesc
destination	./dev/arm/ufs_device.hh	/^        struct UTPUPIUTaskReq destination;$/;"	m	struct:UFSHostDevice::taskStart	typeref:struct:UFSHostDevice::taskStart::UTPUPIUTaskReq
destination	./dev/arm/ufs_device.hh	/^        uint8_t *destination;$/;"	m	struct:UFSHostDevice::transferDoneInfo
destroyStreams	./proto/protoio.cc	/^ProtoInputStream::destroyStreams()$/;"	f	class:ProtoInputStream
detach	./base/remote_gdb.cc	/^BaseRemoteGDB::detach()$/;"	f	class:BaseRemoteGDB
detach	./base/vnc/vncserver.cc	/^VncServer::detach()$/;"	f	class:VncServer
detach	./cpu/kvm/perfevent.cc	/^PerfKvmCounter::detach()$/;"	f	class:PerfKvmCounter
detach	./dev/net/ethertap.cc	/^EtherTap::detach()$/;"	f	class:EtherTap
detach	./dev/terminal.cc	/^Terminal::detach()$/;"	f	class:Terminal
dev	./dev/arm/rv_ctrl.hh	/^        Bitfield<11, 0> dev;$/;"	m	class:RealViewCtrl
dev	./dev/net/i8254xGBe.hh	/^    IGbE *dev;$/;"	m	class:IGbEInt
dev	./dev/net/ns_gige.hh	/^    NSGigE *dev;$/;"	m	class:NSGigEInt
dev	./dev/net/sinic.hh	/^    Device *dev;$/;"	m	class:Sinic::Interface
dev	./dev/pci/types.hh	/^    uint8_t dev;$/;"	m	struct:PciBusAddr
devID	./dev/storage/ide_disk.hh	/^    int devID;$/;"	m	class:IdeDisk
devIntrChangeMask	./dev/net/ns_gige.cc	/^NSGigE::devIntrChangeMask()$/;"	f	class:NSGigE
devIntrChangeMask	./dev/net/sinic.cc	/^Device::devIntrChangeMask(uint32_t newmask)$/;"	f	class:Sinic::Device
devIntrClear	./dev/net/ns_gige.cc	/^NSGigE::devIntrClear(uint32_t interrupts)$/;"	f	class:NSGigE
devIntrClear	./dev/net/sinic.cc	/^Device::devIntrClear(uint32_t interrupts)$/;"	f	class:Sinic::Device
devIntrPost	./dev/net/ns_gige.cc	/^NSGigE::devIntrPost(uint32_t interrupts)$/;"	f	class:NSGigE
devIntrPost	./dev/net/sinic.cc	/^Device::devIntrPost(uint32_t interrupts)$/;"	f	class:Sinic::Device
devState	./dev/storage/ide_disk.hh	/^    DevState_t devState;$/;"	m	class:IdeDisk
dev_mondo_head	./arch/sparc/isa.hh	/^    uint64_t dev_mondo_head;$/;"	m	class:SparcISA::ISA
dev_mondo_tail	./arch/sparc/isa.hh	/^    uint64_t dev_mondo_tail;$/;"	m	class:SparcISA::ISA
dev_t	./kern/solaris/solaris.hh	/^    typedef uint64_t dev_t;$/;"	t	class:Solaris
dev_t	./kern/tru64/tru64.hh	/^    typedef int32_t  dev_t;$/;"	t	class:Tru64
device	./dev/arm/RealView.py	/^    device = Param.UInt8("Device ID")$/;"	v	class:RealViewOsc
device	./dev/dma_device.hh	/^    MemObject *const device;$/;"	m	class:DmaPort
device	./dev/io_device.hh	/^    PioDevice *device;$/;"	m	class:PioPort
device	./dev/net/ethertap.hh	/^    std::string device;$/;"	m	class:EtherTap
device	./dev/pci/pcireg.h	/^        uint16_t device;$/;"	m	struct:PCIConfig::__anon26
device	./dev/x86/X86IntPin.py	/^    device = Param.SimObject("Device this pin belongs to")$/;"	v	class:X86IntSinkPin
device	./dev/x86/intdev.hh	/^        IntDevice * device;$/;"	m	class:X86ISA::IntDevice::IntSlavePort
device	./dev/x86/intdev.hh	/^        IntDevice* device;$/;"	m	class:X86ISA::IntDevice::IntMasterPort
device	./dev/x86/intdev.hh	/^    IntDevice * device;$/;"	m	class:X86ISA::IntSinkPin
deviceBusWidth	./mem/dram_ctrl.hh	/^    const uint32_t deviceBusWidth;$/;"	m	class:DRAMCtrl
deviceConfigFile	./mem/DRAMSim2.py	/^    deviceConfigFile = Param.String("ini\/DDR3_micron_32M_8B_x8_sg15.ini",$/;"	v	class:DRAMSim2
deviceFeatures	./dev/virtio/base.hh	/^    const FeatureBits deviceFeatures;$/;"	m	class:VirtIODeviceBase
deviceId	./dev/virtio/base.hh	/^    const DeviceId deviceId;$/;"	m	class:VirtIODeviceBase
deviceReadCallback	./dev/arm/ufs_device.hh	/^        Callback* deviceReadCallback;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
deviceRowBufferSize	./mem/dram_ctrl.hh	/^    const uint32_t deviceRowBufferSize;$/;"	m	class:DRAMCtrl
deviceSize	./mem/dram_ctrl.hh	/^    const uint32_t deviceSize;$/;"	m	class:DRAMCtrl
deviceTiming	./dev/storage/ide_ctrl.hh	/^    uint8_t deviceTiming;$/;"	m	class:IdeController
deviceUsed	./dev/virtio/fs9p.hh	/^     bool deviceUsed;$/;"	m	class:VirtIO9PProxy
device_bus_width	./mem/DRAMCtrl.py	/^                                      "device\/chip")$/;"	v	class:DRAMCtrl
device_bus_width	./mem/DRAMCtrl.py	/^    device_bus_width = 128$/;"	v	class:HBM_1000_4H_x128
device_bus_width	./mem/DRAMCtrl.py	/^    device_bus_width = 128$/;"	v	class:WideIO_200_x128
device_bus_width	./mem/DRAMCtrl.py	/^    device_bus_width = 32$/;"	v	class:GDDR5_4000_x64
device_bus_width	./mem/DRAMCtrl.py	/^    device_bus_width = 32$/;"	v	class:HMC_2500_x32
device_bus_width	./mem/DRAMCtrl.py	/^    device_bus_width = 32$/;"	v	class:LPDDR2_S4_1066_x32
device_bus_width	./mem/DRAMCtrl.py	/^    device_bus_width = 32$/;"	v	class:LPDDR3_1600_x32
device_bus_width	./mem/DRAMCtrl.py	/^    device_bus_width = 64$/;"	v	class:HBM_1000_4H_x64
device_bus_width	./mem/DRAMCtrl.py	/^    device_bus_width = 8$/;"	v	class:DDR3_1600_x64
device_bus_width	./mem/DRAMCtrl.py	/^    device_bus_width = 8$/;"	v	class:DDR4_2400_x64
device_rowbuffer_size	./mem/DRAMCtrl.py	/^                                           "device\/chip")$/;"	v	class:DRAMCtrl
device_rowbuffer_size	./mem/DRAMCtrl.py	/^    device_rowbuffer_size = '1kB'$/;"	v	class:DDR3_1600_x64
device_rowbuffer_size	./mem/DRAMCtrl.py	/^    device_rowbuffer_size = '1kB'$/;"	v	class:DDR4_2400_x64
device_rowbuffer_size	./mem/DRAMCtrl.py	/^    device_rowbuffer_size = '1kB'$/;"	v	class:HBM_1000_4H_x64
device_rowbuffer_size	./mem/DRAMCtrl.py	/^    device_rowbuffer_size = '1kB'$/;"	v	class:LPDDR2_S4_1066_x32
device_rowbuffer_size	./mem/DRAMCtrl.py	/^    device_rowbuffer_size = '256B'$/;"	v	class:GDDR5_4000_x64
device_rowbuffer_size	./mem/DRAMCtrl.py	/^    device_rowbuffer_size = '256B'$/;"	v	class:HMC_2500_x32
device_rowbuffer_size	./mem/DRAMCtrl.py	/^    device_rowbuffer_size = '2kB'$/;"	v	class:HBM_1000_4H_x128
device_rowbuffer_size	./mem/DRAMCtrl.py	/^    device_rowbuffer_size = '4kB'$/;"	v	class:LPDDR3_1600_x32
device_rowbuffer_size	./mem/DRAMCtrl.py	/^    device_rowbuffer_size = '4kB'$/;"	v	class:WideIO_200_x128
device_size	./mem/DRAMCtrl.py	/^    device_size = '1024MB'$/;"	v	class:WideIO_200_x128
device_size	./mem/DRAMCtrl.py	/^    device_size = '128MB'$/;"	v	class:GDDR5_4000_x64
device_size	./mem/DRAMCtrl.py	/^    device_size = '128MB'$/;"	v	class:HBM_1000_4H_x128
device_size	./mem/DRAMCtrl.py	/^    device_size = '256MB'$/;"	v	class:HBM_1000_4H_x64
device_size	./mem/DRAMCtrl.py	/^    device_size = '512MB'$/;"	v	class:DDR3_1600_x64
device_size	./mem/DRAMCtrl.py	/^    device_size = '512MB'$/;"	v	class:DDR4_2400_x64
device_size	./mem/DRAMCtrl.py	/^    device_size = '512MB'$/;"	v	class:LPDDR2_S4_1066_x32
device_size	./mem/DRAMCtrl.py	/^    device_size = '512MB'$/;"	v	class:LPDDR3_1600_x32
device_size	./mem/DRAMCtrl.py	/^    device_size = '8MB'$/;"	v	class:HMC_2500_x32
device_size	./mem/DRAMCtrl.py	/^    device_size = Param.MemorySize("Size of DRAM chip")$/;"	v	class:DRAMCtrl
devicename	./dev/BadDevice.py	/^    devicename = Param.String("Name of device to error on")$/;"	v	class:BadDevice
devices	./dev/arm/rv_ctrl.hh	/^    std::map<uint32_t, Device *> devices;$/;"	m	class:RealViewCtrl
devices	./dev/i2c/I2C.py	/^    devices = VectorParam.I2CDevice([], "Devices")$/;"	v	class:I2CBus
devices	./dev/i2c/bus.hh	/^    std::map<uint8_t, I2CDevice*> devices;$/;"	m	class:I2CBus
devices	./dev/pci/host.hh	/^    std::map<PciBusAddr, PciDevice *> devices;$/;"	m	class:PciHost
devicesPerRank	./mem/dram_ctrl.hh	/^    const uint32_t devicesPerRank;$/;"	m	class:DRAMCtrl
devices_per_rank	./mem/DRAMCtrl.py	/^    devices_per_rank = 1$/;"	v	class:HBM_1000_4H_x128
devices_per_rank	./mem/DRAMCtrl.py	/^    devices_per_rank = 1$/;"	v	class:HMC_2500_x32
devices_per_rank	./mem/DRAMCtrl.py	/^    devices_per_rank = 1$/;"	v	class:LPDDR2_S4_1066_x32
devices_per_rank	./mem/DRAMCtrl.py	/^    devices_per_rank = 1$/;"	v	class:LPDDR3_1600_x32
devices_per_rank	./mem/DRAMCtrl.py	/^    devices_per_rank = 1$/;"	v	class:WideIO_200_x128
devices_per_rank	./mem/DRAMCtrl.py	/^    devices_per_rank = 2$/;"	v	class:GDDR5_4000_x64
devices_per_rank	./mem/DRAMCtrl.py	/^    devices_per_rank = 8$/;"	v	class:DDR3_1600_x64
devices_per_rank	./mem/DRAMCtrl.py	/^    devices_per_rank = 8$/;"	v	class:DDR4_2400_x64
devices_per_rank	./mem/DRAMCtrl.py	/^    devices_per_rank = Param.Unsigned("Number of devices\/chips per rank")$/;"	v	class:DRAMCtrl
devlist	./dev/net/etherbus.hh	/^    devlist_t devlist;$/;"	m	class:EtherBus
devlist_t	./dev/net/etherbus.hh	/^    typedef std::list<EtherInt *> devlist_t;$/;"	t	class:EtherBus
devname	./dev/baddev.hh	/^    std::string devname;$/;"	m	class:BadDevice
dexcCode	./arch/mips/dt_constants.hh	/^    Bitfield<14, 10> dexcCode;$/;"	m	namespace:MipsISA
df	./arch/x86/regs/misc.hh	/^        Bitfield<10> df; \/\/ Direction Flag$/;"	m	namespace:X86ISA
dib	./arch/mips/dt_constants.hh	/^    Bitfield<4>      dib;$/;"	m	namespace:MipsISA
dibimpr	./arch/mips/dt_constants.hh	/^    Bitfield<6>      dibimpr;$/;"	m	namespace:MipsISA
digit2i	./base/remote_gdb.cc	/^BaseRemoteGDB::digit2i(char c)$/;"	f	class:BaseRemoteGDB
dim	./dev/alpha/tsunami_cchip.hh	/^    uint64_t dim[Tsunami::Max_CPUs];$/;"	m	class:TsunamiCChip
dimm_bit_0	./mem/ruby/structures/RubyMemoryControl.py	/^    dimm_bit_0 = Param.Int(12, "");$/;"	v	class:RubyMemoryControl
dimms_per_channel	./mem/ruby/structures/RubyMemoryControl.py	/^    dimms_per_channel = Param.Int(2, "");$/;"	v	class:RubyMemoryControl
dint	./arch/mips/dt_constants.hh	/^    Bitfield<5>      dint;$/;"	m	namespace:MipsISA
diod	./dev/virtio/VirtIO9P.py	/^    diod = Param.String("\/usr\/sbin\/diod", "Path to diod")$/;"	v	class:VirtIO9PDiod
diod_pid	./dev/virtio/fs9p.hh	/^    int diod_pid;$/;"	m	class:VirtIO9PDiod
dir	./base/output.hh	/^    std::string dir;$/;"	m	class:OutputDirectory
dir	./dev/alpha/tsunami_cchip.hh	/^    uint64_t dir[Tsunami::Max_CPUs];$/;"	m	class:TsunamiCChip
dir	./sim/serialize.cc	/^CheckpointIn::dir()$/;"	f	class:CheckpointIn
directToStage2	./arch/arm/tlb.hh	/^    bool directToStage2; \/\/ Indicates whether all translation requests should$/;"	m	class:ArmISA::TLB
directedStartEvent	./cpu/testers/directedtest/RubyDirectedTester.hh	/^    DirectedStartEvent directedStartEvent;$/;"	m	class:RubyDirectedTester
direction	./mem/ruby/network/Topology.hh	/^    LinkDirection direction;$/;"	m	struct:LinkEntry
directory	./base/output.cc	/^OutputDirectory::directory() const$/;"	f	class:OutputDirectory
dirent	./kern/tru64/tru64.hh	/^    struct dirent$/;"	s	class:Tru64
dirty	./arch/arm/table_walker.hh	/^        bool dirty() const$/;"	f	class:ArmISA::TableWalker::L1Descriptor
dirty	./arch/arm/table_walker.hh	/^        bool dirty() const$/;"	f	class:ArmISA::TableWalker::L2Descriptor
dirty	./arch/arm/table_walker.hh	/^        bool dirty() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
dirty	./dev/sparc/mm_disk.hh	/^    bool dirty;$/;"	m	class:MmDisk
disA20M	./arch/x86/regs/misc.hh	/^        Bitfield<2> disA20M;$/;"	m	namespace:X86ISA
disable	./base/debug.cc	/^    disable()$/;"	f	struct:Debug::AllFlags
disable	./base/debug.cc	/^CompoundFlag::disable()$/;"	f	class:Debug::CompoundFlag
disable	./base/debug.hh	/^    void disable() { _status = false; sync(); }$/;"	f	class:Debug::SimpleFlag
disable	./base/pollevent.cc	/^PollEvent::disable()$/;"	f	class:PollEvent
disable	./base/trace.cc	/^disable()$/;"	f	namespace:Trace
disable	./python/m5/trace.py	/^def disable():$/;"	f
disableAddrDists	./mem/comm_monitor.hh	/^        bool disableAddrDists;$/;"	m	struct:CommMonitor::MonitorStats
disableAll	./base/debug.cc	/^SimpleFlag::disableAll()$/;"	f	class:Debug::SimpleFlag
disableAll	./base/socket.cc	/^ListenSocket::disableAll()$/;"	f	class:ListenSocket
disableBandwidthHists	./mem/comm_monitor.hh	/^        bool disableBandwidthHists;$/;"	m	struct:CommMonitor::MonitorStats
disableBurstLengthHists	./mem/comm_monitor.hh	/^        bool disableBurstLengthHists;$/;"	m	struct:CommMonitor::MonitorStats
disableITTDists	./mem/comm_monitor.hh	/^        bool disableITTDists;$/;"	m	struct:CommMonitor::MonitorStats
disableKeyboard	./dev/x86/i8042.hh	/^        Bitfield<4> disableKeyboard;$/;"	m	class:X86ISA::I8042
disableLatencyHists	./mem/comm_monitor.hh	/^        bool disableLatencyHists;$/;"	m	struct:CommMonitor::MonitorStats
disableLinearHists	./mem/probes/stack_dist.hh	/^    const bool disableLinearHists;$/;"	m	class:StackDistProbe
disableLogHists	./mem/probes/stack_dist.hh	/^    const bool disableLogHists;$/;"	m	class:StackDistProbe
disableMemSlot	./cpu/kvm/vm.cc	/^KvmVM::disableMemSlot(const KvmVM::MemSlot num)$/;"	f	class:KvmVM
disableMouse	./dev/x86/i8042.hh	/^        Bitfield<5> disableMouse;$/;"	m	class:X86ISA::I8042
disableOutstandingHists	./mem/comm_monitor.hh	/^        bool disableOutstandingHists;$/;"	m	struct:CommMonitor::MonitorStats
disableSanityCheck	./mem/packet_queue.hh	/^    void disableSanityCheck() { _disableSanityCheck = true; }$/;"	f	class:PacketQueue
disableTransactionHists	./mem/comm_monitor.hh	/^        bool disableTransactionHists;$/;"	m	struct:CommMonitor::MonitorStats
disable_addr_dists	./mem/CommMonitor.py	/^    disable_addr_dists = Param.Bool(True, "Disable address distributions")$/;"	v	class:CommMonitor
disable_bandwidth_hists	./mem/CommMonitor.py	/^    disable_bandwidth_hists = Param.Bool(False, "Disable bandwidth histograms")$/;"	v	class:CommMonitor
disable_burst_length_hists	./mem/CommMonitor.py	/^                                                "histograms")$/;"	v	class:CommMonitor
disable_itt_dists	./mem/CommMonitor.py	/^    disable_itt_dists = Param.Bool(False, "Disable ITT distributions")$/;"	v	class:CommMonitor
disable_latency_hists	./mem/CommMonitor.py	/^    disable_latency_hists = Param.Bool(False, "Disable latency histograms")$/;"	v	class:CommMonitor
disable_linear_hists	./mem/probes/StackDistProbe.py	/^    disable_linear_hists = Param.Bool(False, "Disable linear histograms")$/;"	v	class:StackDistProbe
disable_log_hists	./mem/probes/StackDistProbe.py	/^    disable_log_hists = Param.Bool(False, "Disable logarithmic histograms")$/;"	v	class:StackDistProbe
disable_outstanding_hists	./mem/CommMonitor.py	/^                                               "requests histograms")$/;"	v	class:CommMonitor
disable_transaction_hists	./mem/CommMonitor.py	/^                                               "histograms")$/;"	v	class:CommMonitor
disabled	./arch/arm/faults.hh	/^    bool disabled;$/;"	m	class:ArmISA::UndefinedInstruction
disabled	./cpu/kvm/perfevent.hh	/^    PerfKvmCounterConfig &disabled(bool val) {$/;"	f	class:PerfKvmCounterConfig
disabledFault	./arch/arm/insts/static_inst.hh	/^    disabledFault() const$/;"	f	class:ArmISA::ArmStaticInst
disarm	./cpu/kvm/timer.cc	/^PerfKvmTimer::disarm()$/;"	f	class:PerfKvmTimer
disarm	./cpu/kvm/timer.cc	/^PosixKvmTimer::disarm()$/;"	f	class:PosixKvmTimer
disassemble	./arch/power/insts/branch.cc	/^PCDependentDisassembly::disassemble(Addr pc, const SymbolTable *symtab) const$/;"	f	class:PCDependentDisassembly
disassemble	./cpu/static_inst.cc	/^StaticInst::disassemble(Addr pc, const SymbolTable *symtab) const$/;"	f	class:StaticInst
discardLeft	./mem/stack_dist_calc.hh	/^        bool discardLeft;$/;"	m	struct:StackDistCalc::Node
discardPendingSignal	./cpu/kvm/base.cc	/^BaseKvmCPU::discardPendingSignal(int signum) const$/;"	f	class:BaseKvmCPU
discardRight	./mem/stack_dist_calc.hh	/^        bool discardRight;$/;"	m	struct:StackDistCalc::Node
disk	./dev/alpha/AlphaBackdoor.py	/^    disk = Param.SimpleDisk("Simple Disk")$/;"	v	class:AlphaBackdoor
disk	./dev/alpha/backdoor.hh	/^    SimpleDisk *disk;$/;"	m	class:AlphaBackdoor
disk	./dev/storage/SimpleDisk.py	/^    disk = Param.DiskImage("Disk Image")$/;"	v	class:SimpleDisk
diskBlock	./dev/alpha/access.h	/^    uint64_t    diskBlock;              \/\/ 50:$/;"	m	struct:AlphaAccess
diskBlock	./dev/mips/access.h	/^    uint32_t    diskBlock;              \/\/ 30:$/;"	m	struct:MipsAccess
diskCount	./dev/alpha/access.h	/^    uint64_t    diskCount;              \/\/ 40:$/;"	m	struct:AlphaAccess
diskCount	./dev/mips/access.h	/^    uint32_t    diskCount;              \/\/ 28:$/;"	m	struct:MipsAccess
diskData	./dev/sparc/mm_disk.hh	/^    uint8_t diskData[SectorSize];$/;"	m	class:MmDisk
diskDelay	./dev/storage/ide_disk.hh	/^    int diskDelay;$/;"	m	class:IdeDisk
diskOperation	./dev/alpha/access.h	/^    uint64_t    diskOperation;          \/\/ 58:$/;"	m	struct:AlphaAccess
diskOperation	./dev/mips/access.h	/^    uint32_t    diskOperation;          \/\/ 34:$/;"	m	struct:MipsAccess
diskPAddr	./dev/alpha/access.h	/^    uint64_t    diskPAddr;              \/\/ 48:$/;"	m	struct:AlphaAccess
diskPAddr	./dev/mips/access.h	/^    uint32_t    diskPAddr;              \/\/ 2c:$/;"	m	struct:MipsAccess
diskSize	./dev/arm/flash_device.hh	/^    uint64_t diskSize;$/;"	m	class:FlashDevice
diskSize	./dev/arm/ufs_device.hh	/^        const uint64_t diskSize;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
diskUnit	./dev/alpha/access.h	/^    uint64_t    diskUnit;               \/\/ 38:$/;"	m	struct:AlphaAccess
diskUnit	./dev/mips/access.h	/^    uint32_t    diskUnit;               \/\/ 24:$/;"	m	struct:MipsAccess
disk_size	./dev/storage/disk_image.hh	/^    mutable std::streampos disk_size;$/;"	m	class:RawDiskImage
disks	./dev/storage/Ide.py	/^    disks = VectorParam.IdeDisk("IDE disks attached to this controller")$/;"	v	class:IdeController
dismiss	./arch/x86/regs/misc.hh	/^        Bitfield<0> dismiss;$/;"	m	namespace:X86ISA
disp	./arch/power/insts/branch.hh	/^    uint32_t disp;$/;"	m	class:PowerISA::BranchPCRel
disp	./arch/power/insts/branch.hh	/^    uint32_t disp;$/;"	m	class:PowerISA::BranchPCRelCond
disp	./arch/power/insts/mem.hh	/^    int16_t disp;$/;"	m	class:PowerISA::MemDispOp
disp	./arch/x86/insts/microldstop.hh	/^        const uint64_t disp;$/;"	m	class:X86ISA::LdStOp
dispSize	./arch/x86/types.hh	/^        uint8_t dispSize;$/;"	m	struct:X86ISA::ExtMachInst
dispatch	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::dispatch(ThreadID tid)$/;"	f	class:DefaultIEW
dispatchAccess	./dev/storage/ide_ctrl.cc	/^IdeController::dispatchAccess(PacketPtr pkt, bool read)$/;"	f	class:IdeController
dispatchInsts	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::dispatchInsts(ThreadID tid)$/;"	f	class:DefaultIEW
dispatchStatus	./cpu/o3/iew.hh	/^    StageStatus dispatchStatus[Impl::MaxThreads];$/;"	m	class:DefaultIEW
dispatchTick	./cpu/o3/dyn_inst.hh	/^    int32_t dispatchTick;$/;"	m	class:BaseO3DynInst
dispatchWidth	./cpu/o3/O3CPU.py	/^    dispatchWidth = Param.Unsigned(8, "Dispatch width")$/;"	v	class:DerivO3CPU
dispatchWidth	./cpu/o3/iew.hh	/^    unsigned dispatchWidth;$/;"	m	class:DefaultIEW
dispatched	./cpu/o3/comm.hh	/^        unsigned dispatched;$/;"	m	struct:TimeBufStruct::iewComm
dispatchedToLQ	./cpu/o3/comm.hh	/^        unsigned dispatchedToLQ;$/;"	m	struct:TimeBufStruct::iewComm
dispatchedToSQ	./cpu/o3/comm.hh	/^        unsigned dispatchedToSQ;$/;"	m	struct:TimeBufStruct::iewComm
displacement	./arch/x86/types.hh	/^        uint64_t displacement;$/;"	m	struct:X86ISA::ExtMachInst
displacementSize	./arch/x86/decoder.hh	/^    int displacementSize;$/;"	m	class:X86ISA::Decoder
display	./base/stats/info.hh	/^const FlagsType display =       0x0002;$/;"	m	namespace:Stats
display	./python/m5/util/sorteddict.py	/^    def display(d):$/;"	m	class:SortedDict
displayTimings	./dev/arm/hdlcd.cc	/^HDLcd::displayTimings() const$/;"	f	class:HDLcd
dist	./base/stats/info.hh	/^const FlagsType dist =          0x0080;$/;"	m	namespace:Stats
distAddr	./dev/arm/gic_pl390.hh	/^    Addr distAddr;$/;"	m	class:Pl390
distIface	./dev/net/dist_etherlink.hh	/^        DistIface *distIface;$/;"	m	class:DistEtherLink::Link
distIface	./dev/net/dist_etherlink.hh	/^    DistIface *distIface;$/;"	m	class:DistEtherLink
distIfaceId	./dev/net/dist_iface.hh	/^    unsigned distIfaceId;$/;"	m	class:DistIface
distIfaceId	./dev/net/tcp_iface.hh	/^        unsigned distIfaceId;$/;"	m	struct:TCPIface::NodeInfo
distIfaceNum	./dev/net/dist_iface.cc	/^unsigned DistIface::distIfaceNum = 0;$/;"	m	class:DistIface	file:
distIfaceNum	./dev/net/dist_iface.hh	/^    static unsigned distIfaceNum;$/;"	m	class:DistIface
distIfaceNum	./dev/net/tcp_iface.hh	/^        unsigned distIfaceNum;$/;"	m	struct:TCPIface::NodeInfo
distPioDelay	./dev/arm/gic_pl390.hh	/^    Tick distPioDelay;$/;"	m	class:Pl390
distRange	./arch/arm/kvm/gic.hh	/^    const AddrRange distRange;$/;"	m	class:KvmGic
dist_addr	./arch/arm/kvm/KvmGic.py	/^    dist_addr = Param.Addr(0x1f001000, "Address for distributor")$/;"	v	class:KvmGic
dist_addr	./dev/arm/Gic.py	/^    dist_addr = Param.Addr(0x1f001000, "Address for distributor")$/;"	v	class:Pl390
dist_pio_delay	./dev/arm/Gic.py	/^    dist_pio_delay = Param.Latency('10ns', "Delay for PIO r\/w to distributor")$/;"	v	class:Pl390
dist_rank	./dev/net/Ethernet.py	/^    dist_rank = Param.UInt32('0', "Rank of this gem5 process (dist run)")$/;"	v	class:DistEtherLink
dist_size	./dev/net/Ethernet.py	/^    dist_size = Param.UInt32('1', "Number of gem5 processes (dist run)")$/;"	v	class:DistEtherLink
divCeil	./base/intmath.hh	/^divCeil(const T& a, const U& b)$/;"	f
divide	./arch/arm/miscregs.hh	/^        Bitfield<19, 16> divide;$/;"	m	namespace:ArmISA
divideFromConf	./arch/x86/interrupts.cc	/^divideFromConf(uint32_t conf)$/;"	f
dl	./arch/mips/pra_constants.hh	/^    Bitfield<12, 10> dl;$/;"	m	namespace:MipsISA
dll	./mem/DRAMCtrl.py	/^    dll = False$/;"	v	class:LPDDR2_S4_1066_x32
dll	./mem/DRAMCtrl.py	/^    dll = False$/;"	v	class:LPDDR3_1600_x32
dll	./mem/DRAMCtrl.py	/^    dll = False$/;"	v	class:WideIO_200_x128
dll	./mem/DRAMCtrl.py	/^    dll = Param.Bool(True, "DRAM has DLL or not")$/;"	v	class:DRAMCtrl
dm	./arch/mips/dt_constants.hh	/^    Bitfield<30>     dm;$/;"	m	namespace:MipsISA
dm	./dev/mc146818.hh	/^        Bitfield<2> dm;        \/\/\/ 0 = BCD, 1 = Binary coded time$/;"	m	class:MC146818
dmDrain	./sim/drain.cc	/^Drainable::dmDrain()$/;"	f	class:Drainable
dmDrainResume	./sim/drain.cc	/^Drainable::dmDrainResume()$/;"	f	class:Drainable
dma	./dev/Device.py	/^    dma = MasterPort("DMA port")$/;"	v	class:DmaDevice
dma	./dev/pci/CopyEngine.py	/^    dma = VectorMasterPort("Copy engine DMA port")$/;"	v	class:CopyEngine
dma1	./dev/x86/SouthBridge.py	/^    dma1 = Param.I8237(_dma1, "The first dma controller")$/;"	v	class:SouthBridge
dmaAborted	./dev/storage/ide_disk.hh	/^    bool dmaAborted;$/;"	m	class:IdeDisk
dmaAction	./dev/dma_device.cc	/^DmaPort::dmaAction(Packet::Command cmd, Addr addr, int size, Event *event,$/;"	f	class:DmaPort
dmaAddr	./dev/alpha/tsunami_pchip.cc	/^TsunamiPChip::dmaAddr(const PciBusAddr &dev, Addr busAddr) const$/;"	f	class:TsunamiPChip
dmaAddr	./dev/pci/host.hh	/^        Addr dmaAddr(Addr addr) const { return host.dmaAddr(busAddr, addr); }$/;"	f	class:PciHost::DeviceInterface
dmaBuffer	./dev/arm/pl111.hh	/^    uint8_t *dmaBuffer;$/;"	m	class:Pl111
dmaCap0	./dev/storage/ide_ctrl.hh	/^        Bitfield<6> dmaCap0;$/;"	m	class:IdeController
dmaCap1	./dev/storage/ide_ctrl.hh	/^        Bitfield<5> dmaCap1;$/;"	m	class:IdeController
dmaDataFree	./dev/net/ns_gige.hh	/^    bool dmaDataFree;$/;"	m	class:NSGigE
dmaDescFree	./dev/net/ns_gige.hh	/^    bool dmaDescFree;$/;"	m	class:NSGigE
dmaDone	./dev/arm/pl111.cc	/^Pl111::dmaDone()$/;"	f	class:Pl111
dmaDone	./dev/dma_device.cc	/^DmaReadFifo::dmaDone()$/;"	f	class:DmaReadFifo
dmaDoneEventAll	./dev/arm/pl111.hh	/^    std::vector<DmaDoneEvent> dmaDoneEventAll;$/;"	m	class:Pl111
dmaDoneEventFree	./dev/arm/pl111.hh	/^    std::vector<DmaDoneEvent *> dmaDoneEventFree;$/;"	m	class:Pl111
dmaEngine	./dev/arm/hdlcd.hh	/^    std::unique_ptr<DmaEngine> dmaEngine;$/;"	m	class:HDLcd
dmaError	./dev/storage/ide_ctrl.hh	/^        Bitfield<1> dmaError;$/;"	m	class:IdeController
dmaIdle	./dev/net/ns_gige.hh	/^        dmaIdle,$/;"	e	enum:NSGigE::DmaState
dmaPending	./dev/dma_device.hh	/^    bool dmaPending() const { return dmaPort.dmaPending(); }$/;"	f	class:DmaDevice
dmaPending	./dev/dma_device.hh	/^    bool dmaPending() const { return pendingCount > 0; }$/;"	f	class:DmaPort
dmaPendingNum	./dev/arm/pl111.hh	/^    uint32_t dmaPendingNum;$/;"	m	class:Pl111
dmaPort	./dev/dma_device.hh	/^    DmaPort dmaPort;$/;"	m	class:DmaDevice
dmaPrdReadDone	./dev/storage/ide_disk.cc	/^IdeDisk::dmaPrdReadDone()$/;"	f	class:IdeDisk
dmaPrdReadEvent	./dev/storage/ide_disk.hh	/^    EventWrapper<IdeDisk, &IdeDisk::dmaPrdReadDone> dmaPrdReadEvent;$/;"	m	class:IdeDisk
dmaRead	./dev/dma_device.hh	/^    void dmaRead(Addr addr, int size, Event *event, uint8_t *data,$/;"	f	class:DmaDevice
dmaRead	./dev/storage/ide_disk.hh	/^    bool dmaRead;$/;"	m	class:IdeDisk
dmaReadBytes	./dev/storage/ide_disk.hh	/^    Stats::Scalar dmaReadBytes;$/;"	m	class:IdeDisk
dmaReadCG	./dev/storage/ide_disk.hh	/^    ChunkGenerator *dmaReadCG;$/;"	m	class:IdeDisk
dmaReadDelay	./dev/net/ns_gige.hh	/^    Tick dmaReadDelay;$/;"	m	class:NSGigE
dmaReadDelay	./dev/net/sinic.hh	/^    Tick dmaReadDelay;$/;"	m	class:Sinic::Device
dmaReadDone	./dev/storage/ide_disk.cc	/^IdeDisk::dmaReadDone()$/;"	f	class:IdeDisk
dmaReadEvent	./dev/storage/ide_disk.hh	/^    EventWrapper<IdeDisk, &IdeDisk::dmaReadDone> dmaReadEvent;$/;"	m	class:IdeDisk
dmaReadFactor	./dev/net/ns_gige.hh	/^    Tick dmaReadFactor;$/;"	m	class:NSGigE
dmaReadFactor	./dev/net/sinic.hh	/^    Tick dmaReadFactor;$/;"	m	class:Sinic::Device
dmaReadFullPages	./dev/storage/ide_disk.hh	/^    Stats::Scalar dmaReadFullPages;$/;"	m	class:IdeDisk
dmaReadTxs	./dev/storage/ide_disk.hh	/^    Stats::Scalar dmaReadTxs;$/;"	m	class:IdeDisk
dmaReadWaitEvent	./dev/storage/ide_disk.hh	/^    EventWrapper<IdeDisk, &IdeDisk::doDmaRead> dmaReadWaitEvent;$/;"	m	class:IdeDisk
dmaReadWaiting	./dev/net/ns_gige.hh	/^        dmaReadWaiting,$/;"	e	enum:NSGigE::DmaState
dmaReading	./dev/net/ns_gige.hh	/^        dmaReading,$/;"	e	enum:NSGigE::DmaState
dmaSize	./dev/arm/pl111.hh	/^    static const int dmaSize            = 8;    \/\/ 64 bits$/;"	m	class:Pl111
dmaState	./dev/storage/ide_disk.hh	/^    DmaState_t dmaState;$/;"	m	class:IdeDisk
dmaTransferEvent	./dev/storage/ide_disk.hh	/^    EventWrapper<IdeDisk, &IdeDisk::doDmaTransfer> dmaTransferEvent;$/;"	m	class:IdeDisk
dmaWrite	./dev/dma_device.hh	/^    void dmaWrite(Addr addr, int size, Event *event, uint8_t *data,$/;"	f	class:DmaDevice
dmaWriteBytes	./dev/storage/ide_disk.hh	/^    Stats::Scalar dmaWriteBytes;$/;"	m	class:IdeDisk
dmaWriteCG	./dev/storage/ide_disk.hh	/^    ChunkGenerator *dmaWriteCG;$/;"	m	class:IdeDisk
dmaWriteDelay	./dev/net/ns_gige.hh	/^    Tick dmaWriteDelay;$/;"	m	class:NSGigE
dmaWriteDelay	./dev/net/sinic.hh	/^    Tick dmaWriteDelay;$/;"	m	class:Sinic::Device
dmaWriteDone	./dev/storage/ide_disk.cc	/^IdeDisk::dmaWriteDone()$/;"	f	class:IdeDisk
dmaWriteEvent	./dev/storage/ide_disk.hh	/^    EventWrapper<IdeDisk, &IdeDisk::dmaWriteDone> dmaWriteEvent;$/;"	m	class:IdeDisk
dmaWriteFactor	./dev/net/ns_gige.hh	/^    Tick dmaWriteFactor;$/;"	m	class:NSGigE
dmaWriteFactor	./dev/net/sinic.hh	/^    Tick dmaWriteFactor;$/;"	m	class:Sinic::Device
dmaWriteFullPages	./dev/storage/ide_disk.hh	/^    Stats::Scalar dmaWriteFullPages;$/;"	m	class:IdeDisk
dmaWriteInfo	./dev/arm/ufs_device.hh	/^    std::deque<struct writeToDiskBurst> dmaWriteInfo;$/;"	m	class:UFSHostDevice
dmaWriteTxs	./dev/storage/ide_disk.hh	/^    Stats::Scalar dmaWriteTxs;$/;"	m	class:IdeDisk
dmaWriteWaitEvent	./dev/storage/ide_disk.hh	/^    EventWrapper<IdeDisk, &IdeDisk::doDmaWrite> dmaWriteWaitEvent;$/;"	m	class:IdeDisk
dmaWriteWaiting	./dev/net/ns_gige.hh	/^        dmaWriteWaiting$/;"	e	enum:NSGigE::DmaState
dmaWriting	./dev/net/ns_gige.hh	/^        dmaWriting,$/;"	e	enum:NSGigE::DmaState
dma_data_free	./dev/net/Ethernet.py	/^    dma_data_free = Param.Bool(False, "DMA of Data is free")$/;"	v	class:NSGigE
dma_desc_free	./dev/net/Ethernet.py	/^    dma_desc_free = Param.Bool(False, "DMA of Descriptors is free")$/;"	v	class:NSGigE
dma_no_allocate	./dev/net/Ethernet.py	/^    dma_no_allocate = Param.Bool(True, "Should we allocate cache on read")$/;"	v	class:NSGigE
dma_read_delay	./dev/net/Ethernet.py	/^    dma_read_delay = Param.Latency('0us', "fixed delay for dma reads")$/;"	v	class:EtherDevBase
dma_read_factor	./dev/net/Ethernet.py	/^    dma_read_factor = Param.Latency('0us', "multiplier for dma reads")$/;"	v	class:EtherDevBase
dma_write_delay	./dev/net/Ethernet.py	/^    dma_write_delay = Param.Latency('0us', "fixed delay for dma writes")$/;"	v	class:EtherDevBase
dma_write_factor	./dev/net/Ethernet.py	/^    dma_write_factor = Param.Latency('0us', "multiplier for dma writes")$/;"	v	class:EtherDevBase
dmac_fake	./dev/arm/RealView.py	/^    dmac_fake     = AmbaFake(pio_addr=0x10030000)$/;"	v	class:RealViewEB
dmac_fake	./dev/arm/RealView.py	/^    dmac_fake     = AmbaFake(pio_addr=0x10030000)$/;"	v	class:RealViewPBX
dn	./arch/arm/miscregs.hh	/^        Bitfield<25> dn;$/;"	m	namespace:ArmISA
dnHigh	./base/loader/coff_sym.h	/^    coff_int    dnHigh;         \/* high dimension *\/$/;"	m	union:__anon115
dnLow	./base/loader/coff_sym.h	/^    coff_int    dnLow;          \/* low dimension *\/$/;"	m	union:__anon115
dnNil	./base/loader/coff_sym.h	348;"	d
doCalibrateClocks	./arch/alpha/freebsd/system.cc	/^FreebsdAlphaSystem::doCalibrateClocks(ThreadContext *tc)$/;"	f	class:FreebsdAlphaSystem
doCkpt	./dev/net/dist_iface.hh	/^        bool doCkpt;$/;"	m	class:DistIface::Sync
doCpuid	./arch/x86/cpuid.cc	/^    doCpuid(ThreadContext * tc, uint32_t function,$/;"	f	namespace:X86ISA
doDRAMAccess	./mem/dram_ctrl.cc	/^DRAMCtrl::doDRAMAccess(DRAMPacket* dram_pkt)$/;"	f	class:DRAMCtrl
doDebugBreak	./sim/sim_object.hh	/^    bool doDebugBreak;$/;"	m	class:SimObject
doDisplacementState	./arch/x86/decoder.cc	/^Decoder::doDisplacementState()$/;"	f	class:X86ISA::Decoder
doDmaDataRead	./dev/storage/ide_disk.cc	/^IdeDisk::doDmaDataRead()$/;"	f	class:IdeDisk
doDmaDataWrite	./dev/storage/ide_disk.cc	/^IdeDisk::doDmaDataWrite()$/;"	f	class:IdeDisk
doDmaRead	./dev/storage/ide_disk.cc	/^IdeDisk::doDmaRead()$/;"	f	class:IdeDisk
doDmaTransfer	./dev/storage/ide_disk.cc	/^IdeDisk::doDmaTransfer()$/;"	f	class:IdeDisk
doDmaWrite	./dev/storage/ide_disk.cc	/^IdeDisk::doDmaWrite()$/;"	f	class:IdeDisk
doDq	./base/cp_annotate.cc	/^CPA::doDq(System *sys, int flags, int cpuid, int sm,$/;"	f	class:CPA
doExit	./dev/net/dist_iface.hh	/^        bool doExit;$/;"	m	class:DistIface::Sync
doExitCleanup	./sim/core.cc	/^doExitCleanup()$/;"	f
doFastWrites	./mem/cache/cache.hh	/^    const bool doFastWrites;$/;"	m	class:Cache
doFromCacheState	./arch/x86/decoder.cc	/^Decoder::doFromCacheState()$/;"	f	class:X86ISA::Decoder
doImmediateState	./arch/x86/decoder.cc	/^Decoder::doImmediateState()$/;"	f	class:X86ISA::Decoder
doInit	./base/statistics.hh	/^    doInit()$/;"	f	class:Stats::DistBase
doInit	./base/statistics.hh	/^    doInit()$/;"	f	class:Stats::ScalarBase
doInit	./base/statistics.hh	/^    doInit()$/;"	f	class:Stats::SparseHistBase
doInit	./base/statistics.hh	/^    doInit(size_type s)$/;"	f	class:Stats::VectorBase
doInit	./base/statistics.hh	/^    doInit(size_type s)$/;"	f	class:Stats::VectorDistBase
doInstCommitAccounting	./cpu/minor/execute.cc	/^Execute::doInstCommitAccounting(MinorDynInstPtr inst)$/;"	f	class:Minor::Execute
doL0LongDescEvent	./arch/arm/table_walker.hh	/^                 &TableWalker::doL0LongDescriptorWrapper> doL0LongDescEvent;$/;"	m	class:ArmISA::TableWalker
doL0LongDescriptorWrapper	./arch/arm/table_walker.cc	/^TableWalker::doL0LongDescriptorWrapper()$/;"	f	class:TableWalker
doL1DescEvent	./arch/arm/table_walker.hh	/^                 &TableWalker::doL1DescriptorWrapper> doL1DescEvent;$/;"	m	class:ArmISA::TableWalker
doL1Descriptor	./arch/arm/table_walker.cc	/^TableWalker::doL1Descriptor()$/;"	f	class:TableWalker
doL1DescriptorWrapper	./arch/arm/table_walker.cc	/^TableWalker::doL1DescriptorWrapper()$/;"	f	class:TableWalker
doL1LongDescEvent	./arch/arm/table_walker.hh	/^                 &TableWalker::doL1LongDescriptorWrapper> doL1LongDescEvent;$/;"	m	class:ArmISA::TableWalker
doL1LongDescriptorWrapper	./arch/arm/table_walker.cc	/^TableWalker::doL1LongDescriptorWrapper()$/;"	f	class:TableWalker
doL2DescEvent	./arch/arm/table_walker.hh	/^                 &TableWalker::doL2DescriptorWrapper> doL2DescEvent;$/;"	m	class:ArmISA::TableWalker
doL2Descriptor	./arch/arm/table_walker.cc	/^TableWalker::doL2Descriptor()$/;"	f	class:TableWalker
doL2DescriptorWrapper	./arch/arm/table_walker.cc	/^TableWalker::doL2DescriptorWrapper()$/;"	f	class:TableWalker
doL2LongDescEvent	./arch/arm/table_walker.hh	/^                 &TableWalker::doL2LongDescriptorWrapper> doL2LongDescEvent;$/;"	m	class:ArmISA::TableWalker
doL2LongDescriptorWrapper	./arch/arm/table_walker.cc	/^TableWalker::doL2LongDescriptorWrapper()$/;"	f	class:TableWalker
doL3LongDescEvent	./arch/arm/table_walker.hh	/^                 &TableWalker::doL3LongDescriptorWrapper> doL3LongDescEvent;$/;"	m	class:ArmISA::TableWalker
doL3LongDescriptorWrapper	./arch/arm/table_walker.cc	/^TableWalker::doL3LongDescriptorWrapper()$/;"	f	class:TableWalker
doLongDescriptor	./arch/arm/table_walker.cc	/^TableWalker::doLongDescriptor()$/;"	f	class:TableWalker
doLongDescriptorWrapper	./arch/arm/table_walker.cc	/^TableWalker::doLongDescriptorWrapper(LookupLevel curr_lookup_level)$/;"	f	class:TableWalker
doMMIOAccess	./cpu/kvm/base.cc	/^BaseKvmCPU::doMMIOAccess(Addr paddr, void *data, int size, bool write)$/;"	f	class:BaseKvmCPU
doMmuRegRead	./arch/sparc/tlb.cc	/^TLB::doMmuRegRead(ThreadContext *tc, Packet *pkt)$/;"	f	class:SparcISA::TLB
doMmuRegWrite	./arch/sparc/tlb.cc	/^TLB::doMmuRegWrite(ThreadContext *tc, Packet *pkt)$/;"	f	class:SparcISA::TLB
doModRM	./arch/x86/emulenv.cc	/^void EmulEnv::doModRM(const ExtMachInst & machInst)$/;"	f	class:EmulEnv
doModRMState	./arch/x86/decoder.cc	/^Decoder::doModRMState(uint8_t nextByte)$/;"	f	class:X86ISA::Decoder
doMonitor	./cpu/base.cc	/^bool AddressMonitor::doMonitor(PacketPtr pkt) {$/;"	f	class:AddressMonitor
doNormalFault	./arch/sparc/faults.cc	/^doNormalFault(ThreadContext *tc, TrapType tt, bool gotoHpriv)$/;"	f	namespace:SparcISA
doOneByteOpcodeState	./arch/x86/decoder.cc	/^Decoder::doOneByteOpcodeState(uint8_t nextByte)$/;"	f	class:X86ISA::Decoder
doOp	./arch/arm/insts/vfp.hh	/^    doOp(double op1) const$/;"	f	class:ArmISA::FpOp
doOp	./arch/arm/insts/vfp.hh	/^    doOp(double op1, double op2) const$/;"	f	class:ArmISA::FpOp
doOp	./arch/arm/insts/vfp.hh	/^    doOp(float op1) const$/;"	f	class:ArmISA::FpOp
doOp	./arch/arm/insts/vfp.hh	/^    doOp(float op1, float op2) const$/;"	f	class:ArmISA::FpOp
doPrefixState	./arch/x86/decoder.cc	/^Decoder::doPrefixState(uint8_t nextByte)$/;"	f	class:X86ISA::Decoder
doProcessEvent	./arch/arm/table_walker.hh	/^    EventWrapper<TableWalker, &TableWalker::processWalkWrapper> doProcessEvent;$/;"	m	class:ArmISA::TableWalker
doQ	./base/cp_annotate.cc	/^CPA::doQ(System *sys, int flags, int cpuid, int sm,$/;"	f	class:CPA
doREDFault	./arch/sparc/faults.cc	/^doREDFault(ThreadContext *tc, TrapType tt)$/;"	f	namespace:SparcISA
doResetState	./arch/x86/decoder.cc	/^Decoder::doResetState()$/;"	f	class:X86ISA::Decoder
doRetry	./cpu/testers/networktest/networktest.cc	/^NetworkTest::doRetry()$/;"	f	class:NetworkTest
doRxDmaRead	./dev/net/ns_gige.cc	/^NSGigE::doRxDmaRead()$/;"	f	class:NSGigE
doRxDmaWrite	./dev/net/ns_gige.cc	/^NSGigE::doRxDmaWrite()$/;"	f	class:NSGigE
doSIBState	./arch/x86/decoder.cc	/^Decoder::doSIBState(uint8_t nextByte)$/;"	f	class:X86ISA::Decoder
doService	./cpu/pc_event.cc	/^PCEventQueue::doService(ThreadContext *tc)$/;"	f	class:PCEventQueue
doSimLoop	./sim/simulate.cc	/^doSimLoop(EventQueue *eventq)$/;"	f
doSquash	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::doSquash(const TheISA::PCState &newPC,$/;"	f	class:DefaultFetch
doSquash	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::doSquash(ThreadID tid)$/;"	f	class:InstructionQueue
doSquash	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::doSquash(const InstSeqNum &squashed_seq_num, ThreadID tid)$/;"	f	class:DefaultRename
doSquash	./cpu/o3/rob_impl.hh	/^ROB<Impl>::doSquash(ThreadID tid)$/;"	f	class:ROB
doSwSmEnd	./base/cp_annotate.cc	/^CPA::doSwSmEnd(System *sys, int cpuid, string sm, uint64_t frame)$/;"	f	class:CPA
doSyscall	./sim/syscall_emul.cc	/^SyscallDesc::doSyscall(int callnum, LiveProcess *process, ThreadContext *tc)$/;"	f	class:SyscallDesc
doThreeByte0F38OpcodeState	./arch/x86/decoder.cc	/^Decoder::doThreeByte0F38OpcodeState(uint8_t nextByte)$/;"	f	class:X86ISA::Decoder
doThreeByte0F3AOpcodeState	./arch/x86/decoder.cc	/^Decoder::doThreeByte0F3AOpcodeState(uint8_t nextByte)$/;"	f	class:X86ISA::Decoder
doThreeByteVexFirstState	./arch/x86/decoder.cc	/^Decoder::doThreeByteVexFirstState(uint8_t nextByte)$/;"	f	class:X86ISA::Decoder
doThreeByteVexSecondState	./arch/x86/decoder.cc	/^Decoder::doThreeByteVexSecondState(uint8_t nextByte)$/;"	f	class:X86ISA::Decoder
doTimingSupplyResponse	./mem/cache/cache.cc	/^Cache::doTimingSupplyResponse(PacketPtr req_pkt, const uint8_t *blk_data,$/;"	f	class:Cache
doTwoByteOpcodeState	./arch/x86/decoder.cc	/^Decoder::doTwoByteOpcodeState(uint8_t nextByte)$/;"	f	class:X86ISA::Decoder
doTwoByteVexState	./arch/x86/decoder.cc	/^Decoder::doTwoByteVexState(uint8_t nextByte)$/;"	f	class:X86ISA::Decoder
doTxDmaRead	./dev/net/ns_gige.cc	/^NSGigE::doTxDmaRead()$/;"	f	class:NSGigE
doTxDmaWrite	./dev/net/ns_gige.cc	/^NSGigE::doTxDmaWrite()$/;"	f	class:NSGigE
doWritebacks	./mem/cache/cache.cc	/^Cache::doWritebacks(PacketList& writebacks, Tick forward_time)$/;"	f	class:Cache
doWritebacksAtomic	./mem/cache/cache.cc	/^Cache::doWritebacksAtomic(PacketList& writebacks)$/;"	f	class:Cache
do_checkpoint_insts	./cpu/BaseCPU.py	/^    do_checkpoint_insts = Param.Bool(True,$/;"	v
do_dot	./python/m5/util/dot_writer.py	/^def do_dot(root, outdir, dotFilename):$/;"	f
do_quiesce	./cpu/BaseCPU.py	/^    do_quiesce = Param.Bool(True, "enable quiesce instructions")$/;"	v
do_statistics_insts	./cpu/BaseCPU.py	/^    do_statistics_insts = Param.Bool(True,$/;"	v
do_test	./unittest/cprintftime.cc	/^do_test(int seconds)$/;"	f
doingStage2	./arch/arm/table_walker.hh	/^        bool doingStage2;$/;"	m	class:ArmISA::TableWalker::WalkerState
domain	./arch/arm/faults.hh	/^    TlbEntry::DomainType domain;$/;"	m	class:ArmISA::AbortFault
domain	./arch/arm/miscregs.hh	/^        Bitfield<7, 4> domain;$/;"	m	namespace:ArmISA
domain	./arch/arm/pagetable.hh	/^    DomainType domain;         \/\/ Access Domain$/;"	m	struct:ArmISA::TlbEntry
domain	./arch/arm/table_walker.hh	/^        TlbEntry::DomainType domain() const$/;"	f	class:ArmISA::TableWalker::L1Descriptor
domain	./arch/arm/table_walker.hh	/^        TlbEntry::DomainType domain() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
domain	./arch/arm/table_walker.hh	/^        virtual TlbEntry::DomainType domain() const$/;"	f	class:ArmISA::TableWalker::L2Descriptor
domainFaults	./arch/arm/tlb.hh	/^    mutable Stats::Scalar domainFaults;$/;"	m	class:ArmISA::TLB
domainID	./dev/arm/energy_ctrl.hh	/^    uint32_t domainID;$/;"	m	class:EnergyCtrl
domainID	./sim/clock_domain.hh	/^    uint32_t domainID() const { return _domainID; }$/;"	f	class:SrcClockDomain
domainID	./sim/dvfs_handler.cc	/^DVFSHandler::domainID(uint32_t index) const$/;"	f	class:DVFSHandler
domainIDIndexToRead	./dev/arm/energy_ctrl.hh	/^    uint32_t domainIDIndexToRead;$/;"	m	class:EnergyCtrl
domainIDList	./sim/dvfs_handler.hh	/^    std::vector<DomainID> domainIDList;$/;"	m	class:DVFSHandler
domainIDToSet	./sim/dvfs_handler.hh	/^        DomainID domainIDToSet;$/;"	m	struct:DVFSHandler::UpdateEvent
domain_id	./sim/ClockDomain.py	/^    domain_id = Param.Int32(-1, "domain id")$/;"	v	class:SrcClockDomain
domains	./sim/DVFSHandler.py	/^    domains = VectorParam.SrcClockDomain([], "list of domains")$/;"	v	class:DVFSHandler
domains	./sim/dvfs_handler.hh	/^    Domains domains;$/;"	m	class:DVFSHandler
domatch	./base/match.cc	/^ObjectMatch::domatch(const string &name) const$/;"	f	class:ObjectMatch
done	./base/chunk_generator.hh	/^    bool done() const { return (curSize == 0); }$/;"	f	class:ChunkGenerator
done	./dev/arm/ufs_device.hh	/^        bool done;$/;"	m	struct:UFSHostDevice::taskStart
done	./dev/arm/ufs_device.hh	/^        uint32_t done;$/;"	m	struct:UFSHostDevice::SCSIResumeInfo
done	./dev/arm/ufs_device.hh	/^        uint32_t done;$/;"	m	struct:UFSHostDevice::transferStart
done	./dev/dma_device.hh	/^        bool done() const { return _done; }$/;"	f	class:DmaReadFifo::DmaDoneEvent
doneEACalc	./cpu/base_dyn_inst.hh	/^    bool doneEACalc() { return instFlags[EACalcDone]; }$/;"	f	class:BaseDynInst
doneEvent	./dev/net/dist_etherlink.hh	/^        DoneEvent doneEvent;$/;"	m	class:DistEtherLink::TxLink
doneEvent	./dev/net/dist_etherlink.hh	/^        const DoneEvent *doneEvent() const { return &_doneEvent; }$/;"	f	class:DistEtherLink::RxLink
doneEvent	./dev/net/etherlink.hh	/^        DoneEvent doneEvent;$/;"	m	class:EtherLink::Link
doneSeqNum	./cpu/o3/comm.hh	/^        InstSeqNum doneSeqNum; \/\/ *F, I$/;"	m	struct:TimeBufStruct::commitComm
doneSeqNum	./cpu/o3/comm.hh	/^        InstSeqNum doneSeqNum;$/;"	m	struct:TimeBufStruct::decodeComm
doneSquashing	./cpu/o3/rob.hh	/^    bool doneSquashing[Impl::MaxThreads];$/;"	m	class:ROB
doneTargCalc	./cpu/base_dyn_inst.hh	/^    bool doneTargCalc() { return false; }$/;"	f	class:BaseDynInst
dot_add_edge	./python/m5/util/dot_writer.py	/^def dot_add_edge(simNode, callgraph, full_port_name, peerPort):$/;"	f
dot_create_cluster	./python/m5/util/dot_writer.py	/^def dot_create_cluster(simNode, full_path, label):$/;"	f
dot_create_edges	./python/m5/util/dot_writer.py	/^def dot_create_edges(simNode, callgraph):$/;"	f
dot_create_node	./python/m5/util/dot_writer.py	/^def dot_create_node(simNode, full_path, label):$/;"	f
dot_create_nodes	./python/m5/util/dot_writer.py	/^def dot_create_nodes(simNode, callgraph):$/;"	f
dot_gen_colour	./python/m5/util/dot_writer.py	/^def dot_gen_colour(simNode, isPort = False):$/;"	f
dot_rgb_to_html	./python/m5/util/dot_writer.py	/^def dot_rgb_to_html(r, g, b):$/;"	f
doubleBinSize	./mem/ruby/common/Histogram.cc	/^Histogram::doubleBinSize()$/;"	f	class:Histogram
doublePrecision	./arch/arm/miscregs.hh	/^        Bitfield<11, 8> doublePrecision;$/;"	m	namespace:ArmISA
double_braced	./mem/slicc/generate/tex.py	/^    double_braced = "<<>>"$/;"	v	class:tex_formatter
double_braced	./python/m5/util/code_formatter.py	/^    double_braced = r'{{}}'$/;"	v	class:code_formatter
downCounter	./sim/sim_events.hh	/^    int &downCounter;   \/\/ decrement & terminate if zero$/;"	m	class:CountedExitEvent
down_flag	./base/vnc/vncinput.hh	/^        uint8_t down_flag;$/;"	m	struct:VncInput::KeyEventMessage
downgrade	./mem/ruby/profiler/StoreTrace.cc	/^StoreTrace::downgrade(NodeID node)$/;"	f	class:StoreTrace
downstreamPending	./mem/cache/mshr.hh	/^    bool downstreamPending;$/;"	m	class:MSHR
doze	./arch/mips/dt_constants.hh	/^    Bitfield<27>     doze;$/;"	m	namespace:MipsISA
dp	./arch/arm/pmu.hh	/^        Bitfield<5> dp;$/;"	m	class:ArmISA::PMU
dp_regs	./dev/net/ns_gige.hh	/^struct dp_regs {$/;"	s
dp_rom	./dev/net/ns_gige.hh	/^struct dp_rom {$/;"	s
dpd	./arch/x86/regs/misc.hh	/^        Bitfield<0> dpd;$/;"	m	namespace:X86ISA
dpl	./arch/x86/regs/misc.hh	/^        Bitfield<1, 0> dpl;$/;"	m	namespace:X86ISA
dpl	./arch/x86/regs/misc.hh	/^        Bitfield<46, 45> dpl; \/\/ Descriptor Privilege-Level$/;"	m	namespace:X86ISA
dport	./base/inet.hh	/^    uint16_t dport() const { return ntohs(th_dport); }$/;"	f	struct:Net::TcpHdr
dport	./base/inet.hh	/^    uint16_t dport() const { return ntohs(uh_dport); }$/;"	f	struct:Net::UdpHdr
dprintf	./arch/alpha/stacktrace.hh	/^    void dprintf() { if (DTRACE(Stack)) dump(); }$/;"	f	class:AlphaISA::StackTrace
dprintf	./arch/alpha/stacktrace.hh	/^    void dprintf() {}$/;"	f	class:AlphaISA::StackTrace
dprintf	./arch/arm/stacktrace.hh	/^    void dprintf() { if (DTRACE(Stack)) dump(); }$/;"	f	class:ArmISA::StackTrace
dprintf	./arch/arm/stacktrace.hh	/^    void dprintf() {}$/;"	f	class:ArmISA::StackTrace
dprintf	./arch/mips/stacktrace.hh	/^    void dprintf() { if (DTRACE(Stack)) dump(); }$/;"	f	class:MipsISA::StackTrace
dprintf	./arch/mips/stacktrace.hh	/^    void dprintf() {}$/;"	f	class:MipsISA::StackTrace
dprintf	./arch/power/stacktrace.hh	/^    dprintf()$/;"	f	class:PowerISA::StackTrace
dprintf	./arch/sparc/stacktrace.hh	/^    void dprintf() {}$/;"	f	class:SparcISA::StackTrace
dprintf	./arch/x86/stacktrace.hh	/^        void dprintf() { if (DTRACE(Stack)) dump(); }$/;"	f	class:X86ISA::StackTrace
dprintf	./arch/x86/stacktrace.hh	/^        void dprintf() {}$/;"	f	class:X86ISA::StackTrace
dprintf	./base/trace.hh	/^    void dprintf(Tick when, const std::string &name, const char *fmt,$/;"	f	class:Trace::Logger
dq	./arch/mips/dt_constants.hh	/^    Bitfield<2> dq;$/;"	m	namespace:MipsISA
drain	./arch/arm/table_walker.cc	/^TableWalker::drain()$/;"	f	class:TableWalker
drain	./cpu/kvm/base.cc	/^BaseKvmCPU::drain()$/;"	f	class:BaseKvmCPU
drain	./cpu/minor/cpu.cc	/^MinorCPU::drain()$/;"	f	class:MinorCPU
drain	./cpu/minor/execute.cc	/^Execute::drain()$/;"	f	class:Minor::Execute
drain	./cpu/minor/pipeline.cc	/^Pipeline::drain()$/;"	f	class:Minor::Pipeline
drain	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::drain()$/;"	f	class:DefaultCommit
drain	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::drain()$/;"	f	class:FullO3CPU
drain	./cpu/o3/fetch.hh	/^        bool drain;$/;"	m	struct:DefaultFetch::Stalls
drain	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::drain()$/;"	f	class:AtomicSimpleCPU
drain	./cpu/simple/timing.cc	/^TimingSimpleCPU::drain()$/;"	f	class:TimingSimpleCPU
drain	./cpu/testers/traffic_gen/traffic_gen.cc	/^TrafficGen::drain()$/;"	f	class:TrafficGen
drain	./dev/arm/flash_device.cc	/^FlashDevice::drain()$/;"	f	class:FlashDevice
drain	./dev/arm/ufs_device.cc	/^UFSHostDevice::drain()$/;"	f	class:UFSHostDevice
drain	./dev/dma_device.cc	/^DmaPort::drain()$/;"	f	class:DmaPort
drain	./dev/dma_device.cc	/^DmaReadFifo::drain()$/;"	f	class:DmaReadFifo
drain	./dev/net/dist_iface.cc	/^DistIface::drain()$/;"	f	class:DistIface
drain	./dev/net/i8254xGBe.cc	/^IGbE::drain()$/;"	f	class:IGbE
drain	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::drain()$/;"	f	class:CopyEngine::CopyEngineChannel
drain	./dev/pixelpump.cc	/^BasePixelPump::PixelEvent::drain()$/;"	f	class:BasePixelPump::PixelEvent
drain	./mem/cache/mshr_queue.cc	/^MSHRQueue::drain()$/;"	f	class:MSHRQueue
drain	./mem/dram_ctrl.cc	/^DRAMCtrl::drain()$/;"	f	class:DRAMCtrl
drain	./mem/dramsim2.cc	/^DRAMSim2::drain()$/;"	f	class:DRAMSim2
drain	./mem/packet_queue.cc	/^PacketQueue::drain()$/;"	f	class:PacketQueue
drain	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::drain()$/;"	f	class:RubyMemoryControl
drain	./mem/ruby/system/DMASequencer.cc	/^DMASequencer::drain()$/;"	f	class:DMASequencer
drain	./mem/ruby/system/RubyPort.cc	/^RubyPort::drain()$/;"	f	class:RubyPort
drain	./mem/simple_mem.cc	/^SimpleMemory::drain()$/;"	f	class:SimpleMemory
drain	./mem/xbar.cc	/^BaseXBar::Layer<SrcType,DstType>::drain()$/;"	f	class:BaseXBar::Layer
drain	./python/m5/simulate.py	/^def drain():$/;"	f
drain	./sim/cxx_manager.cc	/^CxxConfigManager::drain()$/;"	f	class:CxxConfigManager
drain	./sim/process.cc	/^Process::drain()$/;"	f	class:Process
drainComplete	./dev/net/dist_iface.cc	/^DistIface::Sync::drainComplete()$/;"	f	class:DistIface::Sync
drainImminent	./cpu/o3/commit.hh	/^    bool drainImminent;$/;"	m	class:DefaultCommit
drainPending	./cpu/o3/commit.hh	/^    bool drainPending;$/;"	m	class:DefaultCommit
drainResume	./arch/arm/pmu.cc	/^PMU::drainResume()$/;"	f	class:ArmISA::PMU
drainResume	./arch/arm/table_walker.cc	/^TableWalker::drainResume()$/;"	f	class:TableWalker
drainResume	./arch/arm/tlb.cc	/^TLB::drainResume()$/;"	f	class:TLB
drainResume	./cpu/kvm/base.cc	/^BaseKvmCPU::drainResume()$/;"	f	class:BaseKvmCPU
drainResume	./cpu/minor/cpu.cc	/^MinorCPU::drainResume()$/;"	f	class:MinorCPU
drainResume	./cpu/minor/execute.cc	/^Execute::drainResume()$/;"	f	class:Minor::Execute
drainResume	./cpu/minor/pipeline.cc	/^Pipeline::drainResume()$/;"	f	class:Minor::Pipeline
drainResume	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::drainResume()$/;"	f	class:DefaultCommit
drainResume	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::drainResume()$/;"	f	class:FullO3CPU
drainResume	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::drainResume()$/;"	f	class:DefaultFetch
drainResume	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::drainResume()$/;"	f	class:AtomicSimpleCPU
drainResume	./cpu/simple/timing.cc	/^TimingSimpleCPU::drainResume()$/;"	f	class:TimingSimpleCPU
drainResume	./dev/arm/hdlcd.cc	/^HDLcd::drainResume()$/;"	f	class:HDLcd
drainResume	./dev/net/dist_iface.cc	/^DistIface::drainResume() {$/;"	f	class:DistIface
drainResume	./dev/net/i8254xGBe.cc	/^IGbE::drainResume()$/;"	f	class:IGbE
drainResume	./dev/net/ns_gige.cc	/^NSGigE::drainResume()$/;"	f	class:NSGigE
drainResume	./dev/net/sinic.cc	/^Device::drainResume()$/;"	f	class:Sinic::Device
drainResume	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::drainResume()$/;"	f	class:CopyEngine::CopyEngineChannel
drainResume	./dev/pixelpump.cc	/^BasePixelPump::PixelEvent::drainResume()$/;"	f	class:BasePixelPump::PixelEvent
drainResume	./mem/dram_ctrl.cc	/^DRAMCtrl::drainResume()$/;"	f	class:DRAMCtrl
drainResume	./mem/ruby/system/RubySystem.cc	/^RubySystem::drainResume()$/;"	f	class:RubySystem
drainResume	./sim/cxx_manager.cc	/^CxxConfigManager::drainResume()$/;"	f	class:CxxConfigManager
drainResume	./sim/drain.hh	/^    virtual void drainResume() {};$/;"	f	class:Drainable
drainResume	./sim/system.cc	/^System::drainResume()$/;"	f	class:System
drainSanityCheck	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::drainSanityCheck() const$/;"	f	class:DefaultCommit
drainSanityCheck	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::drainSanityCheck() const$/;"	f	class:FullO3CPU
drainSanityCheck	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::drainSanityCheck() const$/;"	f	class:DefaultDecode
drainSanityCheck	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::drainSanityCheck() const$/;"	f	class:DefaultFetch
drainSanityCheck	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::drainSanityCheck() const$/;"	f	class:DefaultIEW
drainSanityCheck	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::drainSanityCheck() const$/;"	f	class:InstructionQueue
drainSanityCheck	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::drainSanityCheck() const$/;"	f	class:LSQ
drainSanityCheck	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::drainSanityCheck() const$/;"	f	class:LSQUnit
drainSanityCheck	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::drainSanityCheck() const$/;"	f	class:MemDepUnit
drainSanityCheck	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::drainSanityCheck() const$/;"	f	class:DefaultRename
drainSanityCheck	./cpu/o3/rob_impl.hh	/^ROB<Impl>::drainSanityCheck() const$/;"	f	class:ROB
drainSanityCheck	./cpu/pred/bpred_unit.cc	/^BPredUnit::drainSanityCheck() const$/;"	f	class:BPredUnit
drainStall	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::drainStall(ThreadID tid)$/;"	f	class:DefaultFetch
drainState	./cpu/minor/execute.hh	/^    DrainState drainState;$/;"	m	class:Minor::Execute
drainState	./sim/drain.hh	/^    DrainState drainState() const { return _drainState; }$/;"	f	class:Drainable
draina	./arch/alpha/osfpal.hh	/^        draina = 0x02,$/;"	e	enum:PAL::__anon50
drainableCount	./sim/drain.cc	/^DrainManager::drainableCount() const$/;"	f	class:DrainManager
draining	./dev/net/dist_iface.hh	/^        bool draining() const { return _draining; }$/;"	f	class:DistIface::SyncEvent
draining	./dev/net/dist_iface.hh	/^        void draining(bool fl) { _draining = fl; }$/;"	f	class:DistIface::SyncEvent
dramsim	./mem/dramsim2_wrapper.hh	/^    DRAMSim::MultiChannelMemorySystem* dramsim;$/;"	m	class:DRAMSim2Wrapper
drir	./dev/alpha/tsunami_cchip.hh	/^    uint64_t drir;$/;"	m	class:TsunamiCChip
drive	./dev/storage/ide_disk.hh	/^        uint8_t drive;$/;"	m	union:CommandReg::__anon15
driveID	./dev/storage/Ide.py	/^    driveID = Param.IdeID('master', "Drive ID")$/;"	v	class:IdeDisk
driveID	./dev/storage/ide_disk.hh	/^    struct ataparams driveID;$/;"	m	class:IdeDisk	typeref:struct:IdeDisk::ataparams
driveIrqEn	./dev/arm/gic_pl390.cc	/^Pl390::driveIrqEn( bool state)$/;"	f	class:Pl390
driveLegFIQ	./dev/arm/gic_pl390.cc	/^Pl390::driveLegFIQ(bool state)$/;"	f	class:Pl390
driveLegIRQ	./dev/arm/gic_pl390.cc	/^Pl390::driveLegIRQ(bool state)$/;"	f	class:Pl390
driveSPI	./dev/arm/gic_pl390.cc	/^Pl390::driveSPI(unsigned int spiVect)$/;"	f	class:Pl390
driver	./dev/virtio/base.hh	/^        Bitfield<1> driver;$/;"	m	class:VirtIODeviceBase
driver	./sim/fd_entry.hh	/^    EmulatedDriver *driver;$/;"	m	class:FDEntry
driverInitialized	./dev/arm/kmi.hh	/^    bool driverInitialized;$/;"	m	class:Pl050
driver_ok	./dev/virtio/base.hh	/^        Bitfield<2> driver_ok;$/;"	m	class:VirtIODeviceBase
drivers	./sim/Process.py	/^    drivers = VectorParam.EmulatedDriver([], 'Available emulated drivers')$/;"	v	class:LiveProcess
drivers	./sim/process.hh	/^    std::vector<EmulatedDriver *> drivers;$/;"	m	class:LiveProcess
droppedPackets	./dev/net/etherdevice.hh	/^    Stats::Scalar droppedPackets;$/;"	m	class:EtherDevice
drqBytesLeft	./dev/storage/ide_disk.hh	/^    uint32_t drqBytesLeft;$/;"	m	class:IdeDisk
ds	./arch/mips/pra_constants.hh	/^    Bitfield<15, 13> ds;$/;"	m	namespace:MipsISA
ds	./arch/x86/remote_gdb.hh	/^          uint32_t ds;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
ds	./arch/x86/remote_gdb.hh	/^          uint32_t ds;$/;"	m	struct:X86ISA::RemoteGDB::X86GdbRegCache::__anon57
ds0	./arch/arm/miscregs.hh	/^       Bitfield<16> ds0;$/;"	m	namespace:ArmISA
ds1	./arch/arm/miscregs.hh	/^       Bitfield<17> ds1;$/;"	m	namespace:ArmISA
dse	./dev/mc146818.hh	/^        Bitfield<0> dse;       \/\/\/ USA Daylight Savings Time enable$/;"	m	class:MC146818
dsize	./arch/alpha/aout_machdep.h	/^    uint64_t    dsize;          \/\/\/< data segment size$/;"	m	struct:aout_exechdr
dsize	./base/loader/exec_ecoff.h	/^        coff_ulong  dsize;$/;"	m	struct:ecoff_aouthdr
dspAbs	./arch/mips/dsp.cc	/^MipsISA::dspAbs(int32_t a, int32_t fmt, uint32_t *dspctl)$/;"	f	class:MipsISA
dspAdd	./arch/mips/dsp.cc	/^MipsISA::dspAdd(int32_t a, int32_t b, int32_t fmt, int32_t saturate,$/;"	f	class:MipsISA
dspAddh	./arch/mips/dsp.cc	/^MipsISA::dspAddh(int32_t a, int32_t b, int32_t fmt, int32_t round,$/;"	f	class:MipsISA
dspCmp	./arch/mips/dsp.cc	/^MipsISA::dspCmp(int32_t a, int32_t b, int32_t fmt, int32_t sign, int32_t op,$/;"	f	class:MipsISA
dspCmpg	./arch/mips/dsp.cc	/^MipsISA::dspCmpg(int32_t a, int32_t b, int32_t fmt, int32_t sign, int32_t op)$/;"	f	class:MipsISA
dspCmpgd	./arch/mips/dsp.cc	/^MipsISA::dspCmpgd(int32_t a, int32_t b, int32_t fmt, int32_t sign, int32_t op,$/;"	f	class:MipsISA
dspDpa	./arch/mips/dsp.cc	/^MipsISA::dspDpa(int64_t dspac, int32_t a, int32_t b, int32_t ac,$/;"	f	class:MipsISA
dspDpaq	./arch/mips/dsp.cc	/^MipsISA::dspDpaq(int64_t dspac, int32_t a, int32_t b, int32_t ac,$/;"	f	class:MipsISA
dspDps	./arch/mips/dsp.cc	/^MipsISA::dspDps(int64_t dspac, int32_t a, int32_t b, int32_t ac,$/;"	f	class:MipsISA
dspDpsq	./arch/mips/dsp.cc	/^MipsISA::dspDpsq(int64_t dspac, int32_t a, int32_t b, int32_t ac,$/;"	f	class:MipsISA
dspExtp	./arch/mips/dsp.cc	/^MipsISA::dspExtp(int64_t dspac, int32_t size, uint32_t *dspctl)$/;"	f	class:MipsISA
dspExtpd	./arch/mips/dsp.cc	/^MipsISA::dspExtpd(int64_t dspac, int32_t size, uint32_t *dspctl)$/;"	f	class:MipsISA
dspExtr	./arch/mips/dsp.cc	/^MipsISA::dspExtr(int64_t dspac, int32_t fmt, int32_t sa, int32_t round,$/;"	f	class:MipsISA
dspMaq	./arch/mips/dsp.cc	/^MipsISA::dspMaq(int64_t dspac, int32_t a, int32_t b, int32_t ac,$/;"	f	class:MipsISA
dspMul	./arch/mips/dsp.cc	/^MipsISA::dspMul(int32_t a, int32_t b, int32_t fmt, int32_t saturate,$/;"	f	class:MipsISA
dspMuleq	./arch/mips/dsp.cc	/^MipsISA::dspMuleq(int32_t a, int32_t b, int32_t mode, uint32_t *dspctl)$/;"	f	class:MipsISA
dspMuleu	./arch/mips/dsp.cc	/^MipsISA::dspMuleu(int32_t a, int32_t b, int32_t mode, uint32_t *dspctl)$/;"	f	class:MipsISA
dspMulq	./arch/mips/dsp.cc	/^MipsISA::dspMulq(int32_t a, int32_t b, int32_t fmt, int32_t saturate,$/;"	f	class:MipsISA
dspMulsa	./arch/mips/dsp.cc	/^MipsISA::dspMulsa(int64_t dspac, int32_t a, int32_t b, int32_t ac, int32_t fmt)$/;"	f	class:MipsISA
dspMulsaq	./arch/mips/dsp.cc	/^MipsISA::dspMulsaq(int64_t dspac, int32_t a, int32_t b, int32_t ac,$/;"	f	class:MipsISA
dspPack	./arch/mips/dsp.cc	/^MipsISA::dspPack(int32_t a, int32_t b, int32_t fmt)$/;"	f	class:MipsISA
dspPick	./arch/mips/dsp.cc	/^MipsISA::dspPick(int32_t a, int32_t b, int32_t fmt, uint32_t *dspctl)$/;"	f	class:MipsISA
dspPrece	./arch/mips/dsp.cc	/^MipsISA::dspPrece(int32_t a, int32_t infmt, int32_t insign, int32_t outfmt,$/;"	f	class:MipsISA
dspPrecrSra	./arch/mips/dsp.cc	/^MipsISA::dspPrecrSra(int32_t a, int32_t b, int32_t sa, int32_t fmt,$/;"	f	class:MipsISA
dspPrecrq	./arch/mips/dsp.cc	/^MipsISA::dspPrecrq(int32_t a, int32_t b, int32_t fmt, uint32_t *dspctl)$/;"	f	class:MipsISA
dspPrecrqu	./arch/mips/dsp.cc	/^MipsISA::dspPrecrqu(int32_t a, int32_t b, uint32_t *dspctl)$/;"	f	class:MipsISA
dspSaturate	./arch/mips/dsp.cc	/^MipsISA::dspSaturate(uint64_t value, int32_t fmt, int32_t sign,$/;"	f	class:MipsISA
dspShll	./arch/mips/dsp.cc	/^MipsISA::dspShll(int32_t a, uint32_t sa, int32_t fmt, int32_t saturate,$/;"	f	class:MipsISA
dspShra	./arch/mips/dsp.cc	/^MipsISA::dspShra(int32_t a, uint32_t sa, int32_t fmt, int32_t round,$/;"	f	class:MipsISA
dspShrl	./arch/mips/dsp.cc	/^MipsISA::dspShrl(int32_t a, uint32_t sa, int32_t fmt, int32_t sign)$/;"	f	class:MipsISA
dspSub	./arch/mips/dsp.cc	/^MipsISA::dspSub(int32_t a, int32_t b, int32_t fmt, int32_t saturate,$/;"	f	class:MipsISA
dspSubh	./arch/mips/dsp.cc	/^MipsISA::dspSubh(int32_t a, int32_t b, int32_t fmt, int32_t round,$/;"	f	class:MipsISA
dspp	./arch/mips/pra_constants.hh	/^    Bitfield<10> dspp;$/;"	m	namespace:MipsISA
dss	./arch/mips/dt_constants.hh	/^    Bitfield<0>      dss;$/;"	m	namespace:MipsISA
dst	./base/inet.hh	/^    const EthAddr &dst() const { return *(EthAddr *)&eth_dst; }$/;"	f	struct:Net::EthHdr
dst	./base/inet.hh	/^    const uint8_t* dst() const { return ip6_dst.data; }$/;"	f	struct:Net::Ip6Hdr
dst	./base/inet.hh	/^    uint32_t dst() const { return ntohl(ip_dst); }$/;"	f	struct:Net::IpHdr
dstOptAddr	./base/inet.hh	/^    const uint8_t* dstOptAddr() const { return ext_data.dstOpts.addr.data; }$/;"	f	struct:Net::Ip6Opt
dstOptExt	./base/inet.hh	/^    const Ip6Opt* dstOptExt() const { return getExt(IP_PROTO_DSTOPTS); }$/;"	f	struct:Net::Ip6Hdr
dstOptLength	./base/inet.hh	/^    uint8_t dstOptLength() const { return ext_data.dstOpts.length; }$/;"	f	struct:Net::Ip6Opt
dstOptType	./base/inet.hh	/^    uint8_t dstOptType() const { return ext_data.dstOpts.type; }$/;"	f	struct:Net::Ip6Opt
dstOpts	./base/inet.hh	/^        struct ip6_opt_dstopts dstOpts;$/;"	m	union:Net::ip6_opt_hdr::__anon120	typeref:struct:Net::ip6_opt_hdr::__anon120::ip6_opt_dstopts
dt	./arch/mips/mt_constants.hh	/^    Bitfield<20>     dt;$/;"	m	namespace:MipsISA
dtb	./cpu/checker/cpu.hh	/^    TheISA::TLB *dtb;$/;"	m	class:CheckerCPU
dtb	./cpu/o3/cpu.hh	/^    TheISA::TLB * dtb;$/;"	m	class:FullO3CPU
dtb	./cpu/simple_thread.hh	/^    TheISA::TLB *dtb;$/;"	m	class:SimpleThread
dtb_filename	./arch/arm/ArmSystem.py	/^    dtb_filename = Param.String("",$/;"	v	class:GenericArmSystem
dummy	./arch/power/isa.hh	/^    MiscReg dummy;$/;"	m	class:PowerISA::ISA
dummy	./arch/x86/decoder.cc	/^Decoder::InstBytes Decoder::dummy;$/;"	m	class:X86ISA::Decoder	file:
dummy	./arch/x86/decoder.hh	/^    static InstBytes dummy;$/;"	m	class:X86ISA::Decoder
dummy	./base/framebuffer.hh	/^    static const FrameBuffer dummy;$/;"	m	class:FrameBuffer
dummy	./kern/tru64/tru64.hh	/^        uint64_t dummy[10]; \/\/ was union mount_info mount_info;$/;"	m	struct:Tru64::F64_statfs
dummy	./kern/tru64/tru64.hh	/^        uint64_t dummy[10]; \/\/ was union mount_info mount_info;$/;"	m	struct:Tru64::pre_F64_statfs
dummyDevice	./arch/arm/isa.hh	/^        DummyISADevice dummyDevice;$/;"	m	class:ArmISA::ISA
dummyInst	./cpu/o3/rob.hh	/^    DynInstPtr dummyInst;$/;"	m	class:ROB
dump	./arch/alpha/stacktrace.cc	/^StackTrace::dump()$/;"	f	class:AlphaISA::StackTrace
dump	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::dump()$/;"	f	class:ArmKvmCPU
dump	./arch/arm/kvm/armv8_cpu.cc	/^ArmV8KvmCPU::dump() const$/;"	f	class:ArmV8KvmCPU
dump	./arch/arm/stacktrace.cc	/^    StackTrace::dump()$/;"	f	class:ArmISA::StackTrace
dump	./arch/mips/stacktrace.cc	/^StackTrace::dump()$/;"	f	class:StackTrace
dump	./arch/power/stacktrace.cc	/^StackTrace::dump()$/;"	f	class:PowerISA::StackTrace
dump	./arch/x86/stacktrace.cc	/^    StackTrace::dump()$/;"	f	class:X86ISA::StackTrace
dump	./base/cp_annotate.cc	/^CPA::dump(bool all)$/;"	f	class:CPA
dump	./base/cp_annotate.hh	/^        bool dump;$/;"	m	struct:CPA::AnnotateData
dump	./base/inifile.cc	/^IniFile::Section::dump(const string &sectionName)$/;"	f	class:IniFile::Section
dump	./base/inifile.cc	/^IniFile::dump()$/;"	f	class:IniFile
dump	./base/statistics.cc	/^dump()$/;"	f	namespace:Stats
dump	./base/trace.cc	/^Logger::dump(Tick when, const std::string &name, const void *d, int len)$/;"	f	class:Trace::Logger
dump	./base/trie.hh	/^        dump(int level)$/;"	f	struct:Trie::Node
dump	./base/trie.hh	/^    dump(const char *title)$/;"	f	class:Trie
dump	./cpu/activity.cc	/^ActivityRecorder::dump()$/;"	f	class:ActivityRecorder
dump	./cpu/base_dyn_inst_impl.hh	/^BaseDynInst<Impl>::dump()$/;"	f	class:BaseDynInst
dump	./cpu/base_dyn_inst_impl.hh	/^BaseDynInst<Impl>::dump(std::string &outstring)$/;"	f	class:BaseDynInst
dump	./cpu/exetrace.cc	/^Trace::ExeTracerRecord::dump()$/;"	f	class:Trace::Trace::ExeTracerRecord
dump	./cpu/inst_pb_trace.cc	/^InstPBTraceRecord::dump()$/;"	f	class:Trace::InstPBTraceRecord
dump	./cpu/inteltrace.cc	/^Trace::IntelTraceRecord::dump()$/;"	f	class:Trace::Trace::IntelTraceRecord
dump	./cpu/kvm/base.cc	/^BaseKvmCPU::dump() const$/;"	f	class:BaseKvmCPU
dump	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::dump() const$/;"	f	class:X86KvmCPU
dump	./cpu/nativetrace.cc	/^Trace::NativeTraceRecord::dump()$/;"	f	class:Trace::Trace::NativeTraceRecord
dump	./cpu/o3/dep_graph.hh	/^DependencyGraph<DynInstPtr>::dump()$/;"	f	class:DependencyGraph
dump	./cpu/o3/fu_pool.cc	/^FUPool::dump()$/;"	f	class:FUPool
dump	./cpu/o3/store_set.cc	/^StoreSet::dump()$/;"	f	class:StoreSet
dump	./cpu/pc_event.cc	/^PCEventQueue::dump() const$/;"	f	class:PCEventQueue
dump	./cpu/pred/bpred_unit.cc	/^BPredUnit::dump()$/;"	f	class:BPredUnit
dump	./cpu/profile.cc	/^FunctionProfile::dump(ThreadContext *tc, ostream &os) const$/;"	f	class:FunctionProfile
dump	./cpu/profile.cc	/^ProfileNode::dump(const string &symbol, uint64_t id, const SymbolTable *symtab,$/;"	f	class:ProfileNode
dump	./dev/net/Ethernet.py	/^    dump = Param.EtherDump(NULL, "dump object")$/;"	v	class:DistEtherLink
dump	./dev/net/Ethernet.py	/^    dump = Param.EtherDump(NULL, "dump object")$/;"	v	class:EtherBus
dump	./dev/net/Ethernet.py	/^    dump = Param.EtherDump(NULL, "dump object")$/;"	v	class:EtherLink
dump	./dev/net/Ethernet.py	/^    dump = Param.EtherDump(NULL, "dump object")$/;"	v	class:EtherTap
dump	./dev/net/dist_etherlink.hh	/^        EtherDump *dump;$/;"	m	class:DistEtherLink::Link
dump	./dev/net/etherbus.hh	/^    EtherDump *dump;$/;"	m	class:EtherBus
dump	./dev/net/etherdump.hh	/^    inline void dump(EthPacketPtr &pkt) { dumpPacket(pkt); }$/;"	f	class:EtherDump
dump	./dev/net/etherlink.hh	/^        EtherDump *const dump;$/;"	m	class:EtherLink::Link
dump	./dev/net/ethertap.hh	/^    EtherDump *dump;$/;"	m	class:EtherTap
dump	./dev/virtio/base.cc	/^VirtDescriptor::dump() const$/;"	f	class:VirtDescriptor
dump	./dev/virtio/base.cc	/^VirtQueue::dump() const$/;"	f	class:VirtQueue
dump	./python/m5/stats/__init__.py	/^def dump():$/;"	f
dump	./sim/eventq.cc	/^Event::dump() const$/;"	f	class:Event
dump	./sim/eventq.cc	/^EventQueue::dump() const$/;"	f	class:EventQueue
dump	./sim/stat_control.cc	/^    bool dump;$/;"	m	class:Stats::StatEvent	file:
dumpAll	./arch/sparc/tlb.cc	/^TLB::dumpAll()$/;"	f	class:SparcISA::TLB
dumpAllInput	./cpu/minor/fetch2.cc	/^Fetch2::dumpAllInput()$/;"	f	class:Minor::Fetch2
dumpAndExit	./cpu/checker/cpu.cc	/^CheckerCPU::dumpAndExit()$/;"	f	class:CheckerCPU
dumpAndExit	./cpu/checker/cpu_impl.hh	/^Checker<Impl>::dumpAndExit(DynInstPtr &inst)$/;"	f	class:Checker
dumpChain	./dev/virtio/base.cc	/^VirtDescriptor::dumpChain() const$/;"	f	class:VirtDescriptor
dumpDebugFlags	./base/debug.cc	/^dumpDebugFlags()$/;"	f
dumpDebugRegs	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::dumpDebugRegs() const$/;"	f	class:X86KvmCPU
dumpEvent	./sim/stat_control.cc	/^GlobalEvent *dumpEvent;$/;"	m	namespace:Stats	file:
dumpFpuCommon	./cpu/kvm/x86_cpu.cc	/^dumpFpuCommon(const T &fpu)$/;"	f	file:
dumpFpuRegs	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::dumpFpuRegs() const$/;"	f	class:X86KvmCPU
dumpFpuSpec	./cpu/kvm/x86_cpu.cc	/^dumpFpuSpec(const struct FXSave &xs)$/;"	f	file:
dumpFpuSpec	./cpu/kvm/x86_cpu.cc	/^dumpFpuSpec(const struct kvm_fpu &fpu)$/;"	f	file:
dumpFuncProfile	./cpu/checker/thread_context.hh	/^    void dumpFuncProfile() { actualTC->dumpFuncProfile(); }$/;"	f	class:CheckerThreadContext
dumpFuncProfile	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::dumpFuncProfile()$/;"	f	class:O3ThreadContext
dumpFuncProfile	./cpu/o3/thread_state.hh	/^    void dumpFuncProfile()$/;"	f	struct:O3ThreadState
dumpFuncProfile	./cpu/simple_thread.cc	/^SimpleThread::dumpFuncProfile()$/;"	f	class:SimpleThread
dumpFuncProfile	./cpu/thread_context.hh	/^    void dumpFuncProfile() { actualTC->dumpFuncProfile(); }$/;"	f	class:ProxyThreadContext
dumpHandler	./base/statistics.cc	/^Handler dumpHandler = NULL;$/;"	m	namespace:Stats	file:
dumpHistory	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::dumpHistory()$/;"	f	class:DefaultRename
dumpInsts	./cpu/checker/cpu_impl.hh	/^Checker<Impl>::dumpInsts()$/;"	f	class:Checker
dumpInsts	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::dumpInsts()$/;"	f	class:FullO3CPU
dumpInsts	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::dumpInsts()$/;"	f	class:InstructionQueue
dumpInsts	./cpu/o3/lsq.hh	/^    void dumpInsts(ThreadID tid) const$/;"	f	class:LSQ
dumpInsts	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::dumpInsts() const$/;"	f	class:LSQ
dumpInsts	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::dumpInsts() const$/;"	f	class:LSQUnit
dumpIntRegs	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::dumpIntRegs() const$/;"	f	class:X86KvmCPU
dumpKey	./base/cp_annotate.cc	/^CPA::dumpKey()$/;"	f	class:CPA
dumpKvm	./cpu/kvm/x86_cpu.cc	/^dumpKvm(const char *reg_name, const struct kvm_dtable &dtable)$/;"	f	file:
dumpKvm	./cpu/kvm/x86_cpu.cc	/^dumpKvm(const char *reg_name, const struct kvm_segment &seg)$/;"	f	file:
dumpKvm	./cpu/kvm/x86_cpu.cc	/^dumpKvm(const struct kvm_debugregs &regs)$/;"	f	file:
dumpKvm	./cpu/kvm/x86_cpu.cc	/^dumpKvm(const struct kvm_fpu &fpu)$/;"	f	file:
dumpKvm	./cpu/kvm/x86_cpu.cc	/^dumpKvm(const struct kvm_msrs &msrs)$/;"	f	file:
dumpKvm	./cpu/kvm/x86_cpu.cc	/^dumpKvm(const struct kvm_regs &regs)$/;"	f	file:
dumpKvm	./cpu/kvm/x86_cpu.cc	/^dumpKvm(const struct kvm_sregs &sregs)$/;"	f	file:
dumpKvm	./cpu/kvm/x86_cpu.cc	/^dumpKvm(const struct kvm_vcpu_events &events)$/;"	f	file:
dumpKvm	./cpu/kvm/x86_cpu.cc	/^dumpKvm(const struct kvm_xcrs &regs)$/;"	f	file:
dumpKvm	./cpu/kvm/x86_cpu.cc	/^dumpKvm(const struct kvm_xsave &xsave)$/;"	f	file:
dumpKvmStateCoProc	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::dumpKvmStateCoProc(uint64_t id)$/;"	f	class:ArmKvmCPU
dumpKvmStateCore	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::dumpKvmStateCore()$/;"	f	class:ArmKvmCPU
dumpKvmStateMisc	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::dumpKvmStateMisc()$/;"	f	class:ArmKvmCPU
dumpKvmStateVFP	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::dumpKvmStateVFP(uint64_t id)$/;"	f	class:ArmKvmCPU
dumpLists	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::dumpLists()$/;"	f	class:InstructionQueue
dumpLists	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::dumpLists()$/;"	f	class:MemDepUnit
dumpMSRs	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::dumpMSRs() const$/;"	f	class:X86KvmCPU
dumpMainQueue	./sim/eventq.cc	/^dumpMainQueue()$/;"	f
dumpMbufEvent	./arch/alpha/tru64/system.hh	/^    DumpMbufEvent *dumpMbufEvent;$/;"	m	class:Tru64AlphaSystem
dumpMsg	./dev/virtio/fs9p.cc	/^VirtIO9PBase::dumpMsg(const P9MsgHeader &header, const uint8_t *data, size_t size)$/;"	f	class:VirtIO9PBase
dumpPacket	./dev/net/etherdump.cc	/^EtherDump::dumpPacket(EthPacketPtr &packet)$/;"	f	class:EtherDump
dumpQueue	./base/statistics.cc	/^CallbackQueue dumpQueue;$/;"	m	namespace:Stats	file:
dumpSNList	./cpu/base_dyn_inst_impl.hh	/^BaseDynInst<Impl>::dumpSNList()$/;"	f	class:BaseDynInst
dumpSettings	./dev/arm/hdlcd.cc	/^HDLcd::DmaEngine::dumpSettings()$/;"	f	class:HDLcd::DmaEngine
dumpSettings	./dev/arm/hdlcd.cc	/^HDLcd::PixelPump::dumpSettings()$/;"	f	class:HDLcd::PixelPump
dumpSpecRegs	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::dumpSpecRegs() const$/;"	f	class:X86KvmCPU
dumpStatsHandler	./sim/init_signals.cc	/^dumpStatsHandler(int sigtype)$/;"	f
dumpStatsPCEvent	./arch/arm/linux/system.hh	/^    DumpStatsPCEvent *dumpStatsPCEvent;$/;"	m	class:LinuxArmSystem
dumpStatsPCEventF	./arch/arm/freebsd/system.hh	/^    DumpStatsPCEventF *dumpStatsPCEventF;$/;"	m	class:FreebsdArmSystem
dumpTicks	./cpu/exetrace.cc	/^ExeTracerRecord::dumpTicks(ostream &outs)$/;"	f	class:Trace::ExeTracerRecord
dumpVCpuEvents	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::dumpVCpuEvents() const$/;"	f	class:X86KvmCPU
dumpXCRs	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::dumpXCRs() const$/;"	f	class:X86KvmCPU
dumpXSave	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::dumpXSave() const$/;"	f	class:X86KvmCPU
dumpresetstats	./sim/pseudo_inst.cc	/^dumpresetstats(ThreadContext *tc, Tick delay, Tick period)$/;"	f	namespace:PseudoInst
dumprstStatsHandler	./sim/init_signals.cc	/^dumprstStatsHandler(int sigtype)$/;"	f
dumpstats	./sim/pseudo_inst.cc	/^dumpstats(ThreadContext *tc, Tick delay, Tick period)$/;"	f	namespace:PseudoInst
dup	./kern/tru64/tru64_syscalls.hh	/^        dup = 41,$/;"	e	enum:SystemCalls::__anon102
dup2	./kern/tru64/tru64_syscalls.hh	/^        dup2 = 90,$/;"	e	enum:SystemCalls::__anon102
dupFunc	./sim/syscall_emul.cc	/^dupFunc(SyscallDesc *desc, int num, LiveProcess *process, ThreadContext *tc)$/;"	f
duration	./cpu/testers/traffic_gen/generators.hh	/^    const Tick duration;$/;"	m	class:BaseGen
dv	./dev/mc146818.hh	/^        Bitfield<6, 4> dv;  \/\/\/ Divider configuration$/;"	m	class:MC146818
dvfsHandler	./dev/arm/energy_ctrl.hh	/^    DVFSHandler *dvfsHandler;$/;"	m	class:EnergyCtrl
dvfsHandler	./sim/dvfs_handler.cc	/^DVFSHandler *DVFSHandler::UpdateEvent::dvfsHandler;$/;"	m	class:DVFSHandler::UpdateEvent	file:
dvfsHandler	./sim/dvfs_handler.hh	/^        static DVFSHandler *dvfsHandler;$/;"	m	struct:DVFSHandler::UpdateEvent
dvfs_handler	./dev/arm/EnergyCtrl.py	/^    dvfs_handler = Param.DVFSHandler(Parent.dvfs_handler, "DVFS handler")$/;"	v	class:EnergyCtrl
dvfs_handler	./sim/System.py	/^    dvfs_handler = DVFSHandler()$/;"	v
dynInstAddTracing	./cpu/minor/decode.cc	/^dynInstAddTracing(MinorDynInstPtr inst, StaticInstPtr static_inst,$/;"	f	namespace:Minor
dz	./arch/arm/miscregs.hh	/^        Bitfield<19>   dz;      \/\/ Divide by Zero fault enable$/;"	m	namespace:ArmISA
dzc	./arch/arm/miscregs.hh	/^        Bitfield<1> dzc;$/;"	m	namespace:ArmISA
dze	./arch/arm/miscregs.hh	/^        Bitfield<14>   dze;     \/\/ Enable EL0 access to DC ZVA$/;"	m	namespace:ArmISA
dze	./arch/arm/miscregs.hh	/^        Bitfield<9> dze;$/;"	m	namespace:ArmISA
e	./arch/arm/miscregs.hh	/^        Bitfield<9> e;$/;"	m	namespace:ArmISA
e	./arch/arm/pmu.hh	/^        Bitfield<0> e;$/;"	m	class:ArmISA::PMU
e	./arch/mips/dt_constants.hh	/^    Bitfield<24>     e;$/;"	m	namespace:MipsISA
e	./arch/mips/dt_constants.hh	/^    Bitfield<28>     e;$/;"	m	namespace:MipsISA
e	./arch/x86/regs/misc.hh	/^            Bitfield<42> e; \/\/ Expand-Down$/;"	m	namespace:X86ISA
e	./arch/x86/regs/misc.hh	/^        Bitfield<11> e; \/\/ MTRR enable$/;"	m	namespace:X86ISA
e	./arch/x86/regs/misc.hh	/^        Bitfield<18> e; \/\/ Edge detect$/;"	m	namespace:X86ISA
e0e	./arch/arm/miscregs.hh	/^        Bitfield<24>   e0e;     \/\/ Endianness of explicit data accesses at EL0$/;"	m	namespace:ArmISA
e820Table	./arch/x86/linux/system.hh	/^    X86ISA::E820Table * e820Table;$/;"	m	class:LinuxX86System
e820_table	./arch/x86/X86System.py	/^    e820_table = Param.X86E820Table($/;"	v	class:LinuxX86System
eSize	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, index;$/;"	m	class:ArmISA::VldSingleOp64
eSize	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, index;$/;"	m	class:ArmISA::VstSingleOp64
eSize	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, lane, step;$/;"	m	class:ArmISA::MicroNeonMixLaneOp64
eSize	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, numRegs, step;$/;"	m	class:ArmISA::MicroNeonMixOp64
eSize	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, numRegs;$/;"	m	class:ArmISA::VldMultOp64
eSize	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, numRegs;$/;"	m	class:ArmISA::VstMultOp64
eToF1	./cpu/minor/pipeline.hh	/^    Latch<BranchData> eToF1;$/;"	m	class:Minor::Pipeline
ea	./arch/arm/miscregs.hh	/^        Bitfield<3> ea;$/;"	m	namespace:ArmISA
ea	./cpu/minor/dyn_inst.hh	/^    Addr ea;$/;"	m	class:Minor::MinorDynInst
eaComp	./cpu/static_inst.hh	/^    virtual Fault eaComp(ExecContext *xc,$/;"	f	class:StaticInst
eaCompInst	./cpu/static_inst.hh	/^    StaticInstPtr &eaCompInst() const { return nullStaticInstPtr; }$/;"	f	class:StaticInst
eaCompPtr	./arch/power/insts/mem.hh	/^    const StaticInstPtr eaCompPtr;$/;"	m	class:PowerISA::MemOp
eaSrcsReady	./cpu/base_dyn_inst_impl.hh	/^BaseDynInst<Impl>::eaSrcsReady()$/;"	f	class:BaseDynInst
eae	./arch/arm/miscregs.hh	/^        Bitfield<31> eae;$/;"	m	namespace:ArmISA
early_kernel_symbols	./arch/arm/ArmSystem.py	/^    early_kernel_symbols = Param.Bool(False,$/;"	v	class:GenericArmSystem
eat_end_white	./base/str.hh	/^eat_end_white(std::string &s)$/;"	f
eat_lead_white	./base/str.hh	/^eat_lead_white(std::string &s)$/;"	f
eat_white	./base/str.hh	/^eat_white(std::string &s)$/;"	f
eax	./arch/x86/remote_gdb.hh	/^          uint32_t eax;$/;"	m	struct:X86ISA::RemoteGDB::X86GdbRegCache::__anon57
eb	./arch/mips/pra_constants.hh	/^    Bitfield<25>     eb;$/;"	m	namespace:MipsISA
ebp	./arch/x86/remote_gdb.hh	/^          uint32_t ebp;$/;"	m	struct:X86ISA::RemoteGDB::X86GdbRegCache::__anon57
ebx	./arch/x86/remote_gdb.hh	/^          uint32_t ebx;$/;"	m	struct:X86ISA::RemoteGDB::X86GdbRegCache::__anon57
ec	./arch/arm/faults.cc	/^DataAbort::ec(ThreadContext *tc) const$/;"	f	class:ArmISA::DataAbort
ec	./arch/arm/faults.cc	/^HypervisorTrap::ec(ThreadContext *tc) const$/;"	f	class:ArmISA::HypervisorTrap
ec	./arch/arm/faults.cc	/^PrefetchAbort::ec(ThreadContext *tc) const$/;"	f	class:ArmISA::PrefetchAbort
ec	./arch/arm/faults.cc	/^SecureMonitorCall::ec(ThreadContext *tc) const$/;"	f	class:ArmISA::SecureMonitorCall
ec	./arch/arm/faults.cc	/^SecureMonitorTrap::ec(ThreadContext *tc) const$/;"	f	class:ArmISA::SecureMonitorTrap
ec	./arch/arm/faults.cc	/^SupervisorCall::ec(ThreadContext *tc) const$/;"	f	class:ArmISA::SupervisorCall
ec	./arch/arm/faults.cc	/^SupervisorTrap::ec(ThreadContext *tc) const$/;"	f	class:ArmISA::SupervisorTrap
ec	./arch/arm/faults.cc	/^UndefinedInstruction::ec(ThreadContext *tc) const$/;"	f	class:ArmISA::UndefinedInstruction
ec	./arch/arm/faults.hh	/^        const ExceptionClass ec;$/;"	m	struct:ArmISA::ArmFault::FaultVals
ec	./arch/arm/faults.hh	/^    virtual ExceptionClass ec(ThreadContext *tc) const { return vals.ec; }$/;"	f	class:ArmISA::ArmFaultVals
ec	./arch/arm/miscregs.hh	/^        Bitfield<31, 26> ec;$/;"	m	namespace:ArmISA
ec	./arch/mips/pra_constants.hh	/^    Bitfield<30>     ec;$/;"	m	namespace:MipsISA
eccandParityEnable	./arch/arm/miscregs.hh	/^      Bitfield<21>    eccandParityEnable;$/;"	m	namespace:ArmISA
ecf	./arch/x86/regs/misc.hh	/^        Bitfield<3> ecf;$/;"	m	namespace:X86ISA
echo	./base/inet.hh	/^    uint32_t echo() const { return ntohl(opt_data.echo); }$/;"	f	struct:Net::TcpOpt
ecoff_aouthdr	./base/loader/exec_ecoff.h	/^struct ecoff_aouthdr {$/;"	s
ecoff_exechdr	./base/loader/exec_ecoff.h	/^struct ecoff_exechdr {$/;"	s
ecoff_extsym	./base/loader/coff_sym.h	/^typedef struct ecoff_extsym {$/;"	s
ecoff_fdr	./base/loader/coff_sym.h	/^typedef struct ecoff_fdr {$/;"	s
ecoff_filehdr	./base/loader/exec_ecoff.h	/^struct ecoff_filehdr {$/;"	s
ecoff_scnhdr	./base/loader/exec_ecoff.h	/^struct ecoff_scnhdr {		\/* needed for size info *\/$/;"	s
ecoff_sym	./base/loader/coff_sym.h	/^typedef struct ecoff_sym {$/;"	s
ecoff_symhdr	./base/loader/coff_sym.h	/^typedef struct ecoff_symhdr {$/;"	s
ecx	./arch/x86/remote_gdb.hh	/^          uint32_t ecx;$/;"	m	struct:X86ISA::RemoteGDB::X86GdbRegCache::__anon57
ed	./arch/mips/pra_constants.hh	/^    Bitfield<29>     ed;$/;"	m	namespace:MipsISA
edgeTriggered	./dev/x86/i8259.hh	/^    bool edgeTriggered;$/;"	m	class:X86ISA::I8259
edi	./arch/x86/remote_gdb.hh	/^          uint32_t edi;$/;"	m	struct:X86ISA::RemoteGDB::X86GdbRegCache::__anon57
edx	./arch/x86/remote_gdb.hh	/^          uint32_t edx;$/;"	m	struct:X86ISA::RemoteGDB::X86GdbRegCache::__anon57
ee	./arch/arm/miscregs.hh	/^        Bitfield<25>   ee;      \/\/ Exception Endianness$/;"	m	namespace:ArmISA
ee	./arch/mips/pra_constants.hh	/^    Bitfield<26>     ee;$/;"	m	namespace:MipsISA
eeAddr	./dev/net/i8254xGBe.hh	/^    uint8_t eeOpcode, eeAddr;$/;"	m	class:IGbE
eeAddrBits	./dev/net/i8254xGBe.hh	/^    int eeOpBits, eeAddrBits, eeDataBits;$/;"	m	class:IGbE
eeDataBits	./dev/net/i8254xGBe.hh	/^    int eeOpBits, eeAddrBits, eeDataBits;$/;"	m	class:IGbE
eeOpBits	./dev/net/i8254xGBe.hh	/^    int eeOpBits, eeAddrBits, eeDataBits;$/;"	m	class:IGbE
eeOpcode	./dev/net/i8254xGBe.hh	/^    uint8_t eeOpcode, eeAddr;$/;"	m	class:IGbE
eecd	./dev/net/i8254xGBe_defs.hh	/^    EECD eecd;$/;"	m	struct:iGbReg::Regs
eepromAddress	./dev/net/ns_gige.hh	/^    uint8_t eepromAddress;$/;"	m	class:NSGigE
eepromBitsToRx	./dev/net/ns_gige.hh	/^    uint8_t eepromBitsToRx;$/;"	m	class:NSGigE
eepromClk	./dev/net/ns_gige.hh	/^    bool eepromClk;$/;"	m	class:NSGigE
eepromData	./dev/net/ns_gige.hh	/^    uint16_t eepromData;$/;"	m	class:NSGigE
eepromGetAddress	./dev/net/ns_gige.hh	/^        eepromGetAddress,$/;"	e	enum:NSGigE::EEPROMState
eepromGetOpcode	./dev/net/ns_gige.hh	/^        eepromGetOpcode,$/;"	e	enum:NSGigE::EEPROMState
eepromKick	./dev/net/ns_gige.cc	/^NSGigE::eepromKick()$/;"	f	class:NSGigE
eepromOpcode	./dev/net/ns_gige.hh	/^    uint8_t eepromOpcode;$/;"	m	class:NSGigE
eepromRead	./dev/net/ns_gige.hh	/^        eepromRead$/;"	e	enum:NSGigE::EEPROMState
eepromStart	./dev/net/ns_gige.hh	/^        eepromStart,$/;"	e	enum:NSGigE::EEPROMState
eepromState	./dev/net/ns_gige.hh	/^    EEPROMState eepromState;$/;"	m	class:NSGigE
eerd	./dev/net/i8254xGBe_defs.hh	/^    EERD eerd;$/;"	m	struct:iGbReg::Regs
effAddr	./cpu/base_dyn_inst.hh	/^    Addr effAddr;$/;"	m	class:BaseDynInst
effAddrValid	./cpu/base_dyn_inst.hh	/^    bool effAddrValid() const { return instFlags[EffAddrValid]; }$/;"	f	class:BaseDynInst
effSize	./cpu/base_dyn_inst.hh	/^    uint8_t effSize;$/;"	m	class:BaseDynInst
eflags	./arch/x86/remote_gdb.hh	/^          uint32_t eflags;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
eflags	./arch/x86/remote_gdb.hh	/^          uint32_t eflags;$/;"	m	struct:X86ISA::RemoteGDB::X86GdbRegCache::__anon57
egid	./sim/Process.py	/^    egid = Param.Int(100, 'effective group id')$/;"	v	class:LiveProcess
egid	./sim/process.hh	/^    inline uint64_t egid() {return __egid;}$/;"	f	class:LiveProcess
eicss	./arch/mips/pra_constants.hh	/^    Bitfield<21, 18> eicss;$/;"	m	namespace:MipsISA
eip	./arch/x86/remote_gdb.hh	/^          uint32_t eip;$/;"	m	struct:X86ISA::RemoteGDB::X86GdbRegCache::__anon57
eipv	./arch/x86/regs/misc.hh	/^        Bitfield<1> eipv; \/\/ Error-IP valid$/;"	m	namespace:X86ISA
eisr	./dev/arm/vgic.hh	/^        uint64_t eisr;$/;"	m	struct:VGic::vcpuIntData
ejtagVer0	./arch/mips/dt_constants.hh	/^        Bitfield<15> ejtagVer0;$/;"	m	namespace:MipsISA
ejtagVer1	./arch/mips/dt_constants.hh	/^        Bitfield<16> ejtagVer1;$/;"	m	namespace:MipsISA
ejtagVer2	./arch/mips/dt_constants.hh	/^        Bitfield<17> ejtagVer2;$/;"	m	namespace:MipsISA
el	./arch/arm/miscregs.hh	/^        Bitfield<3, 2> el;      \/\/ AArch64$/;"	m	namespace:ArmISA
el	./arch/arm/pagetable.hh	/^    uint8_t el;$/;"	m	struct:ArmISA::TlbEntry
el	./arch/arm/table_walker.hh	/^        ExceptionLevel el;$/;"	m	class:ArmISA::TableWalker::WalkerState
el	./arch/arm/types.hh	/^        Bitfield<3, 2> el;$/;"	m	namespace:ArmISA
elasticReq	./cpu/testers/traffic_gen/traffic_gen.hh	/^    const bool elasticReq;$/;"	m	class:TrafficGen
elastic_req	./cpu/testers/traffic_gen/TrafficGen.py	/^    elastic_req = Param.Bool(False,$/;"	v	class:TrafficGen
elementAt	./mem/ruby/common/NetDest.cc	/^NetDest::elementAt(MachineID index)$/;"	f	class:NetDest
elementAt	./mem/ruby/common/Set.hh	/^    bool elementAt(int index) const { return bits[index]; }$/;"	f	class:Set
elementPtr	./cpu/minor/buffers.hh	/^    mutable ElemType *elementPtr;$/;"	m	class:Minor::InputBuffer
elpa	./arch/mips/pra_constants.hh	/^    Bitfield<29>     elpa;$/;"	m	namespace:MipsISA
em	./arch/x86/regs/misc.hh	/^        Bitfield<2> em; \/\/ Emulation$/;"	m	namespace:X86ISA
em	./mem/packet_queue.hh	/^    EventManager& em;$/;"	m	class:PacketQueue
em	./mem/ruby/common/Consumer.hh	/^    ClockedObject *em;$/;"	m	class:Consumer
embContFirmwareMajor	./arch/x86/bios/smbios.hh	/^    uint8_t embContFirmwareMajor;$/;"	m	class:X86ISA::SMBios::BiosInformation
embContFirmwareMinor	./arch/x86/bios/smbios.hh	/^    uint8_t embContFirmwareMinor;$/;"	m	class:X86ISA::SMBios::BiosInformation
emb_cont_firmware_major	./arch/x86/bios/SMBios.py	/^    emb_cont_firmware_major = Param.UInt8(0,$/;"	v	class:X86SMBiosBiosInformation
emb_cont_firmware_minor	./arch/x86/bios/SMBios.py	/^    emb_cont_firmware_minor = Param.UInt8(0,$/;"	v	class:X86SMBiosBiosInformation
embedError	./mem/slicc/ast/AST.py	/^    def embedError(self, message, *args):$/;"	m	class:AST
emi	./arch/arm/decoder.hh	/^    ExtMachInst emi;$/;"	m	class:ArmISA::Decoder
emi	./arch/mips/decoder.hh	/^    ExtMachInst emi;$/;"	m	class:MipsISA::Decoder
emi	./arch/power/decoder.hh	/^    ExtMachInst emi;$/;"	m	class:PowerISA::Decoder
emi	./arch/sparc/decoder.hh	/^    ExtMachInst emi;$/;"	m	class:SparcISA::Decoder
emi	./arch/x86/decoder.hh	/^    ExtMachInst emi;$/;"	m	class:X86ISA::Decoder
emit	./arch/isa_parser.py	/^    def emit(self):$/;"	m	class:GenCode
empty	./arch/sparc/tlb_map.hh	/^    empty()$/;"	f	class:SparcISA::TlbMap
empty	./base/addr_range_map.hh	/^    empty() const$/;"	f	class:AddrRangeMap
empty	./base/callback.hh	/^    bool empty() const { return callbacks.empty(); }$/;"	f	class:CallbackQueue
empty	./base/circlebuf.hh	/^    bool empty() const { return _stop == _start; }$/;"	f	class:CircleBuf
empty	./base/circlebuf.hh	/^    bool empty() const { return buf.empty(); }$/;"	f	class:Fifo
empty	./cpu/minor/buffers.hh	/^    bool empty() const { return !elementPtr && queue.empty(); }$/;"	f	class:Minor::InputBuffer
empty	./cpu/minor/buffers.hh	/^    bool empty() const { return buffer.empty(); }$/;"	f	class:Minor::Latch
empty	./cpu/minor/buffers.hh	/^    bool empty() const { return queue.empty(); }$/;"	f	class:Minor::Queue
empty	./cpu/minor/buffers.hh	/^    empty() const$/;"	f	class:Minor::MinorBuffer
empty	./cpu/o3/dep_graph.hh	/^    bool empty(PhysRegIndex idx) const { return !dependGraph[idx].next; }$/;"	f	class:DependencyGraph
empty	./cpu/o3/dep_graph.hh	/^DependencyGraph<DynInstPtr>::empty() const$/;"	f	class:DependencyGraph
empty	./cpu/pred/ras.hh	/^     bool empty() { return usedEntries == 0; }$/;"	f	class:ReturnAddrStack
empty	./dev/net/pktfifo.hh	/^    bool empty() const { return size() <= 0; }$/;"	f	class:PacketFifo
empty	./mem/ruby/system/Sequencer.cc	/^Sequencer::empty() const$/;"	f	class:Sequencer
empty	./sim/eventq.hh	/^    bool empty() const { return head == NULL; }$/;"	f	class:EventQueue
emptyDomainID	./sim/clock_domain.hh	/^    static const DomainID emptyDomainID = -1;$/;"	m	class:SrcClockDomain
emptyROB	./cpu/o3/comm.hh	/^        bool emptyROB; \/\/ *R$/;"	m	struct:TimeBufStruct::commitComm
emptyROB	./cpu/o3/rename.hh	/^    bool emptyROB[Impl::MaxThreads];$/;"	m	class:DefaultRename
emptyRenameInsts	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::emptyRenameInsts(ThreadID tid)$/;"	f	class:DefaultIEW
emptySixteen	./unittest/bituniontest.cc	/^EmptySixteen emptySixteen;$/;"	v
emptyThirtyTwo	./unittest/bituniontest.cc	/^EmptyThirtyTwo emptyThirtyTwo;$/;"	v
en	./arch/arm/miscregs.hh	/^        Bitfield<30> en;$/;"	m	namespace:ArmISA
en	./arch/x86/regs/misc.hh	/^        Bitfield<22> en; \/\/ Counter enable$/;"	m	namespace:X86ISA
en	./arch/x86/regs/misc.hh	/^        Bitfield<60> en; \/\/ Error condition enabled$/;"	m	namespace:X86ISA
enable	./arch/x86/bios/IntelMP.py	/^    enable = Param.Bool(True, 'if this APIC is usable')$/;"	v	class:X86IntelMPIOAPIC
enable	./arch/x86/bios/IntelMP.py	/^    enable = Param.Bool(True, 'if this processor is usable')$/;"	v	class:X86IntelMPProcessor
enable	./arch/x86/regs/misc.hh	/^        Bitfield<11> enable;$/;"	m	namespace:X86ISA
enable	./base/debug.cc	/^    enable()$/;"	f	struct:Debug::AllFlags
enable	./base/debug.cc	/^CompoundFlag::enable()$/;"	f	class:Debug::CompoundFlag
enable	./base/debug.hh	/^    void enable()  { _status = true;  sync(); }$/;"	f	class:Debug::SimpleFlag
enable	./base/pollevent.cc	/^PollEvent::enable()$/;"	f	class:PollEvent
enable	./base/statistics.cc	/^Info::enable()$/;"	f	class:Stats::Info
enable	./base/statistics.cc	/^Vector2dInfo::enable()$/;"	f	class:Stats::Vector2dInfo
enable	./base/statistics.cc	/^VectorDistInfo::enable()$/;"	f	class:Stats::VectorDistInfo
enable	./base/statistics.cc	/^VectorInfo::enable()$/;"	f	class:Stats::VectorInfo
enable	./base/statistics.cc	/^enable()$/;"	f	namespace:Stats
enable	./base/trace.cc	/^enable()$/;"	f	namespace:Trace
enable	./dev/arm/generic_timer.hh	/^    Bitfield<0> enable;$/;"	m	class:ArchTimer
enable	./dev/arm/hdlcd.hh	/^        Bitfield<0>    enable;$/;"	m	class:HDLcd
enable	./dev/arm/kmi.hh	/^        Bitfield<2> enable;$/;"	m	class:Pl050
enable	./dev/arm/timer_cpulocal.hh	/^            Bitfield<0>   enable;$/;"	m	class:CpuLocalTimer::Timer
enable	./python/m5/stats/__init__.py	/^def enable():$/;"	f
enable	./python/m5/trace.py	/^def enable():$/;"	f
enable	./sim/DVFSHandler.py	/^    enable = Param.Bool(False, "Enable\/Disable the handler")$/;"	v	class:DVFSHandler
enableAll	./base/debug.cc	/^SimpleFlag::enableAll()$/;"	f	class:Debug::SimpleFlag
enableCapture	./dev/arm/hdlcd.hh	/^    const bool enableCapture;$/;"	m	class:HDLcd
enableCapture	./dev/arm/pl111.hh	/^    bool enableCapture;$/;"	m	class:Pl111
enableContextSwitchStatsDump	./arch/arm/freebsd/system.hh	/^    bool enableContextSwitchStatsDump;$/;"	m	class:FreebsdArmSystem
enableContextSwitchStatsDump	./arch/arm/linux/system.hh	/^    bool enableContextSwitchStatsDump;$/;"	m	class:LinuxArmSystem
enableDebug	./mem/DRAMSim2.py	/^    enableDebug = Param.Bool(False, "Enable DRAMSim2 debug output")$/;"	v	class:DRAMSim2
enableFunctionTrace	./cpu/base.cc	/^BaseCPU::enableFunctionTrace()$/;"	f	class:BaseCPU
enableHandler	./sim/dvfs_handler.hh	/^    bool enableHandler;$/;"	m	class:DVFSHandler
enableIdling	./cpu/minor/MinorCPU.py	/^    enableIdling = Param.Bool(True,$/;"	v	class:MinorCPU
enableMSIX	./dev/arm/RealView.py	/^    def enableMSIX(self):$/;"	m	class:RealView
enableMSIX	./dev/arm/RealView.py	/^    def enableMSIX(self):$/;"	m	class:VExpress_EMM
enableNX	./arch/x86/pagetable_walker.hh	/^            bool enableNX;$/;"	m	class:X86ISA::Walker::WalkerState
enableSignals	./cpu/kvm/perfevent.cc	/^PerfKvmCounter::enableSignals(pid_t tid, int signal)$/;"	f	class:PerfKvmCounter
enableSignals	./cpu/kvm/perfevent.hh	/^    void enableSignals(int signal) { enableSignals(gettid(), signal); }$/;"	f	class:PerfKvmCounter
enableSm	./dev/net/i8254xGBe.cc	/^IGbE::RxDescCache::enableSm()$/;"	f	class:IGbE::RxDescCache
enableSm	./dev/net/i8254xGBe.cc	/^IGbE::TxDescCache::enableSm()$/;"	f	class:IGbE::TxDescCache
enable_capture	./dev/arm/RealView.py	/^    enable_capture = Param.Bool(True, "capture frame to system.framebuffer.bmp")$/;"	v	class:HDLcd
enable_capture	./dev/arm/RealView.py	/^    enable_capture = Param.Bool(True, "capture frame to system.framebuffer.bmp")$/;"	v	class:Pl111
enable_context_switch_stats_dump	./arch/arm/ArmSystem.py	/^    enable_context_switch_stats_dump = Param.Bool(False, "enable stats\/task info dumping at context switch boundaries")$/;"	v	class:GenericArmSystem
enable_fault_model	./mem/ruby/network/garnet/BaseGarnetNetwork.py	/^    enable_fault_model = Param.Bool(False, "enable network fault model");$/;"	v	class:BaseGarnetNetwork
enabled	./arch/arm/pmu.hh	/^        bool enabled;$/;"	m	struct:ArmISA::PMU::CounterState
enabled	./base/CPA.py	/^    enabled = Param.Bool(False, "Is Annotation enabled?")$/;"	v	class:CPA
enabled	./base/cp_annotate.hh	/^    bool enabled()                                          { return false; }$/;"	f	class:CPA
enabled	./base/cp_annotate.hh	/^    enabled() $/;"	f	class:CPA
enabled	./base/pollevent.hh	/^    bool enabled;$/;"	m	class:PollEvent
enabled	./base/statistics.cc	/^enabled()$/;"	f	namespace:Stats
enabled	./dev/arm/gic_pl390.hh	/^    bool enabled;$/;"	m	class:Pl390
enabled	./dev/arm/hdlcd.hh	/^    bool enabled() const { return command.enable; }$/;"	f	class:HDLcd
enabled	./dev/x86/i8042.hh	/^        Bitfield<5> enabled;$/;"	m	class:X86ISA::PS2Mouse
encodePhysAddrRange64	./arch/arm/utility.cc	/^encodePhysAddrRange64(int pa_size)$/;"	f	namespace:ArmISA
encodedValue	./sim/syscallreturn.hh	/^    int64_t encodedValue() const$/;"	f	class:SyscallReturn
encoding	./arch/arm/types.hh	/^        Bitfield<27, 25> encoding;$/;"	m	namespace:ArmISA
encoding	./base/vnc/vncserver.hh	/^        int32_t encoding;$/;"	m	struct:VncServer::FrameBufferRect
end	./arch/sparc/tlb_map.hh	/^    end()$/;"	f	class:SparcISA::TlbMap
end	./base/addr_range.hh	/^    Addr end() const { return _end; }$/;"	f	class:AddrRange
end	./base/addr_range_map.hh	/^    end() const$/;"	f	class:AddrRangeMap
end	./base/addr_range_map.hh	/^    end()$/;"	f	class:AddrRangeMap
end	./base/stats/text.cc	/^Text::end()$/;"	f	class:Stats::Text
end	./dev/net/pktfifo.hh	/^    const_iterator end() const { return fifo.end(); }$/;"	f	class:PacketFifo
end	./dev/net/pktfifo.hh	/^    iterator end() { return fifo.end(); }$/;"	f	class:PacketFifo
end	./python/m5/util/region.py	/^    def end(self):$/;"	m	class:Region
endAccess	./mem/ruby/structures/BankedArray.hh	/^        Tick endAccess;$/;"	m	class:BankedArray::AccessRecord
endAddr	./cpu/testers/traffic_gen/generators.hh	/^    const Addr endAddr;$/;"	m	class:LinearGen
endAddr	./cpu/testers/traffic_gen/generators.hh	/^    const Addr endAddr;$/;"	m	class:RandomGen
endAddr	./dev/dma_device.hh	/^    Addr endAddr;$/;"	m	class:DmaReadFifo
endOfTable	./dev/storage/ide_disk.hh	/^    uint16_t endOfTable;$/;"	m	struct:PrdEntry
endOnEOT	./dev/arm/pl011.hh	/^    const bool endOnEOT;$/;"	m	class:Pl011
endWalk	./arch/x86/pagetable_walker.cc	/^Walker::WalkerState::endWalk()$/;"	f	class:X86ISA::Walker::WalkerState
end_args	./base/cprintf.cc	/^Print::end_args()$/;"	f	class:cp::Print
end_on_eot	./dev/arm/RealView.py	/^    end_on_eot = Param.Bool(False, "End the simulation when a EOT is received on the UART")$/;"	v	class:Pl011
endpoint_bandwidth	./mem/ruby/network/simple/SimpleNetwork.py	/^    endpoint_bandwidth = Param.Int(1000, "bandwidth adjustment factor");$/;"	v	class:SimpleNetwork
energy_ctrl	./dev/arm/RealView.py	/^    energy_ctrl    = EnergyCtrl(pio_addr=0x1c080000)$/;"	v	class:VExpress_EMM
energy_ctrl	./dev/arm/RealView.py	/^    energy_ctrl   = EnergyCtrl(pio_addr=0x1000f000)$/;"	v	class:RealViewEB
energy_ctrl	./dev/arm/RealView.py	/^    energy_ctrl   = EnergyCtrl(pio_addr=0x1000f000)$/;"	v	class:RealViewPBX
enqueue	./mem/dramsim2_wrapper.cc	/^DRAMSim2Wrapper::enqueue(bool is_write, uint64_t addr)$/;"	f	class:DRAMSim2Wrapper
enqueue	./mem/ruby/network/MessageBuffer.cc	/^MessageBuffer::enqueue(MsgPtr message, Tick current_time, Tick delta)$/;"	f	class:MessageBuffer
enqueue	./mem/ruby/structures/WireBuffer.cc	/^WireBuffer::enqueue(MsgPtr message, Tick current_time, Tick delta)$/;"	f	class:WireBuffer
enqueueMemRef	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::enqueueMemRef(MemoryNode *memRef)$/;"	f	class:RubyMemoryControl
enqueueNextFetchRequest	./mem/ruby/system/CacheRecorder.cc	/^CacheRecorder::enqueueNextFetchRequest()$/;"	f	class:CacheRecorder
enqueueNextFlushRequest	./mem/ruby/system/CacheRecorder.cc	/^CacheRecorder::enqueueNextFlushRequest()$/;"	f	class:CacheRecorder
enqueuePrefetch	./mem/ruby/slicc_interface/AbstractController.hh	/^    virtual void enqueuePrefetch(const Addr &, const RubyRequestType&)$/;"	f	class:AbstractController
enqueueRubyEvent	./mem/ruby/system/RubySystem.hh	/^    void enqueueRubyEvent(Tick tick)$/;"	f	class:RubySystem
enqueueToDirectory	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::enqueueToDirectory(MemoryNode *req, Cycles latency)$/;"	f	class:RubyMemoryControl
enter	./arch/x86/regs/misc.hh	/^        Bitfield<1> enter;$/;"	m	namespace:X86ISA
enter	./cpu/testers/traffic_gen/generators.cc	/^LinearGen::enter()$/;"	f	class:LinearGen
enter	./cpu/testers/traffic_gen/generators.cc	/^RandomGen::enter()$/;"	f	class:RandomGen
enter	./cpu/testers/traffic_gen/generators.cc	/^TraceGen::enter()$/;"	f	class:TraceGen
enter	./cpu/testers/traffic_gen/generators.hh	/^    void enter() { }$/;"	f	class:IdleGen
enterREDState	./arch/sparc/faults.cc	/^enterREDState(ThreadContext *tc)$/;"	f	namespace:SparcISA
enterState	./cpu/testers/traffic_gen/traffic_gen.cc	/^TrafficGen::enterState(uint32_t newState)$/;"	f	class:TrafficGen
entries	./arch/x86/bios/ACPI.py	/^    entries = VectorParam.X86ACPISysDescTable([], 'system description tables')$/;"	v	class:X86ACPIRSDT
entries	./arch/x86/bios/ACPI.py	/^    entries = VectorParam.X86ACPISysDescTable([], 'system description tables')$/;"	v	class:X86ACPIXSDT
entries	./arch/x86/bios/E820.py	/^    entries = VectorParam.X86E820Entry('entries for the e820 table')$/;"	v	class:X86E820Table
entries	./arch/x86/bios/acpi.hh	/^    std::vector<SysDescTable *> entries;$/;"	m	class:X86ISA::ACPI::RSDT
entries	./arch/x86/bios/acpi.hh	/^    std::vector<SysDescTable *> entries;$/;"	m	class:X86ISA::ACPI::XSDT
entries	./arch/x86/bios/e820.hh	/^        std::vector<E820Entry *> entries;$/;"	m	class:X86ISA::E820Table
entries	./mem/cache/prefetch/stride.hh	/^        std::unordered_map<int, StrideEntry**> entries;$/;"	m	class:StridePrefetcher::PCTable
entry	./arch/alpha/aout_machdep.h	/^    uint64_t    entry;          \/\/\/< entry point$/;"	m	struct:aout_exechdr
entry	./arch/alpha/pagetable.hh	/^    uint64_t entry;$/;"	m	struct:AlphaISA::PageTableEntry
entry	./arch/arm/isa.hh	/^            struct MiscRegLUTEntry entry;$/;"	m	struct:ArmISA::ISA::MiscRegInitializerEntry	typeref:struct:ArmISA::ISA::MiscRegInitializerEntry::MiscRegLUTEntry
entry	./arch/sparc/pagetable.hh	/^    uint64_t entry;$/;"	m	class:SparcISA::PageTableEntry
entry	./arch/sparc/pagetable.hh	/^    uint64_t entry;$/;"	m	class:SparcISA::TteTag
entry	./arch/x86/pagetable_walker.hh	/^            TlbEntry entry;$/;"	m	class:X86ISA::Walker::WalkerState
entry	./base/loader/exec_ecoff.h	/^        coff_ulong  entry;$/;"	m	struct:ecoff_aouthdr
entry	./base/loader/object_file.hh	/^    Addr entry;$/;"	m	class:ObjectFile
entry	./dev/storage/ide_disk.hh	/^    PrdEntry_t entry;$/;"	m	class:PrdTableEntry
entry	./mem/page_table.hh	/^        TheISA::TlbEntry entry;$/;"	m	struct:PageTableBase::cacheElement
entry4u	./arch/sparc/pagetable.hh	/^    uint64_t entry4u;$/;"	m	class:SparcISA::PageTableEntry
entryAmount	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::entryAmount(ThreadID num_threads)$/;"	f	class:InstructionQueue
entryAmount	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::entryAmount(ThreadID num_threads)$/;"	f	class:LSQ
entryAmount	./cpu/o3/rob_impl.hh	/^ROB<Impl>::entryAmount(ThreadID num_threads)$/;"	f	class:ROB
entryPoint	./base/loader/object_file.hh	/^    Addr entryPoint() const { return entry; }$/;"	f	class:ObjectFile
entryPoint	./dev/alpha/access.h	/^    uint64_t    entryPoint;             \/\/ 30:$/;"	m	struct:AlphaAccess
entryPoint	./dev/mips/access.h	/^    uint32_t    entryPoint;             \/\/ 1c:$/;"	m	struct:MipsAccess
entryPointLength	./arch/x86/bios/smbios.cc	/^        SMBiosHeader::entryPointLength = 0x1F;$/;"	m	class:X86ISA::SMBios::SMBiosTable::SMBiosHeader	file:
entryPointLength	./arch/x86/bios/smbios.hh	/^        static const uint8_t entryPointLength;$/;"	m	struct:X86ISA::SMBios::SMBiosTable::SMBiosHeader
entryPointRevision	./arch/x86/bios/smbios.cc	/^        SMBiosHeader::entryPointRevision = 0;$/;"	m	class:X86ISA::SMBios::SMBiosTable::SMBiosHeader	file:
entryPointRevision	./arch/x86/bios/smbios.hh	/^        static const uint8_t entryPointRevision;$/;"	m	struct:X86ISA::SMBios::SMBiosTable::SMBiosHeader
entryTime	./mem/dram_ctrl.hh	/^        const Tick entryTime;$/;"	m	class:DRAMCtrl::DRAMPacket
entry_number	./arch/x86/linux/process.cc	/^    uint32_t entry_number;$/;"	m	struct:UserDesc32	file:
entry_number	./arch/x86/linux/process.cc	/^    uint32_t entry_number;$/;"	m	struct:UserDesc64	file:
enum_name	./cpu/StaticInstFlags.py	/^    enum_name = 'Flags'$/;"	v	class:StaticInstFlags
enum_name	./python/m5/params.py	/^    enum_name = None$/;"	v	class:Enum
enumerateParams	./python/m5/SimObject.py	/^    def enumerateParams(self, flags_dict = {},$/;"	f
enumerateParams	./python/m5/params.py	/^    def enumerateParams(self, flags_dict = {},$/;"	m	class:SimObjectVector
env	./arch/x86/insts/macroop.hh	/^    X86ISA::EmulEnv env;$/;"	m	class:X86ISA::MacroopBase
env	./sim/Process.py	/^    env = VectorParam.String([], "environment settings")$/;"	v	class:LiveProcess
envp	./sim/process.hh	/^    std::vector<std::string> envp;$/;"	m	class:LiveProcess
eop	./dev/net/i8254xGBe_defs.hh	/^inline bool eop(TxDesc *d)  { assert(isLegacy(d) || isData(d)); return bits(d->d2, 24,24); }$/;"	f	namespace:iGbReg::TxdOp
ep	./arch/mips/pra_constants.hh	/^    Bitfield<1>      ep;$/;"	m	namespace:MipsISA
epd0	./arch/arm/miscregs.hh	/^        Bitfield<7> epd0; \/\/ EL1$/;"	m	namespace:ArmISA
epd0	./arch/arm/miscregs.hh	/^        Bitfield<7> epd0;$/;"	m	namespace:ArmISA
epd1	./arch/arm/miscregs.hh	/^        Bitfield<23> epd1; \/\/ EL1$/;"	m	namespace:ArmISA
epd1	./arch/arm/miscregs.hh	/^        Bitfield<23> epd1;$/;"	m	namespace:ArmISA
eprint	./mem/slicc/main.py	/^def eprint(format, *args):$/;"	f
eq	./arch/power/miscregs.hh	/^        Bitfield<29> eq;$/;"	m	namespace:PowerISA
eq	./sim/eventq.hh	/^        EventQueue &eq;$/;"	m	class:EventQueue::ScopedRelease
equal	./mem/ruby/common/DataBlock.cc	/^DataBlock::equal(const DataBlock& obj) const$/;"	f	class:DataBlock
equal_range	./cpu/pc_event.cc	/^PCEventQueue::equal_range(Addr pc)$/;"	f	class:PCEventQueue
equal_range	./cpu/pc_event.hh	/^    range_t equal_range(PCEvent *event) { return equal_range(event->pc()); }$/;"	f	class:PCEventQueue
er	./arch/mips/pra_constants.hh	/^    Bitfield<31>     er;$/;"	m	namespace:MipsISA
erase	./arch/sparc/tlb_map.hh	/^    erase(TlbRange k)$/;"	f	class:SparcISA::TlbMap
erase	./arch/sparc/tlb_map.hh	/^    erase(iterator p)$/;"	f	class:SparcISA::TlbMap
erase	./arch/sparc/tlb_map.hh	/^    erase(iterator p, iterator q)$/;"	f	class:SparcISA::TlbMap
erase	./base/addr_range_map.hh	/^    erase(iterator p)$/;"	f	class:AddrRangeMap
erase	./base/addr_range_map.hh	/^    erase(iterator p, iterator q)$/;"	f	class:AddrRangeMap
eraseCacheEntry	./mem/page_table.hh	/^    inline void eraseCacheEntry(Addr vaddr)$/;"	f	class:PageTableBase
eraseIfNullEntry	./mem/snoop_filter.cc	/^SnoopFilter::eraseIfNullEntry(SnoopFilterCache::iterator& sf_it)$/;"	f	class:SnoopFilter
eraseLatency	./dev/arm/flash_device.hh	/^    const Tick eraseLatency;$/;"	m	class:FlashDevice
erase_lat	./dev/arm/FlashDevice.py	/^    erase_lat = Param.Latency("1500us", "Erase Delay")$/;"	v	class:FlashDevice
erg	./arch/arm/miscregs.hh	/^      Bitfield<23,20> erg;$/;"	m	namespace:ArmISA
erl	./arch/mips/pra_constants.hh	/^    Bitfield<2>      erl;$/;"	m	namespace:MipsISA
errnoValue	./sim/syscallreturn.hh	/^    int errnoValue() const$/;"	f	class:SyscallReturn
erroneous_allocation__VC	./mem/ruby/network/fault_model/FaultModel.hh	/^        erroneous_allocation__VC,$/;"	e	enum:FaultModel::fault_type
erroneous_allocation__switch	./mem/ruby/network/fault_model/FaultModel.hh	/^        erroneous_allocation__switch,$/;"	e	enum:FaultModel::fault_type
error	./arch/isa_parser.py	/^def error(*args):$/;"	f
error	./arch/micro_asm.py	/^def error(lineno, string, print_traceback = False):$/;"	f
error	./dev/pci/copy_engine_defs.hh	/^    CHANERR error;$/;"	m	struct:CopyEngineReg::ChanRegs
error	./dev/storage/ide_disk.hh	/^    uint8_t error;$/;"	m	struct:CommandReg
error	./mem/slicc/ast/AST.py	/^    def error(self, message, *args):$/;"	m	class:AST
error	./mem/slicc/symbols/Symbol.py	/^    def error(self, message, *args):$/;"	m	class:Symbol
error	./mem/slicc/util.py	/^    def error(self, message, *args):$/;"	m	class:Location
errorCode	./arch/x86/faults.hh	/^        uint64_t errorCode;$/;"	m	class:X86ISA::X86FaultBase
errorMessage	./mem/mem_checker.hh	/^    std::string errorMessage;$/;"	m	class:MemChecker
errors	./dev/net/i8254xGBe_defs.hh	/^            uint32_t errors:12;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon8
errors	./dev/net/i8254xGBe_defs.hh	/^            uint8_t errors;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon6
errout	./sim/Process.py	/^    errout = Param.String('cerr', 'filename for stderr')$/;"	v	class:Process
es	./arch/mips/pra_constants.hh	/^    Bitfield<27>     es;$/;"	m	namespace:MipsISA
es	./arch/x86/remote_gdb.hh	/^          uint32_t es;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
es	./arch/x86/remote_gdb.hh	/^          uint32_t es;$/;"	m	struct:X86ISA::RemoteGDB::X86GdbRegCache::__anon57
esi	./arch/x86/regs/misc.hh	/^        Bitfield<63, 3> esi; \/\/ Extended selector$/;"	m	namespace:X86ISA
esi	./arch/x86/remote_gdb.hh	/^          uint32_t esi;$/;"	m	struct:X86ISA::RemoteGDB::X86GdbRegCache::__anon57
esp	./arch/mips/pra_constants.hh	/^    Bitfield<28>     esp;$/;"	m	namespace:MipsISA
esp	./arch/x86/remote_gdb.hh	/^          uint32_t esp;$/;"	m	struct:X86ISA::RemoteGDB::X86GdbRegCache::__anon57
ess	./arch/mips/pra_constants.hh	/^    Bitfield<15, 12> ess;$/;"	m	namespace:MipsISA
establishConnection	./dev/net/tcp_iface.cc	/^TCPIface::establishConnection()$/;"	f	class:TCPIface
et	./arch/mips/pra_constants.hh	/^    Bitfield<28>     et;$/;"	m	namespace:MipsISA
et	./arch/x86/regs/misc.hh	/^        Bitfield<4> et; \/\/ Extension Type$/;"	m	namespace:X86ISA
ethRxPkt	./dev/net/i8254xGBe.cc	/^IGbE::ethRxPkt(EthPacketPtr pkt)$/;"	f	class:IGbE
ethTxDone	./dev/net/i8254xGBe.cc	/^IGbE::ethTxDone()$/;"	f	class:IGbE
eth_hdr_vlan	./base/inet.hh	/^    bool eth_hdr_vlan;$/;"	m	class:Net::Ip6Ptr
eth_hdr_vlan	./base/inet.hh	/^    bool eth_hdr_vlan;$/;"	m	class:Net::IpPtr
etherInt	./dev/net/i8254xGBe.hh	/^    IGbEInt *etherInt;$/;"	m	class:IGbE
euid	./sim/Process.py	/^    euid = Param.Int(100, 'effective user id')$/;"	v	class:LiveProcess
euid	./sim/process.hh	/^    inline uint64_t euid() {return __euid;}$/;"	f	class:LiveProcess
evBeginLine	./dev/pixelpump.hh	/^    PixelEvent evBeginLine;$/;"	m	class:BasePixelPump
evHSyncBegin	./dev/pixelpump.hh	/^    PixelEvent evHSyncBegin;$/;"	m	class:BasePixelPump
evHSyncEnd	./dev/pixelpump.hh	/^    PixelEvent evHSyncEnd;$/;"	m	class:BasePixelPump
evRenderPixels	./dev/pixelpump.hh	/^    PixelEvent evRenderPixels;$/;"	m	class:BasePixelPump
evVSyncBegin	./dev/pixelpump.hh	/^    PixelEvent evVSyncBegin;$/;"	m	class:BasePixelPump
evVSyncEnd	./dev/pixelpump.hh	/^    PixelEvent evVSyncEnd;$/;"	m	class:BasePixelPump
eval	./cpu/timing_expr.cc	/^uint64_t TimingExprBin::eval(TimingExprEvalContext &context)$/;"	f	class:TimingExprBin
eval	./cpu/timing_expr.cc	/^uint64_t TimingExprIf::eval(TimingExprEvalContext &context)$/;"	f	class:TimingExprIf
eval	./cpu/timing_expr.cc	/^uint64_t TimingExprLet::eval(TimingExprEvalContext &context)$/;"	f	class:TimingExprLet
eval	./cpu/timing_expr.cc	/^uint64_t TimingExprReadIntReg::eval(TimingExprEvalContext &context)$/;"	f	class:TimingExprReadIntReg
eval	./cpu/timing_expr.cc	/^uint64_t TimingExprRef::eval(TimingExprEvalContext &context)$/;"	f	class:TimingExprRef
eval	./cpu/timing_expr.cc	/^uint64_t TimingExprSrcReg::eval(TimingExprEvalContext &context)$/;"	f	class:TimingExprSrcReg
eval	./cpu/timing_expr.cc	/^uint64_t TimingExprUn::eval(TimingExprEvalContext &context)$/;"	f	class:TimingExprUn
eval	./cpu/timing_expr.hh	/^    uint64_t eval(TimingExprEvalContext &context) { return value; }$/;"	f	class:TimingExprLiteral
evaluate	./cpu/minor/activity.hh	/^    void evaluate() { advance(); }$/;"	f	class:Minor::MinorActivityRecorder
evaluate	./cpu/minor/buffers.hh	/^    void evaluate() { buffer.advance(); }$/;"	f	class:Minor::Latch
evaluate	./cpu/minor/decode.cc	/^Decode::evaluate()$/;"	f	class:Minor::Decode
evaluate	./cpu/minor/execute.cc	/^Execute::evaluate()$/;"	f	class:Minor::Execute
evaluate	./cpu/minor/fetch1.cc	/^Fetch1::evaluate()$/;"	f	class:Minor::Fetch1
evaluate	./cpu/minor/fetch2.cc	/^Fetch2::evaluate()$/;"	f	class:Minor::Fetch2
evaluate	./cpu/minor/pipeline.cc	/^Pipeline::evaluate()$/;"	f	class:Minor::Pipeline
event	./arch/arm/stage2_mmu.hh	/^        Event     *event;$/;"	m	class:ArmISA::Stage2MMU::Stage2Translation
event	./arch/mips/pra_constants.hh	/^    Bitfield<10, 5> event;$/;"	m	namespace:MipsISA
event	./dev/intel_8254_timer.hh	/^        CounterEvent event;$/;"	m	class:Intel8254Timer::Counter
event	./dev/mc146818.hh	/^    RTCEvent event;$/;"	m	class:MC146818
event	./dev/net/dist_etherlink.hh	/^        Event *event;$/;"	m	class:DistEtherLink::Link
event	./dev/net/etherbus.hh	/^    DoneEvent event;$/;"	m	class:EtherBus
event	./dev/net/ethertap.cc	/^    Event *event;$/;"	m	class:TapListener	file:
event	./dev/net/ethertap.hh	/^    TapEvent *event;$/;"	m	class:EtherTap
event	./sim/ticked_object.hh	/^    ClockEvent event;$/;"	m	class:Ticked
eventCode	./python/swig/pyevent.hh	/^    PyObject *eventCode; \/\/ PyObject to call to perform event$/;"	m	class:PythonEvent
eventCounters	./arch/arm/ArmPMU.py	/^    eventCounters = Param.Int(31, "Number of supported PMU counters")$/;"	v
eventId	./arch/arm/pmu.hh	/^        EventTypeId eventId;$/;"	m	struct:ArmISA::PMU::CounterState
eventManager	./dev/net/dist_iface.hh	/^        EventManager *eventManager;$/;"	m	class:DistIface::RecvScheduler
eventMask	./arch/x86/regs/misc.hh	/^        Bitfield<7,0> eventMask;$/;"	m	namespace:X86ISA
eventQueue	./sim/eventq.hh	/^    eventQueue() const$/;"	f	class:EventManager
eventQueueEmpty	./mem/ruby/system/RubySystem.hh	/^    bool eventQueueEmpty() { return eventq->empty(); }$/;"	f	class:RubySystem
eventq	./sim/eventq.hh	/^    EventQueue *eventq;$/;"	m	class:EventManager
eventqDump	./sim/debug.cc	/^eventqDump()$/;"	f
eventq_index	./python/m5/SimObject.py	/^    eventq_index = Param.UInt32(Parent.eventq_index, "Event Queue Index")$/;"	v	class:SimObject
eventq_index	./sim/Root.py	/^    eventq_index = 0$/;"	v	class:Root
events	./base/pollevent.hh	/^    eventvec_t events;$/;"	m	class:PollQueue
eventvec_t	./base/pollevent.hh	/^    typedef std::vector<PollEvent *> eventvec_t;$/;"	t	class:PollQueue
evictLRU	./arch/x86/tlb.cc	/^TLB::evictLRU()$/;"	f	class:X86ISA::TLB
evictionCallback	./mem/ruby/system/Sequencer.cc	/^Sequencer::evictionCallback(Addr address)$/;"	f	class:Sequencer
evp	./arch/mips/mt_constants.hh	/^    Bitfield<0> evp;$/;"	m	namespace:MipsISA
evpc	./cpu/pc_event.hh	/^    Addr evpc;$/;"	m	class:PCEvent
evtCount	./arch/arm/pmu.hh	/^        Bitfield<9, 0> evtCount;$/;"	m	class:ArmISA::PMU
ex	./arch/arm/miscregs.hh	/^        Bitfield<31> ex;$/;"	m	namespace:ArmISA
ex_str	./python/m5/params.py	/^    ex_str = "00:90:00:00:00:01"$/;"	v	class:EthernetAddr
ex_str	./python/m5/params.py	/^    ex_str = "100ns"$/;"	v	class:Latency
ex_str	./python/m5/params.py	/^    ex_str = "127.0.0.0\/24"$/;"	v	class:IpNetmask
ex_str	./python/m5/params.py	/^    ex_str = "127.0.0.1"$/;"	v	class:IpAddress
ex_str	./python/m5/params.py	/^    ex_str = "127.0.0.1:80"$/;"	v	class:IpWithPort
ex_str	./python/m5/params.py	/^    ex_str = "1GB\/s"$/;"	v	class:MemoryBandwidth
ex_str	./python/m5/params.py	/^    ex_str = "1GHz"$/;"	v	class:Frequency
ex_str	./python/m5/params.py	/^    ex_str = "1Gbps"$/;"	v	class:NetworkBandwidth
ex_str	./python/m5/params.py	/^    ex_str = "1MHz"$/;"	v	class:TickParamValue
ex_str	./python/m5/params.py	/^    ex_str = "1V"$/;"	v	class:Voltage
ex_str	./python/m5/params.py	/^    ex_str = "1mA"$/;"	v	class:Current
ex_str	./python/m5/params.py	/^    ex_str = '512MB'$/;"	v	class:MemorySize
ex_str	./python/m5/params.py	/^    ex_str = '512MB'$/;"	v	class:MemorySize32
exa	./python/m5/util/convert.py	/^exa  = 1.0e18$/;"	v
example_str	./python/m5/params.py	/^    def example_str(self):$/;"	m	class:ParamDesc
example_str	./python/m5/params.py	/^    def example_str(self):$/;"	m	class:VectorParamDesc
exbi	./python/m5/util/convert.py	/^exbi = pebi * 1024$/;"	v
excCode	./arch/mips/pra_constants.hh	/^    Bitfield<6,  2>  excCode;$/;"	m	namespace:MipsISA
exceptionBase	./arch/mips/pra_constants.hh	/^    Bitfield<29, 12> exceptionBase;$/;"	m	namespace:MipsISA
exclude_host	./cpu/kvm/perfevent.hh	/^    PerfKvmCounterConfig &exclude_host(bool val) {$/;"	f	class:PerfKvmCounterConfig
exclude_hv	./cpu/kvm/perfevent.hh	/^    PerfKvmCounterConfig &exclude_hv(bool val) {$/;"	f	class:PerfKvmCounterConfig
excpt	./arch/mips/mt_constants.hh	/^    Bitfield<18, 16> excpt;$/;"	m	namespace:MipsISA
exeStatus	./cpu/o3/iew.hh	/^    StageStatus exeStatus;$/;"	m	class:DefaultIEW
execComplete	./cpu/trace/trace_cpu.hh	/^        bool execComplete;$/;"	m	class:TraceCPU::ElasticDataGen
execCompleteEvent	./cpu/trace/trace_cpu.hh	/^    CountedExitEvent *execCompleteEvent;$/;"	m	class:TraceCPU
execHdr	./base/loader/aout_object.hh	/^    aout_exechdr *execHdr;$/;"	m	class:AoutObject
execHdr	./base/loader/ecoff_object.hh	/^    ecoff_exechdr *execHdr;$/;"	m	class:EcoffObject
execSeqNum	./cpu/minor/decode.hh	/^    InstSeqNum execSeqNum;$/;"	m	class:Minor::Decode
execSeqNum	./cpu/minor/dyn_inst.hh	/^    InstSeqNum execSeqNum;$/;"	m	class:Minor::InstId
execSeqNumToWaitFor	./cpu/minor/scoreboard.cc	/^Scoreboard::execSeqNumToWaitFor(MinorDynInstPtr inst,$/;"	f	class:Minor::Scoreboard
execTick	./cpu/trace/trace_cpu.hh	/^            Tick execTick;$/;"	m	struct:TraceCPU::ElasticDataGen::ReadyNode
exec_with_loader	./kern/tru64/tru64_syscalls.hh	/^        exec_with_loader = 25,$/;"	e	enum:SystemCalls::__anon102
executable	./sim/Process.py	/^    executable = Param.String('', "executable (overrides cmd[0] if set)")$/;"	v	class:LiveProcess
executable	./sim/process.hh	/^    std::string executable;$/;"	m	class:LiveProcess
execute	./arch/arm/insts/pseudo.cc	/^DecoderFaultInst::execute(ExecContext *xc, Trace::InstRecord *traceData) const$/;"	f	class:DecoderFaultInst
execute	./arch/arm/insts/pseudo.cc	/^FailUnimplemented::execute(ExecContext *xc, Trace::InstRecord *traceData) const$/;"	f	class:FailUnimplemented
execute	./arch/arm/insts/pseudo.cc	/^FlushPipeInst::execute(ExecContext *xc, Trace::InstRecord *traceData) const$/;"	f	class:FlushPipeInst
execute	./arch/arm/insts/pseudo.cc	/^WarnUnimplemented::execute(ExecContext *xc, Trace::InstRecord *traceData) const$/;"	f	class:WarnUnimplemented
execute	./cpu/minor/exec_context.hh	/^    Execute &execute;$/;"	m	class:Minor::ExecContext
execute	./cpu/minor/lsq.hh	/^    Execute &execute;$/;"	m	class:Minor::LSQ
execute	./cpu/minor/pipeline.hh	/^    Execute execute;$/;"	m	class:Minor::Pipeline
execute	./cpu/o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::execute()$/;"	f	class:BaseO3DynInst
execute	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::execute()$/;"	f	class:TraceCPU::ElasticDataGen
executeAllowEarlyMemoryIssue	./cpu/minor/MinorCPU.py	/^    executeAllowEarlyMemoryIssue = Param.Bool(True,$/;"	v	class:MinorCPU
executeBranchDelay	./cpu/minor/MinorCPU.py	/^    executeBranchDelay = Param.Cycles(1,$/;"	v	class:MinorCPU
executeCommitLimit	./cpu/minor/MinorCPU.py	/^    executeCommitLimit = Param.Unsigned(2,$/;"	v	class:MinorCPU
executeCycle	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::executeCycle()$/;"	f	class:RubyMemoryControl
executeCycleInput	./cpu/minor/MinorCPU.py	/^    executeCycleInput = Param.Bool(True,$/;"	v	class:MinorCPU
executeFuncUnits	./cpu/minor/MinorCPU.py	/^    executeFuncUnits = Param.MinorFUPool(MinorDefaultFUPool(),$/;"	v	class:MinorCPU
executeInputBufferSize	./cpu/minor/MinorCPU.py	/^    executeInputBufferSize = Param.Unsigned(7,$/;"	v	class:MinorCPU
executeInputWidth	./cpu/minor/MinorCPU.py	/^    executeInputWidth = Param.Unsigned(2,$/;"	v	class:MinorCPU
executeInsts	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::executeInsts()$/;"	f	class:DefaultIEW
executeIssueLimit	./cpu/minor/MinorCPU.py	/^    executeIssueLimit = Param.Unsigned(2,$/;"	v	class:MinorCPU
executeLSQMaxStoreBufferStoresPerCycle	./cpu/minor/MinorCPU.py	/^    executeLSQMaxStoreBufferStoresPerCycle = Param.Unsigned(2,$/;"	v	class:MinorCPU
executeLSQRequestsQueueSize	./cpu/minor/MinorCPU.py	/^    executeLSQRequestsQueueSize = Param.Unsigned(1,$/;"	v	class:MinorCPU
executeLSQStoreBufferSize	./cpu/minor/MinorCPU.py	/^    executeLSQStoreBufferSize = Param.Unsigned(5,$/;"	v	class:MinorCPU
executeLSQTransfersQueueSize	./cpu/minor/MinorCPU.py	/^    executeLSQTransfersQueueSize = Param.Unsigned(2,$/;"	v	class:MinorCPU
executeLoad	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::executeLoad(DynInstPtr &inst)$/;"	f	class:LSQ
executeLoad	./cpu/o3/lsq_unit.hh	/^    Fault executeLoad(int lq_idx) { panic("Not implemented"); return NoFault; }$/;"	f	class:LSQUnit
executeLoad	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::executeLoad(DynInstPtr &inst)$/;"	f	class:LSQUnit
executeMaxAccessesInMemory	./cpu/minor/MinorCPU.py	/^    executeMaxAccessesInMemory = Param.Unsigned(2,$/;"	v	class:MinorCPU
executeMemRefInst	./cpu/minor/execute.cc	/^Execute::executeMemRefInst(MinorDynInstPtr inst, BranchData &branch,$/;"	f	class:Minor::Execute
executeMemReq	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::executeMemReq(GraphNode* node_ptr)$/;"	f	class:TraceCPU::ElasticDataGen
executeMemoryCommitLimit	./cpu/minor/MinorCPU.py	/^    executeMemoryCommitLimit = Param.Unsigned(1,$/;"	v	class:MinorCPU
executeMemoryIssueLimit	./cpu/minor/MinorCPU.py	/^    executeMemoryIssueLimit = Param.Unsigned(1,$/;"	v	class:MinorCPU
executeMemoryWidth	./cpu/minor/MinorCPU.py	/^    executeMemoryWidth = Param.Unsigned(0,$/;"	v	class:MinorCPU
executeSetTraceTimeOnCommit	./cpu/minor/MinorCPU.py	/^    executeSetTraceTimeOnCommit = Param.Bool(True,$/;"	v	class:MinorCPU
executeSetTraceTimeOnIssue	./cpu/minor/MinorCPU.py	/^    executeSetTraceTimeOnIssue = Param.Bool(False,$/;"	v	class:MinorCPU
executeStore	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::executeStore(DynInstPtr &inst)$/;"	f	class:LSQ
executeStore	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::executeStore(DynInstPtr &store_inst)$/;"	f	class:LSQUnit
executeTick	./cpu/o3/probe/elastic_trace.hh	/^        Tick executeTick;$/;"	m	struct:ElasticTrace::InstExecInfo
executeTick	./cpu/o3/probe/elastic_trace.hh	/^        Tick executeTick;$/;"	m	struct:ElasticTrace::TraceInfo
execv	./kern/tru64/tru64_syscalls.hh	/^        execv = 11,$/;"	e	enum:SystemCalls::__anon102
execve	./kern/tru64/tru64_syscalls.hh	/^        execve = 59,$/;"	e	enum:SystemCalls::__anon102
exists	./base/cp_annotate.hh	/^    static bool exists;$/;"	m	class:CPA
exit	./arch/x86/regs/misc.hh	/^        Bitfield<3> exit;$/;"	m	namespace:X86ISA
exit	./cpu/testers/traffic_gen/generators.cc	/^TraceGen::exit()$/;"	f	class:TraceGen
exit	./cpu/testers/traffic_gen/generators.hh	/^    virtual void exit() { };$/;"	f	class:BaseGen
exit	./cpu/thread_context.hh	/^    virtual int exit() { return 1; };$/;"	f	class:ThreadContext
exit	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::exit()$/;"	f	class:TraceCPU::ElasticDataGen
exit	./cpu/trace/trace_cpu.cc	/^TraceCPU::FixedRetryGen::exit()$/;"	f	class:TraceCPU::FixedRetryGen
exit	./kern/tru64/tru64_syscalls.hh	/^        exit = 1,$/;"	e	enum:SystemCalls::__anon102
exitCallbacks	./sim/core.cc	/^exitCallbacks()$/;"	f
exitFunc	./sim/syscall_emul.cc	/^exitFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
exitGroupFunc	./sim/syscall_emul.cc	/^exitGroupFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
exitNowHandler	./sim/init_signals.cc	/^exitNowHandler(int sigtype)$/;"	f
exitOnError	./cpu/CheckerCPU.py	/^    exitOnError = Param.Bool(False, "Exit on an error")$/;"	v	class:CheckerCPU
exitOnError	./cpu/checker/cpu.hh	/^    bool exitOnError;$/;"	m	class:CheckerCPU
exitSimLoop	./sim/sim_events.cc	/^exitSimLoop(const std::string &message, int exit_code, Tick when, Tick repeat,$/;"	f
exit_message	./base/misc.hh	93;"	d
exit_on_work_items	./sim/System.py	/^    exit_on_work_items = Param.Bool(False, "Exit from the simulation loop when "$/;"	v
exl	./arch/mips/pra_constants.hh	/^    Bitfield<0>     exl;$/;"	m	namespace:MipsISA
exl	./arch/mips/pra_constants.hh	/^    Bitfield<1>      exl;$/;"	m	namespace:MipsISA
expandCpuSymbolsToDict	./arch/isa_parser.py	/^    def expandCpuSymbolsToDict(self, template):$/;"	m	class:ISAParser
expandCpuSymbolsToString	./arch/isa_parser.py	/^    def expandCpuSymbolsToString(self, template):$/;"	m	class:ISAParser
expandDown	./arch/x86/regs/misc.hh	/^        Bitfield<14> expandDown;$/;"	m	namespace:X86ISA
expansionROM	./dev/pci/pcireg.h	/^        uint32_t expansionROM;$/;"	m	struct:PCIConfig::__anon26
expectICW4	./dev/x86/i8259.hh	/^    bool expectICW4;$/;"	m	class:X86ISA::I8259
expectMore	./dev/arm/ufs_device.hh	/^        uint8_t expectMore;\/\/0x01 is for writes, 0x02 is for reads$/;"	m	struct:UFSHostDevice::SCSIReply
expectedStreamSeqNum	./cpu/minor/fetch2.hh	/^    InstSeqNum expectedStreamSeqNum;$/;"	m	class:Minor::Fetch2
export_method_cxx_predecls	./cpu/kvm/BaseKvmCPU.py	/^    def export_method_cxx_predecls(cls, code):$/;"	m	class:BaseKvmCPU
export_method_cxx_predecls	./python/m5/SimObject.py	/^    def export_method_cxx_predecls(cls, code):$/;"	m	class:MetaSimObject
export_method_cxx_predecls	./sim/System.py	/^    def export_method_cxx_predecls(cls, code):$/;"	m	class:System
export_method_swig_predecls	./python/m5/SimObject.py	/^    def export_method_swig_predecls(cls, code):$/;"	m	class:MetaSimObject
export_method_swig_predecls	./python/m5/SimObject.py	/^    def export_method_swig_predecls(cls, code):$/;"	m	class:SimObject
export_methods	./arch/arm/ArmPMU.py	/^    def export_methods(cls, code):$/;"	m	class:ArmPMU
export_methods	./cpu/BaseCPU.py	/^    def export_methods(cls, code):$/;"	m	class:BaseCPU
export_methods	./cpu/kvm/BaseKvmCPU.py	/^    def export_methods(cls, code):$/;"	m	class:BaseKvmCPU
export_methods	./cpu/kvm/X86KvmCPU.py	/^    def export_methods(cls, code):$/;"	m	class:X86KvmCPU
export_methods	./python/m5/SimObject.py	/^    def export_methods(cls, code):$/;"	f
export_methods	./python/m5/SimObject.py	/^    def export_methods(cls, code):$/;"	m	class:MetaSimObject
export_methods	./sim/Process.py	/^    def export_methods(cls, code):$/;"	m	class:Process
export_methods	./sim/System.py	/^    def export_methods(cls, code):$/;"	m	class:System
exportfs	./kern/tru64/tru64_syscalls.hh	/^        exportfs = 169,$/;"	e	enum:SystemCalls::__anon102
expr	./cpu/TimingExpr.py	/^    expr = Param.TimingExpr("body expression")$/;"	v	class:TimingExprLet
expr	./cpu/timing_expr.hh	/^    TimingExpr *expr;$/;"	m	class:TimingExprLet
ext	./arch/arm/miscregs.hh	/^        Bitfield<12> ext;$/;"	m	namespace:ArmISA
ext	./arch/x86/insts/micromediaop.hh	/^        const uint8_t ext;$/;"	m	class:X86ISA::MediaOpBase
ext	./arch/x86/insts/microregop.hh	/^        const uint16_t ext;$/;"	m	class:X86ISA::RegOpBase
extEntries	./arch/x86/bios/intelmp.hh	/^    std::vector<ExtConfigEntry *> extEntries;$/;"	m	class:X86ISA::IntelMP::ConfigTable
extIntPic	./dev/x86/i82094aa.hh	/^    I8259 * extIntPic;$/;"	m	class:X86ISA::I82094AA
extIntVector	./arch/x86/interrupts.hh	/^    uint8_t extIntVector;$/;"	m	class:X86ISA::Interrupts
extNil	./base/loader/coff_sym.h	301;"	d
ext_arg	./kern/tru64/mbuf.hh	/^    Addr        ext_arg;        \/\/ 0x18$/;"	m	struct:tru64::m_ext
ext_buf	./kern/tru64/mbuf.hh	/^    Addr        ext_buf;        \/\/ 0x00$/;"	m	struct:tru64::m_ext
ext_data	./base/inet.hh	/^    } ext_data;$/;"	m	struct:Net::ip6_opt_hdr	typeref:union:Net::ip6_opt_hdr::__anon120
ext_entries	./arch/x86/bios/IntelMP.py	/^    ext_entries = VectorParam.X86IntelMPExtConfigEntry([],$/;"	v	class:X86IntelMPConfigTable
ext_free	./kern/tru64/mbuf.hh	/^    Addr        ext_free;       \/\/ 0x08$/;"	m	struct:tru64::m_ext
ext_inst	./arch/alpha/decoder.hh	/^    ExtMachInst ext_inst;$/;"	m	class:AlphaISA::Decoder
ext_len	./base/inet.hh	/^    uint8_t ext_len;$/;"	m	struct:Net::ip6_opt_hdr
ext_links	./mem/ruby/network/Network.py	/^    ext_links = VectorParam.BasicExtLink("Links to external nodes")$/;"	v	class:RubyNetwork
ext_node	./mem/ruby/network/BasicLink.py	/^    ext_node = Param.RubyController("External node")$/;"	v	class:BasicExtLink
ext_nxt	./base/inet.hh	/^    uint8_t ext_nxt;$/;"	m	struct:Net::ip6_opt_hdr
ext_pad0	./kern/tru64/mbuf.hh	/^    uint32_t    ext_pad0;       \/\/ 0x14$/;"	m	struct:tru64::m_ext
ext_ref	./kern/tru64/mbuf.hh	/^    } ext_ref;$/;"	m	struct:tru64::m_ext	typeref:struct:tru64::m_ext::ext_refq
ext_refq	./kern/tru64/mbuf.hh	/^    struct      ext_refq {$/;"	s	struct:tru64::m_ext
ext_size	./kern/tru64/mbuf.hh	/^    uint32_t    ext_size;       \/\/ 0x10$/;"	m	struct:tru64::m_ext
extend	./python/m5/util/region.py	/^    def extend(self, *args):$/;"	m	class:Regions
extendMask	./base/trie.hh	/^    extendMask(Key orig)$/;"	f	class:Trie
extendReg64	./arch/arm/insts/static_inst.cc	/^ArmStaticInst::extendReg64(uint64_t base, ArmExtendType type,$/;"	f	class:ArmISA::ArmStaticInst
extendType	./arch/arm/insts/data64.hh	/^    ArmExtendType extendType;$/;"	m	class:ArmISA::DataXERegOp
extend_shortest_path	./mem/ruby/network/Topology.cc	/^Topology::extend_shortest_path(Matrix &current_dist, Matrix &latencies,$/;"	f	class:Topology
extensionLength	./base/inet.cc	/^Ip6Hdr::extensionLength() const$/;"	f	class:Net::Ip6Hdr
externalPort	./mem/external_master.hh	/^    Port *externalPort;$/;"	m	class:ExternalMaster
externalPort	./mem/external_slave.hh	/^    Port *externalPort;$/;"	m	class:ExternalSlave
external_int_pic	./dev/x86/I82094AA.py	/^    external_int_pic = Param.I8259(NULL, "External PIC, if any")$/;"	v	class:I82094AA
extlen	./base/inet.hh	/^    uint8_t extlen() const { return ext_len; }$/;"	f	struct:Net::Ip6Opt
extraAssumedLat	./cpu/minor/MinorCPU.py	/^    extraAssumedLat = Param.Cycles(0, "extra cycles to add to scoreboard"$/;"	v	class:MinorFUTiming
extraAssumedLat	./cpu/minor/func_unit.hh	/^    Cycles extraAssumedLat;$/;"	m	class:MinorFUTiming
extraCommitDelay	./cpu/minor/dyn_inst.hh	/^    Cycles extraCommitDelay;$/;"	m	class:Minor::MinorDynInst
extraCommitDelayExpr	./cpu/minor/dyn_inst.hh	/^    TimingExpr *extraCommitDelayExpr;$/;"	m	class:Minor::MinorDynInst
extraCommitLat	./cpu/minor/MinorCPU.py	/^    extraCommitLat = Param.Cycles(0, "extra cycles to stall commit for"$/;"	v	class:MinorFUTiming
extraCommitLat	./cpu/minor/func_unit.hh	/^    Cycles extraCommitLat;$/;"	m	class:MinorFUTiming
extraCommitLatExpr	./cpu/minor/MinorCPU.py	/^    extraCommitLatExpr = Param.TimingExpr(NULL, "extra cycles as a"$/;"	v	class:MinorFUTiming
extraCommitLatExpr	./cpu/minor/func_unit.hh	/^    TimingExpr *extraCommitLatExpr;$/;"	m	class:MinorFUTiming
extraDataValid	./mem/request.hh	/^    extraDataValid() const$/;"	f	class:Request
extraSegments	./base/loader/elf_object.hh	/^    std::vector<Segment> extraSegments;$/;"	m	class:ElfObject
extractBlkOffset	./mem/cache/tags/base.hh	/^    int extractBlkOffset(Addr addr) const$/;"	f	class:BaseTags
extractConfig	./mem/dramsim2_wrapper.cc	/^DRAMSim2Wrapper::extractConfig(const std::string& field_name,$/;"	f	class:DRAMSim2Wrapper
extsts	./dev/net/ns_gige_reg.h	/^    uint32_t extsts;  \/* extended status field for VLAN and IP info *\/$/;"	m	struct:ns_desc32
extsts	./dev/net/ns_gige_reg.h	/^    uint32_t extsts;  \/* extended status field for VLAN and IP info *\/$/;"	m	struct:ns_desc64
extstsEnable	./dev/net/ns_gige.hh	/^    bool extstsEnable;$/;"	m	class:NSGigE
ezf	./arch/x86/regs/misc.hh	/^        Bitfield<5> ezf;$/;"	m	namespace:X86ISA
f	./arch/arm/kvm/armv8_cpu.cc	/^        double f;$/;"	m	union:KvmFPReg::__anon81	file:
f	./arch/arm/kvm/armv8_cpu.cc	/^        float f;$/;"	m	union:KvmFPReg::__anon80	file:
f	./arch/arm/miscregs.hh	/^        Bitfield<0>      f;$/;"	m	namespace:ArmISA
f	./arch/arm/miscregs.hh	/^        Bitfield<6> f;$/;"	m	namespace:ArmISA
f	./base/loader/exec_ecoff.h	/^        struct ecoff_filehdr f;$/;"	m	struct:ecoff_exechdr	typeref:struct:ecoff_exechdr::ecoff_filehdr
f	./cpu/simple_thread.hh	/^        FloatReg f[TheISA::NumFloatRegs];$/;"	m	union:SimpleThread::__anon33
f	./python/m5/util/code_formatter.py	/^    f = code_formatter()$/;"	v	class:code_formatter
f1	./unittest/stattest.cc	/^    Formula f1;$/;"	m	struct:StatTest	file:
f1ToF2	./cpu/minor/pipeline.hh	/^    Latch<ForwardLineData> f1ToF2;$/;"	m	class:Minor::Pipeline
f2	./unittest/stattest.cc	/^    Formula f2;$/;"	m	struct:StatTest	file:
f2ToD	./cpu/minor/pipeline.hh	/^    Latch<ForwardInstData> f2ToD;$/;"	m	class:Minor::Pipeline
f2ToF1	./cpu/minor/pipeline.hh	/^    Latch<BranchData> f2ToF1;$/;"	m	class:Minor::Pipeline
f3	./unittest/stattest.cc	/^    Formula f3;$/;"	m	struct:StatTest	file:
f4	./unittest/stattest.cc	/^    Formula f4;$/;"	m	struct:StatTest	file:
f5	./unittest/stattest.cc	/^    Formula f5;$/;"	m	struct:StatTest	file:
f6	./unittest/stattest.cc	/^    Formula f6;$/;"	m	struct:StatTest	file:
fBigendian	./base/loader/coff_sym.h	/^    unsigned fBigendian : 1;\/* if set, was compiled on big endian machine *\/$/;"	m	struct:ecoff_fdr
fBitfield	./base/loader/coff_sym.h	/^    unsigned fBitfield : 1; \/* set if bit width is specified *\/$/;"	m	struct:__anon112
fMerge	./base/loader/coff_sym.h	/^    unsigned fMerge : 1;        \/* whether this file can be merged *\/$/;"	m	struct:ecoff_fdr
fReadin	./base/loader/coff_sym.h	/^    unsigned fReadin : 1;       \/* true if it was read in (not just created) *\/$/;"	m	struct:ecoff_fdr
f_bavail	./kern/tru64/tru64.hh	/^        int32_t     f_bavail;$/;"	m	struct:Tru64::pre_F64_statfs
f_bavail	./kern/tru64/tru64.hh	/^        int64_t    f_bavail;$/;"	m	struct:Tru64::F64_statfs
f_bfree	./kern/tru64/tru64.hh	/^        int32_t     f_bfree;$/;"	m	struct:Tru64::pre_F64_statfs
f_bfree	./kern/tru64/tru64.hh	/^        int64_t    f_bfree;$/;"	m	struct:Tru64::F64_statfs
f_blocks	./kern/tru64/tru64.hh	/^        int32_t     f_blocks;$/;"	m	struct:Tru64::pre_F64_statfs
f_blocks	./kern/tru64/tru64.hh	/^        int64_t    f_blocks;$/;"	m	struct:Tru64::F64_statfs
f_bsize	./kern/tru64/tru64.hh	/^        int32_t     f_bsize;$/;"	m	struct:Tru64::pre_F64_statfs
f_bsize	./kern/tru64/tru64.hh	/^        int64_t    f_bsize;$/;"	m	struct:Tru64::F64_statfs
f_ffree	./kern/tru64/tru64.hh	/^        int32_t     f_ffree;$/;"	m	struct:Tru64::pre_F64_statfs
f_ffree	./kern/tru64/tru64.hh	/^        int64_t    f_ffree;$/;"	m	struct:Tru64::F64_statfs
f_files	./kern/tru64/tru64.hh	/^        int32_t     f_files;$/;"	m	struct:Tru64::pre_F64_statfs
f_files	./kern/tru64/tru64.hh	/^        int64_t    f_files;$/;"	m	struct:Tru64::F64_statfs
f_flags	./base/loader/exec_ecoff.h	/^        coff_ushort f_flags;	\/* flags??? *\/$/;"	m	struct:ecoff_filehdr
f_flags	./kern/tru64/tru64.hh	/^        int16_t   f_flags;$/;"	m	struct:Tru64::F64_statfs
f_flags	./kern/tru64/tru64.hh	/^        int16_t   f_flags;$/;"	m	struct:Tru64::pre_F64_statfs
f_flags2	./kern/tru64/tru64.hh	/^        uint64_t  f_flags2;$/;"	m	struct:Tru64::F64_statfs
f_fsid	./kern/tru64/tru64.hh	/^        fsid_t  f_fsid;$/;"	m	struct:Tru64::F64_statfs
f_fsid	./kern/tru64/tru64.hh	/^        fsid_t  f_fsid;$/;"	m	struct:Tru64::pre_F64_statfs
f_fsize	./kern/tru64/tru64.hh	/^        int32_t     f_fsize;$/;"	m	struct:Tru64::pre_F64_statfs
f_fsize	./kern/tru64/tru64.hh	/^        int64_t    f_fsize;$/;"	m	struct:Tru64::F64_statfs
f_magic	./base/loader/exec_ecoff.h	/^        coff_ushort f_magic;	\/* magic number *\/$/;"	m	struct:ecoff_filehdr
f_mntfromname	./kern/tru64/tru64.hh	/^        char    f_mntfromname[1024];$/;"	m	struct:Tru64::F64_statfs
f_mntfromname	./kern/tru64/tru64.hh	/^        char    f_mntfromname[90];$/;"	m	struct:Tru64::pre_F64_statfs
f_mntonname	./kern/tru64/tru64.hh	/^        char    f_mntonname[1024];$/;"	m	struct:Tru64::F64_statfs
f_mntonname	./kern/tru64/tru64.hh	/^        char    f_mntonname[90];$/;"	m	struct:Tru64::pre_F64_statfs
f_nscns	./base/loader/exec_ecoff.h	/^        coff_ushort f_nscns;	\/* # of sections *\/$/;"	m	struct:ecoff_filehdr
f_nsyms	./base/loader/exec_ecoff.h	/^        coff_uint   f_nsyms;	\/* # of symbol table entries *\/$/;"	m	struct:ecoff_filehdr
f_opthdr	./base/loader/exec_ecoff.h	/^        coff_ushort f_opthdr;	\/* sizeof the optional header *\/$/;"	m	struct:ecoff_filehdr
f_retired1	./kern/tru64/tru64.hh	/^        int32_t     f_retired1;$/;"	m	struct:Tru64::F64_statfs
f_retired2	./kern/tru64/tru64.hh	/^        int32_t     f_retired2;$/;"	m	struct:Tru64::F64_statfs
f_retired3	./kern/tru64/tru64.hh	/^        int32_t     f_retired3;$/;"	m	struct:Tru64::F64_statfs
f_retired4	./kern/tru64/tru64.hh	/^        int32_t     f_retired4;$/;"	m	struct:Tru64::F64_statfs
f_retired5	./kern/tru64/tru64.hh	/^        int32_t     f_retired5;$/;"	m	struct:Tru64::F64_statfs
f_retired6	./kern/tru64/tru64.hh	/^        int32_t     f_retired6;$/;"	m	struct:Tru64::F64_statfs
f_retired7	./kern/tru64/tru64.hh	/^        int32_t     f_retired7;$/;"	m	struct:Tru64::F64_statfs
f_retired8	./kern/tru64/tru64.hh	/^        char    f_retired8[90];$/;"	m	struct:Tru64::F64_statfs
f_retired9	./kern/tru64/tru64.hh	/^        char    f_retired9[90];$/;"	m	struct:Tru64::F64_statfs
f_spare	./kern/tru64/tru64.hh	/^        int32_t     f_spare[9];$/;"	m	struct:Tru64::F64_statfs
f_spare	./kern/tru64/tru64.hh	/^        int32_t     f_spare[9];$/;"	m	struct:Tru64::pre_F64_statfs
f_spare2	./kern/tru64/tru64.hh	/^        int64_t    f_spare2[14];$/;"	m	struct:Tru64::F64_statfs
f_symptr	./base/loader/exec_ecoff.h	/^        coff_ulong  f_symptr;	\/* file offset of symbol table *\/$/;"	m	struct:ecoff_filehdr
f_timdat	./base/loader/exec_ecoff.h	/^        coff_uint   f_timdat;	\/* time and date stamp *\/$/;"	m	struct:ecoff_filehdr
f_type	./kern/tru64/tru64.hh	/^        int16_t   f_type;$/;"	m	struct:Tru64::F64_statfs
f_type	./kern/tru64/tru64.hh	/^        int16_t   f_type;$/;"	m	struct:Tru64::pre_F64_statfs
faccessatFunc	./sim/syscall_emul.hh	/^faccessatFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
factor	./base/framebuffer.hh	/^        float factor;$/;"	m	struct:PixelConverter::Channel
failed	./dev/virtio/base.hh	/^        Bitfield<7> failed;$/;"	m	class:VirtIODeviceBase
failedTiming	./mem/xbar.cc	/^BaseXBar::Layer<SrcType,DstType>::failedTiming(SrcType* src_port,$/;"	f	class:BaseXBar::Layer
failures	./unittest/unittest.cc	/^unsigned failures() { return _failures; }$/;"	f	namespace:UnitTest
fake_OROM	./dev/alpha/Tsunami.py	/^    fake_OROM = IsaFake(pio_addr=0x800000a0000, pio_size=0x60000)$/;"	v	class:Tsunami
fake_ata0	./dev/alpha/Tsunami.py	/^    fake_ata0 = IsaFake(pio_addr=0x801fc0001f0)$/;"	v	class:Tsunami
fake_ata1	./dev/alpha/Tsunami.py	/^    fake_ata1 = IsaFake(pio_addr=0x801fc000170)$/;"	v	class:Tsunami
fake_clk	./dev/sparc/T1000.py	/^    fake_clk = IsaFake(pio_addr=0x9600000000, pio_size=0x100000000)$/;"	v	class:T1000
fake_com_2	./dev/x86/Pc.py	/^    fake_com_2 = IsaFake(pio_addr=x86IOAddress(0x2f8), pio_size=8)$/;"	v	class:Pc
fake_com_3	./dev/x86/Pc.py	/^    fake_com_3 = IsaFake(pio_addr=x86IOAddress(0x3e8), pio_size=8)$/;"	v	class:Pc
fake_com_4	./dev/x86/Pc.py	/^    fake_com_4 = IsaFake(pio_addr=x86IOAddress(0x2e8), pio_size=8)$/;"	v	class:Pc
fake_floppy	./dev/x86/Pc.py	/^    fake_floppy = IsaFake(pio_addr=x86IOAddress(0x3f2), pio_size=2)$/;"	v	class:Pc
fake_jbi	./dev/sparc/T1000.py	/^    fake_jbi = IsaFake(pio_addr=0x8000000000, pio_size=0x100000000)$/;"	v	class:T1000
fake_l2_1	./dev/sparc/T1000.py	/^    fake_l2_1 = IsaFake(pio_addr=0xA900000000, pio_size=0x8,$/;"	v	class:T1000
fake_l2_2	./dev/sparc/T1000.py	/^    fake_l2_2 = IsaFake(pio_addr=0xA900000040, pio_size=0x8,$/;"	v	class:T1000
fake_l2_3	./dev/sparc/T1000.py	/^    fake_l2_3 = IsaFake(pio_addr=0xA900000080, pio_size=0x8,$/;"	v	class:T1000
fake_l2_4	./dev/sparc/T1000.py	/^    fake_l2_4 = IsaFake(pio_addr=0xA9000000C0, pio_size=0x8,$/;"	v	class:T1000
fake_l2esr_1	./dev/sparc/T1000.py	/^    fake_l2esr_1 = IsaFake(pio_addr=0xAB00000000, pio_size=0x8,$/;"	v	class:T1000
fake_l2esr_2	./dev/sparc/T1000.py	/^    fake_l2esr_2 = IsaFake(pio_addr=0xAB00000040, pio_size=0x8,$/;"	v	class:T1000
fake_l2esr_3	./dev/sparc/T1000.py	/^    fake_l2esr_3 = IsaFake(pio_addr=0xAB00000080, pio_size=0x8,$/;"	v	class:T1000
fake_l2esr_4	./dev/sparc/T1000.py	/^    fake_l2esr_4 = IsaFake(pio_addr=0xAB000000C0, pio_size=0x8,$/;"	v	class:T1000
fake_mem	./dev/Device.py	/^    fake_mem = Param.Bool(False,$/;"	v	class:IsaFake
fake_mem	./dev/arm/RealView.py	/^                            fake_mem=True)$/;"	v	class:RealViewEB
fake_mem	./dev/arm/RealView.py	/^                            fake_mem=True)$/;"	v	class:RealViewPBX
fake_membnks	./dev/sparc/T1000.py	/^    fake_membnks = IsaFake(pio_addr=0x9700000000, pio_size=16384,$/;"	v	class:T1000
fake_pnp_addr	./dev/alpha/Tsunami.py	/^    fake_pnp_addr = IsaFake(pio_addr=0x801fc000279)$/;"	v	class:Tsunami
fake_pnp_read0	./dev/alpha/Tsunami.py	/^    fake_pnp_read0 = IsaFake(pio_addr=0x801fc000203)$/;"	v	class:Tsunami
fake_pnp_read1	./dev/alpha/Tsunami.py	/^    fake_pnp_read1 = IsaFake(pio_addr=0x801fc000243)$/;"	v	class:Tsunami
fake_pnp_read2	./dev/alpha/Tsunami.py	/^    fake_pnp_read2 = IsaFake(pio_addr=0x801fc000283)$/;"	v	class:Tsunami
fake_pnp_read3	./dev/alpha/Tsunami.py	/^    fake_pnp_read3 = IsaFake(pio_addr=0x801fc0002c3)$/;"	v	class:Tsunami
fake_pnp_read4	./dev/alpha/Tsunami.py	/^    fake_pnp_read4 = IsaFake(pio_addr=0x801fc000303)$/;"	v	class:Tsunami
fake_pnp_read5	./dev/alpha/Tsunami.py	/^    fake_pnp_read5 = IsaFake(pio_addr=0x801fc000343)$/;"	v	class:Tsunami
fake_pnp_read6	./dev/alpha/Tsunami.py	/^    fake_pnp_read6 = IsaFake(pio_addr=0x801fc000383)$/;"	v	class:Tsunami
fake_pnp_read7	./dev/alpha/Tsunami.py	/^    fake_pnp_read7 = IsaFake(pio_addr=0x801fc0003c3)$/;"	v	class:Tsunami
fake_pnp_write	./dev/alpha/Tsunami.py	/^    fake_pnp_write = IsaFake(pio_addr=0x801fc000a79)$/;"	v	class:Tsunami
fake_ppc	./dev/alpha/Tsunami.py	/^    fake_ppc = IsaFake(pio_addr=0x801fc0003bb)$/;"	v	class:Tsunami
fake_sm_chip	./dev/alpha/Tsunami.py	/^    fake_sm_chip = IsaFake(pio_addr=0x801fc000370)$/;"	v	class:Tsunami
fake_ssi	./dev/sparc/T1000.py	/^    fake_ssi = IsaFake(pio_addr=0xff00000000, pio_size=0x10000000)$/;"	v	class:T1000
fake_uart1	./dev/alpha/Tsunami.py	/^    fake_uart1 = IsaFake(pio_addr=0x801fc0002f8)$/;"	v	class:Tsunami
fake_uart2	./dev/alpha/Tsunami.py	/^    fake_uart2 = IsaFake(pio_addr=0x801fc0003e8)$/;"	v	class:Tsunami
fake_uart3	./dev/alpha/Tsunami.py	/^    fake_uart3 = IsaFake(pio_addr=0x801fc0002e8)$/;"	v	class:Tsunami
fake_uart4	./dev/alpha/Tsunami.py	/^    fake_uart4 = IsaFake(pio_addr=0x801fc0003f0)$/;"	v	class:Tsunami
falseExpr	./cpu/TimingExpr.py	/^    falseExpr = Param.TimingExpr("false expression")$/;"	v	class:TimingExprIf
falseExpr	./cpu/timing_expr.hh	/^    TimingExpr *falseExpr;$/;"	m	class:TimingExprIf
family	./arch/x86/bios/IntelMP.py	/^    family = Param.UInt8(0, 'Processor family')$/;"	v	class:X86IntelMPProcessor
fastWrites	./mem/cache/base.hh	/^    Stats::Scalar fastWrites;$/;"	m	class:BaseCache
fastmem	./cpu/simple/AtomicSimpleCPU.py	/^    fastmem = Param.Bool(False, "Access memory directly")$/;"	v	class:AtomicSimpleCPU
fastmem	./cpu/simple/atomic.hh	/^    bool fastmem;$/;"	m	class:AtomicSimpleCPU
fatal	./base/misc.hh	113;"	d
fatal	./python/m5/util/__init__.py	/^def fatal(fmt, *args):$/;"	f
fatalSigStack	./sim/init_signals.cc	/^static uint8_t fatalSigStack[2 * SIGSTKSZ];$/;"	v	file:
fatal_if	./base/misc.hh	139;"	d
fault	./arch/arm/stage2_lookup.hh	/^    Fault                   fault;$/;"	m	class:ArmISA::Stage2LookUp
fault	./arch/arm/stage2_mmu.hh	/^        Fault fault;$/;"	m	class:ArmISA::Stage2MMU::Stage2Translation
fault	./arch/arm/table_walker.hh	/^        Fault fault;$/;"	m	class:ArmISA::TableWalker::WalkerState
fault	./arch/mips/isa.hh	/^            Fault fault;$/;"	m	class:MipsISA::ISA::CP0Event
fault	./cpu/base_dyn_inst.hh	/^    Fault fault;$/;"	m	class:BaseDynInst
fault	./cpu/minor/dyn_inst.hh	/^    Fault fault;$/;"	m	class:Minor::MinorDynInst
fault	./cpu/minor/fetch1.hh	/^        Fault fault;$/;"	m	class:Minor::Fetch1::FetchRequest
fault	./cpu/minor/lsq.hh	/^        Fault fault;$/;"	m	class:Minor::LSQ::LSQRequest
fault	./cpu/minor/pipe_data.hh	/^    Fault fault;$/;"	m	class:Minor::ForwardLineData
fault	./cpu/o3/fetch.hh	/^        Fault fault;$/;"	m	class:DefaultFetch::FinishTranslationEvent
faultAddr	./arch/arm/faults.hh	/^    Addr faultAddr;$/;"	m	class:ArmISA::AbortFault
faultId	./arch/arm/insts/pseudo.hh	/^    DecoderFault faultId;$/;"	m	class:DecoderFaultInst
faultName	./arch/arm/insts/pseudo.cc	/^DecoderFaultInst::faultName() const$/;"	f	class:DecoderFaultInst
faultName	./arch/x86/faults.hh	/^        const char * faultName;$/;"	m	class:X86ISA::X86FaultBase
faultPC	./arch/arm/faults.hh	/^    Addr faultPC;$/;"	m	class:ArmISA::PCAlignmentFault
fault_model	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    FaultModel* fault_model;$/;"	m	class:BaseGarnetNetwork
fault_model	./mem/ruby/network/garnet/BaseGarnetNetwork.py	/^    fault_model = Param.FaultModel(NULL, "network fault model");$/;"	v	class:BaseGarnetNetwork
fault_prob	./mem/ruby/network/fault_model/FaultModel.cc	/^FaultModel::fault_prob(int routerID, $/;"	f	class:FaultModel
fault_type	./mem/ruby/network/fault_model/FaultModel.hh	/^        float fault_type[number_of_fault_types];$/;"	m	struct:FaultModel::system_conf
fault_type	./mem/ruby/network/fault_model/FaultModel.hh	/^    enum fault_type $/;"	g	class:FaultModel
fault_type_to_string	./mem/ruby/network/fault_model/FaultModel.cc	/^FaultModel::fault_type_to_string(int ft)$/;"	f	class:FaultModel
fault_vector	./mem/ruby/network/fault_model/FaultModel.cc	/^FaultModel::fault_vector(int routerID, $/;"	f	class:FaultModel
faults	./cpu/translation.hh	/^    Fault faults[2];$/;"	m	class:WholeTranslationState
fb	./arch/arm/miscregs.hh	/^        Bitfield<9>      fb;$/;"	m	namespace:ArmISA
fb	./base/bitmap.hh	/^    const FrameBuffer &fb;$/;"	m	class:Bitmap
fb	./base/vnc/vncinput.hh	/^    const FrameBuffer *fb;$/;"	m	class:VncInput
fb	./dev/alpha/Tsunami.py	/^    fb = BadDevice(pio_addr=0x801fc0003d0, devicename='FrameBuffer')$/;"	v	class:Tsunami
fb	./dev/arm/pl111.hh	/^    FrameBuffer fb;$/;"	m	class:Pl111
fb	./dev/pixelpump.hh	/^    FrameBuffer fb;$/;"	m	class:BasePixelPump
fbHeight	./base/vnc/vncserver.hh	/^        uint16_t fbHeight;$/;"	m	struct:VncServer::ServerInitMsg
fbWidth	./base/vnc/vncserver.hh	/^        uint16_t fbWidth;$/;"	m	struct:VncServer::ServerInitMsg
fb_base	./dev/arm/hdlcd.hh	/^    uint32_t fb_base;               \/**< Frame buffer base address register *\/$/;"	m	class:HDLcd
fb_line_count	./dev/arm/hdlcd.hh	/^        Bitfield<11,0>  fb_line_count;$/;"	m	class:HDLcd
fb_line_count	./dev/arm/hdlcd.hh	/^    FbLineCountReg fb_line_count;   \/**< Frame buffer Line count register *\/$/;"	m	class:HDLcd
fb_line_length	./dev/arm/hdlcd.hh	/^    uint32_t fb_line_length;        \/**< Frame buffer Line length register *\/$/;"	m	class:HDLcd
fb_line_pitch	./dev/arm/hdlcd.hh	/^    int32_t fb_line_pitch;          \/**< Frame buffer Line pitch register *\/$/;"	m	class:HDLcd
fbrd	./dev/arm/pl011.hh	/^    uint16_t fbrd;$/;"	m	class:Pl011
fchdir	./kern/tru64/tru64_syscalls.hh	/^        fchdir = 13,$/;"	e	enum:SystemCalls::__anon102
fchflags	./kern/tru64/tru64_syscalls.hh	/^        fchflags = 35,$/;"	e	enum:SystemCalls::__anon102
fchmod	./kern/tru64/tru64_syscalls.hh	/^        fchmod = 124,$/;"	e	enum:SystemCalls::__anon102
fchmodFunc	./sim/syscall_emul.hh	/^fchmodFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
fchown	./kern/tru64/tru64_syscalls.hh	/^        fchown = 123,$/;"	e	enum:SystemCalls::__anon102
fchownFunc	./sim/syscall_emul.cc	/^fchownFunc(SyscallDesc *desc, int num, LiveProcess *process, ThreadContext *tc)$/;"	f
fcntl	./cpu/kvm/perfevent.cc	/^PerfKvmCounter::fcntl(int cmd, long p1)$/;"	f	class:PerfKvmCounter
fcntl	./cpu/kvm/perfevent.hh	/^    int fcntl(int cmd, void *p1) { return fcntl(cmd, (long)p1); }$/;"	f	class:PerfKvmCounter
fcntl	./kern/tru64/tru64_syscalls.hh	/^        fcntl = 92,$/;"	e	enum:SystemCalls::__anon102
fcntl64Func	./sim/syscall_emul.cc	/^fcntl64Func(SyscallDesc *desc, int num, LiveProcess *process,$/;"	f
fcntlFunc	./sim/syscall_emul.cc	/^fcntlFunc(SyscallDesc *desc, int num, LiveProcess *process,$/;"	f
fcrth	./dev/net/i8254xGBe_defs.hh	/^    FCRTH fcrth;$/;"	m	struct:iGbReg::Regs
fcrtl	./dev/net/i8254xGBe_defs.hh	/^    FCRTL fcrtl;$/;"	m	struct:iGbReg::Regs
fcttv	./dev/net/i8254xGBe_defs.hh	/^    FCTTV fcttv;$/;"	m	struct:iGbReg::Regs
fcw	./cpu/kvm/x86_cpu.cc	/^    uint16_t fcw;$/;"	m	struct:FXSave	file:
fd	./arch/arm/types.hh	/^        Bitfield<14, 12> fd;$/;"	m	namespace:ArmISA
fd	./base/remote_gdb.hh	/^    int fd;$/;"	m	class:BaseRemoteGDB
fd	./base/socket.hh	/^    int fd;$/;"	m	class:ListenSocket
fd	./cpu/kvm/device.hh	/^    int fd;$/;"	m	class:KvmDevice
fd	./cpu/kvm/perfevent.hh	/^    int fd;$/;"	m	class:PerfKvmCounter
fd	./cpu/nativetrace.hh	/^    int fd;$/;"	m	class:Trace::NativeTrace
fd	./sim/fd_entry.hh	/^    int fd;$/;"	m	class:FDEntry
fdNil	./base/loader/coff_sym.h	176;"	d
fdSocket	./dev/virtio/fs9p.hh	/^    int fdSocket;$/;"	m	class:VirtIO9PSocket
fdStatic	./dev/net/tcp_iface.cc	/^int TCPIface::fdStatic = -1;$/;"	m	class:TCPIface	file:
fdStatic	./dev/net/tcp_iface.hh	/^    static int fdStatic;$/;"	m	class:TCPIface
fd_array	./sim/process.hh	/^    std::shared_ptr<std::array<FDEntry, NUM_FDS>> fd_array;$/;"	m	class:Process
fd_from_diod	./dev/virtio/fs9p.hh	/^    int fd_from_diod;$/;"	m	class:VirtIO9PDiod
fd_to_diod	./dev/virtio/fs9p.hh	/^    int fd_to_diod;$/;"	m	class:VirtIO9PDiod
fdatasync	./kern/tru64/tru64_syscalls.hh	/^        fdatasync = 261,$/;"	e	enum:SystemCalls::__anon102
fe	./arch/power/miscregs.hh	/^            Bitfield<13> fe;$/;"	m	namespace:PowerISA
fe	./arch/x86/regs/misc.hh	/^        Bitfield<10> fe; \/\/ Fixed range enable$/;"	m	namespace:X86ISA
featureFlags	./arch/x86/bios/intelmp.hh	/^    uint32_t featureFlags;$/;"	m	class:X86ISA::IntelMP::Processor
feature_flags	./arch/x86/bios/IntelMP.py	/^    feature_flags = Param.UInt32(0, 'flags returned by the CPUID instruction')$/;"	v	class:X86IntelMPProcessor
femto	./python/m5/util/convert.py	/^femto = 1.0e-15$/;"	v
fetch	./arch/x86/faults.hh	/^            Bitfield<4> fetch;$/;"	m	class:X86ISA::PageFault
fetch	./cpu/minor/fetch1.hh	/^        Fetch1 &fetch;$/;"	m	class:Minor::Fetch1::FetchRequest
fetch	./cpu/minor/fetch1.hh	/^        Fetch1 &fetch;$/;"	m	class:Minor::Fetch1::IcachePort
fetch	./cpu/o3/cpu.hh	/^        DefaultFetch<Impl> *fetch;$/;"	m	class:FullO3CPU::IcachePort
fetch	./cpu/o3/cpu.hh	/^    typename CPUPolicy::Fetch fetch;$/;"	m	class:FullO3CPU
fetch	./cpu/o3/fetch.hh	/^        DefaultFetch<Impl> *fetch;$/;"	m	class:DefaultFetch::FetchTranslation
fetch	./cpu/o3/fetch.hh	/^        DefaultFetch<Impl> *fetch;$/;"	m	class:DefaultFetch::FinishTranslationEvent
fetch	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::fetch(bool &status_change)$/;"	f	class:DefaultFetch
fetch	./cpu/simple/timing.cc	/^TimingSimpleCPU::fetch()$/;"	f	class:TimingSimpleCPU
fetch1	./cpu/minor/pipeline.hh	/^    Fetch1 fetch1;$/;"	m	class:Minor::Pipeline
fetch1FetchLimit	./cpu/minor/MinorCPU.py	/^    fetch1FetchLimit = Param.Unsigned(1,$/;"	v	class:MinorCPU
fetch1LineSnapWidth	./cpu/minor/MinorCPU.py	/^    fetch1LineSnapWidth = Param.Unsigned(0,$/;"	v	class:MinorCPU
fetch1LineWidth	./cpu/minor/MinorCPU.py	/^    fetch1LineWidth = Param.Unsigned(0,$/;"	v	class:MinorCPU
fetch1ToFetch2BackwardDelay	./cpu/minor/MinorCPU.py	/^    fetch1ToFetch2BackwardDelay = Param.Cycles(1,$/;"	v	class:MinorCPU
fetch1ToFetch2ForwardDelay	./cpu/minor/MinorCPU.py	/^    fetch1ToFetch2ForwardDelay = Param.Cycles(1,$/;"	v	class:MinorCPU
fetch2	./cpu/minor/pipeline.hh	/^    Fetch2 fetch2;$/;"	m	class:Minor::Pipeline
fetch2CycleInput	./cpu/minor/MinorCPU.py	/^    fetch2CycleInput = Param.Bool(True,$/;"	v	class:MinorCPU
fetch2InputBufferSize	./cpu/minor/MinorCPU.py	/^    fetch2InputBufferSize = Param.Unsigned(2,$/;"	v	class:MinorCPU
fetch2ToDecodeForwardDelay	./cpu/minor/MinorCPU.py	/^    fetch2ToDecodeForwardDelay = Param.Cycles(1,$/;"	v	class:MinorCPU
fetchAddrComplete	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::fetchAddrComplete()$/;"	f	class:CopyEngine::CopyEngineChannel
fetchAddress	./dev/pci/copy_engine.hh	/^        Addr fetchAddress;$/;"	m	class:CopyEngine::CopyEngineChannel
fetchBlockedCycles	./cpu/o3/fetch.hh	/^    Stats::Scalar fetchBlockedCycles;$/;"	m	class:DefaultFetch
fetchBuf	./dev/net/i8254xGBe.hh	/^        T *fetchBuf;$/;"	m	class:IGbE::DescCache
fetchBuffer	./cpu/o3/fetch.hh	/^    uint8_t *fetchBuffer[Impl::MaxThreads];$/;"	m	class:DefaultFetch
fetchBufferAlignPC	./cpu/o3/fetch.hh	/^    Addr fetchBufferAlignPC(Addr addr)$/;"	f	class:DefaultFetch
fetchBufferMask	./cpu/o3/fetch.hh	/^    Addr fetchBufferMask;$/;"	m	class:DefaultFetch
fetchBufferPC	./cpu/o3/fetch.hh	/^    Addr fetchBufferPC[Impl::MaxThreads];$/;"	m	class:DefaultFetch
fetchBufferSize	./cpu/o3/O3CPU.py	/^    fetchBufferSize = Param.Unsigned(64, "Fetch buffer size in bytes")$/;"	v	class:DerivO3CPU
fetchBufferSize	./cpu/o3/fetch.hh	/^    unsigned fetchBufferSize;$/;"	m	class:DefaultFetch
fetchBufferValid	./cpu/o3/fetch.hh	/^    bool fetchBufferValid[Impl::MaxThreads];$/;"	m	class:DefaultFetch
fetchCacheLine	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::fetchCacheLine(Addr vaddr, ThreadID tid, Addr pc)$/;"	f	class:DefaultFetch
fetchChunk	./arch/x86/decoder.hh	/^    MachInst fetchChunk;$/;"	m	class:X86ISA::Decoder
fetchCompDelay	./dev/net/i8254xGBe.hh	/^    Tick fetchCompDelay, wbCompDelay;$/;"	m	class:IGbE
fetchComplete	./dev/net/i8254xGBe.cc	/^IGbE::DescCache<T>::fetchComplete()$/;"	f	class:IGbE::DescCache
fetchCompleteEvent	./dev/pci/copy_engine.hh	/^            fetchCompleteEvent;$/;"	m	class:CopyEngine::CopyEngineChannel
fetchCycles	./cpu/o3/fetch.hh	/^    Stats::Scalar fetchCycles;$/;"	m	class:DefaultFetch
fetchDelay	./dev/net/i8254xGBe.hh	/^    Tick fetchDelay, wbDelay;$/;"	m	class:IGbE
fetchDelayEvent	./dev/net/i8254xGBe.hh	/^        EventWrapper<DescCache, &DescCache::fetchDescriptors1> fetchDelayEvent;$/;"	m	class:IGbE::DescCache
fetchDescComplete	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::fetchDescComplete()$/;"	f	class:CopyEngine::CopyEngineChannel
fetchDescriptor	./arch/arm/table_walker.cc	/^TableWalker::fetchDescriptor(Addr descAddr, uint8_t *data, int numBytes,$/;"	f	class:TableWalker
fetchDescriptor	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::fetchDescriptor(Addr address)$/;"	f	class:CopyEngine::CopyEngineChannel
fetchDescriptors	./dev/net/i8254xGBe.cc	/^IGbE::DescCache<T>::fetchDescriptors()$/;"	f	class:IGbE::DescCache
fetchDescriptors1	./dev/net/i8254xGBe.cc	/^IGbE::DescCache<T>::fetchDescriptors1()$/;"	f	class:IGbE::DescCache
fetchEvent	./cpu/simple/timing.hh	/^    FetchEvent fetchEvent;$/;"	m	class:TimingSimpleCPU
fetchEvent	./dev/net/i8254xGBe.hh	/^        EventWrapper<DescCache, &DescCache::fetchComplete> fetchEvent;$/;"	m	class:IGbE::DescCache
fetchFault	./cpu/o3/comm.hh	/^    Fault fetchFault;$/;"	m	struct:DefaultFetchDefaultDecode
fetchFaultSN	./cpu/o3/comm.hh	/^    InstSeqNum fetchFaultSN;$/;"	m	struct:DefaultFetchDefaultDecode
fetchIcacheSquashes	./cpu/o3/fetch.hh	/^    Stats::Scalar fetchIcacheSquashes;$/;"	m	class:DefaultFetch
fetchIcacheWaitRetryStallCycles	./cpu/o3/fetch.hh	/^    Stats::Scalar fetchIcacheWaitRetryStallCycles;$/;"	m	class:DefaultFetch
fetchIdleCycles	./cpu/o3/fetch.hh	/^    Stats::Scalar fetchIdleCycles;$/;"	m	class:DefaultFetch
fetchInstsValid	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::fetchInstsValid()$/;"	f	class:DefaultDecode
fetchLimit	./cpu/minor/fetch1.hh	/^    unsigned int fetchLimit;$/;"	m	class:Minor::Fetch1
fetchLine	./cpu/minor/fetch1.cc	/^Fetch1::fetchLine()$/;"	f	class:Minor::Fetch1
fetchMicroop	./arch/arm/insts/mem.hh	/^    fetchMicroop(MicroPC microPC) const$/;"	f	class:ArmISA::Memory
fetchMicroop	./arch/arm/insts/mem.hh	/^    fetchMicroop(MicroPC microPC) const$/;"	f	class:ArmISA::RfeOp
fetchMicroop	./arch/arm/insts/mem.hh	/^    fetchMicroop(MicroPC microPC) const$/;"	f	class:ArmISA::SrsOp
fetchMicroop	./arch/arm/insts/mem64.hh	/^    fetchMicroop(MicroPC microPC) const$/;"	f	class:ArmISA::Memory64
fetchMicroop	./arch/arm/insts/pred_inst.hh	/^    fetchMicroop(MicroPC microPC) const$/;"	f	class:ArmISA::PredMacroOp
fetchMicroop	./arch/x86/insts/macroop.hh	/^    fetchMicroop(MicroPC microPC) const$/;"	f	class:X86ISA::MacroopBase
fetchMicroop	./arch/x86/microcode_rom.hh	/^        fetchMicroop(MicroPC microPC, StaticInstPtr curMacroop)$/;"	f	class:X86ISAInst::MicrocodeRom
fetchMicroop	./cpu/static_inst.cc	/^StaticInst::fetchMicroop(MicroPC upc) const$/;"	f	class:StaticInst
fetchMicroop	./sim/microcode_rom.hh	/^    fetchMicroop(MicroPC micropc, StaticInstPtr curMacroop)$/;"	f	class:MicrocodeRom
fetchMiscStallCycles	./cpu/o3/fetch.hh	/^    Stats::Scalar fetchMiscStallCycles;$/;"	m	class:DefaultFetch
fetchNextAddr	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::fetchNextAddr(Addr address)$/;"	f	class:CopyEngine::CopyEngineChannel
fetchNisnDist	./cpu/o3/fetch.hh	/^    Stats::Distribution fetchNisnDist;$/;"	m	class:DefaultFetch
fetchNoActiveThreadStallCycles	./cpu/o3/fetch.hh	/^    Stats::Scalar fetchNoActiveThreadStallCycles;$/;"	m	class:DefaultFetch
fetchOffset	./cpu/o3/fetch.hh	/^    Addr fetchOffset[Impl::MaxThreads];$/;"	m	class:DefaultFetch
fetchOffset	./cpu/simple/exec_context.hh	/^    Addr fetchOffset;$/;"	m	class:SimpleExecContext
fetchPendingDrainCycles	./cpu/o3/fetch.hh	/^    Stats::Scalar fetchPendingDrainCycles;$/;"	m	class:DefaultFetch
fetchPendingQuiesceStallCycles	./cpu/o3/fetch.hh	/^    Stats::Scalar fetchPendingQuiesceStallCycles;$/;"	m	class:DefaultFetch
fetchPendingTrapStallCycles	./cpu/o3/fetch.hh	/^    Stats::Scalar fetchPendingTrapStallCycles;$/;"	m	class:DefaultFetch
fetchPolicy	./cpu/o3/fetch.hh	/^    FetchPriority fetchPolicy;$/;"	m	class:DefaultFetch
fetchQueue	./cpu/o3/commit.hh	/^    TimeBuffer<FetchStruct> *fetchQueue;$/;"	m	class:DefaultCommit
fetchQueue	./cpu/o3/cpu.hh	/^    TimeBuffer<FetchStruct> fetchQueue;$/;"	m	class:FullO3CPU
fetchQueue	./cpu/o3/decode.hh	/^    TimeBuffer<FetchStruct> *fetchQueue;$/;"	m	class:DefaultDecode
fetchQueue	./cpu/o3/fetch.hh	/^    std::deque<DynInstPtr> fetchQueue[Impl::MaxThreads];$/;"	m	class:DefaultFetch
fetchQueueSize	./cpu/o3/O3CPU.py	/^    fetchQueueSize = Param.Unsigned(32, "Fetch queue size in micro-ops "$/;"	v	class:DerivO3CPU
fetchQueueSize	./cpu/o3/fetch.hh	/^    unsigned fetchQueueSize;$/;"	m	class:DefaultFetch
fetchRate	./cpu/o3/fetch.hh	/^    Stats::Formula fetchRate;$/;"	m	class:DefaultFetch
fetchRedirect	./cpu/o3/iew.hh	/^    bool fetchRedirect[Impl::MaxThreads];$/;"	m	class:DefaultIEW
fetchReqTrace	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::fetchReqTrace(const RequestPtr &req)$/;"	f	class:ElasticTrace
fetchSeqNum	./cpu/minor/dyn_inst.hh	/^    InstSeqNum fetchSeqNum;$/;"	m	class:Minor::InstId
fetchSeqNum	./cpu/minor/fetch2.hh	/^    InstSeqNum fetchSeqNum;$/;"	m	class:Minor::Fetch2
fetchSquashCycles	./cpu/o3/fetch.hh	/^    Stats::Scalar fetchSquashCycles;$/;"	m	class:DefaultFetch
fetchStatus	./cpu/o3/fetch.hh	/^    ThreadStatus fetchStatus[Impl::MaxThreads];$/;"	m	class:DefaultFetch
fetchTick	./cpu/o3/dyn_inst.hh	/^    Tick fetchTick;	     \/\/ instruction fetch is completed.$/;"	m	class:BaseO3DynInst
fetchTlbCycles	./cpu/o3/fetch.hh	/^    Stats::Scalar fetchTlbCycles;$/;"	m	class:DefaultFetch
fetchTlbSquashes	./cpu/o3/fetch.hh	/^    Stats::Scalar fetchTlbSquashes;$/;"	m	class:DefaultFetch
fetchToCommitDelay	./cpu/o3/commit.hh	/^    const Cycles fetchToCommitDelay;$/;"	m	class:DefaultCommit
fetchToDecodeDelay	./cpu/o3/O3CPU.py	/^    fetchToDecodeDelay = Param.Cycles(1, "Fetch to decode delay")$/;"	v	class:DerivO3CPU
fetchToDecodeDelay	./cpu/o3/decode.hh	/^    Cycles fetchToDecodeDelay;$/;"	m	class:DefaultDecode
fetchTranslation	./cpu/simple/timing.hh	/^    FetchTranslation fetchTranslation;$/;"	m	class:TimingSimpleCPU
fetchTrapLatency	./cpu/o3/O3CPU.py	/^    fetchTrapLatency = Param.Cycles(1, "Fetch trap latency")$/;"	v	class:DerivO3CPU
fetchWidth	./cpu/o3/O3CPU.py	/^    fetchWidth = Param.Unsigned(8, "Fetch width")$/;"	v	class:DerivO3CPU
fetchWidth	./cpu/o3/fetch.hh	/^    unsigned fetchWidth;$/;"	m	class:DefaultFetch
fetch_accesses	./arch/alpha/tlb.hh	/^    mutable Stats::Formula fetch_accesses;$/;"	m	class:AlphaISA::TLB
fetch_acv	./arch/alpha/tlb.hh	/^    mutable Stats::Scalar fetch_acv;$/;"	m	class:AlphaISA::TLB
fetch_comp_delay	./dev/net/Ethernet.py	/^    fetch_comp_delay = Param.Latency('10ns', "delay after desc fetch occurs")$/;"	v	class:IGbE
fetch_delay	./dev/net/Ethernet.py	/^    fetch_delay = Param.Latency('10ns', "delay before desc fetch occurs")$/;"	v	class:IGbE
fetch_hits	./arch/alpha/tlb.hh	/^    mutable Stats::Scalar fetch_hits;$/;"	m	class:AlphaISA::TLB
fetch_misses	./arch/alpha/tlb.hh	/^    mutable Stats::Scalar fetch_misses;$/;"	m	class:AlphaISA::TLB
fetch_seq	./sim/insttracer.hh	/^    InstSeqNum fetch_seq;$/;"	m	class:Trace::InstRecord
fetch_seq_valid	./sim/insttracer.hh	/^    bool fetch_seq_valid;$/;"	m	class:Trace::InstRecord
fetchedBranches	./cpu/o3/fetch.hh	/^    Stats::Scalar fetchedBranches;$/;"	m	class:DefaultFetch
fetchedCacheLines	./cpu/o3/fetch.hh	/^    Stats::Scalar fetchedCacheLines;$/;"	m	class:DefaultFetch
fetchedInsts	./cpu/o3/fetch.hh	/^    Stats::Scalar fetchedInsts;$/;"	m	class:DefaultFetch
fex	./arch/power/miscregs.hh	/^    Bitfield<30> fex;$/;"	m	namespace:PowerISA
ffxsr	./arch/x86/regs/misc.hh	/^        Bitfield<14> ffxsr; \/\/ Fast fxsave\/fxrstor$/;"	m	namespace:X86ISA
fg	./arch/power/miscregs.hh	/^            Bitfield<14> fg;$/;"	m	namespace:PowerISA
fi	./arch/arm/miscregs.hh	/^        Bitfield<21>   fi;      \/\/ Fast interrupts configuration enable$/;"	m	namespace:ArmISA
fi	./arch/power/miscregs.hh	/^    Bitfield<17> fi;$/;"	m	namespace:PowerISA
fiNil	./base/loader/coff_sym.h	435;"	d
fields	./dev/pci/pcireg.h	/^    } fields;$/;"	m	union:MSIXTable	typeref:struct:MSIXTable::__anon30
fields_per_conf_record	./mem/ruby/network/fault_model/FaultModel.hh	/^        fields_per_conf_record$/;"	e	enum:FaultModel::conf_record_format
fields_per_temperature_record	./mem/ruby/network/fault_model/FaultModel.hh	/^        fields_per_temperature_record$/;"	e	enum:FaultModel::temperature_record_format
fifo	./dev/net/pktfifo.hh	/^    std::list<PacketFifoEntry> fifo;$/;"	m	class:PacketFifo
fifoSize	./dev/dma_device.hh	/^    const size_t fifoSize;$/;"	m	class:DmaReadFifo
fifo_list	./dev/net/pktfifo.hh	/^    typedef std::list<PacketFifoEntry> fifo_list;$/;"	t	class:PacketFifo
file	./base/bitmap.hh	/^        FileHeader file;$/;"	m	struct:Bitmap::CompleteV1Header
file	./dev/net/Ethernet.py	/^    file = Param.String("dump file")$/;"	v	class:EtherDump
file	./dev/storage/disk_image.hh	/^    std::string file;$/;"	m	class:RawDiskImage
fileData	./base/loader/object_file.hh	/^    uint8_t *fileData;$/;"	m	class:ObjectFile
fileDataMmapped	./base/loader/dtb_object.hh	/^        bool fileDataMmapped;$/;"	m	class:DtbObject
fileHdr	./base/loader/ecoff_object.hh	/^    ecoff_filehdr *fileHdr;$/;"	m	class:EcoffObject
fileImage	./base/loader/object_file.hh	/^        uint8_t *fileImage;$/;"	m	struct:ObjectFile::Section
fileName	./proto/protoio.hh	/^    const std::string fileName;$/;"	m	class:ProtoInputStream
fileOffset	./sim/fd_entry.hh	/^    uint64_t fileOffset;$/;"	m	class:FDEntry
filePath	./mem/DRAMSim2.py	/^    filePath = Param.String("ext\/dramsim2\/DRAMSim2\/",$/;"	v	class:DRAMSim2
filePointer	./dev/arm/ufs_device.hh	/^        uint32_t filePointer;$/;"	m	struct:UFSHostDevice::transferInfo
fileStream	./proto/protoio.hh	/^    std::ifstream fileStream;$/;"	m	class:ProtoInputStream
fileStream	./proto/protoio.hh	/^    std::ofstream fileStream;$/;"	m	class:ProtoOutputStream
fileSystemAccess	./dev/arm/flash_device.hh	/^        Stats::Histogram fileSystemAccess;$/;"	m	struct:FlashDevice::FlashDeviceStats
file_name	./cpu/InstPBTrace.py	/^    file_name = Param.String("Instruction trace output file")$/;"	v	class:InstPBTrace
filename	./base/loader/hex_file.hh	/^    const std::string filename;$/;"	m	class:HexFile
filename	./base/loader/object_file.hh	/^    const std::string filename;$/;"	m	class:ObjectFile
filename	./dev/storage/disk_image.hh	/^    std::string filename;$/;"	m	class:CowDiskImage
filename	./sim/Process.py	/^    filename = Param.String("device file name (under \/dev)")$/;"	v	class:EmulatedDriver
filename	./sim/emul_driver.hh	/^    const std::string &filename;$/;"	m	class:EmulatedDriver
filename	./sim/fd_entry.hh	/^    std::string filename;$/;"	m	class:FDEntry
filename	./sim/init.hh	/^    const char *filename;$/;"	m	struct:EmbeddedPython
files	./base/output.hh	/^    map_t files;$/;"	m	class:OutputDirectory
files	./mem/slicc/ast/DeclAST.py	/^    def files(self, parent=None):$/;"	m	class:DeclAST
files	./mem/slicc/ast/DeclListAST.py	/^    def files(self, parent=None):$/;"	m	class:DeclListAST
files	./mem/slicc/ast/EnumDeclAST.py	/^    def files(self, parent=None):$/;"	m	class:EnumDeclAST
files	./mem/slicc/ast/FuncDeclAST.py	/^    def files(self, parent=None):$/;"	m	class:FuncDeclAST
files	./mem/slicc/ast/MachineAST.py	/^    def files(self, parent=None):$/;"	m	class:MachineAST
files	./mem/slicc/ast/StateDeclAST.py	/^    def files(self, parent=None):$/;"	m	class:StateDeclAST
files	./mem/slicc/ast/TypeDeclAST.py	/^    def files(self, parent=None):$/;"	m	class:TypeDeclAST
files	./mem/slicc/parser.py	/^    def files(self):$/;"	m	class:SLICC
fill	./arch/mips/pra_constants.hh	/^    Bitfield<61, 40> fill;$/;"	m	namespace:MipsISA
fill	./arch/mips/pra_constants.hh	/^    Bitfield<63, 30> fill;$/;"	m	namespace:MipsISA
fill	./base/framebuffer.cc	/^FrameBuffer::fill(const Pixel &pixel)$/;"	f	class:FrameBuffer
fillFifo	./dev/arm/pl111.cc	/^Pl111::fillFifo()$/;"	f	class:Pl111
fillFifoEvent	./dev/arm/pl111.hh	/^    EventWrapper<Pl111, &Pl111::fillFifo> fillFifoEvent;$/;"	m	class:Pl111
fillHandler32	./arch/sparc/handlers.hh	/^const MachInst fillHandler32[numFillInsts] =$/;"	m	namespace:SparcISA
fillHandler64	./arch/sparc/handlers.hh	/^const MachInst fillHandler64[numFillInsts] =$/;"	m	namespace:SparcISA
fillLatency	./mem/cache/base.hh	/^    const Cycles fillLatency;$/;"	m	class:BaseCache
fillStart	./arch/sparc/process.hh	/^    Addr fillStart, spillStart;$/;"	m	class:SparcLiveProcess
fill_zero	./base/cprintf_formats.hh	/^    bool fill_zero;$/;"	m	struct:cp::Format
filter	./arch/arm/pmu.hh	/^        PMEVTYPER_t filter;$/;"	m	struct:ArmISA::PMU::CounterState
filterCP0Write	./arch/mips/isa.cc	/^ISA::filterCP0Write(int misc_reg, int reg_sel, const MiscReg &val)$/;"	f	class:MipsISA::ISA
filterHash	./dev/net/ns_gige.hh	/^    uint8_t filterHash[FHASH_SIZE];$/;"	m	struct:dp_rom
finalAddress	./dev/arm/ufs_device.hh	/^        Addr finalAddress;$/;"	m	struct:UFSHostDevice::SCSIResumeInfo
finalPred	./cpu/pred/bi_mode.hh	/^        bool finalPred;$/;"	m	struct:BiModeBP::BPHistory
finalSize	./dev/arm/ufs_device.hh	/^        uint32_t finalSize;$/;"	m	struct:UFSHostDevice::SCSIResumeInfo
finalTick	./sim/stat_control.cc	/^Stats::Value finalTick;$/;"	v
finalUTP	./dev/arm/ufs_device.cc	/^UFSHostDevice::finalUTP()$/;"	f	class:UFSHostDevice
finalize	./arch/isa_parser.py	/^    def finalize(self, predRead, predWrite):$/;"	m	class:Operand
finalizePhysical	./arch/alpha/tlb.cc	/^TLB::finalizePhysical(RequestPtr req, ThreadContext *tc, Mode mode) const$/;"	f	class:AlphaISA::TLB
finalizePhysical	./arch/arm/tlb.cc	/^TLB::finalizePhysical(RequestPtr req, ThreadContext *tc, Mode mode) const$/;"	f	class:TLB
finalizePhysical	./arch/generic/tlb.cc	/^GenericTLB::finalizePhysical(RequestPtr req, ThreadContext *tc, Mode mode) const$/;"	f	class:GenericTLB
finalizePhysical	./arch/mips/tlb.cc	/^TLB::finalizePhysical(RequestPtr req, ThreadContext *tc, Mode mode) const$/;"	f	class:TLB
finalizePhysical	./arch/power/tlb.cc	/^TLB::finalizePhysical(RequestPtr req, ThreadContext *tc, Mode mode) const$/;"	f	class:TLB
finalizePhysical	./arch/sparc/tlb.cc	/^TLB::finalizePhysical(RequestPtr req, ThreadContext *tc, Mode mode) const$/;"	f	class:SparcISA::TLB
finalizePhysical	./arch/x86/tlb.cc	/^TLB::finalizePhysical(RequestPtr req, ThreadContext *tc, Mode mode) const$/;"	f	class:X86ISA::TLB
find	./arch/sparc/tlb_map.hh	/^    find(const TlbRange &r)$/;"	f	class:SparcISA::TlbMap
find	./base/addr_range_map.hh	/^    find(const Addr &r) const$/;"	f	class:AddrRangeMap
find	./base/addr_range_map.hh	/^    find(const AddrRange &r) const$/;"	f	class:AddrRangeMap
find	./base/inifile.cc	/^IniFile::find(const string &sectionName, const string &entryName,$/;"	f	class:IniFile
find	./base/output.cc	/^OutputDirectory::find(const string &name) const$/;"	f	class:OutputDirectory
find	./mem/slicc/symbols/SymbolTable.py	/^    def find(self, ident, types=None):$/;"	m	class:SymbolTable
find	./python/m5/proxy.py	/^    def find(self, obj):$/;"	m	class:AllProxy
find	./python/m5/proxy.py	/^    def find(self, obj):$/;"	m	class:AnyProxy
find	./python/m5/proxy.py	/^    def find(self, obj):$/;"	m	class:AttrProxy
find	./python/m5/util/jobfile.py	/^    def find(self, jobname):$/;"	m	class:Configuration
find	./sim/serialize.cc	/^CheckpointIn::find(const string &section, const string &entry, string &value)$/;"	f	class:CheckpointIn
find	./sim/sim_object.cc	/^SimObject::find(const char *name)$/;"	f	class:SimObject
findAddress	./base/loader/symtab.hh	/^    findAddress(const std::string &symbol, Addr &address) const$/;"	f	class:SymbolTable
findAllObjects	./sim/cxx_manager.cc	/^CxxConfigManager::findAllObjects()$/;"	f	class:CxxConfigManager
findBlk	./mem/cache/tags/cacheset.hh	/^CacheSet<Blktype>::findBlk(Addr tag, bool is_secure) const$/;"	f	class:CacheSet
findBlk	./mem/cache/tags/cacheset.hh	/^CacheSet<Blktype>::findBlk(Addr tag, bool is_secure, int& way_id) const$/;"	f	class:CacheSet
findBlock	./mem/cache/cache.hh	/^    CacheBlk *findBlock(Addr addr, bool is_secure) const {$/;"	f	class:Cache
findBlock	./mem/cache/tags/base_set_assoc.cc	/^BaseSetAssoc::findBlock(Addr addr, bool is_secure) const$/;"	f	class:BaseSetAssoc
findBlock	./mem/cache/tags/fa_lru.cc	/^FALRU::findBlock(Addr addr, bool is_secure) const$/;"	f	class:FALRU
findBlockBySetAndWay	./mem/cache/tags/base_set_assoc.cc	/^BaseSetAssoc::findBlockBySetAndWay(int set, int way) const$/;"	f	class:BaseSetAssoc
findBlockBySetAndWay	./mem/cache/tags/fa_lru.cc	/^FALRU::findBlockBySetAndWay(int set, int way) const$/;"	f	class:FALRU
findCarry	./base/condcodes.hh	/^findCarry(int width, uint64_t dest, uint64_t src1, uint64_t src2) {$/;"	f
findContext	./cpu/base.cc	/^BaseCPU::findContext(ThreadContext *tc)$/;"	f	class:BaseCPU
findDomain	./sim/dvfs_handler.hh	/^    SrcClockDomain *findDomain(DomainID domain_id) const {$/;"	f	class:DVFSHandler
findDriver	./sim/process.cc	/^LiveProcess::findDriver(std::string filename)$/;"	f	class:LiveProcess
findEntry	./base/inifile.cc	/^IniFile::Section::findEntry(const std::string &entryName) const$/;"	f	class:IniFile::Section
findFileOffsets	./sim/process.cc	/^Process::findFileOffsets()$/;"	f	class:Process
findFlag	./base/debug.cc	/^findFlag(const std::string &name)$/;"	f	namespace:Debug
findFreeContext	./sim/process.cc	/^Process::findFreeContext()$/;"	f	class:Process
findHighestPendingLR	./dev/arm/vgic.hh	/^    int findHighestPendingLR(struct vcpuIntData *vid)$/;"	f	class:VGic
findInHash	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::findInHash(const DynInstPtr &inst)$/;"	f	class:MemDepUnit
findIndex	./cpu/minor/scoreboard.cc	/^Scoreboard::findIndex(RegIndex reg, Index &scoreboard_index)$/;"	f	class:Minor::Scoreboard
findInst	./cpu/o3/rob_impl.hh	/^ROB<Impl>::findInst(ThreadID tid, InstSeqNum squash_inst)$/;"	f	class:ROB
findLRForVIRQ	./dev/arm/vgic.hh	/^    int findLRForVIRQ(struct vcpuIntData *vid, int virq, int vcpu)$/;"	f	class:VGic
findLsbSet	./base/bitfield.hh	/^findLsbSet(uint64_t val) {$/;"	f
findMachines	./mem/slicc/ast/DeclAST.py	/^    def findMachines(self):$/;"	m	class:DeclAST
findMachines	./mem/slicc/ast/MachineAST.py	/^    def findMachines(self):$/;"	m	class:MachineAST
findMatch	./mem/cache/mshr_queue.cc	/^MSHRQueue::findMatch(Addr blk_addr, bool is_secure) const$/;"	f	class:MSHRQueue
findMatches	./mem/cache/mshr_queue.cc	/^MSHRQueue::findMatches(Addr blk_addr, bool is_secure,$/;"	f	class:MSHRQueue
findMsbSet	./base/bitfield.hh	/^findMsbSet(uint64_t val) {$/;"	f
findNearestAddr	./base/loader/symtab.hh	/^    findNearestAddr(Addr addr, Addr &symaddr) const$/;"	f	class:SymbolTable
findNearestAddr	./base/loader/symtab.hh	/^    findNearestAddr(Addr addr, Addr &symaddr, Addr &nextaddr) const$/;"	f	class:SymbolTable
findNearestSymbol	./base/loader/symtab.hh	/^    findNearestSymbol(Addr addr, std::string &symbol, Addr &symaddr) const$/;"	f	class:SymbolTable
findNearestSymbol	./base/loader/symtab.hh	/^    findNearestSymbol(Addr addr, std::string &symbol, Addr &symaddr,$/;"	f	class:SymbolTable
findNegative	./base/condcodes.hh	/^findNegative(int width, uint64_t dest) {$/;"	f
findNextSenderState	./mem/packet.hh	/^    T * findNextSenderState() const$/;"	f	class:Packet
findObj	./sim/serialize.cc	/^CheckpointIn::findObj(const string &section, const string &entry,$/;"	f	class:CheckpointIn
findObject	./sim/cxx_manager.cc	/^CxxConfigManager::findObject(const std::string &object_name,$/;"	f	class:CxxConfigManager
findObjectParams	./sim/cxx_manager.cc	/^CxxConfigManager::findObjectParams(const std::string &object_name)$/;"	f	class:CxxConfigManager
findObjectType	./sim/cxx_manager.cc	/^CxxConfigManager::findObjectType(const std::string &object_name,$/;"	f	class:CxxConfigManager
findOverflow	./base/condcodes.hh	/^findOverflow(int width, uint64_t dest, uint64_t src1, uint64_t src2) {$/;"	f
findParity	./base/condcodes.hh	/^findParity(int width, uint64_t dest) {$/;"	f
findPending	./mem/cache/mshr_queue.cc	/^MSHRQueue::findPending(Addr blk_addr, bool is_secure) const$/;"	f	class:MSHRQueue
findPort	./mem/xbar.cc	/^BaseXBar::findPort(Addr addr)$/;"	f	class:BaseXBar
findRegArrayMSB	./arch/x86/interrupts.hh	/^    findRegArrayMSB(ApicRegIndex base)$/;"	f	class:X86ISA::Interrupts
findReleaseAddr	./base/loader/dtb_object.cc	/^DtbObject::findReleaseAddr()$/;"	f	class:DtbObject
findResources	./mem/slicc/ast/CheckAllocateStatementAST.py	/^    def findResources(self, resources):$/;"	m	class:CheckAllocateStatementAST
findResources	./mem/slicc/ast/EnqueueStatementAST.py	/^    def findResources(self, resources):$/;"	m	class:EnqueueStatementAST
findResources	./mem/slicc/ast/ExprAST.py	/^    def findResources(self, resources):$/;"	m	class:ExprAST
findResources	./mem/slicc/ast/ExprStatementAST.py	/^    def findResources(self, resources):$/;"	m	class:ExprStatementAST
findResources	./mem/slicc/ast/IfStatementAST.py	/^    def findResources(self, resources):$/;"	m	class:IfStatementAST
findResources	./mem/slicc/ast/MethodCallExprAST.py	/^    def findResources(self, resources):$/;"	m	class:MethodCallExprAST
findResources	./mem/slicc/ast/PeekStatementAST.py	/^    def findResources(self, resources):$/;"	m	class:PeekStatementAST
findResources	./mem/slicc/ast/ReturnStatementAST.py	/^    def findResources(self, resources):$/;"	m	class:ReturnStatementAST
findResources	./mem/slicc/ast/StatementAST.py	/^    def findResources(self, resources):$/;"	m	class:StatementAST
findResources	./mem/slicc/ast/StatementListAST.py	/^    def findResources(self, resources):$/;"	m	class:StatementListAST
findResponse	./cpu/minor/lsq.cc	/^LSQ::findResponse(MinorDynInstPtr inst)$/;"	f	class:Minor::LSQ
findSection	./base/inifile.cc	/^IniFile::findSection(const string &sectionName) const$/;"	f	class:IniFile
findSmallest	./mem/ruby/structures/PersistentTable.cc	/^PersistentTable::findSmallest(Addr address) const$/;"	f	class:PersistentTable
findSymbol	./base/loader/symtab.hh	/^    findSymbol(Addr address, std::string &symbol) const$/;"	f	class:SymbolTable
findTagInSet	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::findTagInSet(int64_t cacheSet, Addr tag) const$/;"	f	class:CacheMemory
findTagInSetIgnorePermissions	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::findTagInSetIgnorePermissions(int64_t cacheSet,$/;"	f	class:CacheMemory
findTiming	./cpu/minor/func_unit.cc	/^FUPipeline::findTiming(const StaticInstPtr &inst)$/;"	f	class:Minor::FUPipeline
findTraversalOrder	./sim/cxx_manager.cc	/^CxxConfigManager::findTraversalOrder(const std::string &object_name)$/;"	f	class:CxxConfigManager
findVictim	./mem/cache/tags/fa_lru.cc	/^FALRU::findVictim(Addr addr)$/;"	f	class:FALRU
findVictim	./mem/cache/tags/lru.cc	/^LRU::findVictim(Addr addr)$/;"	f	class:LRU
findVictim	./mem/cache/tags/random_repl.cc	/^RandomRepl::findVictim(Addr addr)$/;"	f	class:RandomRepl
findZero	./base/condcodes.hh	/^findZero(int width, uint64_t dest) {$/;"	f
find_all	./python/m5/SimObject.py	/^    def find_all(self, ptype):$/;"	f
find_any	./python/m5/SimObject.py	/^    def find_any(self, ptype):$/;"	f
find_base	./arch/isa_parser.py	/^    def find_base(self, base_name):$/;"	m	class:OperandList
find_module	./python/importer.py	/^    def find_module(self, fullname, path):$/;"	m	class:CodeImporter
finish	./arch/arm/stage2_lookup.cc	/^Stage2LookUp::finish(const Fault &_fault, RequestPtr req,$/;"	f	class:Stage2LookUp
finish	./arch/arm/stage2_mmu.cc	/^Stage2MMU::Stage2Translation::finish(const Fault &_fault, RequestPtr req,$/;"	f	class:Stage2MMU::Stage2Translation
finish	./cpu/minor/fetch1.cc	/^Fetch1::FetchRequest::finish(const Fault &fault_, RequestPtr request_,$/;"	f	class:Minor::Fetch1::FetchRequest
finish	./cpu/minor/lsq.cc	/^LSQ::SingleDataRequest::finish(const Fault &fault_, RequestPtr request_,$/;"	f	class:Minor::LSQ::SingleDataRequest
finish	./cpu/minor/lsq.cc	/^LSQ::SplitDataRequest::finish(const Fault &fault_, RequestPtr request_,$/;"	f	class:Minor::LSQ::SplitDataRequest
finish	./cpu/minor/lsq.hh	/^        void finish(const Fault &fault_, RequestPtr request_,$/;"	f	class:Minor::LSQ::SpecialDataRequest
finish	./cpu/o3/fetch.hh	/^        finish(const Fault &fault, RequestPtr req, ThreadContext *tc,$/;"	f	class:DefaultFetch::FetchTranslation
finish	./cpu/simple/timing.hh	/^        finish(const Fault &fault, RequestPtr req, ThreadContext *tc,$/;"	f	class:TimingSimpleCPU::FetchTranslation
finish	./cpu/translation.hh	/^    finish(const Fault &fault, RequestPtr req, ThreadContext *tc,$/;"	f	class:DataTranslation
finish	./cpu/translation.hh	/^    finish(const Fault &fault, int index)$/;"	f	class:WholeTranslationState
finishRequest	./mem/snoop_filter.cc	/^SnoopFilter::finishRequest(bool will_retry, const Packet* cpkt)$/;"	f	class:SnoopFilter
finishTranslation	./cpu/base_dyn_inst.hh	/^BaseDynInst<Impl>::finishTranslation(WholeTranslationState *state)$/;"	f	class:BaseDynInst
finishTranslation	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::finishTranslation(const Fault &fault, RequestPtr mem_req)$/;"	f	class:DefaultFetch
finishTranslation	./cpu/simple/timing.cc	/^TimingSimpleCPU::finishTranslation(WholeTranslationState *state)$/;"	f	class:TimingSimpleCPU
finishTranslationEvent	./cpu/o3/fetch.hh	/^    FinishTranslationEvent finishTranslationEvent;$/;"	m	class:DefaultFetch
finishVfp	./arch/arm/insts/vfp.cc	/^finishVfp(FPSCR &fpscr, VfpSavedState state, bool flush, FPSCR mask)$/;"	f	namespace:ArmISA
finished	./dev/arm/ufs_device.hh	/^        bool finished;$/;"	m	struct:UFSHostDevice::transferDoneInfo
finishedCommand	./dev/arm/ufs_device.hh	/^        bool finishedCommand() const {return transferCompleted;};$/;"	f	class:UFSHostDevice::UFSSCSIDevice
finishedRead	./dev/arm/ufs_device.hh	/^        bool finishedRead() const {return readCompleted;};$/;"	f	class:UFSHostDevice::UFSSCSIDevice
fiq	./arch/arm/miscregs.hh	/^        Bitfield<2> fiq;$/;"	m	namespace:ArmISA
fiqAsserted	./arch/arm/kvm/arm_cpu.hh	/^    bool fiqAsserted;$/;"	m	class:ArmKvmCPU
fiqAsserted	./arch/arm/kvm/base_cpu.hh	/^    bool fiqAsserted;$/;"	m	class:BaseArmKvmCPU
fiqDisable	./arch/arm/faults.cc	/^FastInterrupt::fiqDisable(ThreadContext *tc)$/;"	f	class:ArmISA::FastInterrupt
fiqDisable	./arch/arm/faults.hh	/^        const bool fiqDisable;$/;"	m	struct:ArmISA::ArmFault::FaultVals
fiqDisable	./arch/arm/faults.hh	/^    virtual bool fiqDisable(ThreadContext* tc) { return vals.fiqDisable; }$/;"	f	class:ArmISA::ArmFaultVals
fir	./arch/mips/remote_gdb.hh	/^            uint32_t fir;$/;"	m	struct:MipsISA::RemoteGDB::MipsGdbRegCache::__anon83
first	./base/stl_helpers.hh	/^    bool first;$/;"	m	class:m5::stl_helpers::ContainerPrint
firstAt	./dev/net/dist_iface.hh	/^        Tick firstAt;$/;"	m	class:DistIface::Sync
firstExecSeqNum	./cpu/minor/dyn_inst.hh	/^    static const InstSeqNum firstExecSeqNum = 1;$/;"	m	class:Minor::InstId
firstFetchSeqNum	./cpu/minor/dyn_inst.hh	/^    static const InstSeqNum firstFetchSeqNum = 1;$/;"	m	class:Minor::InstId
firstFetchTick	./cpu/trace/trace_cpu.hh	/^    Tick firstFetchTick;$/;"	m	class:TraceCPU
firstLineSeqNum	./cpu/minor/dyn_inst.hh	/^    static const InstSeqNum firstLineSeqNum = 1;$/;"	m	class:Minor::InstId
firstPredictionSeqNum	./cpu/minor/dyn_inst.hh	/^    static const InstSeqNum firstPredictionSeqNum = 1;$/;"	m	class:Minor::InstId
firstStreamSeqNum	./cpu/minor/dyn_inst.hh	/^    static const InstSeqNum firstStreamSeqNum = 1;$/;"	m	class:Minor::InstId
firstWin	./cpu/o3/probe/elastic_trace.hh	/^    bool firstWin;$/;"	m	class:ElasticTrace
fix	./arch/x86/regs/misc.hh	/^        Bitfield<8> fix; \/\/ Fixed-Range Registers$/;"	m	namespace:X86ISA
fix	./python/m5/util/code_formatter.py	/^    def fix(self, status):$/;"	m	class:code_formatter
fixDest	./arch/arm/insts/vfp.cc	/^fixDest(bool flush, bool defaultNan, fpType val, fpType op1)$/;"	f	namespace:ArmISA
fixDest	./arch/arm/insts/vfp.cc	/^fixDest(bool flush, bool defaultNan, fpType val, fpType op1, fpType op2)$/;"	f	namespace:ArmISA
fixDivDest	./arch/arm/insts/vfp.cc	/^fixDivDest(bool flush, bool defaultNan, fpType val, fpType op1, fpType op2)$/;"	f	namespace:ArmISA
fixFileOffsets	./sim/process.cc	/^Process::fixFileOffsets()$/;"	f	class:Process
fixFpDFpSDest	./arch/arm/insts/vfp.cc	/^fixFpDFpSDest(FPSCR fpscr, double val)$/;"	f	namespace:ArmISA
fixFpSFpDDest	./arch/arm/insts/vfp.cc	/^fixFpSFpDDest(FPSCR fpscr, float val)$/;"	f	namespace:ArmISA
fixFuncEventAddr	./arch/alpha/system.cc	/^AlphaSystem::fixFuncEventAddr(Addr addr)$/;"	f	class:AlphaSystem
fixFuncEventAddr	./arch/arm/system.hh	/^    virtual Addr fixFuncEventAddr(Addr addr)$/;"	f	class:ArmSystem
fixFuncEventAddr	./arch/mips/system.cc	/^MipsSystem::fixFuncEventAddr(Addr addr)$/;"	f	class:MipsSystem
fixFuncEventAddr	./arch/sparc/system.hh	/^    fixFuncEventAddr(Addr addr)$/;"	f	class:SparcSystem
fixFuncEventAddr	./arch/x86/system.hh	/^    virtual Addr fixFuncEventAddr(Addr addr)$/;"	f	class:X86System
fixFuncEventAddr	./sim/system.hh	/^    virtual Addr fixFuncEventAddr(Addr addr)$/;"	f	class:System
fixGlobalFrequency	./python/m5/ticks.py	/^def fixGlobalFrequency():$/;"	f
fixPythonIndentation	./arch/isa_parser.py	/^def fixPythonIndentation(s):$/;"	f
fix_newlines	./python/m5/util/code_formatter.py	/^    fix_newlines = True$/;"	v	class:code_formatter
fixed	./base/cprintf_formats.hh	/^    enum { best, fixed, scientific } float_format;$/;"	e	enum:cp::Format::__anon119
fixedPkts	./cpu/testers/networktest/networktest.hh	/^    bool fixedPkts;$/;"	m	class:NetworkTest
fixed_pkts	./cpu/testers/networktest/NetworkTest.py	/^    fixed_pkts = Param.Bool(False, "Send fixed number of packets")$/;"	v	class:NetworkTest
fixupStackFault	./sim/process.cc	/^Process::fixupStackFault(Addr vaddr)$/;"	f	class:Process
fl	./arch/power/miscregs.hh	/^            Bitfield<15> fl;$/;"	m	namespace:PowerISA
flag	./base/cp_annotate.hh	/^        uint8_t  flag;$/;"	m	struct:CPA::AnnotateData
flags	./arch/alpha/faults.hh	/^    uint64_t flags;$/;"	m	class:AlphaISA::DtbFault
flags	./arch/arm/linux/atag.hh	/^    void flags(uint32_t i) { storage[2] = i; }$/;"	f	class:AtagCore
flags	./arch/arm/types.hh	/^        uint8_t flags;$/;"	m	class:ArmISA::PCState
flags	./arch/x86/bios/intelmp.hh	/^    uint16_t flags;$/;"	m	class:X86ISA::IntelMP::IntAssignment
flags	./arch/x86/bios/intelmp.hh	/^    uint8_t flags;$/;"	m	class:X86ISA::IntelMP::IOAPIC
flags	./arch/x86/linux/process.cc	/^    uint32_t flags;$/;"	m	struct:UserDesc32	file:
flags	./arch/x86/linux/process.cc	/^    uint32_t flags;$/;"	m	struct:UserDesc64	file:
flags	./base/cp_annotate.hh	/^    enum flags {$/;"	g	class:CPA
flags	./base/inet.hh	/^    uint8_t  flags() const { return th_flags & 0x3f; }$/;"	f	struct:Net::TcpHdr
flags	./base/inet.hh	/^    void flags(uint8_t _flags) { th_flags  = _flags; } $/;"	f	struct:Net::TcpHdr
flags	./base/statistics.hh	/^    flags(Flags _flags)$/;"	f	class:Stats::DataWrap
flags	./base/stats/info.hh	/^    Flags flags;$/;"	m	class:Stats::Info
flags	./base/stats/text.cc	/^    Flags flags;$/;"	m	struct:Stats::DistPrint	file:
flags	./base/stats/text.cc	/^    Flags flags;$/;"	m	struct:Stats::ScalarPrint	file:
flags	./base/stats/text.cc	/^    Flags flags;$/;"	m	struct:Stats::SparseHistPrint	file:
flags	./base/stats/text.cc	/^    Flags flags;$/;"	m	struct:Stats::VectorPrint	file:
flags	./cpu/static_inst.hh	/^    std::bitset<Num_Flags> flags;$/;"	m	class:StaticInst
flags	./cpu/testers/traffic_gen/generators.hh	/^        Request::FlagsType flags;$/;"	m	struct:TraceGen::TraceElement
flags	./cpu/trace/trace_cpu.hh	/^            Request::Flags flags;$/;"	m	class:TraceCPU::ElasticDataGen::GraphNode
flags	./cpu/trace/trace_cpu.hh	/^            Request::FlagsType flags;$/;"	m	struct:TraceCPU::FixedRetryGen::TraceElement
flags	./dev/arm/rv_ctrl.hh	/^    uint32_t flags;$/;"	m	class:RealViewCtrl
flags	./dev/virtio/base.hh	/^            Flags flags;$/;"	m	struct:VirtQueue::VirtRing::Header
flags	./dev/virtio/virtio_ring.h	/^    uint16_t flags;$/;"	m	struct:vring_avail
flags	./dev/virtio/virtio_ring.h	/^    uint16_t flags;$/;"	m	struct:vring_desc
flags	./dev/virtio/virtio_ring.h	/^    uint16_t flags;$/;"	m	struct:vring_used
flags	./kern/tru64/tru64.hh	/^        int             flags;          \/\/!< shared flags$/;"	m	struct:Tru64::ushared_state
flags	./kern/tru64/tru64.hh	/^        uint64_t        flags;          \/\/!< MAP_FIXED etc.$/;"	m	struct:Tru64::vm_stack
flags	./kern/tru64/tru64.hh	/^        unsigned short flags;   \/\/!< flags$/;"	m	struct:Tru64::nxm_task_attr
flags	./mem/packet.hh	/^    Flags flags;$/;"	m	class:Packet
flags	./python/m5/debug.py	/^flags = AllFlags()$/;"	v
flags	./python/m5/stats/__init__.py	/^flags = attrdict({$/;"	v
flags	./sim/cxx_manager.hh	/^    CxxConfigParams::Flags flags;$/;"	m	class:CxxConfigManager
flags	./sim/eventq.hh	/^    Flags flags;$/;"	m	class:Event
flags	./sim/fd_entry.hh	/^    int flags;$/;"	m	class:FDEntry
flags	./sim/insttracer.hh	/^    unsigned flags; \/\/\/< The flags that were assigned to the request.$/;"	m	class:Trace::InstRecord
flags	./sim/probe/mem.hh	/^    Request::FlagsType flags;$/;"	m	struct:ProbePoints::PacketInfo
flags	./sim/syscall_emul.hh	/^    int flags;          \/\/!< Flags (see Flags enum).$/;"	m	class:SyscallDesc
flags_addr	./arch/arm/ArmSystem.py	/^    flags_addr = Param.Addr(0, "Address of the flags register for MP booting")$/;"	v	class:ArmSystem
flash	./dev/net/i8254xGBe.hh	/^    uint16_t flash[iGbReg::EEPROM_SIZE];$/;"	m	class:IGbE
flashDevice	./dev/arm/ufs_device.hh	/^        AbstractNVM* flashDevice;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
flashDisk	./dev/arm/ufs_device.hh	/^        DiskImage* flashDisk;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
flash_fake	./dev/arm/RealView.py	/^    flash_fake    = IsaFake(pio_addr=0x40000000, pio_size=0x20000000,$/;"	v	class:RealViewPBX
flash_fake	./dev/arm/RealView.py	/^    flash_fake    = IsaFake(pio_addr=0x40000000, pio_size=0x20000000-1,$/;"	v	class:RealViewEB
flatDestRegIdx	./cpu/minor/dyn_inst.hh	/^    TheISA::RegIndex flatDestRegIdx[TheISA::MaxInstDestRegs];$/;"	m	class:Minor::MinorDynInst
flatten	./python/m5/util/__init__.py	/^def flatten(items):$/;"	f
flattenCCIndex	./arch/alpha/isa.hh	/^        flattenCCIndex(int reg) const$/;"	f	class:AlphaISA::ISA
flattenCCIndex	./arch/arm/isa.hh	/^        flattenCCIndex(int reg) const$/;"	f	class:ArmISA::ISA
flattenCCIndex	./arch/mips/isa.hh	/^        flattenCCIndex(int reg) const$/;"	f	class:MipsISA::ISA
flattenCCIndex	./arch/power/isa.hh	/^    flattenCCIndex(int reg) const$/;"	f	class:PowerISA::ISA
flattenCCIndex	./arch/sparc/isa.hh	/^    flattenCCIndex(int reg) const$/;"	f	class:SparcISA::ISA
flattenCCIndex	./arch/x86/isa.hh	/^        flattenCCIndex(int reg) const$/;"	f	class:X86ISA::ISA
flattenCCIndex	./cpu/checker/thread_context.hh	/^    int flattenCCIndex(int reg) { return actualTC->flattenCCIndex(reg); }$/;"	f	class:CheckerThreadContext
flattenCCIndex	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::flattenCCIndex(int reg)$/;"	f	class:O3ThreadContext
flattenCCIndex	./cpu/simple_thread.hh	/^    flattenCCIndex(int reg)$/;"	f	class:SimpleThread
flattenCCIndex	./cpu/thread_context.hh	/^    int flattenCCIndex(int reg)$/;"	f	class:ProxyThreadContext
flattenDestReg	./cpu/base_dyn_inst.hh	/^    void flattenDestReg(int idx, TheISA::RegIndex flattened_dest)$/;"	f	class:BaseDynInst
flattenFloatIndex	./arch/alpha/isa.hh	/^        flattenFloatIndex(int reg) const$/;"	f	class:AlphaISA::ISA
flattenFloatIndex	./arch/arm/isa.hh	/^        flattenFloatIndex(int reg) const$/;"	f	class:ArmISA::ISA
flattenFloatIndex	./arch/mips/isa.hh	/^        flattenFloatIndex(int reg) const$/;"	f	class:MipsISA::ISA
flattenFloatIndex	./arch/power/isa.hh	/^    flattenFloatIndex(int reg) const$/;"	f	class:PowerISA::ISA
flattenFloatIndex	./arch/sparc/isa.hh	/^    flattenFloatIndex(int reg) const$/;"	f	class:SparcISA::ISA
flattenFloatIndex	./arch/x86/isa.hh	/^        flattenFloatIndex(int reg) const$/;"	f	class:X86ISA::ISA
flattenFloatIndex	./cpu/checker/thread_context.hh	/^    int flattenFloatIndex(int reg) { return actualTC->flattenFloatIndex(reg); }$/;"	f	class:CheckerThreadContext
flattenFloatIndex	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::flattenFloatIndex(int reg)$/;"	f	class:O3ThreadContext
flattenFloatIndex	./cpu/simple_thread.hh	/^    flattenFloatIndex(int reg)$/;"	f	class:SimpleThread
flattenFloatIndex	./cpu/thread_context.hh	/^    int flattenFloatIndex(int reg)$/;"	f	class:ProxyThreadContext
flattenIntIndex	./arch/alpha/isa.hh	/^        flattenIntIndex(int reg) const$/;"	f	class:AlphaISA::ISA
flattenIntIndex	./arch/arm/isa.hh	/^        flattenIntIndex(int reg) const$/;"	f	class:ArmISA::ISA
flattenIntIndex	./arch/mips/isa.hh	/^        flattenIntIndex(int reg) const$/;"	f	class:MipsISA::ISA
flattenIntIndex	./arch/power/isa.hh	/^    flattenIntIndex(int reg) const$/;"	f	class:PowerISA::ISA
flattenIntIndex	./arch/sparc/isa.hh	/^    flattenIntIndex(int reg) const$/;"	f	class:SparcISA::ISA
flattenIntIndex	./arch/x86/isa.hh	/^        flattenIntIndex(int reg) const$/;"	f	class:X86ISA::ISA
flattenIntIndex	./cpu/checker/thread_context.hh	/^    int flattenIntIndex(int reg) { return actualTC->flattenIntIndex(reg); }$/;"	f	class:CheckerThreadContext
flattenIntIndex	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::flattenIntIndex(int reg)$/;"	f	class:O3ThreadContext
flattenIntIndex	./cpu/simple_thread.hh	/^    flattenIntIndex(int reg)$/;"	f	class:SimpleThread
flattenIntIndex	./cpu/thread_context.hh	/^    int flattenIntIndex(int reg)$/;"	f	class:ProxyThreadContext
flattenIntRegModeIndex	./arch/arm/intregs.hh	/^flattenIntRegModeIndex(int reg)$/;"	f	namespace:ArmISA
flattenMiscIndex	./arch/alpha/isa.hh	/^        flattenMiscIndex(int reg) const$/;"	f	class:AlphaISA::ISA
flattenMiscIndex	./arch/arm/isa.hh	/^        flattenMiscIndex(int reg) const$/;"	f	class:ArmISA::ISA
flattenMiscIndex	./arch/mips/isa.hh	/^        flattenMiscIndex(int reg) const$/;"	f	class:MipsISA::ISA
flattenMiscIndex	./arch/power/isa.hh	/^    flattenMiscIndex(int reg) const$/;"	f	class:PowerISA::ISA
flattenMiscIndex	./arch/sparc/isa.hh	/^    flattenMiscIndex(int reg) const$/;"	f	class:SparcISA::ISA
flattenMiscIndex	./arch/x86/isa.hh	/^        flattenMiscIndex(int reg) const$/;"	f	class:X86ISA::ISA
flattenMiscIndex	./cpu/checker/thread_context.hh	/^    int flattenMiscIndex(int reg) { return actualTC->flattenMiscIndex(reg); }$/;"	f	class:CheckerThreadContext
flattenMiscIndex	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::flattenMiscIndex(int reg)$/;"	f	class:O3ThreadContext
flattenMiscIndex	./cpu/simple_thread.hh	/^    flattenMiscIndex(int reg)$/;"	f	class:SimpleThread
flattenMiscIndex	./cpu/thread_context.hh	/^    int flattenMiscIndex(int reg)$/;"	f	class:ProxyThreadContext
flattenMiscRegNsBanked	./arch/arm/miscregs.cc	/^flattenMiscRegNsBanked(MiscRegIndex reg, ThreadContext *tc)$/;"	f	namespace:ArmISA
flattenMiscRegNsBanked	./arch/arm/miscregs.cc	/^flattenMiscRegNsBanked(MiscRegIndex reg, ThreadContext *tc, bool ns)$/;"	f	namespace:ArmISA
flattenRegIndex	./cpu/minor/scoreboard.cc	/^flattenRegIndex(TheISA::RegIndex reg, ThreadContext *thread_context)$/;"	f	namespace:Minor
flattenedDestRegIdx	./cpu/base_dyn_inst.hh	/^    TheISA::RegIndex flattenedDestRegIdx(int idx) const$/;"	f	class:BaseDynInst
flit	./mem/ruby/network/garnet/flexible-pipeline/flit.cc	/^flit::flit(int id, int  vc, int vnet, int size, MsgPtr msg_ptr, Cycles curTime)$/;"	f	class:flit
flit	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^class flit$/;"	c
flitBuffer	./mem/ruby/network/garnet/flexible-pipeline/flitBuffer.cc	/^flitBuffer::flitBuffer()$/;"	f	class:flitBuffer
flitBuffer	./mem/ruby/network/garnet/flexible-pipeline/flitBuffer.cc	/^flitBuffer::flitBuffer(int maximum_size)$/;"	f	class:flitBuffer
flitBuffer	./mem/ruby/network/garnet/flexible-pipeline/flitBuffer.hh	/^class flitBuffer$/;"	c
flitBuffer_d	./mem/ruby/network/garnet/fixed-pipeline/flitBuffer_d.cc	/^flitBuffer_d::flitBuffer_d()$/;"	f	class:flitBuffer_d
flitBuffer_d	./mem/ruby/network/garnet/fixed-pipeline/flitBuffer_d.cc	/^flitBuffer_d::flitBuffer_d(int maximum_size)$/;"	f	class:flitBuffer_d
flitBuffer_d	./mem/ruby/network/garnet/fixed-pipeline/flitBuffer_d.hh	/^class flitBuffer_d$/;"	c
flit_conservation__flit_duplication	./mem/ruby/network/fault_model/FaultModel.hh	/^        flit_conservation__flit_duplication,$/;"	e	enum:FaultModel::fault_type
flit_conservation__flit_loss_or_split	./mem/ruby/network/fault_model/FaultModel.hh	/^        flit_conservation__flit_loss_or_split,$/;"	e	enum:FaultModel::fault_type
flit_d	./mem/ruby/network/garnet/fixed-pipeline/flit_d.cc	/^flit_d::flit_d(int id, int  vc, int vnet, int size, MsgPtr msg_ptr,$/;"	f	class:flit_d
flit_d	./mem/ruby/network/garnet/fixed-pipeline/flit_d.cc	/^flit_d::flit_d(int vc, bool is_free_signal, Cycles curTime)$/;"	f	class:flit_d
flit_d	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^class flit_d$/;"	c
flit_stage	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum flit_stage {I_, VA_, SA_, ST_, LT_, NUM_FLIT_STAGE_};$/;"	g
flit_type	./mem/ruby/network/garnet/NetworkHeader.hh	/^enum flit_type {HEAD_, BODY_, TAIL_, HEAD_TAIL_, NUM_FLIT_TYPE_};$/;"	g
flitisizeMessage	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.cc	/^NetworkInterface_d::flitisizeMessage(MsgPtr msg_ptr, int vnet)$/;"	f	class:NetworkInterface_d
flitisizeMessage	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.cc	/^NetworkInterface::flitisizeMessage(MsgPtr msg_ptr, int vnet)$/;"	f	class:NetworkInterface
floatList	./cpu/o3/free_list.hh	/^    SimpleFreeList floatList;$/;"	m	class:UnifiedFreeList
floatMap	./cpu/o3/rename_map.hh	/^    SimpleRenameMap floatMap;$/;"	m	class:UnifiedRenameMap
floatRegFile	./cpu/o3/regfile.hh	/^    std::vector<PhysFloatReg> floatRegFile;$/;"	m	class:PhysRegFile
floatRegs	./cpu/simple_thread.hh	/^    } floatRegs;$/;"	m	class:SimpleThread	typeref:union:SimpleThread::__anon33
float_format	./base/cprintf_formats.hh	/^    enum { best, fixed, scientific } float_format;$/;"	m	struct:cp::Format	typeref:enum:cp::Format::__anon119
floating	./base/cprintf_formats.hh	/^    enum { none, string, integer, character, floating } format;$/;"	e	enum:cp::Format::__anon118
flock	./kern/tru64/tru64_syscalls.hh	/^        flock = 131,$/;"	e	enum:SystemCalls::__anon102
floorLog2	./base/intmath.hh	/^floorLog2(int x)$/;"	f
floorLog2	./base/intmath.hh	/^floorLog2(long long x)$/;"	f
floorLog2	./base/intmath.hh	/^floorLog2(long x)$/;"	f
floorLog2	./base/intmath.hh	/^floorLog2(unsigned long long x)$/;"	f
floorLog2	./base/intmath.hh	/^floorLog2(unsigned long x)$/;"	f
floorLog2	./base/intmath.hh	/^floorLog2(unsigned x)$/;"	f
floorPow2	./base/intmath.hh	/^floorPow2(const T& n)$/;"	f
flow	./base/inet.hh	/^    uint32_t flow() const { return ntohl(ip6_flow); }$/;"	f	struct:Net::Ip6Hdr
flush	./base/circlebuf.hh	/^    void flush() { buf.flush(); }$/;"	f	class:Fifo
flush	./base/circlebuf.hh	/^    void flush() {$/;"	f	class:CircleBuf
flush	./dev/dma_device.hh	/^    void flush() { buffer.flush(); }$/;"	f	class:DmaReadFifo
flushAddr	./arch/alpha/tlb.cc	/^TLB::flushAddr(Addr addr, uint8_t asn)$/;"	f	class:AlphaISA::TLB
flushAll	./arch/alpha/tlb.cc	/^TLB::flushAll()$/;"	f	class:AlphaISA::TLB
flushAll	./arch/mips/tlb.cc	/^TLB::flushAll()$/;"	f	class:TLB
flushAll	./arch/power/tlb.cc	/^TLB::flushAll()$/;"	f	class:TLB
flushAll	./arch/sparc/tlb.cc	/^TLB::flushAll()$/;"	f	class:SparcISA::TLB
flushAll	./arch/x86/tlb.cc	/^TLB::flushAll()$/;"	f	class:X86ISA::TLB
flushAllNs	./arch/arm/tlb.cc	/^TLB::flushAllNs(bool hyp, uint8_t target_el, bool ignore_el)$/;"	f	class:TLB
flushAllSecurity	./arch/arm/tlb.cc	/^TLB::flushAllSecurity(bool secure_lookup, uint8_t target_el, bool ignore_el)$/;"	f	class:TLB
flushAsid	./arch/arm/tlb.cc	/^TLB::flushAsid(uint64_t asn, bool secure_lookup, uint8_t target_el)$/;"	f	class:TLB
flushCache	./arch/alpha/tlb.hh	/^    flushCache()$/;"	f	class:AlphaISA::TLB
flushCoalescedMMIO	./cpu/kvm/base.cc	/^BaseKvmCPU::flushCoalescedMMIO()$/;"	f	class:BaseKvmCPU
flushMva	./arch/arm/tlb.cc	/^TLB::flushMva(Addr mva, bool secure_lookup, bool hyp, uint8_t target_el)$/;"	f	class:TLB
flushMvaAsid	./arch/arm/tlb.cc	/^TLB::flushMvaAsid(Addr mva, uint64_t asn, bool secure_lookup, uint8_t target_el)$/;"	f	class:TLB
flushNonGlobal	./arch/x86/tlb.cc	/^TLB::flushNonGlobal()$/;"	f	class:X86ISA::TLB
flushProcesses	./arch/alpha/tlb.cc	/^TLB::flushProcesses()$/;"	f	class:AlphaISA::TLB
flushTLBs	./cpu/base.cc	/^BaseCPU::flushTLBs()$/;"	f	class:BaseCPU
flushTlb	./arch/arm/tlb.hh	/^    mutable Stats::Scalar flushTlb;$/;"	m	class:ArmISA::TLB
flushTlbAsid	./arch/arm/tlb.hh	/^    mutable Stats::Scalar flushTlbAsid;$/;"	m	class:ArmISA::TLB
flushTlbMva	./arch/arm/tlb.hh	/^    mutable Stats::Scalar flushTlbMva;$/;"	m	class:ArmISA::TLB
flushTlbMvaAsid	./arch/arm/tlb.hh	/^    mutable Stats::Scalar flushTlbMvaAsid;$/;"	m	class:ArmISA::TLB
flushToZero	./arch/arm/insts/vfp.hh	/^flushToZero(fpType &op)$/;"	f	namespace:ArmISA
flushToZero	./arch/arm/insts/vfp.hh	/^flushToZero(fpType &op1, fpType &op2)$/;"	f	namespace:ArmISA
flushToZero	./arch/arm/miscregs.hh	/^        Bitfield<3, 0> flushToZero;$/;"	m	namespace:ArmISA
flushTraces	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::flushTraces()$/;"	f	class:ElasticTrace
flushWindows	./arch/sparc/process.cc	/^Sparc64LiveProcess::flushWindows(ThreadContext *tc)$/;"	f	class:Sparc64LiveProcess
flushWindows	./arch/sparc/process.cc	/^void Sparc32LiveProcess::flushWindows(ThreadContext *tc)$/;"	f	class:Sparc32LiveProcess
flush_left	./base/cprintf_formats.hh	/^    bool flush_left;$/;"	m	struct:cp::Format
flushedEntries	./arch/arm/tlb.hh	/^    mutable Stats::Scalar flushedEntries;$/;"	m	class:ArmISA::TLB
fm	./arch/arm/types.hh	/^        Bitfield<3,  0>  fm;$/;"	m	namespace:ArmISA
fmo	./arch/arm/miscregs.hh	/^        Bitfield<3>      fmo;$/;"	m	namespace:ArmISA
fmt	./base/cprintf.hh	/^    Format fmt;$/;"	m	struct:cp::Print
fn	./arch/arm/types.hh	/^        Bitfield<18, 16> fn;$/;"	m	namespace:ArmISA
foldABit	./arch/x86/insts/microldstop.hh	/^        RegIndex foldOBit, foldABit;$/;"	m	class:X86ISA::LdStOp
foldOBit	./arch/x86/insts/microldstop.hh	/^        RegIndex foldOBit, foldABit;$/;"	m	class:X86ISA::LdStOp
foldOBit	./arch/x86/insts/micromediaop.hh	/^        static const RegIndex foldOBit = 0;$/;"	m	class:X86ISA::MediaOpBase
foldOBit	./arch/x86/insts/microregop.hh	/^        RegIndex foldOBit;$/;"	m	class:X86ISA::RegOpBase
fonr	./arch/alpha/pagetable.hh	/^    bool fonr;              \/\/ fault on read$/;"	m	struct:AlphaISA::TlbEntry
fonw	./arch/alpha/pagetable.hh	/^    bool fonw;              \/\/ fault on write$/;"	m	struct:AlphaISA::TlbEntry
forEachObject	./sim/cxx_manager.cc	/^CxxConfigManager::forEachObject(void (SimObject::*mem_func)())$/;"	f	class:CxxConfigManager
forceDeallocateTarget	./mem/cache/mshr_queue.cc	/^MSHRQueue::forceDeallocateTarget(MSHR *mshr)$/;"	f	class:MSHRQueue
forceSegAccessed	./cpu/kvm/x86_cpu.cc	/^forceSegAccessed(struct kvm_segment &seg)$/;"	f	file:
forceSubnames	./base/stats/text.cc	/^    bool forceSubnames;$/;"	m	struct:Stats::VectorPrint	file:
force_clock_low	./dev/arm/kmi.hh	/^        Bitfield<0> force_clock_low;$/;"	m	class:Pl050
force_data_low	./dev/arm/kmi.hh	/^        Bitfield<1> force_data_low;$/;"	m	class:Pl050
fork	./kern/tru64/tru64_syscalls.hh	/^        fork = 2,$/;"	e	enum:SystemCalls::__anon102
forkThread	./arch/mips/mt.hh	/^forkThread(TC *tc, Fault &fault, int Rd_bits, int Rs, int Rt)$/;"	f	namespace:MipsISA
format	./arch/arm/miscregs.hh	/^      Bitfield<31,29> format;$/;"	m	namespace:ArmISA
format	./base/cprintf.hh	/^    const char *format;$/;"	m	struct:cp::Print
format	./base/cprintf_formats.hh	/^    enum { none, string, integer, character, floating } format;$/;"	m	struct:cp::Format	typeref:enum:cp::Format::__anon118
format24h	./dev/mc146818.hh	/^        Bitfield<1> format24h; \/\/\/ 0 = 12 hours, 1 = 24 hours$/;"	m	class:MC146818
formatParamList	./sim/cxx_manager.cc	/^std::string formatParamList(const std::vector<std::string> &param_values)$/;"	f	file:
formatShorthand	./mem/slicc/generate/html.py	/^def formatShorthand(short):$/;"	f
format_char	./base/cprintf_formats.hh	/^format_char(std::ostream &out, char data, Format &fmt)$/;"	f	namespace:cp
format_char	./base/cprintf_formats.hh	/^format_char(std::ostream &out, const T &data, Format &fmt)$/;"	f	namespace:cp
format_char	./base/cprintf_formats.hh	/^format_char(std::ostream &out, int data, Format &fmt)$/;"	f	namespace:cp
format_char	./base/cprintf_formats.hh	/^format_char(std::ostream &out, long data, Format &fmt)$/;"	f	namespace:cp
format_char	./base/cprintf_formats.hh	/^format_char(std::ostream &out, long long data, Format &fmt)$/;"	f	namespace:cp
format_char	./base/cprintf_formats.hh	/^format_char(std::ostream &out, short data, Format &fmt)$/;"	f	namespace:cp
format_char	./base/cprintf_formats.hh	/^format_char(std::ostream &out, signed char data, Format &fmt)$/;"	f	namespace:cp
format_char	./base/cprintf_formats.hh	/^format_char(std::ostream &out, unsigned char data, Format &fmt)$/;"	f	namespace:cp
format_char	./base/cprintf_formats.hh	/^format_char(std::ostream &out, unsigned int data, Format &fmt)$/;"	f	namespace:cp
format_char	./base/cprintf_formats.hh	/^format_char(std::ostream &out, unsigned long data, Format &fmt)$/;"	f	namespace:cp
format_char	./base/cprintf_formats.hh	/^format_char(std::ostream &out, unsigned long long data, Format &fmt)$/;"	f	namespace:cp
format_char	./base/cprintf_formats.hh	/^format_char(std::ostream &out, unsigned short data, Format &fmt)$/;"	f	namespace:cp
format_float	./base/cprintf_formats.hh	/^format_float(std::ostream &out, const T &data, Format &fmt)$/;"	f	namespace:cp
format_float	./base/cprintf_formats.hh	/^format_float(std::ostream &out, double data, Format &fmt)$/;"	f	namespace:cp
format_float	./base/cprintf_formats.hh	/^format_float(std::ostream &out, float data, Format &fmt)$/;"	f	namespace:cp
format_integer	./base/cprintf_formats.hh	/^format_integer(std::ostream &out, char data, Format &fmt)$/;"	f	namespace:cp
format_integer	./base/cprintf_formats.hh	/^format_integer(std::ostream &out, const T &data, Format &fmt)$/;"	f	namespace:cp
format_integer	./base/cprintf_formats.hh	/^format_integer(std::ostream &out, signed char data, Format &fmt)$/;"	f	namespace:cp
format_integer	./base/cprintf_formats.hh	/^format_integer(std::ostream &out, unsigned char data, Format &fmt)$/;"	f	namespace:cp
format_string	./base/cprintf_formats.hh	/^format_string(std::ostream &out, const T &data, Format &fmt)$/;"	f	namespace:cp
format_string	./base/cprintf_formats.hh	/^format_string(std::ostream &out, const std::stringstream &data, Format &fmt)$/;"	f	namespace:cp
formattedArea	./arch/x86/bios/smbios.cc	/^        SMBiosHeader::formattedArea[] = {0,0,0,0,0};$/;"	m	class:X86ISA::SMBios::SMBiosTable::SMBiosHeader	file:
formattedArea	./arch/x86/bios/smbios.hh	/^        static const uint8_t formattedArea[5];$/;"	m	struct:X86ISA::SMBios::SMBiosTable::SMBiosHeader
formula	./base/statistics.hh	/^    const Formula &formula;$/;"	m	class:Stats::FormulaNode
forw	./kern/tru64/mbuf.hh	/^        Addr    forw, back;     \/\/ 0x20, 0x28$/;"	m	struct:tru64::m_ext::ext_refq
forwardAtomic	./mem/coherent_xbar.cc	/^CoherentXBar::forwardAtomic(PacketPtr pkt, PortID exclude_slave_port_id,$/;"	f	class:CoherentXBar
forwardAtomic	./mem/coherent_xbar.hh	/^    std::pair<MemCmd, Tick> forwardAtomic(PacketPtr pkt,$/;"	f	class:CoherentXBar
forwardComSize	./cpu/o3/O3CPU.py	/^    forwardComSize = Param.Unsigned(5, "Time buffer size for forward communication")$/;"	v	class:DerivO3CPU
forwardFunctional	./mem/coherent_xbar.cc	/^CoherentXBar::forwardFunctional(PacketPtr pkt, PortID exclude_slave_port_id)$/;"	f	class:CoherentXBar
forwardLatency	./mem/cache/base.hh	/^    const Cycles forwardLatency;$/;"	m	class:BaseCache
forwardLatency	./mem/xbar.hh	/^    const Cycles forwardLatency;$/;"	m	class:BaseXBar
forwardOldRegs	./cpu/o3/dyn_inst.hh	/^    void forwardOldRegs()$/;"	f	class:BaseO3DynInst
forwardSnoops	./mem/cache/base.hh	/^    const bool forwardSnoops;$/;"	m	class:BaseCache
forwardStoreData	./cpu/minor/lsq.cc	/^LSQ::StoreBuffer::forwardStoreData(LSQRequestPtr load,$/;"	f	class:Minor::LSQ::StoreBuffer
forwardTiming	./mem/coherent_xbar.cc	/^CoherentXBar::forwardTiming(PacketPtr pkt, PortID exclude_slave_port_id,$/;"	f	class:CoherentXBar
forwardTiming	./mem/coherent_xbar.hh	/^    void forwardTiming(PacketPtr pkt, PortID exclude_slave_port_id) {$/;"	f	class:CoherentXBar
forward_latency	./mem/XBar.py	/^    forward_latency = 0$/;"	v	class:L2XBar
forward_latency	./mem/XBar.py	/^    forward_latency = 1$/;"	v	class:IOXBar
forward_latency	./mem/XBar.py	/^    forward_latency = 4$/;"	v	class:SystemXBar
forward_latency	./mem/XBar.py	/^    forward_latency = Param.Cycles("Forward latency")$/;"	v	class:BaseXBar
forward_snoops	./mem/cache/Cache.py	/^    forward_snoops = Param.Bool(True,$/;"	v	class:BaseCache
foundIt	./arch/arm/decoder.hh	/^    bool foundIt;$/;"	m	class:ArmISA::Decoder
fp	./arch/mips/pra_constants.hh	/^    Bitfield<0>      fp;$/;"	m	namespace:MipsISA
fp	./base/loader/hex_file.hh	/^    FILE *fp;$/;"	m	class:HexFile
fp128_normalise	./arch/arm/insts/fplib.cc	/^fp128_normalise(uint64_t *mnt0, uint64_t *mnt1, int *exp)$/;"	f	namespace:ArmISA
fp16_FPConvertNaN_32	./arch/arm/insts/fplib.cc	/^fp16_FPConvertNaN_32(uint32_t op)$/;"	f	namespace:ArmISA
fp16_FPConvertNaN_64	./arch/arm/insts/fplib.cc	/^fp16_FPConvertNaN_64(uint64_t op)$/;"	f	namespace:ArmISA
fp16_defaultNaN	./arch/arm/insts/fplib.cc	/^fp16_defaultNaN()$/;"	f	namespace:ArmISA
fp16_infinity	./arch/arm/insts/fplib.cc	/^fp16_infinity(int sgn)$/;"	f	namespace:ArmISA
fp16_max_normal	./arch/arm/insts/fplib.cc	/^fp16_max_normal(int sgn)$/;"	f	namespace:ArmISA
fp16_normalise	./arch/arm/insts/fplib.cc	/^fp16_normalise(uint16_t mnt, int *exp)$/;"	f	namespace:ArmISA
fp16_pack	./arch/arm/insts/fplib.cc	/^fp16_pack(uint16_t sgn, uint16_t exp, uint16_t mnt)$/;"	f	namespace:ArmISA
fp16_round_	./arch/arm/insts/fplib.cc	/^fp16_round_(int sgn, int exp, uint16_t mnt, int rm, int mode, int *flags)$/;"	f	namespace:ArmISA
fp16_unpack	./arch/arm/insts/fplib.cc	/^fp16_unpack(int *sgn, int *exp, uint16_t *mnt, uint16_t x, int mode,$/;"	f	namespace:ArmISA
fp16_zero	./arch/arm/insts/fplib.cc	/^fp16_zero(int sgn)$/;"	f	namespace:ArmISA
fp32_FPConvertNaN_16	./arch/arm/insts/fplib.cc	/^fp32_FPConvertNaN_16(uint16_t op)$/;"	f	namespace:ArmISA
fp32_FPConvertNaN_64	./arch/arm/insts/fplib.cc	/^fp32_FPConvertNaN_64(uint64_t op)$/;"	f	namespace:ArmISA
fp32_FPOnePointFive	./arch/arm/insts/fplib.cc	/^fp32_FPOnePointFive(int sgn)$/;"	f	namespace:ArmISA
fp32_FPThree	./arch/arm/insts/fplib.cc	/^fp32_FPThree(int sgn)$/;"	f	namespace:ArmISA
fp32_FPTwo	./arch/arm/insts/fplib.cc	/^fp32_FPTwo(int sgn)$/;"	f	namespace:ArmISA
fp32_add	./arch/arm/insts/fplib.cc	/^fp32_add(uint32_t a, uint32_t b, int neg, int mode, int *flags)$/;"	f	namespace:ArmISA
fp32_compare_eq	./arch/arm/insts/fplib.cc	/^fp32_compare_eq(uint32_t a, uint32_t b, int mode, int *flags)$/;"	f	namespace:ArmISA
fp32_compare_ge	./arch/arm/insts/fplib.cc	/^fp32_compare_ge(uint32_t a, uint32_t b, int mode, int *flags)$/;"	f	namespace:ArmISA
fp32_compare_gt	./arch/arm/insts/fplib.cc	/^fp32_compare_gt(uint32_t a, uint32_t b, int mode, int *flags)$/;"	f	namespace:ArmISA
fp32_cvtf	./arch/arm/insts/fplib.cc	/^fp32_cvtf(uint64_t a, int fbits, int u, int mode, int *flags)$/;"	f	namespace:ArmISA
fp32_defaultNaN	./arch/arm/insts/fplib.cc	/^fp32_defaultNaN()$/;"	f	namespace:ArmISA
fp32_div	./arch/arm/insts/fplib.cc	/^fp32_div(uint32_t a, uint32_t b, int mode, int *flags)$/;"	f	namespace:ArmISA
fp32_infinity	./arch/arm/insts/fplib.cc	/^fp32_infinity(int sgn)$/;"	f	namespace:ArmISA
fp32_max_normal	./arch/arm/insts/fplib.cc	/^fp32_max_normal(int sgn)$/;"	f	namespace:ArmISA
fp32_minmaxnum	./arch/arm/insts/fplib.cc	/^fp32_minmaxnum(uint32_t *op1, uint32_t *op2, int sgn)$/;"	f	namespace:ArmISA
fp32_mul	./arch/arm/insts/fplib.cc	/^fp32_mul(uint32_t a, uint32_t b, int mode, int *flags)$/;"	f	namespace:ArmISA
fp32_muladd	./arch/arm/insts/fplib.cc	/^fp32_muladd(uint32_t a, uint32_t b, uint32_t c, int scale,$/;"	f	namespace:ArmISA
fp32_normalise	./arch/arm/insts/fplib.cc	/^fp32_normalise(uint32_t mnt, int *exp)$/;"	f	namespace:ArmISA
fp32_pack	./arch/arm/insts/fplib.cc	/^fp32_pack(uint32_t sgn, uint32_t exp, uint32_t mnt)$/;"	f	namespace:ArmISA
fp32_process_NaN	./arch/arm/insts/fplib.cc	/^fp32_process_NaN(uint32_t a, int mode, int *flags)$/;"	f	namespace:ArmISA
fp32_process_NaNs	./arch/arm/insts/fplib.cc	/^fp32_process_NaNs(uint32_t a, uint32_t b, int mode, int *flags)$/;"	f	namespace:ArmISA
fp32_process_NaNs3	./arch/arm/insts/fplib.cc	/^fp32_process_NaNs3(uint32_t a, uint32_t b, uint32_t c, int mode, int *flags)$/;"	f	namespace:ArmISA
fp32_repack	./arch/arm/insts/fplib.cc	/^fp32_repack(int sgn, int exp, uint32_t mnt)$/;"	f	namespace:ArmISA
fp32_round	./arch/arm/insts/fplib.cc	/^fp32_round(int sgn, int exp, uint32_t mnt, int mode, int *flags)$/;"	f	namespace:ArmISA
fp32_round_	./arch/arm/insts/fplib.cc	/^fp32_round_(int sgn, int exp, uint32_t mnt, int rm, int mode, int *flags)$/;"	f	namespace:ArmISA
fp32_sqrt	./arch/arm/insts/fplib.cc	/^fp32_sqrt(uint32_t a, int mode, int *flags)$/;"	f	namespace:ArmISA
fp32_unpack	./arch/arm/insts/fplib.cc	/^fp32_unpack(int *sgn, int *exp, uint32_t *mnt, uint32_t x, int mode,$/;"	f	namespace:ArmISA
fp32_zero	./arch/arm/insts/fplib.cc	/^fp32_zero(int sgn)$/;"	f	namespace:ArmISA
fp64_FPConvertNaN_16	./arch/arm/insts/fplib.cc	/^fp64_FPConvertNaN_16(uint16_t op)$/;"	f	namespace:ArmISA
fp64_FPConvertNaN_32	./arch/arm/insts/fplib.cc	/^fp64_FPConvertNaN_32(uint32_t op)$/;"	f	namespace:ArmISA
fp64_FPOnePointFive	./arch/arm/insts/fplib.cc	/^fp64_FPOnePointFive(int sgn)$/;"	f	namespace:ArmISA
fp64_FPThree	./arch/arm/insts/fplib.cc	/^fp64_FPThree(int sgn)$/;"	f	namespace:ArmISA
fp64_FPTwo	./arch/arm/insts/fplib.cc	/^fp64_FPTwo(int sgn)$/;"	f	namespace:ArmISA
fp64_add	./arch/arm/insts/fplib.cc	/^fp64_add(uint64_t a, uint64_t b, int neg, int mode, int *flags)$/;"	f	namespace:ArmISA
fp64_compare_eq	./arch/arm/insts/fplib.cc	/^fp64_compare_eq(uint64_t a, uint64_t b, int mode, int *flags)$/;"	f	namespace:ArmISA
fp64_compare_ge	./arch/arm/insts/fplib.cc	/^fp64_compare_ge(uint64_t a, uint64_t b, int mode, int *flags)$/;"	f	namespace:ArmISA
fp64_compare_gt	./arch/arm/insts/fplib.cc	/^fp64_compare_gt(uint64_t a, uint64_t b, int mode, int *flags)$/;"	f	namespace:ArmISA
fp64_cvtf	./arch/arm/insts/fplib.cc	/^fp64_cvtf(uint64_t a, int fbits, int u, int mode, int *flags)$/;"	f	namespace:ArmISA
fp64_defaultNaN	./arch/arm/insts/fplib.cc	/^fp64_defaultNaN()$/;"	f	namespace:ArmISA
fp64_div	./arch/arm/insts/fplib.cc	/^fp64_div(uint64_t a, uint64_t b, int mode, int *flags)$/;"	f	namespace:ArmISA
fp64_infinity	./arch/arm/insts/fplib.cc	/^fp64_infinity(int sgn)$/;"	f	namespace:ArmISA
fp64_max_normal	./arch/arm/insts/fplib.cc	/^fp64_max_normal(int sgn)$/;"	f	namespace:ArmISA
fp64_minmaxnum	./arch/arm/insts/fplib.cc	/^fp64_minmaxnum(uint64_t *op1, uint64_t *op2, int sgn)$/;"	f	namespace:ArmISA
fp64_mul	./arch/arm/insts/fplib.cc	/^fp64_mul(uint64_t a, uint64_t b, int mode, int *flags)$/;"	f	namespace:ArmISA
fp64_muladd	./arch/arm/insts/fplib.cc	/^fp64_muladd(uint64_t a, uint64_t b, uint64_t c, int scale,$/;"	f	namespace:ArmISA
fp64_normalise	./arch/arm/insts/fplib.cc	/^fp64_normalise(uint64_t mnt, int *exp)$/;"	f	namespace:ArmISA
fp64_pack	./arch/arm/insts/fplib.cc	/^fp64_pack(uint64_t sgn, uint64_t exp, uint64_t mnt)$/;"	f	namespace:ArmISA
fp64_process_NaN	./arch/arm/insts/fplib.cc	/^fp64_process_NaN(uint64_t a, int mode, int *flags)$/;"	f	namespace:ArmISA
fp64_process_NaNs	./arch/arm/insts/fplib.cc	/^fp64_process_NaNs(uint64_t a, uint64_t b, int mode, int *flags)$/;"	f	namespace:ArmISA
fp64_process_NaNs3	./arch/arm/insts/fplib.cc	/^fp64_process_NaNs3(uint64_t a, uint64_t b, uint64_t c, int mode, int *flags)$/;"	f	namespace:ArmISA
fp64_repack	./arch/arm/insts/fplib.cc	/^fp64_repack(int sgn, int exp, uint64_t mnt)$/;"	f	namespace:ArmISA
fp64_round	./arch/arm/insts/fplib.cc	/^fp64_round(int sgn, int exp, uint64_t mnt, int mode, int *flags)$/;"	f	namespace:ArmISA
fp64_round_	./arch/arm/insts/fplib.cc	/^fp64_round_(int sgn, int exp, uint64_t mnt, int rm, int mode, int *flags)$/;"	f	namespace:ArmISA
fp64_sqrt	./arch/arm/insts/fplib.cc	/^fp64_sqrt(uint64_t a, int mode, int *flags)$/;"	f	namespace:ArmISA
fp64_unpack	./arch/arm/insts/fplib.cc	/^fp64_unpack(int *sgn, int *exp, uint64_t *mnt, uint64_t x, int mode,$/;"	f	namespace:ArmISA
fp64_zero	./arch/arm/insts/fplib.cc	/^fp64_zero(int sgn)$/;"	f	namespace:ArmISA
fpAdd	./arch/arm/insts/vfp.hh	/^fpAdd(T a, T b)$/;"	f	namespace:ArmISA
fpAddD	./arch/arm/insts/vfp.hh	/^fpAddD(double a, double b)$/;"	f	namespace:ArmISA
fpAddS	./arch/arm/insts/vfp.hh	/^fpAddS(float a, float b)$/;"	f	namespace:ArmISA
fpAluAccesses	./cpu/o3/inst_queue.hh	/^    Stats::Scalar fpAluAccesses;$/;"	m	class:InstructionQueue
fpConvert	./arch/mips/utility.cc	/^fpConvert(ConvertType cvt_type, double fp_val)$/;"	f	namespace:MipsISA
fpDiv	./arch/arm/insts/vfp.hh	/^fpDiv(T a, T b)$/;"	f	namespace:ArmISA
fpDivD	./arch/arm/insts/vfp.hh	/^fpDivD(double a, double b)$/;"	f	namespace:ArmISA
fpDivS	./arch/arm/insts/vfp.hh	/^fpDivS(float a, float b)$/;"	f	namespace:ArmISA
fpImm	./arch/arm/types.hh	/^        Bitfield<2,  0>  fpImm;$/;"	m	namespace:ArmISA
fpInstQueueReads	./cpu/o3/inst_queue.hh	/^    Stats::Scalar fpInstQueueReads;$/;"	m	class:InstructionQueue
fpInstQueueWakeupQccesses	./cpu/o3/inst_queue.hh	/^    Stats::Scalar fpInstQueueWakeupQccesses;$/;"	m	class:InstructionQueue
fpInstQueueWrites	./cpu/o3/inst_queue.hh	/^    Stats::Scalar fpInstQueueWrites;$/;"	m	class:InstructionQueue
fpMax	./arch/arm/insts/vfp.hh	/^fpMax(T a, T b)$/;"	f	namespace:ArmISA
fpMaxNum	./arch/arm/insts/vfp.hh	/^fpMaxNum(T a, T b)$/;"	f	namespace:ArmISA
fpMin	./arch/arm/insts/vfp.hh	/^fpMin(T a, T b)$/;"	f	namespace:ArmISA
fpMinNum	./arch/arm/insts/vfp.hh	/^fpMinNum(T a, T b)$/;"	f	namespace:ArmISA
fpMul	./arch/arm/insts/vfp.hh	/^fpMul(T a, T b)$/;"	f	namespace:ArmISA
fpMulAdd	./arch/arm/insts/vfp.hh	/^fpMulAdd(T op1, T op2, T addend)$/;"	f	namespace:ArmISA
fpMulD	./arch/arm/insts/vfp.hh	/^fpMulD(double a, double b)$/;"	f	namespace:ArmISA
fpMulS	./arch/arm/insts/vfp.hh	/^fpMulS(float a, float b)$/;"	f	namespace:ArmISA
fpMulX	./arch/arm/insts/vfp.hh	/^fpMulX(T a, T b)$/;"	f	namespace:ArmISA
fpRIntX	./arch/arm/insts/vfp.hh	/^fpRIntX(T a, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fpRSqrts	./arch/arm/insts/vfp.hh	/^fpRSqrts(T a, T b)$/;"	f	namespace:ArmISA
fpRSqrtsS	./arch/arm/insts/vfp.hh	/^fpRSqrtsS(float a, float b)$/;"	f	namespace:ArmISA
fpRecipEstimate	./arch/arm/insts/vfp.cc	/^fpRecipEstimate(FPSCR &fpscr, float op)$/;"	f	namespace:ArmISA
fpRecps	./arch/arm/insts/vfp.hh	/^fpRecps(T a, T b)$/;"	f	namespace:ArmISA
fpRecpsS	./arch/arm/insts/vfp.hh	/^fpRecpsS(float a, float b)$/;"	f	namespace:ArmISA
fpReg	./arch/x86/registers.hh	/^    FloatReg fpReg;$/;"	m	union:X86ISA::__anon56
fpRegImm	./arch/arm/types.hh	/^        Bitfield<3>      fpRegImm;$/;"	m	namespace:ArmISA
fpRegfileReads	./cpu/o3/cpu.hh	/^    Stats::Scalar fpRegfileReads;$/;"	m	class:FullO3CPU
fpRegfileWrites	./cpu/o3/cpu.hh	/^    Stats::Scalar fpRegfileWrites;$/;"	m	class:FullO3CPU
fpRenameLookups	./cpu/o3/rename.hh	/^    Stats::Scalar fpRenameLookups;$/;"	m	class:DefaultRename
fpSqrt	./arch/arm/insts/vfp.hh	/^    fpSqrt (FPSCR fpscr,double x) const$/;"	f	class:ArmISA::FpOp
fpSqrt	./arch/arm/insts/vfp.hh	/^    fpSqrt (FPSCR fpscr,float x) const$/;"	f	class:ArmISA::FpOp
fpSub	./arch/arm/insts/vfp.hh	/^fpSub(T a, T b)$/;"	f	namespace:ArmISA
fpSubD	./arch/arm/insts/vfp.hh	/^fpSubD(double a, double b)$/;"	f	namespace:ArmISA
fpSubS	./arch/arm/insts/vfp.hh	/^fpSubS(float a, float b)$/;"	f	namespace:ArmISA
fpToBits	./arch/arm/insts/vfp.hh	/^fpToBits(double fp)$/;"	f	namespace:ArmISA
fpToBits	./arch/arm/insts/vfp.hh	/^fpToBits(float fp)$/;"	f	namespace:ArmISA
fpZeroRegIdx	./cpu/o3/scoreboard.hh	/^    PhysRegIndex fpZeroRegIdx;$/;"	m	class:Scoreboard
fpathconf	./kern/tru64/tru64_syscalls.hh	/^        fpathconf = 248,$/;"	e	enum:SystemCalls::__anon102
fpcr	./arch/alpha/isa.hh	/^        uint64_t fpcr;       \/\/ floating point condition codes$/;"	m	class:AlphaISA::ISA
fpen	./arch/arm/miscregs.hh	/^        Bitfield<21, 20> fpen;  \/\/ AArch64$/;"	m	namespace:ArmISA
fplibAbs	./arch/arm/insts/fplib.cc	/^fplibAbs(uint32_t op)$/;"	f	namespace:ArmISA
fplibAbs	./arch/arm/insts/fplib.cc	/^fplibAbs(uint64_t op)$/;"	f	namespace:ArmISA
fplibAdd	./arch/arm/insts/fplib.cc	/^fplibAdd(uint32_t op1, uint32_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibAdd	./arch/arm/insts/fplib.cc	/^fplibAdd(uint64_t op1, uint64_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibCompare	./arch/arm/insts/fplib.cc	/^fplibCompare(uint32_t op1, uint32_t op2, bool signal_nans, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibCompare	./arch/arm/insts/fplib.cc	/^fplibCompare(uint64_t op1, uint64_t op2, bool signal_nans, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibCompareEQ	./arch/arm/insts/fplib.cc	/^fplibCompareEQ(uint32_t a, uint32_t b, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibCompareEQ	./arch/arm/insts/fplib.cc	/^fplibCompareEQ(uint64_t a, uint64_t b, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibCompareGE	./arch/arm/insts/fplib.cc	/^fplibCompareGE(uint32_t a, uint32_t b, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibCompareGE	./arch/arm/insts/fplib.cc	/^fplibCompareGE(uint64_t a, uint64_t b, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibCompareGT	./arch/arm/insts/fplib.cc	/^fplibCompareGT(uint32_t a, uint32_t b, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibCompareGT	./arch/arm/insts/fplib.cc	/^fplibCompareGT(uint64_t a, uint64_t b, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibConvert	./arch/arm/insts/fplib.cc	/^fplibConvert(uint16_t op, FPRounding rounding, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibConvert	./arch/arm/insts/fplib.cc	/^fplibConvert(uint32_t op, FPRounding rounding, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibConvert	./arch/arm/insts/fplib.cc	/^fplibConvert(uint64_t op, FPRounding rounding, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibDiv	./arch/arm/insts/fplib.cc	/^fplibDiv(uint32_t op1, uint32_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibDiv	./arch/arm/insts/fplib.cc	/^fplibDiv(uint64_t op1, uint64_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibFPToFixed	./arch/arm/insts/fplib.cc	/^fplibFPToFixed(uint32_t op, int fbits, bool u, FPRounding rounding, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibFPToFixed	./arch/arm/insts/fplib.cc	/^fplibFPToFixed(uint64_t op, int fbits, bool u, FPRounding rounding, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibFixedToFP	./arch/arm/insts/fplib.cc	/^fplibFixedToFP(uint64_t op, int fbits, bool u, FPRounding rounding, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibMax	./arch/arm/insts/fplib.cc	/^fplibMax(uint32_t op1, uint32_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibMax	./arch/arm/insts/fplib.cc	/^fplibMax(uint64_t op1, uint64_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibMaxNum	./arch/arm/insts/fplib.cc	/^fplibMaxNum(uint32_t op1, uint32_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibMaxNum	./arch/arm/insts/fplib.cc	/^fplibMaxNum(uint64_t op1, uint64_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibMin	./arch/arm/insts/fplib.cc	/^fplibMin(uint32_t op1, uint32_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibMin	./arch/arm/insts/fplib.cc	/^fplibMin(uint64_t op1, uint64_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibMinNum	./arch/arm/insts/fplib.cc	/^fplibMinNum(uint32_t op1, uint32_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibMinNum	./arch/arm/insts/fplib.cc	/^fplibMinNum(uint64_t op1, uint64_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibMul	./arch/arm/insts/fplib.cc	/^fplibMul(uint32_t op1, uint32_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibMul	./arch/arm/insts/fplib.cc	/^fplibMul(uint64_t op1, uint64_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibMulAdd	./arch/arm/insts/fplib.cc	/^fplibMulAdd(uint32_t addend, uint32_t op1, uint32_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibMulAdd	./arch/arm/insts/fplib.cc	/^fplibMulAdd(uint64_t addend, uint64_t op1, uint64_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibMulX	./arch/arm/insts/fplib.cc	/^fplibMulX(uint32_t op1, uint32_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibMulX	./arch/arm/insts/fplib.cc	/^fplibMulX(uint64_t op1, uint64_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibNeg	./arch/arm/insts/fplib.cc	/^fplibNeg(uint32_t op)$/;"	f	namespace:ArmISA
fplibNeg	./arch/arm/insts/fplib.cc	/^fplibNeg(uint64_t op)$/;"	f	namespace:ArmISA
fplibRSqrtEstimate	./arch/arm/insts/fplib.cc	/^fplibRSqrtEstimate(uint32_t op, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibRSqrtEstimate	./arch/arm/insts/fplib.cc	/^fplibRSqrtEstimate(uint64_t op, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibRSqrtStepFused	./arch/arm/insts/fplib.cc	/^fplibRSqrtStepFused(uint32_t op1, uint32_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibRSqrtStepFused	./arch/arm/insts/fplib.cc	/^fplibRSqrtStepFused(uint64_t op1, uint64_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibRecipEstimate	./arch/arm/insts/fplib.cc	/^fplibRecipEstimate(uint32_t op, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibRecipEstimate	./arch/arm/insts/fplib.cc	/^fplibRecipEstimate(uint64_t op, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibRecipStepFused	./arch/arm/insts/fplib.cc	/^fplibRecipStepFused(uint32_t op1, uint32_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibRecipStepFused	./arch/arm/insts/fplib.cc	/^fplibRecipStepFused(uint64_t op1, uint64_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibRecpX	./arch/arm/insts/fplib.cc	/^fplibRecpX(uint32_t op, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibRecpX	./arch/arm/insts/fplib.cc	/^fplibRecpX(uint64_t op, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibRoundInt	./arch/arm/insts/fplib.cc	/^fplibRoundInt(uint32_t op, FPRounding rounding, bool exact, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibRoundInt	./arch/arm/insts/fplib.cc	/^fplibRoundInt(uint64_t op, FPRounding rounding, bool exact, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibSqrt	./arch/arm/insts/fplib.cc	/^fplibSqrt(uint32_t op, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibSqrt	./arch/arm/insts/fplib.cc	/^fplibSqrt(uint64_t op, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibSub	./arch/arm/insts/fplib.cc	/^fplibSub(uint32_t op1, uint32_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fplibSub	./arch/arm/insts/fplib.cc	/^fplibSub(uint64_t op1, uint64_t op2, FPSCR &fpscr)$/;"	f	namespace:ArmISA
fpr	./arch/alpha/remote_gdb.hh	/^            uint64_t fpr[32];$/;"	m	struct:AlphaISA::RemoteGDB::AlphaGdbRegCache::__anon48
fpr	./arch/arm/remote_gdb.hh	/^          uint32_t fpr[8*3];$/;"	m	struct:ArmISA::RemoteGDB::AArch32GdbRegCache::__anon67
fpr	./arch/mips/remote_gdb.hh	/^            uint32_t fpr[32];$/;"	m	struct:MipsISA::RemoteGDB::MipsGdbRegCache::__anon83
fpr	./arch/power/remote_gdb.hh	/^            uint64_t fpr[NumFloatArchRegs];$/;"	m	struct:PowerISA::RemoteGDB::PowerGdbRegCache::__anon53
fpr	./arch/sparc/remote_gdb.hh	/^            uint64_t fpr[32];$/;"	m	struct:SparcISA::RemoteGDB::SPARC64GdbRegCache::__anon43
fpr	./cpu/kvm/x86_cpu.cc	/^    uint8_t fpr[8][16];$/;"	m	struct:FXSave	file:
fprSqrtEstimate	./arch/arm/insts/vfp.cc	/^fprSqrtEstimate(FPSCR &fpscr, float op)$/;"	f	namespace:ArmISA
fpreg	./arch/alpha/registers.hh	/^    FloatReg   fpreg;$/;"	m	union:AlphaISA::AnyReg
fpreg	./arch/arm/registers.hh	/^    FloatReg fpreg;$/;"	m	union:ArmISA::__anon66
fpreg	./arch/mips/registers.hh	/^    FloatReg fpreg;$/;"	m	union:MipsISA::__anon82
fpreg	./arch/power/registers.hh	/^    FloatReg fpreg;$/;"	m	union:PowerISA::__anon52
fpreg	./arch/sparc/registers.hh	/^    FloatReg fpreg;$/;"	m	union:SparcISA::__anon41
fprmask	./arch/alpha/aout_machdep.h	/^    uint32_t    fprmask;        \/\/\/< FPR mask (unused, AFAIK)$/;"	m	struct:aout_exechdr
fprs	./arch/sparc/isa.hh	/^    uint8_t fprs;           \/\/ Floating-Point Register State$/;"	m	class:SparcISA::ISA
fprs	./arch/sparc/remote_gdb.hh	/^            uint64_t fprs;$/;"	m	struct:SparcISA::RemoteGDB::SPARC64GdbRegCache::__anon43
fpscr	./arch/arm/remote_gdb.hh	/^          uint32_t fpscr;$/;"	m	struct:ArmISA::RemoteGDB::AArch32GdbRegCache::__anon67
fpscrLen	./arch/arm/decoder.hh	/^    int fpscrLen;$/;"	m	class:ArmISA::Decoder
fpscrLen	./arch/arm/types.hh	/^        Bitfield<39, 37> fpscrLen;$/;"	m	namespace:ArmISA
fpscrStride	./arch/arm/decoder.hh	/^    int fpscrStride;$/;"	m	class:ArmISA::Decoder
fpscrStride	./arch/arm/types.hh	/^        Bitfield<41, 40> fpscrStride;$/;"	m	namespace:ArmISA
fpsid	./arch/arm/ArmISA.py	/^    fpsid = Param.UInt32(0x410430a0, "Floating-point System ID Register")$/;"	v	class:ArmISA
fpu_cs	./cpu/kvm/x86_cpu.cc	/^            uint16_t fpu_cs;$/;"	m	struct:FXSave::__anon38::__anon39	file:
fpu_dp	./cpu/kvm/x86_cpu.cc	/^            uint32_t fpu_dp;$/;"	m	struct:FXSave::__anon38::__anon39	file:
fpu_dp	./cpu/kvm/x86_cpu.cc	/^            uint64_t fpu_dp;$/;"	m	struct:FXSave::__anon38::__anon40	file:
fpu_ds	./cpu/kvm/x86_cpu.cc	/^            uint16_t fpu_ds;$/;"	m	struct:FXSave::__anon38::__anon39	file:
fpu_ip	./cpu/kvm/x86_cpu.cc	/^            uint32_t fpu_ip;$/;"	m	struct:FXSave::__anon38::__anon39	file:
fpu_ip	./cpu/kvm/x86_cpu.cc	/^            uint64_t fpu_ip;$/;"	m	struct:FXSave::__anon38::__anon40	file:
fr	./arch/mips/pra_constants.hh	/^    Bitfield<26>     fr;$/;"	m	namespace:MipsISA
fr	./arch/power/miscregs.hh	/^    Bitfield<18> fr;$/;"	m	namespace:PowerISA
frag_flags	./base/inet.hh	/^    uint16_t frag_flags() const { return ntohs(ip_off) >> 13; }$/;"	f	struct:Net::IpHdr
frag_off	./base/inet.hh	/^    uint16_t frag_off() const { return ntohs(ip_off) & 0x1fff; }$/;"	f	struct:Net::IpHdr
fragment	./base/inet.hh	/^        struct ip6_opt_fragment fragment;$/;"	m	union:Net::ip6_opt_hdr::__anon120	typeref:struct:Net::ip6_opt_hdr::__anon120::ip6_opt_fragment
fragmentExt	./base/inet.hh	/^    const Ip6Opt* fragmentExt() const { return getExt(IP_PROTO_FRAGMENT); }$/;"	f	struct:Net::Ip6Hdr
fragmentIdent	./base/inet.hh	/^    uint32_t fragmentIdent() const { return ntohl(ext_data.fragment.ident); }$/;"	f	struct:Net::Ip6Opt
fragmentOfflg	./base/inet.hh	/^    uint16_t fragmentOfflg() const { return ntohs(ext_data.fragment.offlg); }$/;"	f	struct:Net::Ip6Opt
fragmentPackets	./cpu/minor/lsq.hh	/^        std::vector<Packet *> fragmentPackets;$/;"	m	class:Minor::LSQ::SplitDataRequest
fragmentRequests	./cpu/minor/lsq.hh	/^        std::vector<Request *> fragmentRequests;$/;"	m	class:Minor::LSQ::SplitDataRequest
fragments	./cpu/simple/timing.hh	/^        PacketPtr fragments[2];$/;"	m	class:TimingSimpleCPU::SplitMainSenderState
frameBufferResized	./base/vnc/vncinput.hh	/^    virtual void frameBufferResized() {};$/;"	f	class:VncInput
frameBufferResized	./base/vnc/vncserver.cc	/^VncServer::frameBufferResized()$/;"	f	class:VncServer
frameEnd	./dev/arm/hdlcd.hh	/^        Addr frameEnd;$/;"	m	class:HDLcd::DmaEngine
frameFromAddr	./dev/arm/gic_v2m.cc	/^Gicv2m::frameFromAddr(Addr a) const$/;"	f	class:Gicv2m
frameRef	./mem/slicc/symbols/StateMachine.py	/^    def frameRef(self, click_href, click_target, over_href, over_num, text):$/;"	m	class:StateMachine
frame_capture	./base/vnc/Vnc.py	/^    frame_capture = Param.Bool(False, "capture changed frames to files")$/;"	v	class:VncInput
frameoffset	./base/loader/coff_sym.h	/^    coff_int    frameoffset;    \/* frame size *\/$/;"	m	struct:pdr
framereg	./base/loader/coff_sym.h	/^    coff_short  framereg;       \/* frame pointer register *\/$/;"	m	struct:pdr
frames	./dev/arm/Gic.py	/^    frames = VectorParam.Gicv2mFrame([], "Power of two number of frames")$/;"	v	class:Gicv2m
frames	./dev/arm/gic_v2m.hh	/^    std::vector<Gicv2mFrame *> frames;$/;"	m	class:Gicv2m
freeEntries	./cpu/o3/inst_queue.hh	/^    unsigned freeEntries;$/;"	m	class:InstructionQueue
freeEntries	./cpu/o3/rename.hh	/^    FreeEntries freeEntries[Impl::MaxThreads];$/;"	m	class:DefaultRename
freeFU	./cpu/o3/inst_queue.hh	/^        bool freeFU;$/;"	m	class:InstructionQueue::FUCompletion
freeIQEntries	./cpu/o3/comm.hh	/^        unsigned freeIQEntries;$/;"	m	struct:TimeBufStruct::iewComm
freeLQEntries	./cpu/o3/comm.hh	/^        unsigned freeLQEntries;$/;"	m	struct:TimeBufStruct::iewComm
freeLine	./cpu/minor/pipe_data.cc	/^ForwardLineData::freeLine()$/;"	f	class:Minor::ForwardLineData
freeList	./arch/sparc/tlb.hh	/^    std::list<TlbEntry*> freeList;$/;"	m	class:SparcISA::TLB
freeList	./arch/x86/tlb.hh	/^        EntryList freeList;$/;"	m	class:X86ISA::TLB
freeList	./cpu/o3/cpu.hh	/^    typename CPUPolicy::FreeList freeList;$/;"	m	class:FullO3CPU
freeList	./cpu/o3/rename.hh	/^    FreeList *freeList;$/;"	m	class:DefaultRename
freeList	./cpu/o3/rename_map.hh	/^    SimpleFreeList *freeList;$/;"	m	class:SimpleRenameMap
freeList	./mem/cache/mshr_queue.hh	/^    MSHR::List freeList;$/;"	m	class:MSHRQueue
freeMemSize	./sim/system.cc	/^System::freeMemSize() const$/;"	f	class:System
freeMemSlot	./cpu/kvm/vm.cc	/^KvmVM::freeMemSlot(const KvmVM::MemSlot num)$/;"	f	class:KvmVM
freeROBEntries	./cpu/o3/comm.hh	/^        unsigned freeROBEntries; \/\/ *R$/;"	m	struct:TimeBufStruct::commitComm
freeRegs	./cpu/o3/free_list.hh	/^    std::queue<PhysRegIndex> freeRegs;$/;"	m	class:SimpleFreeList
freeRequests	./dev/dma_device.hh	/^    std::deque<DmaDoneEventUPtr> freeRequests;$/;"	m	class:DmaReadFifo
freeReservation	./cpu/minor/buffers.hh	/^    void freeReservation() { queue.freeReservation(); }$/;"	f	class:Minor::InputBuffer
freeReservation	./cpu/minor/buffers.hh	/^    void freeReservation()$/;"	f	class:Minor::Queue
freeSQEntries	./cpu/o3/comm.hh	/^        unsigned freeSQEntries;$/;"	m	struct:TimeBufStruct::iewComm
freeUnitNextCycle	./cpu/o3/fu_pool.cc	/^FUPool::freeUnitNextCycle(int fu_idx)$/;"	f	class:FUPool
freehigh	./arch/alpha/linux/linux.hh	/^       uint64_t freehigh;  \/* Available high memory size *\/$/;"	m	struct:AlphaLinux::__anon51
freehigh	./arch/arm/linux/linux.hh	/^        uint32_t freehigh;  \/* Available high memory size *\/$/;"	m	struct:ArmLinux32::__anon76
freehigh	./arch/arm/linux/linux.hh	/^        uint64_t freehigh;  \/* Available high memory size *\/$/;"	m	struct:ArmLinux64::__anon79
freehigh	./arch/mips/linux/linux.hh	/^       uint32_t freehigh;  \/* Available high memory size *\/$/;"	m	struct:MipsLinux::__anon84
freehigh	./arch/sparc/linux/linux.hh	/^        uint32_t freehigh;  \/* Available high memory size *\/$/;"	m	struct:Sparc32Linux::__anon47
freehigh	./arch/sparc/linux/linux.hh	/^        uint64_t freehigh;  \/* Available high memory size *\/$/;"	m	struct:SparcLinux::__anon45
freehigh	./arch/x86/linux/linux.hh	/^        uint64_t freehigh;  \/* Available high memory size *\/$/;"	m	struct:X86Linux64::__anon61
freehigh	./arch/x86/linux/linux.hh	/^       uint32_t freehigh;  \/* Available high memory size *\/$/;"	m	struct:X86Linux32::__anon63
freeram	./arch/alpha/linux/linux.hh	/^       uint64_t freeram;   \/* Available memory size *\/$/;"	m	struct:AlphaLinux::__anon51
freeram	./arch/arm/linux/linux.hh	/^        uint32_t freeram;   \/* Available memory size *\/$/;"	m	struct:ArmLinux32::__anon76
freeram	./arch/arm/linux/linux.hh	/^        uint64_t freeram;   \/* Available memory size *\/$/;"	m	struct:ArmLinux64::__anon79
freeram	./arch/mips/linux/linux.hh	/^       uint32_t freeram;   \/* Available memory size *\/$/;"	m	struct:MipsLinux::__anon84
freeram	./arch/sparc/linux/linux.hh	/^        uint32_t freeram;   \/* Available memory size *\/$/;"	m	struct:Sparc32Linux::__anon47
freeram	./arch/sparc/linux/linux.hh	/^        uint64_t freeram;   \/* Available memory size *\/$/;"	m	struct:SparcLinux::__anon45
freeram	./arch/x86/linux/linux.hh	/^        uint64_t freeram;   \/* Available memory size *\/$/;"	m	struct:X86Linux64::__anon61
freeram	./arch/x86/linux/linux.hh	/^       uint32_t freeram;   \/* Available memory size *\/$/;"	m	struct:X86Linux32::__anon63
freeswap	./arch/alpha/linux/linux.hh	/^       uint64_t freeswap;  \/* swap space still available *\/$/;"	m	struct:AlphaLinux::__anon51
freeswap	./arch/arm/linux/linux.hh	/^        uint32_t freeswap;  \/* swap space still available *\/$/;"	m	struct:ArmLinux32::__anon76
freeswap	./arch/arm/linux/linux.hh	/^        uint64_t freeswap;  \/* swap space still available *\/$/;"	m	struct:ArmLinux64::__anon79
freeswap	./arch/mips/linux/linux.hh	/^       uint32_t freeswap;  \/* swap space still available *\/$/;"	m	struct:MipsLinux::__anon84
freeswap	./arch/sparc/linux/linux.hh	/^        uint32_t freeswap;  \/* swap space still available *\/$/;"	m	struct:Sparc32Linux::__anon47
freeswap	./arch/sparc/linux/linux.hh	/^        uint64_t freeswap;  \/* swap space still available *\/$/;"	m	struct:SparcLinux::__anon45
freeswap	./arch/x86/linux/linux.hh	/^        uint64_t freeswap;  \/* swap space still available *\/$/;"	m	struct:X86Linux64::__anon61
freeswap	./arch/x86/linux/linux.hh	/^       uint32_t freeswap;  \/* swap space still available *\/$/;"	m	struct:X86Linux32::__anon63
fregmask	./base/loader/coff_sym.h	/^    coff_uint   fregmask;       \/* save floating point register mask *\/$/;"	m	struct:pdr
fregoffset	./base/loader/coff_sym.h	/^    coff_int    fregoffset;     \/* save floating point register offset *\/$/;"	m	struct:pdr
freq	./dev/arm/RealView.py	/^    freq = Param.Clock("Default frequency")$/;"	v	class:RealViewOsc
freq	./dev/arm/generic_timer.hh	/^    uint64_t freq() const { return _freq; }$/;"	f	class:SystemCounter
freqOpPoints	./sim/clock_domain.hh	/^    const std::vector<Tick> freqOpPoints;$/;"	m	class:SrcClockDomain
frequency	./dev/alpha/Tsunami.py	/^    frequency = Param.Frequency('1024Hz', "frequency of interrupts")$/;"	v	class:TsunamiIO
frequency	./dev/alpha/tsunami_io.cc	/^TsunamiIO::frequency() const$/;"	f	class:TsunamiIO
frequency	./dev/mips/Malta.py	/^    frequency = Param.Frequency('1024Hz', "frequency of interrupts")$/;"	v	class:MaltaIO
frequency	./dev/mips/malta_io.cc	/^MaltaIO::frequency() const$/;"	f	class:MaltaIO
frequency	./sim/clocked_object.hh	/^    inline uint64_t frequency() const$/;"	f	class:Clocked
frequency_tolerance	./python/m5/params.py	/^frequency_tolerance = 0.001  # 0.1%$/;"	v
frequency_tolerance	./python/m5/ticks.py	/^frequency_tolerance = 0.001  # 0.1%$/;"	v
from	./cpu/testers/traffic_gen/traffic_gen.hh	/^        uint32_t from;$/;"	m	struct:TrafficGen::Transition
from64	./arch/arm/faults.hh	/^    bool from64;  \/\/ True if the exception is generated from the AArch64 state$/;"	m	class:ArmISA::ArmFault
fromCommit	./cpu/o3/decode.hh	/^    typename TimeBuffer<TimeStruct>::wire fromCommit;$/;"	m	class:DefaultDecode
fromCommit	./cpu/o3/fetch.hh	/^    typename TimeBuffer<TimeStruct>::wire fromCommit;$/;"	m	class:DefaultFetch
fromCommit	./cpu/o3/iew.hh	/^    typename TimeBuffer<TimeStruct>::wire fromCommit;$/;"	m	class:DefaultIEW
fromCommit	./cpu/o3/inst_queue.hh	/^    typename TimeBuffer<TimeStruct>::wire fromCommit;$/;"	m	class:InstructionQueue
fromCommit	./cpu/o3/rename.hh	/^    typename TimeBuffer<TimeStruct>::wire fromCommit;$/;"	m	class:DefaultRename
fromDecode	./cpu/o3/fetch.hh	/^    typename TimeBuffer<TimeStruct>::wire fromDecode;$/;"	m	class:DefaultFetch
fromDecode	./cpu/o3/rename.hh	/^    typename TimeBuffer<DecodeStruct>::wire fromDecode;$/;"	m	class:DefaultRename
fromEL	./arch/arm/faults.hh	/^    ExceptionLevel fromEL;  \/\/ Source exception level$/;"	m	class:ArmISA::ArmFault
fromFetch	./cpu/o3/commit.hh	/^    typename TimeBuffer<FetchStruct>::wire fromFetch;$/;"	m	class:DefaultCommit
fromFetch	./cpu/o3/decode.hh	/^    typename TimeBuffer<FetchStruct>::wire fromFetch;$/;"	m	class:DefaultDecode
fromIEW	./cpu/o3/commit.hh	/^    typename TimeBuffer<IEWStruct>::wire fromIEW;$/;"	m	class:DefaultCommit
fromIEW	./cpu/o3/decode.hh	/^    typename TimeBuffer<TimeStruct>::wire fromIEW;$/;"	m	class:DefaultDecode
fromIEW	./cpu/o3/fetch.hh	/^    typename TimeBuffer<TimeStruct>::wire fromIEW;$/;"	m	class:DefaultFetch
fromIEW	./cpu/o3/rename.hh	/^    typename TimeBuffer<TimeStruct>::wire fromIEW;$/;"	m	class:DefaultRename
fromIssue	./cpu/o3/iew.hh	/^    typename TimeBuffer<IssueStruct>::wire fromIssue;$/;"	m	class:DefaultIEW
fromIssue	./cpu/o3/lsq_unit.hh	/^    typename TimeBuffer<IssueStruct>::wire fromIssue;$/;"	m	class:LSQUnit
fromMode	./arch/arm/faults.hh	/^    OperatingMode fromMode;  \/\/ Source operating mode$/;"	m	class:ArmISA::ArmFault
fromPixel	./base/framebuffer.hh	/^        uint32_t fromPixel(uint8_t ch) const {$/;"	f	struct:PixelConverter::Channel
fromPixel	./base/framebuffer.hh	/^    uint32_t fromPixel(const Pixel &pixel) const {$/;"	f	class:PixelConverter
fromPixel	./base/framebuffer.hh	/^    void fromPixel(uint8_t *rfb, const Pixel &pixel) const {$/;"	f	class:PixelConverter
fromPrefix	./sim/cxx_manager.hh	/^        std::string fromPrefix;$/;"	m	struct:CxxConfigManager::Renaming
fromRename	./cpu/o3/commit.hh	/^    typename TimeBuffer<RenameStruct>::wire fromRename;$/;"	m	class:DefaultCommit
fromRename	./cpu/o3/decode.hh	/^    typename TimeBuffer<TimeStruct>::wire fromRename;$/;"	m	class:DefaultDecode
fromRename	./cpu/o3/fetch.hh	/^    typename TimeBuffer<TimeStruct>::wire fromRename;$/;"	m	class:DefaultFetch
fromRename	./cpu/o3/iew.hh	/^    typename TimeBuffer<RenameStruct>::wire fromRename;$/;"	m	class:DefaultIEW
fromSeconds	./python/m5/ticks.py	/^def fromSeconds(value):$/;"	f
fromkeys	./python/m5/util/sorteddict.py	/^    def fromkeys(cls, seq, value=None):$/;"	m	class:SortedDict
front	./cpu/minor/buffers.hh	/^    ElemType &front() { return *popWire; }$/;"	f	class:Minor::SelfStallingPipeline
front	./cpu/minor/buffers.hh	/^    ElemType &front() { return queue.front(); }$/;"	f	class:Minor::Queue
front	./cpu/minor/buffers.hh	/^    ElemType &front()$/;"	f	class:Minor::InputBuffer
front	./cpu/minor/buffers.hh	/^    const ElemType &front() const { return *popWire; }$/;"	f	class:Minor::SelfStallingPipeline
front	./cpu/minor/buffers.hh	/^    const ElemType &front() const { return queue.front(); }$/;"	f	class:Minor::Queue
front	./cpu/minor/buffers.hh	/^    const ElemType &front() const$/;"	f	class:Minor::InputBuffer
front	./dev/net/pktfifo.hh	/^    EthPacketPtr front() { return fifo.begin()->packet; }$/;"	f	class:PacketFifo
frontendLatency	./mem/dram_ctrl.hh	/^    const Tick frontendLatency;$/;"	m	class:DRAMCtrl
frontendLatency	./mem/xbar.hh	/^    const Cycles frontendLatency;$/;"	m	class:BaseXBar
frontend_latency	./mem/XBar.py	/^    frontend_latency = 1$/;"	v	class:L2XBar
frontend_latency	./mem/XBar.py	/^    frontend_latency = 2$/;"	v	class:IOXBar
frontend_latency	./mem/XBar.py	/^    frontend_latency = 3$/;"	v	class:SystemXBar
frontend_latency	./mem/XBar.py	/^    frontend_latency = Param.Cycles("Frontend latency")$/;"	v	class:BaseXBar
fs	./arch/x86/remote_gdb.hh	/^          uint32_t fs;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
fs	./arch/x86/remote_gdb.hh	/^          uint32_t fs;$/;"	m	struct:X86ISA::RemoteGDB::X86GdbRegCache::__anon57
fsHigh	./arch/arm/miscregs.hh	/^        Bitfield<10> fsHigh;$/;"	m	namespace:ArmISA
fsLow	./arch/arm/miscregs.hh	/^        Bitfield<3, 0> fsLow;$/;"	m	namespace:ArmISA
fsgsbase	./arch/x86/regs/misc.hh	/^        Bitfield<16> fsgsbase; \/\/ Enable RDFSBASE, RDGSBASE, WRFSBASE,$/;"	m	namespace:X86ISA
fsid_t	./kern/tru64/tru64.hh	/^    typedef quad fsid_t;$/;"	t	class:Tru64
fsr	./arch/mips/remote_gdb.hh	/^            uint32_t fsr;$/;"	m	struct:MipsISA::RemoteGDB::MipsGdbRegCache::__anon83
fsr	./arch/sparc/isa.hh	/^    uint64_t fsr;           \/\/ Floating-Point State Register$/;"	m	class:SparcISA::ISA
fsr	./arch/sparc/remote_gdb.hh	/^            uint32_t fsr;$/;"	m	struct:SparcISA::RemoteGDB::SPARCGdbRegCache::__anon42
fsr	./arch/sparc/remote_gdb.hh	/^            uint64_t fsr;$/;"	m	struct:SparcISA::RemoteGDB::SPARC64GdbRegCache::__anon43
fstat	./kern/tru64/tru64_syscalls.hh	/^        fstat = 226,$/;"	e	enum:SystemCalls::__anon102
fstat64Func	./sim/syscall_emul.hh	/^fstat64Func(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
fstatFunc	./sim/syscall_emul.hh	/^fstatFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
fstatat64Func	./sim/syscall_emul.hh	/^fstatat64Func(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
fstatfs	./kern/tru64/tru64_syscalls.hh	/^        fstatfs = 228,$/;"	e	enum:SystemCalls::__anon102
fstatfsFunc	./sim/syscall_emul.hh	/^fstatfsFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
fsw	./cpu/kvm/x86_cpu.cc	/^    uint16_t fsw;$/;"	m	struct:FXSave	file:
fsync	./kern/tru64/tru64_syscalls.hh	/^        fsync = 95,$/;"	e	enum:SystemCalls::__anon102
ftruncate	./kern/tru64/tru64_syscalls.hh	/^        ftruncate = 130,$/;"	e	enum:SystemCalls::__anon102
ftruncate64Func	./sim/syscall_emul.cc	/^ftruncate64Func(SyscallDesc *desc, int num,$/;"	f
ftruncateFunc	./sim/syscall_emul.cc	/^ftruncateFunc(SyscallDesc *desc, int num,$/;"	f
ftwx	./cpu/kvm/x86_cpu.cc	/^    uint8_t ftwx;$/;"	m	struct:FXSave	file:
fu	./arch/power/miscregs.hh	/^            Bitfield<12> fu;$/;"	m	namespace:PowerISA
fuBusy	./cpu/o3/inst_queue.hh	/^    Stats::Vector fuBusy;$/;"	m	class:InstructionQueue
fuBusyRate	./cpu/o3/inst_queue.hh	/^    Stats::Formula fuBusyRate;$/;"	m	class:InstructionQueue
fuDescriptions	./cpu/minor/execute.hh	/^    MinorFUPool &fuDescriptions;$/;"	m	class:Minor::Execute
fuIdx	./cpu/o3/inst_queue.hh	/^        int fuIdx;$/;"	m	class:InstructionQueue::FUCompletion
fuIndex	./cpu/minor/dyn_inst.hh	/^    unsigned int fuIndex;$/;"	m	class:Minor::MinorDynInst
fuIndices	./cpu/minor/scoreboard.hh	/^    std::vector<int> fuIndices;$/;"	m	class:Minor::Scoreboard
fuListIterator	./cpu/o3/fu_pool.hh	/^    typedef std::vector<FuncUnit *>::iterator fuListIterator;$/;"	t	class:FUPool
fuPerCapList	./cpu/o3/fu_pool.hh	/^    FUIdxQueue fuPerCapList[Num_OpClasses];$/;"	m	class:FUPool
fuPool	./cpu/o3/O3CPU.py	/^    fuPool = Param.FUPool(DefaultFUPool(), "Functional Unit pool")$/;"	v	class:DerivO3CPU
fuPool	./cpu/o3/iew.hh	/^    FUPool *fuPool;$/;"	m	class:DefaultIEW
fuPool	./cpu/o3/inst_queue.hh	/^    FUPool *fuPool;$/;"	m	class:InstructionQueue
full	./cpu/pred/ras.hh	/^     bool full() { return usedEntries == numEntries; }$/;"	f	class:ReturnAddrStack
full	./dev/net/pktfifo.hh	/^    bool full() const { return avail() <= 0; }$/;"	f	class:PacketFifo
fullMask	./arch/power/insts/integer.hh	/^    uint32_t fullMask;$/;"	m	class:PowerISA::IntRotateOp
fullMnemonic	./arch/arm/insts/pseudo.hh	/^    std::string fullMnemonic;$/;"	m	class:FailUnimplemented
fullMnemonic	./arch/arm/insts/pseudo.hh	/^    std::string fullMnemonic;$/;"	m	class:WarnUnimplemented
fullPath	./sim/process.hh	/^    fullPath(const std::string &filename)$/;"	f	class:LiveProcess
full_system	./sim/Root.py	/^    full_system = Param.Bool("if this is a full system simulation")$/;"	v	class:Root
func	./arch/generic/debugfaults.hh	/^    DebugFunc func;$/;"	m	class:GenericISA::M5DebugFault
func	./dev/arm/rv_ctrl.hh	/^        Bitfield<25, 20> func;$/;"	m	class:RealViewCtrl
func	./dev/pci/types.hh	/^    uint8_t func;$/;"	m	struct:PciBusAddr
func	./dev/pixelpump.hh	/^        const CallbackType func;$/;"	m	class:BasePixelPump::PixelEvent
funcExeInst	./cpu/thread_state.hh	/^    Counter funcExeInst;$/;"	m	struct:ThreadState
funcPtr	./sim/syscall_emul.hh	/^    FuncPtr funcPtr;    \/\/!< Pointer to emulation function.$/;"	m	class:SyscallDesc
funcState	./arch/x86/pagetable_walker.hh	/^        WalkerState funcState;$/;"	m	class:X86ISA::Walker
funcUnits	./cpu/minor/MinorCPU.py	/^    funcUnits = VectorParam.MinorFU("functional units")$/;"	v	class:MinorFUPool
funcUnits	./cpu/minor/MinorCPU.py	/^    funcUnits = [MinorDefaultIntFU(), MinorDefaultIntFU(),$/;"	v	class:MinorDefaultFUPool
funcUnits	./cpu/minor/execute.hh	/^    std::vector<FUPipeline *> funcUnits;$/;"	m	class:Minor::Execute
funcUnits	./cpu/minor/func_unit.hh	/^    std::vector<MinorFU *> funcUnits;$/;"	m	class:MinorFUPool
funcUnits	./cpu/o3/fu_pool.hh	/^    std::vector<FuncUnit *> funcUnits;$/;"	m	class:FUPool
funcUnitsIdx	./cpu/o3/fu_pool.hh	/^        std::vector<int> funcUnitsIdx;$/;"	m	class:FUPool::FUIdxQueue
function	./dev/arm/flash_device.hh	/^        Callback *function;$/;"	m	struct:FlashDevice::CallBackEntry
function	./sim/probe/probe.hh	/^    void (T::* function)(const Arg &);$/;"	m	class:ProbeListenerArg
functionEntryTick	./cpu/base.hh	/^    Tick functionEntryTick;$/;"	m	class:BaseCPU
functionTraceStream	./cpu/base.hh	/^    std::ostream *functionTraceStream;$/;"	m	class:BaseCPU
functionTracingEnabled	./cpu/base.hh	/^    bool functionTracingEnabled;$/;"	m	class:BaseCPU
function_trace	./cpu/BaseCPU.py	/^    function_trace = Param.Bool(False, "Enable function trace")$/;"	v
function_trace_start	./cpu/BaseCPU.py	/^    function_trace_start = Param.Tick(0, "Tick to start function trace")$/;"	v
functional	./arch/arm/stage2_lookup.hh	/^    bool                    functional;$/;"	m	class:ArmISA::Stage2LookUp
functional	./arch/arm/table_walker.hh	/^        bool functional;$/;"	m	class:ArmISA::TableWalker::WalkerState
functional	./arch/x86/pagetable_walker.hh	/^            bool functional;$/;"	m	class:X86ISA::Walker::WalkerState
functionalAccess	./mem/abstract_mem.cc	/^AbstractMemory::functionalAccess(PacketPtr pkt)$/;"	f	class:AbstractMemory
functionalAccess	./mem/cache/cache.cc	/^Cache::functionalAccess(PacketPtr pkt, bool fromCpuSide)$/;"	f	class:Cache
functionalAccess	./mem/physical.cc	/^PhysicalMemory::functionalAccess(PacketPtr pkt)$/;"	f	class:PhysicalMemory
functionalMemoryRead	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::functionalMemoryRead(PacketPtr pkt)$/;"	f	class:AbstractController
functionalMemoryWrite	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::functionalMemoryWrite(PacketPtr pkt)$/;"	f	class:AbstractController
functionalRead	./mem/ruby/network/Network.hh	/^    virtual bool functionalRead(Packet *pkt)$/;"	f	class:Network
functionalRead	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.cc	/^GarnetNetwork::functionalRead(Packet *pkt)$/;"	f	class:GarnetNetwork
functionalRead	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.cc	/^NetworkInterface::functionalRead(Packet *pkt)$/;"	f	class:NetworkInterface
functionalRead	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.cc	/^NetworkLink::functionalRead(Packet *pkt)$/;"	f	class:NetworkLink
functionalRead	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::functionalRead(Packet *pkt)$/;"	f	class:Router
functionalRead	./mem/ruby/network/garnet/flexible-pipeline/flit.cc	/^flit::functionalRead(Packet *pkt)$/;"	f	class:flit
functionalRead	./mem/ruby/network/garnet/flexible-pipeline/flitBuffer.cc	/^flitBuffer::functionalRead(Packet *pkt)$/;"	f	class:flitBuffer
functionalRead	./mem/ruby/network/simple/SimpleNetwork.cc	/^SimpleNetwork::functionalRead(Packet *pkt)$/;"	f	class:SimpleNetwork
functionalRead	./mem/ruby/network/simple/Switch.cc	/^Switch::functionalRead(Packet *pkt)$/;"	f	class:Switch
functionalRead	./mem/ruby/slicc_interface/RubyRequest.cc	/^RubyRequest::functionalRead(Packet *pkt)$/;"	f	class:RubyRequest
functionalRead	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::functionalRead(Packet *pkt)$/;"	f	class:RubyMemoryControl
functionalRead	./mem/ruby/system/RubySystem.cc	/^RubySystem::functionalRead(PacketPtr pkt)$/;"	f	class:RubySystem
functionalWrite	./mem/ruby/network/MessageBuffer.cc	/^MessageBuffer::functionalWrite(Packet *pkt)$/;"	f	class:MessageBuffer
functionalWrite	./mem/ruby/network/Network.hh	/^    virtual uint32_t functionalWrite(Packet *pkt)$/;"	f	class:Network
functionalWrite	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.cc	/^GarnetNetwork_d::functionalWrite(Packet *pkt)$/;"	f	class:GarnetNetwork_d
functionalWrite	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.cc	/^InputUnit_d::functionalWrite(Packet *pkt)$/;"	f	class:InputUnit_d
functionalWrite	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.cc	/^NetworkInterface_d::functionalWrite(Packet *pkt)$/;"	f	class:NetworkInterface_d
functionalWrite	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.cc	/^NetworkLink_d::functionalWrite(Packet *pkt)$/;"	f	class:NetworkLink_d
functionalWrite	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.cc	/^OutputUnit_d::functionalWrite(Packet *pkt)$/;"	f	class:OutputUnit_d
functionalWrite	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^Router_d::functionalWrite(Packet *pkt)$/;"	f	class:Router_d
functionalWrite	./mem/ruby/network/garnet/fixed-pipeline/Switch_d.cc	/^Switch_d::functionalWrite(Packet *pkt)$/;"	f	class:Switch_d
functionalWrite	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.cc	/^VirtualChannel_d::functionalWrite(Packet *pkt)$/;"	f	class:VirtualChannel_d
functionalWrite	./mem/ruby/network/garnet/fixed-pipeline/flitBuffer_d.cc	/^flitBuffer_d::functionalWrite(Packet *pkt)$/;"	f	class:flitBuffer_d
functionalWrite	./mem/ruby/network/garnet/fixed-pipeline/flit_d.cc	/^flit_d::functionalWrite(Packet *pkt)$/;"	f	class:flit_d
functionalWrite	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.cc	/^GarnetNetwork::functionalWrite(Packet *pkt)$/;"	f	class:GarnetNetwork
functionalWrite	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.cc	/^NetworkInterface::functionalWrite(Packet *pkt)$/;"	f	class:NetworkInterface
functionalWrite	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.cc	/^NetworkLink::functionalWrite(Packet *pkt)$/;"	f	class:NetworkLink
functionalWrite	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::functionalWrite(Packet *pkt)$/;"	f	class:Router
functionalWrite	./mem/ruby/network/garnet/flexible-pipeline/flit.cc	/^flit::functionalWrite(Packet *pkt)$/;"	f	class:flit
functionalWrite	./mem/ruby/network/garnet/flexible-pipeline/flitBuffer.cc	/^flitBuffer::functionalWrite(Packet *pkt)$/;"	f	class:flitBuffer
functionalWrite	./mem/ruby/network/simple/SimpleNetwork.cc	/^SimpleNetwork::functionalWrite(Packet *pkt)$/;"	f	class:SimpleNetwork
functionalWrite	./mem/ruby/network/simple/Switch.cc	/^Switch::functionalWrite(Packet *pkt)$/;"	f	class:Switch
functionalWrite	./mem/ruby/slicc_interface/RubyRequest.cc	/^RubyRequest::functionalWrite(Packet *pkt)$/;"	f	class:RubyRequest
functionalWrite	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::functionalWrite(Packet *pkt)$/;"	f	class:RubyMemoryControl
functionalWrite	./mem/ruby/system/RubySystem.cc	/^RubySystem::functionalWrite(PacketPtr pkt)$/;"	f	class:RubySystem
functor	./base/statistics.hh	/^    T *functor;$/;"	m	class:Stats::FunctorProxy
functor	./base/statistics.hh	/^    functor(T &func)$/;"	f	class:Stats::ValueBase
fuser	./kern/tru64/tru64_syscalls.hh	/^        fuser = 243,$/;"	e	enum:SystemCalls::__anon102
futexFunc	./sim/syscall_emul.hh	/^futexFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
futexMap	./sim/system.hh	/^    std::map<uint64_t, std::list<ThreadContext *> * > futexMap;$/;"	m	class:System
future	./cpu/timebuf.hh	/^    int future;$/;"	m	class:TimeBuffer
fw	./arch/arm/miscregs.hh	/^        Bitfield<4> fw;$/;"	m	namespace:ArmISA
fwsm	./dev/net/i8254xGBe_defs.hh	/^    FWSM fwsm;$/;"	m	struct:iGbReg::Regs
fx	./arch/power/miscregs.hh	/^    Bitfield<31> fx;$/;"	m	namespace:PowerISA
fxm	./arch/power/types.hh	/^    Bitfield<19, 12> fxm;$/;"	m	namespace:PowerISA
fz	./arch/arm/miscregs.hh	/^        Bitfield<24> fz;$/;"	m	namespace:ArmISA
g	./arch/mips/dt_constants.hh	/^    Bitfield<4>      g;$/;"	m	namespace:MipsISA
g	./arch/mips/pra_constants.hh	/^    Bitfield<0>      g;     \/\/ Global Bit$/;"	m	namespace:MipsISA
g	./arch/mips/pra_constants.hh	/^    Bitfield<30>     g;$/;"	m	namespace:MipsISA
g	./arch/x86/pagetable.hh	/^        Bitfield<8> g;$/;"	m	namespace:X86ISA
g	./arch/x86/regs/misc.hh	/^        Bitfield<55> g; \/\/ Granularity$/;"	m	namespace:X86ISA
g0	./arch/x86/regs/misc.hh	/^        Bitfield<1> g0;$/;"	m	namespace:X86ISA
g1	./arch/x86/regs/misc.hh	/^        Bitfield<3> g1;$/;"	m	namespace:X86ISA
g2	./arch/x86/regs/misc.hh	/^        Bitfield<5> g2;$/;"	m	namespace:X86ISA
g3	./arch/x86/regs/misc.hh	/^        Bitfield<7> g3;$/;"	m	namespace:X86ISA
garbage	./dev/arm/ufs_device.hh	/^    std::deque<struct UTPTransferReqDesc*> garbage;$/;"	m	class:UFSHostDevice
gate	./dev/x86/speaker.hh	/^        Bitfield<0> gate;$/;"	m	class:X86ISA::Speaker
gd	./arch/x86/regs/misc.hh	/^        Bitfield<13> gd;$/;"	m	namespace:X86ISA
gdb	./base/remote_gdb.hh	/^        BaseRemoteGDB *gdb;$/;"	m	class:BaseRemoteGDB::BaseGdbRegCache
gdb	./base/remote_gdb.hh	/^        BaseRemoteGDB *gdb;$/;"	m	class:BaseRemoteGDB::HardBreakpoint
gdb	./base/remote_gdb.hh	/^        BaseRemoteGDB *gdb;$/;"	m	class:BaseRemoteGDB::InputEvent
gdb	./base/remote_gdb.hh	/^        BaseRemoteGDB *gdb;$/;"	m	class:BaseRemoteGDB::SingleStepEvent
gdb	./base/remote_gdb.hh	/^        BaseRemoteGDB *gdb;$/;"	m	class:BaseRemoteGDB::TrapEvent
gdb	./base/remote_gdb.hh	/^    BaseRemoteGDB *gdb;$/;"	m	class:GDBListener
gdbListen	./sim/system.hh	/^    std::vector<GDBListener *> gdbListen;$/;"	m	class:System
gdbRegs	./arch/alpha/remote_gdb.cc	/^RemoteGDB::gdbRegs() {$/;"	f	class:RemoteGDB
gdbRegs	./arch/arm/remote_gdb.cc	/^RemoteGDB::gdbRegs()$/;"	f	class:RemoteGDB
gdbRegs	./arch/mips/remote_gdb.cc	/^RemoteGDB::gdbRegs() {$/;"	f	class:RemoteGDB
gdbRegs	./arch/power/remote_gdb.cc	/^RemoteGDB::gdbRegs() {$/;"	f	class:RemoteGDB
gdbRegs	./arch/sparc/remote_gdb.cc	/^RemoteGDB::gdbRegs()$/;"	f	class:RemoteGDB
gdbRegs	./arch/x86/remote_gdb.cc	/^RemoteGDB::gdbRegs()$/;"	f	class:RemoteGDB
gdb_command	./base/remote_gdb.cc	/^BaseRemoteGDB::gdb_command(char cmd)$/;"	f	class:BaseRemoteGDB
gdtSize	./arch/x86/process.hh	/^        Addr gdtSize()$/;"	f	class:X86ISA::X86LiveProcess
gdtStart	./arch/x86/process.hh	/^        Addr gdtStart()$/;"	f	class:X86ISA::X86LiveProcess
ge	./arch/arm/miscregs.hh	/^        Bitfield<19, 16> ge;$/;"	m	namespace:ArmISA
ge	./arch/x86/regs/misc.hh	/^        Bitfield<9> ge;$/;"	m	namespace:X86ISA
gem5ExtensionsEnabled	./dev/arm/gic_pl390.hh	/^    bool gem5ExtensionsEnabled;$/;"	m	class:Pl390
gen	./base/random.hh	/^    std::mt19937_64 gen;$/;"	m	class:Random
genCCVector	./arch/mips/utility.cc	/^genCCVector(uint32_t fcsr, int cc_num, uint32_t cc_val)$/;"	f	namespace:MipsISA
genFlags	./arch/x86/insts/microregop.cc	/^    uint64_t RegOpBase::genFlags(uint64_t oldFlags, uint64_t flagMask,$/;"	f	class:X86ISA::RegOpBase
genFuncs	./arch/x86/microcode_rom.hh	/^        GenFunc * genFuncs;$/;"	m	class:X86ISAInst::MicrocodeRom
genInvalidVector	./arch/mips/utility.cc	/^genInvalidVector(uint32_t fcsr_bits)$/;"	f	namespace:MipsISA
genName	./cpu/trace/trace_cpu.hh	/^        std::string genName;$/;"	m	class:TraceCPU::ElasticDataGen
genName	./cpu/trace/trace_cpu.hh	/^        std::string genName;$/;"	m	class:TraceCPU::FixedRetryGen
genStartAddr	./cpu/testers/traffic_gen/generators.cc	/^DramGen::genStartAddr(unsigned int new_bank, unsigned int new_rank)$/;"	f	class:DramGen
genSwiMask	./dev/arm/gic_pl390.cc	/^Pl390::genSwiMask(int cpu)$/;"	f	class:Pl390
genX87Tags	./arch/x86/utility.cc	/^genX87Tags(uint16_t ftw, uint8_t top, int8_t spm)$/;"	f	namespace:X86ISA
generate	./mem/slicc/ast/ActionDeclAST.py	/^    def generate(self):$/;"	m	class:ActionDeclAST
generate	./mem/slicc/ast/AssignStatementAST.py	/^    def generate(self, code, return_type):$/;"	m	class:AssignStatementAST
generate	./mem/slicc/ast/CheckAllocateStatementAST.py	/^    def generate(self, code, return_type):$/;"	m	class:CheckAllocateStatementAST
generate	./mem/slicc/ast/CheckNextCycleAST.py	/^    def generate(self, code, return_type):$/;"	m	class:CheckNextCycleAST
generate	./mem/slicc/ast/DeclListAST.py	/^    def generate(self):$/;"	m	class:DeclListAST
generate	./mem/slicc/ast/EnqueueStatementAST.py	/^    def generate(self, code, return_type):$/;"	m	class:EnqueueStatementAST
generate	./mem/slicc/ast/EnumDeclAST.py	/^    def generate(self):$/;"	m	class:EnumDeclAST
generate	./mem/slicc/ast/EnumExprAST.py	/^    def generate(self, code):$/;"	m	class:EnumExprAST
generate	./mem/slicc/ast/ExprStatementAST.py	/^    def generate(self, code, return_type):$/;"	m	class:ExprStatementAST
generate	./mem/slicc/ast/FormalParamAST.py	/^    def generate(self):$/;"	m	class:FormalParamAST
generate	./mem/slicc/ast/FuncCallExprAST.py	/^    def generate(self, code):$/;"	m	class:FuncCallExprAST
generate	./mem/slicc/ast/FuncDeclAST.py	/^    def generate(self, parent = None):$/;"	m	class:FuncDeclAST
generate	./mem/slicc/ast/IfStatementAST.py	/^    def generate(self, code, return_type):$/;"	m	class:IfStatementAST
generate	./mem/slicc/ast/InPortDeclAST.py	/^    def generate(self):$/;"	m	class:InPortDeclAST
generate	./mem/slicc/ast/IsValidPtrExprAST.py	/^    def generate(self, code):$/;"	m	class:IsValidPtrExprAST
generate	./mem/slicc/ast/LiteralExprAST.py	/^    def generate(self, code):$/;"	m	class:LiteralExprAST
generate	./mem/slicc/ast/LocalVariableAST.py	/^    def generate(self, code):$/;"	m	class:LocalVariableAST
generate	./mem/slicc/ast/MachineAST.py	/^    def generate(self):$/;"	m	class:MachineAST
generate	./mem/slicc/ast/MemberExprAST.py	/^    def generate(self, code):$/;"	m	class:MemberExprAST
generate	./mem/slicc/ast/MethodCallExprAST.py	/^    def generate(self, code):$/;"	m	class:MethodCallExprAST
generate	./mem/slicc/ast/NewExprAST.py	/^    def generate(self, code):$/;"	m	class:NewExprAST
generate	./mem/slicc/ast/ObjDeclAST.py	/^    def generate(self, parent = None):$/;"	m	class:ObjDeclAST
generate	./mem/slicc/ast/OodAST.py	/^    def generate(self, code):$/;"	m	class:OodAST
generate	./mem/slicc/ast/OperatorExprAST.py	/^    def generate(self, code):$/;"	m	class:InfixOperatorExprAST
generate	./mem/slicc/ast/OperatorExprAST.py	/^    def generate(self, code):$/;"	m	class:PrefixOperatorExprAST
generate	./mem/slicc/ast/OutPortDeclAST.py	/^    def generate(self):$/;"	m	class:OutPortDeclAST
generate	./mem/slicc/ast/PeekStatementAST.py	/^    def generate(self, code, return_type):$/;"	m	class:PeekStatementAST
generate	./mem/slicc/ast/ReturnStatementAST.py	/^    def generate(self, code, return_type):$/;"	m	class:ReturnStatementAST
generate	./mem/slicc/ast/StallAndWaitStatementAST.py	/^    def generate(self, code, return_type):$/;"	m	class:StallAndWaitStatementAST
generate	./mem/slicc/ast/StateDeclAST.py	/^    def generate(self):$/;"	m	class:StateDeclAST
generate	./mem/slicc/ast/StatementListAST.py	/^    def generate(self, code, return_type):$/;"	m	class:StatementListAST
generate	./mem/slicc/ast/StaticCastAST.py	/^    def generate(self, code):$/;"	m	class:StaticCastAST
generate	./mem/slicc/ast/TransitionDeclAST.py	/^    def generate(self):$/;"	m	class:TransitionDeclAST
generate	./mem/slicc/ast/TypeDeclAST.py	/^    def generate(self):$/;"	m	class:TypeDeclAST
generate	./mem/slicc/ast/TypeFieldEnumAST.py	/^    def generate(self, type):$/;"	m	class:TypeFieldEnumAST
generate	./mem/slicc/ast/TypeFieldStateAST.py	/^    def generate(self, type):$/;"	m	class:TypeFieldStateAST
generate	./mem/slicc/ast/VarExprAST.py	/^    def generate(self, code):$/;"	m	class:VarExprAST
generateCode	./mem/slicc/symbols/Func.py	/^    def generateCode(self):$/;"	m	class:Func
generateDisassembly	./arch/arm/insts/branch64.cc	/^BranchEret64::generateDisassembly($/;"	f	class:ArmISA::BranchEret64
generateDisassembly	./arch/arm/insts/branch64.cc	/^BranchImm64::generateDisassembly($/;"	f	class:ArmISA::BranchImm64
generateDisassembly	./arch/arm/insts/branch64.cc	/^BranchImmCond64::generateDisassembly($/;"	f	class:ArmISA::BranchImmCond64
generateDisassembly	./arch/arm/insts/branch64.cc	/^BranchImmImmReg64::generateDisassembly($/;"	f	class:ArmISA::BranchImmImmReg64
generateDisassembly	./arch/arm/insts/branch64.cc	/^BranchImmReg64::generateDisassembly($/;"	f	class:ArmISA::BranchImmReg64
generateDisassembly	./arch/arm/insts/branch64.cc	/^BranchReg64::generateDisassembly($/;"	f	class:ArmISA::BranchReg64
generateDisassembly	./arch/arm/insts/branch64.cc	/^BranchRet64::generateDisassembly($/;"	f	class:ArmISA::BranchRet64
generateDisassembly	./arch/arm/insts/data64.cc	/^DataX1Reg2ImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::DataX1Reg2ImmOp
generateDisassembly	./arch/arm/insts/data64.cc	/^DataX1RegImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::DataX1RegImmOp
generateDisassembly	./arch/arm/insts/data64.cc	/^DataX1RegOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::DataX1RegOp
generateDisassembly	./arch/arm/insts/data64.cc	/^DataX2RegImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::DataX2RegImmOp
generateDisassembly	./arch/arm/insts/data64.cc	/^DataX2RegOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::DataX2RegOp
generateDisassembly	./arch/arm/insts/data64.cc	/^DataX3RegOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::DataX3RegOp
generateDisassembly	./arch/arm/insts/data64.cc	/^DataXCondCompImmOp::generateDisassembly($/;"	f	class:ArmISA::DataXCondCompImmOp
generateDisassembly	./arch/arm/insts/data64.cc	/^DataXCondCompRegOp::generateDisassembly($/;"	f	class:ArmISA::DataXCondCompRegOp
generateDisassembly	./arch/arm/insts/data64.cc	/^DataXCondSelOp::generateDisassembly($/;"	f	class:ArmISA::DataXCondSelOp
generateDisassembly	./arch/arm/insts/data64.cc	/^DataXERegOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::DataXERegOp
generateDisassembly	./arch/arm/insts/data64.cc	/^DataXImmOnlyOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::DataXImmOnlyOp
generateDisassembly	./arch/arm/insts/data64.cc	/^DataXImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::DataXImmOp
generateDisassembly	./arch/arm/insts/data64.cc	/^DataXSRegOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::DataXSRegOp
generateDisassembly	./arch/arm/insts/macromem.cc	/^MicroIntImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MicroIntImmOp
generateDisassembly	./arch/arm/insts/macromem.cc	/^MicroIntImmXOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MicroIntImmXOp
generateDisassembly	./arch/arm/insts/macromem.cc	/^MicroIntMov::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MicroIntMov
generateDisassembly	./arch/arm/insts/macromem.cc	/^MicroIntOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MicroIntOp
generateDisassembly	./arch/arm/insts/macromem.cc	/^MicroIntRegXOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MicroIntRegXOp
generateDisassembly	./arch/arm/insts/macromem.cc	/^MicroMemOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MicroMemOp
generateDisassembly	./arch/arm/insts/macromem.cc	/^MicroMemPairOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MicroMemPairOp
generateDisassembly	./arch/arm/insts/macromem.cc	/^MicroSetPCCPSR::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MicroSetPCCPSR
generateDisassembly	./arch/arm/insts/mem.cc	/^RfeOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::RfeOp
generateDisassembly	./arch/arm/insts/mem.cc	/^SrsOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::SrsOp
generateDisassembly	./arch/arm/insts/mem.cc	/^Swap::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::Swap
generateDisassembly	./arch/arm/insts/mem.hh	/^    generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MemoryOffset
generateDisassembly	./arch/arm/insts/mem.hh	/^    generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MemoryPostIndex
generateDisassembly	./arch/arm/insts/mem.hh	/^    generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MemoryPreIndex
generateDisassembly	./arch/arm/insts/mem64.cc	/^MemoryDImm64::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MemoryDImm64
generateDisassembly	./arch/arm/insts/mem64.cc	/^MemoryDImmEx64::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MemoryDImmEx64
generateDisassembly	./arch/arm/insts/mem64.cc	/^MemoryEx64::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MemoryEx64
generateDisassembly	./arch/arm/insts/mem64.cc	/^MemoryImm64::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MemoryImm64
generateDisassembly	./arch/arm/insts/mem64.cc	/^MemoryLiteral64::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MemoryLiteral64
generateDisassembly	./arch/arm/insts/mem64.cc	/^MemoryPostIndex64::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MemoryPostIndex64
generateDisassembly	./arch/arm/insts/mem64.cc	/^MemoryPreIndex64::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MemoryPreIndex64
generateDisassembly	./arch/arm/insts/mem64.cc	/^MemoryRaw64::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MemoryRaw64
generateDisassembly	./arch/arm/insts/mem64.cc	/^MemoryReg64::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::MemoryReg64
generateDisassembly	./arch/arm/insts/mem64.cc	/^SysDC64::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::SysDC64
generateDisassembly	./arch/arm/insts/misc.cc	/^ImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ImmOp
generateDisassembly	./arch/arm/insts/misc.cc	/^McrrOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:McrrOp
generateDisassembly	./arch/arm/insts/misc.cc	/^MiscRegRegImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:MiscRegRegImmOp
generateDisassembly	./arch/arm/insts/misc.cc	/^MrrcOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:MrrcOp
generateDisassembly	./arch/arm/insts/misc.cc	/^MrsOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:MrsOp
generateDisassembly	./arch/arm/insts/misc.cc	/^MsrImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:MsrImmOp
generateDisassembly	./arch/arm/insts/misc.cc	/^MsrRegOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:MsrRegOp
generateDisassembly	./arch/arm/insts/misc.cc	/^RegImmImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:RegImmImmOp
generateDisassembly	./arch/arm/insts/misc.cc	/^RegImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:RegImmOp
generateDisassembly	./arch/arm/insts/misc.cc	/^RegImmRegOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:RegImmRegOp
generateDisassembly	./arch/arm/insts/misc.cc	/^RegImmRegShiftOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:RegImmRegShiftOp
generateDisassembly	./arch/arm/insts/misc.cc	/^RegMiscRegImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:RegMiscRegImmOp
generateDisassembly	./arch/arm/insts/misc.cc	/^RegRegImmImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:RegRegImmImmOp
generateDisassembly	./arch/arm/insts/misc.cc	/^RegRegImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:RegRegImmOp
generateDisassembly	./arch/arm/insts/misc.cc	/^RegRegOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:RegRegOp
generateDisassembly	./arch/arm/insts/misc.cc	/^RegRegRegImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:RegRegRegImmOp
generateDisassembly	./arch/arm/insts/misc.cc	/^RegRegRegOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:RegRegRegOp
generateDisassembly	./arch/arm/insts/misc.cc	/^RegRegRegRegOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:RegRegRegRegOp
generateDisassembly	./arch/arm/insts/misc.cc	/^UnknownOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:UnknownOp
generateDisassembly	./arch/arm/insts/misc64.cc	/^RegRegImmImmOp64::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:RegRegImmImmOp64
generateDisassembly	./arch/arm/insts/misc64.cc	/^RegRegRegImmOp64::generateDisassembly($/;"	f	class:RegRegRegImmOp64
generateDisassembly	./arch/arm/insts/misc64.cc	/^UnknownOp64::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:UnknownOp64
generateDisassembly	./arch/arm/insts/pred_inst.cc	/^DataImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::DataImmOp
generateDisassembly	./arch/arm/insts/pred_inst.cc	/^DataRegOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::DataRegOp
generateDisassembly	./arch/arm/insts/pred_inst.cc	/^DataRegRegOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::DataRegRegOp
generateDisassembly	./arch/arm/insts/pred_inst.cc	/^PredImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::PredImmOp
generateDisassembly	./arch/arm/insts/pred_inst.cc	/^PredIntOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::PredIntOp
generateDisassembly	./arch/arm/insts/pred_inst.cc	/^PredMacroOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:ArmISA::PredMacroOp
generateDisassembly	./arch/arm/insts/pseudo.cc	/^DecoderFaultInst::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:DecoderFaultInst
generateDisassembly	./arch/arm/insts/pseudo.cc	/^FailUnimplemented::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:FailUnimplemented
generateDisassembly	./arch/arm/insts/pseudo.cc	/^FlushPipeInst::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:FlushPipeInst
generateDisassembly	./arch/arm/insts/pseudo.cc	/^WarnUnimplemented::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:WarnUnimplemented
generateDisassembly	./arch/arm/insts/static_inst.cc	/^ArmStaticInst::generateDisassembly(Addr pc,$/;"	f	class:ArmISA::ArmStaticInst
generateDisassembly	./arch/arm/insts/vfp.cc	/^FpCondCompRegOp::generateDisassembly($/;"	f	class:FpCondCompRegOp
generateDisassembly	./arch/arm/insts/vfp.cc	/^FpCondSelOp::generateDisassembly($/;"	f	class:FpCondSelOp
generateDisassembly	./arch/arm/insts/vfp.cc	/^FpRegImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:FpRegImmOp
generateDisassembly	./arch/arm/insts/vfp.cc	/^FpRegRegImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:FpRegRegImmOp
generateDisassembly	./arch/arm/insts/vfp.cc	/^FpRegRegOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:FpRegRegOp
generateDisassembly	./arch/arm/insts/vfp.cc	/^FpRegRegRegImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:FpRegRegRegImmOp
generateDisassembly	./arch/arm/insts/vfp.cc	/^FpRegRegRegOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:FpRegRegRegOp
generateDisassembly	./arch/arm/insts/vfp.cc	/^FpRegRegRegRegOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:FpRegRegRegRegOp
generateDisassembly	./arch/power/insts/branch.cc	/^BranchNonPCRel::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:BranchNonPCRel
generateDisassembly	./arch/power/insts/branch.cc	/^BranchNonPCRelCond::generateDisassembly(Addr pc,$/;"	f	class:BranchNonPCRelCond
generateDisassembly	./arch/power/insts/branch.cc	/^BranchPCRel::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:BranchPCRel
generateDisassembly	./arch/power/insts/branch.cc	/^BranchPCRelCond::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:BranchPCRelCond
generateDisassembly	./arch/power/insts/branch.cc	/^BranchRegCond::generateDisassembly(Addr pc,$/;"	f	class:BranchRegCond
generateDisassembly	./arch/power/insts/condition.cc	/^CondLogicOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:CondLogicOp
generateDisassembly	./arch/power/insts/condition.cc	/^CondMoveOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:CondMoveOp
generateDisassembly	./arch/power/insts/floating.cc	/^FloatOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:FloatOp
generateDisassembly	./arch/power/insts/integer.cc	/^IntImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:IntImmOp
generateDisassembly	./arch/power/insts/integer.cc	/^IntOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:IntOp
generateDisassembly	./arch/power/insts/integer.cc	/^IntRotateOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:IntRotateOp
generateDisassembly	./arch/power/insts/integer.cc	/^IntShiftOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:IntShiftOp
generateDisassembly	./arch/power/insts/mem.cc	/^MemDispOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:MemDispOp
generateDisassembly	./arch/power/insts/mem.cc	/^MemOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:MemOp
generateDisassembly	./arch/power/insts/misc.cc	/^MiscOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:MiscOp
generateDisassembly	./arch/power/insts/static_inst.cc	/^PowerStaticInst::generateDisassembly(Addr pc,$/;"	f	class:PowerStaticInst
generateDisassembly	./arch/x86/insts/macroop.hh	/^    generateDisassembly(Addr pc, const SymbolTable *symtab) const$/;"	f	class:X86ISA::MacroopBase
generateDisassembly	./arch/x86/insts/microfpop.cc	/^    std::string FpOp::generateDisassembly(Addr pc,$/;"	f	class:X86ISA::FpOp
generateDisassembly	./arch/x86/insts/microldstop.cc	/^    std::string LdStOp::generateDisassembly(Addr pc,$/;"	f	class:X86ISA::LdStOp
generateDisassembly	./arch/x86/insts/micromediaop.cc	/^    std::string MediaOpImm::generateDisassembly(Addr pc,$/;"	f	class:X86ISA::MediaOpImm
generateDisassembly	./arch/x86/insts/micromediaop.cc	/^    std::string MediaOpReg::generateDisassembly(Addr pc,$/;"	f	class:X86ISA::MediaOpReg
generateDisassembly	./arch/x86/insts/microop.hh	/^        std::string generateDisassembly(Addr pc,$/;"	f	class:X86ISA::X86MicroopBase
generateDisassembly	./arch/x86/insts/microregop.cc	/^    std::string RegOp::generateDisassembly(Addr pc,$/;"	f	class:X86ISA::RegOp
generateDisassembly	./arch/x86/insts/microregop.cc	/^    std::string RegOpImm::generateDisassembly(Addr pc,$/;"	f	class:X86ISA::RegOpImm
generateDisassembly	./arch/x86/insts/static_inst.cc	/^    std::string X86StaticInst::generateDisassembly(Addr pc,$/;"	f	class:X86ISA::X86StaticInst
generateInterrupt	./dev/arm/kmi.cc	/^Pl050::generateInterrupt()$/;"	f	class:Pl050
generateInterrupt	./dev/arm/pl011.cc	/^Pl011::generateInterrupt()$/;"	f	class:Pl011
generateInterrupt	./dev/arm/pl111.cc	/^Pl111::generateInterrupt()$/;"	f	class:Pl111
generateInterrupt	./dev/arm/ufs_device.cc	/^UFSHostDevice::generateInterrupt()$/;"	f	class:UFSHostDevice
generateIpi	./dev/sparc/iob.cc	/^Iob::generateIpi(Type type, int cpu_id, int vector)$/;"	f	class:Iob
generatePkt	./cpu/testers/networktest/networktest.cc	/^NetworkTest::generatePkt()$/;"	f	class:NetworkTest
generateTCEvent	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::generateTCEvent(ThreadID tid)$/;"	f	class:DefaultCommit
generateTrapEvent	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::generateTrapEvent(ThreadID tid)$/;"	f	class:DefaultCommit
generate_prefix	./mem/slicc/ast/MethodCallExprAST.py	/^    def generate_prefix(self, paramTypes):$/;"	m	class:ClassMethodCallExprAST
generate_prefix	./mem/slicc/ast/MethodCallExprAST.py	/^    def generate_prefix(self, paramTypes):$/;"	m	class:MemberMethodCallExprAST
generation	./base/barrier.hh	/^    unsigned generation;$/;"	m	class:Barrier
generator	./cpu/testers/directedtest/RubyDirectedTester.hh	/^    DirectedGenerator* generator;$/;"	m	class:RubyDirectedTester
generator	./cpu/testers/directedtest/RubyDirectedTester.py	/^    generator = Param.DirectedGenerator("the request generator")$/;"	v	class:RubyDirectedTester
generic_timer	./dev/arm/RealView.py	/^    generic_timer = GenericTimer(int_phys=29, int_virt=27)$/;"	v	class:VExpress_EMM
gentrap	./arch/alpha/osfpal.hh	/^        gentrap = 0xaa,$/;"	e	enum:PAL::__anon50
get	./base/inet.hh	/^    Ip6Hdr *get() { return (Ip6Hdr *)(p->data + sizeof(eth_hdr)$/;"	f	class:Net::Ip6Ptr
get	./base/inet.hh	/^    IpHdr *get() { return (IpHdr *)(p->data + sizeof(eth_hdr) +$/;"	f	class:Net::IpPtr
get	./base/inet.hh	/^    TcpHdr *get() { return (TcpHdr *)(p->data + _off); }$/;"	f	class:Net::TcpPtr
get	./base/inet.hh	/^    UdpHdr *get() { return (UdpHdr *)(p->data + _off); }$/;"	f	class:Net::UdpPtr
get	./base/inet.hh	/^    const Ip6Hdr *get() const$/;"	f	class:Net::Ip6Ptr
get	./base/inet.hh	/^    const IpHdr *get() const$/;"	f	class:Net::IpPtr
get	./base/inet.hh	/^    const TcpHdr *get() const { return (const TcpHdr *)(p->data + _off); }$/;"	f	class:Net::TcpPtr
get	./base/inet.hh	/^    const UdpHdr *get() const { return (const UdpHdr *)(p->data + _off); }$/;"	f	class:Net::UdpPtr
get	./base/refcnt.hh	/^    T *get() const { return data; }$/;"	f	class:RefCountingPtr
get	./cpu/base_dyn_inst.hh	/^        void get(double& d) { d = dbl; }$/;"	f	union:BaseDynInst::Result
get	./cpu/base_dyn_inst.hh	/^        void get(uint64_t& i) { i = integer; }$/;"	f	union:BaseDynInst::Result
get	./cpu/checker/cpu.hh	/^        void get(double& d) { d = dbl; }$/;"	f	union:CheckerCPU::Result
get	./cpu/checker/cpu.hh	/^        void get(uint64_t& i) { i = integer; }$/;"	f	union:CheckerCPU::Result
get	./dev/dma_device.cc	/^DmaReadFifo::get(uint8_t *dst, size_t len)$/;"	f	class:DmaReadFifo
get	./dev/dma_device.hh	/^    T get() {$/;"	f	class:DmaReadFifo
get	./mem/packet_access.hh	/^Packet::get() const$/;"	f	class:Packet
get	./mem/packet_access.hh	/^Packet::get(ByteOrder endian) const$/;"	f	class:Packet
get	./mem/slicc/util.py	/^    def get(self, item, failobj=None):$/;"	m	class:PairContainer
get	./python/m5/config.py	/^def get(name):$/;"	f
get	./python/m5/util/multidict.py	/^    def get(self, key, default=None):$/;"	m	class:multidict
get	./python/m5/util/smartdict.py	/^    def get(self, key, default='False'):$/;"	m	class:SmartDict
getAPIVersion	./cpu/kvm/vm.hh	/^    int getAPIVersion() const { return apiVersion; }$/;"	f	class:Kvm
getAccessBackingStore	./mem/ruby/system/RubySystem.hh	/^    bool getAccessBackingStore() { return m_access_backing_store; }$/;"	f	class:RubySystem
getAccessDepth	./mem/request.hh	/^    int getAccessDepth() const { return depth; }$/;"	f	class:Request
getAccessLatency	./mem/request.hh	/^    Tick getAccessLatency() const { return accessDelta; }$/;"	f	class:Request
getAccessMode	./mem/ruby/slicc_interface/RubyRequest.hh	/^    const RubyAccessMode& getAccessMode() const { return m_AccessMode; }$/;"	f	class:RubyRequest
getActionShorthands	./mem/slicc/symbols/Transition.py	/^    def getActionShorthands(self):$/;"	m	class:Transition
getActivityCount	./cpu/activity.hh	/^    int getActivityCount() const { return activityCount; }$/;"	f	class:ActivityRecorder
getActivityRecorder	./cpu/minor/pipeline.hh	/^    MinorActivityRecorder *getActivityRecorder() { return &activityRecorder; }$/;"	f	class:Minor::Pipeline
getAdaptiveRouting	./mem/ruby/network/simple/SimpleNetwork.hh	/^    bool getAdaptiveRouting() {return m_adaptive_routing; }$/;"	f	class:SimpleNetwork
getAddr	./mem/packet.hh	/^    Addr getAddr() const { assert(flags.isSet(VALID_ADDR)); return addr; }$/;"	f	class:Packet
getAddr	./sim/insttracer.hh	/^    Addr getAddr() const { return addr; }$/;"	f	class:Trace::InstRecord
getAddrMonitor	./cpu/base_dyn_inst.hh	/^    AddressMonitor *getAddrMonitor()$/;"	f	class:BaseDynInst
getAddrMonitor	./cpu/minor/exec_context.hh	/^    AddressMonitor *getAddrMonitor()$/;"	f	class:Minor::ExecContext
getAddrRange	./mem/abstract_mem.cc	/^AbstractMemory::getAddrRange() const$/;"	f	class:AbstractMemory
getAddrRanges	./arch/arm/kvm/gic.hh	/^    AddrRangeList getAddrRanges() const { return addrRanges; }$/;"	f	class:KvmGic
getAddrRanges	./dev/alpha/tsunami_pchip.cc	/^TsunamiPChip::getAddrRanges() const$/;"	f	class:TsunamiPChip
getAddrRanges	./dev/arm/gic_pl390.cc	/^Pl390::getAddrRanges() const$/;"	f	class:Pl390
getAddrRanges	./dev/arm/gic_v2m.cc	/^Gicv2m::getAddrRanges() const$/;"	f	class:Gicv2m
getAddrRanges	./dev/arm/gpu_nomali.cc	/^NoMaliGpu::getAddrRanges() const$/;"	f	class:NoMaliGpu
getAddrRanges	./dev/arm/pl111.cc	/^Pl111::getAddrRanges() const$/;"	f	class:Pl111
getAddrRanges	./dev/arm/ufs_device.cc	/^UFSHostDevice::getAddrRanges() const$/;"	f	class:UFSHostDevice
getAddrRanges	./dev/arm/vgic.cc	/^VGic::getAddrRanges() const$/;"	f	class:VGic
getAddrRanges	./dev/io_device.cc	/^BasicPioDevice::getAddrRanges() const$/;"	f	class:BasicPioDevice
getAddrRanges	./dev/io_device.cc	/^PioPort::getAddrRanges() const$/;"	f	class:PioPort
getAddrRanges	./dev/pci/device.cc	/^PciDevice::getAddrRanges() const$/;"	f	class:PciDevice
getAddrRanges	./dev/pci/host.cc	/^GenericPciHost::getAddrRanges() const$/;"	f	class:GenericPciHost
getAddrRanges	./dev/sparc/iob.cc	/^Iob::getAddrRanges() const$/;"	f	class:Iob
getAddrRanges	./dev/uart8250.cc	/^Uart8250::getAddrRanges() const$/;"	f	class:Uart8250
getAddrRanges	./dev/x86/i8042.cc	/^X86ISA::I8042::getAddrRanges() const$/;"	f	class:X86ISA::I8042
getAddrRanges	./dev/x86/intdev.hh	/^        AddrRangeList getAddrRanges() const$/;"	f	class:X86ISA::IntDevice::IntSlavePort
getAddrRanges	./mem/addr_mapper.cc	/^RangeAddrMapper::getAddrRanges() const$/;"	f	class:RangeAddrMapper
getAddrRanges	./mem/addr_mapper.hh	/^        AddrRangeList getAddrRanges() const$/;"	f	class:AddrMapper::MapperSlavePort
getAddrRanges	./mem/bridge.cc	/^Bridge::BridgeSlavePort::getAddrRanges() const$/;"	f	class:Bridge::BridgeSlavePort
getAddrRanges	./mem/cache/base.hh	/^    const AddrRangeList &getAddrRanges() const { return addrRanges; }$/;"	f	class:BaseCache
getAddrRanges	./mem/cache/cache.cc	/^Cache::CpuSidePort::getAddrRanges() const$/;"	f	class:Cache::CpuSidePort
getAddrRanges	./mem/coherent_xbar.hh	/^        virtual AddrRangeList getAddrRanges() const$/;"	f	class:CoherentXBar::CoherentXBarSlavePort
getAddrRanges	./mem/comm_monitor.cc	/^CommMonitor::getAddrRanges() const$/;"	f	class:CommMonitor
getAddrRanges	./mem/comm_monitor.hh	/^        AddrRangeList getAddrRanges() const$/;"	f	class:CommMonitor::MonitorSlavePort
getAddrRanges	./mem/dram_ctrl.cc	/^DRAMCtrl::MemoryPort::getAddrRanges() const$/;"	f	class:DRAMCtrl::MemoryPort
getAddrRanges	./mem/dramsim2.cc	/^DRAMSim2::MemoryPort::getAddrRanges() const$/;"	f	class:DRAMSim2::MemoryPort
getAddrRanges	./mem/external_slave.cc	/^ExternalSlave::Port::getAddrRanges() const$/;"	f	class:ExternalSlave::Port
getAddrRanges	./mem/mem_checker_monitor.cc	/^MemCheckerMonitor::getAddrRanges() const$/;"	f	class:MemCheckerMonitor
getAddrRanges	./mem/mem_checker_monitor.hh	/^        AddrRangeList getAddrRanges() const$/;"	f	class:MemCheckerMonitor::MonitorSlavePort
getAddrRanges	./mem/noncoherent_xbar.hh	/^        virtual AddrRangeList getAddrRanges() const$/;"	f	class:NoncoherentXBar::NoncoherentXBarSlavePort
getAddrRanges	./mem/port.cc	/^MasterPort::getAddrRanges() const$/;"	f	class:MasterPort
getAddrRanges	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::MemoryPort::getAddrRanges() const$/;"	f	class:RubyMemoryControl::MemoryPort
getAddrRanges	./mem/ruby/system/DMASequencer.hh	/^        AddrRangeList getAddrRanges() const$/;"	f	class:DMASequencer::MemSlavePort
getAddrRanges	./mem/ruby/system/RubyPort.cc	/^RubyPort::PioSlavePort::getAddrRanges() const$/;"	f	class:RubyPort::PioSlavePort
getAddrRanges	./mem/ruby/system/RubyPort.hh	/^        AddrRangeList getAddrRanges() const$/;"	f	class:RubyPort::MemSlavePort
getAddrRanges	./mem/serial_link.cc	/^SerialLink::SerialLinkSlavePort::getAddrRanges() const$/;"	f	class:SerialLink::SerialLinkSlavePort
getAddrRanges	./mem/simple_mem.cc	/^SimpleMemory::MemoryPort::getAddrRanges() const$/;"	f	class:SimpleMemory::MemoryPort
getAddrRanges	./mem/xbar.cc	/^BaseXBar::getAddrRanges() const$/;"	f	class:BaseXBar
getAddrTable	./base/loader/symtab.hh	/^    const ATable &getAddrTable() const { return addrTable; }$/;"	f	class:SymbolTable
getAddress	./cpu/testers/rubytest/Check.hh	/^    Addr getAddress() const { return m_address; }$/;"	f	class:Check
getAddress	./dev/virtio/base.hh	/^    Addr getAddress() const { return _address; }$/;"	f	class:VirtQueue
getAddress	./mem/ruby/common/SubBlock.hh	/^    Addr getAddress() const { return m_address; }$/;"	f	class:SubBlock
getAddress	./mem/ruby/profiler/AccessTraceForAddress.hh	/^    Addr getAddress() const { return m_addr; }$/;"	f	class:AccessTraceForAddress
getAddressAtIdx	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::getAddressAtIdx(int idx) const$/;"	f	class:CacheMemory
getAddressProfiler	./mem/ruby/profiler/Profiler.hh	/^    AddressProfiler* getAddressProfiler() { return m_address_profiler_ptr; }$/;"	f	class:Profiler
getAllDest	./mem/ruby/common/NetDest.cc	/^NetDest::getAllDest()$/;"	f	class:NetDest
getAllInstructions	./mem/ruby/profiler/Profiler.hh	/^    bool getAllInstructions() const { return m_all_instructions; }$/;"	f	class:Profiler
getAllObjectNames	./sim/cxx_config_ini.cc	/^CxxIniFile::getAllObjectNames(std::vector<std::string> &list) const$/;"	f	class:CxxIniFile
getAllType	./mem/slicc/symbols/SymbolTable.py	/^    def getAllType(self, type):$/;"	m	class:SymbolTable
getAndFormatOneReg	./cpu/kvm/base.cc	/^BaseKvmCPU::getAndFormatOneReg(uint64_t id) const$/;"	f	class:BaseKvmCPU
getAndIncrementInstSeq	./cpu/o3/cpu.hh	/^    InstSeqNum getAndIncrementInstSeq()$/;"	f	class:FullO3CPU
getArch	./base/loader/object_file.hh	/^    Arch  getArch()  const { return arch; }$/;"	f	class:ObjectFile
getArch	./sim/system.hh	/^    Arch getArch() const { return Arch::TheISA; }$/;"	f	class:System
getArchFlags	./mem/request.hh	/^    getArchFlags() const$/;"	f	class:Request
getArchParams	./mem/drampower.cc	/^DRAMPower::getArchParams(const DRAMCtrlParams* p)$/;"	f	class:DRAMPower
getArg	./sim/arguments.cc	/^Arguments::getArg(uint16_t size, bool fp)$/;"	f	class:Arguments
getArgument	./arch/alpha/utility.cc	/^getArgument(ThreadContext *tc, int &number, uint16_t size, bool fp)$/;"	f	namespace:AlphaISA
getArgument	./arch/arm/utility.cc	/^getArgument(ThreadContext *tc, int &number, uint16_t size, bool fp)$/;"	f	namespace:ArmISA
getArgument	./arch/mips/utility.cc	/^getArgument(ThreadContext *tc, int &number, uint16_t size, bool fp)$/;"	f	namespace:MipsISA
getArgument	./arch/null/utility.hh	/^inline uint64_t getArgument(ThreadContext *tc, int &number, uint16_t size,$/;"	f	namespace:NullISA
getArgument	./arch/power/utility.cc	/^getArgument(ThreadContext *tc, int &number, uint16_t size, bool fp)$/;"	f	namespace:PowerISA
getArgument	./arch/sparc/utility.cc	/^getArgument(ThreadContext *tc, int &number, uint16_t size, bool fp)$/;"	f	namespace:SparcISA
getArgument	./arch/x86/utility.cc	/^getArgument(ThreadContext *tc, int &number, uint16_t size, bool fp)$/;"	f	namespace:X86ISA
getAsid	./mem/request.hh	/^    getAsid() const$/;"	f	class:Request
getAttr	./arch/arm/tlb.hh	/^    getAttr() const$/;"	f	class:ArmISA::TLB
getAttr	./cpu/kvm/device.hh	/^    T getAttr(uint32_t group, uint64_t attr) const {$/;"	f	class:KvmDevice
getAttrPtr	./cpu/kvm/device.cc	/^KvmDevice::getAttrPtr(uint32_t group, uint64_t attr, void *data) const$/;"	f	class:KvmDevice
getBAR	./dev/pci/device.hh	/^    getBAR(Addr addr)$/;"	f	class:PciDevice
getBAR	./dev/pci/device.hh	/^    getBAR(Addr addr, int &bar, Addr &offs)$/;"	f	class:PciDevice
getBE	./mem/packet_access.hh	/^Packet::getBE() const$/;"	f	class:Packet
getBackingStore	./mem/physical.hh	/^    std::vector<std::pair<AddrRange, uint8_t*>> getBackingStore() const$/;"	f	class:PhysicalMemory
getBank	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::getBank(const Addr addr) const$/;"	f	class:RubyMemoryControl
getBanksPerRank	./mem/ruby/structures/RubyMemoryControl.hh	/^    int getBanksPerRank() { return m_banks_per_rank; };$/;"	f	class:RubyMemoryControl
getBaseAddr	./dev/storage/ide_disk.hh	/^    uint32_t getBaseAddr()$/;"	f	class:PrdTableEntry
getBasePtr	./arch/x86/pagetable.hh	/^        Addr getBasePtr(ThreadContext* tc)$/;"	f	class:X86ISA::PageTableOps
getBinSize	./mem/ruby/common/Histogram.hh	/^    int getBinSize() const { return m_binsize; }$/;"	f	class:Histogram
getBins	./mem/ruby/common/Histogram.hh	/^    uint32_t getBins() const { return m_data.size(); }$/;"	f	class:Histogram
getBits	./base/bitunion.hh	/^        getBits(int first, int last) const$/;"	f	class:BitfieldBackend::BitfieldBase
getBlockAddr	./mem/packet.hh	/^    Addr getBlockAddr(unsigned int blk_size) const$/;"	f	class:Packet
getBlockSize	./mem/cache/base.hh	/^    getBlockSize() const$/;"	f	class:BaseCache
getBlockSize	./mem/cache/tags/base_set_assoc.hh	/^    getBlockSize() const$/;"	f	class:BaseSetAssoc
getBlockSize	./mem/cache/tags/fa_lru.hh	/^    getBlockSize() const$/;"	f	class:FALRU
getBlockSizeBits	./mem/ruby/system/RubySystem.hh	/^    static uint32_t getBlockSizeBits() { return m_block_size_bits; }$/;"	f	class:RubySystem
getBlockSizeBytes	./mem/ruby/system/RubySystem.hh	/^    static uint32_t getBlockSizeBytes() { return m_block_size_bytes; }$/;"	f	class:RubySystem
getBlockedMemInstToExecute	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::getBlockedMemInstToExecute()$/;"	f	class:InstructionQueue
getBootLoader	./arch/arm/system.cc	/^ArmSystem::getBootLoader(ObjectFile *const obj)$/;"	f	class:ArmSystem
getBuf	./dev/net/i8254xGBe_defs.hh	/^inline Addr getBuf(TxDesc *d) { assert(isLegacy(d) || isData(d)); return d->d1; }$/;"	f	namespace:iGbReg::TxdOp
getBufferMaps	./mem/slicc/symbols/StateMachine.py	/^    def getBufferMaps(self, ident):$/;"	m	class:StateMachine
getBufferSize	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.hh	/^    int getBufferSize() { return m_buffer_size; }$/;"	f	class:GarnetNetwork
getBufferSize	./mem/ruby/network/simple/SimpleNetwork.hh	/^    int getBufferSize() { return m_buffer_size; }$/;"	f	class:SimpleNetwork
getBuffersPerCtrlVC	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.hh	/^    int getBuffersPerCtrlVC() { return m_buffers_per_ctrl_vc; }$/;"	f	class:GarnetNetwork_d
getBuffersPerDataVC	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.hh	/^    int getBuffersPerDataVC() { return m_buffers_per_data_vc; }$/;"	f	class:GarnetNetwork_d
getBusPacket	./mem/cache/cache.cc	/^Cache::getBusPacket(PacketPtr cpu_pkt, CacheBlk *blk,$/;"	f	class:Cache
getByte	./mem/ruby/common/DataBlock.hh	/^DataBlock::getByte(int whichByte) const$/;"	f	class:DataBlock
getByte	./mem/ruby/common/SubBlock.hh	/^    uint8_t getByte(int offset) const { return m_data[offset]; }$/;"	f	class:SubBlock
getByteCount	./dev/storage/ide_disk.hh	/^    uint32_t getByteCount()$/;"	f	class:PrdTableEntry
getByteTracker	./mem/mem_checker.hh	/^    ByteTracker* getByteTracker(Addr addr)$/;"	f	class:MemChecker
getCCList	./cpu/o3/free_list.hh	/^    SimpleFreeList *getCCList() { return &ccList; }$/;"	f	class:UnifiedFreeList
getCCObject	./python/m5/SimObject.py	/^    def getCCObject(self):$/;"	f
getCCParams	./python/m5/SimObject.py	/^    def getCCParams(self):$/;"	f
getCCReg	./cpu/o3/free_list.hh	/^    PhysRegIndex getCCReg() { return ccList.getReg(); }$/;"	f	class:UnifiedFreeList
getCacheSize	./mem/ruby/structures/CacheMemory.hh	/^    int getCacheSize() const { return m_cache_size; }$/;"	f	class:CacheMemory
getCause	./sim/sim_events.hh	/^    const std::string getCause() const { return cause; }$/;"	f	class:GlobalSimLoopExitEvent
getCause	./sim/sim_events.hh	/^    const std::string getCause() const { return cause; }$/;"	f	class:LocalSimLoopExitEvent
getCauseIP	./arch/mips/interrupts.cc	/^getCauseIP(ThreadContext *tc) {$/;"	f	namespace:MipsISA
getChannel	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::getChannel(const Addr addr) const$/;"	f	class:RubyMemoryControl
getCheck	./cpu/testers/rubytest/CheckTable.cc	/^CheckTable::getCheck(const Addr address)$/;"	f	class:CheckTable
getCheckFlush	./cpu/testers/rubytest/RubyTester.hh	/^    bool getCheckFlush() { return m_check_flush; }$/;"	f	class:RubyTester
getCheckerCpuPtr	./cpu/checker/thread_context.hh	/^    CheckerCPU *getCheckerCpuPtr()$/;"	f	class:CheckerThreadContext
getCheckerCpuPtr	./cpu/o3/thread_context.hh	/^    CheckerCPU *getCheckerCpuPtr() { return NULL; }$/;"	f	class:O3ThreadContext
getCheckerCpuPtr	./cpu/simple_thread.hh	/^    CheckerCPU *getCheckerCpuPtr() { return NULL; }$/;"	f	class:SimpleThread
getCheckerCpuPtr	./cpu/thread_context.hh	/^    CheckerCPU *getCheckerCpuPtr() { return actualTC->getCheckerCpuPtr(); }$/;"	f	class:ProxyThreadContext
getCheckpoint	./python/swig/pyobject.cc	/^getCheckpoint(const std::string &cpt_dir)$/;"	f
getCode	./sim/init.cc	/^EmbeddedPython::getCode() const$/;"	f	class:EmbeddedPython
getCode	./sim/sim_events.hh	/^    int getCode() const { return code; }$/;"	f	class:GlobalSimLoopExitEvent
getCode	./sim/sim_events.hh	/^    int getCode() const { return code; }$/;"	f	class:LocalSimLoopExitEvent
getComInstEventQueue	./base/remote_gdb.cc	/^BaseRemoteGDB::getComInstEventQueue()$/;"	f	class:BaseRemoteGDB
getCommittingThread	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::getCommittingThread()$/;"	f	class:DefaultCommit
getCompleteHeader	./base/bitmap.cc	/^Bitmap::getCompleteHeader() const$/;"	f	class:Bitmap
getCondCode	./arch/mips/utility.cc	/^getCondCode(uint32_t fcsr, int cc_idx)$/;"	f	namespace:MipsISA
getConfAddrRanges	./mem/physical.cc	/^PhysicalMemory::getConfAddrRanges() const$/;"	f	class:PhysicalMemory
getConstPtr	./mem/packet.hh	/^    getConstPtr() const$/;"	f	class:Packet
getConsumer	./mem/ruby/network/MessageBuffer.hh	/^    Consumer* getConsumer() { return m_consumer; }$/;"	f	class:MessageBuffer
getConsumer	./mem/ruby/structures/WireBuffer.hh	/^    Consumer* getConsumer() { return m_consumer_ptr; };$/;"	f	class:WireBuffer
getContext	./cpu/base.hh	/^   virtual ThreadContext *getContext(int tn) { return threadContexts[tn]; }$/;"	f	class:BaseCPU
getContext	./cpu/kvm/base.cc	/^BaseKvmCPU::getContext(int tn)$/;"	f	class:BaseKvmCPU
getCooldownEnabled	./mem/ruby/system/RubySystem.hh	/^    static bool getCooldownEnabled() { return m_cooldown_enabled; }$/;"	f	class:RubySystem
getCount	./cpu/o3/inst_queue.hh	/^    unsigned getCount(ThreadID tid) { return count[tid]; };$/;"	f	class:InstructionQueue
getCount	./cpu/o3/lsq.hh	/^    int getCount(ThreadID tid)$/;"	f	class:LSQ
getCount	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::getCount()$/;"	f	class:LSQ
getCount	./cpu/o3/lsq_unit.hh	/^    unsigned getCount() { return loads + stores; }$/;"	f	class:LSQUnit
getCount	./mem/ruby/filters/BlockBloomFilter.cc	/^BlockBloomFilter::getCount(Addr addr)$/;"	f	class:BlockBloomFilter
getCount	./mem/ruby/filters/BulkBloomFilter.cc	/^BulkBloomFilter::getCount(Addr addr)$/;"	f	class:BulkBloomFilter
getCount	./mem/ruby/filters/H3BloomFilter.cc	/^H3BloomFilter::getCount(Addr addr)$/;"	f	class:H3BloomFilter
getCount	./mem/ruby/filters/LSB_CountingBloomFilter.cc	/^LSB_CountingBloomFilter::getCount(Addr addr)$/;"	f	class:LSB_CountingBloomFilter
getCount	./mem/ruby/filters/MultiBitSelBloomFilter.cc	/^MultiBitSelBloomFilter::getCount(Addr addr)$/;"	f	class:MultiBitSelBloomFilter
getCount	./mem/ruby/filters/MultiGrainBloomFilter.cc	/^MultiGrainBloomFilter::getCount(Addr addr)$/;"	f	class:MultiGrainBloomFilter
getCount	./mem/ruby/filters/NonCountingBloomFilter.cc	/^NonCountingBloomFilter::getCount(Addr addr)$/;"	f	class:NonCountingBloomFilter
getCount	./sim/sim_events.hh	/^    int getCount() const { return count; }$/;"	f	class:CountedDrainEvent
getCounter	./arch/arm/pmu.hh	/^    CounterState &getCounter(CounterId id) {$/;"	f	class:ArmISA::PMU
getCounter	./arch/arm/pmu.hh	/^    const CounterState &getCounter(CounterId id) const {$/;"	f	class:ArmISA::PMU
getCounterTypeRegister	./arch/arm/pmu.cc	/^PMU::getCounterTypeRegister(CounterId id) const$/;"	f	class:ArmISA::PMU
getCounterValue	./arch/arm/pmu.hh	/^    uint64_t getCounterValue(CounterId id) const {$/;"	f	class:ArmISA::PMU
getCpSeq	./sim/insttracer.hh	/^    InstSeqNum getCpSeq() const { return cp_seq; }$/;"	f	class:Trace::InstRecord
getCpSeqValid	./sim/insttracer.hh	/^    bool getCpSeqValid() const { return cp_seq_valid; }$/;"	f	class:Trace::InstRecord
getCpuAddrMonitor	./cpu/base.hh	/^    AddressMonitor *getCpuAddrMonitor(ThreadID tid)$/;"	f	class:BaseCPU
getCpuPort	./cpu/testers/directedtest/RubyDirectedTester.cc	/^RubyDirectedTester::getCpuPort(int idx)$/;"	f	class:RubyDirectedTester
getCpuPtr	./cpu/base_dyn_inst.hh	/^    BaseCPU *getCpuPtr() { return cpu; }$/;"	f	class:BaseDynInst
getCpuPtr	./cpu/checker/thread_context.hh	/^    BaseCPU *getCpuPtr() { return actualTC->getCpuPtr(); }$/;"	f	class:CheckerThreadContext
getCpuPtr	./cpu/minor/exec_context.hh	/^    BaseCPU *getCpuPtr() { return &cpu; }$/;"	f	class:Minor::ExecContext
getCpuPtr	./cpu/o3/thread_context.hh	/^    virtual BaseCPU *getCpuPtr() { return cpu; }$/;"	f	class:O3ThreadContext
getCpuPtr	./cpu/simple_thread.hh	/^    BaseCPU *getCpuPtr() { return baseCpu; }$/;"	f	class:SimpleThread
getCpuPtr	./cpu/thread_context.hh	/^    BaseCPU *getCpuPtr() { return actualTC->getCpuPtr(); }$/;"	f	class:ProxyThreadContext
getCreditQueue	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    flitBuffer_d* getCreditQueue() { return creditQueue; }$/;"	f	class:InputUnit_d
getCso	./dev/net/i8254xGBe_defs.hh	/^inline uint8_t getCso(TxDesc *d) { assert(isLegacy(d)); return bits(d->d2, 23,16); }$/;"	f	namespace:iGbReg::TxdOp
getCss	./dev/net/i8254xGBe_defs.hh	/^inline uint8_t getCss(TxDesc *d) { assert(isLegacy(d)); return bits(d->d2, 47,40); }$/;"	f	namespace:iGbReg::TxdOp
getCurTick	./sim/eventq.hh	/^    Tick getCurTick() const { return _curTick; }$/;"	f	class:EventQueue
getCurrentQueue	./dev/virtio/base.cc	/^VirtIODeviceBase::getCurrentQueue() const$/;"	f	class:VirtIODeviceBase
getCurrentQueue	./dev/virtio/base.cc	/^VirtIODeviceBase::getCurrentQueue()$/;"	f	class:VirtIODeviceBase
getDTBPtr	./cpu/checker/cpu.hh	/^    TheISA::TLB* getDTBPtr() { return dtb; }$/;"	f	class:CheckerCPU
getDTBPtr	./cpu/checker/thread_context.hh	/^    TheISA::TLB *getDTBPtr() { return actualTC->getDTBPtr(); }$/;"	f	class:CheckerThreadContext
getDTBPtr	./cpu/o3/thread_context.hh	/^    TheISA::TLB *getDTBPtr() { return cpu->dtb; }$/;"	f	class:O3ThreadContext
getDTBPtr	./cpu/simple_thread.hh	/^    TheISA::TLB *getDTBPtr() { return dtb; }$/;"	f	class:SimpleThread
getDTBPtr	./cpu/thread_context.hh	/^    TheISA::TLB *getDTBPtr() { return actualTC->getDTBPtr(); }$/;"	f	class:ProxyThreadContext
getData	./dev/x86/i8042.hh	/^    uint8_t getData()$/;"	f	class:X86ISA::PS2Device
getData	./mem/ruby/common/DataBlock.cc	/^DataBlock::getData(int offset, int len) const$/;"	f	class:DataBlock
getData	./mem/ruby/common/Histogram.hh	/^    uint64_t getData(int index) const { return m_data[index]; }$/;"	f	class:Histogram
getDataBlk	./mem/ruby/slicc_interface/AbstractCacheEntry.hh	/^    virtual DataBlock& getDataBlk()$/;"	f	class:AbstractCacheEntry
getDataLatency	./mem/ruby/structures/CacheMemory.hh	/^    Cycles getDataLatency() const { return dataArray.getLatency(); }$/;"	f	class:CacheMemory
getDataPort	./cpu/kvm/base.hh	/^    MasterPort &getDataPort() { return dataPort; }$/;"	f	class:BaseKvmCPU
getDataPort	./cpu/minor/cpu.cc	/^MasterPort &MinorCPU::getDataPort()$/;"	f	class:MinorCPU
getDataPort	./cpu/minor/pipeline.cc	/^Pipeline::getDataPort()$/;"	f	class:Minor::Pipeline
getDataPort	./cpu/trace/trace_cpu.hh	/^    MasterPort &getDataPort() { return dcachePort; }$/;"	f	class:TraceCPU
getDataRate	./mem/drampower.cc	/^DRAMPower::getDataRate(const DRAMCtrlParams* p)$/;"	f	class:DRAMPower
getDataStatus	./sim/insttracer.hh	/^    int getDataStatus() const { return data_status; }$/;"	f	class:Trace::InstRecord
getDcachePort	./cpu/minor/execute.cc	/^Execute::getDcachePort()$/;"	f	class:Minor::Execute
getDcachePort	./cpu/minor/lsq.hh	/^    MinorCPU::MinorCPUPort &getDcachePort() { return dcachePort; }$/;"	f	class:Minor::LSQ
getDebugLogger	./base/trace.cc	/^getDebugLogger()$/;"	f	namespace:Trace
getDebugRegisters	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::getDebugRegisters(struct kvm_debugregs &regs) const$/;"	f	class:X86KvmCPU
getDecoderPtr	./cpu/checker/thread_context.hh	/^    TheISA::Decoder *getDecoderPtr() { return actualTC->getDecoderPtr(); }$/;"	f	class:CheckerThreadContext
getDecoderPtr	./cpu/o3/thread_context.hh	/^    getDecoderPtr()$/;"	f	class:O3ThreadContext
getDecoderPtr	./cpu/simple_thread.hh	/^    TheISA::Decoder *getDecoderPtr() { return &decoder; }$/;"	f	class:SimpleThread
getDecoderPtr	./cpu/thread_context.hh	/^    TheISA::Decoder *getDecoderPtr() { return actualTC->getDecoderPtr(); }$/;"	f	class:ProxyThreadContext
getDeferredMemInstToExecute	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::getDeferredMemInstToExecute()$/;"	f	class:InstructionQueue
getDelayHist	./mem/ruby/slicc_interface/AbstractController.hh	/^    Stats::Histogram& getDelayHist() { return m_delayHistogram; }$/;"	f	class:AbstractController
getDelayVCHist	./mem/ruby/slicc_interface/AbstractController.hh	/^    Stats::Histogram& getDelayVCHist(uint32_t index)$/;"	f	class:AbstractController
getDelayedTicks	./mem/ruby/slicc_interface/Message.hh	/^    Tick getDelayedTicks() const {return m_DelayedTicks;}$/;"	f	class:Message
getDesc	./arch/alpha/linux/process.cc	/^AlphaLinuxProcess::getDesc(int callnum)$/;"	f	class:AlphaLinuxProcess
getDesc	./arch/alpha/tru64/process.cc	/^AlphaTru64Process::getDesc(int callnum)$/;"	f	class:AlphaTru64Process
getDesc	./arch/arm/freebsd/process.cc	/^ArmFreebsdProcess32::getDesc(int callnum)$/;"	f	class:ArmFreebsdProcess32
getDesc	./arch/arm/freebsd/process.cc	/^ArmFreebsdProcess64::getDesc(int callnum)$/;"	f	class:ArmFreebsdProcess64
getDesc	./arch/arm/freebsd/process.cc	/^ArmFreebsdProcessBits::SyscallTable::getDesc(int callnum) const$/;"	f	class:ArmFreebsdProcessBits::SyscallTable
getDesc	./arch/arm/linux/process.cc	/^ArmLinuxProcess32::getDesc(int callnum)$/;"	f	class:ArmLinuxProcess32
getDesc	./arch/arm/linux/process.cc	/^ArmLinuxProcess64::getDesc(int callnum)$/;"	f	class:ArmLinuxProcess64
getDesc	./arch/arm/linux/process.cc	/^ArmLinuxProcessBits::SyscallTable::getDesc(int callnum) const$/;"	f	class:ArmLinuxProcessBits::SyscallTable
getDesc	./arch/mips/linux/process.cc	/^MipsLinuxProcess::getDesc(int callnum)$/;"	f	class:MipsLinuxProcess
getDesc	./arch/power/linux/process.cc	/^PowerLinuxProcess::getDesc(int callnum)$/;"	f	class:PowerLinuxProcess
getDesc	./arch/sparc/linux/process.cc	/^SparcLinuxProcess::getDesc(int callnum)$/;"	f	class:SparcLinuxProcess
getDesc	./arch/sparc/linux/process.hh	/^    getDesc(int callnum)$/;"	f	class:SparcISA::Sparc32LinuxProcess
getDesc	./arch/sparc/linux/process.hh	/^    getDesc(int callnum)$/;"	f	class:SparcISA::Sparc64LinuxProcess
getDesc	./arch/sparc/solaris/process.cc	/^SparcSolarisProcess::getDesc(int callnum)$/;"	f	class:SparcSolarisProcess
getDesc	./arch/x86/process.cc	/^X86LiveProcess::getDesc(int callnum)$/;"	f	class:X86LiveProcess
getDesc32	./arch/sparc/linux/process.cc	/^SparcLinuxProcess::getDesc32(int callnum)$/;"	f	class:SparcLinuxProcess
getDescription	./mem/ruby/structures/RubyMemoryControl.hh	/^    std::string getDescription() { return m_description; };$/;"	f	class:RubyMemoryControl
getDescription	./mem/ruby/structures/WireBuffer.hh	/^    std::string getDescription() { return m_description; };$/;"	f	class:WireBuffer
getDescriptor	./dev/virtio/base.hh	/^    VirtDescriptor *getDescriptor(VirtDescriptor::Index index) {$/;"	f	class:VirtQueue
getDestination	./mem/ruby/slicc_interface/Message.hh	/^    virtual NetDest& getDestination()$/;"	f	class:Message
getDestination	./mem/ruby/slicc_interface/Message.hh	/^    virtual const NetDest& getDestination() const$/;"	f	class:Message
getDevice	./dev/pci/host.cc	/^PciHost::getDevice(const PciBusAddr &addr) const$/;"	f	class:PciHost
getDevice	./dev/pci/host.cc	/^PciHost::getDevice(const PciBusAddr &addr)$/;"	f	class:PciHost
getDeviceStatus	./dev/virtio/base.hh	/^    DeviceStatus getDeviceStatus() const { return _deviceStatus; }$/;"	f	class:VirtIODeviceBase
getDimmsPerChannel	./mem/ruby/structures/RubyMemoryControl.hh	/^    int getDimmsPerChannel() { return m_dimms_per_channel; }$/;"	f	class:RubyMemoryControl
getDoubleBits	./arch/x86/utility.hh	/^    inline uint64_t getDoubleBits(double val) {$/;"	f	namespace:X86ISA
getEA	./cpu/base_dyn_inst.hh	/^    Addr getEA() const { return instEffAddr; }$/;"	f	class:BaseDynInst
getEA	./cpu/minor/exec_context.hh	/^    Addr getEA() const$/;"	f	class:Minor::ExecContext
getEOT	./dev/storage/ide_disk.hh	/^    uint16_t getEOT()$/;"	f	class:PrdTableEntry
getElapsedTimeMicro	./sim/syscall_emul.hh	/^getElapsedTimeMicro(T1 &sec, T2 &usec)$/;"	f
getElapsedTimeNano	./sim/syscall_emul.hh	/^getElapsedTimeNano(T1 &sec, T2 &nsec)$/;"	f
getEmulEnv	./arch/x86/insts/macroop.hh	/^    getEmulEnv()$/;"	f	class:X86ISA::MacroopBase
getEndpointBandwidth	./mem/ruby/network/simple/SimpleNetwork.hh	/^    int getEndpointBandwidth() { return m_endpoint_bandwidth; }$/;"	f	class:SimpleNetwork
getEntry	./arch/mips/tlb.cc	/^TLB::getEntry(unsigned Index) const$/;"	f	class:TLB
getEntry	./arch/power/tlb.cc	/^TLB::getEntry(unsigned Index) const$/;"	f	class:TLB
getErrorMessage	./mem/mem_checker.hh	/^    const std::string& getErrorMessage() const { return errorMessage; }$/;"	f	class:MemChecker
getEthPort	./dev/net/dist_etherlink.cc	/^DistEtherLink::getEthPort(const std::string &if_name, int idx)$/;"	f	class:DistEtherLink
getEthPort	./dev/net/etherbus.cc	/^EtherBus::getEthPort(const std::string &if_name, int idx)$/;"	f	class:EtherBus
getEthPort	./dev/net/etherlink.cc	/^EtherLink::getEthPort(const std::string &if_name, int idx)$/;"	f	class:EtherLink
getEthPort	./dev/net/ethertap.cc	/^EtherTap::getEthPort(const std::string &if_name, int idx)$/;"	f	class:EtherTap
getEthPort	./dev/net/i8254xGBe.cc	/^IGbE::getEthPort(const std::string &if_name, int idx)$/;"	f	class:IGbE
getEthPort	./dev/net/ns_gige.cc	/^NSGigE::getEthPort(const std::string &if_name, int idx)$/;"	f	class:NSGigE
getEthPort	./dev/net/sinic.cc	/^Device::getEthPort(const std::string &if_name, int idx)$/;"	f	class:Sinic::Device
getEventQueue	./python/m5/event.py	/^def getEventQueue(index):$/;"	f
getEventQueue	./sim/eventq.cc	/^getEventQueue(uint32_t index)$/;"	f
getExecuteTick	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::TraceInfo::getExecuteTick() const$/;"	f	class:ElasticTrace::TraceInfo
getExecutingAsid	./arch/alpha/utility.hh	/^getExecutingAsid(ThreadContext *tc)$/;"	f	namespace:AlphaISA
getExecutingAsid	./arch/arm/utility.hh	/^getExecutingAsid(ThreadContext *tc)$/;"	f	namespace:ArmISA
getExecutingAsid	./arch/mips/utility.hh	/^getExecutingAsid(ThreadContext *tc)$/;"	f	namespace:MipsISA
getExecutingAsid	./arch/power/utility.hh	/^getExecutingAsid(ThreadContext *tc)$/;"	f	namespace:PowerISA
getExecutingAsid	./arch/sparc/utility.hh	/^getExecutingAsid(ThreadContext *tc)$/;"	f	namespace:SparcISA
getExecutingAsid	./arch/x86/utility.hh	/^    getExecutingAsid(ThreadContext *tc)$/;"	f	namespace:X86ISA
getExt	./base/inet.cc	/^Ip6Hdr::getExt(uint8_t ext_type) const$/;"	f	class:Net::Ip6Hdr
getExtMachInst	./arch/x86/insts/macroop.hh	/^    getExtMachInst()$/;"	f	class:X86ISA::MacroopBase
getExternalPort	./mem/external_slave.cc	/^    ExternalSlave::Port *getExternalPort($/;"	f	class:StubSlavePortHandler
getExtraData	./mem/request.hh	/^    getExtraData() const$/;"	f	class:Request
getFDEntry	./sim/process.cc	/^Process::getFDEntry(int tgt_fd)$/;"	f	class:Process
getFPUState	./cpu/kvm/base.cc	/^BaseKvmCPU::getFPUState(struct kvm_fpu &state) const$/;"	f	class:BaseKvmCPU
getFU	./cpu/o3/fu_pool.cc	/^FUPool::FUIdxQueue::getFU()$/;"	f	class:FUPool::FUIdxQueue
getFault	./cpu/base_dyn_inst.hh	/^    Fault getFault() const { return fault; }$/;"	f	class:BaseDynInst
getFault	./cpu/translation.hh	/^    getFault() const$/;"	f	class:WholeTranslationState
getFaultAddrReg64	./arch/arm/faults.cc	/^ArmFault::getFaultAddrReg64() const$/;"	f	class:ArmISA::ArmFault
getFetchSeq	./sim/insttracer.hh	/^    InstSeqNum getFetchSeq() const { return fetch_seq; }$/;"	f	class:Trace::InstRecord
getFetchSeqValid	./sim/insttracer.hh	/^    bool getFetchSeqValid() const { return fetch_seq_valid; }$/;"	f	class:Trace::InstRecord
getFetchingThread	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::getFetchingThread(FetchPriority &fetch_priority)$/;"	f	class:DefaultFetch
getFirstResponseToCompletionDelayHist	./mem/ruby/system/Sequencer.hh	/^    getFirstResponseToCompletionDelayHist(const MachineType t) const$/;"	f	class:Sequencer
getFlags	./arch/isa_parser.py	/^    def getFlags(self):$/;"	m	class:Operand
getFlags	./cpu/translation.hh	/^    getFlags()$/;"	f	class:WholeTranslationState
getFlags	./mem/request.hh	/^    getFlags()$/;"	f	class:Request
getFlags	./sim/cxx_config.hh	/^    virtual CxxConfigParams::Flags getFlags() const { return 0; }$/;"	f	class:CxxConfigFileBase
getFlags	./sim/eventq.hh	/^    getFlags() const$/;"	f	class:Event
getFlags	./sim/insttracer.hh	/^    unsigned getFlags() const { return flags; }$/;"	f	class:Trace::InstRecord
getFloatData	./sim/insttracer.hh	/^    double getFloatData() const { return data.as_double; }$/;"	f	class:Trace::InstRecord
getFloatReg	./cpu/o3/free_list.hh	/^    PhysRegIndex getFloatReg() { return floatList.getReg(); }$/;"	f	class:UnifiedFreeList
getForwardRequestToFirstResponseHist	./mem/ruby/system/Sequencer.hh	/^    getForwardRequestToFirstResponseHist(const MachineType t) const$/;"	f	class:Sequencer
getFrame	./base/cp_annotate.cc	/^CPA::getFrame(ThreadContext *tc)$/;"	f	class:CPA
getFreeTid	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::getFreeTid()$/;"	f	class:FullO3CPU
getFreebsdDesc	./arch/arm/freebsd/process.cc	/^ArmFreebsdProcessBits::getFreebsdDesc(int callnum)$/;"	f	class:ArmFreebsdProcessBits
getFsr	./arch/arm/faults.cc	/^AbortFault<T>::getFsr(ThreadContext *tc)$/;"	f	class:ArmISA::AbortFault
getFsr	./arch/arm/faults.hh	/^    virtual FSR getFsr(ThreadContext *tc) { return 0; }$/;"	f	class:ArmISA::ArmFault
getGenericTimer	./arch/arm/isa.cc	/^ISA::getGenericTimer(ThreadContext *tc)$/;"	f	class:ArmISA::ISA
getGenericTimer	./arch/arm/system.hh	/^    GenericTimer *getGenericTimer() const { return _genericTimer; }$/;"	f	class:ArmSystem
getGuestData	./cpu/kvm/base.hh	/^    uint8_t *getGuestData(uint64_t offset) const {$/;"	f	class:BaseKvmCPU
getGuestFeatures	./dev/virtio/base.hh	/^    FeatureBits getGuestFeatures() const { return guestFeatures; }$/;"	f	class:VirtIODeviceBase
getHash	./base/framebuffer.cc	/^FrameBuffer::getHash() const$/;"	f	class:FrameBuffer
getHead	./sim/eventq.hh	/^    Event *getHead() const { return head; }$/;"	f	class:EventQueue
getHeadPacket	./cpu/minor/lsq.cc	/^LSQ::SplitDataRequest::getHeadPacket()$/;"	f	class:Minor::LSQ::SplitDataRequest
getHeadPacket	./cpu/minor/lsq.hh	/^        PacketPtr getHeadPacket() { return packet; }$/;"	f	class:Minor::LSQ::SingleDataRequest
getHeadPacket	./cpu/minor/lsq.hh	/^        PacketPtr getHeadPacket()$/;"	f	class:Minor::LSQ::SpecialDataRequest
getHitLatencyHist	./mem/ruby/system/Sequencer.hh	/^    Stats::Histogram& getHitLatencyHist() { return m_hitLatencyHist; }$/;"	f	class:Sequencer
getHitMachLatencyHist	./mem/ruby/system/Sequencer.hh	/^    Stats::Histogram& getHitMachLatencyHist(uint32_t t)$/;"	f	class:Sequencer
getHitTypeLatencyHist	./mem/ruby/system/Sequencer.hh	/^    Stats::Histogram& getHitTypeLatencyHist(uint32_t t)$/;"	f	class:Sequencer
getHitTypeMachLatencyHist	./mem/ruby/system/Sequencer.hh	/^    Stats::Histogram& getHitTypeMachLatencyHist(uint32_t r, uint32_t t)$/;"	f	class:Sequencer
getHostCycles	./cpu/kvm/base.cc	/^BaseKvmCPU::getHostCycles() const$/;"	f	class:BaseKvmCPU
getHostCycles	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::getHostCycles() const$/;"	f	class:X86KvmCPU
getHotLines	./mem/ruby/profiler/Profiler.hh	/^    bool getHotLines() const { return m_hot_lines; }$/;"	f	class:Profiler
getHyperVector	./arch/sparc/faults.cc	/^getHyperVector(ThreadContext * tc, Addr &PC, Addr &NPC, MiscReg TT)$/;"	f	namespace:SparcISA
getISR	./arch/arm/interrupts.hh	/^    getISR(HCR hcr, CPSR cpsr, SCR scr)$/;"	f	class:ArmISA::Interrupts
getITBPtr	./cpu/checker/cpu.hh	/^    TheISA::TLB* getITBPtr() { return itb; }$/;"	f	class:CheckerCPU
getITBPtr	./cpu/checker/thread_context.hh	/^    TheISA::TLB *getITBPtr() { return actualTC->getITBPtr(); }$/;"	f	class:CheckerThreadContext
getITBPtr	./cpu/o3/thread_context.hh	/^    TheISA::TLB *getITBPtr() { return cpu->itb; }$/;"	f	class:O3ThreadContext
getITBPtr	./cpu/simple_thread.hh	/^    TheISA::TLB *getITBPtr() { return itb; }$/;"	f	class:SimpleThread
getITBPtr	./cpu/thread_context.hh	/^    TheISA::TLB *getITBPtr() { return actualTC->getITBPtr(); }$/;"	f	class:ProxyThreadContext
getIcachePort	./cpu/minor/fetch1.hh	/^    MinorCPU::MinorCPUPort &getIcachePort() { return icachePort; }$/;"	f	class:Minor::Fetch1
getId	./mem/port.hh	/^    PortID getId() const { return id; }$/;"	f	class:Port
getId	./mem/ruby/system/DMASequencer.hh	/^    uint32_t getId() { return m_version; }$/;"	f	class:DMASequencer
getId	./mem/ruby/system/RubyPort.hh	/^    uint32_t getId() { return m_version; }$/;"	f	class:RubyPort
getImmediate	./arch/x86/decoder.hh	/^    void getImmediate(int &collected, uint64_t &current, int size)$/;"	f	class:X86ISA::Decoder
getInLinks	./mem/ruby/network/simple/PerfectSwitch.hh	/^    int getInLinks() const { return m_in.size(); }$/;"	f	class:PerfectSwitch
getIncomingLink	./mem/ruby/slicc_interface/Message.hh	/^    int getIncomingLink() const { return incoming_link; }$/;"	f	class:Message
getIncompleteTimes	./mem/ruby/system/Sequencer.hh	/^    Stats::Counter getIncompleteTimes(const MachineType t) const$/;"	f	class:Sequencer
getIncompleteWriteCluster	./mem/mem_checker.cc	/^MemChecker::ByteTracker::getIncompleteWriteCluster()$/;"	f	class:MemChecker::ByteTracker
getIndex	./cpu/pred/btb.cc	/^DefaultBTB::getIndex(Addr instPC)$/;"	f	class:DefaultBTB
getIndex	./mem/ruby/filters/BlockBloomFilter.cc	/^BlockBloomFilter::getIndex(Addr addr)$/;"	f	class:BlockBloomFilter
getIndex	./mem/ruby/filters/BulkBloomFilter.cc	/^BulkBloomFilter::getIndex(Addr addr)$/;"	f	class:BulkBloomFilter
getIndex	./mem/ruby/filters/H3BloomFilter.cc	/^H3BloomFilter::getIndex(Addr addr)$/;"	f	class:H3BloomFilter
getIndex	./mem/ruby/filters/LSB_CountingBloomFilter.cc	/^LSB_CountingBloomFilter::getIndex(Addr addr)$/;"	f	class:LSB_CountingBloomFilter
getIndex	./mem/ruby/filters/MultiBitSelBloomFilter.cc	/^MultiBitSelBloomFilter::getIndex(Addr addr)$/;"	f	class:MultiBitSelBloomFilter
getIndex	./mem/ruby/filters/MultiGrainBloomFilter.cc	/^MultiGrainBloomFilter::getIndex(Addr addr)$/;"	f	class:MultiGrainBloomFilter
getIndex	./mem/ruby/filters/NonCountingBloomFilter.cc	/^NonCountingBloomFilter::getIndex(Addr addr)$/;"	f	class:NonCountingBloomFilter
getIndex	./mem/stack_dist_calc.hh	/^    uint64_t getIndex() const { return index; }$/;"	f	class:StackDistCalc
getInitialApicId	./arch/x86/interrupts.hh	/^    int getInitialApicId() { return initialApicId; }$/;"	f	class:X86ISA::Interrupts
getInitialToForwardDelayHist	./mem/ruby/system/Sequencer.hh	/^    getInitialToForwardDelayHist(const MachineType t) const$/;"	f	class:Sequencer
getInput	./cpu/minor/decode.cc	/^Decode::getInput()$/;"	f	class:Minor::Decode
getInput	./cpu/minor/execute.cc	/^Execute::getInput()$/;"	f	class:Minor::Execute
getInput	./cpu/minor/fetch2.cc	/^Fetch2::getInput()$/;"	f	class:Minor::Fetch2
getInstListIt	./cpu/base_dyn_inst.hh	/^    ListIt &getInstListIt() { return instListIt; }$/;"	f	class:BaseDynInst
getInstPort	./cpu/kvm/base.hh	/^    MasterPort &getInstPort() { return instPort; }$/;"	f	class:BaseKvmCPU
getInstPort	./cpu/minor/cpu.cc	/^MasterPort &MinorCPU::getInstPort()$/;"	f	class:MinorCPU
getInstPort	./cpu/minor/pipeline.cc	/^Pipeline::getInstPort()$/;"	f	class:Minor::Pipeline
getInstPort	./cpu/trace/trace_cpu.hh	/^    MasterPort &getInstPort() { return icachePort; }$/;"	f	class:TraceCPU
getInstRecord	./cpu/exetrace.hh	/^    getInstRecord(Tick when, ThreadContext *tc,$/;"	f	class:Trace::ExeTracer
getInstRecord	./cpu/inst_pb_trace.cc	/^InstPBTrace::getInstRecord(Tick when, ThreadContext *tc, const StaticInstPtr si,$/;"	f	class:Trace::InstPBTrace
getInstRecord	./cpu/inteltrace.hh	/^    getInstRecord(Tick when, ThreadContext *tc,$/;"	f	class:Trace::IntelTrace
getInstRecord	./cpu/nativetrace.hh	/^    getInstRecord(Tick when, ThreadContext *tc,$/;"	f	class:Trace::NativeTrace
getInstToExecute	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::getInstToExecute()$/;"	f	class:InstructionQueue
getInstance	./sim/Root.py	/^    def getInstance(cls):$/;"	m	class:Root
getInstructionProfiler	./mem/ruby/profiler/Profiler.hh	/^    AddressProfiler* getInstructionProfiler() { return m_inst_profiler_ptr; }$/;"	f	class:Profiler
getInsts	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::getInsts()$/;"	f	class:DefaultCommit
getIntAddrRange	./arch/x86/interrupts.cc	/^X86ISA::Interrupts::getIntAddrRange() const$/;"	f	class:X86ISA::Interrupts
getIntAddrRange	./dev/x86/i82094aa.cc	/^X86ISA::I82094AA::getIntAddrRange() const$/;"	f	class:X86ISA::I82094AA
getIntAddrRange	./dev/x86/intdev.hh	/^    getIntAddrRange() const$/;"	f	class:X86ISA::IntDevice
getIntData	./sim/insttracer.hh	/^    uint64_t getIntData() const { return data.as_int; }$/;"	f	class:Trace::InstRecord
getIntReg	./cpu/o3/free_list.hh	/^    PhysRegIndex getIntReg() { return intList.getReg(); }$/;"	f	class:UnifiedFreeList
getInterrupt	./arch/alpha/interrupts.hh	/^    getInterrupt(ThreadContext *tc)$/;"	f	class:AlphaISA::Interrupts
getInterrupt	./arch/arm/interrupts.hh	/^    getInterrupt(ThreadContext *tc)$/;"	f	class:ArmISA::Interrupts
getInterrupt	./arch/mips/interrupts.cc	/^Interrupts::getInterrupt(ThreadContext * tc)$/;"	f	class:MipsISA::Interrupts
getInterrupt	./arch/power/interrupts.hh	/^    getInterrupt(ThreadContext *tc)$/;"	f	class:PowerISA::Interrupts
getInterrupt	./arch/sparc/interrupts.hh	/^    getInterrupt(ThreadContext *tc)$/;"	f	class:SparcISA::Interrupts
getInterrupt	./arch/x86/interrupts.cc	/^X86ISA::Interrupts::getInterrupt(ThreadContext *tc)$/;"	f	class:X86ISA::Interrupts
getInterruptController	./cpu/base.hh	/^    getInterruptController(ThreadID tid)$/;"	f	class:BaseCPU
getInterrupts	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::getInterrupts()$/;"	f	class:FullO3CPU
getInterval	./dev/intel_8254_timer.cc	/^Intel8254Timer::Counter::CounterEvent::getInterval()$/;"	f	class:Intel8254Timer::Counter::CounterEvent
getIssueToInitialDelayHist	./mem/ruby/system/Sequencer.hh	/^    Stats::Histogram& getIssueToInitialDelayHist(uint32_t t) const$/;"	f	class:Sequencer
getKernelControl	./dev/arm/generic_timer.hh	/^    uint32_t getKernelControl() { return _regCntkctl; }$/;"	f	class:SystemCounter
getKernelEnd	./sim/system.hh	/^    Addr getKernelEnd() const { return kernelEnd; }$/;"	f	class:System
getKernelEntry	./sim/system.hh	/^    Addr getKernelEntry() const { return kernelEntry; }$/;"	f	class:System
getKernelStart	./sim/system.hh	/^    Addr getKernelStart() const { return kernelStart; }$/;"	f	class:System
getKernelStats	./cpu/checker/thread_context.hh	/^    TheISA::Kernel::Statistics *getKernelStats()$/;"	f	class:CheckerThreadContext
getKernelStats	./cpu/o3/thread_context.hh	/^    virtual TheISA::Kernel::Statistics *getKernelStats()$/;"	f	class:O3ThreadContext
getKernelStats	./cpu/thread_context.hh	/^    TheISA::Kernel::Statistics *getKernelStats()$/;"	f	class:ProxyThreadContext
getKernelStats	./cpu/thread_state.hh	/^    TheISA::Kernel::Statistics *getKernelStats() { return kernelStats; }$/;"	f	struct:ThreadState
getKvmRunState	./cpu/kvm/base.hh	/^    struct kvm_run *getKvmRunState() { return _kvmRun; };$/;"	f	class:BaseKvmCPU
getLBABase	./dev/storage/ide_disk.hh	/^    uint32_t getLBABase()$/;"	f	class:IdeDisk
getLE	./mem/packet_access.hh	/^Packet::getLE() const$/;"	f	class:Packet
getLRUindex	./mem/ruby/structures/Prefetcher.cc	/^Prefetcher::getLRUindex(void)$/;"	f	class:Prefetcher
getLSQ	./cpu/minor/execute.hh	/^    LSQ &getLSQ() { return lsq; }$/;"	f	class:Minor::Execute
getLastAccess	./mem/ruby/structures/AbstractReplacementPolicy.cc	/^AbstractReplacementPolicy::getLastAccess(int64_t set, int64_t way)$/;"	f	class:AbstractReplacementPolicy
getLastEnqueueTime	./mem/ruby/slicc_interface/Message.hh	/^    Tick getLastEnqueueTime() const {return m_LastEnqueueTime;}$/;"	f	class:Message
getLastMemBarrier	./cpu/minor/lsq.hh	/^    InstSeqNum getLastMemBarrier() const { return lastMemBarrier; }$/;"	f	class:Minor::LSQ
getLatency	./mem/ruby/network/simple/Throttle.hh	/^    Cycles getLatency() const { return m_link_latency; }$/;"	f	class:Throttle
getLatency	./mem/ruby/structures/BankedArray.hh	/^    Cycles getLatency() const { return accessLatency; }$/;"	f	class:BankedArray
getLatency	./mem/simple_mem.cc	/^SimpleMemory::getLatency() const$/;"	f	class:SimpleMemory
getLatencyHist	./mem/ruby/system/Sequencer.hh	/^    Stats::Histogram& getLatencyHist() { return m_latencyHist; }$/;"	f	class:Sequencer
getLen	./dev/net/i8254xGBe_defs.hh	/^inline Addr getLen(TxDesc *d) { if (isLegacy(d)) return bits(d->d2,15,0); else return bits(d->d2, 19,0); }$/;"	f	namespace:iGbReg::TxdOp
getLength	./arch/x86/bios/smbios.hh	/^    getLength()$/;"	f	class:X86ISA::SMBios::SMBiosStructure
getLength	./arch/x86/bios/smbios.hh	/^    uint8_t getLength() { return 0x18; }$/;"	f	class:X86ISA::SMBios::BiosInformation
getLineAddress	./mem/ruby/slicc_interface/RubyRequest.hh	/^    Addr getLineAddress() const { return m_LineAddress; }$/;"	f	class:RubyRequest
getLinkBandwidth	./mem/ruby/network/simple/Throttle.hh	/^    int getLinkBandwidth() const$/;"	f	class:Throttle
getLinkUtilization	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.hh	/^    unsigned int getLinkUtilization() const { return m_link_utilized; }$/;"	f	class:NetworkLink_d
getLinkUtilization	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	/^    unsigned int getLinkUtilization() const { return m_link_utilized; }$/;"	f	class:NetworkLink
getLinuxDesc	./arch/arm/linux/process.cc	/^ArmLinuxProcessBits::getLinuxDesc(int callnum)$/;"	f	class:ArmLinuxProcessBits
getList	./sim/init.cc	/^EmbeddedPython::getList()$/;"	f	class:EmbeddedPython
getList	./sim/init.cc	/^EmbeddedSwig::getList()$/;"	f	class:EmbeddedSwig
getLoadHead	./cpu/o3/lsq.hh	/^    int getLoadHead(ThreadID tid)$/;"	f	class:LSQ
getLoadHead	./cpu/o3/lsq_unit.hh	/^    int getLoadHead() { return loadHead; }$/;"	f	class:LSQUnit
getLoadHeadSeqNum	./cpu/o3/lsq.hh	/^    InstSeqNum getLoadHeadSeqNum(ThreadID tid)$/;"	f	class:LSQ
getLoadHeadSeqNum	./cpu/o3/lsq_unit.hh	/^    InstSeqNum getLoadHeadSeqNum()$/;"	f	class:LSQUnit
getLocalIndex	./cpu/pred/2bit_local.cc	/^LocalBP::getLocalIndex(Addr &branch_addr)$/;"	f	class:LocalBP
getLockedAddrList	./mem/abstract_mem.hh	/^    const std::list<LockedAddr>& getLockedAddrList() const$/;"	f	class:AbstractMemory
getMISR	./dev/arm/vgic.cc	/^VGic::getMISR(struct vcpuIntData *vid)$/;"	f	class:VGic
getMPIDR	./arch/arm/utility.cc	/^getMPIDR(ArmSystem *arm_sys, ThreadContext *tc)$/;"	f	namespace:ArmISA
getMSR	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::getMSR(uint32_t index) const$/;"	f	class:X86KvmCPU
getMSRs	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::getMSRs(struct kvm_msrs &msrs) const$/;"	f	class:X86KvmCPU
getMachineID	./mem/ruby/slicc_interface/AbstractController.hh	/^    MachineID getMachineID() const { return m_machineID; }$/;"	f	class:AbstractController
getMacroStaticInst	./sim/insttracer.hh	/^    StaticInstPtr getMacroStaticInst() const { return macroStaticInst; }$/;"	f	class:Trace::InstRecord
getMasterId	./sim/system.cc	/^System::getMasterId(std::string master_name)$/;"	f	class:System
getMasterName	./sim/system.cc	/^System::getMasterName(MasterID master_id)$/;"	f	class:System
getMasterPort	./arch/arm/table_walker.cc	/^TableWalker::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:TableWalker
getMasterPort	./arch/arm/tlb.cc	/^TLB::getMasterPort()$/;"	f	class:TLB
getMasterPort	./arch/generic/tlb.hh	/^    virtual BaseMasterPort* getMasterPort() { return NULL; }$/;"	f	class:BaseTLB
getMasterPort	./arch/x86/pagetable_walker.cc	/^Walker::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:X86ISA::Walker
getMasterPort	./arch/x86/tlb.cc	/^TLB::getMasterPort()$/;"	f	class:X86ISA::TLB
getMasterPort	./cpu/base.cc	/^BaseCPU::getMasterPort(const string &if_name, PortID idx)$/;"	f	class:BaseCPU
getMasterPort	./cpu/testers/directedtest/RubyDirectedTester.cc	/^RubyDirectedTester::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:RubyDirectedTester
getMasterPort	./cpu/testers/memtest/memtest.cc	/^MemTest::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:MemTest
getMasterPort	./cpu/testers/networktest/networktest.cc	/^NetworkTest::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:NetworkTest
getMasterPort	./cpu/testers/rubytest/RubyTester.cc	/^RubyTester::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:RubyTester
getMasterPort	./cpu/testers/traffic_gen/traffic_gen.cc	/^TrafficGen::getMasterPort(const string& if_name, PortID idx)$/;"	f	class:TrafficGen
getMasterPort	./dev/dma_device.cc	/^DmaDevice::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:DmaDevice
getMasterPort	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::getMasterPort()$/;"	f	class:CopyEngine::CopyEngineChannel
getMasterPort	./dev/pci/copy_engine.cc	/^CopyEngine::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:CopyEngine
getMasterPort	./dev/x86/i82094aa.cc	/^X86ISA::I82094AA::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:X86ISA::I82094AA
getMasterPort	./mem/addr_mapper.cc	/^AddrMapper::getMasterPort(const std::string& if_name, PortID idx)$/;"	f	class:AddrMapper
getMasterPort	./mem/bridge.cc	/^Bridge::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:Bridge
getMasterPort	./mem/cache/base.cc	/^BaseCache::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:BaseCache
getMasterPort	./mem/comm_monitor.cc	/^CommMonitor::getMasterPort(const std::string& if_name, PortID idx)$/;"	f	class:CommMonitor
getMasterPort	./mem/external_master.cc	/^ExternalMaster::getMasterPort(const std::string &if_name,$/;"	f	class:ExternalMaster
getMasterPort	./mem/mem_checker_monitor.cc	/^MemCheckerMonitor::getMasterPort(const std::string& if_name, PortID idx)$/;"	f	class:MemCheckerMonitor
getMasterPort	./mem/mem_object.cc	/^MemObject::getMasterPort(const std::string& if_name, PortID idx)$/;"	f	class:MemObject
getMasterPort	./mem/port.cc	/^BaseSlavePort::getMasterPort() const$/;"	f	class:BaseSlavePort
getMasterPort	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::getMasterPort(const std::string &if_name,$/;"	f	class:AbstractController
getMasterPort	./mem/ruby/system/RubyPort.cc	/^RubyPort::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:RubyPort
getMasterPort	./mem/serial_link.cc	/^SerialLink::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:SerialLink
getMasterPort	./mem/xbar.cc	/^BaseXBar::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:BaseXBar
getMasterPort	./sim/system.cc	/^System::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:System
getMax	./mem/ruby/common/Histogram.hh	/^    int64_t getMax() const { return m_max; }$/;"	f	class:Histogram
getMaxEntries	./cpu/o3/rob.hh	/^    unsigned getMaxEntries(ThreadID tid)$/;"	f	class:ROB
getMem	./arch/generic/memhelpers.hh	/^getMem(PacketPtr pkt, MemT &mem, Trace::InstRecord *traceData)$/;"	f
getMem	./arch/x86/memhelpers.hh	/^getMem(PacketPtr pkt, unsigned dataSize, Trace::InstRecord *traceData)$/;"	f	namespace:X86ISA
getMemDepViolator	./cpu/o3/lsq.hh	/^    DynInstPtr getMemDepViolator(ThreadID tid)$/;"	f	class:LSQ
getMemDepViolator	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::getMemDepViolator()$/;"	f	class:LSQUnit
getMemProxy	./cpu/checker/thread_context.hh	/^    SETranslatingPortProxy &getMemProxy() { return actualTC->getMemProxy(); }$/;"	f	class:CheckerThreadContext
getMemProxy	./cpu/o3/thread_context.hh	/^    virtual SETranslatingPortProxy &getMemProxy()$/;"	f	class:O3ThreadContext
getMemProxy	./cpu/thread_context.hh	/^    SETranslatingPortProxy &getMemProxy() { return actualTC->getMemProxy(); }$/;"	f	class:ProxyThreadContext
getMemProxy	./cpu/thread_state.cc	/^ThreadState::getMemProxy()$/;"	f	class:ThreadState
getMemSpec	./mem/drampower.cc	/^DRAMPower::getMemSpec(const DRAMCtrlParams* p)$/;"	f	class:DRAMPower
getMemValid	./sim/insttracer.hh	/^    bool getMemValid() const { return mem_valid; }$/;"	f	class:Trace::InstRecord
getMemoryMode	./sim/system.hh	/^    Enums::MemoryMode getMemoryMode() const { return memoryMode; }$/;"	f	class:System
getMemorySizeBits	./mem/ruby/system/RubySystem.hh	/^    static uint32_t getMemorySizeBits() { return m_memory_size_bits; }$/;"	f	class:RubySystem
getMessageSize	./mem/ruby/slicc_interface/Message.hh	/^    virtual MessageSizeType& getMessageSize()$/;"	f	class:Message
getMessageSize	./mem/ruby/slicc_interface/Message.hh	/^    virtual const MessageSizeType& getMessageSize() const$/;"	f	class:Message
getMicroOpCount	./cpu/trace/trace_cpu.hh	/^            uint64_t getMicroOpCount() const { return microOpCount; }$/;"	f	class:TraceCPU::ElasticDataGen::InputStream
getMicroOpCount	./cpu/trace/trace_cpu.hh	/^        uint64_t getMicroOpCount() const { return trace.getMicroOpCount(); }$/;"	f	class:TraceCPU::ElasticDataGen
getMiscRegName	./arch/sparc/ua2005.cc	/^getMiscRegName(RegIndex index)$/;"	f	file:
getMissLatencyHist	./mem/ruby/system/Sequencer.hh	/^    Stats::Histogram& getMissLatencyHist()$/;"	f	class:Sequencer
getMissMachLatencyHist	./mem/ruby/system/Sequencer.hh	/^    Stats::Histogram& getMissMachLatencyHist(uint32_t t) const$/;"	f	class:Sequencer
getMissTypeLatencyHist	./mem/ruby/system/Sequencer.hh	/^    Stats::Histogram& getMissTypeLatencyHist(uint32_t t)$/;"	f	class:Sequencer
getMissTypeMachLatencyHist	./mem/ruby/system/Sequencer.hh	/^    getMissTypeMachLatencyHist(uint32_t r, uint32_t t) const$/;"	f	class:Sequencer
getMsgCount	./mem/ruby/network/simple/Switch.hh	/^    const Stats::Formula & getMsgCount(unsigned int type) const$/;"	f	class:Switch
getMsgCount	./mem/ruby/network/simple/Throttle.hh	/^    const Stats::Vector & getMsgCount(unsigned int type) const$/;"	f	class:Throttle
getMsgCounter	./mem/ruby/slicc_interface/Message.hh	/^    uint64_t getMsgCounter() const { return m_msg_counter; }$/;"	f	class:Message
getMsrIntersection	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::getMsrIntersection() const$/;"	f	class:X86KvmCPU
getName	./cpu/static_inst.hh	/^    std::string getName() { return mnemonic; }$/;"	f	class:StaticInst
getName	./sim/cxx_config.hh	/^    virtual const std::string &getName() { return invalidName; }$/;"	f	class:CxxConfigParams
getName	./sim/probe/probe.hh	/^    std::string getName() const { return name; }$/;"	f	class:ProbePoint
getNextByte	./arch/x86/decoder.hh	/^    uint8_t getNextByte()$/;"	f	class:X86ISA::Decoder
getNextLevel	./arch/sparc/faults.hh	/^    getNextLevel(PrivilegeLevel current)$/;"	f	class:SparcISA::SparcFault
getNextMSHR	./mem/cache/cache.cc	/^Cache::getNextMSHR()$/;"	f	class:Cache
getNextMSHR	./mem/cache/mshr_queue.hh	/^    MSHR *getNextMSHR() const$/;"	f	class:MSHRQueue
getNextPacket	./cpu/testers/traffic_gen/generators.cc	/^DramGen::getNextPacket()$/;"	f	class:DramGen
getNextPacket	./cpu/testers/traffic_gen/generators.cc	/^DramRotGen::getNextPacket()$/;"	f	class:DramRotGen
getNextPacket	./cpu/testers/traffic_gen/generators.cc	/^LinearGen::getNextPacket()$/;"	f	class:LinearGen
getNextPacket	./cpu/testers/traffic_gen/generators.cc	/^RandomGen::getNextPacket()$/;"	f	class:RandomGen
getNextPacket	./cpu/testers/traffic_gen/generators.cc	/^TraceGen::getNextPacket()$/;"	f	class:TraceGen
getNextPacket	./cpu/testers/traffic_gen/generators.hh	/^    PacketPtr getNextPacket() { return NULL; }$/;"	f	class:IdleGen
getNiFlitSize	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    int getNiFlitSize() const { return m_ni_flit_size; }$/;"	f	class:BaseGarnetNetwork
getNodePtr	./base/statistics.hh	/^    NodePtr getNodePtr() const { return node; }$/;"	f	class:Stats::Temp
getNum	./mem/ruby/common/MachineID.hh	/^    NodeID getNum() const { return num; }$/;"	f	struct:MachineID
getNumBlocks	./mem/ruby/structures/CacheMemory.hh	/^    int getNumBlocks() const { return m_cache_num_sets * m_cache_assoc; }$/;"	f	class:CacheMemory
getNumNodes	./mem/ruby/network/Network.hh	/^    int getNumNodes() const { return m_nodes; }$/;"	f	class:Network
getNumPipeStages	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.hh	/^    int getNumPipeStages() {return m_number_of_pipe_stages; }$/;"	f	class:GarnetNetwork
getNumStages	./cpu/activity.hh	/^    int getNumStages() const { return numStages; }$/;"	f	class:ActivityRecorder
getNumTargets	./mem/cache/mshr.hh	/^    int getNumTargets() const$/;"	f	class:MSHR
getNumberOfVirtualNetworks	./mem/ruby/network/Network.hh	/^    static uint32_t getNumberOfVirtualNetworks() { return m_virtual_networks; }$/;"	f	class:Network
getObject	./sim/cxx_manager.hh	/^    getObject(const std::string &object_name)$/;"	f	class:CxxConfigManager
getObjectChildren	./sim/cxx_config_ini.cc	/^CxxIniFile::getObjectChildren(const std::string &object_name,$/;"	f	class:CxxIniFile
getOffset	./mem/packet.hh	/^    Addr getOffset(unsigned int blk_size) const$/;"	f	class:Packet
getOffset	./mem/ruby/common/Address.cc	/^getOffset(Addr addr)$/;"	f
getOffsets	./arch/x86/pagetable.hh	/^        std::vector<uint64_t> getOffsets(Addr vaddr)$/;"	f	class:X86ISA::PageTableOps
getOneReg	./cpu/kvm/base.cc	/^BaseKvmCPU::getOneReg(uint64_t id, void *addr) const$/;"	f	class:BaseKvmCPU
getOneRegU32	./cpu/kvm/base.hh	/^    uint32_t getOneRegU32(uint64_t id) const {$/;"	f	class:BaseKvmCPU
getOneRegU64	./cpu/kvm/base.hh	/^    uint64_t getOneRegU64(uint64_t id) const {$/;"	f	class:BaseKvmCPU
getOpLatency	./cpu/o3/fu_pool.hh	/^    Cycles getOpLatency(OpClass capability) {$/;"	f	class:FUPool
getOpSys	./base/loader/object_file.hh	/^    OpSys getOpSys() const { return opSys; }$/;"	f	class:ObjectFile
getOrdered	./mem/ruby/network/MessageBuffer.hh	/^    bool getOrdered() { return m_strict_fifo; }$/;"	f	class:MessageBuffer
getOutLinks	./mem/ruby/network/simple/PerfectSwitch.hh	/^    int getOutLinks() const { return m_out.size(); }$/;"	f	class:PerfectSwitch
getOutQueue	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.cc	/^OutputUnit_d::getOutQueue()$/;"	f	class:OutputUnit_d
getOutstandReqHist	./mem/ruby/system/Sequencer.hh	/^    Stats::Histogram& getOutstandReqHist() { return m_outstandReqHist; }$/;"	f	class:Sequencer
getPC	./mem/request.hh	/^    getPC() const$/;"	f	class:Request
getPCState	./sim/insttracer.hh	/^    TheISA::PCState getPCState() const { return pc; }$/;"	f	class:Trace::InstRecord
getPacket	./cpu/testers/traffic_gen/generators.cc	/^BaseGen::getPacket(Addr addr, unsigned size, const MemCmd& cmd,$/;"	f	class:BaseGen
getPacket	./mem/cache/prefetch/queued.cc	/^QueuedPrefetcher::getPacket()$/;"	f	class:QueuedPrefetcher
getPacketData	./dev/net/i8254xGBe.cc	/^IGbE::TxDescCache::getPacketData(EthPacketPtr p)$/;"	f	class:IGbE::TxDescCache
getPacketSize	./dev/net/i8254xGBe.cc	/^IGbE::TxDescCache::getPacketSize(EthPacketPtr p)$/;"	f	class:IGbE::TxDescCache
getPaddr	./cpu/translation.hh	/^    getPaddr() const$/;"	f	class:WholeTranslationState
getPaddr	./mem/request.hh	/^    getPaddr() const$/;"	f	class:Request
getPage	./cpu/decode_cache.hh	/^    getPage(Addr addr)$/;"	f	class:DecodeCache::AddrMap
getPageBytes	./sim/system.hh	/^    Addr getPageBytes() const { return TheISA::PageBytes; }$/;"	f	class:System
getPageShift	./sim/system.hh	/^    Addr getPageShift() const { return TheISA::PageShift; }$/;"	f	class:System
getParam	./sim/cxx_config_ini.cc	/^CxxIniFile::getParam(const std::string &object_name,$/;"	f	class:CxxIniFile
getParamVector	./sim/cxx_config_ini.cc	/^CxxIniFile::getParamVector(const std::string &object_name,$/;"	f	class:CxxIniFile
getPcEventQueue	./base/remote_gdb.cc	/^PCEventQueue *BaseRemoteGDB::getPcEventQueue()$/;"	f	class:BaseRemoteGDB
getPeer	./dev/net/etherint.hh	/^    EtherInt* getPeer() { return peer; }$/;"	f	class:EtherInt
getPendingFragment	./cpu/simple/timing.hh	/^        getPendingFragment()$/;"	f	class:TimingSimpleCPU::SplitMainSenderState
getPermission	./mem/ruby/slicc_interface/AbstractEntry.cc	/^AbstractEntry::getPermission() const$/;"	f	class:AbstractEntry
getPermission	./mem/ruby/structures/PerfectCacheMemory.hh	/^PerfectCacheMemory<ENTRY>::getPermission(Addr address) const$/;"	f	class:PerfectCacheMemory
getPhysMem	./mem/ruby/system/RubySystem.hh	/^    SimpleMemory *getPhysMem() { return m_phys_mem; }$/;"	f	class:RubySystem
getPhysMem	./sim/system.hh	/^    PhysicalMemory& getPhysMem() { return physmem; }$/;"	f	class:System
getPhysProxy	./cpu/checker/thread_context.hh	/^    PortProxy &getPhysProxy() { return actualTC->getPhysProxy(); }$/;"	f	class:CheckerThreadContext
getPhysProxy	./cpu/o3/thread_context.hh	/^    virtual PortProxy &getPhysProxy() { return thread->getPhysProxy(); }$/;"	f	class:O3ThreadContext
getPhysProxy	./cpu/thread_context.hh	/^    PortProxy &getPhysProxy() { return actualTC->getPhysProxy(); }$/;"	f	class:ProxyThreadContext
getPhysProxy	./cpu/thread_state.cc	/^ThreadState::getPhysProxy()$/;"	f	class:ThreadState
getPhysicalAddress	./mem/ruby/slicc_interface/RubyRequest.hh	/^    Addr getPhysicalAddress() const { return m_PhysicalAddress; }$/;"	f	class:RubyRequest
getPid	./cpu/base.hh	/^    uint32_t getPid() const { return _pid; }$/;"	f	class:BaseCPU
getPnum	./arch/x86/pagetable.hh	/^        Addr getPnum(PageTableEntry PTE)$/;"	f	class:X86ISA::PageTableOps
getPort	./arch/arm/stage2_mmu.hh	/^    DmaPort& getPort() { return port; }$/;"	f	class:ArmISA::Stage2MMU
getPortPeers	./sim/cxx_config_ini.cc	/^CxxIniFile::getPortPeers(const std::string &object_name,$/;"	f	class:CxxIniFile
getPowerParams	./mem/drampower.cc	/^DRAMPower::getPowerParams(const DRAMCtrlParams* p)$/;"	f	class:DRAMPower
getPrediction	./cpu/pred/2bit_local.cc	/^LocalBP::getPrediction(uint8_t &count)$/;"	f	class:LocalBP
getPrefetch	./mem/ruby/slicc_interface/RubyRequest.hh	/^    const PrefetchBit& getPrefetch() const { return m_Prefetch; }$/;"	f	class:RubyRequest
getPrefetchEntry	./mem/ruby/structures/Prefetcher.cc	/^Prefetcher::getPrefetchEntry(Addr address, uint32_t &index)$/;"	f	class:Prefetcher
getPriority	./mem/ruby/network/MessageBuffer.hh	/^    int getPriority() { return m_priority_rank; }$/;"	f	class:MessageBuffer
getPrivVector	./arch/sparc/faults.cc	/^getPrivVector(ThreadContext *tc, Addr &PC, Addr &NPC, MiscReg TT, MiscReg TL)$/;"	f	namespace:SparcISA
getProbeManager	./sim/probe/probe.hh	/^    ProbeManager* getProbeManager() { return manager; }$/;"	f	class:ProbeListenerObject
getProbeManager	./sim/sim_object.cc	/^SimObject::getProbeManager()$/;"	f	class:SimObject
getProcessPtr	./cpu/checker/thread_context.hh	/^    Process *getProcessPtr() { return actualTC->getProcessPtr(); }$/;"	f	class:CheckerThreadContext
getProcessPtr	./cpu/o3/thread_context.hh	/^    virtual Process *getProcessPtr() { return thread->getProcessPtr(); }$/;"	f	class:O3ThreadContext
getProcessPtr	./cpu/thread_context.hh	/^    Process *getProcessPtr() { return actualTC->getProcessPtr(); }$/;"	f	class:ProxyThreadContext
getProcessPtr	./cpu/thread_state.hh	/^    Process *getProcessPtr() { return process; }$/;"	f	struct:ThreadState
getProfiler	./mem/ruby/system/RubySystem.hh	/^    getProfiler()$/;"	f	class:RubySystem
getProgramCounter	./mem/ruby/slicc_interface/RubyRequest.hh	/^    Addr getProgramCounter() const { return m_ProgramCounter; }$/;"	f	class:RubyRequest
getPtr	./mem/packet.hh	/^    getPtr()$/;"	f	class:Packet
getQ	./base/cp_annotate.hh	/^    getQ(int sys, std::string q, uint64_t id)$/;"	f	class:CPA
getQueueAddress	./dev/virtio/base.cc	/^VirtIODeviceBase::getQueueAddress() const$/;"	f	class:VirtIODeviceBase
getQueueSelect	./dev/virtio/base.hh	/^    QueueID getQueueSelect() const { return _queueSelect; }$/;"	f	class:VirtIODeviceBase
getQueueSize	./dev/virtio/base.hh	/^    uint16_t getQueueSize() const { return getCurrentQueue().getSize(); }$/;"	f	class:VirtIODeviceBase
getQuiesceEvent	./cpu/checker/thread_context.hh	/^    EndQuiesceEvent *getQuiesceEvent() { return actualTC->getQuiesceEvent(); }$/;"	f	class:CheckerThreadContext
getQuiesceEvent	./cpu/o3/thread_context.hh	/^    virtual EndQuiesceEvent *getQuiesceEvent()$/;"	f	class:O3ThreadContext
getQuiesceEvent	./cpu/thread_context.hh	/^    EndQuiesceEvent *getQuiesceEvent() { return actualTC->getQuiesceEvent(); }$/;"	f	class:ProxyThreadContext
getQuiesceEvent	./cpu/thread_state.hh	/^    EndQuiesceEvent *getQuiesceEvent() { return quiesceEvent; }$/;"	f	struct:ThreadState
getREDVector	./arch/sparc/faults.cc	/^getREDVector(MiscReg TT, Addr &PC, Addr &NPC)$/;"	f	namespace:SparcISA
getRFlags	./arch/x86/utility.cc	/^getRFlags(ThreadContext *tc)$/;"	f	namespace:X86ISA
getRandomCheck	./cpu/testers/rubytest/CheckTable.cc	/^CheckTable::getRandomCheck()$/;"	f	class:CheckTable
getRandomization	./mem/ruby/system/RubySystem.hh	/^    static int getRandomization() { return m_randomization; }$/;"	f	class:RubySystem
getRank	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::getRank(const Addr addr) const$/;"	f	class:RubyMemoryControl
getRank	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::getRank(int bank) const$/;"	f	class:RubyMemoryControl
getRanksPerDimm	./mem/ruby/structures/RubyMemoryControl.hh	/^    int getRanksPerDimm() { return m_ranks_per_dimm; };$/;"	f	class:RubyMemoryControl
getRaw	./mem/packet_access.hh	/^Packet::getRaw() const$/;"	f	class:Packet
getRawData	./arch/arm/table_walker.hh	/^        virtual uint64_t getRawData() const$/;"	f	class:ArmISA::TableWalker::L1Descriptor
getRawData	./arch/arm/table_walker.hh	/^        virtual uint64_t getRawData() const$/;"	f	class:ArmISA::TableWalker::L2Descriptor
getRawData	./arch/arm/table_walker.hh	/^        virtual uint64_t getRawData() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
getReadableCpuPort	./cpu/testers/rubytest/RubyTester.cc	/^RubyTester::getReadableCpuPort(int idx)$/;"	f	class:RubyTester
getReg	./cpu/o3/free_list.hh	/^    PhysRegIndex getReg()$/;"	f	class:SimpleFreeList
getReg	./cpu/o3/scoreboard.hh	/^    bool getReg(PhysRegIndex reg_idx) const$/;"	f	class:Scoreboard
getRegArrayBit	./arch/x86/interrupts.hh	/^    getRegArrayBit(ApicRegIndex base, uint8_t vector)$/;"	f	class:X86ISA::Interrupts
getRegList	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::getRegList() const$/;"	f	class:ArmKvmCPU
getRegList	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::getRegList(struct kvm_reg_list &regs) const$/;"	f	class:ArmKvmCPU
getRegList	./arch/arm/kvm/base_cpu.cc	/^BaseArmKvmCPU::getRegList() const$/;"	f	class:BaseArmKvmCPU
getRegList	./arch/arm/kvm/base_cpu.cc	/^BaseArmKvmCPU::getRegList(struct kvm_reg_list &regs) const$/;"	f	class:BaseArmKvmCPU
getRegisters	./cpu/kvm/base.cc	/^BaseKvmCPU::getRegisters(struct kvm_regs &regs) const$/;"	f	class:BaseKvmCPU
getRegs	./arch/alpha/remote_gdb.cc	/^RemoteGDB::AlphaGdbRegCache::getRegs(ThreadContext *context)$/;"	f	class:RemoteGDB::AlphaGdbRegCache
getRegs	./arch/arm/remote_gdb.cc	/^RemoteGDB::AArch32GdbRegCache::getRegs(ThreadContext *context)$/;"	f	class:RemoteGDB::AArch32GdbRegCache
getRegs	./arch/arm/remote_gdb.cc	/^RemoteGDB::AArch64GdbRegCache::getRegs(ThreadContext *context)$/;"	f	class:RemoteGDB::AArch64GdbRegCache
getRegs	./arch/mips/remote_gdb.cc	/^RemoteGDB::MipsGdbRegCache::getRegs(ThreadContext *context)$/;"	f	class:RemoteGDB::MipsGdbRegCache
getRegs	./arch/power/remote_gdb.cc	/^RemoteGDB::PowerGdbRegCache::getRegs(ThreadContext *context)$/;"	f	class:RemoteGDB::PowerGdbRegCache
getRegs	./arch/sparc/remote_gdb.cc	/^RemoteGDB::SPARC64GdbRegCache::getRegs(ThreadContext *context)$/;"	f	class:RemoteGDB::SPARC64GdbRegCache
getRegs	./arch/sparc/remote_gdb.cc	/^RemoteGDB::SPARCGdbRegCache::getRegs(ThreadContext *context)$/;"	f	class:RemoteGDB::SPARCGdbRegCache
getRegs	./arch/x86/remote_gdb.cc	/^RemoteGDB::AMD64GdbRegCache::getRegs(ThreadContext *context)$/;"	f	class:RemoteGDB::AMD64GdbRegCache
getRegs	./arch/x86/remote_gdb.cc	/^RemoteGDB::X86GdbRegCache::getRegs(ThreadContext *context)$/;"	f	class:RemoteGDB::X86GdbRegCache
getRemoteGDBPort	./sim/debug.cc	/^getRemoteGDBPort()$/;"	f
getReqInstSeqNum	./mem/request.hh	/^    getReqInstSeqNum() const$/;"	f	class:Request
getResultTe	./arch/arm/tlb.cc	/^TLB::getResultTe(TlbEntry **te, RequestPtr req, ThreadContext *tc, Mode mode,$/;"	f	class:TLB
getRoute	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::getRoute(NetDest destination)$/;"	f	class:Router
getRow	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::getRow(const Addr addr) const$/;"	f	class:RubyMemoryControl
getSectionNames	./base/inifile.cc	/^IniFile::getSectionNames(vector<string> &list) const$/;"	f	class:IniFile
getSections	./base/loader/elf_object.cc	/^ElfObject::getSections()$/;"	f	class:ElfObject
getSetIndex	./mem/ruby/slicc_interface/AbstractCacheEntry.hh	/^    uint32_t getSetIndex() const { return m_set_index; }$/;"	f	class:AbstractCacheEntry
getSharing	./mem/ruby/profiler/AccessTraceForAddress.hh	/^    int getSharing() const { return m_sharing; }$/;"	f	class:AccessTraceForAddress
getSimFD	./sim/process.cc	/^Process::getSimFD(int tgt_fd)$/;"	f	class:Process
getSimObjectResolver	./sim/cxx_manager.hh	/^    SimObjectResolver &getSimObjectResolver() { return simObjectResolver; }$/;"	f	class:CxxConfigManager
getSize	./cpu/timebuf.hh	/^    unsigned getSize()$/;"	f	class:TimeBuffer
getSize	./dev/virtio/base.hh	/^     uint16_t getSize() const { return _size; }$/;"	f	class:VirtQueue
getSize	./mem/packet.hh	/^    unsigned getSize() const  { assert(flags.isSet(VALID_SIZE)); return size; }$/;"	f	class:Packet
getSize	./mem/request.hh	/^    getSize() const$/;"	f	class:Request
getSize	./mem/ruby/common/NetDest.hh	/^    int getSize() const { return m_bits.size(); }$/;"	f	class:NetDest
getSize	./mem/ruby/common/Set.hh	/^    int getSize() const { return m_nSize; }$/;"	f	class:Set
getSize	./mem/ruby/common/SubBlock.hh	/^    int getSize() const { return m_data.size(); }$/;"	f	class:SubBlock
getSize	./mem/ruby/network/MessageBuffer.cc	/^MessageBuffer::getSize(Tick curTime)$/;"	f	class:MessageBuffer
getSize	./mem/ruby/slicc_interface/RubyRequest.hh	/^    const int& getSize() const { return m_Size; }$/;"	f	class:RubyRequest
getSize	./mem/ruby/structures/DirectoryMemory.hh	/^    uint64_t getSize() { return m_size_bytes; }$/;"	f	class:DirectoryMemory
getSize	./sim/insttracer.hh	/^    Addr getSize() const { return size; }$/;"	f	class:Trace::InstRecord
getSlavePort	./dev/io_device.cc	/^PioDevice::getSlavePort(const std::string &if_name, PortID idx)$/;"	f	class:PioDevice
getSlavePort	./mem/addr_mapper.cc	/^AddrMapper::getSlavePort(const std::string& if_name, PortID idx)$/;"	f	class:AddrMapper
getSlavePort	./mem/bridge.cc	/^Bridge::getSlavePort(const std::string &if_name, PortID idx)$/;"	f	class:Bridge
getSlavePort	./mem/cache/base.cc	/^BaseCache::getSlavePort(const std::string &if_name, PortID idx)$/;"	f	class:BaseCache
getSlavePort	./mem/comm_monitor.cc	/^CommMonitor::getSlavePort(const std::string& if_name, PortID idx)$/;"	f	class:CommMonitor
getSlavePort	./mem/dram_ctrl.cc	/^DRAMCtrl::getSlavePort(const string &if_name, PortID idx)$/;"	f	class:DRAMCtrl
getSlavePort	./mem/dramsim2.cc	/^DRAMSim2::getSlavePort(const std::string &if_name, PortID idx)$/;"	f	class:DRAMSim2
getSlavePort	./mem/external_slave.cc	/^ExternalSlave::getSlavePort(const std::string &if_name,$/;"	f	class:ExternalSlave
getSlavePort	./mem/mem_checker_monitor.cc	/^MemCheckerMonitor::getSlavePort(const std::string& if_name, PortID idx)$/;"	f	class:MemCheckerMonitor
getSlavePort	./mem/mem_object.cc	/^MemObject::getSlavePort(const std::string& if_name, PortID idx)$/;"	f	class:MemObject
getSlavePort	./mem/port.cc	/^BaseMasterPort::getSlavePort() const$/;"	f	class:BaseMasterPort
getSlavePort	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::getSlavePort(const string &if_name, PortID idx)$/;"	f	class:RubyMemoryControl
getSlavePort	./mem/ruby/system/DMASequencer.cc	/^DMASequencer::getSlavePort(const std::string &if_name, PortID idx)$/;"	f	class:DMASequencer
getSlavePort	./mem/ruby/system/RubyPort.cc	/^RubyPort::getSlavePort(const std::string &if_name, PortID idx)$/;"	f	class:RubyPort
getSlavePort	./mem/serial_link.cc	/^SerialLink::getSlavePort(const std::string &if_name, PortID idx)$/;"	f	class:SerialLink
getSlavePort	./mem/simple_mem.cc	/^SimpleMemory::getSlavePort(const std::string &if_name, PortID idx)$/;"	f	class:SimpleMemory
getSlavePort	./mem/xbar.cc	/^BaseXBar::getSlavePort(const std::string &if_name, PortID idx)$/;"	f	class:BaseXBar
getSm	./base/cp_annotate.hh	/^    getSm(int sysi, std::string si, uint64_t id)$/;"	f	class:CPA
getSpecialRegisters	./cpu/kvm/base.cc	/^BaseKvmCPU::getSpecialRegisters(struct kvm_sregs &regs) const$/;"	f	class:BaseKvmCPU
getSquaredTotal	./mem/ruby/common/Histogram.hh	/^    uint64_t getSquaredTotal() const { return m_sumSquaredSamples; }$/;"	f	class:Histogram
getSt	./base/cp_annotate.hh	/^    getSt(std::string sm, std::string s)$/;"	f	class:CPA
getStageActive	./cpu/activity.hh	/^    bool getStageActive(const int idx) const { return stageActive[idx]; }$/;"	f	class:ActivityRecorder
getStallMapSize	./mem/ruby/network/MessageBuffer.hh	/^    unsigned int getStallMapSize() { return m_stall_msg_map.size(); }$/;"	f	class:MessageBuffer
getStandardDeviation	./mem/ruby/common/Histogram.cc	/^Histogram::getStandardDeviation() const$/;"	f	class:Histogram
getStartCycle	./mem/ruby/system/RubySystem.hh	/^    Cycles getStartCycle() { return m_start_cycle; }$/;"	f	class:RubySystem
getStaticInst	./sim/insttracer.hh	/^    StaticInstPtr getStaticInst() const { return staticInst; }$/;"	f	class:Trace::InstRecord
getStoreHead	./cpu/o3/lsq.hh	/^    int getStoreHead(ThreadID tid)$/;"	f	class:LSQ
getStoreHead	./cpu/o3/lsq_unit.hh	/^    int getStoreHead() { return storeHead; }$/;"	f	class:LSQUnit
getStoreHeadSeqNum	./cpu/o3/lsq.hh	/^    InstSeqNum getStoreHeadSeqNum(ThreadID tid)$/;"	f	class:LSQ
getStoreHeadSeqNum	./cpu/o3/lsq_unit.hh	/^    InstSeqNum getStoreHeadSeqNum()$/;"	f	class:LSQUnit
getStringLength	./arch/x86/bios/smbios.cc	/^X86ISA::SMBios::SMBiosStructure::getStringLength()$/;"	f	class:X86ISA::SMBios::SMBiosStructure
getSubBlockSize	./mem/cache/tags/base_set_assoc.hh	/^    getSubBlockSize() const$/;"	f	class:BaseSetAssoc
getSubBlockSize	./mem/cache/tags/fa_lru.hh	/^    getSubBlockSize() const$/;"	f	class:FALRU
getSum	./mem/stack_dist_calc.cc	/^StackDistCalc::getSum(Node* node, bool from_left, uint64_t sum_from_below,$/;"	f	class:StackDistCalc
getSumsLeavesToRoot	./mem/stack_dist_calc.cc	/^StackDistCalc::getSumsLeavesToRoot(Node* node) const$/;"	f	class:StackDistCalc
getSupportedCPUID	./cpu/kvm/vm.cc	/^Kvm::getSupportedCPUID() const$/;"	f	class:Kvm
getSupportedCPUID	./cpu/kvm/vm.cc	/^Kvm::getSupportedCPUID(struct kvm_cpuid2 &cpuid) const$/;"	f	class:Kvm
getSupportedMSRs	./cpu/kvm/vm.cc	/^Kvm::getSupportedMSRs() const$/;"	f	class:Kvm
getSupportedMSRs	./cpu/kvm/vm.cc	/^Kvm::getSupportedMSRs(struct kvm_msr_list &msrs) const$/;"	f	class:Kvm
getSymbolTable	./base/loader/symtab.hh	/^    const STable &getSymbolTable() const { return symbolTable; }$/;"	f	class:SymbolTable
getSyndromeReg64	./arch/arm/faults.cc	/^ArmFault::getSyndromeReg64() const$/;"	f	class:ArmISA::ArmFault
getSys	./base/cp_annotate.hh	/^    getSys(System *s)$/;"	f	class:CPA
getSysRegMap	./arch/arm/kvm/armv8_cpu.cc	/^ArmV8KvmCPU::getSysRegMap() const$/;"	f	class:ArmV8KvmCPU
getSyscallArg	./arch/alpha/process.cc	/^AlphaLiveProcess::getSyscallArg(ThreadContext *tc, int &i)$/;"	f	class:AlphaLiveProcess
getSyscallArg	./arch/arm/process.cc	/^ArmLiveProcess32::getSyscallArg(ThreadContext *tc, int &i)$/;"	f	class:ArmLiveProcess32
getSyscallArg	./arch/arm/process.cc	/^ArmLiveProcess32::getSyscallArg(ThreadContext *tc, int &i, int width)$/;"	f	class:ArmLiveProcess32
getSyscallArg	./arch/arm/process.cc	/^ArmLiveProcess64::getSyscallArg(ThreadContext *tc, int &i)$/;"	f	class:ArmLiveProcess64
getSyscallArg	./arch/arm/process.cc	/^ArmLiveProcess64::getSyscallArg(ThreadContext *tc, int &i, int width)$/;"	f	class:ArmLiveProcess64
getSyscallArg	./arch/mips/process.cc	/^MipsLiveProcess::getSyscallArg(ThreadContext *tc, int &i)$/;"	f	class:MipsLiveProcess
getSyscallArg	./arch/power/linux/process.cc	/^PowerLinuxProcess::getSyscallArg(ThreadContext *tc, int &i)$/;"	f	class:PowerLinuxProcess
getSyscallArg	./arch/power/process.cc	/^PowerLiveProcess::getSyscallArg(ThreadContext *tc, int &i)$/;"	f	class:PowerLiveProcess
getSyscallArg	./arch/sparc/process.cc	/^Sparc32LiveProcess::getSyscallArg(ThreadContext *tc, int &i)$/;"	f	class:Sparc32LiveProcess
getSyscallArg	./arch/sparc/process.cc	/^Sparc64LiveProcess::getSyscallArg(ThreadContext *tc, int &i)$/;"	f	class:Sparc64LiveProcess
getSyscallArg	./arch/x86/process.cc	/^I386LiveProcess::getSyscallArg(ThreadContext *tc, int &i)$/;"	f	class:I386LiveProcess
getSyscallArg	./arch/x86/process.cc	/^I386LiveProcess::getSyscallArg(ThreadContext *tc, int &i, int width)$/;"	f	class:I386LiveProcess
getSyscallArg	./arch/x86/process.cc	/^X86_64LiveProcess::getSyscallArg(ThreadContext *tc, int &i)$/;"	f	class:X86_64LiveProcess
getSyscallArg	./sim/process.cc	/^LiveProcess::getSyscallArg(ThreadContext *tc, int &i, int width)$/;"	f	class:LiveProcess
getSystemPort	./sim/system.hh	/^    MasterPort& getSystemPort() { return _systemPort; }$/;"	f	class:System
getSystemPtr	./cpu/checker/thread_context.hh	/^    System *getSystemPtr() { return actualTC->getSystemPtr(); }$/;"	f	class:CheckerThreadContext
getSystemPtr	./cpu/o3/thread_context.hh	/^    virtual System *getSystemPtr() { return cpu->system; }$/;"	f	class:O3ThreadContext
getSystemPtr	./cpu/simple_thread.hh	/^    System *getSystemPtr() { return system; }$/;"	f	class:SimpleThread
getSystemPtr	./cpu/thread_context.hh	/^    System *getSystemPtr() { return actualTC->getSystemPtr(); }$/;"	f	class:ProxyThreadContext
getTC	./cpu/cpuevent.hh	/^    ThreadContext* getTC() { return tc; }$/;"	f	class:CpuEvent
getTC	./cpu/o3/thread_state.hh	/^    ThreadContext *getTC() { return tc; }$/;"	f	struct:O3ThreadState
getTC	./cpu/simple_thread.hh	/^    ThreadContext *getTC() { return tc; }$/;"	f	class:SimpleThread
getTE	./arch/arm/tlb.cc	/^TLB::getTE(TlbEntry **te, RequestPtr req, ThreadContext *tc, Mode mode,$/;"	f	class:TLB
getTableAddr	./arch/x86/bios/intelmp.hh	/^    Addr getTableAddr()$/;"	f	class:X86ISA::IntelMP::FloatingPointer
getTableAddr	./arch/x86/bios/smbios.hh	/^    Addr getTableAddr()$/;"	f	class:X86ISA::SMBios::SMBiosTable
getTableWalker	./arch/arm/tlb.hh	/^    TableWalker *getTableWalker() { return tableWalker; }$/;"	f	class:ArmISA::TLB
getTag	./cpu/pred/btb.cc	/^DefaultBTB::getTag(Addr instPC)$/;"	f	class:DefaultBTB
getTagLatency	./mem/ruby/structures/CacheMemory.hh	/^    Cycles getTagLatency() const { return tagArray.getLatency(); }$/;"	f	class:CacheMemory
getTarget	./mem/cache/mshr.hh	/^    Target *getTarget()$/;"	f	class:MSHR
getTargetThread	./arch/alpha/mt.hh	/^getTargetThread(TC *tc)$/;"	f	namespace:AlphaISA
getTargetThread	./arch/mips/mt.hh	/^getTargetThread(TC *tc)$/;"	f	namespace:MipsISA
getTargetThread	./arch/sparc/mt.hh	/^getTargetThread(TC *tc)$/;"	f	namespace:SparcISA
getTe	./arch/arm/stage2_lookup.cc	/^Stage2LookUp::getTe(ThreadContext *tc, TlbEntry *destTe)$/;"	f	class:Stage2LookUp
getTgtFD	./sim/process.cc	/^Process::getTgtFD(int sim_fd)$/;"	f	class:Process
getThread	./sim/insttracer.hh	/^    ThreadContext *getThread() const { return thread; }$/;"	f	class:Trace::InstRecord
getThreadContext	./sim/arguments.hh	/^    ThreadContext *getThreadContext() const { return tc; }$/;"	f	class:Arguments
getThreadContext	./sim/system.hh	/^    ThreadContext *getThreadContext(ContextID tid)$/;"	f	class:System
getThreadEntries	./cpu/o3/rob.hh	/^    unsigned getThreadEntries(ThreadID tid)$/;"	f	class:ROB
getThrottle	./mem/ruby/network/simple/Switch.cc	/^Switch::getThrottle(LinkID link_number) const$/;"	f	class:Switch
getTick	./base/time.cc	/^Time::getTick() const$/;"	f	class:Time
getTime	./mem/ruby/slicc_interface/Message.hh	/^    Tick getTime() const { return m_time; }$/;"	f	class:Message
getTimers	./dev/arm/generic_timer.cc	/^GenericTimer::getTimers(int cpu_id)$/;"	f	class:GenericTimer
getTimingPacket	./mem/cache/cache.cc	/^Cache::getTimingPacket()$/;"	f	class:Cache
getTimingParams	./mem/drampower.cc	/^DRAMPower::getTimingParams(const DRAMCtrlParams* p)$/;"	f	class:DRAMPower
getTlb	./arch/arm/table_walker.hh	/^    TLB* getTlb() { return tlb; }$/;"	f	class:ArmISA::TableWalker
getTopFlit	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    getTopFlit(int vc)$/;"	f	class:InputUnit_d
getTopFlit	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    getTopFlit()$/;"	f	class:VirtualChannel_d
getTopFlit	./mem/ruby/network/garnet/fixed-pipeline/flitBuffer_d.hh	/^    getTopFlit()$/;"	f	class:flitBuffer_d
getTopFlit	./mem/ruby/network/garnet/flexible-pipeline/flitBuffer.cc	/^flitBuffer:: getTopFlit()$/;"	f	class:flitBuffer
getTotal	./mem/ruby/common/Histogram.hh	/^    int64_t getTotal() const { return m_sumSamples; }$/;"	f	class:Histogram
getTotal	./mem/ruby/profiler/AccessTraceForAddress.cc	/^AccessTraceForAddress::getTotal() const$/;"	f	class:AccessTraceForAddress
getTotal	./mem/ruby/profiler/StoreTrace.hh	/^    int getTotal() const { return m_total_samples; }$/;"	f	class:StoreTrace
getTotalCount	./mem/ruby/filters/BlockBloomFilter.cc	/^BlockBloomFilter::getTotalCount()$/;"	f	class:BlockBloomFilter
getTotalCount	./mem/ruby/filters/BulkBloomFilter.cc	/^BulkBloomFilter::getTotalCount()$/;"	f	class:BulkBloomFilter
getTotalCount	./mem/ruby/filters/H3BloomFilter.cc	/^H3BloomFilter::getTotalCount()$/;"	f	class:H3BloomFilter
getTotalCount	./mem/ruby/filters/LSB_CountingBloomFilter.cc	/^LSB_CountingBloomFilter::getTotalCount()$/;"	f	class:LSB_CountingBloomFilter
getTotalCount	./mem/ruby/filters/MultiBitSelBloomFilter.cc	/^MultiBitSelBloomFilter::getTotalCount()$/;"	f	class:MultiBitSelBloomFilter
getTotalCount	./mem/ruby/filters/MultiGrainBloomFilter.cc	/^MultiGrainBloomFilter::getTotalCount()$/;"	f	class:MultiGrainBloomFilter
getTotalCount	./mem/ruby/filters/NonCountingBloomFilter.cc	/^NonCountingBloomFilter::getTotalCount()$/;"	f	class:NonCountingBloomFilter
getTouchedBy	./mem/ruby/profiler/AccessTraceForAddress.hh	/^    int getTouchedBy() const { return m_touched_by.count(); }$/;"	f	class:AccessTraceForAddress
getTracer	./cpu/base.hh	/^    Trace::InstTracer * getTracer() { return tracer; }$/;"	f	class:BaseCPU
getTranslateLatency	./mem/request.hh	/^    Tick getTranslateLatency() const { return translateDelta; }$/;"	f	class:Request
getTreeDepth	./mem/stack_dist_calc.hh	/^    uint64_t getTreeDepth() const { return tree.size() - 1; }$/;"	f	class:StackDistCalc
getTsoLen	./dev/net/i8254xGBe_defs.hh	/^inline int getTsoLen(TxDesc *d) { assert(isType(d, TXD_ADVDATA)); return bits(d->d2, 63,46); }$/;"	f	namespace:iGbReg::TxdOp
getType	./dev/net/i8254xGBe_defs.hh	/^inline uint8_t getType(TxDesc *d) { return bits(d->d2, 23,20); }$/;"	f	namespace:iGbReg::TxdOp
getType	./mem/ruby/common/MachineID.hh	/^    MachineType getType() const { return type; }$/;"	f	struct:MachineID
getType	./mem/ruby/slicc_interface/AbstractController.hh	/^    MachineType getType() const { return m_machineID.getType(); }$/;"	f	class:AbstractController
getType	./mem/ruby/slicc_interface/RubyRequest.hh	/^    const RubyRequestType& getType() const { return m_Type; }$/;"	f	class:RubyRequest
getTypeLatencyHist	./mem/ruby/system/Sequencer.hh	/^    Stats::Histogram& getTypeLatencyHist(uint32_t t)$/;"	f	class:Sequencer
getUnit	./cpu/o3/fu_pool.cc	/^FUPool::getUnit(OpClass capability)$/;"	f	class:FUPool
getUnknownPages	./dev/arm/flash_device.cc	/^FlashDevice::getUnknownPages(uint32_t index)$/;"	f	class:FlashDevice
getUtilization	./mem/ruby/network/simple/Throttle.hh	/^    const Stats::Scalar & getUtilization() const$/;"	f	class:Throttle
getVCPUMMapSize	./cpu/kvm/vm.hh	/^    int getVCPUMMapSize() const { return vcpuMMapSize; }$/;"	f	class:Kvm
getVCpuEvents	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::getVCpuEvents(struct kvm_vcpu_events &events) const$/;"	f	class:X86KvmCPU
getVCsPerVnet	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    int getVCsPerVnet() const { return m_vcs_per_vnet; }$/;"	f	class:BaseGarnetNetwork
getVPENum	./arch/mips/isa.cc	/^ISA::getVPENum(ThreadID tid) const$/;"	f	class:MipsISA::ISA
getVaddr	./mem/request.hh	/^    getVaddr() const$/;"	f	class:Request
getValue	./base/inifile.cc	/^IniFile::Entry::getValue() const$/;"	f	class:IniFile::Entry
getValue	./python/m5/SimObject.py	/^    def getValue(self):$/;"	f
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:AddrRange
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:Bool
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:CheckedInt
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:Clock
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:Current
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:Cycles
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:Enum
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:EthernetAddr
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:Float
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:Frequency
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:IpAddress
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:IpNetmask
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:IpWithPort
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:Latency
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:MemoryBandwidth
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:NetworkBandwidth
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:NullSimObject
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:String
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:TickParamValue
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:Time
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:VectorParamValue
getValue	./python/m5/params.py	/^    def getValue(self):$/;"	m	class:Voltage
getVcLoad	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.hh	/^    const std::vector<unsigned int> & getVcLoad() const { return m_vc_load; }$/;"	f	class:NetworkLink_d
getVcLoad	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	/^    const std::vector<unsigned int> & getVcLoad() const { return m_vc_load; }$/;"	f	class:NetworkLink
getVector	./arch/arm/faults.cc	/^ArmFault::getVector(ThreadContext *tc)$/;"	f	class:ArmISA::ArmFault
getVector	./arch/x86/faults.hh	/^        virtual uint8_t getVector() const { return vector; }$/;"	f	class:X86ISA::X86FaultBase
getVector	./dev/x86/i8259.cc	/^X86ISA::I8259::getVector()$/;"	f	class:X86ISA::I8259
getVector64	./arch/arm/faults.cc	/^ArmFault::getVector64(ThreadContext *tc)$/;"	f	class:ArmISA::ArmFault
getVersion	./mem/ruby/slicc_interface/AbstractController.hh	/^    NodeID getVersion() const { return m_machineID.getNum(); }$/;"	f	class:AbstractController
getVictim	./mem/ruby/structures/LRUPolicy.cc	/^LRUPolicy::getVictim(int64_t set) const$/;"	f	class:LRUPolicy
getVictim	./mem/ruby/structures/PseudoLRUPolicy.cc	/^PseudoLRUPolicy::getVictim(int64_t set) const$/;"	f	class:PseudoLRUPolicy
getVirtProcNum	./arch/alpha/mt.hh	/^getVirtProcNum(TC *tc)$/;"	f	namespace:AlphaISA
getVirtProcNum	./arch/mips/mt.hh	/^getVirtProcNum(TC *tc)$/;"	f	namespace:MipsISA
getVirtProcNum	./arch/sparc/mt.hh	/^getVirtProcNum(TC *tc)$/;"	f	namespace:SparcISA
getVirtProxy	./cpu/checker/thread_context.hh	/^    FSTranslatingPortProxy &getVirtProxy()$/;"	f	class:CheckerThreadContext
getVirtProxy	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::getVirtProxy()$/;"	f	class:O3ThreadContext
getVirtProxy	./cpu/thread_context.hh	/^    FSTranslatingPortProxy &getVirtProxy() { return actualTC->getVirtProxy(); }$/;"	f	class:ProxyThreadContext
getVirtProxy	./cpu/thread_state.cc	/^ThreadState::getVirtProxy()$/;"	f	class:ThreadState
getVnet	./mem/ruby/slicc_interface/Message.hh	/^    int getVnet() const { return vnet; }$/;"	f	class:Message
getWalker	./arch/x86/tlb.cc	/^TLB::getWalker()$/;"	f	class:X86ISA::TLB
getWarmupEnabled	./mem/ruby/system/RubySystem.hh	/^    static bool getWarmupEnabled() { return m_warmup_enabled; }$/;"	f	class:RubySystem
getWayAllocationMax	./mem/cache/tags/base.hh	/^    virtual int getWayAllocationMax() const$/;"	f	class:BaseTags
getWayIndex	./mem/ruby/slicc_interface/AbstractCacheEntry.hh	/^    uint32_t getWayIndex() const { return m_way_index; }$/;"	f	class:AbstractCacheEntry
getWhen	./sim/insttracer.hh	/^    Tick getWhen() const { return when; }$/;"	f	class:Trace::InstRecord
getWindowSize	./cpu/trace/trace_cpu.hh	/^            uint32_t getWindowSize() const { return windowSize; }$/;"	f	class:TraceCPU::ElasticDataGen::InputStream
getWire	./cpu/timebuf.hh	/^    wire getWire(int idx)$/;"	f	class:TimeBuffer
getWritableCpuPort	./cpu/testers/rubytest/RubyTester.cc	/^RubyTester::getWritableCpuPort(int idx)$/;"	f	class:RubyTester
getXCRs	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::getXCRs(struct kvm_xcrs &regs) const$/;"	f	class:X86KvmCPU
getXSave	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::getXSave(struct kvm_xsave &xsave) const$/;"	f	class:X86KvmCPU
get_aggregate_fault_probability	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    bool get_aggregate_fault_probability(int temperature, $/;"	f	class:Router_d
get_block_index	./mem/ruby/filters/MultiGrainBloomFilter.cc	/^MultiGrainBloomFilter::get_block_index(Addr addr)$/;"	f	class:MultiGrainBloomFilter
get_buf_read_count	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    double get_buf_read_count(unsigned int vnet) const$/;"	f	class:InputUnit_d
get_buf_write_count	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    double get_buf_write_count(unsigned int vnet) const$/;"	f	class:InputUnit_d
get_config_as_dict	./python/m5/SimObject.py	/^    def get_config_as_dict(self):$/;"	f
get_config_as_dict	./python/m5/params.py	/^    def get_config_as_dict(self):$/;"	m	class:PortRef
get_config_as_dict	./python/m5/params.py	/^    def get_config_as_dict(self):$/;"	m	class:SimObjectVector
get_config_as_dict	./python/m5/params.py	/^    def get_config_as_dict(self):$/;"	m	class:Time
get_config_as_dict	./python/m5/params.py	/^    def get_config_as_dict(self):$/;"	m	class:VectorPortRef
get_creation_time	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    Cycles get_creation_time() const { return m_creation_time; }$/;"	f	class:flit
get_credit_cnt	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.hh	/^    get_credit_cnt(int vc)$/;"	f	class:OutputUnit_d
get_credit_count	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.hh	/^    int get_credit_count()          { return m_credit_count; }$/;"	f	class:OutVcState_d
get_crossbar_count	./mem/ruby/network/garnet/fixed-pipeline/Switch_d.hh	/^    inline double get_crossbar_count() { return m_crossbar_activity; }$/;"	f	class:Switch_d
get_data	./arch/generic/linux/threadinfo.hh	/^    get_data(const char *symbol, T &data)$/;"	f	class:Linux::ThreadInfo
get_delay	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    Cycles get_delay() { return src_delay; }$/;"	f	class:flit_d
get_delay	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    Cycles get_delay() const { return src_delay; }$/;"	f	class:flit
get_enqueue_time	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    get_enqueue_time(int invc)$/;"	f	class:InputUnit_d
get_enqueue_time	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    inline Cycles get_enqueue_time()          { return m_enqueue_time; }$/;"	f	class:VirtualChannel_d
get_enqueue_time	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    Cycles get_enqueue_time() { return m_enqueue_time; }$/;"	f	class:flit_d
get_fault_vector	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    bool get_fault_vector(int temperature, float fault_vector[]){ $/;"	f	class:Router_d
get_file	./arch/isa_parser.py	/^    def get_file(self, section):$/;"	m	class:ISAParser
get_global_arbit_count	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.hh	/^    get_global_arbit_count()$/;"	f	class:SWallocator_d
get_global_arbit_count	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.hh	/^    double get_global_arbit_count(unsigned int vnet) const$/;"	f	class:VCallocator_d
get_id	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.hh	/^    int get_id() const { return m_id; }$/;"	f	class:NetworkLink_d
get_id	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    int get_id()            { return m_id; }$/;"	f	class:Router_d
get_id	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    int get_id() { return m_id; }$/;"	f	class:flit_d
get_id	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	/^    int get_id() const { return m_id; }$/;"	f	class:NetworkLink
get_id	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    int get_id() const { return m_id; }$/;"	f	class:flit
get_index	./mem/ruby/filters/BlockBloomFilter.cc	/^BlockBloomFilter::get_index(Addr addr)$/;"	f	class:BlockBloomFilter
get_index	./mem/ruby/filters/BulkBloomFilter.cc	/^BulkBloomFilter::get_index(Addr addr)$/;"	f	class:BulkBloomFilter
get_index	./mem/ruby/filters/H3BloomFilter.cc	/^H3BloomFilter::get_index(Addr addr, int i)$/;"	f	class:H3BloomFilter
get_index	./mem/ruby/filters/LSB_CountingBloomFilter.cc	/^LSB_CountingBloomFilter::get_index(Addr addr)$/;"	f	class:LSB_CountingBloomFilter
get_index	./mem/ruby/filters/MultiBitSelBloomFilter.cc	/^MultiBitSelBloomFilter::get_index(Addr addr, int i)$/;"	f	class:MultiBitSelBloomFilter
get_index	./mem/ruby/filters/NonCountingBloomFilter.cc	/^NonCountingBloomFilter::get_index(Addr addr)$/;"	f	class:NonCountingBloomFilter
get_inlink_id	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    inline int get_inlink_id() { return m_in_link->get_id(); }$/;"	f	class:InputUnit_d
get_inport	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.hh	/^    int get_inport()                { return m_in_port; }$/;"	f	class:OutVcState_d
get_inputUnit_ref	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    std::vector<InputUnit_d *>& get_inputUnit_ref()   { return m_input_unit; }$/;"	f	class:Router_d
get_invc	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.hh	/^    int get_invc()                  { return m_in_vc; }$/;"	f	class:OutVcState_d
get_local_arbit_count	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.hh	/^    get_local_arbit_count()$/;"	f	class:SWallocator_d
get_local_arbit_count	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.hh	/^    double get_local_arbit_count(unsigned int vnet) const$/;"	f	class:VCallocator_d
get_msg_ptr	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    MsgPtr& get_msg_ptr() { return m_msg_ptr; }$/;"	f	class:flit_d
get_msg_ptr	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    MsgPtr& get_msg_ptr() { return m_msg_ptr; }$/;"	f	class:flit
get_name	./python/m5/SimObject.py	/^    def get_name(self):$/;"	f
get_name	./python/m5/params.py	/^    def get_name(self):$/;"	m	class:SimObjectVector
get_net_ptr	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    GarnetNetwork_d* get_net_ptr()                  { return m_network_ptr; }$/;"	f	class:Router_d
get_next_round_robin_vc	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::get_next_round_robin_vc(int vc) const$/;"	f	class:Router
get_node_type	./python/m5/util/dot_writer.py	/^def get_node_type(simNode):$/;"	f
get_num_inports	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    int get_num_inports()   { return m_input_unit.size(); }$/;"	f	class:Router_d
get_num_outports	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    int get_num_outports()  { return m_output_unit.size(); }$/;"	f	class:Router_d
get_num_vcs	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    int get_num_vcs()       { return m_num_vcs; }$/;"	f	class:Router_d
get_num_vnets	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    int get_num_vnets()     { return m_virtual_networks; }$/;"	f	class:Router_d
get_number	./base/cprintf.hh	/^    get_number(const T& data)$/;"	f	struct:cp::Print
get_number	./base/cprintf.hh	/^    get_number(int data)$/;"	f	struct:cp::Print
get_outlink_id	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.hh	/^    get_outlink_id()$/;"	f	class:OutputUnit_d
get_outport	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    int get_outport() {return m_outport; }$/;"	f	class:flit_d
get_outport	./mem/ruby/network/garnet/flexible-pipeline/InVcState.cc	/^InVcState::get_outport()$/;"	f	class:InVcState
get_outputUnit_ref	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    std::vector<OutputUnit_d *>& get_outputUnit_ref() { return m_output_unit; }$/;"	f	class:Router_d
get_outvc	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    get_outvc(int invc)$/;"	f	class:InputUnit_d
get_outvc	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    inline int get_outvc()                  { return m_output_vc; }$/;"	f	class:VirtualChannel_d
get_outvc	./mem/ruby/network/garnet/flexible-pipeline/InVcState.cc	/^InVcState::get_outvc()$/;"	f	class:InVcState
get_page_index	./mem/ruby/filters/MultiGrainBloomFilter.cc	/^MultiGrainBloomFilter::get_page_index(Addr addr)$/;"	f	class:MultiGrainBloomFilter
get_parent	./python/m5/SimObject.py	/^    def get_parent(self):$/;"	f
get_precision	./base/cprintf_formats.hh	/^    bool get_precision;$/;"	m	struct:cp::Format
get_route	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    get_route(int vc)$/;"	f	class:InputUnit_d
get_route	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    inline int get_route()                  { return route; }$/;"	f	class:VirtualChannel_d
get_size	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    int get_size() { return m_size; }$/;"	f	class:flit_d
get_size	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    int get_size() const { return m_size; }$/;"	f	class:flit
get_stage	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    std::pair<flit_stage, Cycles> get_stage() { return m_stage; }$/;"	f	class:flit_d
get_state	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    inline VC_state_type get_state()        { return m_vc_state.first; }$/;"	f	class:VirtualChannel_d
get_termcap	./python/m5/util/terminal.py	/^def get_termcap(use_colors = None):$/;"	f
get_time	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    Cycles get_time() { return m_time; }$/;"	f	class:flit_d
get_time	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    Cycles get_time() const { return m_time; }$/;"	f	class:flit
get_type	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    flit_type get_type() { return m_type; }$/;"	f	class:flit_d
get_type	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    flit_type get_type() const { return m_type; }$/;"	f	class:flit
get_type_colour	./python/m5/util/dot_writer.py	/^def get_type_colour(nodeType):$/;"	f
get_valid_vcs	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::get_valid_vcs(int invc)$/;"	f	class:Router
get_vc	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    int get_vc() { return m_vc; }$/;"	f	class:flit_d
get_vc	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    int get_vc() const { return m_vc; }$/;"	f	class:flit
get_vc_per_vnet	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    int get_vc_per_vnet()   { return m_vc_per_vnet; }$/;"	f	class:Router_d
get_vec	./arch/sparc/interrupts.hh	/^    get_vec(int int_num)$/;"	f	class:SparcISA::Interrupts
get_vnet	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.cc	/^NetworkInterface_d::get_vnet(int vc)$/;"	f	class:NetworkInterface_d
get_vnet	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.cc	/^SWallocator_d::get_vnet(int invc)$/;"	f	class:SWallocator_d
get_vnet	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.cc	/^VCallocator_d::get_vnet(int invc)$/;"	f	class:VCallocator_d
get_vnet	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    int get_vnet() { return m_vnet; }$/;"	f	class:flit_d
get_vnet	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::get_vnet(int vc) const$/;"	f	class:Router
get_vnet	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    int get_vnet() const { return m_vnet; }$/;"	f	class:flit
get_vnet_type	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.hh	/^    get_vnet_type(int vc)$/;"	f	class:GarnetNetwork_d
get_width	./base/cprintf_formats.hh	/^    bool get_width;$/;"	m	struct:cp::Format
getaddressconf	./kern/tru64/tru64_syscalls.hh	/^        getaddressconf = 214,$/;"	e	enum:SystemCalls::__anon102
getbyte	./base/remote_gdb.cc	/^BaseRemoteGDB::getbyte()$/;"	f	class:BaseRemoteGDB
getcwd	./sim/process.hh	/^    std::string getcwd() const { return cwd; }$/;"	f	class:LiveProcess
getcwdFunc	./sim/syscall_emul.cc	/^getcwdFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)$/;"	f
getdirentries	./kern/tru64/tru64_syscalls.hh	/^        getdirentries = 159,$/;"	e	enum:SystemCalls::__anon102
getdirentriesFunc	./kern/tru64/tru64.hh	/^    getdirentriesFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	class:Tru64
getdomainname	./kern/tru64/tru64_syscalls.hh	/^        getdomainname = 165,$/;"	e	enum:SystemCalls::__anon102
getdtablesize	./kern/tru64/tru64_syscalls.hh	/^        getdtablesize = 89,$/;"	e	enum:SystemCalls::__anon102
getegidFunc	./sim/syscall_emul.cc	/^getegidFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
geteuidFunc	./sim/syscall_emul.cc	/^geteuidFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
getfd	./base/socket.hh	/^    int getfd() const { return fd; }$/;"	f	class:ListenSocket
getfdStatic	./dev/net/tcp_iface.hh	/^    int getfdStatic() const { return fdStatic; }$/;"	f	class:TCPIface
getfh	./kern/tru64/tru64_syscalls.hh	/^        getfh = 164,$/;"	e	enum:SystemCalls::__anon102
getfsstat	./kern/tru64/tru64_syscalls.hh	/^        getfsstat = 229,$/;"	e	enum:SystemCalls::__anon102
getgid	./kern/tru64/tru64_syscalls.hh	/^        getgid = 47,$/;"	e	enum:SystemCalls::__anon102
getgidFunc	./sim/syscall_emul.cc	/^getgidFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
getgidPseudoFunc	./sim/syscall_emul.cc	/^getgidPseudoFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
getgroups	./kern/tru64/tru64_syscalls.hh	/^        getgroups = 79,$/;"	e	enum:SystemCalls::__anon102
gethostid	./kern/tru64/tru64_syscalls.hh	/^        gethostid = 142,$/;"	e	enum:SystemCalls::__anon102
gethostname	./kern/tru64/tru64_syscalls.hh	/^        gethostname = 87,$/;"	e	enum:SystemCalls::__anon102
gethostnameFunc	./sim/syscall_emul.cc	/^gethostnameFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)$/;"	f
getindex	./python/m5/proxy.py	/^    def getindex(obj, index):$/;"	m	class:BaseProxy
getindex	./python/m5/proxy.py	/^    getindex = staticmethod(getindex)$/;"	v	class:BaseProxy
getitimer	./kern/tru64/tru64_syscalls.hh	/^        getitimer = 86,$/;"	e	enum:SystemCalls::__anon102
getlogin	./kern/tru64/tru64_syscalls.hh	/^        getlogin = 49,$/;"	e	enum:SystemCalls::__anon102
getmnt	./kern/tru64/tru64_syscalls.hh	/^        getmnt = 184,$/;"	e	enum:SystemCalls::__anon102
getpagesize	./kern/tru64/tru64_syscalls.hh	/^        getpagesize = 64,$/;"	e	enum:SystemCalls::__anon102
getpagesizeFunc	./sim/syscall_emul.cc	/^getpagesizeFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)$/;"	f
getpeername	./kern/tru64/tru64_syscalls.hh	/^        getpeername = 31,$/;"	e	enum:SystemCalls::__anon102
getpgid	./kern/tru64/tru64_syscalls.hh	/^        getpgid = 233,$/;"	e	enum:SystemCalls::__anon102
getpgrp	./kern/tru64/tru64_syscalls.hh	/^        getpgrp = 63,$/;"	e	enum:SystemCalls::__anon102
getpid	./kern/tru64/tru64_syscalls.hh	/^        getpid = 20,$/;"	e	enum:SystemCalls::__anon102
getpidFunc	./sim/syscall_emul.cc	/^getpidFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
getpidPseudoFunc	./sim/syscall_emul.cc	/^getpidPseudoFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
getppidFunc	./sim/syscall_emul.cc	/^getppidFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
getpriority	./kern/tru64/tru64_syscalls.hh	/^        getpriority = 100,$/;"	e	enum:SystemCalls::__anon102
getresuidFunc	./arch/sparc/linux/syscalls.cc	/^getresuidFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)$/;"	f	namespace:SparcISA
getrlimit	./kern/tru64/tru64_syscalls.hh	/^        getrlimit = 144,$/;"	e	enum:SystemCalls::__anon102
getrlimitFunc	./sim/syscall_emul.hh	/^getrlimitFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
getrusage	./kern/tru64/tru64_syscalls.hh	/^        getrusage = 117,$/;"	e	enum:SystemCalls::__anon102
getrusageFunc	./sim/syscall_emul.hh	/^getrusageFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
getsid	./kern/tru64/tru64_syscalls.hh	/^        getsid = 234,$/;"	e	enum:SystemCalls::__anon102
getsize	./arch/alpha/tlb.hh	/^    int getsize() const { return table.size(); }$/;"	f	class:AlphaISA::TLB
getsize	./arch/arm/tlb.hh	/^    int getsize() const { return size; }$/;"	f	class:ArmISA::TLB
getsize	./arch/mips/tlb.hh	/^    int getsize() const { return size; }$/;"	f	class:MipsISA::TLB
getsize	./arch/power/tlb.hh	/^    getsize() const$/;"	f	class:PowerISA::TLB
getsockname	./kern/tru64/tru64_syscalls.hh	/^        getsockname = 32,$/;"	e	enum:SystemCalls::__anon102
getsockopt	./kern/tru64/tru64_syscalls.hh	/^        getsockopt = 118,$/;"	e	enum:SystemCalls::__anon102
getstack	./arch/alpha/stacktrace.hh	/^    const std::vector<Addr> &getstack() const { return stack; }$/;"	f	class:AlphaISA::StackTrace
getstack	./arch/arm/stacktrace.hh	/^    const std::vector<Addr> &getstack() const { return stack; }$/;"	f	class:ArmISA::StackTrace
getstack	./arch/mips/stacktrace.hh	/^    const std::vector<Addr> &getstack() const { return stack; }$/;"	f	class:MipsISA::StackTrace
getstack	./arch/power/stacktrace.hh	/^    getstack() const$/;"	f	class:PowerISA::StackTrace
getstack	./arch/sparc/stacktrace.hh	/^    const std::vector<Addr> &getstack() const { return stack; }$/;"	f	class:SparcISA::StackTrace
getstack	./arch/x86/stacktrace.hh	/^        const std::vector<Addr> &getstack() const { return stack; }$/;"	f	class:X86ISA::StackTrace
getsysinfo	./kern/tru64/tru64_syscalls.hh	/^        getsysinfo = 256,$/;"	e	enum:SystemCalls::__anon102
getsysinfoFunc	./arch/alpha/tru64/process.cc	/^getsysinfoFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
gettid	./cpu/kvm/perfevent.cc	/^PerfKvmCounter::gettid()$/;"	f	class:PerfKvmCounter
gettid	./cpu/kvm/timer.cc	/^gettid()$/;"	f	file:
gettimeofday	./kern/tru64/tru64_syscalls.hh	/^        gettimeofday = 116,$/;"	e	enum:SystemCalls::__anon102
gettimeofday64	./kern/tru64/tru64_syscalls.hh	/^        gettimeofday64 = 230,$/;"	e	enum:SystemCalls::__anon102
gettimeofdayFunc	./sim/syscall_emul.hh	/^gettimeofdayFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
getuid	./kern/tru64/tru64_syscalls.hh	/^        getuid = 24,$/;"	e	enum:SystemCalls::__anon102
getuidFunc	./sim/syscall_emul.cc	/^getuidFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
getuidPseudoFunc	./sim/syscall_emul.cc	/^getuidPseudoFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
gibi	./python/m5/util/convert.py	/^gibi = mebi * 1024$/;"	v
gic	./dev/arm/Gic.py	/^    gic = Param.BaseGic(Parent.any, "Gic on which to trigger interrupts")$/;"	v	class:Gicv2m
gic	./dev/arm/RealView.py	/^    gic = Param.BaseGic(Parent.any, "GIC to use for interrupting")$/;"	v	class:GenericTimer
gic	./dev/arm/RealView.py	/^    gic = Param.BaseGic(Parent.any, "GIC to use for interrupting")$/;"	v	class:GenericTimerMem
gic	./dev/arm/RealView.py	/^    gic = Param.BaseGic(Parent.any, "Gic to use for interrupting")$/;"	v	class:AmbaDmaDevice
gic	./dev/arm/RealView.py	/^    gic = Param.BaseGic(Parent.any, "Gic to use for interrupting")$/;"	v	class:AmbaIntDevice
gic	./dev/arm/RealView.py	/^    gic = Param.BaseGic(Parent.any, "Gic to use for interrupting")$/;"	v	class:CpuLocalTimer
gic	./dev/arm/RealView.py	/^    gic = Param.BaseGic(Parent.any, "Gic to use for interrupting")$/;"	v	class:Pl011
gic	./dev/arm/RealView.py	/^    gic = Param.BaseGic(Parent.any, "Gic to use for interrupting")$/;"	v	class:Sp804
gic	./dev/arm/RealView.py	/^    gic = Param.BaseGic(Parent.any, "Gic to use for interrupting")$/;"	v	class:VGic
gic	./dev/arm/RealView.py	/^    gic = Pl390()$/;"	v	class:RealViewPBX
gic	./dev/arm/RealView.py	/^    gic = Pl390(dist_addr=0x10041000, cpu_addr=0x10040000)$/;"	v	class:RealViewEB
gic	./dev/arm/RealView.py	/^    gic = Pl390(dist_addr=0x2C001000, cpu_addr=0x2C002000)$/;"	v	class:VExpress_EMM
gic	./dev/arm/UFSHostDevice.py	/^    gic = Param.BaseGic(Parent.any, "Gic to use for interrupting")$/;"	v	class:UFSHostDevice
gic	./dev/arm/amba_device.hh	/^    BaseGic  *gic;$/;"	m	class:AmbaDmaDevice
gic	./dev/arm/amba_device.hh	/^    BaseGic *gic;$/;"	m	class:AmbaIntDevice
gic	./dev/arm/generic_timer.hh	/^    BaseGic *const gic;$/;"	m	class:GenericTimer
gic	./dev/arm/gic_v2m.hh	/^    BaseGic *gic;$/;"	m	class:Gicv2m
gic	./dev/arm/pl011.hh	/^    BaseGic * const gic;$/;"	m	class:Pl011
gic	./dev/arm/realview.hh	/^    BaseGic *gic;$/;"	m	class:RealView
gic	./dev/arm/timer_cpulocal.hh	/^    BaseGic *gic;$/;"	m	class:CpuLocalTimer
gic	./dev/arm/timer_sp804.hh	/^    BaseGic *gic;$/;"	m	class:Sp804
gic	./dev/arm/ufs_device.hh	/^    BaseGic* gic;$/;"	m	class:UFSHostDevice
gic	./dev/arm/vgic.hh	/^    BaseGic *gic;$/;"	m	class:VGic
gic_cpu_addr	./arch/arm/ArmSystem.py	/^    gic_cpu_addr = Param.Addr(0, "Addres of the GIC CPU interface")$/;"	v	class:ArmSystem
gid	./sim/Process.py	/^    gid = Param.Int(100, 'group id')$/;"	v	class:LiveProcess
gid	./sim/process.hh	/^    inline uint64_t gid() {return __gid;}$/;"	f	class:LiveProcess
gid_t	./kern/freebsd/freebsd.hh	/^    typedef uint32_t gid_t;$/;"	t	class:FreeBSD
gid_t	./kern/linux/linux.hh	/^    typedef uint32_t gid_t;$/;"	t	class:Linux
gid_t	./kern/solaris/solaris.hh	/^    typedef int32_t gid_t;$/;"	t	class:Solaris
gid_t	./kern/tru64/tru64.hh	/^    typedef uint32_t gid_t;$/;"	t	class:Tru64
giga	./python/m5/util/convert.py	/^giga = 1.0e9$/;"	v
gl	./arch/sparc/isa.hh	/^    uint8_t gl;             \/\/ Global level register$/;"	m	class:SparcISA::ISA
glevel	./base/loader/coff_sym.h	/^    unsigned glevel : 2;        \/* level this file was compiled with *\/$/;"	m	struct:ecoff_fdr
global	./arch/arm/pagetable.hh	/^    bool global;$/;"	m	struct:ArmISA::TlbEntry
global	./arch/arm/table_walker.hh	/^        bool global(WalkerState *currState) const$/;"	f	class:ArmISA::TableWalker::L1Descriptor
global	./arch/arm/table_walker.hh	/^        bool global(WalkerState *currState) const$/;"	f	class:ArmISA::TableWalker::L2Descriptor
global	./arch/arm/table_walker.hh	/^        bool global(WalkerState *currState) const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
global	./arch/x86/pagetable.hh	/^        bool global;$/;"	m	struct:X86ISA::TlbEntry
globalBarrier	./sim/global_event.hh	/^        bool globalBarrier()$/;"	f	class:BaseGlobalEvent::BarrierEvent
globalCtrBits	./cpu/pred/BranchPredictor.py	/^    globalCtrBits = Param.Unsigned(2, "Bits per counter")$/;"	v	class:BiModeBP
globalCtrBits	./cpu/pred/BranchPredictor.py	/^    globalCtrBits = Param.Unsigned(2, "Bits per counter")$/;"	v	class:TournamentBP
globalCtrBits	./cpu/pred/bi_mode.hh	/^    unsigned globalCtrBits;$/;"	m	class:BiModeBP
globalCtrBits	./cpu/pred/tournament.hh	/^    unsigned globalCtrBits;$/;"	m	class:TournamentBP
globalCtrs	./cpu/pred/tournament.hh	/^    std::vector<SatCounter> globalCtrs;$/;"	m	class:TournamentBP
globalEvent	./sim/eventq.hh	/^    virtual BaseGlobalEvent *globalEvent() { return NULL; }$/;"	f	class:Event
globalEvent	./sim/global_event.hh	/^        virtual BaseGlobalEvent *globalEvent() { return _globalEvent; }$/;"	f	class:BaseGlobalEvent::BarrierEvent
globalHistory	./cpu/pred/tournament.hh	/^        unsigned globalHistory;$/;"	m	struct:TournamentBP::BPHistory
globalHistory	./cpu/pred/tournament.hh	/^    unsigned globalHistory;$/;"	m	class:TournamentBP
globalHistoryBits	./cpu/pred/bi_mode.hh	/^    unsigned globalHistoryBits;$/;"	m	class:BiModeBP
globalHistoryBits	./cpu/pred/tournament.hh	/^    unsigned globalHistoryBits;$/;"	m	class:TournamentBP
globalHistoryMask	./cpu/pred/bi_mode.hh	/^    unsigned globalHistoryMask;$/;"	m	class:BiModeBP
globalHistoryMask	./cpu/pred/tournament.hh	/^    unsigned globalHistoryMask;$/;"	m	class:TournamentBP
globalHistoryReg	./cpu/pred/bi_mode.hh	/^        unsigned globalHistoryReg;$/;"	m	struct:BiModeBP::BPHistory
globalHistoryReg	./cpu/pred/bi_mode.hh	/^    unsigned globalHistoryReg;$/;"	m	class:BiModeBP
globalIdx	./cpu/testers/rubytest/RubyTester.hh	/^        PortID globalIdx;$/;"	m	class:RubyTester::CpuPort
globalLock	./sim/drain.hh	/^    mutable std::mutex globalLock;$/;"	m	class:DrainManager
globalPointer	./base/loader/object_file.hh	/^    Addr globalPointer() const { return globalPtr; }$/;"	f	class:ObjectFile
globalPredTaken	./cpu/pred/tournament.hh	/^        bool globalPredTaken;$/;"	m	struct:TournamentBP::BPHistory
globalPredictorSize	./cpu/pred/BranchPredictor.py	/^    globalPredictorSize = Param.Unsigned(8192, "Size of global predictor")$/;"	v	class:BiModeBP
globalPredictorSize	./cpu/pred/BranchPredictor.py	/^    globalPredictorSize = Param.Unsigned(8192, "Size of global predictor")$/;"	v	class:TournamentBP
globalPredictorSize	./cpu/pred/bi_mode.hh	/^    unsigned globalPredictorSize;$/;"	m	class:BiModeBP
globalPredictorSize	./cpu/pred/tournament.hh	/^    unsigned globalPredictorSize;$/;"	m	class:TournamentBP
globalPtr	./base/loader/object_file.hh	/^    Addr globalPtr;$/;"	m	class:ObjectFile
globalQMutex	./sim/global_event.cc	/^std::mutex BaseGlobalEvent::globalQMutex;$/;"	m	class:BaseGlobalEvent	file:
globalQMutex	./sim/global_event.hh	/^      static std::mutex globalQMutex;$/;"	m	class:BaseGlobalEvent
globalSeqNum	./cpu/o3/cpu.hh	/^    InstSeqNum globalSeqNum;\/\/[Impl::MaxThreads];$/;"	m	class:FullO3CPU
globalThreshold	./cpu/pred/tournament.hh	/^    unsigned globalThreshold;$/;"	m	class:TournamentBP
globalUsed	./cpu/pred/tournament.hh	/^        bool globalUsed;$/;"	m	struct:TournamentBP::BPHistory
global_dirent	./kern/tru64/tru64.hh	/^typedef struct dirent global_dirent;$/;"	t	typeref:struct:dirent
global_stat	./kern/tru64/tru64.hh	/^typedef struct stat global_stat;$/;"	t	typeref:struct:stat
global_statfs	./kern/tru64/tru64.hh	/^typedef struct statfs global_statfs;$/;"	t	typeref:struct:statfs
globals	./python/m5/util/code_formatter.py	/^    globals = True$/;"	v	class:code_formatter
globals	./sim/serialize.cc	/^Globals globals;$/;"	v
goesAfter	./base/trie.hh	/^    goesAfter(Node **parent, Node *kid, Key key, Key new_mask)$/;"	f	class:Trie
gotAddrRanges	./mem/ruby/system/RubyPort.hh	/^    unsigned int gotAddrRanges;$/;"	m	class:RubyPort
gotAddrRanges	./mem/xbar.hh	/^    std::vector<bool> gotAddrRanges;$/;"	m	class:BaseXBar
gotAllAddrRanges	./mem/xbar.hh	/^    bool gotAllAddrRanges;$/;"	m	class:BaseXBar
gotWakeup	./cpu/base.hh	/^    bool gotWakeup;$/;"	m	struct:AddressMonitor
gp_prologue	./base/loader/coff_sym.h	/^    unsigned gp_prologue : 8; \/* byte size of GP prologue *\/$/;"	m	struct:pdr
gp_used	./base/loader/coff_sym.h	/^    unsigned gp_used : 1;       \/* true if the procedure uses GP *\/$/;"	m	struct:pdr
gp_value	./arch/alpha/aout_machdep.h	/^    uint64_t    gp_value;       \/\/\/< global pointer reg value$/;"	m	struct:aout_exechdr
gpio0_fake	./dev/arm/RealView.py	/^    gpio0_fake    = AmbaFake(pio_addr=0x10013000)$/;"	v	class:RealViewEB
gpio0_fake	./dev/arm/RealView.py	/^    gpio0_fake    = AmbaFake(pio_addr=0x10013000)$/;"	v	class:RealViewPBX
gpio1_fake	./dev/arm/RealView.py	/^    gpio1_fake    = AmbaFake(pio_addr=0x10014000)$/;"	v	class:RealViewEB
gpio1_fake	./dev/arm/RealView.py	/^    gpio1_fake    = AmbaFake(pio_addr=0x10014000)$/;"	v	class:RealViewPBX
gpio2_fake	./dev/arm/RealView.py	/^    gpio2_fake    = AmbaFake(pio_addr=0x10015000)$/;"	v	class:RealViewEB
gpio2_fake	./dev/arm/RealView.py	/^    gpio2_fake    = AmbaFake(pio_addr=0x10015000)$/;"	v	class:RealViewPBX
gpior	./dev/net/ns_gige.hh	/^    uint32_t    gpior;$/;"	m	struct:dp_regs
gpr	./arch/alpha/remote_gdb.hh	/^            uint64_t gpr[32];$/;"	m	struct:AlphaISA::RemoteGDB::AlphaGdbRegCache::__anon48
gpr	./arch/arm/remote_gdb.hh	/^          uint32_t gpr[16];$/;"	m	struct:ArmISA::RemoteGDB::AArch32GdbRegCache::__anon67
gpr	./arch/mips/remote_gdb.hh	/^            uint32_t gpr[32];$/;"	m	struct:MipsISA::RemoteGDB::MipsGdbRegCache::__anon83
gpr	./arch/power/remote_gdb.hh	/^            uint32_t gpr[NumIntArchRegs];$/;"	m	struct:PowerISA::RemoteGDB::PowerGdbRegCache::__anon53
gpr	./arch/sparc/remote_gdb.hh	/^            uint32_t gpr[32];$/;"	m	struct:SparcISA::RemoteGDB::SPARCGdbRegCache::__anon42
gpr	./arch/sparc/remote_gdb.hh	/^            uint64_t gpr[32];$/;"	m	struct:SparcISA::RemoteGDB::SPARC64GdbRegCache::__anon43
gprmask	./arch/alpha/aout_machdep.h	/^    uint32_t    gprmask;        \/\/\/< GPR mask (unused, AFAIK)$/;"	m	struct:aout_exechdr
gpuPanic	./dev/arm/gpu_nomali.cc	/^NoMaliGpu::gpuPanic(nomali_error_t err, const char *msg)$/;"	f	class:NoMaliGpu
gpu_type	./dev/arm/NoMali.py	/^    gpu_type = Param.NoMaliGpuType("T760", "GPU type")$/;"	v	class:NoMaliGpu
grainSize	./arch/arm/table_walker.hh	/^        GrainSize grainSize;$/;"	m	class:ArmISA::TableWalker::LongDescriptor
grant_vc	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    grant_vc(int in_vc, int out_vc, Cycles curTime)$/;"	f	class:InputUnit_d
grant_vc	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.cc	/^VirtualChannel_d::grant_vc(int out_vc, Cycles curTime)$/;"	f	class:VirtualChannel_d
grant_vc	./mem/ruby/network/garnet/flexible-pipeline/FlexibleConsumer.hh	/^    virtual void grant_vc(int out_port, int vc, Cycles grant_time) {}$/;"	f	class:FlexibleConsumer
grant_vc	./mem/ruby/network/garnet/flexible-pipeline/InVcState.cc	/^InVcState::grant_vc(int out_vc, Cycles grant_time)$/;"	f	class:InVcState
grant_vc	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.cc	/^NetworkInterface::grant_vc(int out_port, int vc, Cycles grant_time)$/;"	f	class:NetworkInterface
grant_vc	./mem/ruby/network/garnet/flexible-pipeline/OutVcState.cc	/^OutVcState::grant_vc(Cycles grant_time)$/;"	f	class:OutVcState
grant_vc	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::grant_vc(int out_port, int vc, Cycles grant_time)$/;"	f	class:Router
grant_vc_link	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.cc	/^NetworkLink::grant_vc_link(int vc, Cycles grant_time)$/;"	f	class:NetworkLink
granularity	./arch/x86/regs/misc.hh	/^        Bitfield<6> granularity;$/;"	m	namespace:X86ISA
granularity	./base/addr_range.hh	/^    uint64_t granularity() const$/;"	f	class:AddrRange
greater	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    greater(flit_d* n1, flit_d* n2)$/;"	f	class:flit_d
greater	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    greater(flit* n1, flit* n2)$/;"	f	class:flit
green	./base/bitmap.hh	/^        uint8_t green;$/;"	m	struct:Bitmap::BmpPixel32
green	./base/framebuffer.hh	/^    uint8_t green;$/;"	m	struct:Pixel
green_select	./dev/arm/hdlcd.hh	/^    ColorSelectReg green_select;    \/**< Green color select register *\/$/;"	m	class:HDLcd
greenmax	./base/vnc/vncinput.hh	/^        uint16_t greenmax;$/;"	m	struct:VncInput::PixelFormat
greenshift	./base/vnc/vncinput.hh	/^        uint8_t greenshift;$/;"	m	struct:VncInput::PixelFormat
group	./python/m5/util/jobfile.py	/^    def group(self, name, desc, **kwargs):$/;"	m	class:Configuration
groups	./python/m5/util/jobfile.py	/^    def groups(self):$/;"	m	class:Configuration
grow_convert	./base/statistics.cc	/^HistStor::grow_convert()$/;"	f	class:Stats::HistStor
grow_out	./base/statistics.cc	/^HistStor::grow_out()$/;"	f	class:Stats::HistStor
grow_up	./base/statistics.cc	/^HistStor::grow_up()$/;"	f	class:Stats::HistStor
gs	./arch/mips/mt_constants.hh	/^    Bitfield<28>     gs;$/;"	m	namespace:MipsISA
gs	./arch/x86/remote_gdb.hh	/^          uint32_t gs;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
gs	./arch/x86/remote_gdb.hh	/^          uint32_t gs;$/;"	m	struct:X86ISA::RemoteGDB::X86GdbRegCache::__anon57
gsize	./kern/tru64/tru64.hh	/^        size_t  gsize;          \/\/!< green zone size$/;"	m	struct:Tru64::vm_stack
gsr	./arch/sparc/isa.hh	/^    uint64_t gsr;           \/\/ General Status Register$/;"	m	class:SparcISA::ISA
gt	./arch/power/miscregs.hh	/^        Bitfield<30> gt;$/;"	m	namespace:PowerISA
gtobe	./sim/byteswap.hh	/^    inline T gtobe(T value) {return letobe(value);}$/;"	f	namespace:LittleEndianGuest
gtobe	./sim/byteswap.hh	/^    inline T gtobe(T value) {return value;}$/;"	f	namespace:BigEndianGuest
gtoh	./sim/byteswap.hh	/^    inline T gtoh(T value) {return betoh(value);}$/;"	f	namespace:BigEndianGuest
gtoh	./sim/byteswap.hh	/^    inline T gtoh(T value) {return letoh(value);}$/;"	f	namespace:LittleEndianGuest
gtole	./sim/byteswap.hh	/^    inline T gtole(T value) {return betole(value);}$/;"	f	namespace:BigEndianGuest
gtole	./sim/byteswap.hh	/^    inline T gtole(T value) {return value;}$/;"	f	namespace:LittleEndianGuest
guestFeatures	./dev/virtio/base.hh	/^    FeatureBits guestFeatures;$/;"	m	class:VirtIODeviceBase
gzipStream	./proto/protoio.hh	/^    google::protobuf::io::GzipInputStream* gzipStream;$/;"	m	class:ProtoInputStream
gzipStream	./proto/protoio.hh	/^    google::protobuf::io::GzipOutputStream* gzipStream;$/;"	m	class:ProtoOutputStream
h	./arch/mips/mt_constants.hh	/^    Bitfield<0> h;$/;"	m	namespace:MipsISA
h01	./unittest/stattest.cc	/^    Histogram h01;$/;"	m	struct:StatTest	file:
h02	./unittest/stattest.cc	/^    Histogram h02;$/;"	m	struct:StatTest	file:
h03	./unittest/stattest.cc	/^    Histogram h03;$/;"	m	struct:StatTest	file:
h04	./unittest/stattest.cc	/^    Histogram h04;$/;"	m	struct:StatTest	file:
h05	./unittest/stattest.cc	/^    Histogram h05;$/;"	m	struct:StatTest	file:
h06	./unittest/stattest.cc	/^    Histogram h06;$/;"	m	struct:StatTest	file:
h07	./unittest/stattest.cc	/^    Histogram h07;$/;"	m	struct:StatTest	file:
h08	./unittest/stattest.cc	/^    Histogram h08;$/;"	m	struct:StatTest	file:
h09	./unittest/stattest.cc	/^    Histogram h09;$/;"	m	struct:StatTest	file:
h10	./unittest/stattest.cc	/^    Histogram h10;$/;"	m	struct:StatTest	file:
h11	./unittest/stattest.cc	/^    Histogram h11;$/;"	m	struct:StatTest	file:
h12	./unittest/stattest.cc	/^    Histogram h12;$/;"	m	struct:StatTest	file:
hBackPorch	./dev/pixelpump.hh	/^    unsigned hBackPorch;$/;"	m	struct:DisplayTimings
hFrontPorch	./dev/pixelpump.hh	/^    unsigned hFrontPorch;$/;"	m	struct:DisplayTimings
hSTickCompare	./arch/sparc/isa.hh	/^    HSTickCompareEvent *hSTickCompare;$/;"	m	class:SparcISA::ISA
hSync	./dev/pixelpump.hh	/^    unsigned hSync;$/;"	m	struct:DisplayTimings
h_back_porch	./dev/arm/hdlcd.hh	/^    TimingReg h_back_porch;         \/**< Horizontal back porch width register *\/$/;"	m	class:HDLcd
h_data	./dev/arm/hdlcd.hh	/^    TimingReg h_data;               \/**< Horizontal data width register *\/$/;"	m	class:HDLcd
h_front_porch	./dev/arm/hdlcd.hh	/^    TimingReg h_front_porch;        \/**< Horizontal front porch width reg *\/$/;"	m	class:HDLcd
h_sync	./dev/arm/hdlcd.hh	/^    TimingReg h_sync;               \/**< Horizontal sync width register *\/$/;"	m	class:HDLcd
hack	./base/misc.hh	211;"	d
hack_once	./base/misc.hh	218;"	d
hack_verbose	./base/misc.cc	/^bool hack_verbose = false;$/;"	v
halt	./arch/alpha/osfpal.hh	/^        halt = 0x00,$/;"	e	enum:PAL::__anon50
halt	./arch/mips/dt_constants.hh	/^    Bitfield<26>     halt;$/;"	m	namespace:MipsISA
halt	./cpu/checker/thread_context.hh	/^    void halt() { actualTC->halt(); }$/;"	f	class:CheckerThreadContext
halt	./cpu/o3/cpu.hh	/^    void halt() { panic("Halt not implemented!\\n"); }$/;"	f	class:FullO3CPU
halt	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::halt()$/;"	f	class:O3ThreadContext
halt	./cpu/simple_thread.cc	/^SimpleThread::halt()$/;"	f	class:SimpleThread
halt	./cpu/thread_context.hh	/^    void halt() { actualTC->halt(); }$/;"	f	class:ProxyThreadContext
haltContext	./cpu/base.hh	/^    virtual void haltContext(ThreadID thread_num) {}$/;"	f	class:BaseCPU
haltContext	./cpu/kvm/base.cc	/^BaseKvmCPU::haltContext(ThreadID thread_num)$/;"	f	class:BaseKvmCPU
haltContext	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::haltContext(ThreadID tid)$/;"	f	class:FullO3CPU
haltContext	./cpu/simple/base.cc	/^BaseSimpleCPU::haltContext(ThreadID thread_num)$/;"	f	class:BaseSimpleCPU
haltThread	./arch/mips/mt.hh	/^haltThread(TC *tc)$/;"	f	namespace:MipsISA
handle	./arch/x86/bios/smbios.hh	/^    uint16_t handle;$/;"	m	class:X86ISA::SMBios::SMBiosStructure
handleAsyncInsertions	./sim/eventq.cc	/^EventQueue::handleAsyncInsertions()$/;"	f	class:EventQueue
handleEOI	./dev/x86/i8259.cc	/^X86ISA::I8259::handleEOI(int line)$/;"	f	class:X86ISA::I8259
handleError	./cpu/checker/cpu.hh	/^    void handleError()$/;"	f	class:CheckerCPU
handleError	./cpu/checker/cpu.hh	/^    void handleError(DynInstPtr &inst)$/;"	f	class:Checker
handleEvent	./arch/arm/pmu.cc	/^PMU::handleEvent(CounterId id, uint64_t delta)$/;"	f	class:ArmISA::PMU
handleEvent	./dev/alpha/tsunami_io.hh	/^        void handleEvent()$/;"	f	class:TsunamiIO::RTC
handleEvent	./dev/mc146818.hh	/^    virtual void handleEvent()$/;"	f	class:MC146818
handleEvent	./dev/mips/malta_io.hh	/^        void handleEvent()$/;"	f	class:MaltaIO::RTC
handleEvent	./dev/x86/cmos.cc	/^X86ISA::Cmos::X86RTC::handleEvent()$/;"	f	class:X86ISA::Cmos::X86RTC
handleFill	./mem/cache/cache.cc	/^Cache::handleFill(PacketPtr pkt, CacheBlk *blk, PacketList &writebacks,$/;"	f	class:Cache
handleGenericIprRead	./arch/generic/mmapped_ipr.cc	/^GenericISA::handleGenericIprRead(ThreadContext *xc, Packet *pkt)$/;"	f	class:GenericISA
handleGenericIprWrite	./arch/generic/mmapped_ipr.cc	/^GenericISA::handleGenericIprWrite(ThreadContext *xc, Packet *pkt)$/;"	f	class:GenericISA
handleIOMiscReg32	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::handleIOMiscReg32(int miscreg)$/;"	f	class:X86KvmCPU
handleInterrupt	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::handleInterrupt()$/;"	f	class:DefaultCommit
handleIprRead	./arch/generic/mmapped_ipr.hh	/^    handleIprRead(ThreadContext *xc, Packet *pkt)$/;"	f	namespace:GenericISA
handleIprRead	./arch/sparc/mmapped_ipr.hh	/^handleIprRead(ThreadContext *xc, Packet *pkt)$/;"	f	namespace:SparcISA
handleIprRead	./arch/x86/mmapped_ipr.hh	/^    handleIprRead(ThreadContext *xc, Packet *pkt)$/;"	f	namespace:X86ISA
handleIprWrite	./arch/generic/mmapped_ipr.hh	/^    handleIprWrite(ThreadContext *xc, Packet *pkt)$/;"	f	namespace:GenericISA
handleIprWrite	./arch/sparc/mmapped_ipr.hh	/^handleIprWrite(ThreadContext *xc, Packet *pkt)$/;"	f	namespace:SparcISA
handleIprWrite	./arch/x86/mmapped_ipr.hh	/^    handleIprWrite(ThreadContext *xc, Packet *pkt)$/;"	f	namespace:X86ISA
handleKvmExit	./cpu/kvm/base.cc	/^BaseKvmCPU::handleKvmExit()$/;"	f	class:BaseKvmCPU
handleKvmExitException	./cpu/kvm/base.cc	/^BaseKvmCPU::handleKvmExitException()$/;"	f	class:BaseKvmCPU
handleKvmExitFailEntry	./cpu/kvm/base.cc	/^BaseKvmCPU::handleKvmExitFailEntry()$/;"	f	class:BaseKvmCPU
handleKvmExitHypercall	./cpu/kvm/base.cc	/^BaseKvmCPU::handleKvmExitHypercall()$/;"	f	class:BaseKvmCPU
handleKvmExitIO	./cpu/kvm/base.cc	/^BaseKvmCPU::handleKvmExitIO()$/;"	f	class:BaseKvmCPU
handleKvmExitIO	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::handleKvmExitIO()$/;"	f	class:X86KvmCPU
handleKvmExitIRQWindowOpen	./cpu/kvm/base.cc	/^BaseKvmCPU::handleKvmExitIRQWindowOpen()$/;"	f	class:BaseKvmCPU
handleKvmExitIRQWindowOpen	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::handleKvmExitIRQWindowOpen()$/;"	f	class:X86KvmCPU
handleKvmExitUnknown	./cpu/kvm/base.cc	/^BaseKvmCPU::handleKvmExitUnknown()$/;"	f	class:BaseKvmCPU
handleLlsc	./mem/ruby/system/Sequencer.cc	/^Sequencer::handleLlsc(Addr address, SequencerRequest* request)$/;"	f	class:Sequencer
handleLockedRead	./arch/alpha/locked_mem.hh	/^handleLockedRead(XC *xc, Request *req)$/;"	f	namespace:AlphaISA
handleLockedRead	./arch/arm/locked_mem.hh	/^handleLockedRead(XC *xc, Request *req)$/;"	f	namespace:ArmISA
handleLockedRead	./arch/mips/locked_mem.hh	/^handleLockedRead(XC *xc, Request *req)$/;"	f	namespace:MipsISA
handleLockedRead	./arch/power/locked_mem.hh	/^handleLockedRead(XC *xc, Request *req)$/;"	f	namespace:PowerISA
handleLockedRead	./arch/sparc/locked_mem.hh	/^handleLockedRead(XC *xc, Request *req)$/;"	f	namespace:SparcISA
handleLockedRead	./arch/x86/locked_mem.hh	/^    handleLockedRead(XC *xc, Request *req)$/;"	f	namespace:X86ISA
handleLockedSnoop	./arch/alpha/locked_mem.hh	/^handleLockedSnoop(XC *xc, PacketPtr pkt, Addr cacheBlockMask)$/;"	f	namespace:AlphaISA
handleLockedSnoop	./arch/arm/locked_mem.hh	/^handleLockedSnoop(XC *xc, PacketPtr pkt, Addr cacheBlockMask)$/;"	f	namespace:ArmISA
handleLockedSnoop	./arch/mips/locked_mem.hh	/^handleLockedSnoop(XC *xc, PacketPtr pkt, Addr cacheBlockMask)$/;"	f	namespace:MipsISA
handleLockedSnoop	./arch/power/locked_mem.hh	/^handleLockedSnoop(XC *xc, PacketPtr pkt, Addr cacheBlockMask)$/;"	f	namespace:PowerISA
handleLockedSnoop	./arch/sparc/locked_mem.hh	/^handleLockedSnoop(XC *xc, PacketPtr pkt, Addr cacheBlockMask)$/;"	f	namespace:SparcISA
handleLockedSnoop	./arch/x86/locked_mem.hh	/^    handleLockedSnoop(XC *xc, PacketPtr pkt, Addr cacheBlockMask)$/;"	f	namespace:X86ISA
handleLockedSnoopHit	./arch/alpha/locked_mem.hh	/^handleLockedSnoopHit(XC *xc)$/;"	f	namespace:AlphaISA
handleLockedSnoopHit	./arch/arm/locked_mem.hh	/^handleLockedSnoopHit(XC *xc)$/;"	f	namespace:ArmISA
handleLockedSnoopHit	./arch/mips/locked_mem.hh	/^handleLockedSnoopHit(XC *xc)$/;"	f	namespace:MipsISA
handleLockedSnoopHit	./arch/power/locked_mem.hh	/^handleLockedSnoopHit(XC *xc)$/;"	f	namespace:PowerISA
handleLockedSnoopHit	./arch/sparc/locked_mem.hh	/^handleLockedSnoopHit(XC *xc)$/;"	f	namespace:SparcISA
handleLockedSnoopHit	./arch/x86/locked_mem.hh	/^    handleLockedSnoopHit(XC *xc)$/;"	f	namespace:X86ISA
handleLockedWrite	./arch/alpha/locked_mem.hh	/^handleLockedWrite(XC *xc, Request *req, Addr cacheBlockMask)$/;"	f	namespace:AlphaISA
handleLockedWrite	./arch/arm/locked_mem.hh	/^handleLockedWrite(XC *xc, Request *req, Addr cacheBlockMask)$/;"	f	namespace:ArmISA
handleLockedWrite	./arch/mips/locked_mem.hh	/^handleLockedWrite(XC *xc, Request *req, Addr cacheBlockMask)$/;"	f	namespace:MipsISA
handleLockedWrite	./arch/power/locked_mem.hh	/^handleLockedWrite(XC *xc, Request *req, Addr cacheBlockMask)$/;"	f	namespace:PowerISA
handleLockedWrite	./arch/sparc/locked_mem.hh	/^handleLockedWrite(XC *xc, Request *req, Addr cacheBlockMask)$/;"	f	namespace:SparcISA
handleLockedWrite	./arch/x86/locked_mem.hh	/^    handleLockedWrite(XC *xc, Request *req, Addr cacheBlockMask)$/;"	f	namespace:X86ISA
handleMemResponse	./cpu/minor/execute.cc	/^Execute::handleMemResponse(MinorDynInstPtr inst,$/;"	f	class:Minor::Execute
handlePending	./dev/dma_device.cc	/^DmaReadFifo::handlePending()$/;"	f	class:DmaReadFifo
handlePendingInt	./cpu/checker/cpu_impl.hh	/^Checker<Impl>::handlePendingInt()$/;"	f	class:Checker
handlePseudoInst	./arch/generic/mmapped_ipr.cc	/^handlePseudoInst(ThreadContext *xc, Packet *pkt)$/;"	f	file:
handleReadPacket	./cpu/simple/timing.cc	/^TimingSimpleCPU::handleReadPacket(PacketPtr pkt)$/;"	f	class:TimingSimpleCPU
handleRequest	./mem/probes/mem_trace.cc	/^MemTraceProbe::handleRequest(const ProbePoints::PacketInfo &pkt_info)$/;"	f	class:MemTraceProbe
handleRequest	./mem/probes/stack_dist.cc	/^StackDistProbe::handleRequest(const ProbePoints::PacketInfo &pkt_info)$/;"	f	class:StackDistProbe
handleResp	./dev/dma_device.cc	/^DmaPort::handleResp(PacketPtr pkt, Tick delay)$/;"	f	class:DmaPort
handleSnoop	./mem/cache/cache.cc	/^Cache::handleSnoop(PacketPtr pkt, CacheBlk *blk, bool is_timing,$/;"	f	class:Cache
handleSnoop	./mem/cache/mshr.cc	/^MSHR::handleSnoop(PacketPtr pkt, Counter _order)$/;"	f	class:MSHR
handleTLBResponse	./cpu/minor/fetch1.cc	/^Fetch1::handleTLBResponse(FetchRequestPtr response)$/;"	f	class:Minor::Fetch1
handleTrap	./arch/sparc/linux/process.cc	/^void Sparc32LinuxProcess::handleTrap(int trapNum, ThreadContext *tc)$/;"	f	class:Sparc32LinuxProcess
handleTrap	./arch/sparc/linux/process.cc	/^void Sparc64LinuxProcess::handleTrap(int trapNum, ThreadContext *tc)$/;"	f	class:Sparc64LinuxProcess
handleTrap	./arch/sparc/process.cc	/^SparcLiveProcess::handleTrap(int trapNum, ThreadContext *tc)$/;"	f	class:SparcLiveProcess
handleWritePacket	./cpu/simple/timing.cc	/^TimingSimpleCPU::handleWritePacket()$/;"	f	class:TimingSimpleCPU
handle_alarm	./unittest/cprintftime.cc	/^handle_alarm(int signal)$/;"	f
handle_kwarg	./python/m5/params.py	/^        def handle_kwarg(self, kwargs, key, elseVal = None):$/;"	f	function:IpNetmask.__init__
handle_kwarg	./python/m5/params.py	/^        def handle_kwarg(self, kwargs, key, elseVal = None):$/;"	f	function:IpWithPort.__init__
handle_kwargs	./python/m5/params.py	/^        def handle_kwargs(self, kwargs):$/;"	f	function:AddrRange.__init__
handle_statement	./arch/micro_asm.py	/^def handle_statement(parser, container, statement):$/;"	f
hap	./arch/arm/pagetable.hh	/^    uint8_t hap;            \/\/ Hyp access permissions bits$/;"	m	struct:ArmISA::TlbEntry
hardBreakMap	./base/remote_gdb.hh	/^    break_map_t hardBreakMap;$/;"	m	class:BaseRemoteGDB
hardware_address	./dev/net/Ethernet.py	/^    hardware_address = Param.EthernetAddr(NextEthernetAddr,$/;"	v	class:EtherDevBase
hardware_address	./dev/net/Ethernet.py	/^    hardware_address = Param.EthernetAddr(NextEthernetAddr,$/;"	v	class:IGbE
hasAddr	./mem/packet_queue.cc	/^PacketQueue::hasAddr(Addr addr) const$/;"	f	class:PacketQueue
hasAttr	./cpu/kvm/device.cc	/^KvmDevice::hasAttr(uint32_t group, uint64_t attr) const$/;"	f	class:KvmDevice
hasBranchTarget	./cpu/static_inst.cc	/^StaticInst::hasBranchTarget(const TheISA::PCState &pc, ThreadContext *tc,$/;"	f	class:StaticInst
hasCompCompleted	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::hasCompCompleted(TraceInfo* past_record,$/;"	f	class:ElasticTrace
hasContextId	./mem/request.hh	/^    hasContextId() const$/;"	f	class:Request
hasData	./dev/x86/i8042.hh	/^    bool hasData()$/;"	f	class:X86ISA::PS2Device
hasData	./mem/packet.hh	/^    bool hasData() const             { return cmd.hasData(); }$/;"	f	class:Packet
hasData	./mem/packet.hh	/^    bool hasData() const        { return testCmdAttrib(HasData); }$/;"	f	class:MemCmd
hasFreeCCRegs	./cpu/o3/free_list.hh	/^    bool hasFreeCCRegs() const { return ccList.hasFreeRegs(); }$/;"	f	class:UnifiedFreeList
hasFreeFloatRegs	./cpu/o3/free_list.hh	/^    bool hasFreeFloatRegs() const { return floatList.hasFreeRegs(); }$/;"	f	class:UnifiedFreeList
hasFreeIntRegs	./cpu/o3/free_list.hh	/^    bool hasFreeIntRegs() const { return intList.hasFreeRegs(); }$/;"	f	class:UnifiedFreeList
hasFreeRegs	./cpu/o3/free_list.hh	/^    bool hasFreeRegs() const { return !freeRegs.empty(); }$/;"	f	class:SimpleFreeList
hasInstSeqNum	./mem/request.hh	/^    hasInstSeqNum() const$/;"	f	class:Request
hasKernelIRQChip	./cpu/kvm/vm.hh	/^    bool hasKernelIRQChip() const { return _hasKernelIRQChip; }$/;"	f	class:KvmVM
hasLoadBeenSent	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::hasLoadBeenSent(TraceInfo* past_record,$/;"	f	class:ElasticTrace
hasLoadCompleted	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::hasLoadCompleted(TraceInfo* past_record,$/;"	f	class:ElasticTrace
hasNext	./dev/virtio/base.hh	/^    bool hasNext() const { return desc.flags & VRING_DESC_F_NEXT; }$/;"	f	class:VirtDescriptor
hasOutstandingEvents	./dev/net/i8254xGBe.cc	/^IGbE::RxDescCache::hasOutstandingEvents()$/;"	f	class:IGbE::RxDescCache
hasOutstandingEvents	./dev/net/i8254xGBe.cc	/^IGbE::TxDescCache::hasOutstandingEvents()$/;"	f	class:IGbE::TxDescCache
hasOutstandingEvents	./dev/net/i8254xGBe.hh	/^        virtual bool hasOutstandingEvents() {$/;"	f	class:IGbE::DescCache
hasPC	./mem/request.hh	/^    hasPC() const$/;"	f	class:Request
hasPacketsInMemSystem	./cpu/minor/lsq.hh	/^        bool hasPacketsInMemSystem() { return false; }$/;"	f	class:Minor::LSQ::SpecialDataRequest
hasPacketsInMemSystem	./cpu/minor/lsq.hh	/^        bool hasPacketsInMemSystem() { return packetInFlight; }$/;"	f	class:Minor::LSQ::SingleDataRequest
hasPacketsInMemSystem	./cpu/minor/lsq.hh	/^        bool hasPacketsInMemSystem()$/;"	f	class:Minor::LSQ::SplitDataRequest
hasPaddr	./mem/request.hh	/^    hasPaddr() const$/;"	f	class:Request
hasPendingPkt	./cpu/o3/lsq_unit.hh	/^    bool hasPendingPkt;$/;"	m	class:LSQUnit
hasPendingUnmaskable	./arch/x86/interrupts.hh	/^    bool hasPendingUnmaskable() const { return pendingUnmaskableInt; }$/;"	f	class:X86ISA::Interrupts
hasPostDowngrade	./mem/cache/mshr.hh	/^    bool hasPostDowngrade() const {$/;"	f	class:MSHR
hasPostInvalidate	./mem/cache/mshr.hh	/^    bool hasPostInvalidate() const {$/;"	f	class:MSHR
hasReadPred	./arch/isa_parser.py	/^    def hasReadPred(self):$/;"	m	class:Operand
hasReadyInsts	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::hasReadyInsts()$/;"	f	class:InstructionQueue
hasRequest	./cpu/base_dyn_inst.hh	/^    bool hasRequest() { return instFlags[ReqMade]; }$/;"	f	class:BaseDynInst
hasRespData	./mem/packet.hh	/^    bool hasRespData() const$/;"	f	class:Packet
hasSharers	./mem/packet.hh	/^    bool hasSharers() const { return flags.isSet(HAS_SHARERS); }$/;"	f	class:Packet
hasSize	./mem/request.hh	/^    hasSize() const$/;"	f	class:Request
hasStoreCommitted	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::hasStoreCommitted(TraceInfo* past_record,$/;"	f	class:ElasticTrace
hasStoresToWB	./cpu/o3/iew.hh	/^    bool hasStoresToWB() { return ldstQueue.hasStoresToWB(); }$/;"	f	class:DefaultIEW
hasStoresToWB	./cpu/o3/iew.hh	/^    bool hasStoresToWB(ThreadID tid) { return ldstQueue.hasStoresToWB(tid); }$/;"	f	class:DefaultIEW
hasStoresToWB	./cpu/o3/lsq.hh	/^    bool hasStoresToWB(ThreadID tid)$/;"	f	class:LSQ
hasStoresToWB	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::hasStoresToWB()$/;"	f	class:LSQ
hasStoresToWB	./cpu/o3/lsq_unit.hh	/^    bool hasStoresToWB() { return storesToWB; }$/;"	f	class:LSQUnit
hasTLS	./base/loader/elf_object.hh	/^    virtual bool hasTLS() { return sectionExists(".tbss"); }$/;"	f	class:ElfObject
hasTLS	./base/loader/object_file.hh	/^    virtual bool hasTLS() { return false; }$/;"	f	class:ObjectFile
hasTargets	./mem/cache/mshr.hh	/^    bool hasTargets() const { return !targets.empty(); }$/;"	f	class:MSHR
hasTwoVDD	./mem/drampower.cc	/^DRAMPower::hasTwoVDD(const DRAMCtrlParams* p)$/;"	f	class:DRAMPower
hasUpgrade	./mem/cache/mshr.hh	/^        bool hasUpgrade;$/;"	m	class:MSHR::TargetList
hasVaddr	./mem/request.hh	/^    hasVaddr() const$/;"	f	class:Request
hasWritePred	./arch/isa_parser.py	/^    def hasWritePred(self):$/;"	m	class:Operand
has_credits	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    has_credits(int vc)$/;"	f	class:InputUnit_d
has_credits	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.hh	/^    inline bool has_credits()       { return (m_credit_count > 0); }$/;"	f	class:OutVcState_d
has_credits	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    inline bool has_credits()               { return (m_credit_count > 0); }$/;"	f	class:VirtualChannel_d
has_key	./python/m5/util/multidict.py	/^    def has_key(self, key):$/;"	m	class:multidict
has_parent	./python/m5/SimObject.py	/^    def has_parent(self):$/;"	f
has_parent	./python/m5/params.py	/^    def has_parent(self):$/;"	m	class:SimObjectVector
hash	./arch/arm/types.hh	/^struct hash<ArmISA::ExtMachInst> :$/;"	s	namespace:std
hash	./arch/power/types.hh	/^struct hash<PowerISA::ExtMachInst> : public hash<uint32_t> {$/;"	s	namespace:std
hash	./arch/x86/types.hh	/^    struct hash<X86ISA::ExtMachInst> {$/;"	s	namespace:std
hash	./base/cp_annotate.hh	/^struct hash<std::pair<std::string, uint64_t> >$/;"	s	namespace:std
hash	./cpu/simple/probes/simpoint.hh	/^struct hash<BasicBlockRange>$/;"	s	namespace:std
hashLookup	./mem/cache/tags/fa_lru.cc	/^FALRU::hashLookup(Addr addr) const$/;"	f	class:FALRU
hash_H3	./mem/ruby/filters/H3BloomFilter.cc	/^H3BloomFilter::hash_H3(uint64_t value, int index)$/;"	f	class:H3BloomFilter
hash_bitsel	./mem/ruby/filters/MultiBitSelBloomFilter.cc	/^MultiBitSelBloomFilter::hash_bitsel(uint64_t value, int index, int jump,$/;"	f	class:MultiBitSelBloomFilter
hash_t	./mem/cache/tags/fa_lru.hh	/^    typedef std::unordered_map<Addr, FALRUBlk *, std::hash<Addr> > hash_t;$/;"	t	class:FALRU
hashed	./base/addr_range.hh	/^    bool hashed() const { return interleaved() && xorHighBit != 0; }$/;"	f	class:AddrRange
haveDebugRegs	./cpu/kvm/x86_cpu.hh	/^    bool haveDebugRegs;$/;"	m	class:X86KvmCPU
haveLPAE	./arch/arm/isa.hh	/^        bool haveLPAE;$/;"	m	class:ArmISA::ISA
haveLPAE	./arch/arm/system.cc	/^ArmSystem::haveLPAE(ThreadContext *tc)$/;"	f	class:ArmSystem
haveLPAE	./arch/arm/system.hh	/^    bool haveLPAE() const { return _haveLPAE; }$/;"	f	class:ArmSystem
haveLPAE	./arch/arm/table_walker.hh	/^    bool haveLPAE() const { return _haveLPAE; }$/;"	f	class:ArmISA::TableWalker
haveLPAE	./arch/arm/tlb.hh	/^    bool haveLPAE;$/;"	m	class:ArmISA::TLB
haveLargeAsid64	./arch/arm/isa.hh	/^        bool haveLargeAsid64;$/;"	m	class:ArmISA::ISA
haveLargeAsid64	./arch/arm/system.cc	/^ArmSystem::haveLargeAsid64(ThreadContext *tc)$/;"	f	class:ArmSystem
haveLargeAsid64	./arch/arm/system.hh	/^    bool haveLargeAsid64() const { return _haveLargeAsid64; }$/;"	f	class:ArmSystem
haveLargeAsid64	./arch/arm/table_walker.hh	/^    bool haveLargeAsid64() const { return _haveLargeAsid64; }$/;"	f	class:ArmISA::TableWalker
haveLargeAsid64	./arch/arm/tlb.hh	/^    bool haveLargeAsid64;$/;"	m	class:ArmISA::TLB
havePC	./cpu/minor/fetch2.hh	/^    bool havePC;$/;"	m	class:Minor::Fetch2
havePending	./mem/cache/mshr_queue.hh	/^    bool havePending() const$/;"	f	class:MSHRQueue
haveSecurity	./arch/arm/isa.hh	/^        bool haveSecurity;$/;"	m	class:ArmISA::ISA
haveSecurity	./arch/arm/system.cc	/^ArmSystem::haveSecurity(ThreadContext *tc)$/;"	f	class:ArmSystem
haveSecurity	./arch/arm/system.hh	/^    bool haveSecurity() const { return _haveSecurity; }$/;"	f	class:ArmSystem
haveSecurity	./arch/arm/table_walker.hh	/^    bool haveSecurity;$/;"	m	class:ArmISA::TableWalker
haveVirtualization	./arch/arm/isa.hh	/^        bool haveVirtualization;$/;"	m	class:ArmISA::ISA
haveVirtualization	./arch/arm/system.cc	/^ArmSystem::haveVirtualization(ThreadContext *tc)$/;"	f	class:ArmSystem
haveVirtualization	./arch/arm/system.hh	/^    bool haveVirtualization() const { return _haveVirtualization; }$/;"	f	class:ArmSystem
haveVirtualization	./arch/arm/table_walker.hh	/^    bool haveVirtualization() const { return _haveVirtualization; }$/;"	f	class:ArmISA::TableWalker
haveVirtualization	./arch/arm/tlb.hh	/^    bool haveVirtualization;$/;"	m	class:ArmISA::TLB
haveXCRs	./cpu/kvm/x86_cpu.hh	/^    bool haveXCRs;$/;"	m	class:X86KvmCPU
haveXSave	./cpu/kvm/x86_cpu.hh	/^    bool haveXSave;$/;"	m	class:X86KvmCPU
have_large_asid_64	./arch/arm/ArmSystem.py	/^    have_large_asid_64 = Param.Bool(False,$/;"	v	class:ArmSystem
have_lpae	./arch/arm/ArmSystem.py	/^    have_lpae = Param.Bool(False, "True if LPAE is implemented")$/;"	v	class:ArmSystem
have_security	./arch/arm/ArmSystem.py	/^    have_security = Param.Bool(False,$/;"	v	class:ArmSystem
have_virtualization	./arch/arm/ArmSystem.py	/^    have_virtualization = Param.Bool(False,$/;"	v	class:ArmSystem
hbp	./dev/arm/pl111.hh	/^        Bitfield<31,24> hbp;$/;"	m	class:Pl111
hcd	./arch/arm/miscregs.hh	/^        Bitfield<29>     hcd;   \/\/ AArch64$/;"	m	namespace:ArmISA
hce	./arch/arm/miscregs.hh	/^        Bitfield<8> hce;$/;"	m	namespace:ArmISA
hcr	./arch/arm/table_walker.hh	/^        HCR  hcr;$/;"	m	class:ArmISA::TableWalker::WalkerState
hcr	./arch/arm/tlb.hh	/^    HCR hcr;$/;"	m	class:ArmISA::TLB
hcr	./dev/arm/vgic.hh	/^        HCR hcr;$/;"	m	struct:VGic::vcpuIntData
hdlcd	./dev/arm/RealView.py	/^    hdlcd  = HDLcd(pxl_clk=dcc.osc_pxl,$/;"	v	class:VExpress_EMM
hdr	./dev/net/i8254xGBe_defs.hh	/^            Addr hdr;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon7
hdrLen	./dev/net/i8254xGBe_defs.hh	/^        unsigned hdrLen() { return hdrlen() << 6; }$/;"	f	struct:iGbReg::Regs::SRRCTL
hdrNil	./base/loader/coff_sym.h	128;"	d
hdrlen	./dev/net/i8254xGBe_defs.hh	/^inline int hdrlen(TxDesc *d) {$/;"	f	namespace:iGbReg::TxdOp
head	./base/trie.hh	/^    Node head;$/;"	m	class:Trie
head	./cpu/o3/rob.hh	/^    InstIt head;$/;"	m	class:ROB
head	./dev/storage/ide_disk.hh	/^        uint8_t head;$/;"	m	union:CommandReg::__anon15
head	./mem/cache/tags/fa_lru.hh	/^    FALRUBlk *head;$/;"	m	class:FALRU
head	./sim/eventq.hh	/^    Event *head;$/;"	m	class:EventQueue
header	./dev/arm/ufs_device.hh	/^        struct UTPUPIUHeader header;$/;"	m	struct:UFSHostDevice::UPIUMessage	typeref:struct:UFSHostDevice::UPIUMessage::UTPUPIUHeader
header	./dev/arm/ufs_device.hh	/^        struct UTPUPIUHeader header;$/;"	m	struct:UFSHostDevice::UTPUPIURSP	typeref:struct:UFSHostDevice::UTPUPIURSP::UTPUPIUHeader
header	./dev/arm/ufs_device.hh	/^        struct UTPUPIUHeader header;$/;"	m	struct:UFSHostDevice::UTPUPIUTaskReq	typeref:struct:UFSHostDevice::UTPUPIUTaskReq::UTPUPIUHeader
header	./dev/arm/ufs_device.hh	/^        } header;$/;"	m	struct:UFSHostDevice::UTPTransferReqDesc	typeref:struct:UFSHostDevice::UTPTransferReqDesc::RequestDescHeader
header	./dev/virtio/base.hh	/^        Header header;$/;"	m	class:VirtQueue::VirtRing
headerComplete	./dev/net/i8254xGBe.cc	/^IGbE::TxDescCache::headerComplete()$/;"	f	class:IGbE::TxDescCache
headerDelay	./mem/packet.hh	/^    uint32_t headerDelay;$/;"	m	class:Packet
headerEvent	./dev/net/i8254xGBe.hh	/^        EventWrapper<TxDescCache, &TxDescCache::headerComplete> headerEvent;$/;"	m	class:IGbE::TxDescCache
headerType	./dev/pci/pcireg.h	/^        uint8_t headerType;$/;"	m	struct:PCIConfig::__anon26
header_len	./dev/net/i8254xGBe_defs.hh	/^            uint16_t header_len:10;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon8
height	./base/framebuffer.hh	/^    unsigned height() const { return _height; }$/;"	f	class:FrameBuffer
height	./base/vnc/vncinput.hh	/^        uint16_t height;$/;"	m	struct:VncInput::FrameBufferUpdateReq
height	./base/vnc/vncserver.hh	/^        uint16_t height;$/;"	m	struct:VncServer::FrameBufferRect
height	./dev/arm/pl111.hh	/^    uint16_t height;$/;"	m	class:Pl111
height	./dev/pixelpump.hh	/^    unsigned height;$/;"	m	struct:DisplayTimings
help	./python/m5/debug.py	/^def help():$/;"	f
hex	./base/cprintf_formats.hh	/^    enum { dec, hex, oct } base;$/;"	e	enum:cp::Format::__anon117
hex2Int	./base/intmath.hh	/^hex2Int(char c)$/;"	f
hex2i	./base/remote_gdb.cc	/^BaseRemoteGDB::hex2i(const char **srcp)$/;"	f	class:BaseRemoteGDB
hex2mem	./base/remote_gdb.cc	/^BaseRemoteGDB::hex2mem(char *vdst, const char *src, int maxlen)$/;"	f	class:BaseRemoteGDB
hexFile	./arch/mips/system.hh	/^    HexFile *hexFile;$/;"	m	class:MipsSystem
hex_file_name	./arch/mips/MipsSystem.py	/^    hex_file_name = Param.String("test.hex","hex file that contains [address,data] pairs")$/;"	v	class:MipsSystem
hex_file_name	./arch/mips/MipsSystem.py	/^    hex_file_name = Param.String('test.hex',"hex file that contains [address,data] pairs")$/;"	v	class:BareIronMipsSystem
hfp	./dev/arm/pl111.hh	/^        Bitfield<23,16> hfp;$/;"	m	class:Pl111
hi	./arch/arm/insts/neon64_mem.hh	/^    XReg hi;$/;"	m	struct:ArmISA::VReg
hi	./arch/mips/remote_gdb.hh	/^            uint32_t hi;$/;"	m	struct:MipsISA::RemoteGDB::MipsGdbRegCache::__anon83
highAddr	./mem/cache/blk.hh	/^        Addr highAddr;     \/\/ high address of lock range$/;"	m	class:CacheBlk::Lock
highFromDouble	./arch/arm/insts/vfp.hh	/^highFromDouble(double val)$/;"	f	namespace:ArmISA
highestEL	./arch/arm/system.cc	/^ArmSystem::highestEL(ThreadContext *tc)$/;"	f	class:ArmSystem
highestEL	./arch/arm/system.hh	/^    ExceptionLevel highestEL() const$/;"	f	class:ArmSystem
highestELIs64	./arch/arm/system.cc	/^ArmSystem::highestELIs64(ThreadContext *tc)$/;"	f	class:ArmSystem
highestELIs64	./arch/arm/system.hh	/^    bool highestELIs64() const { return _highestELIs64; }$/;"	f	class:ArmSystem
highest_el_is_64	./arch/arm/ArmSystem.py	/^    highest_el_is_64 = Param.Bool(False,$/;"	v	class:ArmSystem
hintp	./arch/sparc/isa.hh	/^    uint64_t hintp;$/;"	m	class:SparcISA::ISA
historyBuffer	./cpu/o3/rename.hh	/^    std::list<RenameHistory> historyBuffer[Impl::MaxThreads];$/;"	m	class:DefaultRename
historyRegisterMask	./cpu/pred/bi_mode.hh	/^    unsigned historyRegisterMask;$/;"	m	class:BiModeBP
historyRegisterMask	./cpu/pred/tournament.hh	/^    unsigned historyRegisterMask;$/;"	m	class:TournamentBP
hitCallback	./cpu/testers/directedtest/RubyDirectedTester.cc	/^RubyDirectedTester::hitCallback(NodeID proc, Addr addr)$/;"	f	class:RubyDirectedTester
hitCallback	./cpu/testers/rubytest/RubyTester.cc	/^RubyTester::hitCallback(NodeID proc, SubBlock* data)$/;"	f	class:RubyTester
hitCallback	./mem/ruby/system/DMASequencer.cc	/^DMASequencer::MemSlavePort::hitCallback(PacketPtr pkt)$/;"	f	class:DMASequencer::MemSlavePort
hitCallback	./mem/ruby/system/RubyPort.cc	/^RubyPort::MemSlavePort::hitCallback(PacketPtr pkt)$/;"	f	class:RubyPort::MemSlavePort
hitCallback	./mem/ruby/system/Sequencer.cc	/^Sequencer::hitCallback(SequencerRequest* srequest, DataBlock& data,$/;"	f	class:Sequencer
hitExternalSnoop	./cpu/base_dyn_inst.hh	/^    bool hitExternalSnoop() const { return instFlags[HitExternalSnoop]; }$/;"	f	class:BaseDynInst
hitExternalSnoop	./cpu/base_dyn_inst.hh	/^    void hitExternalSnoop(bool f) { instFlags[HitExternalSnoop] = f; }$/;"	f	class:BaseDynInst
hitMultiRequests	./mem/snoop_filter.hh	/^    Stats::Scalar hitMultiRequests;$/;"	m	class:SnoopFilter
hitMultiSnoops	./mem/snoop_filter.hh	/^    Stats::Scalar hitMultiSnoops;$/;"	m	class:SnoopFilter
hitSingleRequests	./mem/snoop_filter.hh	/^    Stats::Scalar hitSingleRequests;$/;"	m	class:SnoopFilter
hitSingleSnoops	./mem/snoop_filter.hh	/^    Stats::Scalar hitSingleSnoops;$/;"	m	class:SnoopFilter
hit_latency	./mem/cache/Cache.py	/^    hit_latency = Param.Cycles("Hit latency")$/;"	v	class:BaseCache
hit_latency	./mem/cache/tags/Tags.py	/^    hit_latency = Param.Cycles(Parent.hit_latency,$/;"	v	class:BaseTags
hits	./arch/arm/tlb.hh	/^    Stats::Formula hits;$/;"	m	class:ArmISA::TLB
hits	./arch/mips/tlb.hh	/^    Stats::Formula hits;$/;"	m	class:MipsISA::TLB
hits	./arch/power/tlb.hh	/^    Stats::Formula hits;$/;"	m	class:PowerISA::TLB
hits	./mem/cache/base.hh	/^    Stats::Vector hits[MemCmd::NUM_MEM_CMDS];$/;"	m	class:BaseCache
hits	./mem/cache/tags/fa_lru.hh	/^    Stats::Vector hits;$/;"	m	class:FALRU
hlen	./base/inet.hh	/^    uint16_t hlen() const { return IP6_HDR_LEN; }$/;"	f	struct:Net::Ip6Hdr
hlen	./base/inet.hh	/^    uint8_t  hlen() const { return ip_hl * 4; }$/;"	f	struct:Net::IpHdr
hlim	./base/inet.hh	/^    uint8_t hlim() const { return ip6_hlim; }$/;"	f	struct:Net::Ip6Hdr
holder	./mem/snoop_filter.hh	/^        SnoopMask holder;$/;"	m	struct:SnoopFilter::SnoopItem
hole	./arch/sparc/remote_gdb.hh	/^            uint32_t hole[32];$/;"	m	struct:SparcISA::RemoteGDB::SPARCGdbRegCache::__anon42
homedir	./python/m5/config.py	/^    homedir = os.environ.get('HOME')$/;"	v
host	./dev/pci/PciDevice.py	/^    host = Param.PciHost(Parent.any, "PCI host")$/;"	v	class:PciDevice
host	./dev/pci/host.hh	/^        PciHost &host;$/;"	m	class:PciHost::DeviceInterface
hostCycles	./cpu/kvm/timer.hh	/^    uint64_t hostCycles(Tick ticks) {$/;"	f	class:BaseKvmTimer
hostFactor	./cpu/kvm/BaseKvmCPU.py	/^    hostFactor = Param.Float(1.0, "Cycle scale factor")$/;"	v
hostFactor	./cpu/kvm/base.hh	/^    float hostFactor;$/;"	m	class:BaseKvmCPU
hostFactor	./cpu/kvm/timer.hh	/^    float hostFactor;$/;"	m	class:BaseKvmTimer
hostFlag	./kern/operatingsystem.hh	/^    int hostFlag;       \/\/!< Corresponding host system flag value.$/;"	m	struct:OpenFlagTransTable
hostFreq	./cpu/kvm/BaseKvmCPU.py	/^    hostFreq = Param.Clock("2GHz", "Host clock frequency")$/;"	v
hostFreq	./cpu/kvm/timer.hh	/^    Tick hostFreq;$/;"	m	class:BaseKvmTimer
hostInstRate	./sim/stat_control.cc	/^    Stats::Formula hostInstRate;$/;"	m	struct:Stats::Global	file:
hostInterface	./dev/pci/device.hh	/^    PciHost::DeviceInterface hostInterface;$/;"	m	class:PciDevice
hostMemory	./sim/stat_control.cc	/^    Stats::Value hostMemory;$/;"	m	struct:Stats::Global	file:
hostNs	./cpu/kvm/timer.hh	/^    uint64_t hostNs(Tick ticks) {$/;"	f	class:BaseKvmTimer
hostOpRate	./sim/stat_control.cc	/^    Stats::Formula hostOpRate;$/;"	m	struct:Stats::Global	file:
hostSeconds	./sim/stat_control.cc	/^    Stats::Value hostSeconds;$/;"	m	struct:Stats::Global	file:
hostTickRate	./sim/stat_control.cc	/^    Stats::Formula hostTickRate;$/;"	m	struct:Stats::Global	file:
host_priv_self	./kern/tru64/tru64_syscalls.hh	/^        host_priv_self = 56,$/;"	e	enum:SystemCalls::__anon103
host_self	./kern/tru64/tru64_syscalls.hh	/^        host_self = 55,$/;"	e	enum:SystemCalls::__anon103
hostname	./arch/mips/linux/process.hh	/^    static const char *hostname;$/;"	m	class:MipsLinuxProcess
hostname	./arch/sparc/solaris/process.hh	/^    static const char *hostname;$/;"	m	class:SparcISA::SparcSolarisProcess
hostname	./base/hostinfo.cc	/^hostname()$/;"	f
hostname	./kern/tru64/tru64.hh	/^    static const char *hostname;$/;"	m	class:Tru64
hostname	./sim/syscall_emul.cc	/^const char *hostname = "m5.eecs.umich.edu";$/;"	v
hot_lines	./mem/ruby/system/RubySystem.py	/^    hot_lines = Param.Bool(False, "")$/;"	v	class:RubySystem
hour	./dev/mc146818.hh	/^            uint8_t hour;$/;"	m	struct:MC146818::__anon17::__anon18
hour_alrm	./dev/mc146818.hh	/^            uint8_t hour_alrm;$/;"	m	struct:MC146818::__anon17::__anon18
hpme	./arch/arm/miscregs.hh	/^        Bitfield<7>    hpme;$/;"	m	namespace:ArmISA
hpmn	./arch/arm/miscregs.hh	/^        Bitfield<4, 0> hpmn;$/;"	m	namespace:ArmISA
hpriv	./arch/sparc/miscregs.hh	/^    Bitfield<2> hpriv;$/;"	m	namespace:SparcISA
hpstate	./arch/sparc/isa.hh	/^    HPSTATE hpstate;       \/\/ Hyperprivileged State Register$/;"	m	class:SparcISA::ISA
hsplit	./base/inet.cc	/^hsplit(const EthPacketPtr &ptr)$/;"	f	namespace:Net
hss	./arch/mips/pra_constants.hh	/^    Bitfield<29, 26> hss;$/;"	m	namespace:MipsISA
hst_stat	./sim/syscall_emul.hh	/^    typedef struct stat hst_stat;$/;"	t	typeref:struct:stat
hst_stat64	./sim/syscall_emul.hh	/^    typedef struct stat hst_stat64;$/;"	t	typeref:struct:stat
hst_stat64	./sim/syscall_emul.hh	/^    typedef struct stat64 hst_stat64;$/;"	t	typeref:struct:stat64
hstick_cmpr	./arch/sparc/isa.hh	/^    uint64_t hstick_cmpr;   \/\/ Hardware tick compare registers$/;"	m	class:SparcISA::ISA
hsw	./dev/arm/pl111.hh	/^        Bitfield<15,8> hsw;$/;"	m	class:Pl111
hsync_polarity	./dev/arm/hdlcd.hh	/^        Bitfield<1>    hsync_polarity;$/;"	m	class:HDLcd
htba	./arch/sparc/isa.hh	/^    uint64_t htba;          \/\/ Hyperprivileged Trap Base Address register$/;"	m	class:SparcISA::ISA
htcr	./arch/arm/table_walker.hh	/^        HTCR htcr;$/;"	m	class:ArmISA::TableWalker::WalkerState
hterm	./dev/sparc/T1000.py	/^    hterm = Terminal()$/;"	v	class:T1000
htg_unix_syscall	./kern/tru64/tru64_syscalls.hh	/^        htg_unix_syscall = 52,$/;"	e	enum:SystemCalls::__anon103
htobe	./sim/byteswap.hh	/^template <typename T> inline T htobe(T value) {return swap_byte(value);}$/;"	f
htobe	./sim/byteswap.hh	/^template <typename T> inline T htobe(T value) {return value;}$/;"	f
htod	./dev/sparc/T1000.py	/^    htod = DumbTOD()$/;"	v	class:T1000
htog	./sim/byteswap.hh	/^    inline T htog(T value) {return htobe(value);}$/;"	f	namespace:BigEndianGuest
htog	./sim/byteswap.hh	/^    inline T htog(T value) {return htole(value);}$/;"	f	namespace:LittleEndianGuest
htole	./sim/byteswap.hh	/^template <typename T> inline T htole(T value) {return swap_byte(value);}$/;"	f
htole	./sim/byteswap.hh	/^template <typename T> inline T htole(T value) {return value;}$/;"	f
htop9	./dev/virtio/fs9p.hh	/^htop9(P9MsgHeader v)$/;"	f
htop9	./dev/virtio/fs9p.hh	/^htop9(T v) { return htole(v); }$/;"	f
htopcode10_9	./arch/arm/types.hh	/^        Bitfield<26, 25> htopcode10_9;$/;"	m	namespace:ArmISA
htopcode12_11	./arch/arm/types.hh	/^        Bitfield<28, 27> htopcode12_11;$/;"	m	namespace:ArmISA
htopcode4	./arch/arm/types.hh	/^        Bitfield<20>     htopcode4;$/;"	m	namespace:ArmISA
htopcode5_4	./arch/arm/types.hh	/^        Bitfield<21, 20> htopcode5_4;$/;"	m	namespace:ArmISA
htopcode6	./arch/arm/types.hh	/^        Bitfield<22>     htopcode6;$/;"	m	namespace:ArmISA
htopcode6_5	./arch/arm/types.hh	/^        Bitfield<22, 21> htopcode6_5;$/;"	m	namespace:ArmISA
htopcode7	./arch/arm/types.hh	/^        Bitfield<23>     htopcode7;$/;"	m	namespace:ArmISA
htopcode7_5	./arch/arm/types.hh	/^        Bitfield<23, 21> htopcode7_5;$/;"	m	namespace:ArmISA
htopcode8	./arch/arm/types.hh	/^        Bitfield<24>     htopcode8;$/;"	m	namespace:ArmISA
htopcode8_5	./arch/arm/types.hh	/^        Bitfield<24, 21> htopcode8_5;$/;"	m	namespace:ArmISA
htopcode8_6	./arch/arm/types.hh	/^        Bitfield<24, 22> htopcode8_6;$/;"	m	namespace:ArmISA
htopcode8_7	./arch/arm/types.hh	/^        Bitfield<24, 23> htopcode8_7;$/;"	m	namespace:ArmISA
htopcode9	./arch/arm/types.hh	/^        Bitfield<25>     htopcode9;$/;"	m	namespace:ArmISA
htopcode9_4	./arch/arm/types.hh	/^        Bitfield<25, 20> htopcode9_4;$/;"	m	namespace:ArmISA
htopcode9_5	./arch/arm/types.hh	/^        Bitfield<25, 21> htopcode9_5;$/;"	m	namespace:ArmISA
htopcode9_8	./arch/arm/types.hh	/^        Bitfield<25, 24> htopcode9_8;$/;"	m	namespace:ArmISA
htov_legacy	./dev/virtio/base.hh	/^htov_legacy(T v) {$/;"	f
htov_legacy	./dev/virtio/base.hh	/^htov_legacy(vring_desc v) {$/;"	f
htov_legacy	./dev/virtio/base.hh	/^htov_legacy(vring_used_elem v) {$/;"	f
htrn	./arch/arm/types.hh	/^        Bitfield<19, 16> htrn;$/;"	m	namespace:ArmISA
hts	./arch/arm/types.hh	/^        Bitfield<20>     hts;$/;"	m	namespace:ArmISA
htstate	./arch/sparc/isa.hh	/^    uint64_t htstate[MaxTL];\/\/ Hyperprivileged Trap State Register$/;"	m	class:SparcISA::ISA
hvAddr	./dev/arm/vgic.hh	/^    Addr hvAddr;$/;"	m	class:VGic
hv_addr	./dev/arm/RealView.py	/^    hv_addr = Param.Addr(0, "Address for hv control")$/;"	v	class:VGic
hvuart	./dev/sparc/T1000.py	/^    hvuart = Uart8250(pio_addr=0xfff0c2c000)$/;"	v	class:T1000
hwBegin	./base/cp_annotate.hh	/^    inline void hwBegin(flags f, System *sys, uint64_t frame, std::string sm, $/;"	f	class:CPA
hwBegin	./base/cp_annotate.hh	/^    void hwBegin(flags f, System *sys, uint64_t frame, std::string sm, $/;"	f	class:CPA
hwCycles	./cpu/kvm/base.hh	/^    PerfKvmCounter hwCycles;$/;"	m	class:BaseKvmCPU
hwDq	./base/cp_annotate.hh	/^    inline void hwDq(flags f, System *sys, uint64_t frame, std::string sm, $/;"	f	class:CPA
hwDq	./base/cp_annotate.hh	/^    void hwDq(flags f, System *sys, uint64_t frame, std::string sm, $/;"	f	class:CPA
hwInstructions	./cpu/kvm/base.hh	/^    PerfKvmCounter hwInstructions;$/;"	m	class:BaseKvmCPU
hwOverflow	./cpu/kvm/timer.hh	/^    PerfKvmCounter &hwOverflow;$/;"	m	class:PerfKvmTimer
hwPq	./base/cp_annotate.hh	/^    inline void hwPq(flags f, System *sys, uint64_t frame, std::string sm, $/;"	f	class:CPA
hwPq	./base/cp_annotate.hh	/^    void hwPq(flags f, System *sys, uint64_t frame, std::string sm, $/;"	f	class:CPA
hwQ	./base/cp_annotate.hh	/^    inline void hwQ(flags f, System *sys, uint64_t frame, std::string sm, $/;"	f	class:CPA
hwQ	./base/cp_annotate.hh	/^    void hwQ(flags f, System *sys, uint64_t frame, std::string sm, $/;"	f	class:CPA
hwResource	./cpu/trace/trace_cpu.hh	/^        HardwareResource hwResource;$/;"	m	class:TraceCPU::ElasticDataGen
hwRq	./base/cp_annotate.hh	/^    inline void hwRq(flags f, System *sys, uint64_t frame, std::string sm, $/;"	f	class:CPA
hwRq	./base/cp_annotate.hh	/^    void hwRq(flags f, System *sys, uint64_t frame, std::string sm, $/;"	f	class:CPA
hwWe	./base/cp_annotate.hh	/^    inline void hwWe(flags f, System *sys, uint64_t frame, std::string sm, $/;"	f	class:CPA
hwWe	./base/cp_annotate.hh	/^    void hwWe(flags f, System *sys, uint64_t frame, std::string sm, $/;"	f	class:CPA
hwWf	./base/cp_annotate.hh	/^    inline void hwWf(flags f, System *sys, uint64_t frame, std::string sm, $/;"	f	class:CPA
hwWf	./base/cp_annotate.hh	/^    void hwWf(flags f, System *sys, uint64_t frame, std::string sm, $/;"	f	class:CPA
hwrei	./arch/alpha/ev5.cc	/^SimpleThread::hwrei()$/;"	f	class:SimpleThread
hwrei	./arch/alpha/kernel_stats.hh	/^    void hwrei() { _hwrei++; }$/;"	f	class:AlphaISA::Kernel::Statistics
hwrei	./cpu/minor/exec_context.hh	/^    hwrei()$/;"	f	class:Minor::ExecContext
hwrei	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::hwrei(ThreadID tid)$/;"	f	class:FullO3CPU
hwrei	./cpu/o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::hwrei()$/;"	f	class:BaseO3DynInst
hwrei	./cpu/simple_thread.cc	/^SimpleThread::hwrei()$/;"	f	class:SimpleThread
hypTrappable	./arch/arm/faults.hh	/^        const bool hypTrappable;$/;"	m	struct:ArmISA::ArmFault::FaultVals
hypervisor	./arch/arm/kernel_stats.hh	/^enum cpu_mode { hypervisor, kernel, user, idle, cpu_mode_num };$/;"	e	enum:ArmISA::Kernel::cpu_mode
hypervisor	./arch/power/kernel_stats.hh	/^enum cpu_mode { hypervisor, kernel, user, idle, cpu_mode_num };$/;"	e	enum:PowerISA::Kernel::cpu_mode
hypervisor	./arch/sparc/kernel_stats.hh	/^enum cpu_mode { hypervisor, kernel, user, idle, cpu_mode_num };$/;"	e	enum:SparcISA::Kernel::cpu_mode
hypervisor	./arch/sparc/system.hh	/^    ObjectFile *hypervisor;$/;"	m	class:SparcSystem
hypervisorDescSymtab	./arch/sparc/system.hh	/^    SymbolTable *hypervisorDescSymtab;$/;"	m	class:SparcSystem
hypervisorSymtab	./arch/sparc/system.hh	/^    SymbolTable *hypervisorSymtab;$/;"	m	class:SparcSystem
hypervisor_addr	./arch/sparc/SparcSystem.py	/^    hypervisor_addr = Param.Addr(Addr('64kB') + _rom_base,$/;"	v	class:SparcSystem
hypervisor_bin	./arch/sparc/SparcSystem.py	/^    hypervisor_bin = Param.String("file that contains the hypervisor code")$/;"	v	class:SparcSystem
hypervisor_desc	./arch/sparc/SparcSystem.py	/^    hypervisor_desc = Param.SimpleMemory($/;"	v	class:SparcSystem
hypervisor_desc	./arch/sparc/system.hh	/^    ObjectFile *hypervisor_desc;$/;"	m	class:SparcSystem
hypervisor_desc_addr	./arch/sparc/SparcSystem.py	/^    hypervisor_desc_addr = Param.Addr(_hypervisor_desc_base,$/;"	v	class:SparcSystem
hypervisor_desc_bin	./arch/sparc/SparcSystem.py	/^    hypervisor_desc_bin = Param.String("file that contains the hypervisor description")$/;"	v	class:SparcSystem
i	./arch/arm/kvm/armv8_cpu.cc	/^        uint32_t i;$/;"	m	union:KvmFPReg::__anon80	file:
i	./arch/arm/kvm/armv8_cpu.cc	/^        uint64_t i;$/;"	m	union:KvmFPReg::__anon81	file:
i	./arch/arm/miscregs.hh	/^        Bitfield<12>   i;       \/\/ Instruction cache enable$/;"	m	namespace:ArmISA
i	./arch/arm/miscregs.hh	/^        Bitfield<7> i;$/;"	m	namespace:ArmISA
i	./arch/mips/pra_constants.hh	/^    Bitfield<2>      i;$/;"	m	namespace:MipsISA
i	./arch/mips/pra_constants.hh	/^    Bitfield<2>     i;$/;"	m	namespace:MipsISA
i	./cpu/simple_thread.hh	/^        FloatRegBits i[TheISA::NumFloatRegs];$/;"	m	union:SimpleThread::__anon33
i2cAddr	./dev/i2c/bus.hh	/^    uint8_t i2cAddr;$/;"	m	class:I2CBus
i2cAddr	./dev/i2c/device.hh	/^    uint8_t i2cAddr() const { return _addr; }$/;"	f	class:I2CDevice
i2c_addr	./dev/i2c/I2C.py	/^    i2c_addr = Param.UInt8("Address of device on i2c bus")$/;"	v	class:I2CDevice
i2digit	./base/remote_gdb.cc	/^BaseRemoteGDB::i2digit(int n)$/;"	f	class:BaseRemoteGDB
i8254	./dev/x86/PcSpeaker.py	/^    i8254 = Param.I8254('Timer that drives the speaker')$/;"	v	class:PcSpeaker
iCacheLineSize	./arch/arm/miscregs.hh	/^      Bitfield<3,0>   iCacheLineSize;$/;"	m	namespace:ArmISA
iGbReg	./dev/net/i8254xGBe_defs.hh	/^namespace iGbReg {$/;"	n
i_dont_exist1	./dev/x86/Pc.py	/^    i_dont_exist1 = IsaFake(pio_addr=x86IOAddress(0x80), pio_size=1)$/;"	v	class:Pc
i_dont_exist2	./dev/x86/Pc.py	/^    i_dont_exist2 = IsaFake(pio_addr=x86IOAddress(0xed), pio_size=1)$/;"	v	class:Pc
ia	./arch/mips/pra_constants.hh	/^    Bitfield<18, 16> ia;$/;"	m	namespace:MipsISA
iam	./dev/net/i8254xGBe_defs.hh	/^    uint32_t iam;$/;"	m	struct:iGbReg::Regs
iauxBase	./base/loader/coff_sym.h	/^    coff_int    iauxBase;       \/* file's auxiliary entries *\/$/;"	m	struct:ecoff_fdr
iauxMax	./base/loader/coff_sym.h	/^    coff_int    iauxMax;        \/* number of auxillary symbol entries *\/$/;"	m	struct:ecoff_symhdr
iauxNil	./base/loader/coff_sym.h	389;"	d
iauxNil	./base/loader/coff_sym.h	447;"	d
ibe	./arch/sparc/miscregs.hh	/^    Bitfield<10> ibe;$/;"	m	namespace:SparcISA
ibrd	./dev/arm/pl011.hh	/^    uint16_t ibrd;$/;"	m	class:Pl011
ibusep	./arch/mips/dt_constants.hh	/^    Bitfield<24>     ibusep;$/;"	m	namespace:MipsISA
ic	./dev/net/i8254xGBe_defs.hh	/^inline bool ic(TxDesc *d)   { assert(isLegacy(d) || isData(d)); return isLegacy(d) && bits(d->d2, 26,26); }$/;"	f	namespace:iGbReg::TxdOp
ic	./dev/sparc/iob.hh	/^    IntrControl *ic;$/;"	m	class:Iob
icache	./mem/ruby/system/Sequencer.py	/^    icache = Param.RubyCache("")$/;"	v	class:RubySequencer
icacheGen	./cpu/trace/trace_cpu.hh	/^    FixedRetryGen icacheGen;$/;"	m	class:TraceCPU
icacheNextEvent	./cpu/trace/trace_cpu.hh	/^    EventWrapper<TraceCPU, &TraceCPU::schedIcacheNext> icacheNextEvent;$/;"	m	class:TraceCPU
icachePort	./cpu/checker/cpu.hh	/^    MasterPort *icachePort;$/;"	m	class:CheckerCPU
icachePort	./cpu/minor/fetch1.hh	/^    IcachePort icachePort;$/;"	m	class:Minor::Fetch1
icachePort	./cpu/o3/cpu.hh	/^    IcachePort icachePort;$/;"	m	class:FullO3CPU
icachePort	./cpu/simple/atomic.hh	/^    AtomicCPUPort icachePort;$/;"	m	class:AtomicSimpleCPU
icachePort	./cpu/simple/timing.hh	/^    IcachePort icachePort;$/;"	m	class:TimingSimpleCPU
icachePort	./cpu/trace/trace_cpu.hh	/^    IcachePort icachePort;$/;"	m	class:TraceCPU
icacheRetryRecvd	./cpu/trace/trace_cpu.cc	/^TraceCPU::icacheRetryRecvd()$/;"	f	class:TraceCPU
icacheStallCycles	./cpu/o3/fetch.hh	/^    Stats::Scalar icacheStallCycles;$/;"	m	class:DefaultFetch
icacheStallCycles	./cpu/simple/exec_context.hh	/^    Stats::Scalar icacheStallCycles;$/;"	m	class:SimpleExecContext
icacheState	./cpu/minor/fetch1.hh	/^    IcacheState icacheState;$/;"	m	class:Minor::Fetch1
icache_hit_latency	./mem/ruby/system/Sequencer.py	/^    icache_hit_latency = Param.Cycles(1, "Inst cache hit latency")$/;"	v	class:RubySequencer
icache_port	./cpu/BaseCPU.py	/^    icache_port = MasterPort("Instruction Port")$/;"	v
iccrpr	./dev/arm/gic_pl390.hh	/^    uint32_t iccrpr[CPU_MAX];$/;"	m	class:Pl390
icr	./dev/net/i8254xGBe_defs.hh	/^    ICR icr;$/;"	m	struct:iGbReg::Regs
ics	./arch/mips/mt_constants.hh	/^    Bitfield<16>     ics;$/;"	m	namespace:MipsISA
id	./arch/arm/kvm/arm_cpu.hh	/^        const uint64_t id;$/;"	m	struct:ArmKvmCPU::KvmCoreMiscRegInfo
id	./arch/arm/kvm/arm_cpu.hh	/^        const uint64_t id;$/;"	m	struct:ArmKvmCPU::KvmIntRegInfo
id	./arch/arm/miscregs.hh	/^        Bitfield<33>     id;    \/\/ AArch64$/;"	m	namespace:ArmISA
id	./arch/arm/pmu.hh	/^        const CounterId id;$/;"	m	class:ArmISA::PMU::ProbeListener
id	./arch/sparc/miscregs.hh	/^    Bitfield<11> id;  \/\/ this impl. dependent (id) field m$/;"	m	namespace:SparcISA
id	./arch/x86/bios/IntelMP.py	/^    id = Param.UInt8(0, 'id of this APIC')$/;"	v	class:X86IntelMPIOAPIC
id	./arch/x86/bios/intelmp.hh	/^    uint8_t id;$/;"	m	class:X86ISA::IntelMP::IOAPIC
id	./arch/x86/regs/misc.hh	/^        Bitfield<21> id; \/\/ ID Flag$/;"	m	namespace:X86ISA
id	./base/inet.hh	/^    uint16_t id() const { return ntohs(ip_id); }$/;"	f	struct:Net::IpHdr
id	./base/inet.hh	/^    void id(uint16_t _id) { ip_id = htons(_id); }$/;"	f	struct:Net::IpHdr
id	./base/stats/info.hh	/^    int id;$/;"	m	class:Stats::Info
id	./cpu/minor/dyn_inst.hh	/^    InstId id;$/;"	m	class:Minor::MinorDynInst
id	./cpu/minor/fetch1.hh	/^        InstId id;$/;"	m	class:Minor::Fetch1::FetchRequest
id	./cpu/minor/pipe_data.hh	/^    InstId id;$/;"	m	class:Minor::ForwardLineData
id	./cpu/o3/mem_dep_unit.hh	/^    int id;$/;"	m	class:MemDepUnit
id	./cpu/simple/probes/simpoint.hh	/^        uint64_t id;$/;"	m	struct:SimPoint::BBInfo
id	./cpu/testers/memtest/memtest.hh	/^    unsigned int id;$/;"	m	class:MemTest
id	./cpu/testers/networktest/networktest.hh	/^    int id;$/;"	m	class:NetworkTest
id	./cpu/timebuf.hh	/^    int id()$/;"	f	class:TimeBuffer
id	./cpu/timebuf.hh	/^    void id(int id)$/;"	f	class:TimeBuffer
id	./dev/net/i8254xGBe_defs.hh	/^                    uint16_t id;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon8::__anon9::__anon10
id	./dev/virtio/virtio_ring.h	/^    uint32_t id;$/;"	m	struct:vring_used_elem
id	./dev/x86/i82094aa.hh	/^    uint8_t id;$/;"	m	class:X86ISA::I82094AA
id	./mem/port.hh	/^    const PortID id;$/;"	m	class:Port
id	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.py	/^    id = Param.UInt32("ID in relation to other network interfaces")$/;"	v	class:GarnetNetworkInterface_d
id	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.py	/^    id = Param.UInt32("ID in relation to other network interfaces")$/;"	v	class:GarnetNetworkInterface
id	./mem/ruby/slicc_interface/AbstractController.hh	/^        MachineID id;$/;"	m	struct:AbstractController::SenderState
id	./mem/xbar.hh	/^        PortID id;$/;"	m	struct:BaseXBar::PortCache
id_aa64afr0_el1	./arch/arm/ArmISA.py	/^    id_aa64afr0_el1 = Param.UInt64(0x0000000000000000,$/;"	v	class:ArmISA
id_aa64afr1_el1	./arch/arm/ArmISA.py	/^    id_aa64afr1_el1 = Param.UInt64(0x0000000000000000,$/;"	v	class:ArmISA
id_aa64dfr0_el1	./arch/arm/ArmISA.py	/^    id_aa64dfr0_el1 = Param.UInt64(0x0000000000101006,$/;"	v	class:ArmISA
id_aa64dfr1_el1	./arch/arm/ArmISA.py	/^    id_aa64dfr1_el1 = Param.UInt64(0x0000000000000000,$/;"	v	class:ArmISA
id_aa64isar0_el1	./arch/arm/ArmISA.py	/^    id_aa64isar0_el1 = Param.UInt64(0x0000000000000000,$/;"	v	class:ArmISA
id_aa64isar1_el1	./arch/arm/ArmISA.py	/^    id_aa64isar1_el1 = Param.UInt64(0x0000000000000000,$/;"	v	class:ArmISA
id_aa64mmfr0_el1	./arch/arm/ArmISA.py	/^    id_aa64mmfr0_el1 = Param.UInt64(0x0000000000f00002,$/;"	v	class:ArmISA
id_aa64mmfr1_el1	./arch/arm/ArmISA.py	/^    id_aa64mmfr1_el1 = Param.UInt64(0x0000000000000000,$/;"	v	class:ArmISA
id_aa64pfr0_el1	./arch/arm/ArmISA.py	/^    id_aa64pfr0_el1 = Param.UInt64(0x0000000000000011,$/;"	v	class:ArmISA
id_aa64pfr1_el1	./arch/arm/ArmISA.py	/^    id_aa64pfr1_el1 = Param.UInt64(0x0000000000000000,$/;"	v	class:ArmISA
id_count	./base/statistics.cc	/^int Info::id_count = 0;$/;"	m	class:Stats::Info	file:
id_count	./base/stats/info.hh	/^    static int id_count;$/;"	m	class:Stats::Info
id_isar0	./arch/arm/ArmISA.py	/^    id_isar0 = Param.UInt32(0x02101111, "Instruction Set Attribute Register 0")$/;"	v	class:ArmISA
id_isar1	./arch/arm/ArmISA.py	/^    id_isar1 = Param.UInt32(0x02112111, "Instruction Set Attribute Register 1")$/;"	v	class:ArmISA
id_isar2	./arch/arm/ArmISA.py	/^    id_isar2 = Param.UInt32(0x21232141, "Instruction Set Attribute Register 2")$/;"	v	class:ArmISA
id_isar3	./arch/arm/ArmISA.py	/^    id_isar3 = Param.UInt32(0x01112131, "Instruction Set Attribute Register 3")$/;"	v	class:ArmISA
id_isar4	./arch/arm/ArmISA.py	/^    id_isar4 = Param.UInt32(0x10010142, "Instruction Set Attribute Register 4")$/;"	v	class:ArmISA
id_isar5	./arch/arm/ArmISA.py	/^    id_isar5 = Param.UInt32(0x00000000, "Instruction Set Attribute Register 5")$/;"	v	class:ArmISA
id_mmfr0	./arch/arm/ArmISA.py	/^    id_mmfr0 = Param.UInt32(0x10201103, "Memory Model Feature Register 0")$/;"	v	class:ArmISA
id_mmfr1	./arch/arm/ArmISA.py	/^    id_mmfr1 = Param.UInt32(0x00000000, "Memory Model Feature Register 1")$/;"	v	class:ArmISA
id_mmfr2	./arch/arm/ArmISA.py	/^    id_mmfr2 = Param.UInt32(0x01230000, "Memory Model Feature Register 2")$/;"	v	class:ArmISA
id_mmfr3	./arch/arm/ArmISA.py	/^    id_mmfr3 = Param.UInt32(0x02102211, "Memory Model Feature Register 3")$/;"	v	class:ArmISA
id_pfr0	./arch/arm/ArmISA.py	/^    id_pfr0 = Param.UInt32(0x00000031, "Processor Feature Register 0")$/;"	v	class:ArmISA
id_pfr1	./arch/arm/ArmISA.py	/^    id_pfr1 = Param.UInt32(0x00001011, "Processor Feature Register 1")$/;"	v	class:ArmISA
idc	./arch/arm/miscregs.hh	/^        Bitfield<7> idc;$/;"	m	namespace:ArmISA
idcode	./arch/arm/pmu.hh	/^        Bitfield<23, 16> idcode;$/;"	m	class:ArmISA::PMU
ide	./arch/arm/miscregs.hh	/^        Bitfield<15> ide;$/;"	m	namespace:ArmISA
ide	./dev/net/i8254xGBe_defs.hh	/^inline bool ide(TxDesc *d)  { return bits(d->d2, 31,31) && (getType(d) == TXD_DATA || isLegacy(d)); }$/;"	f	namespace:iGbReg::TxdOp
ide	./dev/x86/SouthBridge.py	/^    ide = IdeController(disks=[], pci_func=0, pci_dev=4, pci_bus=0)$/;"	v	class:SouthBridge
ideConfig	./dev/storage/ide_ctrl.hh	/^    uint16_t ideConfig;$/;"	m	class:IdeController
ident	./base/inet.hh	/^    uint32_t ident;$/;"	m	struct:Net::ip6_opt_fragment
ident	./python/m5/util/code_formatter.py	/^    ident = r'[_A-z]\\w*'$/;"	v	class:code_formatter
idle	./arch/alpha/kernel_stats.hh	/^enum cpu_mode { kernel, user, idle, cpu_mode_num };$/;"	e	enum:AlphaISA::Kernel::cpu_mode
idle	./arch/arm/kernel_stats.hh	/^enum cpu_mode { hypervisor, kernel, user, idle, cpu_mode_num };$/;"	e	enum:ArmISA::Kernel::cpu_mode
idle	./arch/mips/kernel_stats.hh	/^enum cpu_mode { kernel, user, idle, cpu_mode_num };$/;"	e	enum:MipsISA::Kernel::cpu_mode
idle	./arch/power/kernel_stats.hh	/^enum cpu_mode { hypervisor, kernel, user, idle, cpu_mode_num };$/;"	e	enum:PowerISA::Kernel::cpu_mode
idle	./arch/sparc/kernel_stats.hh	/^enum cpu_mode { hypervisor, kernel, user, idle, cpu_mode_num };$/;"	e	enum:SparcISA::Kernel::cpu_mode
idle	./arch/x86/kernel_stats.hh	/^    idle,$/;"	e	enum:X86ISA::Kernel::cpu_mode
idleCycles	./cpu/o3/cpu.hh	/^    Stats::Scalar idleCycles;$/;"	m	class:FullO3CPU
idleCycles	./sim/ticked_object.hh	/^    Stats::Formula idleCycles;$/;"	m	class:Ticked
idleFraction	./cpu/simple/exec_context.hh	/^    Stats::Formula idleFraction;$/;"	m	class:SimpleExecContext
idlePhaseStart	./dev/arm/ufs_device.hh	/^    Tick idlePhaseStart;$/;"	m	class:UFSHostDevice
idleProcess	./arch/alpha/kernel_stats.hh	/^    Addr idleProcess;$/;"	m	class:AlphaISA::Kernel::Statistics
idleRate	./cpu/o3/fetch.hh	/^    Stats::Formula idleRate;$/;"	m	class:DefaultFetch
idleStartEvent	./arch/alpha/linux/system.hh	/^    IdleStartEvent *idleStartEvent;$/;"	m	class:LinuxAlphaSystem
idleTimes	./dev/arm/ufs_device.hh	/^        Stats::Histogram idleTimes;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
idnMax	./base/loader/coff_sym.h	/^    coff_int    idnMax;         \/* max index into dense number table *\/$/;"	m	struct:ecoff_symhdr
idreg	./dev/arm/RealView.py	/^    idreg = Param.UInt32(0x00000000, "ID Register, SYS_ID")$/;"	v	class:RealViewCtrl
idx	./arch/arm/kvm/arm_cpu.hh	/^        const IntRegIndex idx;$/;"	m	struct:ArmKvmCPU::KvmIntRegInfo
idx	./arch/arm/kvm/arm_cpu.hh	/^        const MiscRegIndex idx;$/;"	m	struct:ArmKvmCPU::KvmCoreMiscRegInfo
idx	./arch/arm/kvm/armv8_cpu.hh	/^        IntRegIndex idx;$/;"	m	struct:ArmV8KvmCPU::IntRegInfo
idx	./arch/arm/kvm/armv8_cpu.hh	/^        MiscRegIndex idx;$/;"	m	struct:ArmV8KvmCPU::MiscRegInfo
idx	./arch/x86/insts/static_inst.hh	/^        RegIndex idx;$/;"	m	struct:X86ISA::InstRegIndex
idx	./cpu/o3/fu_pool.hh	/^        int idx;$/;"	m	class:FUPool::FUIdxQueue
idx	./cpu/o3/lsq_unit.hh	/^        uint8_t idx;$/;"	m	class:LSQUnit::LSQSenderState
idx	./dev/virtio/virtio_ring.h	/^    uint16_t idx;$/;"	m	struct:vring_avail
idx	./dev/virtio/virtio_ring.h	/^    uint16_t idx;$/;"	m	struct:vring_used
idx	./mem/ruby/structures/BankedArray.hh	/^        int64_t idx;$/;"	m	class:BankedArray::AccessRecord
idxMask	./cpu/pred/btb.hh	/^    unsigned idxMask;$/;"	m	class:DefaultBTB
idx_len	./base/cp_annotate.hh	/^        uint32_t idx_len;$/;"	m	struct:CPA::AnnotateHeader
idx_off	./base/cp_annotate.hh	/^        uint64_t idx_off;$/;"	m	struct:CPA::AnnotateHeader
ie	./arch/mips/pra_constants.hh	/^    Bitfield<0>      ie;$/;"	m	namespace:MipsISA
ie	./arch/mips/pra_constants.hh	/^    Bitfield<4>     ie;$/;"	m	namespace:MipsISA
ie	./arch/sparc/miscregs.hh	/^    Bitfield<1> ie;$/;"	m	namespace:SparcISA
ie	./arch/sparc/pagetable.hh	/^    bool ie()       const { return bits(entry4u, 59,59); }$/;"	f	class:SparcISA::PageTableEntry
ier	./dev/net/ns_gige.hh	/^    uint32_t    ier;$/;"	m	struct:dp_regs
iew	./cpu/o3/cpu.hh	/^    typename CPUPolicy::IEW iew;$/;"	m	class:FullO3CPU
iew	./cpu/o3/rename.hh	/^        bool iew;$/;"	m	struct:DefaultRename::Stalls
iewBlock	./cpu/o3/comm.hh	/^    bool iewBlock[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
iewBlockCycles	./cpu/o3/iew.hh	/^    Stats::Scalar iewBlockCycles;$/;"	m	class:DefaultIEW
iewComm	./cpu/o3/comm.hh	/^    struct iewComm {$/;"	s	struct:TimeBufStruct
iewDispLoadInsts	./cpu/o3/iew.hh	/^    Stats::Scalar iewDispLoadInsts;$/;"	m	class:DefaultIEW
iewDispNonSpecInsts	./cpu/o3/iew.hh	/^    Stats::Scalar iewDispNonSpecInsts;$/;"	m	class:DefaultIEW
iewDispSquashedInsts	./cpu/o3/iew.hh	/^    Stats::Scalar iewDispSquashedInsts;$/;"	m	class:DefaultIEW
iewDispStoreInsts	./cpu/o3/iew.hh	/^    Stats::Scalar iewDispStoreInsts;$/;"	m	class:DefaultIEW
iewDispatchedInsts	./cpu/o3/iew.hh	/^    Stats::Scalar iewDispatchedInsts;$/;"	m	class:DefaultIEW
iewExecLoadInsts	./cpu/o3/iew.hh	/^    Stats::Vector iewExecLoadInsts;$/;"	m	class:DefaultIEW
iewExecRate	./cpu/o3/iew.hh	/^    Stats::Formula iewExecRate;$/;"	m	class:DefaultIEW
iewExecSquashedInsts	./cpu/o3/iew.hh	/^    Stats::Scalar iewExecSquashedInsts;$/;"	m	class:DefaultIEW
iewExecStoreInsts	./cpu/o3/iew.hh	/^    Stats::Formula iewExecStoreInsts;$/;"	m	class:DefaultIEW
iewExecutedBranches	./cpu/o3/iew.hh	/^    Stats::Vector iewExecutedBranches;$/;"	m	class:DefaultIEW
iewExecutedInsts	./cpu/o3/iew.hh	/^    Stats::Scalar iewExecutedInsts;$/;"	m	class:DefaultIEW
iewExecutedNop	./cpu/o3/iew.hh	/^    Stats::Vector iewExecutedNop;$/;"	m	class:DefaultIEW
iewExecutedRefs	./cpu/o3/iew.hh	/^    Stats::Vector iewExecutedRefs;$/;"	m	class:DefaultIEW
iewExecutedSwp	./cpu/o3/iew.hh	/^    Stats::Vector iewExecutedSwp;$/;"	m	class:DefaultIEW
iewIQFullEvents	./cpu/o3/iew.hh	/^    Stats::Scalar iewIQFullEvents;$/;"	m	class:DefaultIEW
iewIdleCycles	./cpu/o3/iew.hh	/^    Stats::Scalar iewIdleCycles;$/;"	m	class:DefaultIEW
iewInfo	./cpu/o3/comm.hh	/^    iewComm iewInfo[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
iewInstsToCommit	./cpu/o3/iew.hh	/^    Stats::Vector iewInstsToCommit;$/;"	m	class:DefaultIEW
iewLSQFullEvents	./cpu/o3/iew.hh	/^    Stats::Scalar iewLSQFullEvents;$/;"	m	class:DefaultIEW
iewQueue	./cpu/o3/commit.hh	/^    TimeBuffer<IEWStruct> *iewQueue;$/;"	m	class:DefaultCommit
iewQueue	./cpu/o3/cpu.hh	/^    TimeBuffer<IEWStruct> iewQueue;$/;"	m	class:FullO3CPU
iewQueue	./cpu/o3/iew.hh	/^    TimeBuffer<IEWStruct> *iewQueue;$/;"	m	class:DefaultIEW
iewSquashCycles	./cpu/o3/iew.hh	/^    Stats::Scalar iewSquashCycles;$/;"	m	class:DefaultIEW
iewStage	./cpu/o3/commit.hh	/^    IEW *iewStage;$/;"	m	class:DefaultCommit
iewStage	./cpu/o3/inst_queue.hh	/^    IEW *iewStage;$/;"	m	class:InstructionQueue
iewStage	./cpu/o3/lsq.hh	/^    IEW *iewStage;$/;"	m	class:LSQ
iewStage	./cpu/o3/lsq_unit.hh	/^    IEW *iewStage;$/;"	m	class:LSQUnit
iewToCommitDelay	./cpu/o3/O3CPU.py	/^    iewToCommitDelay = Param.Cycles(1, "Issue\/Execute\/Writeback to commit "$/;"	v	class:DerivO3CPU
iewToCommitDelay	./cpu/o3/commit.hh	/^    const Cycles iewToCommitDelay;$/;"	m	class:DefaultCommit
iewToDecodeDelay	./cpu/o3/O3CPU.py	/^    iewToDecodeDelay = Param.Cycles(1, "Issue\/Execute\/Writeback to decode "$/;"	v	class:DerivO3CPU
iewToDecodeDelay	./cpu/o3/decode.hh	/^    Cycles iewToDecodeDelay;$/;"	m	class:DefaultDecode
iewToFetchDelay	./cpu/o3/O3CPU.py	/^    iewToFetchDelay = Param.Cycles(1, "Issue\/Execute\/Writeback to fetch "$/;"	v	class:DerivO3CPU
iewToFetchDelay	./cpu/o3/fetch.hh	/^    Cycles iewToFetchDelay;$/;"	m	class:DefaultFetch
iewToRenameDelay	./cpu/o3/O3CPU.py	/^    iewToRenameDelay = Param.Cycles(1, "Issue\/Execute\/Writeback to rename "$/;"	v	class:DerivO3CPU
iewToRenameDelay	./cpu/o3/rename.hh	/^    int iewToRenameDelay;$/;"	m	class:DefaultRename
iewUnblock	./cpu/o3/comm.hh	/^    bool iewUnblock[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
iewUnblockCycles	./cpu/o3/iew.hh	/^    Stats::Scalar iewUnblockCycles;$/;"	m	class:DefaultIEW
iew_ptr	./cpu/o3/rename.hh	/^    IEW *iew_ptr;$/;"	m	class:DefaultRename
iexi	./arch/mips/dt_constants.hh	/^    Bitfield<20, 19> iexi;$/;"	m	namespace:MipsISA
iextMax	./base/loader/coff_sym.h	/^    coff_int    iextMax;        \/* max index into external symbols *\/$/;"	m	struct:ecoff_symhdr
ifcs	./dev/net/i8254xGBe_defs.hh	/^inline bool ifcs(TxDesc *d) { assert(isLegacy(d) || isData(d)); return bits(d->d2, 25,25); }$/;"	f	namespace:iGbReg::TxdOp
ifd	./base/loader/coff_sym.h	/^    coff_int ifd;               \/* where the iss and index fields point into *\/$/;"	m	struct:ecoff_extsym
ifdMax	./base/loader/coff_sym.h	/^    coff_int    ifdMax;         \/* number of file descriptor entries *\/$/;"	m	struct:ecoff_symhdr
ifdNil	./base/loader/coff_sym.h	177;"	d
ifdNil	./base/loader/coff_sym.h	438;"	d
ifdTemp	./base/loader/coff_sym.h	178;"	d
ifetch_pkt	./cpu/simple/timing.hh	/^    PacketPtr ifetch_pkt;$/;"	m	class:TimingSimpleCPU
ifetch_req	./cpu/simple/atomic.hh	/^    Request ifetch_req;$/;"	m	class:AtomicSimpleCPU
ifiNil	./base/loader/coff_sym.h	434;"	d
ifiNil	./base/loader/coff_sym.h	450;"	d
ifls	./dev/arm/pl011.hh	/^    uint16_t ifls;$/;"	m	class:Pl011
igbe	./dev/net/i8254xGBe.hh	/^        IGbE *igbe;$/;"	m	class:IGbE::DescCache
ignne	./arch/x86/regs/misc.hh	/^        Bitfield<0> ignne;$/;"	m	namespace:X86ISA
ignore	./base/trace.cc	/^ObjectMatch ignore;$/;"	m	namespace:Trace	file:
ignore	./base/trace.hh	/^    ObjectMatch ignore;$/;"	m	class:Trace::Logger
ignoreFunc	./sim/syscall_emul.cc	/^ignoreFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
ignoreSymbols	./base/cp_annotate.cc	/^CPAIgnoreSymbol ignoreSymbols[] = {$/;"	v
ignore_access	./dev/arm/RealView.py	/^    ignore_access = Param.Bool(False, "Ignore reads\/writes to this device, (e.g. IsaFake + AMBA)")$/;"	v	class:AmbaFake
ihr	./dev/net/ns_gige.hh	/^    uint32_t    ihr;$/;"	m	struct:dp_regs
ihs	./dev/arm/pl111.hh	/^        Bitfield<12> ihs;$/;"	m	class:Pl111
il	./arch/arm/miscregs.hh	/^        Bitfield<20> il;        \/\/ AArch64$/;"	m	namespace:ArmISA
il	./arch/arm/miscregs.hh	/^        Bitfield<25> il;$/;"	m	namespace:ArmISA
il	./arch/mips/pra_constants.hh	/^    Bitfield<21, 19> il;$/;"	m	namespace:MipsISA
iline	./base/loader/coff_sym.h	/^    coff_int    iline;          \/* start of line number entries*\/$/;"	m	struct:pdr
ilineBase	./base/loader/coff_sym.h	/^    coff_int    ilineBase;      \/* file's line symbols *\/$/;"	m	struct:ecoff_fdr
ilineMax	./base/loader/coff_sym.h	/^    coff_int    ilineMax;       \/* number of line number entries *\/$/;"	m	struct:ecoff_symhdr
ilineNil	./base/loader/coff_sym.h	259;"	d
ilineNil	./base/loader/coff_sym.h	441;"	d
ilnNil	./base/loader/coff_sym.h	179;"	d
ilnNil	./base/loader/coff_sym.h	439;"	d
im0	./arch/mips/pra_constants.hh	/^        Bitfield<8>  im0;$/;"	m	namespace:MipsISA
im1	./arch/mips/pra_constants.hh	/^        Bitfield<9>  im1;$/;"	m	namespace:MipsISA
im2	./arch/mips/pra_constants.hh	/^        Bitfield<10> im2;$/;"	m	namespace:MipsISA
im3	./arch/mips/pra_constants.hh	/^        Bitfield<11> im3;$/;"	m	namespace:MipsISA
im4	./arch/mips/pra_constants.hh	/^        Bitfield<12> im4;$/;"	m	namespace:MipsISA
im5	./arch/mips/pra_constants.hh	/^        Bitfield<13> im5;$/;"	m	namespace:MipsISA
im6	./arch/mips/pra_constants.hh	/^        Bitfield<14> im6;$/;"	m	namespace:MipsISA
im7	./arch/mips/pra_constants.hh	/^        Bitfield<15> im7;$/;"	m	namespace:MipsISA
image	./dev/arm/UFSHostDevice.py	/^    image = VectorParam.DiskImage("Disk images")$/;"	v	class:UFSHostDevice
image	./dev/sparc/T1000.py	/^    image = Param.DiskImage("Disk Image")$/;"	v	class:MmDisk
image	./dev/sparc/mm_disk.hh	/^    DiskImage *image;$/;"	m	class:MmDisk
image	./dev/storage/Ide.py	/^    image = Param.DiskImage("Disk image")$/;"	v	class:IdeDisk
image	./dev/storage/disk_image.cc	/^    CowDiskImage *image;$/;"	m	class:CowDiskCallback	file:
image	./dev/storage/ide_disk.hh	/^    DiskImage *image;$/;"	m	class:IdeDisk
image	./dev/storage/simple_disk.hh	/^    DiskImage *image;$/;"	m	class:SimpleDisk
image	./dev/virtio/VirtIOBlock.py	/^    image = Param.DiskImage("Disk image")$/;"	v	class:VirtIOBlock
image	./dev/virtio/block.hh	/^    DiskImage &image;$/;"	m	class:VirtIOBlock
image_file	./dev/storage/DiskImage.py	/^    image_file = ""$/;"	v	class:CowDiskImage
image_file	./dev/storage/DiskImage.py	/^    image_file = Param.String("disk image file")$/;"	v	class:DiskImage
imap	./sim/process.hh	/^    std::map<std::string, int> imap;$/;"	m	class:Process
imask	./dev/arm/generic_timer.hh	/^    Bitfield<1> imask;$/;"	m	class:ArchTimer
imb	./arch/alpha/osfpal.hh	/^        imb = 0x86,$/;"	e	enum:PAL::__anon50
imcrPresent	./arch/x86/bios/intelmp.hh	/^    bool imcrPresent;$/;"	m	class:X86ISA::IntelMP::FloatingPointer
imcr_present	./arch/x86/bios/IntelMP.py	/^    imcr_present = Param.Bool(True,$/;"	v	class:X86IntelMPFloatingPointer
img_blk_size	./dev/arm/UFSHostDevice.py	/^    img_blk_size = Param.UInt32(512, "Size of one image block in bytes")$/;"	v	class:UFSHostDevice
imm	./arch/arm/insts/branch.hh	/^    int32_t imm;$/;"	m	class:ArmISA::BranchImm
imm	./arch/arm/insts/branch.hh	/^    int32_t imm;$/;"	m	class:ArmISA::BranchImmReg
imm	./arch/arm/insts/branch64.hh	/^    int64_t imm;$/;"	m	class:ArmISA::BranchImm64
imm	./arch/arm/insts/branch64.hh	/^    int64_t imm;$/;"	m	class:ArmISA::BranchImmReg64
imm	./arch/arm/insts/data64.hh	/^    uint64_t imm;$/;"	m	class:ArmISA::DataX1RegImmOp
imm	./arch/arm/insts/data64.hh	/^    uint64_t imm;$/;"	m	class:ArmISA::DataX2RegImmOp
imm	./arch/arm/insts/data64.hh	/^    uint64_t imm;$/;"	m	class:ArmISA::DataXCondCompImmOp
imm	./arch/arm/insts/data64.hh	/^    uint64_t imm;$/;"	m	class:ArmISA::DataXImmOnlyOp
imm	./arch/arm/insts/data64.hh	/^    uint64_t imm;$/;"	m	class:ArmISA::DataXImmOp
imm	./arch/arm/insts/macromem.hh	/^    int32_t imm;$/;"	m	class:ArmISA::MicroIntImmOp
imm	./arch/arm/insts/macromem.hh	/^    int32_t imm;$/;"	m	class:ArmISA::MicroMemPairOp
imm	./arch/arm/insts/macromem.hh	/^    int64_t imm;$/;"	m	class:ArmISA::MicroIntImmXOp
imm	./arch/arm/insts/macromem.hh	/^    uint32_t imm;$/;"	m	class:ArmISA::MicroNeonMemOp
imm	./arch/arm/insts/mem.hh	/^    int32_t imm;$/;"	m	class:ArmISA::MemoryImm
imm	./arch/arm/insts/mem64.hh	/^    int64_t imm;$/;"	m	class:ArmISA::MemoryImm64
imm	./arch/arm/insts/mem64.hh	/^    int64_t imm;$/;"	m	class:ArmISA::MemoryLiteral64
imm	./arch/arm/insts/mem64.hh	/^    uint64_t imm;$/;"	m	class:ArmISA::SysDC64
imm	./arch/arm/insts/misc.hh	/^    uint32_t    imm;$/;"	m	class:McrrOp
imm	./arch/arm/insts/misc.hh	/^    uint32_t    imm;$/;"	m	class:MrrcOp
imm	./arch/arm/insts/misc.hh	/^    uint32_t imm;$/;"	m	class:MsrImmOp
imm	./arch/arm/insts/misc.hh	/^    uint64_t imm;$/;"	m	class:ImmOp
imm	./arch/arm/insts/misc.hh	/^    uint64_t imm;$/;"	m	class:MiscRegRegImmOp
imm	./arch/arm/insts/misc.hh	/^    uint64_t imm;$/;"	m	class:RegImmOp
imm	./arch/arm/insts/misc.hh	/^    uint64_t imm;$/;"	m	class:RegImmRegOp
imm	./arch/arm/insts/misc.hh	/^    uint64_t imm;$/;"	m	class:RegImmRegShiftOp
imm	./arch/arm/insts/misc.hh	/^    uint64_t imm;$/;"	m	class:RegMiscRegImmOp
imm	./arch/arm/insts/misc.hh	/^    uint64_t imm;$/;"	m	class:RegRegImmOp
imm	./arch/arm/insts/misc.hh	/^    uint64_t imm;$/;"	m	class:RegRegRegImmOp
imm	./arch/arm/insts/misc64.hh	/^    uint64_t imm;$/;"	m	class:RegRegRegImmOp64
imm	./arch/arm/insts/pred_inst.hh	/^    uint32_t imm;$/;"	m	class:ArmISA::DataImmOp
imm	./arch/arm/insts/pred_inst.hh	/^    uint32_t imm;$/;"	m	class:ArmISA::PredImmOp
imm	./arch/arm/insts/vfp.hh	/^    uint64_t imm;$/;"	m	class:ArmISA::FpRegImmOp
imm	./arch/arm/insts/vfp.hh	/^    uint64_t imm;$/;"	m	class:ArmISA::FpRegRegImmOp
imm	./arch/arm/insts/vfp.hh	/^    uint64_t imm;$/;"	m	class:ArmISA::FpRegRegRegImmOp
imm	./arch/arm/types.hh	/^        Bitfield<7, 0> imm;$/;"	m	namespace:ArmISA
imm	./arch/power/insts/integer.hh	/^    int32_t imm;$/;"	m	class:PowerISA::IntImmOp
imm1	./arch/arm/insts/branch64.hh	/^    int64_t imm1;$/;"	m	class:ArmISA::BranchImmImmReg64
imm1	./arch/arm/insts/data64.hh	/^    uint64_t imm1, imm2;$/;"	m	class:ArmISA::DataX1Reg2ImmOp
imm1	./arch/arm/insts/misc.hh	/^    uint64_t imm1;$/;"	m	class:RegImmImmOp
imm1	./arch/arm/insts/misc.hh	/^    uint64_t imm1;$/;"	m	class:RegRegImmImmOp
imm1	./arch/arm/insts/misc64.hh	/^    uint64_t imm1;$/;"	m	class:RegRegImmImmOp64
imm16	./arch/arm/miscregs.hh	/^        Bitfield<15, 0> imm16;$/;"	m	namespace:ArmISA
imm2	./arch/arm/insts/branch64.hh	/^    int64_t imm2;$/;"	m	class:ArmISA::BranchImmImmReg64
imm2	./arch/arm/insts/data64.hh	/^    uint64_t imm1, imm2;$/;"	m	class:ArmISA::DataX1Reg2ImmOp
imm2	./arch/arm/insts/misc.hh	/^    uint64_t imm2;$/;"	m	class:RegImmImmOp
imm2	./arch/arm/insts/misc.hh	/^    uint64_t imm2;$/;"	m	class:RegRegImmImmOp
imm2	./arch/arm/insts/misc64.hh	/^    uint64_t imm2;$/;"	m	class:RegRegImmImmOp64
imm8	./arch/x86/insts/micromediaop.hh	/^        uint8_t imm8;$/;"	m	class:X86ISA::MediaOpImm
imm8	./arch/x86/insts/microregop.hh	/^        const uint8_t imm8;$/;"	m	class:X86ISA::RegOpImm
immed11_0	./arch/arm/types.hh	/^        Bitfield<11, 0>  immed11_0;$/;"	m	namespace:ArmISA
immed23_0	./arch/arm/types.hh	/^        Bitfield<23, 0>  immed23_0;$/;"	m	namespace:ArmISA
immed7_0	./arch/arm/types.hh	/^        Bitfield<7,  0>  immed7_0;$/;"	m	namespace:ArmISA
immedHi11_8	./arch/arm/types.hh	/^        Bitfield<11, 8>  immedHi11_8;$/;"	m	namespace:ArmISA
immedLo3_0	./arch/arm/types.hh	/^        Bitfield<3,  0>  immedLo3_0;$/;"	m	namespace:ArmISA
immediate	./arch/x86/types.hh	/^        uint64_t immediate;$/;"	m	struct:X86ISA::ExtMachInst
immediate	./dev/net/dist_packet.hh	/^    enum class ReqType { immediate, collective, pending, none };$/;"	m	class:DistHeaderPkt::ReqType
immediateCollected	./arch/x86/decoder.hh	/^    int immediateCollected;$/;"	m	class:X86ISA::Decoder
immediateSize	./arch/x86/decoder.hh	/^    int immediateSize;$/;"	m	class:X86ISA::Decoder
imo	./arch/arm/miscregs.hh	/^        Bitfield<4>      imo;$/;"	m	namespace:ArmISA
imp	./arch/arm/pmu.hh	/^        Bitfield<31, 24> imp;$/;"	m	class:ArmISA::PMU
impl	./arch/mips/mt_constants.hh	/^    Bitfield<19, 16> impl;$/;"	m	namespace:MipsISA
impl	./arch/mips/pra_constants.hh	/^    Bitfield<17, 16> impl;$/;"	m	namespace:MipsISA
impl	./arch/mips/pra_constants.hh	/^    Bitfield<24, 16> impl;$/;"	m	namespace:MipsISA
impl	./arch/mips/pra_constants.hh	/^    Bitfield<24, 22> impl;$/;"	m	namespace:MipsISA
impl	./arch/mips/pra_constants.hh	/^    Bitfield<31, 30> impl;$/;"	m	namespace:MipsISA
impl	./arch/mips/pra_constants.hh	/^    Bitfield<4,  3> impl;$/;"	m	namespace:MipsISA
importer	./python/importer.py	/^importer = CodeImporter()$/;"	v
importer	./sim/init.hh	/^    static EmbeddedPython *importer;$/;"	m	struct:EmbeddedPython
importerModule	./sim/init.cc	/^PyObject *EmbeddedPython::importerModule = NULL;$/;"	m	class:EmbeddedPython	file:
importerModule	./sim/init.hh	/^    static PyObject *importerModule;$/;"	m	struct:EmbeddedPython
imr	./dev/net/i8254xGBe_defs.hh	/^    uint32_t imr; \/\/ register that contains the current interrupt mask$/;"	m	struct:iGbReg::Regs
imr	./dev/net/ns_gige.hh	/^    uint32_t    imr;$/;"	m	struct:dp_regs
imsc	./dev/arm/pl011.hh	/^    uint16_t imsc;$/;"	m	class:Pl011
in	./dev/terminal.cc	/^Terminal::in()$/;"	f	class:Terminal
inAArch64	./arch/arm/utility.cc	/^inAArch64(ThreadContext *tc)$/;"	f	namespace:ArmISA
inAddrMap	./mem/abstract_mem.hh	/^    bool inAddrMap;$/;"	m	class:AbstractMemory
inCache	./mem/cache/prefetch/base.cc	/^BasePrefetcher::inCache(Addr addr, bool is_secure) const$/;"	f	class:BasePrefetcher
inCache	./mem/cache/tags/fa_lru.hh	/^    int inCache;$/;"	m	class:FALRUBlk
inDrain	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::inDrain()$/;"	f	class:CopyEngine::CopyEngineChannel
inExpectedData	./mem/mem_checker.cc	/^MemChecker::ByteTracker::inExpectedData(Tick start, Tick complete, uint8_t data)$/;"	f	class:MemChecker::ByteTracker
inFUMemInsts	./cpu/minor/execute.hh	/^    Queue<QueuedInst, ReportTraitsAdaptor<QueuedInst> > *inFUMemInsts;$/;"	m	class:Minor::Execute
inFlightInsts	./cpu/minor/execute.hh	/^    Queue<QueuedInst, ReportTraitsAdaptor<QueuedInst> > *inFlightInsts;$/;"	m	class:Minor::Execute
inFlightNodes	./cpu/trace/trace_cpu.hh	/^            std::map<NodeSeqNum, NodeRobNum> inFlightNodes;$/;"	m	class:TraceCPU::ElasticDataGen::HardwareResource
inLSQ	./cpu/minor/dyn_inst.hh	/^    bool inLSQ;$/;"	m	class:Minor::MinorDynInst
inMacroop	./cpu/minor/decode.hh	/^    bool inMacroop;$/;"	m	class:Minor::Decode
inMemorySystemLimit	./cpu/minor/lsq.hh	/^    const unsigned int inMemorySystemLimit;$/;"	m	class:Minor::LSQ
inMissQueue	./mem/cache/prefetch/base.cc	/^BasePrefetcher::inMissQueue(Addr addr, bool is_secure) const$/;"	f	class:BasePrefetcher
inNetLink	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    NetworkLink_d *inNetLink;$/;"	m	class:NetworkInterface_d
inNetLink	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	/^    NetworkLink *inNetLink;$/;"	m	class:NetworkInterface
inNode_ptr	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    std::vector<MessageBuffer *> inNode_ptr;$/;"	m	class:NetworkInterface_d
inNode_ptr	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	/^    std::vector<MessageBuffer *> inNode_ptr;$/;"	m	class:NetworkInterface
inParallelMode	./sim/eventq.cc	/^bool inParallelMode = false;$/;"	v
inPrefetch	./mem/cache/prefetch/queued.cc	/^QueuedPrefetcher::inPrefetch(Addr address, bool is_secure) const$/;"	f	class:QueuedPrefetcher
inPrivilegedMode	./arch/arm/utility.hh	/^inPrivilegedMode(CPSR cpsr)$/;"	f	namespace:ArmISA
inPrivilegedMode	./arch/arm/utility.hh	/^inPrivilegedMode(ThreadContext *tc)$/;"	f	namespace:ArmISA
inRange	./mem/cache/base.cc	/^BaseCache::inRange(Addr addr) const$/;"	f	class:BaseCache
inRetry	./dev/dma_device.hh	/^    bool inRetry;$/;"	m	class:DmaPort
inScalarBank	./arch/arm/insts/vfp.hh	/^    inScalarBank(IntRegIndex idx)$/;"	f	class:ArmISA::VfpMacroOp
inSecureState	./arch/arm/utility.cc	/^inSecureState(ThreadContext *tc)$/;"	f	namespace:ArmISA
inSecureState	./arch/arm/utility.hh	/^inSecureState(SCR scr, CPSR cpsr)$/;"	f	namespace:ArmISA
inService	./mem/cache/mshr.hh	/^    bool inService;$/;"	m	class:MSHR
inServiceEntries	./mem/cache/mshr_queue.hh	/^    int inServiceEntries;$/;"	m	class:MSHRQueue
inStoreBuffer	./cpu/minor/dyn_inst.hh	/^    bool inStoreBuffer;$/;"	m	class:Minor::MinorDynInst
inUserMode	./arch/alpha/utility.hh	/^inUserMode(ThreadContext *tc)$/;"	f	namespace:AlphaISA
inUserMode	./arch/arm/utility.hh	/^inUserMode(CPSR cpsr)$/;"	f	namespace:ArmISA
inUserMode	./arch/arm/utility.hh	/^inUserMode(ThreadContext *tc)$/;"	f	namespace:ArmISA
inUserMode	./arch/mips/utility.hh	/^inUserMode(ThreadContext *tc)$/;"	f	namespace:MipsISA
inUserMode	./arch/power/utility.hh	/^inUserMode(ThreadContext *tc)$/;"	f	namespace:PowerISA
inUserMode	./arch/sparc/utility.hh	/^inUserMode(ThreadContext *tc)$/;"	f	namespace:SparcISA
inUserMode	./arch/x86/utility.hh	/^    inUserMode(ThreadContext *tc)$/;"	f	namespace:X86ISA
inVisit	./sim/cxx_manager.hh	/^    std::set<std::string> inVisit;$/;"	m	class:CxxConfigManager
in_addr_map	./mem/AbstractMemory.py	/^    in_addr_map = Param.Bool(True, "Memory part of the global address map")$/;"	v	class:AbstractMemory
inc	./base/statistics.hh	/^    void inc(Counter val) { data += val; }$/;"	f	class:Stats::StatStor
inc	./base/statistics.hh	/^    void inc(Counter val) { set(current + val); }$/;"	f	class:Stats::AvgStor
incAccessDepth	./mem/request.hh	/^    void incAccessDepth() const { depth++; }$/;"	f	class:Request
incHitCount	./mem/cache/base.hh	/^    void incHitCount(PacketPtr pkt)$/;"	f	class:BaseCache
incMissCount	./mem/cache/base.hh	/^    void incMissCount(PacketPtr pkt)$/;"	f	class:BaseCache
incWorkItemsBegin	./sim/system.hh	/^    incWorkItemsBegin()$/;"	f	class:System
incWorkItemsEnd	./sim/system.hh	/^    incWorkItemsEnd()$/;"	f	class:System
includeRE	./arch/isa_parser.py	/^    includeRE = re.compile(r'^\\s*##include\\s+"(?P<filename>[^"]*)".*$',$/;"	v	class:ISAParser
includeSquashInst	./cpu/o3/comm.hh	/^    bool includeSquashInst[Impl::MaxThreads];$/;"	m	struct:DefaultIEWDefaultCommit
incoming_link	./mem/ruby/slicc_interface/Message.hh	/^    int incoming_link;$/;"	m	class:Message
incr	./kern/tru64/tru64.hh	/^        size_t  incr;           \/\/!< growth increment$/;"	m	struct:Tru64::vm_stack
incrFullStat	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::incrFullStat(const FullSource &source)$/;"	f	class:DefaultRename
incrLdIdx	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::incrLdIdx(int &load_idx) const$/;"	f	class:LSQUnit
incrStIdx	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::incrStIdx(int &store_idx) const$/;"	f	class:LSQUnit
incrTos	./cpu/pred/ras.hh	/^    inline void incrTos()$/;"	f	class:ReturnAddrStack
incref	./base/refcnt.hh	/^    void incref() { ++count; }$/;"	f	class:RefCounted
incref	./python/swig/pyevent.hh	/^    void incref() { Py_INCREF(object); }$/;"	f	class:PythonEvent
increment	./cpu/pred/sat_counter.hh	/^    void increment()$/;"	f	class:SatCounter
increment	./mem/ruby/filters/BlockBloomFilter.cc	/^BlockBloomFilter::increment(Addr addr)$/;"	f	class:BlockBloomFilter
increment	./mem/ruby/filters/BulkBloomFilter.cc	/^BulkBloomFilter::increment(Addr addr)$/;"	f	class:BulkBloomFilter
increment	./mem/ruby/filters/H3BloomFilter.cc	/^H3BloomFilter::increment(Addr addr)$/;"	f	class:H3BloomFilter
increment	./mem/ruby/filters/LSB_CountingBloomFilter.cc	/^LSB_CountingBloomFilter::increment(Addr addr)$/;"	f	class:LSB_CountingBloomFilter
increment	./mem/ruby/filters/MultiBitSelBloomFilter.cc	/^MultiBitSelBloomFilter::increment(Addr addr)$/;"	f	class:MultiBitSelBloomFilter
increment	./mem/ruby/filters/MultiGrainBloomFilter.cc	/^MultiGrainBloomFilter::increment(Addr addr)$/;"	f	class:MultiGrainBloomFilter
increment	./mem/ruby/filters/NonCountingBloomFilter.cc	/^NonCountingBloomFilter::increment(Addr addr)$/;"	f	class:NonCountingBloomFilter
incrementCheckCompletions	./cpu/testers/rubytest/RubyTester.hh	/^    void incrementCheckCompletions() { m_checks_completed++; }$/;"	f	class:RubyTester
incrementCycleCompletions	./cpu/testers/directedtest/RubyDirectedTester.hh	/^    void incrementCycleCompletions() { m_requests_completed++; }$/;"	f	class:RubyDirectedTester
increment_credit	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    increment_credit(int in_vc, bool free_signal, Cycles curTime)$/;"	f	class:InputUnit_d
increment_credit	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.hh	/^    inline void increment_credit()  { m_credit_count++; }$/;"	f	class:OutVcState_d
increment_credit	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    inline void increment_credit()          { m_credit_count++; }$/;"	f	class:VirtualChannel_d
increment_injected_flits	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    void increment_injected_flits(int vnet) { m_flits_injected[vnet]++; }$/;"	f	class:BaseGarnetNetwork
increment_network_latency	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    increment_network_latency(Cycles latency, int vnet)$/;"	f	class:BaseGarnetNetwork
increment_queueing_latency	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    increment_queueing_latency(Cycles latency, int vnet)$/;"	f	class:BaseGarnetNetwork
increment_received_flits	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    void increment_received_flits(int vnet) { m_flits_received[vnet]++; }$/;"	f	class:BaseGarnetNetwork
incremental	./base/vnc/vncinput.hh	/^        uint8_t incremental;$/;"	m	struct:VncInput::FrameBufferUpdateReq
indent	./arch/isa_parser.py	/^def indent(s):$/;"	f
indent	./python/m5/util/code_formatter.py	/^    def indent(self, count=1):$/;"	m	class:code_formatter
indent_lines	./python/m5/util/code_formatter.py	/^                def indent_lines(gen):$/;"	f	function:code_formatter.__call__.convert
index	./arch/alpha/tlb.cc	/^TLB::index(bool advance)$/;"	f	class:AlphaISA::TLB
index	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, index;$/;"	m	class:ArmISA::VldSingleOp64
index	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, index;$/;"	m	class:ArmISA::VstSingleOp64
index	./arch/arm/insts/mem.hh	/^    IntRegIndex index;$/;"	m	class:ArmISA::MemoryReg
index	./arch/arm/isa.hh	/^            uint32_t index;$/;"	m	struct:ArmISA::ISA::MiscRegInitializerEntry
index	./arch/mips/pra_constants.hh	/^    Bitfield<22, 0>  index;$/;"	m	namespace:MipsISA
index	./arch/mips/pra_constants.hh	/^    Bitfield<30, 0> index;$/;"	m	namespace:MipsISA
index	./arch/mips/tlb.cc	/^TLB::index(bool advance)$/;"	f	class:TLB
index	./arch/power/tlb.cc	/^TLB::index(bool advance)$/;"	f	class:TLB
index	./arch/x86/emulenv.hh	/^        RegIndex index;$/;"	m	struct:X86ISA::EmulEnv
index	./arch/x86/insts/microldstop.hh	/^        const RegIndex index;$/;"	m	class:X86ISA::LdStOp
index	./arch/x86/types.hh	/^        Bitfield<5,3> index;$/;"	m	namespace:X86ISA
index	./base/loader/coff_sym.h	/^    coff_uint   index;  \/* index int sym\/aux\/iss tables *\/$/;"	m	struct:__anon114
index	./base/loader/coff_sym.h	/^    unsigned    index : 20; \/* index int sym\/aux\/iss tables *\/$/;"	m	struct:__anon113
index	./base/loader/coff_sym.h	/^    unsigned index : 20;        \/* index into sym\/aux table *\/$/;"	m	struct:ecoff_sym
index	./base/statistics.hh	/^    off_type index;$/;"	m	class:Stats::DistProxy
index	./base/statistics.hh	/^    off_type index;$/;"	m	class:Stats::ScalarProxy
index	./cpu/TimingExpr.py	/^    index = Param.Unsigned("expression index")$/;"	v	class:TimingExprRef
index	./cpu/TimingExpr.py	/^    index = Param.Unsigned("index into inst src regs")$/;"	v	class:TimingExprSrcReg
index	./cpu/simple/timing.hh	/^        int index;$/;"	m	class:TimingSimpleCPU::SplitFragmentSenderState
index	./cpu/timebuf.hh	/^        int index;$/;"	m	class:TimeBuffer::wire
index	./cpu/timebuf.hh	/^    std::vector<char *> index;$/;"	m	class:TimeBuffer
index	./cpu/timing_expr.hh	/^    unsigned int index;$/;"	m	class:TimingExprRef
index	./cpu/timing_expr.hh	/^    unsigned int index;$/;"	m	class:TimingExprSrcReg
index	./cpu/translation.hh	/^    int index;$/;"	m	class:DataTranslation
index	./dev/virtio/base.hh	/^            Index index;$/;"	m	struct:VirtQueue::VirtRing::Header
index	./dev/virtio/base.hh	/^    Index index() const { return _index; }$/;"	f	class:VirtDescriptor
index	./mem/cache/mshr_queue.hh	/^    const int index;$/;"	m	class:MSHRQueue
index	./mem/stack_dist_calc.hh	/^    uint64_t index;$/;"	m	class:StackDistCalc
indexMask	./cpu/o3/store_set.hh	/^    int indexMask;$/;"	m	class:StoreSet
indexMask	./cpu/pred/2bit_local.hh	/^    unsigned indexMask;$/;"	m	class:LocalBP
indexNil	./base/loader/coff_sym.h	278;"	d
indexNil	./base/loader/coff_sym.h	443;"	d
indirectSyscallFunc	./kern/tru64/tru64.hh	/^    indirectSyscallFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	class:Tru64
infiniteSD	./mem/probes/stack_dist.hh	/^    Stats::Scalar infiniteSD;$/;"	m	class:StackDistProbe
inflight	./arch/x86/pagetable_walker.hh	/^            unsigned inflight;$/;"	m	class:X86ISA::Walker::WalkerState
info	./arch/x86/bios/intelmp.hh	/^    uint8_t info;$/;"	m	class:X86ISA::IntelMP::BusHierarchy
info	./base/bitmap.hh	/^        InfoHeaderV1 info;$/;"	m	struct:Bitmap::CompleteV1Header
info	./base/statistics.cc	/^InfoAccess::info() const$/;"	f	class:Stats::InfoAccess
info	./base/statistics.cc	/^InfoAccess::info()$/;"	f	class:Stats::InfoAccess
info	./base/statistics.hh	/^    info() const$/;"	f	class:Stats::DataWrap
info	./base/statistics.hh	/^    info()$/;"	f	class:Stats::DataWrap
info_verbose	./base/misc.cc	/^bool info_verbose = false;$/;"	v
inform	./base/misc.hh	209;"	d
inform	./python/m5/util/__init__.py	/^def inform(fmt, *args):$/;"	f
inform_once	./base/misc.hh	216;"	d
inheritFDArray	./sim/process.cc	/^Process::inheritFDArray(Process *p)$/;"	f	class:Process
iniFile	./sim/cxx_config_ini.hh	/^    IniFile iniFile;$/;"	m	class:CxxIniFile
ini_str	./python/m5/SimObject.py	/^    def ini_str(self):$/;"	f
ini_str	./python/m5/params.py	/^    def ini_str(self):$/;"	m	class:Bool
ini_str	./python/m5/params.py	/^    def ini_str(self):$/;"	m	class:Clock
ini_str	./python/m5/params.py	/^    def ini_str(self):$/;"	m	class:Current
ini_str	./python/m5/params.py	/^    def ini_str(self):$/;"	m	class:EthernetAddr
ini_str	./python/m5/params.py	/^    def ini_str(self):$/;"	m	class:Frequency
ini_str	./python/m5/params.py	/^    def ini_str(self):$/;"	m	class:Latency
ini_str	./python/m5/params.py	/^    def ini_str(self):$/;"	m	class:MemoryBandwidth
ini_str	./python/m5/params.py	/^    def ini_str(self):$/;"	m	class:NetworkBandwidth
ini_str	./python/m5/params.py	/^    def ini_str(self):$/;"	m	class:NullSimObject
ini_str	./python/m5/params.py	/^    def ini_str(self):$/;"	m	class:ParamValue
ini_str	./python/m5/params.py	/^    def ini_str(self):$/;"	m	class:PortRef
ini_str	./python/m5/params.py	/^    def ini_str(self):$/;"	m	class:Time
ini_str	./python/m5/params.py	/^    def ini_str(self):$/;"	m	class:VectorParamValue
ini_str	./python/m5/params.py	/^    def ini_str(self):$/;"	m	class:VectorPortRef
ini_str	./python/m5/params.py	/^    def ini_str(self):$/;"	m	class:Voltage
inifile	./python/swig/pyobject.cc	/^inifile()$/;"	f
init	./arch/arm/table_walker.cc	/^TableWalker::init()$/;"	f	class:TableWalker
init	./arch/arm/tlb.cc	/^TLB::init()$/;"	f	class:TLB
init	./arch/x86/interrupts.cc	/^X86ISA::Interrupts::init()$/;"	f	class:X86ISA::Interrupts
init	./base/random.cc	/^Random::init(uint32_t s)$/;"	f	class:Random
init	./base/statistics.hh	/^    init(Counter min, Counter max, Counter bkt)$/;"	f	class:Stats::Distribution
init	./base/statistics.hh	/^    init(size_type _x, size_type _y)$/;"	f	class:Stats::Vector2dBase
init	./base/statistics.hh	/^    init(size_type size)$/;"	f	class:Stats::Histogram
init	./base/statistics.hh	/^    init(size_type size)$/;"	f	class:Stats::SparseHistogram
init	./base/statistics.hh	/^    init(size_type size)$/;"	f	class:Stats::VectorAverageDeviation
init	./base/statistics.hh	/^    init(size_type size)$/;"	f	class:Stats::VectorBase
init	./base/statistics.hh	/^    init(size_type size)$/;"	f	class:Stats::VectorStandardDeviation
init	./base/statistics.hh	/^    init(size_type size, Counter min, Counter max, Counter bkt)$/;"	f	class:Stats::VectorDistribution
init	./base/stats/info.hh	/^const FlagsType init =          0x0001;$/;"	m	namespace:Stats
init	./base/stats/text.cc	/^DistPrint::init(const Text *text, const Info &info)$/;"	f	class:Stats::DistPrint
init	./base/stats/text.cc	/^SparseHistPrint::init(const Text *text, const Info &info)$/;"	f	class:Stats::SparseHistPrint
init	./cpu/base.cc	/^BaseCPU::init()$/;"	f	class:BaseCPU
init	./cpu/checker/cpu.cc	/^CheckerCPU::init()$/;"	f	class:CheckerCPU
init	./cpu/kvm/base.cc	/^BaseKvmCPU::init()$/;"	f	class:BaseKvmCPU
init	./cpu/minor/cpu.cc	/^MinorCPU::init()$/;"	f	class:MinorCPU
init	./cpu/minor/dyn_inst.cc	/^MinorDynInst::init()$/;"	f	class:Minor::MinorDynInst
init	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::init()$/;"	f	class:FullO3CPU
init	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::init(O3CPU *cpu_ptr, IEW *iew_ptr, DerivO3CPUParams *params,$/;"	f	class:LSQUnit
init	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::init(DerivO3CPUParams *params, ThreadID tid)$/;"	f	class:MemDepUnit
init	./cpu/o3/rename_map.cc	/^SimpleRenameMap::init(unsigned size, SimpleFreeList *_freeList,$/;"	f	class:SimpleRenameMap
init	./cpu/o3/rename_map.cc	/^UnifiedRenameMap::init(PhysRegFile *_regFile,$/;"	f	class:UnifiedRenameMap
init	./cpu/o3/store_set.cc	/^StoreSet::init(uint64_t clear_period, int _SSIT_size, int _LFST_size)$/;"	f	class:StoreSet
init	./cpu/pred/ras.cc	/^ReturnAddrStack::init(unsigned _numEntries)$/;"	f	class:ReturnAddrStack
init	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::init()$/;"	f	class:AtomicSimpleCPU
init	./cpu/simple/base.cc	/^BaseSimpleCPU::init()$/;"	f	class:BaseSimpleCPU
init	./cpu/simple/probes/simpoint.cc	/^SimPoint::init()$/;"	f	class:SimPoint
init	./cpu/simple/timing.cc	/^TimingSimpleCPU::init()$/;"	f	class:TimingSimpleCPU
init	./cpu/testers/directedtest/RubyDirectedTester.cc	/^RubyDirectedTester::init()$/;"	f	class:RubyDirectedTester
init	./cpu/testers/networktest/networktest.cc	/^NetworkTest::init()$/;"	f	class:NetworkTest
init	./cpu/testers/rubytest/RubyTester.cc	/^RubyTester::init()$/;"	f	class:RubyTester
init	./cpu/testers/traffic_gen/generators.cc	/^TraceGen::InputStream::init()$/;"	f	class:TraceGen::InputStream
init	./cpu/testers/traffic_gen/traffic_gen.cc	/^TrafficGen::init()$/;"	f	class:TrafficGen
init	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::init()$/;"	f	class:TraceCPU::ElasticDataGen
init	./cpu/trace/trace_cpu.cc	/^TraceCPU::FixedRetryGen::init()$/;"	f	class:TraceCPU::FixedRetryGen
init	./cpu/trace/trace_cpu.cc	/^TraceCPU::init()$/;"	f	class:TraceCPU
init	./dev/alpha/tsunami.cc	/^Tsunami::init()$/;"	f	class:Tsunami
init	./dev/arm/energy_ctrl.cc	/^EnergyCtrl::init()$/;"	f	class:EnergyCtrl
init	./dev/dma_device.cc	/^DmaDevice::init()$/;"	f	class:DmaDevice
init	./dev/io_device.cc	/^PioDevice::init()$/;"	f	class:PioDevice
init	./dev/net/dist_etherlink.cc	/^DistEtherLink::init()$/;"	f	class:DistEtherLink
init	./dev/net/dist_iface.cc	/^DistIface::RecvScheduler::init(Event *recv_done, Tick link_delay)$/;"	f	class:DistIface::RecvScheduler
init	./dev/net/dist_iface.cc	/^DistIface::Sync::init(Tick start_tick, Tick repeat_tick)$/;"	f	class:DistIface::Sync
init	./dev/net/dist_iface.cc	/^DistIface::init(const Event *done_event, Tick link_delay)$/;"	f	class:DistIface
init	./dev/net/etherdump.cc	/^EtherDump::init()$/;"	f	class:EtherDump
init	./dev/net/i8254xGBe.cc	/^IGbE::init()$/;"	f	class:IGbE
init	./dev/x86/i82094aa.cc	/^X86ISA::I82094AA::init()$/;"	f	class:X86ISA::I82094AA
init	./dev/x86/intdev.cc	/^X86ISA::IntDevice::init()$/;"	f	class:X86ISA::IntDevice
init	./dev/x86/pc.cc	/^Pc::init()$/;"	f	class:Pc
init	./mem/abstract_mem.cc	/^AbstractMemory::init()$/;"	f	class:AbstractMemory
init	./mem/addr_mapper.cc	/^AddrMapper::init()$/;"	f	class:AddrMapper
init	./mem/bridge.cc	/^Bridge::init()$/;"	f	class:Bridge
init	./mem/cache/base.cc	/^BaseCache::init()$/;"	f	class:BaseCache
init	./mem/coherent_xbar.cc	/^CoherentXBar::init()$/;"	f	class:CoherentXBar
init	./mem/comm_monitor.cc	/^CommMonitor::init()$/;"	f	class:CommMonitor
init	./mem/dram_ctrl.cc	/^DRAMCtrl::init()$/;"	f	class:DRAMCtrl
init	./mem/dramsim2.cc	/^DRAMSim2::init()$/;"	f	class:DRAMSim2
init	./mem/external_master.cc	/^ExternalMaster::init()$/;"	f	class:ExternalMaster
init	./mem/external_slave.cc	/^ExternalSlave::init()$/;"	f	class:ExternalSlave
init	./mem/mem_checker_monitor.cc	/^MemCheckerMonitor::init()$/;"	f	class:MemCheckerMonitor
init	./mem/ruby/network/BasicLink.cc	/^BasicLink::init()$/;"	f	class:BasicLink
init	./mem/ruby/network/BasicRouter.cc	/^BasicRouter::init()$/;"	f	class:BasicRouter
init	./mem/ruby/network/Network.cc	/^Network::init()$/;"	f	class:Network
init	./mem/ruby/network/garnet/BaseGarnetNetwork.cc	/^BaseGarnetNetwork::init()$/;"	f	class:BaseGarnetNetwork
init	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.cc	/^GarnetExtLink_d::init()$/;"	f	class:GarnetExtLink_d
init	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.cc	/^GarnetIntLink_d::init()$/;"	f	class:GarnetIntLink_d
init	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.cc	/^GarnetNetwork_d::init()$/;"	f	class:GarnetNetwork_d
init	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.cc	/^NetworkInterface_d::init()$/;"	f	class:NetworkInterface_d
init	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^Router_d::init()$/;"	f	class:Router_d
init	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.cc	/^SWallocator_d::init()$/;"	f	class:SWallocator_d
init	./mem/ruby/network/garnet/fixed-pipeline/Switch_d.cc	/^Switch_d::init()$/;"	f	class:Switch_d
init	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.cc	/^VCallocator_d::init()$/;"	f	class:VCallocator_d
init	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.cc	/^GarnetExtLink::init()$/;"	f	class:GarnetExtLink
init	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.cc	/^GarnetIntLink::init()$/;"	f	class:GarnetIntLink
init	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.cc	/^GarnetNetwork::init()$/;"	f	class:GarnetNetwork
init	./mem/ruby/network/simple/PerfectSwitch.cc	/^PerfectSwitch::init(SimpleNetwork *network_ptr)$/;"	f	class:PerfectSwitch
init	./mem/ruby/network/simple/SimpleNetwork.cc	/^SimpleNetwork::init()$/;"	f	class:SimpleNetwork
init	./mem/ruby/network/simple/Switch.cc	/^Switch::init()$/;"	f	class:Switch
init	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::init()$/;"	f	class:AbstractController
init	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::init()$/;"	f	class:CacheMemory
init	./mem/ruby/structures/DirectoryMemory.cc	/^DirectoryMemory::init()$/;"	f	class:DirectoryMemory
init	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::init()$/;"	f	class:RubyMemoryControl
init	./mem/ruby/structures/WireBuffer.cc	/^WireBuffer::init()$/;"	f	class:WireBuffer
init	./mem/ruby/system/DMASequencer.cc	/^DMASequencer::init()$/;"	f	class:DMASequencer
init	./mem/ruby/system/RubyPort.cc	/^RubyPort::init()$/;"	f	class:RubyPort
init	./mem/ruby/system/RubyPortProxy.cc	/^RubyPortProxy::init()$/;"	f	class:RubyPortProxy
init	./mem/serial_link.cc	/^SerialLink::init()$/;"	f	class:SerialLink
init	./mem/simple_mem.cc	/^SimpleMemory::init()$/;"	f	class:SimpleMemory
init	./mem/xbar.cc	/^BaseXBar::init()$/;"	f	class:BaseXBar
init	./sim/sim_object.cc	/^SimObject::init()$/;"	f	class:SimObject
init	./sim/system.cc	/^System::init()$/;"	f	class:System
init	./unittest/stattest.cc	/^StatTest::init()$/;"	f	class:StatTest
initAll	./sim/init.cc	/^EmbeddedPython::initAll()$/;"	f	class:EmbeddedPython
initAll	./sim/init.cc	/^EmbeddedSwig::initAll()$/;"	f	class:EmbeddedSwig
initCPU	./arch/alpha/ev5.cc	/^initCPU(ThreadContext *tc, int cpuId)$/;"	f	namespace:AlphaISA
initCPU	./arch/arm/utility.cc	/^initCPU(ThreadContext *tc, int cpuId)$/;"	f	namespace:ArmISA
initCPU	./arch/mips/utility.cc	/^initCPU(ThreadContext *tc, int cpuId)$/;"	f	namespace:MipsISA
initCPU	./arch/power/utility.cc	/^initCPU(ThreadContext *tc, int cpuId)$/;"	f	namespace:PowerISA
initCPU	./arch/sparc/utility.cc	/^initCPU(ThreadContext *tc, int cpuId)$/;"	f	namespace:SparcISA
initCPU	./arch/x86/utility.cc	/^void initCPU(ThreadContext *tc, int cpuId)$/;"	f	namespace:X86ISA
initControlWord	./dev/x86/i8259.hh	/^    int initControlWord;$/;"	m	class:X86ISA::I8259
initFreeList	./cpu/o3/regfile.cc	/^PhysRegFile::initFreeList(UnifiedFreeList *freeList)$/;"	f	class:PhysRegFile
initFunc	./sim/init.hh	/^    void (*initFunc)();$/;"	m	struct:EmbeddedSwig
initIPRs	./arch/alpha/ev5.cc	/^initIPRs(ThreadContext *tc, int cpuId)$/;"	f	namespace:AlphaISA
initM5Python	./sim/init.cc	/^initM5Python()$/;"	f
initMemProxies	./cpu/checker/thread_context.hh	/^    void initMemProxies(ThreadContext *tc)$/;"	f	class:CheckerThreadContext
initMemProxies	./cpu/o3/thread_context.hh	/^    virtual void initMemProxies(ThreadContext *tc)$/;"	f	class:O3ThreadContext
initMemProxies	./cpu/thread_context.hh	/^    void initMemProxies(ThreadContext *tc) { actualTC->initMemProxies(tc); }$/;"	f	class:ProxyThreadContext
initMemProxies	./cpu/thread_state.cc	/^ThreadState::initMemProxies(ThreadContext *tc)$/;"	f	class:ThreadState
initNetworkPtr	./mem/ruby/slicc_interface/AbstractController.hh	/^    void initNetworkPtr(Network* net_ptr) { m_net_ptr = net_ptr; }$/;"	f	class:AbstractController
initParam	./sim/pseudo_inst.cc	/^initParam(ThreadContext *tc, uint64_t key_str1, uint64_t key_str2)$/;"	f	namespace:PseudoInst
initSectorTable	./dev/storage/disk_image.cc	/^CowDiskImage::initSectorTable(int hash_size)$/;"	f	class:CowDiskImage
initSignals	./sim/init_signals.cc	/^initSignals()$/;"	f
initSimStats	./python/m5/stats/__init__.py	/^def initSimStats():$/;"	f
initSimStats	./sim/stat_control.cc	/^initSimStats()$/;"	f	namespace:Stats
initState	./arch/alpha/linux/system.cc	/^LinuxAlphaSystem::initState()$/;"	f	class:LinuxAlphaSystem
initState	./arch/alpha/process.cc	/^AlphaLiveProcess::initState()$/;"	f	class:AlphaLiveProcess
initState	./arch/alpha/system.cc	/^AlphaSystem::initState()$/;"	f	class:AlphaSystem
initState	./arch/arm/freebsd/process.cc	/^ArmFreebsdProcess32::initState()$/;"	f	class:ArmFreebsdProcess32
initState	./arch/arm/freebsd/process.cc	/^ArmFreebsdProcess64::initState()$/;"	f	class:ArmFreebsdProcess64
initState	./arch/arm/freebsd/system.cc	/^FreebsdArmSystem::initState()$/;"	f	class:FreebsdArmSystem
initState	./arch/arm/linux/process.cc	/^ArmLinuxProcess32::initState()$/;"	f	class:ArmLinuxProcess32
initState	./arch/arm/linux/process.cc	/^ArmLinuxProcess64::initState()$/;"	f	class:ArmLinuxProcess64
initState	./arch/arm/linux/system.cc	/^LinuxArmSystem::initState()$/;"	f	class:LinuxArmSystem
initState	./arch/arm/process.cc	/^ArmLiveProcess32::initState()$/;"	f	class:ArmLiveProcess32
initState	./arch/arm/process.cc	/^ArmLiveProcess64::initState()$/;"	f	class:ArmLiveProcess64
initState	./arch/arm/system.cc	/^ArmSystem::initState()$/;"	f	class:ArmSystem
initState	./arch/arm/system.cc	/^GenericArmSystem::initState()$/;"	f	class:GenericArmSystem
initState	./arch/mips/process.cc	/^MipsLiveProcess::initState()$/;"	f	class:MipsLiveProcess
initState	./arch/power/linux/process.cc	/^PowerLinuxProcess::initState()$/;"	f	class:PowerLinuxProcess
initState	./arch/power/process.cc	/^PowerLiveProcess::initState()$/;"	f	class:PowerLiveProcess
initState	./arch/sparc/process.cc	/^Sparc32LiveProcess::initState()$/;"	f	class:Sparc32LiveProcess
initState	./arch/sparc/process.cc	/^Sparc64LiveProcess::initState()$/;"	f	class:Sparc64LiveProcess
initState	./arch/sparc/process.cc	/^SparcLiveProcess::initState()$/;"	f	class:SparcLiveProcess
initState	./arch/sparc/system.cc	/^SparcSystem::initState()$/;"	f	class:SparcSystem
initState	./arch/x86/linux/system.cc	/^LinuxX86System::initState()$/;"	f	class:LinuxX86System
initState	./arch/x86/pagetable_walker.cc	/^Walker::WalkerState::initState(ThreadContext * _tc,$/;"	f	class:X86ISA::Walker::WalkerState
initState	./arch/x86/process.cc	/^I386LiveProcess::initState()$/;"	f	class:I386LiveProcess
initState	./arch/x86/process.cc	/^X86_64LiveProcess::initState()$/;"	f	class:X86_64LiveProcess
initState	./arch/x86/system.cc	/^X86System::initState()$/;"	f	class:X86System
initState	./cpu/testers/traffic_gen/traffic_gen.cc	/^TrafficGen::initState()$/;"	f	class:TrafficGen
initState	./mem/multi_level_page_table_impl.hh	/^MultiLevelPageTable<ISAOps>::initState(ThreadContext* tc)$/;"	f	class:MultiLevelPageTable
initState	./sim/cxx_manager.cc	/^CxxConfigManager::initState()$/;"	f	class:CxxConfigManager
initState	./sim/process.cc	/^Process::initState()$/;"	f	class:Process
initState	./sim/root.cc	/^Root::initState()$/;"	f	class:Root
initState	./sim/sim_object.cc	/^SimObject::initState()$/;"	f	class:SimObject
initState	./sim/system.cc	/^System::initState()$/;"	f	class:System
initSummary	./mem/ruby/profiler/StoreTrace.cc	/^StoreTrace::initSummary()$/;"	f	class:StoreTrace
initText	./base/stats/text.cc	/^initText(const string &filename, bool desc)$/;"	f	namespace:Stats
initText	./python/m5/stats/__init__.py	/^def initText(filename, desc=True):$/;"	f
initTransport	./dev/net/tcp_iface.cc	/^TCPIface::initTransport()$/;"	f	class:TCPIface
initVars	./cpu/base_dyn_inst_impl.hh	/^BaseDynInst<Impl>::initVars()$/;"	f	class:BaseDynInst
initVars	./cpu/o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::initVars()$/;"	f	class:BaseO3DynInst
initVector	./arch/x86/interrupts.hh	/^    uint8_t initVector;$/;"	m	class:X86ISA::Interrupts
initVirtMem	./sim/process.hh	/^    SETranslatingPortProxy initVirtMem;$/;"	m	class:Process
init_keywords	./python/m5/SimObject.py	/^    init_keywords = { 'abstract' : bool,$/;"	v	class:MetaSimObject
init_net_ptr	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    void init_net_ptr(GarnetNetwork_d *net_ptr) { m_net_ptr = net_ptr; }$/;"	f	class:NetworkInterface_d
init_net_ptr	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    void init_net_ptr(GarnetNetwork_d* net_ptr) $/;"	f	class:Router_d
init_net_ptr	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	/^    void init_net_ptr(GarnetNetwork* net_ptr) { m_net_ptr = net_ptr; }$/;"	f	class:NetworkInterface
init_net_ptr	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	/^    void init_net_ptr(GarnetNetwork* net_ptr) { m_net_ptr = net_ptr; }$/;"	f	class:NetworkLink
init_net_ptr	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    void init_net_ptr(GarnetNetwork* net_ptr) $/;"	f	class:Router
init_net_ptr	./mem/ruby/network/simple/Switch.hh	/^    void init_net_ptr(SimpleNetwork* net_ptr) { m_network_ptr = net_ptr; }$/;"	f	class:Switch
init_param	./sim/System.py	/^    init_param = Param.UInt64(0, "numerical value to pass into simulator")$/;"	v
init_param	./sim/system.hh	/^    uint64_t init_param;$/;"	m	class:System
init_perf_level	./sim/ClockDomain.py	/^    init_perf_level = Param.UInt32(0, "Initial performance level")$/;"	v	class:SrcClockDomain
init_process	./kern/tru64/tru64_syscalls.hh	/^        init_process = 41,$/;"	e	enum:SystemCalls::__anon103
init_thread_context	./kern/tru64/tru64.hh	/^    init_thread_context(LiveProcess *process, ThreadContext *tc,$/;"	f	class:Tru64
initialApicId	./arch/x86/interrupts.hh	/^    int initialApicId;$/;"	m	class:X86ISA::Interrupts
initialApicId	./dev/x86/i82094aa.hh	/^    uint8_t initialApicId;$/;"	m	class:X86ISA::I82094AA
initialVal	./cpu/pred/sat_counter.hh	/^    uint8_t initialVal;$/;"	m	class:SatCounter
initial_count	./dev/intel_8254_timer.hh	/^        uint16_t initial_count;$/;"	m	class:Intel8254Timer::Counter
initializeFlash	./dev/arm/flash_device.cc	/^FlashDevice::initializeFlash(uint64_t disk_size, uint32_t sector_size)$/;"	f	class:FlashDevice
initializeIprTable	./arch/alpha/ipr.cc	/^initializeIprTable()$/;"	f	namespace:AlphaISA
initializeStream	./mem/ruby/structures/Prefetcher.cc	/^Prefetcher::initializeStream(Addr address, int stride,$/;"	f	class:Prefetcher
initialized	./dev/storage/disk_image.hh	/^    bool initialized;$/;"	m	class:DiskImage
initialized	./sim/eventq.hh	/^    initialized() const$/;"	f	class:Event
initiate	./cpu/testers/directedtest/InvalidateGenerator.cc	/^InvalidateGenerator::initiate()$/;"	f	class:InvalidateGenerator
initiate	./cpu/testers/directedtest/SeriesRequestGenerator.cc	/^SeriesRequestGenerator::initiate()$/;"	f	class:SeriesRequestGenerator
initiate	./cpu/testers/rubytest/Check.cc	/^Check::initiate()$/;"	f	class:Check
initiateAcc	./cpu/o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::initiateAcc()$/;"	f	class:BaseO3DynInst
initiateAcc	./cpu/static_inst.hh	/^    virtual Fault initiateAcc(ExecContext *xc,$/;"	f	class:StaticInst
initiateAction	./cpu/testers/rubytest/Check.cc	/^Check::initiateAction()$/;"	f	class:Check
initiateCheck	./cpu/testers/rubytest/Check.cc	/^Check::initiateCheck()$/;"	f	class:Check
initiateFlush	./cpu/testers/rubytest/Check.cc	/^Check::initiateFlush()$/;"	f	class:Check
initiatePrefetch	./cpu/testers/rubytest/Check.cc	/^Check::initiatePrefetch()$/;"	f	class:Check
initiateTranslation	./cpu/base_dyn_inst.hh	/^BaseDynInst<Impl>::initiateTranslation(RequestPtr req, RequestPtr sreqLow,$/;"	f	class:BaseDynInst
initm5	./sim/init.cc	/^initm5(void)$/;"	f
injRate	./cpu/testers/networktest/networktest.hh	/^    double injRate;$/;"	m	class:NetworkTest
inj_rate	./cpu/testers/networktest/NetworkTest.py	/^    inj_rate = Param.Float(0.1, "Packet injection rate")$/;"	v	class:NetworkTest
inline	./mem/slicc/ast/ExprAST.py	/^    def inline(self, get_type=False):$/;"	m	class:ExprAST
inline	./mem/slicc/ast/LocalVariableAST.py	/^    def inline(self, get_type=False):$/;"	m	class:LocalVariableAST
innerAttrs	./arch/arm/pagetable.hh	/^    uint8_t innerAttrs;$/;"	m	struct:ArmISA::TlbEntry
ino_t	./kern/solaris/solaris.hh	/^    typedef uint64_t ino_t;$/;"	t	class:Solaris
ino_t	./kern/tru64/tru64.hh	/^    typedef uint32_t ino_t;$/;"	t	class:Tru64
inp	./cpu/minor/decode.hh	/^    Latch<ForwardInstData>::Output inp;$/;"	m	class:Minor::Decode
inp	./cpu/minor/execute.hh	/^    Latch<ForwardInstData>::Output inp;$/;"	m	class:Minor::Execute
inp	./cpu/minor/fetch1.hh	/^    Latch<BranchData>::Output inp;$/;"	m	class:Minor::Fetch1
inp	./cpu/minor/fetch2.hh	/^    Latch<ForwardLineData>::Output inp;$/;"	m	class:Minor::Fetch2
input	./cpu/minor/buffers.hh	/^    Input input() { return Input(buffer.getWire(0)); }$/;"	f	class:Minor::Latch
input	./sim/Process.py	/^    input = Param.String('cin', "filename for stdin")$/;"	v	class:Process
inputBuffer	./cpu/minor/decode.hh	/^    InputBuffer<ForwardInstData> inputBuffer;$/;"	m	class:Minor::Decode
inputBuffer	./cpu/minor/execute.hh	/^    InputBuffer<ForwardInstData> inputBuffer;$/;"	m	class:Minor::Execute
inputBuffer	./cpu/minor/fetch2.hh	/^    InputBuffer<ForwardLineData> inputBuffer;$/;"	m	class:Minor::Fetch2
inputChar	./dev/alpha/access.h	/^    uint64_t    inputChar;              \/\/ 68: Placeholder for input$/;"	m	struct:AlphaAccess
inputChar	./dev/mips/access.h	/^    uint32_t    inputChar;              \/\/ 00: Placeholder for input$/;"	m	struct:MipsAccess
inputEvent	./base/remote_gdb.hh	/^    InputEvent *inputEvent;$/;"	m	class:BaseRemoteGDB
inputEvent	./base/remote_gdb.hh	/^    InputEvent *inputEvent;$/;"	m	class:GDBListener
inputFull	./dev/x86/i8042.hh	/^        Bitfield<1> inputFull;$/;"	m	class:X86ISA::I8042
inputIndex	./cpu/minor/decode.hh	/^    unsigned int inputIndex;$/;"	m	class:Minor::Decode
inputIndex	./cpu/minor/execute.hh	/^    unsigned int inputIndex;$/;"	m	class:Minor::Execute
inputIndex	./cpu/minor/fetch2.hh	/^    unsigned int inputIndex;$/;"	m	class:Minor::Fetch2
inputParam1	./dev/arm/ufs_device.hh	/^        uint32_t inputParam1;$/;"	m	struct:UFSHostDevice::UTPUPIUTaskReq
inputParam2	./dev/arm/ufs_device.hh	/^        uint32_t inputParam2;$/;"	m	struct:UFSHostDevice::UTPUPIUTaskReq
inputParam3	./dev/arm/ufs_device.hh	/^        uint32_t inputParam3;$/;"	m	struct:UFSHostDevice::UTPUPIUTaskReq
inputWire	./cpu/minor/buffers.hh	/^        typename Buffer::wire inputWire;$/;"	m	class:Minor::Latch::Input
insert	./arch/alpha/tlb.cc	/^TLB::insert(Addr addr, TlbEntry &entry)$/;"	f	class:AlphaISA::TLB
insert	./arch/arm/tlb.cc	/^TLB::insert(Addr addr, TlbEntry &entry)$/;"	f	class:TLB
insert	./arch/mips/tlb.cc	/^TLB::insert(Addr addr, PTE &pte)$/;"	f	class:TLB
insert	./arch/power/tlb.cc	/^TLB::insert(Addr addr, PowerISA::PTE &pte)$/;"	f	class:TLB
insert	./arch/sparc/tlb.cc	/^TLB::insert(Addr va, int partition_id, int context_id, bool real,$/;"	f	class:SparcISA::TLB
insert	./arch/sparc/tlb_map.hh	/^    insert(TlbRange &r, TlbEntry *d)$/;"	f	class:SparcISA::TlbMap
insert	./arch/x86/tlb.cc	/^TLB::insert(Addr vpn, TlbEntry &entry)$/;"	f	class:X86ISA::TLB
insert	./base/addr_range_map.hh	/^    insert(const AddrRange &r, const V& d)$/;"	f	class:AddrRangeMap
insert	./base/loader/symtab.cc	/^SymbolTable::insert(Addr address, string symbol)$/;"	f	class:SymbolTable
insert	./base/trie.hh	/^    insert(Key key, unsigned width, Value *val)$/;"	f	class:Trie
insert	./cpu/minor/lsq.cc	/^LSQ::StoreBuffer::insert(LSQRequestPtr request)$/;"	f	class:Minor::LSQ::StoreBuffer
insert	./cpu/o3/dep_graph.hh	/^DependencyGraph<DynInstPtr>::insert(PhysRegIndex idx, DynInstPtr &new_inst)$/;"	f	class:DependencyGraph
insert	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::insert(DynInstPtr &new_inst)$/;"	f	class:InstructionQueue
insert	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::insert(DynInstPtr &inst)$/;"	f	class:LSQUnit
insert	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::insert(DynInstPtr &inst)$/;"	f	class:MemDepUnit
insert	./mem/ruby/network/garnet/fixed-pipeline/flitBuffer_d.hh	/^    insert(flit_d *flt)$/;"	f	class:flitBuffer_d
insert	./mem/ruby/network/garnet/flexible-pipeline/flitBuffer.cc	/^flitBuffer::insert(flit *flt)$/;"	f	class:flitBuffer
insert	./sim/eventq.cc	/^EventQueue::insert(Event *event)$/;"	f	class:EventQueue
insertAt	./arch/mips/tlb.cc	/^TLB::insertAt(PTE &pte, unsigned Index, int _smallPages)$/;"	f	class:TLB
insertAt	./arch/power/tlb.cc	/^TLB::insertAt(PowerISA::PTE &pte, unsigned Index, int _smallPages)$/;"	f	class:TLB
insertBarrier	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::insertBarrier(DynInstPtr &barr_inst)$/;"	f	class:InstructionQueue
insertBarrier	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::insertBarrier(DynInstPtr &barr_inst)$/;"	f	class:MemDepUnit
insertBefore	./sim/eventq.cc	/^Event::insertBefore(Event *event, Event *curr)$/;"	f	class:Event
insertBits	./base/bitfield.hh	/^insertBits(T val, int bit, B bit_val)$/;"	f
insertBits	./base/bitfield.hh	/^insertBits(T val, int first, int last, B bit_val)$/;"	f
insertBlock	./mem/cache/tags/fa_lru.cc	/^FALRU::insertBlock(PacketPtr pkt, CacheBlk *blk)$/;"	f	class:FALRU
insertBlock	./mem/cache/tags/lru.cc	/^LRU::insertBlock(PacketPtr pkt, BlkType *blk)$/;"	f	class:LRU
insertBlock	./mem/cache/tags/random_repl.cc	/^RandomRepl::insertBlock(PacketPtr pkt, BlkType *blk)$/;"	f	class:RandomRepl
insertCRField	./arch/power/insts/static_inst.hh	/^    insertCRField(uint32_t cr, uint32_t bf, uint32_t value) const$/;"	f	class:PowerISA::PowerStaticInst
insertFlit	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    insertFlit(flit_d *t_flit)$/;"	f	class:VirtualChannel_d
insertHardBreak	./arch/alpha/remote_gdb.cc	/^RemoteGDB::insertHardBreak(Addr addr, size_t len)$/;"	f	class:RemoteGDB
insertHardBreak	./base/remote_gdb.cc	/^BaseRemoteGDB::insertHardBreak(Addr addr, size_t len)$/;"	f	class:BaseRemoteGDB
insertInst	./cpu/o3/rob_impl.hh	/^ROB<Impl>::insertInst(DynInstPtr &inst)$/;"	f	class:ROB
insertLoad	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::insertLoad(DynInstPtr &load_inst)$/;"	f	class:LSQ
insertLoad	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::insertLoad(DynInstPtr &load_inst)$/;"	f	class:LSQUnit
insertLoad	./cpu/o3/store_set.cc	/^StoreSet::insertLoad(Addr load_PC, InstSeqNum load_seq_num)$/;"	f	class:StoreSet
insertNonSpec	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::insertNonSpec(DynInstPtr &new_inst)$/;"	f	class:InstructionQueue
insertNonSpec	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::insertNonSpec(DynInstPtr &inst)$/;"	f	class:MemDepUnit
insertRequest	./mem/ruby/system/Sequencer.cc	/^Sequencer::insertRequest(PacketPtr pkt, RubyRequestType request_type)$/;"	f	class:Sequencer
insertScheduledWakeupTime	./mem/ruby/common/Consumer.hh	/^    insertScheduledWakeupTime(Tick time)$/;"	f	class:Consumer
insertSoftBreak	./base/remote_gdb.cc	/^BaseRemoteGDB::insertSoftBreak(Addr addr, size_t len)$/;"	f	class:BaseRemoteGDB
insertStore	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::insertStore(DynInstPtr &store_inst)$/;"	f	class:LSQ
insertStore	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::insertStore(DynInstPtr &store_inst)$/;"	f	class:LSQUnit
insertStore	./cpu/o3/store_set.cc	/^StoreSet::insertStore(Addr store_PC, InstSeqNum store_seq_num, ThreadID tid)$/;"	f	class:StoreSet
insertTableEntry	./arch/arm/table_walker.cc	/^TableWalker::insertTableEntry(DescriptorBase &descriptor, bool longDescriptor)$/;"	f	class:TableWalker
insertThread	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::insertThread(ThreadID tid)$/;"	f	class:FullO3CPU
insert_flit	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.hh	/^    insert_flit(flit_d *t_flit)$/;"	f	class:OutputUnit_d
insertedLoads	./cpu/o3/mem_dep_unit.hh	/^    Stats::Scalar insertedLoads;$/;"	m	class:MemDepUnit
insertedStores	./cpu/o3/mem_dep_unit.hh	/^    Stats::Scalar insertedStores;$/;"	m	class:MemDepUnit
inserts	./arch/arm/tlb.hh	/^    mutable Stats::Scalar inserts;$/;"	m	class:ArmISA::TLB
inst	./cpu/minor/exec_context.hh	/^    MinorDynInstPtr inst;$/;"	m	class:Minor::ExecContext
inst	./cpu/minor/func_unit.hh	/^    MinorDynInstPtr inst;$/;"	m	class:Minor::QueuedInst
inst	./cpu/minor/lsq.hh	/^        MinorDynInstPtr inst;$/;"	m	class:Minor::LSQ::LSQRequest
inst	./cpu/minor/pipe_data.hh	/^    MinorDynInstPtr inst;$/;"	m	class:Minor::BranchData
inst	./cpu/o3/dep_graph.hh	/^    DynInstPtr inst;$/;"	m	class:DependencyEntry
inst	./cpu/o3/inst_queue.hh	/^        DynInstPtr inst;$/;"	m	class:InstructionQueue::FUCompletion
inst	./cpu/o3/lsq_unit.hh	/^        DynInstPtr inst;$/;"	m	class:LSQUnit::LSQSenderState
inst	./cpu/o3/lsq_unit.hh	/^        DynInstPtr inst;$/;"	m	class:LSQUnit::WritebackEvent
inst	./cpu/o3/lsq_unit.hh	/^        DynInstPtr inst;$/;"	m	struct:LSQUnit::SQEntry
inst	./cpu/o3/mem_dep_unit.hh	/^        DynInstPtr inst;$/;"	m	class:MemDepUnit::MemDepEntry
inst	./cpu/simple/base.hh	/^    TheISA::MachInst inst;$/;"	m	class:BaseSimpleCPU
inst	./cpu/timing_expr.hh	/^    const StaticInstPtr &inst;$/;"	m	class:TimingExprEvalContext
instAIWNPC	./arch/arm/types.hh	/^        instAIWNPC(Addr val)$/;"	f	class:ArmISA::PCState
instAccesses	./arch/arm/tlb.hh	/^    Stats::Formula instAccesses;$/;"	m	class:ArmISA::TLB
instAddr	./arch/generic/types.hh	/^    instAddr() const$/;"	f	class:GenericISA::PCStateBase
instAddr	./cpu/base_dyn_inst.hh	/^    Addr instAddr() const { return pc.instAddr(); }$/;"	f	class:BaseDynInst
instAddr	./cpu/checker/cpu.hh	/^    Addr instAddr() { return thread->instAddr(); }$/;"	f	class:CheckerCPU
instAddr	./cpu/checker/thread_context.hh	/^    Addr instAddr()$/;"	f	class:CheckerThreadContext
instAddr	./cpu/o3/commit.hh	/^    Addr instAddr(ThreadID tid) { return pc[tid].instAddr(); }$/;"	f	class:DefaultCommit
instAddr	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::instAddr(ThreadID tid)$/;"	f	class:FullO3CPU
instAddr	./cpu/o3/thread_context.hh	/^    virtual Addr instAddr()$/;"	f	class:O3ThreadContext
instAddr	./cpu/simple_thread.hh	/^    instAddr()$/;"	f	class:SimpleThread
instAddr	./cpu/thread_context.hh	/^    Addr instAddr() { return actualTC->instAddr(); }$/;"	f	class:ProxyThreadContext
instAddr	./mem/cache/prefetch/stride.hh	/^        Addr instAddr;$/;"	m	struct:StridePrefetcher::StrideEntry
instBits	./arch/arm/types.hh	/^        uint32_t         instBits;$/;"	m	namespace:ArmISA
instBytes	./arch/x86/decoder.hh	/^    InstBytes *instBytes;$/;"	m	class:X86ISA::Decoder
instCacheMap	./arch/x86/decoder.cc	/^Decoder::InstCacheMap Decoder::instCacheMap;$/;"	m	class:X86ISA::Decoder	file:
instCacheMap	./arch/x86/decoder.hh	/^    static InstCacheMap instCacheMap;$/;"	m	class:X86ISA::Decoder
instCnt	./cpu/base.hh	/^    Tick instCnt;$/;"	m	class:BaseCPU
instCount	./cpu/base.hh	/^    Tick instCount() { return instCnt; }$/;"	f	class:BaseCPU
instDone	./arch/alpha/decoder.hh	/^    bool instDone;$/;"	m	class:AlphaISA::Decoder
instDone	./arch/arm/decoder.hh	/^    bool instDone;$/;"	m	class:ArmISA::Decoder
instDone	./arch/mips/decoder.hh	/^    bool instDone;$/;"	m	class:MipsISA::Decoder
instDone	./arch/power/decoder.hh	/^    bool instDone;$/;"	m	class:PowerISA::Decoder
instDone	./arch/sparc/decoder.hh	/^    bool instDone;$/;"	m	class:SparcISA::Decoder
instDone	./arch/x86/decoder.hh	/^    bool instDone;$/;"	m	class:X86ISA::Decoder
instDone	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::instDone(ThreadID tid, DynInstPtr &inst)$/;"	f	class:FullO3CPU
instEffAddr	./cpu/base_dyn_inst.hh	/^    Addr instEffAddr;$/;"	m	class:BaseDynInst
instEventQueue	./sim/system.hh	/^    EventQueue instEventQueue;$/;"	m	class:System
instFetchTraceFile	./cpu/o3/probe/ElasticTrace.py	/^                                        "instruction fetch tracing")$/;"	v	class:ElasticTrace
instFlagRE	./arch/isa_parser.py	/^instFlagRE = re.compile(r'Is.*')$/;"	v
instFlags	./cpu/base_dyn_inst.hh	/^    std::bitset<MaxFlags> instFlags;$/;"	m	class:BaseDynInst
instHits	./arch/arm/tlb.hh	/^    mutable Stats::Scalar instHits;$/;"	m	class:ArmISA::TLB
instIWNPC	./arch/arm/types.hh	/^        instIWNPC(Addr val)$/;"	f	class:ArmISA::PCState
instIsHeadInst	./cpu/minor/execute.cc	/^Execute::instIsHeadInst(MinorDynInstPtr inst)$/;"	f	class:Minor::Execute
instIsRightStream	./cpu/minor/execute.cc	/^Execute::instIsRightStream(MinorDynInstPtr inst)$/;"	f	class:Minor::Execute
instLastTick	./cpu/trace/trace_cpu.hh	/^        Stats::Scalar instLastTick;$/;"	m	class:TraceCPU::FixedRetryGen
instList	./cpu/checker/cpu.hh	/^    std::list<DynInstPtr> instList;$/;"	m	class:Checker
instList	./cpu/o3/cpu.hh	/^    std::list<DynInstPtr> instList;$/;"	m	class:FullO3CPU
instList	./cpu/o3/inst_queue.hh	/^    std::list<DynInstPtr> instList[Impl::MaxThreads];$/;"	m	class:InstructionQueue
instList	./cpu/o3/mem_dep_unit.hh	/^    std::list<DynInstPtr> instList[Impl::MaxThreads];$/;"	m	class:MemDepUnit
instList	./cpu/o3/rob.hh	/^    std::list<DynInstPtr> instList[Impl::MaxThreads];$/;"	m	class:ROB
instListIt	./cpu/base_dyn_inst.hh	/^    ListIt instListIt;$/;"	m	class:BaseDynInst
instMap	./arch/generic/decode_cache.hh	/^    DecodeCache::InstMap instMap;$/;"	m	class:GenericISA::BasicDecodeCache
instMap	./arch/x86/decoder.hh	/^    DecodeCache::InstMap *instMap;$/;"	m	class:X86ISA::Decoder
instMasterID	./cpu/trace/trace_cpu.hh	/^    const MasterID instMasterID;$/;"	m	class:TraceCPU
instMasterId	./cpu/base.hh	/^    MasterID instMasterId() { return _instMasterId; }$/;"	f	class:BaseCPU
instMisses	./arch/arm/tlb.hh	/^    mutable Stats::Scalar instMisses;$/;"	m	class:ArmISA::TLB
instMnem	./arch/x86/insts/microop.hh	/^        const char * instMnem;$/;"	m	class:X86ISA::X86MicroopBase
instNPC	./arch/arm/types.hh	/^        instNPC() const$/;"	f	class:ArmISA::PCState
instNPC	./arch/arm/types.hh	/^        instNPC(Addr val)$/;"	f	class:ArmISA::PCState
instNum	./cpu/o3/probe/elastic_trace.hh	/^        InstSeqNum instNum;$/;"	m	struct:ElasticTrace::TraceInfo
instPC	./arch/arm/types.hh	/^        instPC() const$/;"	f	class:ArmISA::PCState
instPort	./cpu/kvm/base.hh	/^    KVMCpuPort instPort;$/;"	m	class:BaseKvmCPU
instQueue	./cpu/o3/iew.hh	/^    IQ instQueue;$/;"	m	class:DefaultIEW
instReady	./arch/alpha/decoder.hh	/^    instReady()$/;"	f	class:AlphaISA::Decoder
instReady	./arch/arm/decoder.hh	/^    bool instReady() const { return instDone; }$/;"	f	class:ArmISA::Decoder
instReady	./arch/mips/decoder.hh	/^    instReady()$/;"	f	class:MipsISA::Decoder
instReady	./arch/power/decoder.hh	/^    instReady()$/;"	f	class:PowerISA::Decoder
instReady	./arch/sparc/decoder.hh	/^    instReady()$/;"	f	class:SparcISA::Decoder
instReady	./arch/x86/decoder.hh	/^    bool instReady()$/;"	f	class:X86ISA::Decoder
instResult	./cpu/base_dyn_inst.hh	/^    std::queue<Result> instResult;$/;"	m	class:BaseDynInst
instSeqNum	./cpu/o3/rename.hh	/^        InstSeqNum instSeqNum;$/;"	m	struct:DefaultRename::RenameHistory
instShiftAmt	./cpu/pred/BranchPredictor.py	/^    instShiftAmt = Param.Unsigned(2, "Number of bits to shift instructions by")$/;"	v	class:BranchPredictor
instShiftAmt	./cpu/pred/bpred_unit.hh	/^    const unsigned instShiftAmt;$/;"	m	class:BPredUnit
instShiftAmt	./cpu/pred/btb.hh	/^    unsigned instShiftAmt;$/;"	m	class:DefaultBTB
instSize	./cpu/o3/fetch.hh	/^    int instSize;$/;"	m	class:DefaultFetch
instToCommit	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::instToCommit(DynInstPtr &inst)$/;"	f	class:DefaultIEW
instToWaitFor	./cpu/minor/dyn_inst.hh	/^    InstSeqNum instToWaitFor;$/;"	m	class:Minor::MinorDynInst
instTraceFile	./cpu/trace/TraceCPU.py	/^    instTraceFile = Param.String("", "Instruction trace file")$/;"	v	class:TraceCPU
instTraceFile	./cpu/trace/trace_cpu.hh	/^    std::string instTraceFile, dataTraceFile;$/;"	m	class:TraceCPU
instTraceStream	./cpu/o3/probe/elastic_trace.hh	/^    ProtoOutputStream* instTraceStream;$/;"	m	class:ElasticTrace
installGlobals	./arch/sparc/isa.cc	/^ISA::installGlobals(int gl, int offset)$/;"	f	class:SparcISA::ISA
installSegDesc	./arch/x86/system.cc	/^X86ISA::installSegDesc(ThreadContext *tc, SegmentRegIndex seg,$/;"	f	class:X86ISA
installSignalHandler	./sim/init_signals.cc	/^installSignalHandler(int signal, void (*handler)(int sigtype),$/;"	f	file:
installWindow	./arch/sparc/isa.cc	/^ISA::installWindow(int cwp, int offset)$/;"	f	class:SparcISA::ISA
instance	./cpu/kvm/vm.cc	/^Kvm *Kvm::instance = NULL;$/;"	m	class:Kvm	file:
instance	./cpu/kvm/vm.hh	/^    static Kvm *instance;$/;"	m	class:Kvm
instance	./sim/drain.hh	/^    static DrainManager &instance() { return _instance; }$/;"	f	class:DrainManager
instance	./sim/eventq.hh	/^    Counter instance;$/;"	m	class:Event
instanceCounter	./sim/eventq.cc	/^Counter Event::instanceCounter = 0;$/;"	m	class:Event	file:
instanceCounter	./sim/eventq.hh	/^    static Counter instanceCounter;$/;"	m	class:Event
instanceDict	./python/m5/SimObject.py	/^instanceDict = {}$/;"	v
instantiate	./python/m5/simulate.py	/^def instantiate(ckpt_dir=None):$/;"	f
instantiate	./sim/cxx_manager.cc	/^CxxConfigManager::instantiate(bool build_all)$/;"	f	class:CxxConfigManager
instcount	./cpu/o3/cpu.hh	/^    int instcount;$/;"	m	class:FullO3CPU
insts	./cpu/minor/pipe_data.hh	/^    MinorDynInstPtr insts[MAX_FORWARD_INSTS];$/;"	m	class:Minor::ForwardInstData
insts	./cpu/o3/comm.hh	/^    DynInstPtr insts[Impl::MaxWidth];$/;"	m	struct:DefaultDecodeDefaultRename
insts	./cpu/o3/comm.hh	/^    DynInstPtr insts[Impl::MaxWidth];$/;"	m	struct:DefaultFetchDefaultDecode
insts	./cpu/o3/comm.hh	/^    DynInstPtr insts[Impl::MaxWidth];$/;"	m	struct:DefaultIEWDefaultCommit
insts	./cpu/o3/comm.hh	/^    DynInstPtr insts[Impl::MaxWidth];$/;"	m	struct:DefaultRenameDefaultIEW
insts	./cpu/o3/comm.hh	/^    DynInstPtr insts[Impl::MaxWidth];$/;"	m	struct:IssueStruct
insts	./cpu/o3/decode.hh	/^    std::queue<DynInstPtr> insts[Impl::MaxThreads];$/;"	m	class:DefaultDecode
insts	./cpu/o3/iew.hh	/^    std::queue<DynInstPtr> insts[Impl::MaxThreads];$/;"	m	class:DefaultIEW
insts	./cpu/o3/rename.hh	/^    InstQueue insts[Impl::MaxThreads];$/;"	m	class:DefaultRename
insts	./cpu/simple/probes/simpoint.hh	/^        uint64_t insts;$/;"	m	struct:SimPoint::BBInfo
instsBeingCommitted	./cpu/minor/execute.hh	/^    ForwardInstData instsBeingCommitted;$/;"	m	class:Minor::Execute
instsCommitted	./cpu/o3/commit.hh	/^    Stats::Vector instsCommitted;$/;"	m	class:DefaultCommit
instsInProgress	./cpu/o3/rename.hh	/^    int instsInProgress[Impl::MaxThreads];$/;"	m	class:DefaultRename
instsToExecute	./cpu/o3/inst_queue.hh	/^    std::list<DynInstPtr> instsToExecute;$/;"	m	class:InstructionQueue
instsToReplay	./cpu/o3/mem_dep_unit.hh	/^    std::list<DynInstPtr> instsToReplay;$/;"	m	class:MemDepUnit
int0	./dev/net/Ethernet.py	/^    int0 = SlavePort("interface 0")$/;"	v	class:DistEtherLink
int0	./dev/net/Ethernet.py	/^    int0 = SlavePort("interface 0")$/;"	v	class:EtherLink
int1	./dev/net/Ethernet.py	/^    int1 = SlavePort("interface 1")$/;"	v	class:EtherLink
int64_ta	./arch/mips/linux/aligned.hh	/^typedef int64_t int64_ta __attribute__ ((aligned (8))) ;$/;"	t
int64_ta	./arch/mips/linux/aligned.hh	46;"	d
intAluAccesses	./cpu/o3/inst_queue.hh	/^    Stats::Scalar intAluAccesses;$/;"	m	class:InstructionQueue
intClear	./dev/arm/hdlcd.hh	/^    void intClear(uint32_t ints) {$/;"	f	class:HDLcd
intClock	./dev/net/i8254xGBe.hh	/^    Tick intClock() { return SimClock::Int::ns * 1024; }$/;"	f	class:IGbE
intConfig	./dev/arm/gic_pl390.hh	/^    uint32_t intConfig[INT_BITS_MAX*2];$/;"	m	class:Pl390
intCtl	./dev/sparc/iob.hh	/^    IntCtl intCtl[NumDeviceIds];$/;"	m	class:Iob
intDelay	./dev/arm/amba_device.hh	/^    Tick intDelay;$/;"	m	class:AmbaIntDevice
intDelay	./dev/arm/pl011.hh	/^    const Tick intDelay;$/;"	m	class:Pl011
intEn	./arch/x86/regs/misc.hh	/^        Bitfield<20> intEn; \/\/ Interrupt enable$/;"	m	namespace:X86ISA
intEnable	./dev/arm/timer_cpulocal.hh	/^            Bitfield<2>   intEnable;$/;"	m	class:CpuLocalTimer::Timer
intEnable	./dev/arm/timer_sp804.hh	/^            Bitfield<5>   intEnable;$/;"	m	class:Sp804::Timer
intEnabled	./dev/arm/gic_pl390.hh	/^    uint32_t intEnabled[INT_BITS_MAX];$/;"	m	class:Pl390
intEvent	./dev/arm/kmi.hh	/^    EventWrapper<Pl050, &Pl050::generateInterrupt> intEvent;$/;"	m	class:Pl050
intEvent	./dev/arm/pl011.hh	/^    EventWrapper<Pl011, &Pl011::generateInterrupt> intEvent;$/;"	m	class:Pl011
intEvent	./dev/arm/pl111.hh	/^    EventWrapper<Pl111, &Pl111::generateInterrupt> intEvent;$/;"	m	class:Pl111
intInstQueueReads	./cpu/o3/inst_queue.hh	/^    Stats::Scalar intInstQueueReads;$/;"	m	class:InstructionQueue
intInstQueueWakeupAccesses	./cpu/o3/inst_queue.hh	/^    Stats::Scalar intInstQueueWakeupAccesses;$/;"	m	class:InstructionQueue
intInstQueueWrites	./cpu/o3/inst_queue.hh	/^    Stats::Scalar intInstQueueWrites;$/;"	m	class:InstructionQueue
intLatency	./dev/arm/gic_pl390.hh	/^    Tick intLatency;$/;"	m	class:Pl390
intList	./cpu/o3/free_list.hh	/^    SimpleFreeList intList;$/;"	m	class:UnifiedFreeList
intMan	./dev/sparc/iob.hh	/^    IntMan intMan[NumDeviceIds];$/;"	m	class:Iob
intMap	./cpu/o3/rename_map.hh	/^    SimpleRenameMap intMap;$/;"	m	class:UnifiedRenameMap
intMask	./dev/arm/hdlcd.hh	/^    void intMask(uint32_t mask) { setInterrupts(int_rawstat, mask); }$/;"	f	class:HDLcd
intMasterPort	./dev/x86/intdev.hh	/^    IntMasterPort intMasterPort;$/;"	m	class:X86ISA::IntDevice
intNum	./dev/arm/amba_device.hh	/^    int      intNum;$/;"	m	class:AmbaDmaDevice
intNum	./dev/arm/amba_device.hh	/^    int intNum;$/;"	m	class:AmbaIntDevice
intNum	./dev/arm/pl011.hh	/^    const int intNum;$/;"	m	class:Pl011
intNum	./dev/arm/timer_sp804.hh	/^        const uint32_t intNum;$/;"	m	class:Sp804::Timer
intNum	./dev/arm/ufs_device.hh	/^    const int intNum;$/;"	m	class:UFSHostDevice
intNumTimer	./dev/arm/timer_cpulocal.hh	/^        uint32_t intNumTimer;$/;"	m	class:CpuLocalTimer::Timer
intNumToBit	./dev/arm/gic_pl390.hh	/^    int intNumToBit(int num) const { return num % 32; }$/;"	f	class:Pl390
intNumToWord	./dev/arm/gic_pl390.hh	/^    int intNumToWord(int num) const { return num >> 5; }$/;"	f	class:Pl390
intNumWatchdog	./dev/arm/timer_cpulocal.hh	/^        uint32_t intNumWatchdog;$/;"	m	class:CpuLocalTimer::Timer
intPin	./dev/x86/cmos.hh	/^        IntSourcePin * intPin;$/;"	m	class:X86ISA::Cmos::X86RTC
intPin	./dev/x86/i8254.hh	/^    IntSourcePin *intPin;$/;"	m	class:X86ISA::I8254
intPriority	./dev/arm/gic_pl390.hh	/^    uint8_t intPriority[INT_LINES_MAX];$/;"	m	class:Pl390
intRaise	./dev/arm/hdlcd.hh	/^    void intRaise(uint32_t ints) {$/;"	f	class:HDLcd
intReg	./arch/sparc/registers.hh	/^    IntReg intReg;$/;"	m	union:SparcISA::__anon41
intReg	./arch/x86/registers.hh	/^    IntReg intReg;$/;"	m	union:X86ISA::__anon56
intRegFile	./cpu/o3/regfile.hh	/^    std::vector<IntReg> intRegFile;$/;"	m	class:PhysRegFile
intRegInMode	./arch/arm/intregs.hh	/^intRegInMode(OperatingMode mode, int reg)$/;"	f	namespace:ArmISA
intRegMap	./arch/arm/isa.hh	/^        const IntRegIndex *intRegMap;$/;"	m	class:ArmISA::ISA
intRegMap	./arch/arm/kvm/armv8_cpu.cc	/^const std::vector<ArmV8KvmCPU::IntRegInfo> ArmV8KvmCPU::intRegMap = {$/;"	m	class:ArmV8KvmCPU	file:
intRegMap	./arch/arm/kvm/armv8_cpu.hh	/^    static const std::vector<ArmV8KvmCPU::IntRegInfo> intRegMap;$/;"	m	class:ArmV8KvmCPU
intRegMap	./arch/sparc/isa.hh	/^    RegIndex intRegMap[TotalInstIntRegs];$/;"	m	class:SparcISA::ISA
intRegNames	./arch/sparc/nativetrace.cc	/^static const char *intRegNames[SparcISA::NumIntArchRegs] = {$/;"	m	namespace:Trace	file:
intRegfileReads	./cpu/o3/cpu.hh	/^    Stats::Scalar intRegfileReads;$/;"	m	class:FullO3CPU
intRegfileWrites	./cpu/o3/cpu.hh	/^    Stats::Scalar intRegfileWrites;$/;"	m	class:FullO3CPU
intRegs	./cpu/simple_thread.hh	/^    TheISA::IntReg intRegs[TheISA::NumIntRegs];$/;"	m	class:SimpleThread
intRegsPerMode	./arch/arm/intregs.hh	/^static const unsigned intRegsPerMode = NUM_INTREGS;$/;"	m	namespace:ArmISA
intRenameLookups	./cpu/o3/rename.hh	/^    Stats::Scalar intRenameLookups;$/;"	m	class:DefaultRename
intSlavePort	./arch/x86/interrupts.hh	/^    IntSlavePort intSlavePort;$/;"	m	class:X86ISA::Interrupts
intStatus	./arch/arm/interrupts.hh	/^    uint64_t intStatus;$/;"	m	class:ArmISA::Interrupts
intStatus	./arch/sparc/interrupts.hh	/^    uint64_t intStatus;$/;"	m	class:SparcISA::Interrupts
intStatus	./dev/arm/hdlcd.hh	/^    uint32_t intStatus() const { return int_rawstat & int_mask; }$/;"	f	class:HDLcd
intStatus	./dev/storage/ide_ctrl.hh	/^        Bitfield<2> intStatus;$/;"	m	class:IdeController
intStatus	./dev/uart.hh	/^    bool intStatus() { return status ? true : false; }$/;"	f	class:Uart
intStatus	./dev/uart8250.hh	/^    virtual bool intStatus() { return status ? true : false; }$/;"	f	class:Uart8250
intToAddress	./mem/ruby/slicc_interface/RubySlicc_Util.hh	/^intToAddress(int addr)$/;"	f
intToID	./mem/ruby/slicc_interface/RubySlicc_Util.hh	/^intToID(int nodenum)$/;"	f
intWidth	./arch/arm/insts/static_inst.hh	/^    uint8_t intWidth;$/;"	m	class:ArmISA::ArmStaticInst
int_delay	./dev/arm/RealView.py	/^    int_delay = '1us'$/;"	v	class:Pl050
int_delay	./dev/arm/RealView.py	/^    int_delay = Param.Latency("100ns", "Time between action and interrupt generation by UART")$/;"	v	class:Pl011
int_delay	./dev/arm/RealView.py	/^    int_delay = Param.Latency("100ns",$/;"	v	class:AmbaIntDevice
int_gpu	./dev/arm/NoMali.py	/^    int_gpu = Param.UInt32("Interrupt number for GPU interrupts")$/;"	v	class:NoMaliGpu
int_job	./dev/arm/NoMali.py	/^    int_job = Param.UInt32("Interrupt number for JOB interrupts")$/;"	v	class:NoMaliGpu
int_latency	./arch/x86/X86LocalApic.py	/^            "Latency for an interrupt to propagate through this device.")$/;"	v	class:X86LocalApic
int_latency	./dev/arm/Gic.py	/^    int_latency = Param.Latency('10ns', "Delay for interrupt to get to CPU")$/;"	v	class:Pl390
int_latency	./dev/x86/I82094AA.py	/^            "Latency for an interrupt to propagate through this device.")$/;"	v	class:I82094AA
int_link_buffers	./mem/ruby/network/simple/SimpleNetwork.py	/^    int_link_buffers = VectorParam.MessageBuffer("Buffers for int_links")$/;"	v	class:SimpleNetwork
int_links	./mem/ruby/network/Network.py	/^    int_links = VectorParam.BasicIntLink("Links between internal nodes")$/;"	v	class:RubyNetwork
int_mask	./dev/arm/hdlcd.hh	/^    uint32_t int_mask;              \/**< Interrupt mask register *\/$/;"	m	class:HDLcd
int_master	./arch/x86/X86LocalApic.py	/^    int_master = MasterPort("Port for sending interrupt messages")$/;"	v	class:X86LocalApic
int_master	./dev/x86/I82094AA.py	/^    int_master = MasterPort("Port for sending interrupt messages")$/;"	v	class:I82094AA
int_mmu	./dev/arm/NoMali.py	/^    int_mmu = Param.UInt32("Interrupt number for MMU interrupts")$/;"	v	class:NoMaliGpu
int_node	./mem/ruby/network/BasicLink.py	/^    int_node = Param.BasicRouter("ID of internal node")$/;"	v	class:BasicExtLink
int_num	./dev/arm/RealView.py	/^    int_num = Param.UInt32("Interrupt number that connects to GIC")$/;"	v	class:AmbaDmaDevice
int_num	./dev/arm/RealView.py	/^    int_num = Param.UInt32("Interrupt number that connects to GIC")$/;"	v	class:AmbaIntDevice
int_num	./dev/arm/RealView.py	/^    int_num = Param.UInt32("Interrupt number that connects to GIC")$/;"	v	class:Pl011
int_num	./dev/arm/UFSHostDevice.py	/^    int_num = Param.UInt32("Interrupt number that connects to GIC")$/;"	v	class:UFSHostDevice
int_num0	./dev/arm/RealView.py	/^    int_num0 = Param.UInt32("Interrupt number that connects to GIC")$/;"	v	class:Sp804
int_num1	./dev/arm/RealView.py	/^    int_num1 = Param.UInt32("Interrupt number that connects to GIC")$/;"	v	class:Sp804
int_num_timer	./dev/arm/RealView.py	/^    int_num_timer = Param.UInt32("Interrrupt number used per-cpu to GIC")$/;"	v	class:CpuLocalTimer
int_num_watchdog	./dev/arm/RealView.py	/^    int_num_watchdog = Param.UInt32("Interrupt number for per-cpu watchdog to GIC")$/;"	v	class:CpuLocalTimer
int_phys	./dev/arm/RealView.py	/^    int_phys = Param.UInt32("Interrupt number")$/;"	v	class:GenericTimerMem
int_phys	./dev/arm/RealView.py	/^    int_phys = Param.UInt32("Physical timer interrupt number")$/;"	v	class:GenericTimer
int_pin	./dev/x86/Cmos.py	/^    int_pin = Param.X86IntSourcePin(X86IntSourcePin(),$/;"	v	class:Cmos
int_pin	./dev/x86/I8254.py	/^    int_pin = Param.X86IntSourcePin(X86IntSourcePin(),$/;"	v	class:I8254
int_rawstat	./dev/arm/hdlcd.hh	/^    uint32_t int_rawstat;           \/**< Interrupt raw status register *\/$/;"	m	class:HDLcd
int_slave	./arch/x86/X86LocalApic.py	/^    int_slave = SlavePort("Port for receiving interrupt messages")$/;"	v	class:X86LocalApic
int_virt	./dev/arm/RealView.py	/^    int_virt = Param.UInt32("Interrupt number")$/;"	v	class:GenericTimerMem
int_virt	./dev/arm/RealView.py	/^    int_virt = Param.UInt32("Virtual timer interrupt number")$/;"	v	class:GenericTimer
integer	./base/cprintf_formats.hh	/^    enum { none, string, integer, character, floating } format;$/;"	e	enum:cp::Format::__anon118
integer	./cpu/base_dyn_inst.hh	/^        uint64_t integer;$/;"	m	union:BaseDynInst::Result
integer	./cpu/checker/cpu.hh	/^        uint64_t integer;$/;"	m	union:CheckerCPU::Result
intel_mp_pointer	./arch/x86/X86System.py	/^    intel_mp_pointer = Param.X86IntelMPFloatingPointer($/;"	v	class:X86System
intel_mp_table	./arch/x86/X86System.py	/^    intel_mp_table = Param.X86IntelMPConfigTable($/;"	v	class:X86System
interEvent	./dev/net/i8254xGBe.hh	/^    EventWrapper<IGbE, &IGbE::delayIntEvent> interEvent;$/;"	m	class:IGbE
interact	./python/m5/main.py	/^def interact(scope):$/;"	f
interface	./dev/net/Ethernet.py	/^    interface = MasterPort("Ethernet Interface")$/;"	v	class:EtherDevice
interface	./dev/net/etherlink.hh	/^    Interface *interface[2];$/;"	m	class:EtherLink
interface	./dev/net/ethertap.hh	/^    EtherTapInt *interface;$/;"	m	class:EtherTap
interface	./dev/net/ns_gige.hh	/^    NSGigEInt *interface;$/;"	m	class:NSGigE
interface	./dev/net/sinic.hh	/^    Interface *interface;$/;"	m	class:Sinic::Base
interleaved	./base/addr_range.hh	/^    bool interleaved() const { return intlvBits != 0; }$/;"	f	class:AddrRange
intermediateHeader	./arch/x86/bios/smbios.hh	/^        } intermediateHeader;$/;"	m	struct:X86ISA::SMBios::SMBiosTable::SMBiosHeader	typeref:struct:X86ISA::SMBios::SMBiosTable::SMBiosHeader::IntermediateHeader
internal	./python/m5/__init__.py	/^    internal = None$/;"	v
internalMergeFrom	./mem/ruby/common/SubBlock.cc	/^SubBlock::internalMergeFrom(const DataBlock& data)$/;"	f	class:SubBlock
internalMergeTo	./mem/ruby/common/SubBlock.cc	/^SubBlock::internalMergeTo(DataBlock& data) const$/;"	f	class:SubBlock
internalflash	./dev/arm/UFSHostDevice.py	/^    internalflash = VectorParam.AbstractNVM("Describes the internal flash")$/;"	v	class:UFSHostDevice
interptCtrlPresent	./arch/arm/miscregs.hh	/^      Bitfield<23>    interptCtrlPresent;$/;"	m	namespace:ArmISA
interrupt	./cpu/o3/commit.hh	/^    Fault interrupt;$/;"	m	class:DefaultCommit
interruptDeliveryPending	./dev/virtio/pci.hh	/^    bool interruptDeliveryPending;$/;"	m	class:PciVirtIO
interruptLine	./dev/pci/device.hh	/^    uint8_t interruptLine() const { return letoh(config.interruptLine); }$/;"	f	class:PciDevice
interruptLine	./dev/pci/pcireg.h	/^        uint8_t interruptLine;$/;"	m	struct:PCIConfig::__anon26
interruptMap	./dev/arm/gpu_nomali.hh	/^    const std::map<nomali_int_t, uint32_t> interruptMap;$/;"	m	class:NoMaliGpu
interruptPending	./cpu/o3/comm.hh	/^        bool interruptPending; \/\/ *F$/;"	m	struct:TimeBufStruct::commitComm
interruptPending	./cpu/o3/fetch.hh	/^    bool interruptPending;$/;"	m	class:DefaultFetch
interruptPin	./dev/pci/host.hh	/^        const PciIntPin interruptPin;$/;"	m	class:PciHost::DeviceInterface
interruptPin	./dev/pci/pcireg.h	/^        uint8_t interruptPin;$/;"	m	struct:PCIConfig::__anon26
interruptType	./arch/x86/bios/intelmp.hh	/^    uint8_t interruptType;$/;"	m	class:X86ISA::IntelMP::IntAssignment
interrupt_type	./arch/x86/bios/IntelMP.py	/^    interrupt_type = Param.X86IntelMPInterruptType('INT', 'type of interrupt')$/;"	v	class:X86IntelMPIOIntAssignment
interrupt_type	./arch/x86/bios/IntelMP.py	/^    interrupt_type = Param.X86IntelMPInterruptType('INT', 'type of interrupt')$/;"	v	class:X86IntelMPLocalIntAssignment
interrupts	./arch/alpha/interrupts.hh	/^    uint64_t interrupts[NumInterruptLevels];$/;"	m	class:AlphaISA::Interrupts
interrupts	./arch/arm/interrupts.hh	/^    bool interrupts[NumInterruptTypes];$/;"	m	class:ArmISA::Interrupts
interrupts	./arch/sparc/interrupts.hh	/^    uint64_t interrupts[NumInterruptTypes];$/;"	m	class:SparcISA::Interrupts
interrupts	./cpu/base.hh	/^    std::vector<TheISA::Interrupts*> interrupts;$/;"	m	class:BaseCPU
interrupts	./dev/arm/kmi.hh	/^    InterruptReg interrupts;$/;"	m	class:Pl050
interruptsPending	./arch/mips/interrupts.cc	/^Interrupts::interruptsPending(ThreadContext *tc) const$/;"	f	class:MipsISA::Interrupts
intersect	./arch/sparc/tlb_map.hh	/^    intersect(const TlbRange &r)$/;"	f	class:SparcISA::TlbMap
intersect	./base/addr_range_map.hh	/^    intersect(const AddrRange &r) const$/;"	f	class:AddrRangeMap
intersectionIsEmpty	./mem/ruby/common/Set.hh	/^    intersectionIsEmpty(const Set& obj) const$/;"	f	class:Set
intersectionIsNotEmpty	./mem/ruby/common/NetDest.cc	/^NetDest::intersectionIsNotEmpty(const NetDest& other_netDest) const$/;"	f	class:NetDest
intersects	./base/addr_range.hh	/^    bool intersects(const AddrRange& r) const$/;"	f	class:AddrRange
interval	./cpu/base.hh	/^        Tick interval;$/;"	m	class:BaseCPU::ProfileEvent
interval	./cpu/base.hh	/^    Tick interval() { return _interval; }$/;"	f	class:CPUProgressEvent
interval	./cpu/base.hh	/^    void interval(Tick ival) { _interval = ival; }$/;"	f	class:CPUProgressEvent
interval	./cpu/simple/probes/SimPoint.py	/^    interval = Param.UInt64(100000000, "Interval Size (insts)")$/;"	v	class:SimPoint
interval	./cpu/testers/memtest/MemTest.py	/^    interval = Param.Cycles(1, "Interval between request packets")$/;"	v	class:MemTest
interval	./cpu/testers/memtest/memtest.hh	/^    const Cycles interval;$/;"	m	class:MemTest
interval	./dev/intel_8254_timer.hh	/^            Tick interval;$/;"	m	class:Intel8254Timer::Counter::CounterEvent
interval	./dev/mc146818.hh	/^        Tick interval;$/;"	m	struct:MC146818::RTCEvent
intervalCount	./cpu/simple/probes/simpoint.hh	/^    uint64_t intervalCount;$/;"	m	class:SimPoint
intervalDrift	./cpu/simple/probes/simpoint.hh	/^    uint64_t intervalDrift;$/;"	m	class:SimPoint
intervalSize	./cpu/simple/probes/simpoint.hh	/^    const uint64_t intervalSize;$/;"	m	class:SimPoint
intf	./arch/x86/regs/misc.hh	/^        Bitfield<9> intf; \/\/ Interrupt Flag$/;"	m	namespace:X86ISA
intlvBits	./base/addr_range.hh	/^    uint8_t intlvBits;$/;"	m	class:AddrRange
intlvHighBit	./base/addr_range.hh	/^    uint8_t intlvHighBit;$/;"	m	class:AddrRange
intlvMatch	./base/addr_range.hh	/^    uint8_t intlvMatch;$/;"	m	class:AddrRange
intrBit	./dev/uart8250.hh	/^            int intrBit;$/;"	m	class:Uart8250::IntrEvent
intrClear	./dev/pci/device.hh	/^    void intrClear() { hostInterface.clearInt(); }$/;"	f	class:PciDevice
intrClear	./dev/storage/ide_disk.cc	/^IdeDisk::intrClear()$/;"	f	class:IdeDisk
intrClockFrequency	./dev/alpha/access.h	/^    uint32_t    intrClockFrequency;     \/\/ 0C: Hz$/;"	m	struct:AlphaAccess
intrClockFrequency	./dev/mips/access.h	/^    uint32_t    intrClockFrequency;     \/\/ 10: Hz$/;"	m	struct:MipsAccess
intrDelay	./dev/net/ns_gige.hh	/^    Tick intrDelay;$/;"	m	class:NSGigE
intrDelay	./dev/net/sinic.hh	/^    Tick intrDelay;$/;"	m	class:Sinic::Base
intrEvent	./dev/net/ns_gige.hh	/^    IntrEvent *intrEvent;$/;"	m	class:NSGigE
intrEvent	./dev/net/sinic.hh	/^    IntrEvent *intrEvent;$/;"	m	class:Sinic::Base
intrFreq	./arch/alpha/system.hh	/^    Tick intrFreq;$/;"	m	class:AlphaSystem
intrPending	./dev/storage/ide_disk.hh	/^    bool intrPending;$/;"	m	class:IdeDisk
intrPost	./dev/pci/device.hh	/^    void intrPost() { hostInterface.postInt(); }$/;"	f	class:PciDevice
intrPost	./dev/storage/ide_ctrl.cc	/^IdeController::intrPost()$/;"	f	class:IdeController
intrPost	./dev/storage/ide_disk.cc	/^IdeDisk::intrPost()$/;"	f	class:IdeDisk
intrTick	./dev/net/ns_gige.hh	/^    Tick intrTick;$/;"	m	class:NSGigE
intrTick	./dev/net/sinic.hh	/^    Tick intrTick;$/;"	m	class:Sinic::Base
intr_control	./dev/Terminal.py	/^    intr_control = Param.IntrControl(Parent.any, "interrupt controller")$/;"	v	class:Terminal
intr_delay	./dev/net/Ethernet.py	/^    intr_delay = Param.Latency('10us', "Interrupt propagation delay")$/;"	v	class:EtherDevBase
intr_flag	./arch/alpha/isa.hh	/^        int intr_flag;$/;"	m	class:AlphaISA::ISA
intr_sum_type	./dev/alpha/tsunami.hh	/^    int intr_sum_type[Tsunami::Max_CPUs];$/;"	m	class:Tsunami
intr_sum_type	./dev/mips/malta.hh	/^    int intr_sum_type[Malta::Max_CPUs];$/;"	m	class:Malta
intrctrl	./dev/Platform.py	/^    intrctrl = Param.IntrControl(Parent.any, "interrupt controller")$/;"	v	class:Platform
intrctrl	./dev/pci/copy_engine_defs.hh	/^    INTRCTRL intrctrl;$/;"	m	struct:CopyEngineReg::Regs
intrctrl	./dev/platform.hh	/^    IntrControl *intrctrl;$/;"	m	class:Platform
intreg	./arch/alpha/registers.hh	/^    IntReg  intreg;$/;"	m	union:AlphaISA::AnyReg
intreg	./arch/arm/registers.hh	/^    IntReg   intreg;$/;"	m	union:ArmISA::__anon66
intreg	./arch/mips/registers.hh	/^    IntReg   intreg;$/;"	m	union:MipsISA::__anon82
intreg	./arch/power/registers.hh	/^    IntReg   intreg;$/;"	m	union:PowerISA::__anon52
intstatus	./arch/alpha/interrupts.hh	/^    uint64_t intstatus;$/;"	m	class:AlphaISA::Interrupts
inv	./arch/x86/regs/misc.hh	/^        Bitfield<23> inv; \/\/ Invert mask$/;"	m	namespace:X86ISA
invAddrLoads	./cpu/o3/lsq_unit.hh	/^    Stats::Scalar invAddrLoads;$/;"	m	class:LSQUnit
invAddrSwpfs	./cpu/o3/lsq_unit.hh	/^    Stats::Scalar invAddrSwpfs;$/;"	m	class:LSQUnit
invalid	./arch/arm/table_walker.hh	/^        bool invalid() const$/;"	f	class:ArmISA::TableWalker::L2Descriptor
invalid	./arch/sparc/pagetable.hh	/^      invalid$/;"	e	enum:SparcISA::PageTableEntry::EntryType
invalidName	./sim/cxx_config.cc	/^const std::string CxxConfigParams::invalidName = "<invalid>";$/;"	m	class:CxxConfigParams	file:
invalidName	./sim/cxx_config.hh	/^    static const std::string invalidName;$/;"	m	class:CxxConfigParams
invalidPredictorIndex	./cpu/pred/tournament.hh	/^    static const int invalidPredictorIndex = -1;$/;"	m	class:TournamentBP
invalidate	./mem/cache/blk.hh	/^    void invalidate()$/;"	f	class:CacheBlk
invalidate	./mem/cache/tags/fa_lru.cc	/^FALRU::invalidate(CacheBlk *blk)$/;"	f	class:FALRU
invalidate	./mem/cache/tags/lru.cc	/^LRU::invalidate(CacheBlk *blk)$/;"	f	class:LRU
invalidate	./mem/cache/tags/random_repl.cc	/^RandomRepl::invalidate(CacheBlk *blk)$/;"	f	class:RandomRepl
invalidateBlock	./mem/cache/cache.cc	/^Cache::invalidateBlock(CacheBlk *blk)$/;"	f	class:Cache
invalidateMiscReg	./arch/arm/tlb.hh	/^    inline void invalidateMiscReg() { miscRegValid = false; }$/;"	f	class:ArmISA::TLB
invalidateSC	./mem/ruby/system/Sequencer.cc	/^Sequencer::invalidateSC(Addr address)$/;"	f	class:Sequencer
invalidateVisitor	./mem/cache/cache.cc	/^Cache::invalidateVisitor(CacheBlk &blk)$/;"	f	class:Cache
invariant_reg_vector	./arch/arm/kvm/arm_cpu.cc	/^static uint64_t invariant_reg_vector[] = {$/;"	v	file:
invariant_regs	./arch/arm/kvm/arm_cpu.hh	/^    static const std::set<uint64_t> invariant_regs;$/;"	m	class:ArmKvmCPU
invldPid	./cpu/base.hh	/^    static const uint32_t invldPid = std::numeric_limits<uint32_t>::max();$/;"	m	class:BaseCPU
invoke	./arch/alpha/faults.cc	/^AlphaFault::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:AlphaISA::AlphaFault
invoke	./arch/alpha/faults.cc	/^ArithmeticFault::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:AlphaISA::ArithmeticFault
invoke	./arch/alpha/faults.cc	/^DtbFault::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:AlphaISA::DtbFault
invoke	./arch/alpha/faults.cc	/^ItbFault::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:AlphaISA::ItbFault
invoke	./arch/alpha/faults.cc	/^ItbPageFault::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:AlphaISA::ItbPageFault
invoke	./arch/alpha/faults.cc	/^NDtbMissFault::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:AlphaISA::NDtbMissFault
invoke	./arch/arm/faults.cc	/^AbortFault<T>::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:ArmISA::AbortFault
invoke	./arch/arm/faults.cc	/^ArmFault::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:ArmISA::ArmFault
invoke	./arch/arm/faults.cc	/^ArmSev::invoke(ThreadContext *tc, const StaticInstPtr &inst) {$/;"	f	class:ArmISA::ArmSev
invoke	./arch/arm/faults.cc	/^FlushPipe::invoke(ThreadContext *tc, const StaticInstPtr &inst) {$/;"	f	class:ArmISA::FlushPipe
invoke	./arch/arm/faults.cc	/^PCAlignmentFault::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:ArmISA::PCAlignmentFault
invoke	./arch/arm/faults.cc	/^Reset::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:ArmISA::Reset
invoke	./arch/arm/faults.cc	/^SecureMonitorCall::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:ArmISA::SecureMonitorCall
invoke	./arch/arm/faults.cc	/^SupervisorCall::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:ArmISA::SupervisorCall
invoke	./arch/arm/faults.cc	/^SystemError::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:ArmISA::SystemError
invoke	./arch/arm/faults.cc	/^UndefinedInstruction::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:ArmISA::UndefinedInstruction
invoke	./arch/arm/faults.cc	/^VirtualDataAbort::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:ArmISA::VirtualDataAbort
invoke	./arch/generic/debugfaults.hh	/^    invoke(ThreadContext *tc, const StaticInstPtr &inst =$/;"	f	class:GenericISA::M5DebugFault
invoke	./arch/mips/faults.cc	/^MipsFaultBase::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:MipsISA::MipsFaultBase
invoke	./arch/mips/faults.cc	/^NonMaskableInterrupt::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:MipsISA::NonMaskableInterrupt
invoke	./arch/mips/faults.cc	/^ResetFault::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:MipsISA::ResetFault
invoke	./arch/mips/faults.cc	/^SoftResetFault::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:MipsISA::SoftResetFault
invoke	./arch/mips/faults.hh	/^    invoke(ThreadContext * tc, const StaticInstPtr &inst =$/;"	f	class:MipsISA::AddressFault
invoke	./arch/mips/faults.hh	/^    invoke(ThreadContext * tc, const StaticInstPtr &inst =$/;"	f	class:MipsISA::CoprocessorUnusableFault
invoke	./arch/mips/faults.hh	/^    invoke(ThreadContext * tc, const StaticInstPtr &inst =$/;"	f	class:MipsISA::TlbFault
invoke	./arch/sparc/faults.cc	/^FastDataAccessMMUMiss::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:SparcISA::FastDataAccessMMUMiss
invoke	./arch/sparc/faults.cc	/^FastInstructionAccessMMUMiss::invoke(ThreadContext *tc,$/;"	f	class:SparcISA::FastInstructionAccessMMUMiss
invoke	./arch/sparc/faults.cc	/^FillNNormal::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:SparcISA::FillNNormal
invoke	./arch/sparc/faults.cc	/^PowerOnReset::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:SparcISA::PowerOnReset
invoke	./arch/sparc/faults.cc	/^SparcFaultBase::invoke(ThreadContext * tc, const StaticInstPtr &inst)$/;"	f	class:SparcISA::SparcFaultBase
invoke	./arch/sparc/faults.cc	/^SpillNNormal::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:SparcISA::SpillNNormal
invoke	./arch/sparc/faults.cc	/^TrapInstruction::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:SparcISA::TrapInstruction
invoke	./arch/x86/faults.cc	/^    InitInterrupt::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:X86ISA::InitInterrupt
invoke	./arch/x86/faults.cc	/^    InvalidOpcode::invoke(ThreadContext * tc, const StaticInstPtr &inst)$/;"	f	class:X86ISA::InvalidOpcode
invoke	./arch/x86/faults.cc	/^    StartupInterrupt::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:X86ISA::StartupInterrupt
invoke	./arch/x86/faults.cc	/^    void PageFault::invoke(ThreadContext * tc, const StaticInstPtr &inst)$/;"	f	class:X86ISA::PageFault
invoke	./arch/x86/faults.cc	/^    void X86Abort::invoke(ThreadContext * tc, const StaticInstPtr &inst)$/;"	f	class:X86ISA::X86Abort
invoke	./arch/x86/faults.cc	/^    void X86FaultBase::invoke(ThreadContext * tc, const StaticInstPtr &inst)$/;"	f	class:X86ISA::X86FaultBase
invoke	./arch/x86/faults.cc	/^    void X86Trap::invoke(ThreadContext * tc, const StaticInstPtr &inst)$/;"	f	class:X86ISA::X86Trap
invoke	./arch/x86/faults.hh	/^        void invoke(ThreadContext * tc, const StaticInstPtr &inst =$/;"	f	class:X86ISA::UnimpInstFault
invoke	./sim/faults.cc	/^void FaultBase::invoke(ThreadContext * tc, const StaticInstPtr &inst)$/;"	f	class:FaultBase
invoke	./sim/faults.cc	/^void GenericAlignmentFault::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:GenericAlignmentFault
invoke	./sim/faults.cc	/^void GenericPageTableFault::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:GenericPageTableFault
invoke	./sim/faults.cc	/^void ReExec::invoke(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:ReExec
invoke	./sim/faults.cc	/^void UnimpFault::invoke(ThreadContext * tc, const StaticInstPtr &inst)$/;"	f	class:UnimpFault
invoke64	./arch/arm/faults.cc	/^ArmFault::invoke64(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:ArmISA::ArmFault
io	./arch/mips/dt_constants.hh	/^    Bitfield<26>     io;$/;"	m	namespace:MipsISA
io	./dev/alpha/Tsunami.py	/^    io = TsunamiIO(pio_addr=0x801fc000000)$/;"	v	class:Tsunami
io	./dev/alpha/tsunami.hh	/^    TsunamiIO *io;$/;"	m	class:Tsunami
io	./dev/mips/Malta.py	/^    io = MaltaIO(pio_addr=0x801fc000000)$/;"	v	class:Malta
io	./dev/mips/malta.hh	/^    MaltaIO *io;$/;"	m	class:Malta
ioApic	./dev/x86/south_bridge.hh	/^    X86ISA::I82094AA * ioApic;$/;"	m	class:SouthBridge
ioEnable	./dev/net/ns_gige.hh	/^    bool ioEnable;$/;"	m	class:NSGigE
ioEnabled	./dev/storage/ide_ctrl.hh	/^    bool ioEnabled;$/;"	m	class:IdeController
ioHandler	./sim/init_signals.cc	/^ioHandler(int sigtype)$/;"	f	file:
ioShift	./dev/storage/ide_ctrl.hh	/^    uint32_t ioShift, ctrlOffset;$/;"	m	class:IdeController
io_apic	./dev/x86/SouthBridge.py	/^    io_apic = Param.I82094AA(_io_apic, "I\/O APIC")$/;"	v	class:SouthBridge
io_shift	./dev/storage/Ide.py	/^    io_shift = Param.UInt32(0x0, "IO port shift");$/;"	v	class:IdeController
iob	./dev/sparc/T1000.py	/^    iob = Iob()$/;"	v	class:T1000
iobJBusAddr	./dev/sparc/iob.hh	/^    Addr iobJBusAddr;$/;"	m	class:Iob
iobJBusSize	./dev/sparc/iob.hh	/^    Addr iobJBusSize;$/;"	m	class:Iob
iobManAddr	./dev/sparc/iob.hh	/^    Addr iobManAddr;$/;"	m	class:Iob
iobManSize	./dev/sparc/iob.hh	/^    Addr iobManSize;$/;"	m	class:Iob
ioc	./arch/arm/miscregs.hh	/^        Bitfield<0> ioc;$/;"	m	namespace:ArmISA
ioctl	./cpu/kvm/base.cc	/^BaseKvmCPU::ioctl(int request, long p1) const$/;"	f	class:BaseKvmCPU
ioctl	./cpu/kvm/base.hh	/^    int ioctl(int request) const {$/;"	f	class:BaseKvmCPU
ioctl	./cpu/kvm/base.hh	/^    int ioctl(int request, void *p1) const {$/;"	f	class:BaseKvmCPU
ioctl	./cpu/kvm/device.cc	/^KvmDevice::ioctl(int request, long p1) const$/;"	f	class:KvmDevice
ioctl	./cpu/kvm/device.hh	/^    int ioctl(int request) const {$/;"	f	class:KvmDevice
ioctl	./cpu/kvm/device.hh	/^    int ioctl(int request, void *p1) const {$/;"	f	class:KvmDevice
ioctl	./cpu/kvm/perfevent.cc	/^PerfKvmCounter::ioctl(int request, long p1)$/;"	f	class:PerfKvmCounter
ioctl	./cpu/kvm/perfevent.hh	/^    int ioctl(int request) { return ioctl(request, 0L); }$/;"	f	class:PerfKvmCounter
ioctl	./cpu/kvm/perfevent.hh	/^    int ioctl(int request, void *p1) { return ioctl(request, (long)p1); }$/;"	f	class:PerfKvmCounter
ioctl	./cpu/kvm/vm.cc	/^Kvm::ioctl(int request, long p1) const$/;"	f	class:Kvm
ioctl	./cpu/kvm/vm.cc	/^KvmVM::ioctl(int request, long p1) const$/;"	f	class:KvmVM
ioctl	./cpu/kvm/vm.hh	/^    int ioctl(int request) const {$/;"	f	class:Kvm
ioctl	./cpu/kvm/vm.hh	/^    int ioctl(int request) const {$/;"	f	class:KvmVM
ioctl	./cpu/kvm/vm.hh	/^    int ioctl(int request, void *p1) const {$/;"	f	class:Kvm
ioctl	./cpu/kvm/vm.hh	/^    int ioctl(int request, void *p1) const {$/;"	f	class:KvmVM
ioctl	./kern/tru64/tru64_syscalls.hh	/^        ioctl = 54,$/;"	e	enum:SystemCalls::__anon102
ioctlFunc	./sim/syscall_emul.hh	/^ioctlFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
ioctlRun	./cpu/kvm/base.cc	/^BaseKvmCPU::ioctlRun()$/;"	f	class:BaseKvmCPU
ioe	./arch/arm/miscregs.hh	/^        Bitfield<8> ioe;$/;"	m	namespace:ArmISA
ioe	./dev/arm/pl111.hh	/^        Bitfield<14> ioe;$/;"	m	class:Pl111
iopl	./arch/x86/regs/misc.hh	/^        Bitfield<13, 12> iopl; \/\/ I\/O Privilege Level$/;"	m	namespace:X86ISA
iopt	./base/loader/coff_sym.h	/^    coff_int    iopt;           \/* start of optimization symbol entries*\/$/;"	m	struct:pdr
ioptBase	./base/loader/coff_sym.h	/^    coff_int    ioptBase;       \/* file's optimization entries *\/$/;"	m	struct:ecoff_fdr
ioptMax	./base/loader/coff_sym.h	/^    coff_int    ioptMax;        \/* max index into optimization symbol entries *\/$/;"	m	struct:ecoff_symhdr
ioptNil	./base/loader/coff_sym.h	411;"	d
ioptNil	./base/loader/coff_sym.h	448;"	d
iov_base	./arch/arm/freebsd/freebsd.hh	/^        uint32_t iov_base; \/\/ void *$/;"	m	struct:ArmFreebsd32::tgt_iovec
iov_base	./arch/arm/freebsd/freebsd.hh	/^        uint64_t iov_base; \/\/ void *$/;"	m	struct:ArmFreebsd64::tgt_iovec
iov_base	./arch/arm/linux/linux.hh	/^        uint32_t iov_base; \/\/ void *$/;"	m	struct:ArmLinux32::tgt_iovec
iov_base	./arch/arm/linux/linux.hh	/^        uint64_t iov_base; \/\/ void *$/;"	m	struct:ArmLinux64::tgt_iovec
iov_base	./arch/x86/linux/linux.hh	/^        uint64_t iov_base; \/\/ void *$/;"	m	struct:X86Linux64::__anon60
iov_base	./kern/linux/linux.hh	/^        uint64_t iov_base; \/\/ void *$/;"	m	struct:Linux::tgt_iovec
iov_base	./kern/operatingsystem.hh	/^        uint64_t iov_base; \/\/ void *$/;"	m	struct:OperatingSystem::__anon95
iov_len	./arch/arm/freebsd/freebsd.hh	/^        uint32_t iov_len;$/;"	m	struct:ArmFreebsd32::tgt_iovec
iov_len	./arch/arm/freebsd/freebsd.hh	/^        uint64_t iov_len;$/;"	m	struct:ArmFreebsd64::tgt_iovec
iov_len	./arch/arm/linux/linux.hh	/^        uint32_t iov_len;$/;"	m	struct:ArmLinux32::tgt_iovec
iov_len	./arch/arm/linux/linux.hh	/^        uint64_t iov_len;$/;"	m	struct:ArmLinux64::tgt_iovec
iov_len	./arch/x86/linux/linux.hh	/^        uint64_t iov_len;  \/\/ size_t$/;"	m	struct:X86Linux64::__anon60
iov_len	./kern/linux/linux.hh	/^        uint64_t iov_len;$/;"	m	struct:Linux::tgt_iovec
iov_len	./kern/operatingsystem.hh	/^        uint64_t iov_len;$/;"	m	struct:OperatingSystem::__anon95
ip	./base/inet.hh	/^    uint32_t ip() const { return _ip; }$/;"	f	struct:Net::IpAddress
ip	./dev/net/i8254xGBe_defs.hh	/^inline bool ip(TxDesc *d)   { assert(isContext(d)); return bits(d->d2, 25,25); }$/;"	f	namespace:iGbReg::TxdOp
ip0	./arch/mips/pra_constants.hh	/^        Bitfield<8>  ip0;$/;"	m	namespace:MipsISA
ip1	./arch/mips/pra_constants.hh	/^        Bitfield<9>  ip1;$/;"	m	namespace:MipsISA
ip2	./arch/mips/pra_constants.hh	/^        Bitfield<10> ip2;$/;"	m	namespace:MipsISA
ip3	./arch/mips/pra_constants.hh	/^        Bitfield<11> ip3;$/;"	m	namespace:MipsISA
ip4	./arch/mips/pra_constants.hh	/^        Bitfield<12> ip4;$/;"	m	namespace:MipsISA
ip5	./arch/mips/pra_constants.hh	/^        Bitfield<13> ip5;$/;"	m	namespace:MipsISA
ip6	./arch/mips/pra_constants.hh	/^        Bitfield<14> ip6;$/;"	m	namespace:MipsISA
ip6_opt_dstopts	./base/inet.hh	/^struct ip6_opt_dstopts {$/;"	s	namespace:Net
ip6_opt_fragment	./base/inet.hh	/^struct ip6_opt_fragment {$/;"	s	namespace:Net
ip6_opt_hdr	./base/inet.hh	/^struct ip6_opt_hdr$/;"	s	namespace:Net
ip6_opt_routing_type2	./base/inet.hh	/^struct ip6_opt_routing_type2 {$/;"	s	namespace:Net
ip7	./arch/mips/pra_constants.hh	/^        Bitfield<15> ip7;$/;"	m	namespace:MipsISA
ipc	./cpu/minor/stats.hh	/^    Stats::Formula ipc;$/;"	m	class:Minor::MinorStats
ipc	./cpu/o3/cpu.hh	/^    Stats::Formula ipc;$/;"	m	class:FullO3CPU
ipc	./dev/arm/pl111.hh	/^        Bitfield<13> ipc;$/;"	m	class:Pl111
ipcse	./dev/net/i8254xGBe_defs.hh	/^inline int ipcse(TxDesc *d) { assert(isContext(d)); return bits(d->d1,31,16); }$/;"	f	namespace:iGbReg::TxdOp
ipcso	./dev/net/i8254xGBe_defs.hh	/^inline int ipcso(TxDesc *d) { assert(isContext(d)); return bits(d->d1,15,8); }$/;"	f	namespace:iGbReg::TxdOp
ipcss	./dev/net/i8254xGBe_defs.hh	/^inline int ipcss(TxDesc *d) { assert(isContext(d)); return bits(d->d1,7,0); }$/;"	f	namespace:iGbReg::TxdOp
ipdFirst	./base/loader/coff_sym.h	/^    coff_int    ipdFirst;       \/* start of procedures for this file *\/$/;"	m	struct:ecoff_fdr
ipdMax	./base/loader/coff_sym.h	/^    coff_int    ipdMax;         \/* number of procedures *\/$/;"	m	struct:ecoff_symhdr
ipdNil	./base/loader/coff_sym.h	216;"	d
ipdNil	./base/loader/coff_sym.h	440;"	d
ipi_pending	./dev/alpha/tsunami.hh	/^    int ipi_pending[Tsunami::Max_CPUs];$/;"	m	class:Tsunami
ipi_pending	./dev/mips/malta.hh	/^    int ipi_pending[Malta::Max_CPUs];$/;"	m	class:Malta
ipint	./dev/alpha/tsunami_cchip.hh	/^    uint64_t ipint;$/;"	m	class:TsunamiCChip
ipl	./arch/mips/pra_constants.hh	/^    Bitfield<15, 10> ipl;$/;"	m	namespace:MipsISA
iplLast	./kern/kernel_stats.hh	/^    int iplLast;$/;"	m	class:Kernel::Statistics
iplLastTick	./kern/kernel_stats.hh	/^    Tick iplLastTick;$/;"	m	class:Kernel::Statistics
ippci	./arch/mips/pra_constants.hh	/^    Bitfield<28, 26> ippci;$/;"	m	namespace:MipsISA
ipr	./arch/alpha/isa.hh	/^        InternalProcReg ipr[NumInternalProcRegs]; \/\/ Internal processor regs$/;"	m	class:AlphaISA::ISA
iprAddressPseudoInst	./arch/generic/mmapped_ipr.hh	/^    iprAddressPseudoInst(uint8_t func, uint8_t subfunc)$/;"	f	namespace:GenericISA
ips	./arch/arm/miscregs.hh	/^        Bitfield<34, 32> ips; \/\/ EL1$/;"	m	namespace:ArmISA
ips	./arch/arm/miscregs.hh	/^        Bitfield<34, 32> ips;$/;"	m	namespace:ArmISA
ipti	./arch/mips/pra_constants.hh	/^    Bitfield<31, 29> ipti;$/;"	m	namespace:MipsISA
iqBranchInstsIssued	./cpu/o3/inst_queue.hh	/^    Stats::Scalar iqBranchInstsIssued;$/;"	m	class:InstructionQueue
iqCount	./cpu/o3/comm.hh	/^        unsigned iqCount;$/;"	m	struct:TimeBufStruct::iewComm
iqCount	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::iqCount()$/;"	f	class:DefaultFetch
iqEntries	./cpu/o3/rename.hh	/^        unsigned iqEntries;$/;"	m	struct:DefaultRename::FreeEntries
iqFloatInstsIssued	./cpu/o3/inst_queue.hh	/^    Stats::Scalar iqFloatInstsIssued;$/;"	m	class:InstructionQueue
iqInstsAdded	./cpu/o3/inst_queue.hh	/^    Stats::Scalar iqInstsAdded;$/;"	m	class:InstructionQueue
iqInstsIssued	./cpu/o3/inst_queue.hh	/^    Stats::Scalar iqInstsIssued;$/;"	m	class:InstructionQueue
iqIntInstsIssued	./cpu/o3/inst_queue.hh	/^    Stats::Scalar iqIntInstsIssued;$/;"	m	class:InstructionQueue
iqMemInstsIssued	./cpu/o3/inst_queue.hh	/^    Stats::Scalar iqMemInstsIssued;$/;"	m	class:InstructionQueue
iqMiscInstsIssued	./cpu/o3/inst_queue.hh	/^    Stats::Scalar iqMiscInstsIssued;$/;"	m	class:InstructionQueue
iqNonSpecInstsAdded	./cpu/o3/inst_queue.hh	/^    Stats::Scalar iqNonSpecInstsAdded;$/;"	m	class:InstructionQueue
iqPolicy	./cpu/o3/inst_queue.hh	/^    IQPolicy iqPolicy;$/;"	m	class:InstructionQueue
iqPtr	./cpu/o3/inst_queue.hh	/^        InstructionQueue<Impl> *iqPtr;$/;"	m	class:InstructionQueue::FUCompletion
iqPtr	./cpu/o3/mem_dep_unit.hh	/^    InstructionQueue<Impl> *iqPtr;$/;"	m	class:MemDepUnit
iqSquashedInstsExamined	./cpu/o3/inst_queue.hh	/^    Stats::Scalar iqSquashedInstsExamined;$/;"	m	class:InstructionQueue
iqSquashedInstsIssued	./cpu/o3/inst_queue.hh	/^    Stats::Scalar iqSquashedInstsIssued;$/;"	m	class:InstructionQueue
iqSquashedNonSpecRemoved	./cpu/o3/inst_queue.hh	/^    Stats::Scalar iqSquashedNonSpecRemoved;$/;"	m	class:InstructionQueue
iqSquashedOperandsExamined	./cpu/o3/inst_queue.hh	/^    Stats::Scalar iqSquashedOperandsExamined;$/;"	m	class:InstructionQueue
ir0	./arch/arm/miscregs.hh	/^       Bitfield<1,0> ir0;$/;"	m	namespace:ArmISA
ir1	./arch/arm/miscregs.hh	/^       Bitfield<3,2> ir1;$/;"	m	namespace:ArmISA
ir2	./arch/arm/miscregs.hh	/^       Bitfield<5,4> ir2;$/;"	m	namespace:ArmISA
ir3	./arch/arm/miscregs.hh	/^       Bitfield<7,6> ir3;$/;"	m	namespace:ArmISA
ir4	./arch/arm/miscregs.hh	/^       Bitfield<9,8> ir4;$/;"	m	namespace:ArmISA
ir5	./arch/arm/miscregs.hh	/^       Bitfield<11,10> ir5;$/;"	m	namespace:ArmISA
ir6	./arch/arm/miscregs.hh	/^       Bitfield<13,12> ir6;$/;"	m	namespace:ArmISA
ir7	./arch/arm/miscregs.hh	/^       Bitfield<15,14> ir7;$/;"	m	namespace:ArmISA
irgn0	./arch/arm/miscregs.hh	/^        Bitfield<9, 8> irgn0;$/;"	m	namespace:ArmISA
irgn1	./arch/arm/miscregs.hh	/^        Bitfield<25, 24> irgn1; \/\/ EL1$/;"	m	namespace:ArmISA
irgn1	./arch/arm/miscregs.hh	/^        Bitfield<25, 24> irgn1;$/;"	m	namespace:ArmISA
irq	./arch/arm/miscregs.hh	/^        Bitfield<1> irq;$/;"	m	namespace:ArmISA
irqAsserted	./arch/arm/kvm/arm_cpu.hh	/^    bool irqAsserted;$/;"	m	class:ArmKvmCPU
irqAsserted	./arch/arm/kvm/base_cpu.hh	/^    bool irqAsserted;$/;"	m	class:BaseArmKvmCPU
irqEnable	./dev/arm/gic_pl390.hh	/^    bool irqEnable;$/;"	m	class:Pl390
irqPhys	./dev/arm/generic_timer.hh	/^        ArchTimer::Interrupt irqPhys;$/;"	m	struct:GenericTimer::CoreTimers
irqPhys	./dev/arm/generic_timer.hh	/^    const unsigned irqPhys;$/;"	m	class:GenericTimer
irqVirt	./dev/arm/generic_timer.hh	/^        ArchTimer::Interrupt irqVirt;$/;"	m	struct:GenericTimer::CoreTimers
irqVirt	./dev/arm/generic_timer.hh	/^    const unsigned irqVirt;$/;"	m	class:GenericTimer
is	./arch/mips/pra_constants.hh	/^    Bitfield<24, 22> is;$/;"	m	namespace:MipsISA
isAcquire	./mem/request.hh	/^    bool isAcquire() const { return _flags.isSet(ACQUIRE); }$/;"	f	class:Request
isActive	./dev/dma_device.hh	/^    bool isActive() const {$/;"	f	class:DmaReadFifo
isAdvDesc	./dev/net/i8254xGBe_defs.hh	/^inline bool isAdvDesc(TxDesc *d) { return !isLegacy(d) && isTypes(d, TXD_ADVDATA,TXD_ADVCNXT);  }$/;"	f	namespace:iGbReg::TxdOp
isAlignmentFault	./arch/alpha/faults.hh	/^    bool isAlignmentFault() const {return true;}$/;"	f	class:AlphaISA::AlignmentFault
isAllZeros	./cpu/o3/lsq_unit.hh	/^        bool isAllZeros;$/;"	m	struct:LSQUnit::SQEntry
isAtCommit	./cpu/base_dyn_inst.hh	/^    bool isAtCommit() { return status[AtCommit]; }$/;"	f	class:BaseDynInst
isAtomicMode	./sim/system.hh	/^    bool isAtomicMode() const {$/;"	f	class:System
isAutoDelete	./sim/eventq.hh	/^    bool isAutoDelete() const { return flags.isSet(AutoDelete); }$/;"	f	class:Event
isAvailable	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::HardwareResource::isAvailable($/;"	f	class:TraceCPU::ElasticDataGen::HardwareResource
isAvailable	./mem/dram_ctrl.hh	/^        bool isAvailable() const { return refreshState == REF_IDLE; }$/;"	f	class:DRAMCtrl::Rank
isBAR	./dev/pci/device.hh	/^    isBAR(Addr addr, int bar) const$/;"	f	class:PciDevice
isBSYSet	./dev/storage/ide_disk.hh	/^    bool isBSYSet() { return (status & STATUS_BSY_BIT); }$/;"	f	class:IdeDisk
isBarrier	./cpu/minor/lsq.cc	/^LSQ::LSQRequest::isBarrier()$/;"	f	class:Minor::LSQ::LSQRequest
isBarrier	./cpu/minor/lsq.hh	/^        bool isBarrier() { return true; }$/;"	f	class:Minor::LSQ::BarrierDataRequest
isBenign	./arch/x86/faults.hh	/^        virtual bool isBenign()$/;"	f	class:X86ISA::X86FaultBase
isBigEndian64	./arch/arm/utility.cc	/^isBigEndian64(ThreadContext *tc)$/;"	f	namespace:ArmISA
isBlockCached	./mem/packet.hh	/^    bool isBlockCached() const     { return flags.isSet(BLOCK_CACHED); }$/;"	f	class:Packet
isBlockInvalid	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::isBlockInvalid(int64_t cache_set, int64_t loc)$/;"	f	class:CacheMemory
isBlockNotBusy	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::isBlockNotBusy(int64_t cache_set, int64_t loc)$/;"	f	class:CacheMemory
isBlocked	./mem/cache/base.hh	/^        bool isBlocked() const { return blocked; }$/;"	f	class:BaseCache::CacheSlavePort
isBlocked	./mem/cache/base.hh	/^    bool isBlocked() const$/;"	f	class:BaseCache
isBranch	./cpu/minor/pipe_data.cc	/^BranchData::isBranch(const BranchData::Reason reason)$/;"	f	class:Minor::BranchData
isBranch	./cpu/minor/pipe_data.hh	/^    bool isBranch() const { return isBranch(reason); }$/;"	f	class:Minor::BranchData
isBroadcast	./mem/ruby/common/NetDest.cc	/^NetDest::isBroadcast() const$/;"	f	class:NetDest
isBroadcast	./mem/ruby/common/Set.hh	/^    isBroadcast() const$/;"	f	class:Set
isBubble	./cpu/minor/buffers.hh	/^    static bool isBubble(const ElemType &) { return false; }$/;"	f	class:Minor::NoBubbleTraits
isBubble	./cpu/minor/buffers.hh	/^    static bool isBubble(const ElemType &elem)$/;"	f	class:Minor::BubbleTraitsAdaptor
isBubble	./cpu/minor/buffers.hh	/^    static bool isBubble(const PtrType &elem)$/;"	f	class:Minor::BubbleTraitsPtrAdaptor
isBubble	./cpu/minor/dyn_inst.hh	/^    bool isBubble() const { return id.fetchSeqNum == 0; }$/;"	f	class:Minor::MinorDynInst
isBubble	./cpu/minor/func_unit.hh	/^    bool isBubble() const { return inst->isBubble(); }$/;"	f	class:Minor::QueuedInst
isBubble	./cpu/minor/pipe_data.cc	/^ForwardInstData::isBubble() const$/;"	f	class:Minor::ForwardInstData
isBubble	./cpu/minor/pipe_data.hh	/^    bool isBubble() const { return bubbleFlag; }$/;"	f	class:Minor::ForwardLineData
isBubble	./cpu/minor/pipe_data.hh	/^    bool isBubble() const { return reason == NoBranch; }$/;"	f	class:Minor::BranchData
isBuffer	./mem/slicc/symbols/Type.py	/^    def isBuffer(self):$/;"	m	class:Type
isBufferNotFull	./mem/ruby/network/garnet/flexible-pipeline/FlexibleConsumer.hh	/^    virtual bool isBufferNotFull(int vc, int inport) { return true; }$/;"	f	class:FlexibleConsumer
isBufferNotFull	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	/^    bool isBufferNotFull(int vc, int inport) { return true; }$/;"	f	class:NetworkInterface
isBufferNotFull	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::isBufferNotFull(int vc, int inport)$/;"	f	class:Router
isBufferNotFull_link	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.cc	/^NetworkLink::isBufferNotFull_link(int vc)$/;"	f	class:NetworkLink
isBusy	./dev/net/dist_etherlink.hh	/^        bool isBusy() { return txLink->busy(); }$/;"	f	class:DistEtherLink::LocalIface
isBusy	./dev/net/etherint.hh	/^    virtual bool isBusy() { return false; }$/;"	f	class:EtherInt
isBusy	./dev/net/etherlink.hh	/^        bool isBusy() { return txlink->busy(); }$/;"	f	class:EtherLink::Interface
isBusy	./mem/simple_mem.hh	/^    bool isBusy;$/;"	m	class:SimpleMemory
isCC	./cpu/static_inst.hh	/^    bool isCC()           const { return flags[IsCC]; }$/;"	f	class:StaticInst
isCCPhysReg	./cpu/o3/regfile.hh	/^    bool isCCPhysReg(PhysRegIndex reg_idx)$/;"	f	class:PhysRegFile
isCCReg	./arch/isa_parser.py	/^    def isCCReg(self):$/;"	m	class:CCRegOperand
isCCReg	./arch/isa_parser.py	/^    def isCCReg(self):$/;"	m	class:Operand
isCachedAbove	./mem/cache/cache.cc	/^Cache::isCachedAbove(PacketPtr pkt, bool is_timing) const$/;"	f	class:Cache
isCall	./cpu/base_dyn_inst.hh	/^    bool isCall()         const { return staticInst->isCall(); }$/;"	f	class:BaseDynInst
isCall	./cpu/static_inst.hh	/^    bool isCall()         const { return flags[IsCall]; }$/;"	f	class:StaticInst
isCanonicalAddress	./cpu/kvm/x86_cpu.cc	/^isCanonicalAddress(uint64_t addr)$/;"	f	file:
isClass	./base/inet.hh	/^    bool isClass(int cls) const { return typeClass() == IP_OPT_CLASS(cls); }$/;"	f	struct:Net::IpOpt
isCleanEviction	./mem/packet.hh	/^    isCleanEviction() const$/;"	f	class:Packet
isClockSet	./dev/i2c/bus.cc	/^I2CBus::isClockSet(PacketPtr pkt) const$/;"	f	class:I2CBus
isCmdLineSettable	./python/m5/params.py	/^    def isCmdLineSettable(self):$/;"	m	class:ParamDesc
isCommitted	./cpu/base_dyn_inst.hh	/^    bool isCommitted() const { return status[Committed]; }$/;"	f	class:BaseDynInst
isComp	./cpu/o3/probe/elastic_trace.hh	/^        bool isComp() const { return (type == Record::COMP); }$/;"	f	struct:ElasticTrace::TraceInfo
isComp	./cpu/trace/trace_cpu.hh	/^            bool isComp() const { return (type == Record::COMP); }$/;"	f	class:TraceCPU::ElasticDataGen::GraphNode
isComplete	./arch/arm/stage2_lookup.hh	/^    bool isComplete() const { return complete; }$/;"	f	class:ArmISA::Stage2LookUp
isComplete	./cpu/minor/fetch1.hh	/^        bool isComplete() const { return state == Complete; }$/;"	f	class:Minor::Fetch1::FetchRequest
isComplete	./cpu/minor/lsq.cc	/^LSQ::LSQRequest::isComplete() const$/;"	f	class:Minor::LSQ::LSQRequest
isComplete	./mem/mem_checker.hh	/^        bool isComplete() const { return complete != TICK_FUTURE; }$/;"	f	class:MemChecker::WriteCluster
isCompleted	./cpu/base_dyn_inst.hh	/^    bool isCompleted() const { return status[Completed]; }$/;"	f	class:BaseDynInst
isCondCtrl	./cpu/base_dyn_inst.hh	/^    bool isCondCtrl()     const { return staticInst->isCondCtrl(); }$/;"	f	class:BaseDynInst
isCondCtrl	./cpu/static_inst.hh	/^    bool isCondCtrl()     const { return flags[IsCondControl]; }$/;"	f	class:StaticInst
isCondDelaySlot	./cpu/base_dyn_inst.hh	/^    bool isCondDelaySlot() const { return staticInst->isCondDelaySlot(); }$/;"	f	class:BaseDynInst
isCondDelaySlot	./cpu/static_inst.hh	/^    bool isCondDelaySlot() const { return flags[IsCondDelaySlot]; }$/;"	f	class:StaticInst
isCondSwap	./mem/request.hh	/^    bool isCondSwap() const { return _flags.isSet(MEM_SWAP_COND); }$/;"	f	class:Request
isConfReported	./mem/abstract_mem.hh	/^    bool isConfReported() const { return confTableReported; }$/;"	f	class:AbstractMemory
isConnected	./mem/port.cc	/^BaseMasterPort::isConnected() const$/;"	f	class:BaseMasterPort
isConnected	./mem/port.cc	/^BaseSlavePort::isConnected() const$/;"	f	class:BaseSlavePort
isContext	./dev/net/i8254xGBe_defs.hh	/^inline bool isContext(TxDesc *d) { return !isLegacy(d) && isTypes(d,TXD_CNXT, TXD_ADVCNXT); }$/;"	f	namespace:iGbReg::TxdOp
isControl	./cpu/base_dyn_inst.hh	/^    bool isControl()      const { return staticInst->isControl(); }$/;"	f	class:BaseDynInst
isControl	./cpu/static_inst.hh	/^    bool isControl()      const { return flags[IsControl]; }$/;"	f	class:StaticInst
isControlReg	./arch/isa_parser.py	/^    def isControlReg(self):$/;"	m	class:ControlRegOperand
isControlReg	./arch/isa_parser.py	/^    def isControlReg(self):$/;"	m	class:Operand
isCopied	./base/inet.hh	/^    bool isCopied(int cpy) const { return typeCopied() == IP_OPT_COPIED(cpy); }$/;"	f	struct:Net::IpOpt
isDEVSelect	./dev/storage/ide_disk.cc	/^IdeDisk::isDEVSelect()$/;"	f	class:IdeDisk
isData	./dev/net/i8254xGBe_defs.hh	/^inline bool isData(TxDesc *d) { return !isLegacy(d) && isTypes(d, TXD_DATA, TXD_ADVDATA); }$/;"	f	namespace:iGbReg::TxdOp
isDataPrefetch	./cpu/base_dyn_inst.hh	/^    bool isDataPrefetch() const { return staticInst->isDataPrefetch(); }$/;"	f	class:BaseDynInst
isDataPrefetch	./cpu/static_inst.hh	/^    bool isDataPrefetch() const { return flags[IsDataPrefetch]; }$/;"	f	class:StaticInst
isDeadlockEventScheduled	./mem/ruby/system/DMASequencer.hh	/^    bool isDeadlockEventScheduled() const { return false; }$/;"	f	class:DMASequencer
isDeadlockEventScheduled	./mem/ruby/system/RubyPortProxy.hh	/^    bool isDeadlockEventScheduled() const { return false; }$/;"	f	class:RubyPortProxy
isDeadlockEventScheduled	./mem/ruby/system/Sequencer.hh	/^    bool isDeadlockEventScheduled() const$/;"	f	class:Sequencer
isDec	./base/intmath.hh	/^isDec(char c)$/;"	f
isDelayedCommit	./cpu/base_dyn_inst.hh	/^    bool isDelayedCommit() const { return staticInst->isDelayedCommit(); }$/;"	f	class:BaseDynInst
isDelayedCommit	./cpu/static_inst.hh	/^    bool isDelayedCommit() const { return flags[IsDelayedCommit]; }$/;"	f	class:StaticInst
isDenormalized	./arch/power/insts/floating.hh	/^    isDenormalized(uint32_t val_bits) const$/;"	f	class:PowerISA::FloatOp
isDirectCtrl	./cpu/base_dyn_inst.hh	/^    bool isDirectCtrl()   const { return staticInst->isDirectCtrl(); }$/;"	f	class:BaseDynInst
isDirectCtrl	./cpu/static_inst.hh	/^    bool isDirectCtrl()   const { return flags[IsDirectControl]; }$/;"	f	class:StaticInst
isDirty	./mem/cache/blk.hh	/^    bool isDirty() const$/;"	f	class:CacheBlk
isDirty	./mem/cache/cache.cc	/^Cache::isDirty() const$/;"	f	class:Cache
isDirty	./mem/cache/cache.hh	/^    bool isDirty() const { return _isDirty; };$/;"	f	class:CacheBlkIsDirtyVisitor
isDiscardable	./cpu/minor/fetch1.cc	/^bool Fetch1::FetchRequest::isDiscardable() const$/;"	f	class:Minor::Fetch1::FetchRequest
isDiskSelected	./dev/storage/ide_ctrl.cc	/^IdeController::isDiskSelected(IdeDisk *diskPtr)$/;"	f	class:IdeController
isDoneSquashing	./cpu/o3/rob.hh	/^    bool isDoneSquashing(ThreadID tid) const$/;"	f	class:ROB
isDrained	./cpu/minor/decode.cc	/^Decode::isDrained()$/;"	f	class:Minor::Decode
isDrained	./cpu/minor/execute.cc	/^Execute::isDrained()$/;"	f	class:Minor::Execute
isDrained	./cpu/minor/fetch1.cc	/^Fetch1::isDrained()$/;"	f	class:Minor::Fetch1
isDrained	./cpu/minor/fetch2.cc	/^Fetch2::isDrained()$/;"	f	class:Minor::Fetch2
isDrained	./cpu/minor/lsq.cc	/^LSQ::isDrained()$/;"	f	class:Minor::LSQ
isDrained	./cpu/minor/lsq.hh	/^        bool isDrained() const { return slots.empty(); }$/;"	f	class:Minor::LSQ::StoreBuffer
isDrained	./cpu/minor/pipeline.cc	/^Pipeline::isDrained()$/;"	f	class:Minor::Pipeline
isDrained	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::isDrained() const$/;"	f	class:DefaultCommit
isDrained	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::isDrained() const$/;"	f	class:FullO3CPU
isDrained	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::isDrained() const$/;"	f	class:DefaultDecode
isDrained	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::isDrained() const$/;"	f	class:DefaultFetch
isDrained	./cpu/o3/fu_pool.cc	/^FUPool::isDrained() const$/;"	f	class:FUPool
isDrained	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::isDrained() const$/;"	f	class:DefaultIEW
isDrained	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::isDrained() const$/;"	f	class:InstructionQueue
isDrained	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::isDrained() const$/;"	f	class:LSQ
isDrained	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::isDrained() const$/;"	f	class:MemDepUnit
isDrained	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::isDrained() const$/;"	f	class:DefaultRename
isDrained	./cpu/simple/atomic.hh	/^    bool isDrained() {$/;"	f	class:AtomicSimpleCPU
isDrained	./cpu/simple/timing.hh	/^    bool isDrained() {$/;"	f	class:TimingSimpleCPU
isDrained	./sim/drain.hh	/^    bool isDrained() const { return _state == DrainState::Drained; }$/;"	f	class:DrainManager
isDraining	./cpu/o3/cpu.hh	/^    bool isDraining() const { return drainState() == DrainState::Draining; }$/;"	f	class:FullO3CPU
isDynamic	./base/loader/elf_object.hh	/^    virtual bool isDynamic() { return sectionExists(".interp"); }$/;"	f	class:ElfObject
isDynamic	./base/loader/object_file.hh	/^    virtual bool isDynamic() { return false; }$/;"	f	class:ObjectFile
isElement	./mem/ruby/common/NetDest.cc	/^NetDest::isElement(MachineID element) const$/;"	f	class:NetDest
isElement	./mem/ruby/common/Set.hh	/^    bool isElement(NodeID element) const { return bits.test(element); }$/;"	f	class:Set
isEmpty	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::isEmpty() const$/;"	f	class:LSQ
isEmpty	./cpu/o3/lsq_unit.hh	/^    bool isEmpty() const { return lqEmpty() && sqEmpty(); }$/;"	f	class:LSQUnit
isEmpty	./cpu/o3/rob.hh	/^    bool isEmpty() const$/;"	f	class:ROB
isEmpty	./cpu/o3/rob.hh	/^    bool isEmpty(ThreadID tid) const$/;"	f	class:ROB
isEmpty	./mem/ruby/common/NetDest.cc	/^NetDest::isEmpty() const$/;"	f	class:NetDest
isEmpty	./mem/ruby/common/Set.hh	/^    bool isEmpty() const { return bits.none(); }$/;"	f	class:Set
isEmpty	./mem/ruby/network/MessageBuffer.hh	/^    bool isEmpty() const { return m_prio_heap.size() == 0; }$/;"	f	class:MessageBuffer
isEmpty	./mem/ruby/network/garnet/fixed-pipeline/flitBuffer_d.cc	/^flitBuffer_d::isEmpty()$/;"	f	class:flitBuffer_d
isEmpty	./mem/ruby/network/garnet/flexible-pipeline/flitBuffer.cc	/^flitBuffer::isEmpty()$/;"	f	class:flitBuffer
isEnabled	./sim/dvfs_handler.hh	/^    bool isEnabled() const { return enableHandler; }$/;"	f	class:DVFSHandler
isEnd	./dev/i2c/bus.cc	/^I2CBus::isEnd(PacketPtr pkt) const$/;"	f	class:I2CBus
isEntry	./arch/alpha/stacktrace.cc	/^StackTrace::isEntry(Addr addr)$/;"	f	class:AlphaISA::StackTrace
isEntry	./arch/arm/stacktrace.cc	/^    StackTrace::isEntry(Addr addr)$/;"	f	class:ArmISA::StackTrace
isEntry	./arch/mips/stacktrace.cc	/^StackTrace::isEntry(Addr addr)$/;"	f	class:StackTrace
isEntry	./arch/power/stacktrace.cc	/^StackTrace::isEntry(Addr addr)$/;"	f	class:PowerISA::StackTrace
isEntry	./arch/x86/stacktrace.cc	/^    StackTrace::isEntry(Addr addr)$/;"	f	class:X86ISA::StackTrace
isEnumeration	./mem/slicc/symbols/Type.py	/^    def isEnumeration(self):$/;"	m	class:Type
isEqual	./mem/ruby/common/NetDest.cc	/^NetDest::isEqual(const NetDest& n) const$/;"	f	class:NetDest
isEqual	./mem/ruby/common/Set.hh	/^    isEqual(const Set& obj) const$/;"	f	class:Set
isError	./mem/packet.hh	/^    bool isError() const             { return cmd.isError(); }$/;"	f	class:Packet
isError	./mem/packet.hh	/^    bool isError() const        { return testCmdAttrib(IsError); }$/;"	f	class:MemCmd
isEviction	./mem/packet.hh	/^    bool isEviction() const          { return cmd.isEviction(); }$/;"	f	class:Packet
isEviction	./mem/packet.hh	/^    bool isEviction() const        { return testCmdAttrib(IsEviction); }$/;"	f	class:MemCmd
isExecComplete	./cpu/trace/trace_cpu.hh	/^        bool isExecComplete() const { return execComplete; }$/;"	f	class:TraceCPU::ElasticDataGen
isExecuted	./cpu/base_dyn_inst.hh	/^    bool isExecuted() const { return status[Executed]; }$/;"	f	class:BaseDynInst
isExitEvent	./sim/eventq.hh	/^    bool isExitEvent() const { return flags.isSet(IsExitEvent); }$/;"	f	class:Event
isExpressSnoop	./mem/packet.hh	/^    bool isExpressSnoop() const { return flags.isSet(EXPRESS_SNOOP); }$/;"	f	class:Packet
isExternal	./mem/slicc/symbols/Type.py	/^    def isExternal(self):$/;"	m	class:Type
isFault	./cpu/minor/dyn_inst.hh	/^    bool isFault() const { return fault != NoFault; }$/;"	f	class:Minor::MinorDynInst
isFault	./cpu/minor/pipe_data.hh	/^    bool isFault() const { return fault != NoFault; }$/;"	f	class:Minor::ForwardLineData
isFaultModelEnabled	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    bool isFaultModelEnabled() const { return m_enable_fault_model; }$/;"	f	class:BaseGarnetNetwork
isFetch	./arch/arm/table_walker.hh	/^        bool isFetch;$/;"	m	class:ArmISA::TableWalker::WalkerState
isFile	./base/output.cc	/^OutputDirectory::isFile(const std::ostream *os)$/;"	f	class:OutputDirectory
isFile	./base/output.cc	/^OutputDirectory::isFile(const string &name) const$/;"	f	class:OutputDirectory
isFile	./base/output.hh	/^    static inline bool isFile(const std::ostream &os) {$/;"	f	class:OutputDirectory
isFiltered	./arch/arm/pmu.cc	/^PMU::isFiltered(const CounterState &ctr) const$/;"	f	class:ArmISA::PMU
isFirstMicroop	./cpu/base_dyn_inst.hh	/^    bool isFirstMicroop() const { return staticInst->isFirstMicroop(); }$/;"	f	class:BaseDynInst
isFirstMicroop	./cpu/static_inst.hh	/^    bool isFirstMicroop() const { return flags[IsFirstMicroop]; }$/;"	f	class:StaticInst
isFlagSet	./sim/eventq.hh	/^    isFlagSet(Flags _flags) const$/;"	f	class:Event
isFloatPhysReg	./cpu/o3/regfile.hh	/^    bool isFloatPhysReg(PhysRegIndex reg_idx) const$/;"	f	class:PhysRegFile
isFloatReg	./arch/isa_parser.py	/^    def isFloatReg(self):$/;"	m	class:FloatRegOperand
isFloatReg	./arch/isa_parser.py	/^    def isFloatReg(self):$/;"	m	class:Operand
isFloating	./cpu/base_dyn_inst.hh	/^    bool isFloating()     const { return staticInst->isFloating(); }$/;"	f	class:BaseDynInst
isFloating	./cpu/static_inst.hh	/^    bool isFloating()     const { return flags[IsFloating]; }$/;"	f	class:StaticInst
isFlush	./mem/packet.hh	/^    bool isFlush() const             { return cmd.isFlush(); }$/;"	f	class:Packet
isFlush	./mem/packet.hh	/^    bool isFlush() const        { return testCmdAttrib(IsFlush); }$/;"	f	class:MemCmd
isForward	./mem/cache/mshr.hh	/^    bool isForward;$/;"	m	class:MSHR
isForwardNoResponse	./mem/cache/mshr.hh	/^    bool isForwardNoResponse() const$/;"	f	class:MSHR
isFree	./sim/fd_entry.cc	/^FDEntry::isFree()$/;"	f	class:FDEntry
isFull	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::isFull()$/;"	f	class:InstructionQueue
isFull	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::isFull(ThreadID tid)$/;"	f	class:InstructionQueue
isFull	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::isFull()$/;"	f	class:LSQ
isFull	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::isFull(ThreadID tid)$/;"	f	class:LSQ
isFull	./cpu/o3/lsq_unit.hh	/^    bool isFull() { return lqFull() || sqFull(); }$/;"	f	class:LSQUnit
isFull	./cpu/o3/rob.hh	/^    bool isFull()$/;"	f	class:ROB
isFull	./cpu/o3/rob.hh	/^    bool isFull(ThreadID tid)$/;"	f	class:ROB
isFull	./mem/cache/mshr_queue.hh	/^    bool isFull() const$/;"	f	class:MSHRQueue
isFull	./mem/ruby/network/garnet/fixed-pipeline/flitBuffer_d.cc	/^flitBuffer_d::isFull()$/;"	f	class:flitBuffer_d
isFull	./mem/ruby/network/garnet/flexible-pipeline/flitBuffer.cc	/^flitBuffer::isFull()$/;"	f	class:flitBuffer
isGenericIprAccess	./arch/generic/mmapped_ipr.hh	/^    isGenericIprAccess(const Packet *pkt)$/;"	f	namespace:GenericISA
isGlobal	./mem/slicc/symbols/Type.py	/^    def isGlobal(self):$/;"	m	class:Type
isHWPrefetch	./mem/packet.hh	/^    bool isHWPrefetch() const   { return testCmdAttrib(IsHWPrefetch); }$/;"	f	class:MemCmd
isHeadReady	./cpu/o3/rob_impl.hh	/^ROB<Impl>::isHeadReady(ThreadID tid)$/;"	f	class:ROB
isHex	./base/intmath.hh	/^isHex(char c)$/;"	f
isHyp	./arch/arm/pagetable.hh	/^    bool isHyp;$/;"	m	struct:ArmISA::TlbEntry
isHyp	./arch/arm/table_walker.hh	/^        bool    isHyp;$/;"	m	class:ArmISA::TableWalker::WalkerState
isHyp	./arch/arm/tlb.hh	/^    bool isHyp;$/;"	m	class:ArmISA::TLB
isHyperPriv	./arch/sparc/isa.hh	/^    bool isHyperPriv() { return hpstate.hpriv; }$/;"	f	class:SparcISA::ISA
isIENSet	./dev/storage/ide_disk.hh	/^    bool isIENSet() { return nIENBit; }$/;"	f	class:IdeDisk
isInAddrMap	./mem/abstract_mem.hh	/^    bool isInAddrMap() const { return inAddrMap; }$/;"	f	class:AbstractMemory
isInIQ	./cpu/base_dyn_inst.hh	/^    bool isInIQ() const { return status[IqEntry]; }$/;"	f	class:BaseDynInst
isInLSQ	./cpu/base_dyn_inst.hh	/^    bool isInLSQ() const { return status[LsqEntry]; }$/;"	f	class:BaseDynInst
isInPort	./mem/slicc/symbols/Type.py	/^    def isInPort(self):$/;"	m	class:Type
isInROB	./cpu/base_dyn_inst.hh	/^    bool isInROB() const { return status[RobEntry]; }$/;"	f	class:BaseDynInst
isInState	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.hh	/^    isInState(VC_state_type state, Cycles request_time)$/;"	f	class:OutVcState_d
isInState	./mem/ruby/network/garnet/flexible-pipeline/InVcState.cc	/^InVcState::isInState(VC_state_type state, Cycles request_time)$/;"	f	class:InVcState
isInState	./mem/ruby/network/garnet/flexible-pipeline/OutVcState.cc	/^OutVcState::isInState(VC_state_type state, Cycles request_time)$/;"	f	class:OutVcState
isInWriteQueue	./mem/dram_ctrl.hh	/^    std::unordered_set<Addr> isInWriteQueue;$/;"	m	class:DRAMCtrl
isInbetweenInsts	./cpu/minor/execute.cc	/^Execute::isInbetweenInsts() const$/;"	f	class:Minor::Execute
isIncoming	./dev/virtio/base.hh	/^    bool isIncoming() const { return !isOutgoing(); }$/;"	f	class:VirtDescriptor
isIndirectCtrl	./cpu/base_dyn_inst.hh	/^    bool isIndirectCtrl() const { return staticInst->isIndirectCtrl(); }$/;"	f	class:BaseDynInst
isIndirectCtrl	./cpu/static_inst.hh	/^    bool isIndirectCtrl() const { return flags[IsIndirectControl]; }$/;"	f	class:StaticInst
isInfinity	./arch/power/insts/floating.hh	/^    isInfinity(uint32_t val_bits) const$/;"	f	class:PowerISA::FloatOp
isInst	./cpu/minor/dyn_inst.hh	/^    bool isInst() const { return !isBubble() && !isFault(); }$/;"	f	class:Minor::MinorDynInst
isInstDataCpuPort	./cpu/testers/rubytest/RubyTester.cc	/^RubyTester::isInstDataCpuPort(int idx)$/;"	f	class:RubyTester
isInstFetch	./mem/request.hh	/^    bool isInstFetch() const { return _flags.isSet(INST_FETCH); }$/;"	f	class:Request
isInstOnlyCpuPort	./cpu/testers/rubytest/RubyTester.cc	/^RubyTester::isInstOnlyCpuPort(int idx)$/;"	f	class:RubyTester
isInstPrefetch	./cpu/base_dyn_inst.hh	/^    bool isInstPrefetch() const { return staticInst->isInstPrefetch(); }$/;"	f	class:BaseDynInst
isInstPrefetch	./cpu/static_inst.hh	/^    bool isInstPrefetch() const { return flags[IsInstPrefetch]; }$/;"	f	class:StaticInst
isIntPhysReg	./cpu/o3/regfile.hh	/^    bool isIntPhysReg(PhysRegIndex reg_idx) const$/;"	f	class:PhysRegFile
isIntReg	./arch/isa_parser.py	/^    def isIntReg(self):$/;"	m	class:IntRegOperand
isIntReg	./arch/isa_parser.py	/^    def isIntReg(self):$/;"	m	class:Operand
isInteger	./cpu/base_dyn_inst.hh	/^    bool isInteger()      const { return staticInst->isInteger(); }$/;"	f	class:BaseDynInst
isInteger	./cpu/static_inst.hh	/^    bool isInteger()      const { return flags[IsInteger]; }$/;"	f	class:StaticInst
isInterface	./mem/slicc/symbols/Type.py	/^    def isInterface(self):$/;"	m	class:Type
isInterrupted	./cpu/minor/execute.cc	/^Execute::isInterrupted(ThreadID thread_id) const$/;"	f	class:Minor::Execute
isInvalidate	./mem/packet.hh	/^    bool isInvalidate() const        { return cmd.isInvalidate(); }$/;"	f	class:Packet
isInvalidate	./mem/packet.hh	/^    bool isInvalidate() const      { return testCmdAttrib(IsInvalidate); }$/;"	f	class:MemCmd
isInvariantReg	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::isInvariantReg(uint64_t id)$/;"	f	class:ArmKvmCPU
isIprAccess	./cpu/base_dyn_inst.hh	/^    bool isIprAccess() const { return staticInst->isIprAccess(); }$/;"	f	class:BaseDynInst
isIprAccess	./cpu/static_inst.hh	/^    bool isIprAccess() const { return flags[IsIprAccess]; }$/;"	f	class:StaticInst
isIssued	./cpu/base_dyn_inst.hh	/^    bool isIssued() const { return status[Issued]; }$/;"	f	class:BaseDynInst
isLLSC	./mem/packet.hh	/^    bool isLLSC() const              { return cmd.isLLSC(); }$/;"	f	class:Packet
isLLSC	./mem/packet.hh	/^    bool isLLSC() const         { return testCmdAttrib(IsLlsc); }$/;"	f	class:MemCmd
isLLSC	./mem/request.hh	/^    bool isLLSC() const { return _flags.isSet(LLSC); }$/;"	f	class:Request
isLastMicroop	./cpu/base_dyn_inst.hh	/^    bool isLastMicroop() const { return staticInst->isLastMicroop(); }$/;"	f	class:BaseDynInst
isLastMicroop	./cpu/static_inst.hh	/^    bool isLastMicroop() const { return flags[IsLastMicroop]; }$/;"	f	class:StaticInst
isLastOpInInst	./cpu/minor/dyn_inst.cc	/^MinorDynInst::isLastOpInInst() const$/;"	f	class:Minor::MinorDynInst
isLeftNode	./mem/stack_dist_calc.hh	/^        bool isLeftNode;$/;"	m	struct:StackDistCalc::Node
isLegacy	./dev/net/i8254xGBe_defs.hh	/^inline bool isLegacy(TxDesc *d) { return !bits(d->d2,29,29); }$/;"	f	namespace:iGbReg::TxdOp
isLoad	./cpu/base_dyn_inst.hh	/^    bool isLoad()         const { return staticInst->isLoad(); }$/;"	f	class:BaseDynInst
isLoad	./cpu/minor/lsq.hh	/^        bool isLoad;$/;"	m	class:Minor::LSQ::LSQRequest
isLoad	./cpu/o3/lsq_unit.hh	/^        bool isLoad;$/;"	m	class:LSQUnit::LSQSenderState
isLoad	./cpu/o3/probe/elastic_trace.hh	/^        bool isLoad() const { return (type == Record::LOAD); }$/;"	f	struct:ElasticTrace::TraceInfo
isLoad	./cpu/static_inst.hh	/^    bool isLoad()         const { return flags[IsLoad]; }$/;"	f	class:StaticInst
isLoad	./cpu/trace/trace_cpu.hh	/^            bool isLoad() const { return (type == Record::LOAD); }$/;"	f	class:TraceCPU::ElasticDataGen::GraphNode
isLocked	./mem/ruby/slicc_interface/AbstractCacheEntry.cc	/^AbstractCacheEntry::isLocked(int context) const$/;"	f	class:AbstractCacheEntry
isLocked	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::isLocked(Addr address, int context)$/;"	f	class:CacheMemory
isLocked	./mem/ruby/structures/PersistentTable.cc	/^PersistentTable::isLocked(Addr address) const$/;"	f	class:PersistentTable
isLockedRMW	./mem/request.hh	/^    bool isLockedRMW() const { return _flags.isSet(LOCKED_RMW); }$/;"	f	class:Request
isMMUFault	./arch/arm/faults.cc	/^AbortFault<T>::isMMUFault() const$/;"	f	class:ArmISA::AbortFault
isMachineCheckFault	./arch/mips/faults.hh	/^    bool isMachineCheckFault() { return true; }$/;"	f	class:MipsISA::MachineCheckFault
isMacroop	./cpu/base_dyn_inst.hh	/^    bool isMacroop() const { return staticInst->isMacroop(); }$/;"	f	class:BaseDynInst
isMacroop	./cpu/static_inst.hh	/^    bool isMacroop() const { return flags[IsMacroop]; }$/;"	f	class:StaticInst
isMarked	./mem/stack_dist_calc.hh	/^        bool isMarked;$/;"	m	struct:StackDistCalc::Node
isMaster	./dev/net/dist_iface.hh	/^    bool isMaster;$/;"	m	class:DistIface
isMaster	./sim/cxx_config.hh	/^        const bool isMaster;$/;"	m	class:CxxConfigDirectoryEntry::PortDesc
isMem	./arch/isa_parser.py	/^    def isMem(self):$/;"	m	class:MemOperand
isMem	./arch/isa_parser.py	/^    def isMem(self):$/;"	m	class:Operand
isMemAddr	./mem/physical.cc	/^PhysicalMemory::isMemAddr(Addr addr) const$/;"	f	class:PhysicalMemory
isMemAddr	./sim/system.cc	/^System::isMemAddr(Addr addr) const$/;"	f	class:System
isMemBarrier	./cpu/base_dyn_inst.hh	/^    bool isMemBarrier()   const { return staticInst->isMemBarrier(); }$/;"	f	class:BaseDynInst
isMemBarrier	./cpu/static_inst.hh	/^    bool isMemBarrier()   const { return flags[IsMemBarrier]; }$/;"	f	class:StaticInst
isMemRef	./cpu/base_dyn_inst.hh	/^    bool isMemRef()       const { return staticInst->isMemRef(); }$/;"	f	class:BaseDynInst
isMemRef	./cpu/minor/dyn_inst.hh	/^    bool isMemRef() const { return isInst() && staticInst->isMemRef(); }$/;"	f	class:Minor::MinorDynInst
isMemRef	./cpu/static_inst.hh	/^    bool isMemRef()       const { return flags[IsMemRef]; }$/;"	f	class:StaticInst
isMessage	./mem/slicc/symbols/Type.py	/^    def isMessage(self):$/;"	m	class:Type
isMicroBranch	./cpu/base_dyn_inst.hh	/^    bool isMicroBranch() const { return staticInst->isMicroBranch(); }$/;"	f	class:BaseDynInst
isMicroBranch	./cpu/static_inst.hh	/^    bool isMicroBranch() const { return flags[IsMicroBranch]; }$/;"	f	class:StaticInst
isMicroop	./cpu/base_dyn_inst.hh	/^    bool isMicroop() const { return staticInst->isMicroop(); }$/;"	f	class:BaseDynInst
isMicroop	./cpu/static_inst.hh	/^    bool isMicroop() const { return flags[IsMicroop]; }$/;"	f	class:StaticInst
isMisc	./arch/arm/types.hh	/^        Bitfield<32>     isMisc;$/;"	m	namespace:ArmISA
isMmappedIpr	./mem/request.hh	/^    bool isMmappedIpr() const { return _flags.isSet(MMAPPED_IPR); }$/;"	f	class:Request
isNan	./arch/mips/utility.cc	/^isNan(void *val_ptr, int size)$/;"	f	namespace:MipsISA
isNan	./arch/power/insts/floating.hh	/^    isNan(double val) const$/;"	f	class:PowerISA::FloatOp
isNan	./arch/power/insts/floating.hh	/^    isNan(float val) const$/;"	f	class:PowerISA::FloatOp
isNan	./arch/power/insts/floating.hh	/^    isNan(uint32_t val_bits) const$/;"	f	class:PowerISA::FloatOp
isNan	./arch/power/insts/floating.hh	/^    isNan(uint64_t val_bits) const$/;"	f	class:PowerISA::FloatOp
isNegative	./arch/power/insts/floating.hh	/^    isNegative(uint32_t val_bits) const$/;"	f	class:PowerISA::FloatOp
isNoCostInst	./cpu/minor/dyn_inst.cc	/^MinorDynInst::isNoCostInst() const$/;"	f	class:Minor::MinorDynInst
isNonPriv	./arch/sparc/isa.hh	/^    bool isNonPriv() { return !isPriv(); }$/;"	f	class:SparcISA::ISA
isNonSpeculative	./cpu/base_dyn_inst.hh	/^    bool isNonSpeculative() const { return staticInst->isNonSpeculative(); }$/;"	f	class:BaseDynInst
isNonSpeculative	./cpu/static_inst.hh	/^    bool isNonSpeculative() const { return flags[IsNonSpeculative]; }$/;"	f	class:StaticInst
isNop	./cpu/base_dyn_inst.hh	/^    bool isNop()          const { return staticInst->isNop(); }$/;"	f	class:BaseDynInst
isNop	./cpu/static_inst.hh	/^    bool isNop()          const { return flags[IsNop]; }$/;"	f	class:StaticInst
isNormalized	./arch/power/insts/floating.hh	/^    isNormalized(uint32_t val_bits) const$/;"	f	class:PowerISA::FloatOp
isNull	./mem/abstract_mem.hh	/^    bool isNull() const { return params()->null; }$/;"	f	class:AbstractMemory
isNullPointer	./python/m5/params.py	/^def isNullPointer(value):$/;"	f
isNumber	./base/inet.hh	/^    bool isNumber(int num) const { return typeNumber() == IP_OPT_NUMBER(num); }$/;"	f	struct:Net::IpOpt
isOct	./base/intmath.hh	/^isOct(char c)$/;"	f
isOutPort	./mem/slicc/symbols/Type.py	/^    def isOutPort(self):$/;"	m	class:Type
isOutgoing	./dev/virtio/base.hh	/^    bool isOutgoing() const { return desc.flags & VRING_DESC_F_WRITE; }$/;"	f	class:VirtDescriptor
isPCPart	./arch/isa_parser.py	/^    def isPCPart(self):$/;"	m	class:Operand
isPCState	./arch/isa_parser.py	/^    def isPCState(self):$/;"	m	class:Operand
isPCState	./arch/isa_parser.py	/^    def isPCState(self):$/;"	m	class:PCStateOperand
isPTWalk	./mem/request.hh	/^    bool isPTWalk() const { return _flags.isSet(PT_WALK); }$/;"	f	class:Request
isParallel	./mem/ruby/filters/H3BloomFilter.hh	/^    bool isParallel;$/;"	m	class:H3BloomFilter
isParallel	./mem/ruby/filters/MultiBitSelBloomFilter.hh	/^    bool isParallel;$/;"	m	class:MultiBitSelBloomFilter
isPendingModified	./mem/cache/mshr.hh	/^    bool isPendingModified() const {$/;"	f	class:MSHR
isPhysMemAddress	./mem/ruby/system/DMASequencer.cc	/^DMASequencer::MemSlavePort::isPhysMemAddress(Addr addr) const$/;"	f	class:DMASequencer::MemSlavePort
isPhysMemAddress	./mem/ruby/system/RubyPort.cc	/^RubyPort::MemSlavePort::isPhysMemAddress(Addr addr) const$/;"	f	class:RubyPort::MemSlavePort
isPipe	./sim/fd_entry.hh	/^    bool isPipe;$/;"	m	class:FDEntry
isPipelined	./cpu/func_unit.cc	/^FuncUnit::isPipelined(OpClass capability)$/;"	f	class:FuncUnit
isPipelined	./cpu/o3/fu_pool.hh	/^    bool isPipelined(OpClass capability) {$/;"	f	class:FUPool
isPopable	./cpu/minor/buffers.hh	/^    bool isPopable() { return !BubbleTraits::isBubble(front()); }$/;"	f	class:Minor::SelfStallingPipeline
isPow2	./base/bitfield.hh	/^isPow2(T v) {$/;"	f
isPowerOf2	./base/intmath.hh	/^isPowerOf2(const T& n)$/;"	f
isPrefetch	./cpu/static_inst.hh	/^    bool isPrefetch()     const { return isInstPrefetch() ||$/;"	f	class:StaticInst
isPrefetch	./cpu/translation.hh	/^    isPrefetch() const$/;"	f	class:WholeTranslationState
isPrefetch	./mem/packet.hh	/^    bool isPrefetch() const     { return testCmdAttrib(IsSWPrefetch) ||$/;"	f	class:MemCmd
isPrefetch	./mem/request.hh	/^    bool isPrefetch() const { return _flags.isSet(PREFETCH); }$/;"	f	class:Request
isPresent	./mem/ruby/structures/DirectoryMemory.cc	/^DirectoryMemory::isPresent(Addr address)$/;"	f	class:DirectoryMemory
isPresent	./mem/ruby/structures/TBETable.hh	/^TBETable<ENTRY>::isPresent(Addr address) const$/;"	f	class:TBETable
isPrime	./base/intmath.hh	/^isPrime(const T& n)$/;"	f
isPrimitive	./mem/slicc/symbols/Type.py	/^    def isPrimitive(self):$/;"	m	class:Type
isPrint	./mem/packet.hh	/^    bool isPrint() const             { return cmd.isPrint(); }$/;"	f	class:Packet
isPrint	./mem/packet.hh	/^    bool isPrint() const        { return testCmdAttrib(IsPrint); }$/;"	f	class:MemCmd
isPriv	./arch/arm/tlb.hh	/^    bool isPriv;$/;"	m	class:ArmISA::TLB
isPriv	./arch/sparc/isa.hh	/^    bool isPriv() { return hpstate.hpriv || pstate.priv; }$/;"	f	class:SparcISA::ISA
isPriv	./mem/request.hh	/^    bool isPriv() const { return _flags.isSet(PRIVILEGED); }$/;"	f	class:Request
isQnan	./arch/mips/utility.cc	/^isQnan(void *val_ptr, int size)$/;"	f	namespace:MipsISA
isQnan	./arch/power/insts/floating.hh	/^    isQnan(uint32_t val_bits) const$/;"	f	class:PowerISA::FloatOp
isQuiesce	./cpu/base_dyn_inst.hh	/^    bool isQuiesce() const { return staticInst->isQuiesce(); }$/;"	f	class:BaseDynInst
isQuiesce	./cpu/static_inst.hh	/^    bool isQuiesce() const { return flags[IsQuiesce]; }$/;"	f	class:StaticInst
isRead	./cpu/testers/traffic_gen/generators.hh	/^    bool isRead;$/;"	m	class:DramGen
isRead	./mem/dram_ctrl.hh	/^        const bool isRead;$/;"	m	class:DRAMCtrl::DRAMPacket
isRead	./mem/packet.hh	/^    bool isRead() const              { return cmd.isRead(); }$/;"	f	class:Packet
isRead	./mem/packet.hh	/^    bool isRead() const            { return testCmdAttrib(IsRead); }$/;"	f	class:MemCmd
isReadOnly	./arch/x86/pagetable.hh	/^        bool isReadOnly(PageTableEntry PTE)$/;"	f	class:X86ISA::PageTableOps
isReadOnly	./mem/cache/base.hh	/^    const bool isReadOnly;$/;"	m	class:BaseCache
isReadable	./mem/cache/blk.hh	/^    bool isReadable() const$/;"	f	class:CacheBlk
isReady	./mem/ruby/network/MessageBuffer.cc	/^MessageBuffer::isReady(Tick current_time) const$/;"	f	class:MessageBuffer
isReady	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    isReady(int invc, Cycles curTime)$/;"	f	class:InputUnit_d
isReady	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.hh	/^    inline bool isReady(Cycles curTime)$/;"	f	class:NetworkLink_d
isReady	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    inline bool isReady(Cycles curTime)$/;"	f	class:VirtualChannel_d
isReady	./mem/ruby/network/garnet/fixed-pipeline/flitBuffer_d.cc	/^flitBuffer_d::isReady(Cycles curTime)$/;"	f	class:flitBuffer_d
isReady	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.cc	/^NetworkLink::isReady()$/;"	f	class:NetworkLink
isReady	./mem/ruby/network/garnet/flexible-pipeline/flitBuffer.cc	/^flitBuffer::isReady(Cycles curTime)$/;"	f	class:flitBuffer
isReady	./mem/ruby/structures/TimerTable.cc	/^TimerTable::isReady(Tick curTime) const$/;"	f	class:TimerTable
isReady	./mem/ruby/structures/WireBuffer.cc	/^WireBuffer::isReady(Tick current_time)$/;"	f	class:WireBuffer
isReadySrcRegIdx	./cpu/base_dyn_inst.hh	/^    bool isReadySrcRegIdx(int idx) const$/;"	f	class:BaseDynInst
isReferenced	./base/inifile.hh	/^        bool isReferenced() { return referenced; }$/;"	f	class:IniFile::Entry
isReferenced	./base/inifile.hh	/^        bool isReferenced() { return referenced; }$/;"	f	class:IniFile::Section
isReg	./arch/isa_parser.py	/^    def isReg(self):$/;"	m	class:CCRegOperand
isReg	./arch/isa_parser.py	/^    def isReg(self):$/;"	m	class:ControlRegOperand
isReg	./arch/isa_parser.py	/^    def isReg(self):$/;"	m	class:FloatRegOperand
isReg	./arch/isa_parser.py	/^    def isReg(self):$/;"	m	class:IntRegOperand
isReg	./arch/isa_parser.py	/^    def isReg(self):$/;"	m	class:Operand
isRelease	./mem/request.hh	/^    bool isRelease() const { return _flags.isSet(RELEASE); }$/;"	f	class:Request
isRequest	./mem/packet.hh	/^    bool isRequest() const           { return cmd.isRequest(); }$/;"	f	class:Packet
isRequest	./mem/packet.hh	/^    bool isRequest() const         { return testCmdAttrib(IsRequest); }$/;"	f	class:MemCmd
isReserved	./arch/x86/intmessage.hh	/^        isReserved(int mode)$/;"	f	namespace:X86ISA::DeliveryMode
isReset	./mem/cache/mshr.hh	/^        bool isReset() const { return !needsWritable && !hasUpgrade; }$/;"	f	class:MSHR::TargetList
isResponse	./mem/packet.hh	/^    bool isResponse() const          { return cmd.isResponse(); }$/;"	f	class:Packet
isResponse	./mem/packet.hh	/^    bool isResponse() const        { return testCmdAttrib(IsResponse); }$/;"	f	class:MemCmd
isResultReady	./cpu/base_dyn_inst.hh	/^    bool isResultReady() const { return status[ResultReady]; }$/;"	f	class:BaseDynInst
isRetrying	./arch/x86/pagetable_walker.cc	/^Walker::WalkerState::isRetrying()$/;"	f	class:X86ISA::Walker::WalkerState
isReturn	./cpu/base_dyn_inst.hh	/^    bool isReturn()       const { return staticInst->isReturn(); }$/;"	f	class:BaseDynInst
isReturn	./cpu/static_inst.hh	/^    bool isReturn()       const { return flags[IsReturn]; }$/;"	f	class:StaticInst
isRomMicroPC	./base/types.hh	/^isRomMicroPC(MicroPC upc)$/;"	f
isRoot	./python/m5/SimObject.py	/^def isRoot(obj):$/;"	f
isSP	./arch/arm/intregs.hh	/^isSP(IntRegIndex reg)$/;"	f	namespace:ArmISA
isSWPrefetch	./mem/packet.hh	/^    bool isSWPrefetch() const   { return testCmdAttrib(IsSWPrefetch); }$/;"	f	class:MemCmd
isSecure	./arch/arm/table_walker.hh	/^        bool isSecure;$/;"	m	class:ArmISA::TableWalker::WalkerState
isSecure	./arch/arm/tlb.hh	/^    bool isSecure;$/;"	m	class:ArmISA::TLB
isSecure	./mem/cache/blk.hh	/^    bool isSecure() const$/;"	f	class:CacheBlk
isSecure	./mem/cache/mshr.hh	/^    bool isSecure;$/;"	m	class:MSHR
isSecure	./mem/cache/prefetch/stride.hh	/^        bool isSecure;$/;"	m	struct:StridePrefetcher::StrideEntry
isSecure	./mem/packet.hh	/^    bool isSecure() const$/;"	f	class:Packet
isSecure	./mem/request.hh	/^    bool isSecure() const { return _flags.isSet(SECURE); }$/;"	f	class:Request
isSerializeAfter	./cpu/base_dyn_inst.hh	/^    bool isSerializeAfter() const$/;"	f	class:BaseDynInst
isSerializeAfter	./cpu/static_inst.hh	/^    bool isSerializeAfter() const { return flags[IsSerializeAfter]; }$/;"	f	class:StaticInst
isSerializeBefore	./cpu/base_dyn_inst.hh	/^    bool isSerializeBefore() const$/;"	f	class:BaseDynInst
isSerializeBefore	./cpu/static_inst.hh	/^    bool isSerializeBefore() const { return flags[IsSerializeBefore]; }$/;"	f	class:StaticInst
isSerializeHandled	./cpu/base_dyn_inst.hh	/^    bool isSerializeHandled() { return status[SerializeHandled]; }$/;"	f	class:BaseDynInst
isSerializing	./cpu/base_dyn_inst.hh	/^    bool isSerializing()  const { return staticInst->isSerializing(); }$/;"	f	class:BaseDynInst
isSerializing	./cpu/static_inst.hh	/^    bool isSerializing()  const { return flags[IsSerializing] ||$/;"	f	class:StaticInst
isSet	./base/flags.hh	/^    bool isSet() const { return _flags; }$/;"	f	class:Flags
isSet	./base/flags.hh	/^    bool isSet(Type flags) const { return (_flags & flags); }$/;"	f	class:Flags
isSet	./mem/ruby/filters/BlockBloomFilter.cc	/^BlockBloomFilter::isSet(Addr addr)$/;"	f	class:BlockBloomFilter
isSet	./mem/ruby/filters/BulkBloomFilter.cc	/^BulkBloomFilter::isSet(Addr addr)$/;"	f	class:BulkBloomFilter
isSet	./mem/ruby/filters/H3BloomFilter.cc	/^H3BloomFilter::isSet(Addr addr)$/;"	f	class:H3BloomFilter
isSet	./mem/ruby/filters/LSB_CountingBloomFilter.cc	/^LSB_CountingBloomFilter::isSet(Addr addr)$/;"	f	class:LSB_CountingBloomFilter
isSet	./mem/ruby/filters/MultiBitSelBloomFilter.cc	/^MultiBitSelBloomFilter::isSet(Addr addr)$/;"	f	class:MultiBitSelBloomFilter
isSet	./mem/ruby/filters/MultiGrainBloomFilter.cc	/^MultiGrainBloomFilter::isSet(Addr addr)$/;"	f	class:MultiGrainBloomFilter
isSet	./mem/ruby/filters/NonCountingBloomFilter.cc	/^NonCountingBloomFilter::isSet(Addr addr)$/;"	f	class:NonCountingBloomFilter
isSet	./mem/ruby/structures/TimerTable.hh	/^    bool isSet(Addr address) const { return !!m_map.count(address); }$/;"	f	class:TimerTable
isSimObject	./python/m5/SimObject.py	/^def isSimObject(value):$/;"	f
isSimObject	./python/m5/params.py	/^def isSimObject(*args, **kwargs):$/;"	f
isSimObject	./sim/cxx_config.hh	/^        const bool isSimObject;$/;"	m	class:CxxConfigDirectoryEntry::ParamDesc
isSimObjectClass	./python/m5/SimObject.py	/^def isSimObjectClass(value):$/;"	f
isSimObjectClass	./python/m5/params.py	/^def isSimObjectClass(*args, **kwargs):$/;"	f
isSimObjectOrSequence	./python/m5/SimObject.py	/^def isSimObjectOrSequence(value):$/;"	f
isSimObjectOrVector	./python/m5/SimObject.py	/^def isSimObjectOrVector(value):$/;"	f
isSimObjectSequence	./python/m5/SimObject.py	/^def isSimObjectSequence(value):$/;"	f
isSimObjectSequence	./python/m5/params.py	/^def isSimObjectSequence(*args, **kwargs):$/;"	f
isSimObjectVector	./python/m5/SimObject.py	/^def isSimObjectVector(value):$/;"	f
isSnan	./arch/arm/insts/vfp.hh	/^isSnan(fpType val)$/;"	f	namespace:ArmISA
isSnan	./arch/mips/utility.cc	/^isSnan(void *val_ptr, int size)$/;"	f	namespace:MipsISA
isSnan	./arch/power/insts/floating.hh	/^    isSnan(uint32_t val_bits) const$/;"	f	class:PowerISA::FloatOp
isSnooping	./cpu/o3/cpu.hh	/^        virtual bool isSnooping() const { return true; }$/;"	f	class:FullO3CPU::DcachePort
isSnooping	./cpu/simple/atomic.hh	/^        bool isSnooping() const { return true; }$/;"	f	class:AtomicSimpleCPU::AtomicCPUDPort
isSnooping	./cpu/simple/timing.hh	/^        virtual bool isSnooping() const {$/;"	f	class:TimingSimpleCPU::DcachePort
isSnooping	./cpu/trace/trace_cpu.hh	/^        bool isSnooping() const { return true; }$/;"	f	class:TraceCPU::DcachePort
isSnooping	./mem/addr_mapper.cc	/^AddrMapper::isSnooping() const$/;"	f	class:AddrMapper
isSnooping	./mem/addr_mapper.hh	/^        bool isSnooping() const$/;"	f	class:AddrMapper::MapperMasterPort
isSnooping	./mem/cache/base.hh	/^        virtual bool isSnooping() const { return true; }$/;"	f	class:BaseCache::CacheMasterPort
isSnooping	./mem/coherent_xbar.hh	/^        virtual bool isSnooping() const$/;"	f	class:CoherentXBar::CoherentXBarMasterPort
isSnooping	./mem/comm_monitor.cc	/^CommMonitor::isSnooping() const$/;"	f	class:CommMonitor
isSnooping	./mem/comm_monitor.hh	/^        bool isSnooping() const$/;"	f	class:CommMonitor::MonitorMasterPort
isSnooping	./mem/mem_checker_monitor.cc	/^MemCheckerMonitor::isSnooping() const$/;"	f	class:MemCheckerMonitor
isSnooping	./mem/mem_checker_monitor.hh	/^        bool isSnooping() const$/;"	f	class:MemCheckerMonitor::MonitorMasterPort
isSnooping	./mem/port.hh	/^    bool isSnooping() const { return _masterPort->isSnooping(); }$/;"	f	class:SlavePort
isSnooping	./mem/port.hh	/^    virtual bool isSnooping() const { return false; }$/;"	f	class:MasterPort
isSoft	./arch/x86/faults.hh	/^        bool isSoft()$/;"	f	class:X86ISA::SoftwareInterrupt
isSoft	./arch/x86/faults.hh	/^        virtual bool isSoft()$/;"	f	class:X86ISA::X86FaultBase
isSplit	./cpu/o3/lsq_unit.hh	/^        bool isSplit;$/;"	m	class:LSQUnit::LSQSenderState
isSplit	./cpu/o3/lsq_unit.hh	/^        bool isSplit;$/;"	m	struct:LSQUnit::SQEntry
isSplit	./cpu/translation.hh	/^    bool isSplit;$/;"	m	class:WholeTranslationState
isSquashAfter	./cpu/base_dyn_inst.hh	/^    bool isSquashAfter() const { return staticInst->isSquashAfter(); }$/;"	f	class:BaseDynInst
isSquashAfter	./cpu/static_inst.hh	/^    bool isSquashAfter() const { return flags[IsSquashAfter]; }$/;"	f	class:StaticInst
isSquashed	./cpu/base_dyn_inst.hh	/^    bool isSquashed() const { return status[Squashed]; }$/;"	f	class:BaseDynInst
isSquashed	./cpu/simple/timing.hh	/^    bool isSquashed() const { return false; }$/;"	f	class:TimingSimpleCPU
isSquashedInIQ	./cpu/base_dyn_inst.hh	/^    bool isSquashedInIQ() const { return status[SquashedInIQ]; }$/;"	f	class:BaseDynInst
isSquashedInLSQ	./cpu/base_dyn_inst.hh	/^    bool isSquashedInLSQ() const { return status[SquashedInLSQ]; }$/;"	f	class:BaseDynInst
isSquashedInROB	./cpu/base_dyn_inst.hh	/^    bool isSquashedInROB() const { return status[SquashedInROB]; }$/;"	f	class:BaseDynInst
isStage2	./arch/arm/faults.hh	/^    bool isStage2() const { return stage2; }$/;"	f	class:ArmISA::AbortFault
isStage2	./arch/arm/faults.hh	/^    virtual bool isStage2() const { return false; }$/;"	f	class:ArmISA::ArmFault
isStage2	./arch/arm/table_walker.hh	/^    const bool isStage2;$/;"	m	class:ArmISA::TableWalker
isStage2	./arch/arm/tlb.hh	/^    bool isStage2;       \/\/ Indicates this TLB is part of the second stage MMU$/;"	m	class:ArmISA::TLB
isStallMapEmpty	./mem/ruby/network/MessageBuffer.hh	/^    bool isStallMapEmpty() { return m_stall_msg_map.size() == 0; }$/;"	f	class:MessageBuffer
isStalled	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::isStalled()$/;"	f	class:LSQ
isStalled	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::isStalled(ThreadID tid)$/;"	f	class:LSQ
isStalled	./cpu/o3/lsq_unit.hh	/^    bool isStalled()  { return stalled; }$/;"	f	class:LSQUnit
isStart	./dev/i2c/bus.cc	/^I2CBus::isStart(PacketPtr pkt) const$/;"	f	class:I2CBus
isStore	./cpu/base_dyn_inst.hh	/^    bool isStore()        const { return staticInst->isStore(); }$/;"	f	class:BaseDynInst
isStore	./cpu/o3/probe/elastic_trace.hh	/^        bool isStore() const { return (type == Record::STORE); }$/;"	f	struct:ElasticTrace::TraceInfo
isStore	./cpu/static_inst.hh	/^    bool isStore()        const { return flags[IsStore]; }$/;"	f	class:StaticInst
isStore	./cpu/trace/trace_cpu.hh	/^            bool isStore() const { return (type == Record::STORE); }$/;"	f	class:TraceCPU::ElasticDataGen::GraphNode
isStoreBlocked	./cpu/o3/lsq_unit.hh	/^    bool isStoreBlocked;$/;"	m	class:LSQUnit
isStoreConditional	./cpu/base_dyn_inst.hh	/^    bool isStoreConditional() const$/;"	f	class:BaseDynInst
isStoreConditional	./cpu/static_inst.hh	/^    bool isStoreConditional()     const { return flags[IsStoreConditional]; }$/;"	f	class:StaticInst
isStreamChange	./cpu/minor/pipe_data.cc	/^BranchData::isStreamChange(const BranchData::Reason reason)$/;"	f	class:Minor::BranchData
isStreamChange	./cpu/minor/pipe_data.hh	/^    bool isStreamChange() const { return isStreamChange(reason); }$/;"	f	class:Minor::BranchData
isStrictlyOrdered	./cpu/trace/trace_cpu.hh	/^            bool isStrictlyOrdered() const {$/;"	f	class:TraceCPU::ElasticDataGen::GraphNode
isStrictlyOrdered	./cpu/translation.hh	/^    isStrictlyOrdered() const$/;"	f	class:WholeTranslationState
isStrictlyOrdered	./mem/request.hh	/^    bool isStrictlyOrdered() const { return _flags.isSet(STRICT_ORDER); }$/;"	f	class:Request
isSubset	./base/addr_range.hh	/^    bool isSubset(const AddrRange& r) const$/;"	f	class:AddrRange
isSubset	./mem/ruby/common/NetDest.hh	/^    bool isSubset(const NetDest& test) const { return test.isSuperset(*this); }$/;"	f	class:NetDest
isSubset	./mem/ruby/common/Set.hh	/^    bool isSubset(const Set& test) const { return test.isSuperset(*this); }$/;"	f	class:Set
isSuperset	./mem/ruby/common/NetDest.cc	/^NetDest::isSuperset(const NetDest& test) const$/;"	f	class:NetDest
isSuperset	./mem/ruby/common/Set.hh	/^    isSuperset(const Set& test) const$/;"	f	class:Set
isSwap	./mem/request.hh	/^    bool isSwap() const { return _flags.isSet(MEM_SWAP|MEM_SWAP_COND); }$/;"	f	class:Request
isSwitch	./dev/net/tcp_iface.hh	/^    bool isSwitch;$/;"	m	class:TCPIface
isSyscall	./cpu/base_dyn_inst.hh	/^    bool isSyscall() const { return staticInst->isSyscall(); }$/;"	f	class:BaseDynInst
isSyscall	./cpu/static_inst.hh	/^    bool isSyscall() const { return flags[IsSyscall]; }$/;"	f	class:StaticInst
isTagPresent	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::isTagPresent(Addr address) const$/;"	f	class:CacheMemory
isTagPresent	./mem/ruby/structures/PerfectCacheMemory.hh	/^PerfectCacheMemory<ENTRY>::isTagPresent(Addr address) const$/;"	f	class:PerfectCacheMemory
isTcp	./dev/net/i8254xGBe.hh	/^        bool isTcp;$/;"	m	class:IGbE::TxDescCache
isTempSerializeAfter	./cpu/base_dyn_inst.hh	/^    bool isTempSerializeAfter() { return status[SerializeAfter]; }$/;"	f	class:BaseDynInst
isTempSerializeBefore	./cpu/base_dyn_inst.hh	/^    bool isTempSerializeBefore() { return status[SerializeBefore]; }$/;"	f	class:BaseDynInst
isThreadSync	./cpu/base_dyn_inst.hh	/^    bool isThreadSync()   const { return staticInst->isThreadSync(); }$/;"	f	class:BaseDynInst
isThreadSync	./cpu/static_inst.hh	/^    bool isThreadSync()   const { return flags[IsThreadSync]; }$/;"	f	class:StaticInst
isTiming	./arch/x86/pagetable_walker.cc	/^Walker::WalkerState::isTiming()$/;"	f	class:X86ISA::Walker::WalkerState
isTimingMode	./mem/dram_ctrl.hh	/^    bool isTimingMode;$/;"	m	class:DRAMCtrl
isTimingMode	./sim/system.hh	/^    bool isTimingMode() const {$/;"	f	class:System
isTouched	./mem/cache/blk.hh	/^    bool isTouched;$/;"	m	class:CacheBlk
isTouched	./mem/cache/tags/fa_lru.hh	/^    bool isTouched;$/;"	m	class:FALRUBlk
isTraceComplete	./cpu/trace/trace_cpu.hh	/^        bool isTraceComplete() { return traceComplete; }$/;"	f	class:TraceCPU::FixedRetryGen
isTranslationDelayed	./cpu/base_dyn_inst.hh	/^    bool isTranslationDelayed() const$/;"	f	class:BaseDynInst
isTtyReq	./arch/alpha/linux/linux.hh	/^    isTtyReq(unsigned req)$/;"	f	class:AlphaLinux
isTtyReq	./arch/alpha/tru64/tru64.hh	/^    isTtyReq(unsigned req)$/;"	f	class:AlphaTru64
isTtyReq	./arch/mips/linux/linux.hh	/^    isTtyReq(unsigned req)$/;"	f	class:MipsLinux
isTtyReq	./arch/power/linux/linux.hh	/^    isTtyReq(unsigned req)$/;"	f	class:PowerLinux
isTtyReq	./arch/sparc/linux/linux.hh	/^    isTtyReq(unsigned req)$/;"	f	class:SparcLinux
isTtyReq	./kern/freebsd/freebsd.hh	/^    isTtyReq(unsigned req)$/;"	f	class:FreeBSD
isTtyReq	./kern/linux/linux.hh	/^    isTtyReq(unsigned req)$/;"	f	class:Linux
isType	./dev/net/i8254xGBe_defs.hh	/^inline bool isType(TxDesc *d, uint8_t type) { return getType(d) == type; }$/;"	f	namespace:iGbReg::TxdOp
isTypes	./dev/net/i8254xGBe_defs.hh	/^inline bool isTypes(TxDesc *d, uint8_t t1, uint8_t t2) { return isType(d, t1) || isType(d, t2); }$/;"	f	namespace:iGbReg::TxdOp
isUncacheable	./arch/x86/pagetable.hh	/^        bool isUncacheable(const PageTableEntry PTE)$/;"	f	class:X86ISA::PageTableOps
isUncacheable	./mem/cache/mshr.hh	/^    bool isUncacheable() const { return _isUncacheable; }$/;"	f	class:MSHR
isUncacheable	./mem/request.hh	/^    bool isUncacheable() const { return _flags.isSet(UNCACHEABLE); }$/;"	f	class:Request
isUncondCtrl	./cpu/base_dyn_inst.hh	/^    bool isUncondCtrl()   const { return staticInst->isUncondCtrl(); }$/;"	f	class:BaseDynInst
isUncondCtrl	./cpu/static_inst.hh	/^    bool isUncondCtrl()   const { return flags[IsUncondControl]; }$/;"	f	class:StaticInst
isUnmapped	./mem/multi_level_page_table_impl.hh	/^MultiLevelPageTable<ISAOps>::isUnmapped(Addr vaddr, int64_t size)$/;"	f	class:MultiLevelPageTable
isUnmapped	./mem/page_table.cc	/^FuncPageTable::isUnmapped(Addr vaddr, int64_t size)$/;"	f	class:FuncPageTable
isUnverifiable	./cpu/base_dyn_inst.hh	/^    bool isUnverifiable() const { return staticInst->isUnverifiable(); }$/;"	f	class:BaseDynInst
isUnverifiable	./cpu/static_inst.hh	/^    bool isUnverifiable() const { return flags[IsUnverifiable]; }$/;"	f	class:StaticInst
isUpgrade	./mem/packet.hh	/^    bool isUpgrade()  const          { return cmd.isUpgrade(); }$/;"	f	class:Packet
isUpgrade	./mem/packet.hh	/^    bool isUpgrade() const         { return testCmdAttrib(IsUpgrade); }$/;"	f	class:MemCmd
isVNetOrdered	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    bool isVNetOrdered(int vnet) const { return m_ordered[vnet]; }$/;"	f	class:BaseGarnetNetwork
isVNetOrdered	./mem/ruby/network/simple/SimpleNetwork.hh	/^    bool isVNetOrdered(int vnet) const { return m_ordered[vnet]; }$/;"	f	class:SimpleNetwork
isValid	./cpu/testers/traffic_gen/generators.hh	/^        bool isValid() const {$/;"	f	struct:TraceGen::TraceElement
isValid	./cpu/trace/trace_cpu.hh	/^            bool isValid() const {$/;"	f	struct:TraceCPU::FixedRetryGen::TraceElement
isValid	./mem/cache/blk.hh	/^    bool isValid() const$/;"	f	class:CacheBlk
isValidCounter	./arch/arm/pmu.hh	/^    bool isValidCounter(CounterId id) const {$/;"	f	class:ArmISA::PMU
isVector	./sim/cxx_config.hh	/^        const bool isVector;$/;"	m	class:CxxConfigDirectoryEntry::ParamDesc
isVector	./sim/cxx_config.hh	/^        const bool isVector;$/;"	m	class:CxxConfigDirectoryEntry::PortDesc
isVlan	./base/inet.hh	/^    bool isVlan() const { return (ntohs(eth_type) == ETH_TYPE_8021Q); }$/;"	f	struct:Net::EthHdr
isWildcard	./mem/slicc/symbols/State.py	/^    def isWildcard(self):$/;"	m	class:State
isWildcard	./mem/slicc/symbols/State.py	/^    def isWildcard(self):$/;"	m	class:WildcardState
isWritable	./mem/cache/blk.hh	/^    bool isWritable() const$/;"	f	class:CacheBlk
isWrite	./arch/arm/table_walker.hh	/^        bool isWrite;$/;"	m	class:ArmISA::TableWalker::WalkerState
isWrite	./mem/packet.hh	/^    bool isWrite() const             { return cmd.isWrite(); }$/;"	f	class:Packet
isWrite	./mem/packet.hh	/^    bool isWrite() const           { return testCmdAttrib(IsWrite); }$/;"	f	class:MemCmd
isWriteBarrier	./cpu/base_dyn_inst.hh	/^    bool isWriteBarrier() const { return staticInst->isWriteBarrier(); }$/;"	f	class:BaseDynInst
isWriteBarrier	./cpu/static_inst.hh	/^    bool isWriteBarrier() const { return flags[IsWriteBarrier]; }$/;"	f	class:StaticInst
isWriteback	./mem/packet.hh	/^    bool isWriteback() const         { return cmd.isWriteback(); }$/;"	f	class:Packet
isWriteback	./mem/packet.hh	/^    bool isWriteback() const       { return testCmdAttrib(IsEviction) &&$/;"	f	class:MemCmd
isZero	./arch/power/insts/floating.hh	/^    isZero(uint32_t val_bits) const$/;"	f	class:PowerISA::FloatOp
isZeroReg	./cpu/o3/scoreboard.hh	/^    bool isZeroReg(PhysRegIndex idx) const$/;"	f	class:Scoreboard
is_candidate_inport	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.cc	/^SWallocator_d::is_candidate_inport(int inport, int invc)$/;"	f	class:SWallocator_d
is_free_signal	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    bool is_free_signal() { return m_is_free_signal; }$/;"	f	class:flit_d
is_icache	./mem/ruby/structures/RubyCache.py	/^    is_icache = Param.Bool(False, "is instruction only cache");$/;"	v	class:RubyCache
is_invc_candidate	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.cc	/^VCallocator_d::is_invc_candidate(int inport_iter, int invc_iter)$/;"	f	class:VCallocator_d
is_mouse	./dev/arm/RealView.py	/^    is_mouse = Param.Bool(False, "Is this interface a mouse, if not a keyboard")$/;"	v	class:Pl050
is_read_only	./mem/cache/Cache.py	/^    is_read_only = Param.Bool(False, "Is this cache read only (e.g. inst)")$/;"	v	class:BaseCache
is_stage	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    is_stage(flit_stage t_stage, Cycles curTime)$/;"	f	class:flit_d
is_stage2	./arch/arm/ArmTLB.py	/^    is_stage2 =  Param.Bool(False, "Is this object for stage 2 translation?")$/;"	v	class:ArmTableWalker
is_stage2	./arch/arm/ArmTLB.py	/^    is_stage2 = Param.Bool(False, "Is this a stage 2 TLB?")$/;"	v	class:ArmTLB
is_stage2	./arch/arm/ArmTLB.py	/^    is_stage2 = True$/;"	v	class:ArmStage2TLB
is_stage2	./arch/arm/ArmTLB.py	/^    is_stage2 = True$/;"	v	class:ArmStage2TableWalker
is_switch	./dev/net/Ethernet.py	/^    is_switch = Param.Bool(False, "true if this a link in etherswitch")$/;"	v	class:DistEtherLink
is_vc_idle	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.hh	/^    is_vc_idle(int vc, Cycles curTime)$/;"	f	class:OutputUnit_d
isa	./arch/arm/isa_device.hh	/^    ISA *isa;$/;"	m	class:ArmISA::BaseISADevice
isa	./cpu/o3/cpu.hh	/^    std::vector<TheISA::ISA *> isa;$/;"	m	class:FullO3CPU
isa	./cpu/simple_thread.hh	/^    TheISA::ISA *const isa;    \/\/ one "instance" of the current ISA.$/;"	m	class:SimpleThread::TheISA
isa_class	./cpu/BaseCPU.py	/^    isa_class = AlphaISA$/;"	v
isa_class	./cpu/BaseCPU.py	/^    isa_class = ArmISA$/;"	v
isa_class	./cpu/BaseCPU.py	/^    isa_class = MipsISA$/;"	v
isa_class	./cpu/BaseCPU.py	/^    isa_class = PowerISA$/;"	v
isa_class	./cpu/BaseCPU.py	/^    isa_class = SparcISA$/;"	v
isa_class	./cpu/BaseCPU.py	/^    isa_class = X86ISA$/;"	v
isattached	./base/remote_gdb.cc	/^BaseRemoteGDB::isattached()$/;"	f	class:BaseRemoteGDB
islistening	./base/socket.hh	/^    bool islistening() const { return listening; }$/;"	f	class:ListenSocket
islistening	./dev/net/tcp_iface.hh	/^    bool islistening() const { return listening; }$/;"	f	class:TCPIface
isopt	./base/inet.hh	/^    bool isopt(int opt) const { return type() == opt; }$/;"	f	struct:Net::TcpOpt
isproxy	./python/m5/proxy.py	/^def isproxy(obj):$/;"	f
isr	./dev/net/ns_gige.hh	/^    uint32_t    isr;$/;"	m	struct:dp_regs
iss	./arch/arm/faults.cc	/^AbortFault<T>::iss() const$/;"	f	class:ArmISA::AbortFault
iss	./arch/arm/faults.cc	/^DataAbort::iss() const$/;"	f	class:ArmISA::DataAbort
iss	./arch/arm/faults.cc	/^SecureMonitorCall::iss() const$/;"	f	class:ArmISA::SecureMonitorCall
iss	./arch/arm/faults.cc	/^SupervisorCall::iss() const$/;"	f	class:ArmISA::SupervisorCall
iss	./arch/arm/faults.cc	/^UndefinedInstruction::iss() const$/;"	f	class:ArmISA::UndefinedInstruction
iss	./arch/arm/faults.hh	/^    virtual uint32_t iss() const { return issRaw; }$/;"	f	class:ArmISA::ArmFaultVals
iss	./base/loader/coff_sym.h	/^    coff_int    iss;            \/* index into String Space of name *\/$/;"	m	struct:ecoff_sym
iss	./base/loader/coff_sym.h	/^    coff_int    iss;            \/* index into string space (not used) *\/$/;"	m	union:__anon115
issBase	./base/loader/coff_sym.h	/^    coff_int    issBase;        \/* file's string space *\/$/;"	m	struct:ecoff_fdr
issExtMax	./base/loader/coff_sym.h	/^    coff_int    issExtMax;      \/* max index into external strings *\/$/;"	m	struct:ecoff_symhdr
issMax	./base/loader/coff_sym.h	/^    coff_int    issMax;         \/* max index into local strings *\/$/;"	m	struct:ecoff_symhdr
issNil	./base/loader/coff_sym.h	279;"	d
issNil	./base/loader/coff_sym.h	444;"	d
issNull	./base/loader/coff_sym.h	280;"	d
issNull	./base/loader/coff_sym.h	445;"	d
issRaw	./arch/arm/faults.hh	/^    uint32_t issRaw;$/;"	m	class:ArmISA::ArmFault
issetugidFunc	./arch/arm/freebsd/process.cc	/^issetugidFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
issue	./cpu/minor/execute.cc	/^Execute::issue(bool only_issue_microops)$/;"	f	class:Minor::Execute
issue	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::issue(DynInstPtr &inst)$/;"	f	class:MemDepUnit
issueLat	./cpu/minor/MinorCPU.py	/^    issueLat = 9$/;"	v	class:MinorDefaultIntDivFU
issueLat	./cpu/minor/MinorCPU.py	/^    issueLat = Param.Cycles(1, "cycles until another instruction can be"$/;"	v	class:MinorFU
issueLat	./cpu/minor/func_unit.hh	/^    Cycles issueLat;$/;"	m	class:MinorFU
issueLimit	./cpu/minor/execute.hh	/^    unsigned int issueLimit;$/;"	m	class:Minor::Execute
issueNext	./mem/ruby/system/DMASequencer.cc	/^DMASequencer::issueNext()$/;"	f	class:DMASequencer
issueNextPrefetch	./mem/ruby/structures/Prefetcher.cc	/^Prefetcher::issueNextPrefetch(Addr address, PrefetchEntry *stream)$/;"	f	class:Prefetcher
issuePipelinedIfetch	./cpu/o3/fetch.hh	/^    bool issuePipelinedIfetch[Impl::MaxThreads];$/;"	m	class:DefaultFetch
issueRate	./cpu/o3/inst_queue.hh	/^    Stats::Formula issueRate;$/;"	m	class:InstructionQueue
issueRefresh	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::issueRefresh(int bank)$/;"	f	class:RubyMemoryControl
issueRequest	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::issueRequest(int bank)$/;"	f	class:RubyMemoryControl
issueRequest	./mem/ruby/system/Sequencer.cc	/^Sequencer::issueRequest(PacketPtr pkt, RubyRequestType secondary_type)$/;"	f	class:Sequencer
issueTick	./cpu/o3/dyn_inst.hh	/^    int32_t issueTick;$/;"	m	class:BaseO3DynInst
issueToExecQueue	./cpu/o3/iew.hh	/^    TimeBuffer<IssueStruct> issueToExecQueue;$/;"	m	class:DefaultIEW
issueToExecuteDelay	./cpu/o3/O3CPU.py	/^    issueToExecuteDelay = Param.Cycles(1, "Issue to execute delay (internal "$/;"	v	class:DerivO3CPU
issueToExecuteDelay	./cpu/o3/iew.hh	/^    Cycles issueToExecuteDelay;$/;"	m	class:DefaultIEW
issueToExecuteQueue	./cpu/o3/inst_queue.hh	/^    TimeBuffer<IssueStruct> *issueToExecuteQueue;$/;"	m	class:InstructionQueue
issueWidth	./cpu/o3/O3CPU.py	/^    issueWidth = Param.Unsigned(8, "Issue width")$/;"	v	class:DerivO3CPU
issueWidth	./cpu/o3/iew.hh	/^    unsigned issueWidth;$/;"	m	class:DefaultIEW
issue_time	./mem/ruby/system/Sequencer.hh	/^    Cycles issue_time;$/;"	m	struct:SequencerRequest
issued	./cpu/o3/store_set.cc	/^StoreSet::issued(Addr issued_PC, InstSeqNum issued_seq_num, bool is_store)$/;"	f	class:StoreSet
issuedMemBarrierInst	./cpu/minor/lsq.cc	/^LSQ::issuedMemBarrierInst(MinorDynInstPtr inst)$/;"	f	class:Minor::LSQ
issuedToMemory	./cpu/minor/lsq.hh	/^        bool issuedToMemory;$/;"	m	class:Minor::LSQ::LSQRequest
istatus	./dev/arm/generic_timer.hh	/^    Bitfield<2> istatus;$/;"	m	class:ArchTimer
isv	./arch/arm/faults.hh	/^    bool    isv;$/;"	m	class:ArmISA::DataAbort
isym	./base/loader/coff_sym.h	/^    coff_int    isym;           \/* start of local symbol entries *\/$/;"	m	struct:pdr
isym	./base/loader/coff_sym.h	/^    coff_int    isym;           \/* symbol table index (end of proc) *\/$/;"	m	union:__anon115
isymBase	./base/loader/coff_sym.h	/^    coff_int    isymBase;       \/* beginning of symbols *\/$/;"	m	struct:ecoff_fdr
isymMax	./base/loader/coff_sym.h	/^    coff_int    isymMax;        \/* number of local symbols *\/$/;"	m	struct:ecoff_symhdr
isymNil	./base/loader/coff_sym.h	277;"	d
isymNil	./base/loader/coff_sym.h	442;"	d
it1	./arch/arm/miscregs.hh	/^        Bitfield<26, 25> it1;$/;"	m	namespace:ArmISA
it2	./arch/arm/miscregs.hh	/^        Bitfield<15, 10> it2;$/;"	m	namespace:ArmISA
itBits	./arch/arm/decoder.hh	/^    ITSTATE itBits;$/;"	m	class:ArmISA::Decoder
itLines	./dev/arm/gic_pl390.hh	/^    uint32_t itLines;$/;"	m	class:Pl390
itLinesLog2	./dev/arm/gic_pl390.hh	/^    uint32_t itLinesLog2;$/;"	m	class:Pl390
it_lines	./dev/arm/Gic.py	/^    it_lines = Param.UInt32(128, "Number of interrupt lines supported (max = 1020)")$/;"	v	class:Pl390
itb	./cpu/checker/cpu.hh	/^    TheISA::TLB *itb;$/;"	m	class:CheckerCPU
itb	./cpu/o3/cpu.hh	/^    TheISA::TLB * itb;$/;"	m	class:FullO3CPU
itb	./cpu/simple_thread.hh	/^    TheISA::TLB *itb;$/;"	m	class:SimpleThread
itd	./arch/arm/miscregs.hh	/^        Bitfield<7>    itd;     \/\/ IT disable$/;"	m	namespace:ArmISA
item	./doxygen/stl.hh	/^    T item;$/;"	m	class:std::deque
item	./doxygen/stl.hh	/^    T item;$/;"	m	class:std::list
item	./doxygen/stl.hh	/^    T item;$/;"	m	class:std::vector
item1	./doxygen/stl.hh	/^    X item1;$/;"	m	class:std::pair
item2	./doxygen/stl.hh	/^    Y item2;$/;"	m	class:std::pair
itemrange	./python/m5/util/sorteddict.py	/^    def itemrange(self, *args, **kwargs):$/;"	m	class:SortedDict
items	./cpu/decode_cache.hh	/^        Value items[TheISA::PageBytes];$/;"	m	struct:DecodeCache::AddrMap::CachePage
items	./python/m5/debug.py	/^    def items(self):$/;"	m	class:AllFlags
items	./python/m5/util/multidict.py	/^    def items(self):$/;"	m	class:multidict
items	./python/m5/util/orderdict.py	/^    def items(self):$/;"	m	class:orderdict
items	./python/m5/util/smartdict.py	/^    def items(self):$/;"	m	class:SmartDict
items	./python/m5/util/sorteddict.py	/^    def items(self):$/;"	m	class:SortedDict
iterator	./arch/sparc/tlb_map.hh	/^    typedef RangeMap::iterator iterator;$/;"	t	class:SparcISA::TlbMap
iterator	./base/addr_range_map.hh	/^    typedef typename RangeMap::iterator iterator;$/;"	t	class:AddrRangeMap
iterator	./cpu/pc_event.hh	/^    typedef map_t::iterator iterator;$/;"	t	class:PCEventQueue
iterator	./dev/net/pktfifo.hh	/^    typedef fifo_list::iterator iterator;$/;"	t	class:PacketFifo
iteritems	./python/m5/debug.py	/^    def iteritems(self):$/;"	m	class:AllFlags
iteritems	./python/m5/util/multidict.py	/^    def iteritems(self):$/;"	m	class:multidict
iteritems	./python/m5/util/orderdict.py	/^    def iteritems(self):$/;"	m	class:orderdict
iteritems	./python/m5/util/smartdict.py	/^    def iteritems(self):$/;"	m	class:SmartDict
iteritems	./python/m5/util/sorteddict.py	/^    def iteritems(self):$/;"	m	class:SortedDict
iterkeys	./python/m5/debug.py	/^    def iterkeys(self):$/;"	m	class:AllFlags
iterkeys	./python/m5/util/multidict.py	/^    def iterkeys(self):$/;"	m	class:multidict
iterkeys	./python/m5/util/orderdict.py	/^    def iterkeys(self):$/;"	m	class:orderdict
iterkeys	./python/m5/util/sorteddict.py	/^    def iterkeys(self):$/;"	m	class:SortedDict
itervalues	./python/m5/debug.py	/^    def itervalues(self):$/;"	m	class:AllFlags
itervalues	./python/m5/util/multidict.py	/^    def itervalues(self):$/;"	m	class:multidict
itervalues	./python/m5/util/orderdict.py	/^    def itervalues(self):$/;"	m	class:orderdict
itervalues	./python/m5/util/smartdict.py	/^    def itervalues(self):$/;"	m	class:SmartDict
itervalues	./python/m5/util/sorteddict.py	/^    def itervalues(self):$/;"	m	class:SortedDict
itint	./dev/alpha/tsunami_cchip.hh	/^    uint64_t itint;$/;"	m	class:TsunamiCChip
itqMax	./base/loader/coff_sym.h	324;"	d
itqMax	./base/loader/coff_sym.h	446;"	d
itr	./dev/net/i8254xGBe_defs.hh	/^    ITR itr;$/;"	m	struct:iGbReg::Regs
itstate	./arch/arm/types.hh	/^        Bitfield<55, 48> itstate;$/;"	m	namespace:ArmISA
itstate	./arch/arm/types.hh	/^        itstate() const$/;"	f	class:ArmISA::PCState
itstate	./arch/arm/types.hh	/^        itstate(uint8_t value)$/;"	f	class:ArmISA::PCState
itstateCond	./arch/arm/types.hh	/^        Bitfield<55, 52> itstateCond;$/;"	m	namespace:ArmISA
itstateMask	./arch/arm/types.hh	/^        Bitfield<51, 48> itstateMask;$/;"	m	namespace:ArmISA
ittReadRead	./mem/comm_monitor.hh	/^        Stats::Distribution ittReadRead;$/;"	m	struct:CommMonitor::MonitorStats
ittReqReq	./mem/comm_monitor.hh	/^        Stats::Distribution ittReqReq;$/;"	m	struct:CommMonitor::MonitorStats
ittWriteWrite	./mem/comm_monitor.hh	/^        Stats::Distribution ittWriteWrite;$/;"	m	struct:CommMonitor::MonitorStats
itt_bins	./mem/CommMonitor.py	/^    itt_bins = Param.Unsigned('20', "# bins in ITT distributions")$/;"	v	class:CommMonitor
itt_max_bin	./mem/CommMonitor.py	/^    itt_max_bin = Param.Latency('100ns', "Max bin of ITT distributions")$/;"	v	class:CommMonitor
iv	./arch/mips/pra_constants.hh	/^    Bitfield<23>     iv;$/;"	m	namespace:MipsISA
ixc	./arch/arm/miscregs.hh	/^        Bitfield<4> ixc;$/;"	m	namespace:ArmISA
ixe	./arch/arm/miscregs.hh	/^        Bitfield<12> ixe;$/;"	m	namespace:ArmISA
ixmt	./arch/mips/mt_constants.hh	/^    Bitfield<10>     ixmt;$/;"	m	namespace:MipsISA
ixsm	./dev/net/i8254xGBe_defs.hh	/^inline bool ixsm(TxDesc *d)  { return isData(d) && bits(d->d2, 40,40); }$/;"	f	namespace:iGbReg::TxdOp
j	./arch/arm/miscregs.hh	/^        Bitfield<24> j;$/;"	m	namespace:ArmISA
jBusData0	./dev/sparc/iob.hh	/^    uint64_t jBusData0[MaxNiagaraProcs];$/;"	m	class:Iob
jBusData1	./dev/sparc/iob.hh	/^    uint64_t jBusData1[MaxNiagaraProcs];$/;"	m	class:Iob
jIntBusy	./dev/sparc/iob.hh	/^    IntBusy jIntBusy[MaxNiagaraProcs];$/;"	m	class:Iob
jIntVec	./dev/sparc/iob.hh	/^    uint64_t jIntVec;$/;"	m	class:Iob
jazelle	./arch/arm/types.hh	/^        jazelle() const$/;"	f	class:ArmISA::PCState
jazelle	./arch/arm/types.hh	/^        jazelle(bool val)$/;"	f	class:ArmISA::PCState
jmptbl	./base/loader/coff_sym.h	/^    unsigned jmptbl:1;  \/* symbol is a jump table entry for shlibs *\/$/;"	m	struct:ecoff_extsym
job	./python/m5/util/jobfile.py	/^    def job(self, options):$/;"	m	class:Configuration
jobfilter	./python/m5/util/jobfile.py	/^    def jobfilter(self, job):$/;"	m	class:Configuration
jobs	./python/m5/util/jobfile.py	/^    def jobs(self, groups=None):$/;"	m	class:Configuration
k	./arch/mips/dt_constants.hh	/^    Bitfield<23>     k;$/;"	m	namespace:MipsISA
k	./arch/mips/pra_constants.hh	/^    Bitfield<1>     k;$/;"	m	namespace:MipsISA
k0	./arch/mips/pra_constants.hh	/^    Bitfield<2,  0>  k0;$/;"	m	namespace:MipsISA
k23	./arch/mips/pra_constants.hh	/^    Bitfield<30, 28> k23;$/;"	m	namespace:MipsISA
kHz	./sim/core.cc	/^double kHz;$/;"	m	namespace:SimClock::Float	file:
kdev	./arch/arm/kvm/gic.hh	/^    KvmDevice kdev;$/;"	m	class:KvmGic
kernEnd	./dev/alpha/access.h	/^    uint64_t    kernEnd;                \/\/ 28:$/;"	m	struct:AlphaAccess
kernEnd	./dev/mips/access.h	/^    uint32_t    kernEnd;                \/\/ 18:$/;"	m	struct:MipsAccess
kernStart	./dev/alpha/access.h	/^    uint64_t    kernStart;              \/\/ 20:$/;"	m	struct:AlphaAccess
kernStart	./dev/mips/access.h	/^    uint32_t    kernStart;              \/\/ 14:$/;"	m	struct:MipsAccess
kernel	./arch/alpha/kernel_stats.hh	/^enum cpu_mode { kernel, user, idle, cpu_mode_num };$/;"	e	enum:AlphaISA::Kernel::cpu_mode
kernel	./arch/arm/kernel_stats.hh	/^enum cpu_mode { hypervisor, kernel, user, idle, cpu_mode_num };$/;"	e	enum:ArmISA::Kernel::cpu_mode
kernel	./arch/mips/kernel_stats.hh	/^enum cpu_mode { kernel, user, idle, cpu_mode_num };$/;"	e	enum:MipsISA::Kernel::cpu_mode
kernel	./arch/power/kernel_stats.hh	/^enum cpu_mode { hypervisor, kernel, user, idle, cpu_mode_num };$/;"	e	enum:PowerISA::Kernel::cpu_mode
kernel	./arch/sparc/kernel_stats.hh	/^enum cpu_mode { hypervisor, kernel, user, idle, cpu_mode_num };$/;"	e	enum:SparcISA::Kernel::cpu_mode
kernel	./arch/x86/kernel_stats.hh	/^    kernel = ring0,$/;"	e	enum:X86ISA::Kernel::cpu_mode
kernel	./sim/System.py	/^    kernel = Param.String("", "file that contains the kernel code")$/;"	v
kernel	./sim/system.hh	/^    ObjectFile *kernel;$/;"	m	class:System
kernelEnd	./sim/system.hh	/^    Addr kernelEnd;$/;"	m	class:System
kernelEntry	./sim/system.hh	/^    Addr kernelEntry;$/;"	m	class:System
kernelOopsEvent	./arch/arm/freebsd/system.hh	/^    PCEvent *kernelOopsEvent;$/;"	m	class:FreebsdArmSystem
kernelOopsEvent	./arch/arm/linux/system.hh	/^    PCEvent *kernelOopsEvent;$/;"	m	class:LinuxArmSystem
kernelPanicEvent	./arch/alpha/linux/system.hh	/^    BreakPCEvent *kernelPanicEvent;$/;"	m	class:LinuxAlphaSystem
kernelPanicEvent	./arch/alpha/tru64/system.hh	/^    BreakPCEvent *kernelPanicEvent;$/;"	m	class:Tru64AlphaSystem
kernelPanicEvent	./arch/arm/freebsd/system.hh	/^    PCEvent *kernelPanicEvent;$/;"	m	class:FreebsdArmSystem
kernelPanicEvent	./arch/arm/linux/system.hh	/^    PCEvent *kernelPanicEvent;$/;"	m	class:LinuxArmSystem
kernelStart	./sim/system.hh	/^    Addr kernelStart;$/;"	m	class:System
kernelStats	./cpu/thread_state.hh	/^    TheISA::Kernel::Statistics *kernelStats;$/;"	m	struct:ThreadState
kernelSymtab	./sim/system.hh	/^    SymbolTable *kernelSymtab;$/;"	m	class:System
kernel_addr_check	./sim/System.py	/^    kernel_addr_check = Param.Bool(True,$/;"	v
kernel_pte_lookup	./arch/alpha/vtophys.cc	/^kernel_pte_lookup(PortProxy &mem, Addr ptbr, VAddr vaddr)$/;"	f	namespace:AlphaISA
key	./base/trie.hh	/^        Key key;$/;"	m	struct:Trie::Node
key	./base/vnc/vncinput.hh	/^        uint32_t key;$/;"	m	struct:VncInput::KeyEventMessage
keyPress	./dev/arm/kmi.cc	/^Pl050::keyPress(uint32_t key, bool down)$/;"	f	class:Pl050
keySymToPs2	./dev/ps2.cc	/^keySymToPs2(uint32_t key, bool down, bool &cur_shift,$/;"	f	namespace:Ps2
keySymToPs2Byte	./dev/ps2.cc	/^static const uint16_t keySymToPs2Byte[128] = {$/;"	m	namespace:Ps2	file:
key_len	./base/cp_annotate.hh	/^        uint32_t key_len;$/;"	m	struct:CPA::AnnotateHeader
key_off	./base/cp_annotate.hh	/^        uint64_t key_off;$/;"	m	struct:CPA::AnnotateHeader
keyboard	./base/vnc/vncinput.hh	/^    VncKeyboard *keyboard;$/;"	m	class:VncInput
keyboard	./dev/x86/SouthBridge.py	/^    keyboard = Param.I8042(_keyboard, "The keyboard controller")$/;"	v	class:SouthBridge
keyboard	./dev/x86/i8042.hh	/^    PS2Keyboard keyboard;$/;"	m	class:X86ISA::I8042
keyboardFullInt	./dev/x86/i8042.hh	/^        Bitfield<0> keyboardFullInt;$/;"	m	class:X86ISA::I8042
keyboardIntPin	./dev/x86/i8042.hh	/^    IntSourcePin *keyboardIntPin;$/;"	m	class:X86ISA::I8042
keyboardUnlocked	./dev/x86/i8042.hh	/^        Bitfield<4> keyboardUnlocked;$/;"	m	class:X86ISA::I8042
keyboard_int_pin	./dev/x86/I8042.py	/^    keyboard_int_pin = Param.X86IntSourcePin(X86IntSourcePin(),$/;"	v	class:I8042
keyrange	./python/m5/util/sorteddict.py	/^    def keyrange(self, start=None, end=None, inclusive=False):$/;"	m	class:SortedDict
keys	./python/m5/debug.py	/^    def keys(self):$/;"	m	class:AllFlags
keys	./python/m5/util/multidict.py	/^    def keys(self):$/;"	m	class:multidict
keys	./python/m5/util/orderdict.py	/^    def keys(self):$/;"	m	class:orderdict
keys	./python/m5/util/sorteddict.py	/^    def keys(self):$/;"	m	class:SortedDict
keywords	./python/m5/SimObject.py	/^    keywords = { 'check' : FunctionType }$/;"	v	class:MetaSimObject
kibi	./python/m5/util/convert.py	/^kibi = 1024$/;"	v
kick	./cpu/kvm/base.hh	/^    void kick() const { pthread_kill(vcpuThread, KVM_KICK_SIGNAL); }$/;"	f	class:BaseKvmCPU
kick	./dev/virtio/base.hh	/^    void kick() {$/;"	f	class:VirtIODeviceBase
kick	./dev/virtio/pci.cc	/^PciVirtIO::kick()$/;"	f	class:PciVirtIO
kids	./base/debug.hh	/^    std::vector<Flag *> kids() { return _kids; }$/;"	f	class:Debug::CompoundFlag
kids	./base/debug.hh	/^    virtual std::vector<Flag *> kids() { return std::vector<Flag*>(); }$/;"	f	class:Debug::Flag
kids	./base/trie.hh	/^        Node *kids[2];$/;"	m	struct:Trie::Node
kill	./dev/dma_device.cc	/^DmaReadFifo::DmaDoneEvent::kill()$/;"	f	class:DmaReadFifo::DmaDoneEvent
kill	./kern/tru64/tru64_syscalls.hh	/^        kill = 37,$/;"	e	enum:SystemCalls::__anon102
kilo	./python/m5/util/convert.py	/^kilo = 1.0e3$/;"	v
kloadcall	./kern/tru64/tru64_syscalls.hh	/^        kloadcall = 223,$/;"	e	enum:SystemCalls::__anon102
kmi0	./dev/arm/RealView.py	/^    kmi0   = Pl050(pio_addr=0x10006000, int_num=20)$/;"	v	class:RealViewEB
kmi0	./dev/arm/RealView.py	/^    kmi0   = Pl050(pio_addr=0x10006000, int_num=52)$/;"	v	class:RealViewPBX
kmi0	./dev/arm/RealView.py	/^    kmi0   = Pl050(pio_addr=0x1c060000, int_num=44)$/;"	v	class:VExpress_EMM
kmi1	./dev/arm/RealView.py	/^    kmi1   = Pl050(pio_addr=0x10007000, int_num=21, is_mouse=True)$/;"	v	class:RealViewEB
kmi1	./dev/arm/RealView.py	/^    kmi1   = Pl050(pio_addr=0x10007000, int_num=53, is_mouse=True)$/;"	v	class:RealViewPBX
kmi1	./dev/arm/RealView.py	/^    kmi1   = Pl050(pio_addr=0x1c070000, int_num=45, is_mouse=True)$/;"	v	class:VExpress_EMM
kmiClkDiv	./dev/arm/kmi.hh	/^    static const int kmiClkDiv   = 0x00C;$/;"	m	class:Pl050
kmiCr	./dev/arm/kmi.hh	/^    static const int kmiCr       = 0x000;$/;"	m	class:Pl050
kmiData	./dev/arm/kmi.hh	/^    static const int kmiData     = 0x008;$/;"	m	class:Pl050
kmiISR	./dev/arm/kmi.hh	/^    static const int kmiISR      = 0x010;$/;"	m	class:Pl050
kmiStat	./dev/arm/kmi.hh	/^    static const int kmiStat     = 0x004;$/;"	m	class:Pl050
kmodcall	./kern/tru64/tru64_syscalls.hh	/^        kmodcall = 77,$/;"	e	enum:SystemCalls::__anon102
ksu	./arch/mips/pra_constants.hh	/^    Bitfield<4,  3>  ksu;$/;"	m	namespace:MipsISA
ku	./arch/mips/pra_constants.hh	/^    Bitfield<27, 25> ku;$/;"	m	namespace:MipsISA
kvm	./arch/arm/kvm/armv8_cpu.hh	/^        uint64_t kvm;$/;"	m	struct:ArmV8KvmCPU::IntRegInfo
kvm	./arch/arm/kvm/armv8_cpu.hh	/^        uint64_t kvm;$/;"	m	struct:ArmV8KvmCPU::MiscRegInfo
kvm	./cpu/kvm/vm.hh	/^    Kvm kvm;$/;"	m	class:KvmVM
kvmArmPreferredTarget	./cpu/kvm/vm.cc	/^KvmVM::kvmArmPreferredTarget(struct kvm_vcpu_init &target) const$/;"	f	class:KvmVM
kvmArmVCpuInit	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::kvmArmVCpuInit(const struct kvm_vcpu_init &init)$/;"	f	class:ArmKvmCPU
kvmArmVCpuInit	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::kvmArmVCpuInit(uint32_t target)$/;"	f	class:ArmKvmCPU
kvmArmVCpuInit	./arch/arm/kvm/base_cpu.cc	/^BaseArmKvmCPU::kvmArmVCpuInit(const struct kvm_vcpu_init &init)$/;"	f	class:BaseArmKvmCPU
kvmCoreMiscRegs	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::KvmCoreMiscRegInfo ArmKvmCPU::kvmCoreMiscRegs[] = {$/;"	m	class:ArmKvmCPU	file:
kvmCoreMiscRegs	./arch/arm/kvm/arm_cpu.hh	/^    static KvmCoreMiscRegInfo kvmCoreMiscRegs[];$/;"	m	class:ArmKvmCPU
kvmFD	./cpu/kvm/vm.hh	/^    int kvmFD;$/;"	m	class:Kvm
kvmFPReg	./arch/arm/kvm/armv8_cpu.cc	/^kvmFPReg(const int num)$/;"	f
kvmInSE	./sim/Process.py	/^    kvmInSE = Param.Bool('false', 'initialize the process for KvmCPU in SE')$/;"	v	class:Process
kvmInSE	./sim/process.hh	/^    bool kvmInSE;$/;"	m	class:Process
kvmIntRegs	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::KvmIntRegInfo ArmKvmCPU::kvmIntRegs[] = {$/;"	m	class:ArmKvmCPU	file:
kvmIntRegs	./arch/arm/kvm/arm_cpu.hh	/^    static KvmIntRegInfo kvmIntRegs[];$/;"	m	class:ArmKvmCPU
kvmInterrupt	./cpu/kvm/base.cc	/^BaseKvmCPU::kvmInterrupt(const struct kvm_interrupt &interrupt)$/;"	f	class:BaseKvmCPU
kvmNonMaskableInterrupt	./cpu/kvm/base.cc	/^BaseKvmCPU::kvmNonMaskableInterrupt()$/;"	f	class:BaseKvmCPU
kvmRun	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::kvmRun(Tick ticks)$/;"	f	class:ArmKvmCPU
kvmRun	./arch/arm/kvm/base_cpu.cc	/^BaseArmKvmCPU::kvmRun(Tick ticks)$/;"	f	class:BaseArmKvmCPU
kvmRun	./cpu/kvm/base.cc	/^BaseKvmCPU::kvmRun(Tick ticks)$/;"	f	class:BaseKvmCPU
kvmRun	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::kvmRun(Tick ticks)$/;"	f	class:X86KvmCPU
kvmRunDrain	./cpu/kvm/base.cc	/^BaseKvmCPU::kvmRunDrain()$/;"	f	class:BaseKvmCPU
kvmRunDrain	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::kvmRunDrain()$/;"	f	class:X86KvmCPU
kvmRunWrapper	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::kvmRunWrapper(Tick ticks)$/;"	f	class:X86KvmCPU
kvmStateDirty	./cpu/kvm/base.hh	/^    bool kvmStateDirty;$/;"	m	class:BaseKvmCPU
kvmVM	./arch/arm/kvm/KvmGic.py	/^    kvmVM = Param.KvmVM(Parent.any, 'KVM VM (i.e., shared memory domain)')$/;"	v	class:KvmGic
kvmVM	./cpu/kvm/BaseKvmCPU.py	/^    kvmVM = Param.KvmVM(Parent.any, 'KVM VM (i.e., shared memory domain)')$/;"	v
kvmXReg	./arch/arm/kvm/armv8_cpu.cc	/^kvmXReg(const int num)$/;"	f
kx	./arch/mips/pra_constants.hh	/^    Bitfield<7>      kx;$/;"	m	namespace:MipsISA
l	./arch/mips/pra_constants.hh	/^    Bitfield<5>     l;$/;"	m	namespace:MipsISA
l	./arch/x86/regs/misc.hh	/^        Bitfield<53> l; \/\/ Long Attribute Bit$/;"	m	namespace:X86ISA
l	./arch/x86/types.hh	/^            Bitfield<10> l;$/;"	m	namespace:X86ISA
l	./arch/x86/types.hh	/^            Bitfield<18> l;$/;"	m	namespace:X86ISA
l	./base/statistics.hh	/^    NodePtr l;$/;"	m	class:Stats::BinaryNode
l	./base/statistics.hh	/^    NodePtr l;$/;"	m	class:Stats::SumNode
l	./base/statistics.hh	/^    NodePtr l;$/;"	m	class:Stats::UnaryNode
l	./python/m5/util/code_formatter.py	/^    l = [ [Foo(x=[Foo(y=9)])] ]$/;"	v	class:code_formatter
l0	./arch/x86/regs/misc.hh	/^        Bitfield<0> l0;$/;"	m	namespace:X86ISA
l1	./arch/x86/regs/misc.hh	/^        Bitfield<2> l1;$/;"	m	namespace:X86ISA
l1Desc	./arch/arm/table_walker.hh	/^        L1Descriptor l1Desc;$/;"	m	class:ArmISA::TableWalker::WalkerState
l1IndexPolicy	./arch/arm/miscregs.hh	/^      Bitfield<15,14> l1IndexPolicy;$/;"	m	namespace:ArmISA
l1Parent	./arch/arm/table_walker.hh	/^        L1Descriptor *l1Parent;$/;"	m	class:ArmISA::TableWalker::L2Descriptor
l2	./arch/x86/regs/misc.hh	/^        Bitfield<4> l2;$/;"	m	namespace:X86ISA
l2Addr	./arch/arm/table_walker.hh	/^        Addr l2Addr() const$/;"	f	class:ArmISA::TableWalker::L1Descriptor
l2Desc	./arch/arm/table_walker.hh	/^        L2Descriptor l2Desc;$/;"	m	class:ArmISA::TableWalker::WalkerState
l2rstDISABLE_monitor	./arch/arm/miscregs.hh	/^      Bitfield<31>    l2rstDISABLE_monitor;$/;"	m	namespace:ArmISA
l2x0_fake	./dev/arm/RealView.py	/^    l2x0_fake      = IsaFake(pio_addr=0x2C100000, pio_size=0xfff)$/;"	v	class:VExpress_EMM
l2x0_fake	./dev/arm/RealView.py	/^    l2x0_fake     = IsaFake(pio_addr=0x1f002000, pio_size=0xfff)$/;"	v	class:RealViewPBX
l2x0_fake	./dev/arm/RealView.py	/^    l2x0_fake     = IsaFake(pio_addr=0x1f002000, pio_size=0xfff, warn_access="1")$/;"	v	class:RealViewEB
l3	./arch/x86/regs/misc.hh	/^        Bitfield<6> l3;$/;"	m	namespace:X86ISA
label	./mem/cache/mshr_queue.hh	/^    const std::string label;$/;"	m	class:MSHRQueue
label	./mem/packet.hh	/^            const std::string label;$/;"	m	struct:Packet::PrintReqState::LabelStackEntry
label	./mem/packet_queue.hh	/^    const std::string label;$/;"	m	class:PacketQueue
labelPrinted	./mem/packet.hh	/^            bool labelPrinted;$/;"	m	struct:Packet::PrintReqState::LabelStackEntry
labelRE	./arch/isa_parser.py	/^labelRE = re.compile(r'(?<!%)%\\(([^\\)]+)\\)[sd]')$/;"	v
labelStack	./mem/packet.hh	/^        LabelStack labelStack;$/;"	m	class:Packet::PrintReqState
lan_fake	./dev/arm/RealView.py	/^    lan_fake       = IsaFake(pio_addr=0x1A000000, pio_size=0xffff)$/;"	v	class:VExpress_EMM
lane	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, lane, step;$/;"	m	class:ArmISA::MicroNeonMixLaneOp64
lane	./arch/arm/insts/macromem.hh	/^    unsigned lane;$/;"	m	class:ArmISA::MicroNeonMixLaneOp
lang	./base/loader/coff_sym.h	/^    unsigned lang: 5;   \/* language for this file *\/$/;"	m	struct:ecoff_fdr
langAda	./base/loader/coff_symconst.h	79;"	d
langAssembler	./base/loader/coff_symconst.h	76;"	d
langC	./base/loader/coff_symconst.h	73;"	d
langCobol	./base/loader/coff_symconst.h	81;"	d
langCplusplus	./base/loader/coff_symconst.h	83;"	d
langCplusplusV2	./base/loader/coff_symconst.h	84;"	d
langFortran	./base/loader/coff_symconst.h	75;"	d
langMachine	./base/loader/coff_symconst.h	77;"	d
langMax	./base/loader/coff_symconst.h	85;"	d
langNil	./base/loader/coff_symconst.h	78;"	d
langPascal	./base/loader/coff_symconst.h	74;"	d
langPl1	./base/loader/coff_symconst.h	80;"	d
langStdc	./base/loader/coff_symconst.h	82;"	d
large	./arch/arm/table_walker.hh	/^        bool large() const$/;"	f	class:ArmISA::TableWalker::L2Descriptor
last	./base/chunk_generator.hh	/^    bool last() const { return (sizeLeft == 0); }$/;"	f	class:ChunkGenerator
last	./base/statistics.hh	/^    mutable Tick last;$/;"	m	class:Stats::AvgStor
lastActivate	./cpu/thread_state.hh	/^    Tick lastActivate;$/;"	m	struct:ThreadState
lastActivatedCycle	./cpu/o3/cpu.hh	/^    Tick lastActivatedCycle;$/;"	m	class:FullO3CPU
lastAddr	./mem/cache/prefetch/stride.hh	/^        Addr lastAddr;$/;"	m	struct:StridePrefetcher::StrideEntry
lastClearedSeqNum	./cpu/o3/probe/elastic_trace.hh	/^    InstSeqNum lastClearedSeqNum;$/;"	m	class:ElasticTrace
lastCommand	./dev/x86/i8042.hh	/^    uint16_t lastCommand;$/;"	m	class:X86ISA::I8042
lastCommand	./dev/x86/i8042.hh	/^    uint16_t lastCommand;$/;"	m	class:X86ISA::PS2Device
lastCommitWasEndOfMacroop	./cpu/minor/execute.hh	/^    bool lastCommitWasEndOfMacroop;$/;"	m	class:Minor::Execute
lastCommitedSeqNum	./cpu/o3/commit.hh	/^    InstSeqNum lastCommitedSeqNum[Impl::MaxThreads];$/;"	m	class:DefaultCommit
lastCompletedTransaction	./mem/mem_checker.hh	/^        typename TList::iterator lastCompletedTransaction(TList *l, Tick before)$/;"	f	class:MemChecker::ByteTracker
lastDcacheStall	./cpu/simple/exec_context.hh	/^    Counter lastDcacheStall;$/;"	m	class:SimpleExecContext
lastDescriptorAddr	./dev/pci/copy_engine.hh	/^        Addr lastDescriptorAddr;$/;"	m	class:CopyEngine::CopyEngineChannel
lastDump	./python/m5/stats/__init__.py	/^lastDump = 0$/;"	v
lastExpectedData	./mem/mem_checker.hh	/^        const std::vector<uint8_t>& lastExpectedData() const$/;"	f	class:MemChecker::ByteTracker
lastIcacheStall	./cpu/o3/fetch.hh	/^    Counter lastIcacheStall[Impl::MaxThreads];$/;"	m	class:DefaultFetch
lastIcacheStall	./cpu/simple/exec_context.hh	/^    Counter lastIcacheStall;$/;"	m	class:SimpleExecContext
lastInterrupt	./dev/net/i8254xGBe.hh	/^    Tick lastInterrupt;$/;"	m	class:IGbE
lastMemBarrier	./cpu/minor/lsq.hh	/^    InstSeqNum lastMemBarrier;$/;"	m	class:Minor::LSQ
lastModeTick	./arch/alpha/kernel_stats.hh	/^    Tick lastModeTick;$/;"	m	class:AlphaISA::Kernel::Statistics
lastNumInst	./cpu/base.hh	/^    Counter lastNumInst;$/;"	m	class:CPUProgressEvent
lastOffset	./arch/x86/decoder.hh	/^        int lastOffset;$/;"	m	struct:X86ISA::Decoder::InstBytes
lastPredictionSeqNum	./cpu/minor/execute.hh	/^    InstSeqNum lastPredictionSeqNum;$/;"	m	class:Minor::Execute
lastReplaced	./arch/sparc/tlb.hh	/^    int lastReplaced;$/;"	m	class:SparcISA::TLB
lastReset	./base/statistics.hh	/^    Tick lastReset;$/;"	m	class:Stats::AvgStor
lastRunningCycle	./cpu/o3/cpu.hh	/^    Cycles lastRunningCycle;$/;"	m	class:FullO3CPU
lastState	./base/cp_annotate.hh	/^    IMap lastState;$/;"	m	class:CPA
lastStopped	./sim/ticked_object.hh	/^    Cycles lastStopped;$/;"	m	class:Ticked
lastStreamSeqNum	./cpu/minor/fetch2.hh	/^    InstSeqNum lastStreamSeqNum;$/;"	m	class:Minor::Fetch2
lastSuspend	./cpu/thread_state.hh	/^    Tick lastSuspend;$/;"	m	struct:ThreadState
lastTime	./sim/root.hh	/^    Time lastTime;$/;"	m	class:Root
lastTxInt	./dev/uart8250.hh	/^    Tick lastTxInt;$/;"	m	class:Uart8250
lastWorkItemStarted	./sim/system.hh	/^    std::map<std::pair<uint32_t,uint32_t>, Tick>  lastWorkItemStarted;$/;"	m	class:System
lastWrittenTick	./dev/arm/rtc_pl031.hh	/^    Tick lastWrittenTick;$/;"	m	class:PL031
last_offset	./dev/alpha/access.h	/^    uint32_t    last_offset;            \/\/ 00: must be first field$/;"	m	struct:AlphaAccess
last_offset	./dev/mips/access.h	/^    uint32_t    last_offset;            \/\/ 04: must be first field$/;"	m	struct:MipsAccess
last_opcode	./cpu/kvm/x86_cpu.cc	/^    uint16_t last_opcode;$/;"	m	struct:FXSave	file:
latAfterCompletion	./dev/pci/CopyEngine.py	/^    latAfterCompletion = Param.Latency('20ns', "Latency after a DMA command is complete before it's reported as such")$/;"	v	class:CopyEngine
latAfterCompletion	./dev/pci/copy_engine.hh	/^        Tick latAfterCompletion;$/;"	m	class:CopyEngine::CopyEngineChannel
latBeforeBegin	./dev/pci/CopyEngine.py	/^    latBeforeBegin = Param.Latency('20ns', "Latency after a DMA command is seen before it's proccessed")$/;"	v	class:CopyEngine
latBeforeBegin	./dev/pci/copy_engine.hh	/^        Tick latBeforeBegin;$/;"	m	class:CopyEngine::CopyEngineChannel
latchCount	./dev/intel_8254_timer.cc	/^Intel8254Timer::Counter::latchCount()$/;"	f	class:Intel8254Timer::Counter
latch_on	./dev/intel_8254_timer.hh	/^        bool latch_on;$/;"	m	class:Intel8254Timer::Counter
latched_count	./dev/intel_8254_timer.hh	/^        uint16_t latched_count;$/;"	m	class:Intel8254Timer::Counter
latency	./dev/x86/cmos.hh	/^    Tick latency;$/;"	m	class:X86ISA::Cmos
latency	./dev/x86/i8042.hh	/^    Tick latency;$/;"	m	class:X86ISA::I8042
latency	./dev/x86/i8237.hh	/^    Tick latency;$/;"	m	class:X86ISA::I8237
latency	./dev/x86/i8254.hh	/^    Tick latency;$/;"	m	class:X86ISA::I8254
latency	./dev/x86/i8259.hh	/^    Tick latency;$/;"	m	class:X86ISA::I8259
latency	./dev/x86/intdev.hh	/^        Tick latency;$/;"	m	class:X86ISA::IntDevice::IntMasterPort
latency	./dev/x86/speaker.hh	/^    Tick latency;$/;"	m	class:X86ISA::Speaker
latency	./mem/SimpleMemory.py	/^    latency = Param.Latency('30ns', "Request to response latency")$/;"	v	class:SimpleMemory
latency	./mem/cache/prefetch/Prefetcher.py	/^    latency = Param.Int(1, "Latency for generated prefetches")$/;"	v	class:QueuedPrefetcher
latency	./mem/cache/prefetch/queued.hh	/^    const Cycles latency;$/;"	m	class:QueuedPrefetcher
latency	./mem/ruby/network/BasicLink.py	/^    latency = Param.Cycles(1, "latency")$/;"	v	class:BasicLink
latency	./mem/simple_mem.hh	/^    const Tick latency;$/;"	m	class:SimpleMemory
latencyTimer	./dev/pci/pcireg.h	/^        uint8_t latencyTimer;$/;"	m	struct:PCIConfig::__anon26
latency_bins	./mem/CommMonitor.py	/^    latency_bins = Param.Unsigned('20', "# bins in latency histograms")$/;"	v	class:CommMonitor
latency_var	./mem/SimpleMemory.py	/^    latency_var = Param.Latency('0ns', "Request to response latency variance")$/;"	v	class:SimpleMemory
latency_var	./mem/simple_mem.hh	/^    const Tick latency_var;$/;"	m	class:SimpleMemory
lbr	./arch/x86/regs/misc.hh	/^        Bitfield<0> lbr; \/\/ Last-branch record$/;"	m	namespace:X86ISA
lc	./arch/arm/pmu.hh	/^        Bitfield<6> lc;$/;"	m	class:ArmISA::PMU
lcdControl	./dev/arm/pl111.hh	/^    ControlReg lcdControl;$/;"	m	class:Pl111
lcdImsc	./dev/arm/pl111.hh	/^    InterruptReg lcdImsc;$/;"	m	class:Pl111
lcdLpbase	./dev/arm/pl111.hh	/^    uint32_t lcdLpbase;$/;"	m	class:Pl111
lcdMis	./dev/arm/pl111.hh	/^    InterruptReg lcdMis;$/;"	m	class:Pl111
lcdPalette	./dev/arm/pl111.hh	/^    uint32_t lcdPalette[LcdPaletteSize];$/;"	m	class:Pl111
lcdRis	./dev/arm/pl111.hh	/^    InterruptReg lcdRis;$/;"	m	class:Pl111
lcdTiming0	./dev/arm/pl111.hh	/^    TimingReg0 lcdTiming0;$/;"	m	class:Pl111
lcdTiming1	./dev/arm/pl111.hh	/^    TimingReg1 lcdTiming1;$/;"	m	class:Pl111
lcdTiming2	./dev/arm/pl111.hh	/^    TimingReg2 lcdTiming2;$/;"	m	class:Pl111
lcdTiming3	./dev/arm/pl111.hh	/^    TimingReg3 lcdTiming3;$/;"	m	class:Pl111
lcdUpbase	./dev/arm/pl111.hh	/^    uint32_t lcdUpbase;$/;"	m	class:Pl111
lcdbpp	./dev/arm/pl111.hh	/^        Bitfield<3,1> lcdbpp;$/;"	m	class:Pl111
lcdbw	./dev/arm/pl111.hh	/^        Bitfield<4> lcdbw;$/;"	m	class:Pl111
lcddual	./dev/arm/pl111.hh	/^        Bitfield<7> lcddual;$/;"	m	class:Pl111
lcden	./dev/arm/pl111.hh	/^        Bitfield<0> lcden;$/;"	m	class:Pl111
lcdmono8	./dev/arm/pl111.hh	/^        Bitfield<6> lcdmono8;$/;"	m	class:Pl111
lcdpwr	./dev/arm/pl111.hh	/^        Bitfield<11> lcdpwr;$/;"	m	class:Pl111
lcdtft	./dev/arm/pl111.hh	/^        Bitfield<5> lcdtft;$/;"	m	class:Pl111
lcdvcomp	./dev/arm/pl111.hh	/^        Bitfield<13,12> lcdvcomp;$/;"	m	class:Pl111
lchown	./kern/tru64/tru64_syscalls.hh	/^        lchown = 208,$/;"	e	enum:SystemCalls::__anon102
lcrh	./dev/arm/pl011.hh	/^    uint16_t lcrh;$/;"	m	class:Pl011
ldstQueue	./cpu/o3/iew.hh	/^    LSQ ldstQueue;$/;"	m	class:DefaultIEW
ldstqCount	./cpu/o3/comm.hh	/^        unsigned ldstqCount;$/;"	m	struct:TimeBufStruct::iewComm
le	./arch/x86/regs/misc.hh	/^        Bitfield<8> le;$/;"	m	namespace:X86ISA
leastSigBit	./base/intmath.hh	/^leastSigBit(const T& n)$/;"	f
led	./dev/arm/pl111.hh	/^        Bitfield<6,0> led;$/;"	m	class:Pl111
lee	./dev/arm/pl111.hh	/^        Bitfield<16> lee;$/;"	m	class:Pl111
left	./cpu/TimingExpr.py	/^    left = Param.TimingExpr("LHS expression")$/;"	v	class:TimingExprBin
left	./cpu/timing_expr.hh	/^    TimingExpr *left;$/;"	m	class:TimingExprBin
leftButton	./dev/ps2.hh	/^    Bitfield<0> leftButton;$/;"	m	namespace:Ps2
leftButton	./dev/x86/i8042.hh	/^        Bitfield<2> leftButton;$/;"	m	class:X86ISA::PS2Mouse
legacy	./arch/x86/regs/misc.hh	/^        Bitfield<31, 0> legacy;$/;"	m	namespace:X86ISA
legacy	./arch/x86/types.hh	/^        LegacyPrefixVector legacy;$/;"	m	struct:X86ISA::ExtMachInst
legacy	./dev/net/i8254xGBe_defs.hh	/^        } legacy;$/;"	m	union:iGbReg::RxDesc::__anon5	typeref:struct:iGbReg::RxDesc::__anon5::__anon6
legacyIO	./dev/pci/device.hh	/^    bool legacyIO[6];$/;"	m	class:PciDevice
len	./arch/arm/miscregs.hh	/^        Bitfield<18, 16> len;$/;"	m	namespace:ArmISA
len	./base/cp_annotate.cc	/^    size_t len;$/;"	m	struct:CPAIgnoreSymbol	file:
len	./base/inet.hh	/^    uint16_t len() const { return ntohs(ip_len); }$/;"	f	struct:Net::IpHdr
len	./base/inet.hh	/^    uint16_t len() const { return ntohs(uh_ulen); }$/;"	f	struct:Net::UdpHdr
len	./base/inet.hh	/^    uint8_t len() const { return IP_OPT_TYPEONLY(type()) ? 1 : opt_len; }$/;"	f	struct:Net::IpOpt
len	./base/inet.hh	/^    uint8_t len() const { return TCP_OPT_TYPEONLY(type()) ? 1 : opt_len; }$/;"	f	struct:Net::TcpOpt
len	./base/inet.hh	/^    uint8_t len() const { return extlen() + 8; }$/;"	f	struct:Net::Ip6Opt
len	./base/inet.hh	/^    void len(uint16_t _len) { ip_len = htons(_len); }$/;"	f	struct:Net::IpHdr
len	./base/inet.hh	/^    void len(uint16_t _len) { uh_ulen = htons(_len); }$/;"	f	struct:Net::UdpHdr
len	./base/loader/object_file.hh	/^    size_t len;$/;"	m	class:ObjectFile
len	./base/statistics.hh	/^    size_type len;$/;"	m	class:Stats::VectorProxy
len	./dev/net/etherdump.cc	/^    uint32_t len;               \/\/ length this packet (off wire)$/;"	m	struct:pcap_pkthdr	file:
len	./dev/net/i8254xGBe_defs.hh	/^            uint16_t len;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon6
len	./dev/pci/copy_engine_defs.hh	/^    uint32_t len;$/;"	m	struct:CopyEngineReg::DmaDesc
len	./dev/virtio/fs9p.hh	/^        uint16_t len;$/;"	m	struct:VirtIO9PBase::Config
len	./dev/virtio/fs9p.hh	/^    uint32_t len;$/;"	m	struct:P9MsgHeader
len	./dev/virtio/virtio_ring.h	/^    uint32_t len;$/;"	m	struct:vring_desc
len	./dev/virtio/virtio_ring.h	/^    uint32_t len;$/;"	m	struct:vring_used_elem
len	./kern/tru64/mbuf.hh	/^    int32_t     len;$/;"	m	struct:tru64::pkthdr
len	./mem/ruby/system/DMASequencer.hh	/^    int len;$/;"	m	struct:DMARequest
len	./sim/init.hh	/^    int len;$/;"	m	struct:EmbeddedPython
len0	./arch/x86/regs/misc.hh	/^        Bitfield<19, 18> len0;$/;"	m	namespace:X86ISA
len1	./arch/x86/regs/misc.hh	/^        Bitfield<23, 22> len1;$/;"	m	namespace:X86ISA
len2	./arch/x86/regs/misc.hh	/^        Bitfield<27, 26> len2;$/;"	m	namespace:X86ISA
len3	./arch/x86/regs/misc.hh	/^        Bitfield<31, 30> len3;$/;"	m	namespace:X86ISA
length	./arch/x86/bios/IntelMP.py	/^    length = Param.UInt64(0, 'length of mapping in bytes')$/;"	v	class:X86IntelMPAddrSpaceMapping
length	./arch/x86/bios/intelmp.hh	/^    uint8_t length;$/;"	m	class:X86ISA::IntelMP::ExtConfigEntry
length	./base/framebuffer.hh	/^    unsigned length;$/;"	m	class:PixelConverter
length	./base/inet.hh	/^    uint8_t length;$/;"	m	struct:Net::ip6_opt_dstopts
length	./base/vnc/vncinput.hh	/^        uint32_t length;$/;"	m	struct:VncInput::ClientCutTextMessage
length	./base/vnc/vncserver.hh	/^        uint32_t length;$/;"	m	struct:VncServer::ServerCutText
length	./dev/net/etherpkt.hh	/^    unsigned length;$/;"	m	class:EthPacketData
less	./base/statistics.cc	/^Info::less(Info *stat1, Info *stat2)$/;"	f	class:Stats::Info
less	./python/m5/stats/__init__.py	/^    def less(stat1, stat2):$/;"	f	function:enable
less_equal	./mem/ruby/profiler/AccessTraceForAddress.hh	/^    less_equal(const AccessTraceForAddress* n1,$/;"	f	class:AccessTraceForAddress
let	./cpu/timing_expr.hh	/^    TimingExprLet *let;$/;"	m	class:TimingExprEvalContext
letobe	./sim/byteswap.hh	/^template <typename T> inline T letobe(T value) {return swap_byte(value);}$/;"	f
letog	./sim/byteswap.hh	/^    inline T letog(T value) {return letobe(value);}$/;"	f	namespace:BigEndianGuest
letog	./sim/byteswap.hh	/^    inline T letog(T value) {return value;}$/;"	f	namespace:LittleEndianGuest
letoh	./sim/byteswap.hh	/^template <typename T> inline T letoh(T value) {return swap_byte(value);}$/;"	f
letoh	./sim/byteswap.hh	/^template <typename T> inline T letoh(T value) {return value;}$/;"	f
level	./arch/x86/intmessage.hh	/^        Bitfield<20> level;$/;"	m	namespace:X86ISA
level	./arch/x86/regs/apic.hh	/^        Bitfield<14> level;$/;"	m	namespace:X86ISA
level1	./arch/alpha/pagetable.hh	/^    Addr level1() const$/;"	f	struct:AlphaISA::VAddr
level1	./arch/power/pagetable.hh	/^    level1() const$/;"	f	struct:PowerISA::VAddr
level2	./arch/alpha/pagetable.hh	/^    Addr level2() const$/;"	f	struct:AlphaISA::VAddr
level2	./arch/power/pagetable.hh	/^    level2() const$/;"	f	struct:PowerISA::VAddr
level3	./arch/alpha/pagetable.hh	/^    Addr level3() const$/;"	f	struct:AlphaISA::VAddr
level3	./arch/power/pagetable.hh	/^    level3() const$/;"	f	struct:PowerISA::VAddr
levels	./arch/arm/table_walker.hh	/^        unsigned levels;$/;"	m	class:ArmISA::TableWalker::WalkerState
li	./arch/power/types.hh	/^    Bitfield<25,  2> li;$/;"	m	namespace:PowerISA
limit	./arch/x86/linux/process.cc	/^    uint32_t limit;$/;"	m	struct:UserDesc32	file:
limit	./arch/x86/linux/process.cc	/^    uint32_t limit;$/;"	m	struct:UserDesc64	file:
limitHigh	./arch/x86/regs/misc.hh	/^        Bitfield<51, 48> limitHigh;$/;"	m	namespace:X86ISA
limitLow	./arch/x86/regs/misc.hh	/^        Bitfield<15, 0> limitLow;$/;"	m	namespace:X86ISA
limit_in_pages	./arch/x86/linux/process.cc	/^    Bitfield<4> limit_in_pages;$/;"	v
line	./cpu/minor/pipe_data.hh	/^    uint8_t *line;$/;"	m	class:Minor::ForwardLineData
line	./dev/pixelpump.hh	/^    unsigned line;$/;"	m	class:BasePixelPump
lineBaseAddr	./cpu/minor/pipe_data.hh	/^    Addr lineBaseAddr;$/;"	m	class:Minor::ForwardLineData
lineFirstVisible	./dev/pixelpump.hh	/^    unsigned lineFirstVisible() const {$/;"	f	struct:DisplayTimings
lineFrontPorchStart	./dev/pixelpump.hh	/^    unsigned lineFrontPorchStart() const {$/;"	f	struct:DisplayTimings
lineNil	./base/loader/coff_sym.h	257;"	d
linePitch	./dev/arm/hdlcd.hh	/^        const ssize_t linePitch;$/;"	m	class:HDLcd::DmaEngine
lineSeqNum	./cpu/minor/dyn_inst.hh	/^    InstSeqNum lineSeqNum;$/;"	m	class:Minor::InstId
lineSeqNum	./cpu/minor/fetch1.hh	/^    InstSeqNum lineSeqNum;$/;"	m	class:Minor::Fetch1
lineSize	./dev/arm/hdlcd.hh	/^        const size_t lineSize;$/;"	m	class:HDLcd::DmaEngine
lineSize	./mem/probes/stack_dist.hh	/^    const unsigned lineSize;$/;"	m	class:StackDistProbe
lineSnap	./cpu/minor/fetch1.hh	/^    unsigned int lineSnap;$/;"	m	class:Minor::Fetch1
lineVBackPorchStart	./dev/pixelpump.hh	/^    unsigned lineVBackPorchStart() const {$/;"	f	struct:DisplayTimings
lineVSyncStart	./dev/pixelpump.hh	/^    unsigned lineVSyncStart() const {$/;"	f	struct:DisplayTimings
lineWidth	./cpu/minor/lsq.hh	/^    const unsigned int lineWidth;$/;"	m	class:Minor::LSQ
lineWidth	./cpu/minor/pipe_data.hh	/^    unsigned int lineWidth;$/;"	m	class:Minor::ForwardLineData
line_size	./mem/probes/StackDistProbe.py	/^    line_size = Param.Unsigned(Parent.cache_line_size,$/;"	v	class:StackDistProbe
linear_hist_bins	./mem/probes/StackDistProbe.py	/^    linear_hist_bins = Param.Unsigned('16', "Bins in linear histograms")$/;"	v	class:StackDistProbe
linebuf	./dev/terminal.hh	/^    CircleBuf<char> linebuf;$/;"	m	class:Terminal
linesPerFrame	./dev/pixelpump.hh	/^    unsigned linesPerFrame() const {$/;"	f	struct:DisplayTimings
linesize	./mem/snoop_filter.hh	/^    const unsigned linesize;$/;"	m	class:SnoopFilter
link	./dev/net/etherlink.hh	/^    Link *link[2];$/;"	m	class:EtherLink
link	./dev/net/ns_gige_reg.h	/^    uint32_t link;    \/* link field to next descriptor in linked list *\/$/;"	m	struct:ns_desc32
link	./dev/net/ns_gige_reg.h	/^    uint64_t link;    \/* link field to next descriptor in linked list *\/$/;"	m	struct:ns_desc64
link	./kern/tru64/tru64_syscalls.hh	/^        link = 9,$/;"	e	enum:SystemCalls::__anon102
link	./mem/ruby/network/Topology.hh	/^    BasicLink *link;$/;"	m	struct:LinkEntry
linkBuffer	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.hh	/^    flitBuffer_d *linkBuffer;$/;"	m	class:NetworkLink_d
linkBuffer	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	/^    flitBuffer *linkBuffer;$/;"	m	class:NetworkLink
linkDelay	./dev/net/dist_etherlink.hh	/^        Tick linkDelay;$/;"	m	class:DistEtherLink::RxLink
linkDelay	./dev/net/dist_etherlink.hh	/^    Tick linkDelay;$/;"	m	class:DistEtherLink
linkDelay	./dev/net/dist_iface.hh	/^        Tick linkDelay;$/;"	m	class:DistIface::RecvScheduler
linkDelay	./dev/net/etherlink.hh	/^        const Tick linkDelay;$/;"	m	class:EtherLink::Link
link_consumer	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.hh	/^    Consumer *link_consumer;$/;"	m	class:NetworkLink_d
link_consumer	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	/^    FlexibleConsumer *link_consumer;$/;"	m	class:NetworkLink
link_id	./mem/ruby/network/BasicLink.py	/^    link_id = Param.Int("ID in relation to other links")$/;"	v	class:BasicLink
link_id	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    link_id = Param.Int(Parent.link_id, "link id")$/;"	v	class:NetworkLink_d
link_id	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.py	/^    link_id = Param.Int(Parent.link_id, "link id")$/;"	v	class:NetworkLink
link_is_shortest_path_to_node	./mem/ruby/network/Topology.cc	/^Topology::link_is_shortest_path_to_node(SwitchID src, SwitchID next,$/;"	f	class:Topology
link_latency	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    link_latency = Param.Cycles(Parent.latency, "link latency")$/;"	v	class:NetworkLink_d
link_latency	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.py	/^    link_latency = Param.Cycles(Parent.latency, "link latency")$/;"	v	class:NetworkLink
link_source	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	/^    FlexibleConsumer *link_source;$/;"	m	class:NetworkLink
link_srcQueue	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.hh	/^    flitBuffer_d *link_srcQueue;$/;"	m	class:NetworkLink_d
link_srcQueue	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	/^    flitBuffer *link_srcQueue;$/;"	m	class:NetworkLink
linktype	./dev/net/etherdump.cc	/^    uint32_t linktype;          \/\/ data link type (DLT_*)$/;"	m	struct:pcap_file_header	file:
list	./doxygen/stl.hh	/^template <class T> class list {$/;"	c	namespace:std
listIt	./cpu/o3/mem_dep_unit.hh	/^        ListIt listIt;$/;"	m	class:MemDepUnit::MemDepEntry
listOrder	./cpu/o3/inst_queue.hh	/^    std::list<ListOrderEntry> listOrder;$/;"	m	class:InstructionQueue
list_type	./dev/arm/gic_pl390.hh	/^        Bitfield<25,24> list_type;$/;"	m	class:Pl390
listen	./base/remote_gdb.cc	/^GDBListener::listen()$/;"	f	class:GDBListener
listen	./base/socket.cc	/^ListenSocket::listen(int port, bool reuse)$/;"	f	class:ListenSocket
listen	./base/vnc/vncserver.cc	/^VncServer::listen(int port)$/;"	f	class:VncServer
listen	./dev/net/ethertap.cc	/^TapListener::listen()$/;"	f	class:TapListener
listen	./dev/net/tcp_iface.cc	/^TCPIface::listen(int port)$/;"	f	class:TCPIface
listen	./dev/terminal.cc	/^Terminal::listen(int port)$/;"	f	class:Terminal
listen	./kern/tru64/tru64_syscalls.hh	/^        listen = 106,$/;"	e	enum:SystemCalls::__anon102
listenEvent	./base/vnc/vncserver.hh	/^    ListenEvent *listenEvent;$/;"	m	class:VncServer
listenEvent	./dev/terminal.hh	/^    ListenEvent *listenEvent;$/;"	m	class:Terminal
listener	./base/remote_gdb.hh	/^        GDBListener *listener;$/;"	m	class:GDBListener::InputEvent
listener	./base/remote_gdb.hh	/^    GDBListener *listener;$/;"	m	class:BaseRemoteGDB
listener	./base/remote_gdb.hh	/^    ListenSocket listener;$/;"	m	class:GDBListener
listener	./base/vnc/vncserver.hh	/^    ListenSocket listener;$/;"	m	class:VncServer
listener	./dev/net/ethertap.cc	/^        TapListener *listener;$/;"	m	class:TapListener::Event	file:
listener	./dev/net/ethertap.cc	/^    ListenSocket listener;$/;"	m	class:TapListener	file:
listener	./dev/net/ethertap.hh	/^    TapListener *listener;$/;"	m	class:EtherTap
listener	./dev/terminal.hh	/^    ListenSocket listener;$/;"	m	class:Terminal
listeners	./arch/arm/pmu.hh	/^        std::vector<ProbeListenerUPtr> listeners;$/;"	m	struct:ArmISA::PMU::CounterState
listeners	./mem/probes/base.hh	/^    std::vector<std::unique_ptr<PacketListener>> listeners;$/;"	m	class:BaseMemProbe
listeners	./sim/probe/probe.hh	/^    std::vector<ProbeListener *> listeners;$/;"	m	class:ProbeListenerObject
listeners	./sim/probe/probe.hh	/^    std::vector<ProbeListenerArgBase<Arg> *> listeners;$/;"	m	class:ProbePointArg
listening	./base/socket.hh	/^    bool listening;$/;"	m	class:ListenSocket
listening	./dev/net/tcp_iface.hh	/^    bool listening;$/;"	m	class:TCPIface
listeningDisabled	./base/socket.hh	/^    static bool listeningDisabled;$/;"	m	class:ListenSocket
literals	./mem/slicc/parser.py	/^    literals = ':[]{}(),='$/;"	v	class:SLICC
live	./unittest/refcnttest.cc	/^live()$/;"	f	namespace:__anon3
liveChange	./unittest/refcnttest.cc	/^liveChange()$/;"	f	namespace:__anon3
liveIt	./unittest/refcnttest.cc	/^    LiveList::iterator liveIt;$/;"	m	class:__anon3::TestRC	file:
liveList	./unittest/refcnttest.cc	/^LiveList liveList;$/;"	m	namespace:__anon3	file:
lma	./arch/x86/regs/misc.hh	/^        Bitfield<10> lma; \/\/ Long mode active$/;"	m	namespace:X86ISA
lme	./arch/x86/regs/misc.hh	/^        Bitfield<8> lme; \/\/ Long mode enable$/;"	m	namespace:X86ISA
lnHigh	./base/loader/coff_sym.h	/^    coff_int    lnHigh;         \/* highest line in the procedure *\/$/;"	m	struct:pdr
lnLow	./base/loader/coff_sym.h	/^    coff_int    lnLow;          \/* lowest line in the procedure *\/$/;"	m	struct:pdr
lnMap	./base/cp_annotate.hh	/^    LinkMap lnMap;$/;"	m	class:CPA
lo	./arch/arm/insts/neon64_mem.hh	/^    XReg lo;$/;"	m	struct:ArmISA::VReg
lo	./arch/mips/remote_gdb.hh	/^            uint32_t lo;$/;"	m	struct:MipsISA::RemoteGDB::MipsGdbRegCache::__anon83
load	./base/inifile.cc	/^IniFile::load(const string &file)$/;"	f	class:IniFile
load	./base/inifile.cc	/^IniFile::load(istream &f)$/;"	f	class:IniFile
load	./base/loader/symtab.cc	/^SymbolTable::load(const string &filename)$/;"	f	class:SymbolTable
load	./sim/cxx_config_ini.cc	/^CxxIniFile::load(const std::string &filename)$/;"	f	class:CxxIniFile
loadAddrMask	./sim/system.hh	/^    Addr loadAddrMask;$/;"	m	class:System
loadAddrOffset	./sim/system.hh	/^    Addr loadAddrOffset;$/;"	m	class:System
loadAllDataRegs	./arch/x86/isa/insts/simd128/integer/save_and_restore_state/save_and_restore_state.py	/^    "".join([loadX87RegTemplate % { "idx" : i, "mode" : "%(mode)s" }$/;"	v
loadBarrier	./cpu/o3/mem_dep_unit.hh	/^    bool loadBarrier;$/;"	m	class:MemDepUnit
loadBarrierSN	./cpu/o3/mem_dep_unit.hh	/^    InstSeqNum loadBarrierSN;$/;"	m	class:MemDepUnit
loadFloat80	./arch/x86/utility.cc	/^loadFloat80(const void *_mem)$/;"	f	namespace:X86ISA
loadGlobalSymbols	./base/loader/aout_object.cc	/^AoutObject::loadGlobalSymbols(SymbolTable *symtab, Addr addrMask)$/;"	f	class:AoutObject
loadGlobalSymbols	./base/loader/dtb_object.cc	/^DtbObject::loadGlobalSymbols(SymbolTable *symtab, Addr addrMask)$/;"	f	class:DtbObject
loadGlobalSymbols	./base/loader/ecoff_object.cc	/^EcoffObject::loadGlobalSymbols(SymbolTable *symtab, Addr addrMask)$/;"	f	class:EcoffObject
loadGlobalSymbols	./base/loader/elf_object.cc	/^ElfObject::loadGlobalSymbols(SymbolTable *symtab, Addr addrMask)$/;"	f	class:ElfObject
loadGlobalSymbols	./base/loader/raw_object.cc	/^RawObject::loadGlobalSymbols(SymbolTable *symtab, Addr addrMask)$/;"	f	class:RawObject
loadHead	./cpu/o3/lsq_unit.hh	/^    int loadHead;$/;"	m	class:LSQUnit
loadLocalSymbols	./base/loader/aout_object.cc	/^AoutObject::loadLocalSymbols(SymbolTable *symtab, Addr addrMask)$/;"	f	class:AoutObject
loadLocalSymbols	./base/loader/dtb_object.cc	/^DtbObject::loadLocalSymbols(SymbolTable *symtab, Addr addrMask)$/;"	f	class:DtbObject
loadLocalSymbols	./base/loader/ecoff_object.cc	/^EcoffObject::loadLocalSymbols(SymbolTable *symtab, Addr addrMask)$/;"	f	class:EcoffObject
loadLocalSymbols	./base/loader/elf_object.cc	/^ElfObject::loadLocalSymbols(SymbolTable *symtab, Addr addrMask)$/;"	f	class:ElfObject
loadLocalSymbols	./base/loader/raw_object.cc	/^RawObject::loadLocalSymbols(SymbolTable *symtab, Addr addrMask)$/;"	f	class:RawObject
loadOp	./arch/arm/types.hh	/^            Bitfield<20> loadOp;$/;"	m	namespace:ArmISA
loadQueue	./cpu/o3/lsq_unit.hh	/^    std::vector<DynInstPtr> loadQueue;$/;"	m	class:LSQUnit
loadSection	./base/loader/object_file.cc	/^ObjectFile::loadSection(Section *sec, PortProxy& memProxy, Addr addrMask, Addr offset)$/;"	f	class:ObjectFile
loadSections	./base/loader/elf_object.cc	/^ElfObject::loadSections(PortProxy& memProxy, Addr addrMask, Addr offset)$/;"	f	class:ElfObject
loadSections	./base/loader/hex_file.cc	/^HexFile::loadSections(PortProxy& memProxy)$/;"	f	class:HexFile
loadSections	./base/loader/object_file.cc	/^ObjectFile::loadSections(PortProxy& memProxy, Addr addrMask, Addr offset)$/;"	f	class:ObjectFile
loadSomeSymbols	./base/loader/elf_object.cc	/^ElfObject::loadSomeSymbols(SymbolTable *symtab, int binding, Addr mask)$/;"	f	class:ElfObject
loadState	./arch/alpha/process.cc	/^AlphaLiveProcess::loadState(CheckpointIn &cp)$/;"	f	class:AlphaLiveProcess
loadState	./sim/cxx_manager.cc	/^CxxConfigManager::loadState(CheckpointIn &checkpoint)$/;"	f	class:CxxConfigManager
loadState	./sim/root.cc	/^Root::loadState(CheckpointIn &cp)$/;"	f	class:Root
loadState	./sim/sim_object.cc	/^SimObject::loadState(CheckpointIn &cp)$/;"	f	class:SimObject
loadTail	./cpu/o3/lsq_unit.hh	/^    int loadTail;$/;"	m	class:LSQUnit
loadVal	./dev/arm/rtc_pl031.hh	/^    uint32_t loadVal;$/;"	m	class:PL031
loadValue	./dev/arm/timer_sp804.hh	/^        uint32_t loadValue;$/;"	m	class:Sp804::Timer
loadWeakSymbols	./base/loader/elf_object.cc	/^ElfObject::loadWeakSymbols(SymbolTable *symtab, Addr addrMask)$/;"	f	class:ElfObject
loadWeakSymbols	./base/loader/object_file.hh	/^    virtual bool loadWeakSymbols(SymbolTable *symtab, Addr addrMask =$/;"	f	class:ObjectFile
load_addr_mask	./arch/alpha/AlphaSystem.py	/^    load_addr_mask = 0xffffffffff$/;"	v	class:AlphaSystem
load_addr_mask	./arch/arm/ArmSystem.py	/^    load_addr_mask = 0x0fffffff$/;"	v	class:GenericArmSystem
load_addr_mask	./arch/arm/ArmSystem.py	/^    load_addr_mask = 0xffffffff$/;"	v	class:ArmSystem
load_addr_mask	./arch/mips/MipsSystem.py	/^    load_addr_mask = 0xffffffffff$/;"	v	class:MipsSystem
load_addr_mask	./arch/sparc/SparcSystem.py	/^    load_addr_mask = 0xffffffffff$/;"	v	class:SparcSystem
load_addr_mask	./arch/x86/X86System.py	/^    load_addr_mask = 0xffffffffffffffff$/;"	v	class:X86System
load_addr_mask	./sim/System.py	/^    load_addr_mask = Param.UInt64(0xffffffffff,$/;"	v
load_module	./python/importer.py	/^    def load_module(self, fullname):$/;"	m	class:CodeImporter
load_offset	./sim/System.py	/^    load_offset = Param.UInt64(0, "Address to offset loading binaries with")$/;"	v
loads	./arch/alpha/linux/linux.hh	/^       uint64_t loads[3];  \/* 1, 5, and 15 minute load averages *\/$/;"	m	struct:AlphaLinux::__anon51
loads	./arch/arm/linux/linux.hh	/^        uint32_t loads[3];  \/* 1, 5, and 15 minute load averages *\/$/;"	m	struct:ArmLinux32::__anon76
loads	./arch/arm/linux/linux.hh	/^        uint64_t loads[3];  \/* 1, 5, and 15 minute load averages *\/$/;"	m	struct:ArmLinux64::__anon79
loads	./arch/mips/linux/linux.hh	/^       uint32_t loads[3];  \/* 1, 5, and 15 minute load averages *\/$/;"	m	struct:MipsLinux::__anon84
loads	./arch/sparc/linux/linux.hh	/^        uint32_t loads[3];  \/* 1, 5, and 15 minute load averages *\/$/;"	m	struct:Sparc32Linux::__anon47
loads	./arch/sparc/linux/linux.hh	/^        uint64_t loads[3];  \/* 1, 5, and 15 minute load averages *\/$/;"	m	struct:SparcLinux::__anon45
loads	./arch/x86/linux/linux.hh	/^        uint64_t loads[3];  \/* 1, 5, and 15 minute load averages *\/$/;"	m	struct:X86Linux64::__anon61
loads	./arch/x86/linux/linux.hh	/^       uint32_t loads[3];  \/* 1, 5, and 15 minute load averages *\/$/;"	m	struct:X86Linux32::__anon63
loads	./cpu/o3/lsq_unit.hh	/^    int loads;$/;"	m	class:LSQUnit
loadsInProgress	./cpu/o3/rename.hh	/^    int loadsInProgress[Impl::MaxThreads];$/;"	m	class:DefaultRename
loadsymbol	./sim/pseudo_inst.cc	/^loadsymbol(ThreadContext *tc)$/;"	f	namespace:PseudoInst
localApic	./arch/x86/bios/intelmp.hh	/^    uint32_t localApic;$/;"	m	class:X86ISA::IntelMP::ConfigTable
localApic	./arch/x86/interrupts.hh	/^        Interrupts *localApic;$/;"	m	class:X86ISA::Interrupts::ApicTimerEvent
localApicID	./arch/x86/bios/intelmp.hh	/^    uint8_t localApicID;$/;"	m	class:X86ISA::IntelMP::Processor
localApicVersion	./arch/x86/bios/intelmp.hh	/^    uint8_t localApicVersion;$/;"	m	class:X86ISA::IntelMP::Processor
localCtrBits	./cpu/pred/2bit_local.hh	/^    unsigned localCtrBits;$/;"	m	class:LocalBP
localCtrBits	./cpu/pred/BranchPredictor.py	/^    localCtrBits = Param.Unsigned(2, "Bits per counter")$/;"	v	class:LocalBP
localCtrBits	./cpu/pred/BranchPredictor.py	/^    localCtrBits = Param.Unsigned(2, "Bits per counter")$/;"	v	class:TournamentBP
localCtrBits	./cpu/pred/tournament.hh	/^    unsigned localCtrBits;$/;"	m	class:TournamentBP
localCtrs	./cpu/pred/2bit_local.hh	/^    std::vector<SatCounter> localCtrs;$/;"	m	class:LocalBP
localCtrs	./cpu/pred/tournament.hh	/^    std::vector<SatCounter> localCtrs;$/;"	m	class:TournamentBP
localHistory	./cpu/pred/tournament.hh	/^        unsigned localHistory;$/;"	m	struct:TournamentBP::BPHistory
localHistoryBits	./cpu/pred/tournament.hh	/^    unsigned localHistoryBits;$/;"	m	class:TournamentBP
localHistoryIdx	./cpu/pred/tournament.hh	/^        unsigned localHistoryIdx;$/;"	m	struct:TournamentBP::BPHistory
localHistoryTable	./cpu/pred/tournament.hh	/^    std::vector<unsigned> localHistoryTable;$/;"	m	class:TournamentBP
localHistoryTableSize	./cpu/pred/BranchPredictor.py	/^    localHistoryTableSize = Param.Unsigned(2048, "size of local history table")$/;"	v	class:TournamentBP
localHistoryTableSize	./cpu/pred/tournament.hh	/^    unsigned localHistoryTableSize;$/;"	m	class:TournamentBP
localIface	./dev/net/dist_etherlink.hh	/^        LocalIface *localIface;$/;"	m	class:DistEtherLink::Link
localIface	./dev/net/dist_etherlink.hh	/^    LocalIface *localIface;$/;"	m	class:DistEtherLink
localPredTaken	./cpu/pred/tournament.hh	/^        bool localPredTaken;$/;"	m	struct:TournamentBP::BPHistory
localPredictorMask	./cpu/pred/tournament.hh	/^    unsigned localPredictorMask;$/;"	m	class:TournamentBP
localPredictorSets	./cpu/pred/2bit_local.hh	/^    unsigned localPredictorSets;$/;"	m	class:LocalBP
localPredictorSize	./cpu/pred/2bit_local.hh	/^    unsigned localPredictorSize;$/;"	m	class:LocalBP
localPredictorSize	./cpu/pred/BranchPredictor.py	/^    localPredictorSize = Param.Unsigned(2048, "Size of local predictor")$/;"	v	class:LocalBP
localPredictorSize	./cpu/pred/BranchPredictor.py	/^    localPredictorSize = Param.Unsigned(2048, "Size of local predictor")$/;"	v	class:TournamentBP
localPredictorSize	./cpu/pred/tournament.hh	/^    unsigned localPredictorSize;$/;"	m	class:TournamentBP
localSlavePortIds	./mem/snoop_filter.hh	/^    std::vector<PortID> localSlavePortIds;$/;"	m	class:SnoopFilter
localThreshold	./cpu/pred/tournament.hh	/^    unsigned localThreshold;$/;"	m	class:TournamentBP
localTimer	./dev/arm/timer_cpulocal.hh	/^    Timer localTimer[CPU_MAX];$/;"	m	class:CpuLocalTimer
local_apic	./arch/x86/bios/IntelMP.py	/^    local_apic = Param.UInt32(0xFEE00000, 'address of the local APIC')$/;"	v	class:X86IntelMPConfigTable
local_apic_id	./arch/x86/bios/IntelMP.py	/^    local_apic_id = Param.UInt8(0, 'local APIC id')$/;"	v	class:X86IntelMPProcessor
local_apic_version	./arch/x86/bios/IntelMP.py	/^    local_apic_version = Param.UInt8(0,$/;"	v	class:X86IntelMPProcessor
local_cpu_timer	./dev/arm/RealView.py	/^    local_cpu_timer = CpuLocalTimer(int_num_timer=29, int_num_watchdog=30, pio_addr=0x1f000600)$/;"	v	class:RealViewPBX
local_cpu_timer	./dev/arm/RealView.py	/^    local_cpu_timer = CpuLocalTimer(int_num_timer=29, int_num_watchdog=30, pio_addr=0x2C080000)$/;"	v	class:VExpress_EMM
localoff	./base/loader/coff_sym.h	/^    unsigned localoff : 8;      \/* offset of local variables from vfp *\/$/;"	m	struct:pdr
locals	./python/m5/util/code_formatter.py	/^    locals = True$/;"	v	class:code_formatter
locationTable	./dev/arm/flash_device.hh	/^    std::vector<struct PageMapEntry> locationTable;$/;"	m	class:FlashDevice
lock	./arch/x86/types.hh	/^        Bitfield<5> lock;$/;"	m	namespace:X86ISA
lock	./dev/net/dist_iface.hh	/^        std::mutex lock;$/;"	m	class:DistIface::Sync
lock	./sim/eventq.hh	/^    void lock() { service_mutex.lock(); }$/;"	f	class:EventQueue
lockList	./mem/cache/blk.hh	/^    std::list<Lock> lockList;$/;"	m	class:CacheBlk
lockVal	./dev/arm/rv_ctrl.hh	/^        Bitfield<15,0> lockVal;$/;"	m	class:RealViewCtrl
lock_addr	./arch/alpha/isa.hh	/^        Addr lock_addr;      \/\/ lock address for LL\/SC$/;"	m	class:AlphaISA::ISA
lock_flag	./arch/alpha/isa.hh	/^        bool lock_flag;      \/\/ lock flag for LL\/SC$/;"	m	class:AlphaISA::ISA
locked	./arch/sparc/pagetable.hh	/^    bool locked()   const { assert(populated); return bits(entry4u,6,6); }$/;"	f	class:SparcISA::PageTableEntry
locked	./cpu/simple/atomic.hh	/^    bool locked;$/;"	m	class:AtomicSimpleCPU
locked	./dev/arm/rv_ctrl.hh	/^        Bitfield<16> locked;$/;"	m	class:RealViewCtrl
lockedAddrList	./mem/abstract_mem.hh	/^    std::list<LockedAddr> lockedAddrList;$/;"	m	class:AbstractMemory
log2framenum	./dev/arm/gic_v2m.hh	/^    unsigned int log2framenum;$/;"	m	class:Gicv2m
logBytes	./arch/x86/pagetable.hh	/^        unsigned logBytes;$/;"	m	struct:X86ISA::TlbEntry
logLevelSize	./mem/multi_level_page_table.hh	/^    const std::vector<uint8_t> logLevelSize;$/;"	m	class:MultiLevelPageTable
logMessage	./base/trace.cc	/^OstreamLogger::logMessage(Tick when, const std::string &name,$/;"	f	class:Trace::OstreamLogger
log_hist_bins	./mem/probes/StackDistProbe.py	/^    log_hist_bins = Param.Unsigned('32', "Bins in logarithmic histograms")$/;"	v	class:StackDistProbe
logs	./base/statistics.hh	/^    Counter logs;$/;"	m	class:Stats::HistStor
logs	./base/stats/info.hh	/^    Counter logs;$/;"	m	struct:Stats::DistData
longDesc	./arch/arm/table_walker.hh	/^        LongDescriptor longDesc;$/;"	m	class:ArmISA::TableWalker::WalkerState
longDescFaultSources	./arch/arm/faults.cc	/^uint8_t ArmFault::longDescFaultSources[] = {$/;"	m	class:ArmISA::ArmFault	file:
longDescFaultSources	./arch/arm/faults.hh	/^    static uint8_t longDescFaultSources[NumFaultSources];$/;"	m	class:ArmISA::ArmFault
longDescFormat	./arch/arm/pagetable.hh	/^    bool longDescFormat; \/\/ @todo use this in the update attribute bethod$/;"	m	struct:ArmISA::TlbEntry
longDescFormatInUse	./arch/arm/utility.cc	/^longDescFormatInUse(ThreadContext *tc)$/;"	f	namespace:ArmISA
longMode	./arch/x86/regs/misc.hh	/^        Bitfield<4> longMode;$/;"	m	namespace:X86ISA
longPdtb	./arch/x86/regs/misc.hh	/^        Bitfield<51, 12> longPdtb; \/\/ Long Mode Page-Directory-Table$/;"	m	namespace:X86ISA
longestFuLatency	./cpu/minor/execute.hh	/^    Cycles longestFuLatency;$/;"	m	class:Minor::Execute
longestLatency	./cpu/activity.hh	/^    int longestLatency;$/;"	m	class:ActivityRecorder
longl1	./arch/x86/pagetable.hh	/^        Bitfield<20, 12> longl1;$/;"	m	namespace:X86ISA
longl2	./arch/x86/pagetable.hh	/^        Bitfield<29, 21> longl2;$/;"	m	namespace:X86ISA
longl3	./arch/x86/pagetable.hh	/^        Bitfield<38, 30> longl3;$/;"	m	namespace:X86ISA
longl4	./arch/x86/pagetable.hh	/^        Bitfield<47, 39> longl4;$/;"	m	namespace:X86ISA
lookUpMiscReg	./arch/arm/isa.hh	/^        std::vector<struct MiscRegLUTEntry> lookUpMiscReg;$/;"	m	class:ArmISA::ISA
lookup	./arch/alpha/tlb.cc	/^TLB::lookup(Addr vpn, uint8_t asn)$/;"	f	class:AlphaISA::TLB
lookup	./arch/arm/tlb.cc	/^TLB::lookup(Addr va, uint16_t asn, uint8_t vmid, bool hyp, bool secure,$/;"	f	class:TLB
lookup	./arch/mips/tlb.cc	/^TLB::lookup(Addr vpn, uint8_t asn) const$/;"	f	class:TLB
lookup	./arch/power/tlb.cc	/^TLB::lookup(Addr vpn, uint8_t asn) const$/;"	f	class:TLB
lookup	./arch/sparc/tlb.cc	/^TLB::lookup(Addr va, int partition_id, bool real, int context_id,$/;"	f	class:SparcISA::TLB
lookup	./arch/x86/tlb.cc	/^TLB::lookup(Addr va, bool update_lru)$/;"	f	class:X86ISA::TLB
lookup	./base/trie.hh	/^    lookup(Key key)$/;"	f	class:Trie
lookup	./cpu/decode_cache.hh	/^    lookup(Addr addr)$/;"	f	class:DecodeCache::AddrMap
lookup	./cpu/o3/rename_map.cc	/^UnifiedRenameMap::lookup(RegIndex arch_reg) const$/;"	f	class:UnifiedRenameMap
lookup	./cpu/o3/rename_map.hh	/^    PhysRegIndex lookup(RegIndex arch_reg) const$/;"	f	class:SimpleRenameMap
lookup	./cpu/pred/2bit_local.cc	/^LocalBP::lookup(Addr branch_addr, void * &bp_history)$/;"	f	class:LocalBP
lookup	./cpu/pred/bi_mode.cc	/^BiModeBP::lookup(Addr branchAddr, void * &bpHistory)$/;"	f	class:BiModeBP
lookup	./cpu/pred/btb.cc	/^DefaultBTB::lookup(Addr instPC, ThreadID tid)$/;"	f	class:DefaultBTB
lookup	./cpu/pred/tournament.cc	/^TournamentBP::lookup(Addr branch_addr, void * &bp_history)$/;"	f	class:TournamentBP
lookup	./mem/multi_level_page_table_impl.hh	/^MultiLevelPageTable<ISAOps>::lookup(Addr vaddr, TlbEntry &entry)$/;"	f	class:MultiLevelPageTable
lookup	./mem/page_table.cc	/^FuncPageTable::lookup(Addr vaddr, TheISA::TlbEntry &entry)$/;"	f	class:FuncPageTable
lookup	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::lookup(Addr address) const$/;"	f	class:CacheMemory
lookup	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::lookup(Addr address)$/;"	f	class:CacheMemory
lookup	./mem/ruby/structures/DirectoryMemory.cc	/^DirectoryMemory::lookup(Addr address)$/;"	f	class:DirectoryMemory
lookup	./mem/ruby/structures/PerfectCacheMemory.hh	/^PerfectCacheMemory<ENTRY>::lookup(Addr address) const$/;"	f	class:PerfectCacheMemory
lookup	./mem/ruby/structures/PerfectCacheMemory.hh	/^PerfectCacheMemory<ENTRY>::lookup(Addr address)$/;"	f	class:PerfectCacheMemory
lookup	./mem/ruby/structures/TBETable.hh	/^TBETable<ENTRY>::lookup(Addr address)$/;"	f	class:TBETable
lookup	./python/m5/util/code_formatter.py	/^class lookup(object):$/;"	c
lookupAndUpdateNextPC	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::lookupAndUpdateNextPC($/;"	f	class:DefaultFetch
lookupCC	./cpu/o3/rename_map.hh	/^    PhysRegIndex lookupCC(RegIndex rel_arch_reg) const$/;"	f	class:UnifiedRenameMap
lookupEthPort	./python/swig/pyobject.cc	/^lookupEthPort(SimObject *so, const std::string &name, int i)$/;"	f
lookupFloat	./cpu/o3/rename_map.hh	/^    PhysRegIndex lookupFloat(RegIndex rel_arch_reg) const$/;"	f	class:UnifiedRenameMap
lookupHandle	./base/trie.hh	/^    lookupHandle(Key key)$/;"	f	class:Trie
lookupInt	./cpu/o3/rename_map.hh	/^    PhysRegIndex lookupInt(RegIndex rel_arch_reg) const$/;"	f	class:UnifiedRenameMap
lookupLatency	./mem/cache/base.hh	/^    const Cycles lookupLatency;$/;"	m	class:BaseCache
lookupLatency	./mem/snoop_filter.hh	/^    const Cycles lookupLatency;$/;"	m	class:SnoopFilter
lookupLevel	./arch/arm/pagetable.hh	/^    LookupLevel lookupLevel;    \/\/ Lookup level where the descriptor was fetched$/;"	m	struct:ArmISA::TlbEntry
lookupLevel	./arch/arm/table_walker.hh	/^        LookupLevel lookupLevel;$/;"	m	class:ArmISA::TableWalker::DescriptorBase
lookupMisc	./cpu/o3/rename_map.hh	/^    PhysRegIndex lookupMisc(RegIndex rel_arch_reg) const$/;"	f	class:UnifiedRenameMap
lookupRequest	./mem/snoop_filter.cc	/^SnoopFilter::lookupRequest(const Packet* cpkt, const SlavePort& slave_port)$/;"	f	class:SnoopFilter
lookupSnoop	./mem/snoop_filter.cc	/^SnoopFilter::lookupSnoop(const Packet* cpkt)$/;"	f	class:SnoopFilter
lookupTable	./arch/alpha/tlb.hh	/^    PageTable lookupTable;  \/\/ Quick lookup into page table$/;"	m	class:AlphaISA::TLB
lookupTable	./arch/mips/tlb.hh	/^    PageTable lookupTable;      \/\/ Quick lookup into page table$/;"	m	class:MipsISA::TLB
lookupTable	./arch/power/tlb.hh	/^    PageTable lookupTable;      \/\/ Quick lookup into page table$/;"	m	class:PowerISA::TLB
lookupTable	./arch/sparc/tlb.hh	/^    TlbMap lookupTable;;$/;"	m	class:SparcISA::TLB
lookupTraceForAddress	./mem/ruby/profiler/AddressProfiler.cc	/^lookupTraceForAddress(Addr addr, AddressMap& record_map)$/;"	f
lookup_latency	./mem/XBar.py	/^    lookup_latency = Param.Cycles(1, "Lookup latency")$/;"	v	class:SnoopFilter
lookups	./cpu/pred/bpred_unit.hh	/^    Stats::Scalar lookups;$/;"	m	class:BPredUnit
loopback	./dev/net/Ethernet.py	/^    loopback = Param.Bool(True, "send packet back to the sending interface")$/;"	v	class:EtherBus
loopback	./dev/net/etherbus.hh	/^    bool loopback;$/;"	m	class:EtherBus
lowAddr	./mem/cache/blk.hh	/^        Addr lowAddr;      \/\/ low address of lock range$/;"	m	class:CacheBlk::Lock
lowFromDouble	./arch/arm/insts/vfp.hh	/^lowFromDouble(double val)$/;"	f	namespace:ArmISA
lower	./arch/arm/isa.hh	/^            uint32_t lower;$/;"	m	struct:ArmISA::ISA::MiscRegLUTEntry
lower	./dev/x86/intdev.hh	/^    lower()$/;"	f	class:X86ISA::IntSourcePin
lowerEL32Offset	./arch/arm/faults.hh	/^        const uint16_t lowerEL32Offset;$/;"	m	struct:ArmISA::ArmFault::FaultVals
lowerEL64Offset	./arch/arm/faults.hh	/^        const uint16_t lowerEL64Offset;$/;"	m	struct:ArmISA::ArmFault::FaultVals
lowerInterruptPin	./dev/x86/i82094aa.cc	/^X86ISA::I82094AA::lowerInterruptPin(int number)$/;"	f	class:X86ISA::I82094AA
lowerInterruptPin	./dev/x86/i8259.cc	/^X86ISA::I8259::lowerInterruptPin(int number)$/;"	f	class:X86ISA::I8259
lowerInterruptPin	./dev/x86/intdev.hh	/^    lowerInterruptPin(int number)$/;"	f	class:X86ISA::IntDevice
lowestPriorityOffset	./dev/x86/i82094aa.hh	/^    uint64_t lowestPriorityOffset;$/;"	m	class:X86ISA::I82094AA
lpa	./arch/mips/pra_constants.hh	/^    Bitfield<7>  lpa;$/;"	m	namespace:MipsISA
lpae	./arch/arm/miscregs.hh	/^        Bitfield<11>     lpae;$/;"	m	namespace:ArmISA
lpae	./arch/arm/miscregs.hh	/^        Bitfield<9> lpae;$/;"	m	namespace:ArmISA
lpp	./dev/arm/pl111.hh	/^        Bitfield<9,0> lpp;$/;"	m	class:Pl111
lqEmpty	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::lqEmpty() const$/;"	f	class:LSQ
lqEmpty	./cpu/o3/lsq_unit.hh	/^    bool lqEmpty() const { return loads == 0; }$/;"	f	class:LSQUnit
lqEntries	./cpu/o3/rename.hh	/^        unsigned lqEntries;$/;"	m	struct:DefaultRename::FreeEntries
lqFull	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::lqFull()$/;"	f	class:LSQ
lqFull	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::lqFull(ThreadID tid)$/;"	f	class:LSQ
lqFull	./cpu/o3/lsq_unit.hh	/^    bool lqFull() { return loads >= (LQEntries - 1); }$/;"	f	class:LSQUnit
lqIdx	./cpu/base_dyn_inst.hh	/^    int16_t lqIdx;$/;"	m	class:BaseDynInst
lr	./arch/power/remote_gdb.hh	/^            uint32_t lr;$/;"	m	struct:PowerISA::RemoteGDB::PowerGdbRegCache::__anon53
lrPending	./dev/arm/vgic.hh	/^    unsigned int lrPending(struct vcpuIntData *vid)$/;"	f	class:VGic
lrValid	./dev/arm/vgic.hh	/^    unsigned int lrValid(struct vcpuIntData *vid)$/;"	f	class:VGic
lruSeq	./arch/x86/pagetable.hh	/^        uint64_t lruSeq;$/;"	m	struct:X86ISA::TlbEntry
lruSeq	./arch/x86/tlb.hh	/^        uint64_t lruSeq;$/;"	m	class:X86ISA::TLB
lseek	./kern/tru64/tru64_syscalls.hh	/^        lseek = 19,$/;"	e	enum:SystemCalls::__anon102
lseekFunc	./sim/syscall_emul.cc	/^lseekFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)$/;"	f
lsl128	./arch/arm/insts/fplib.cc	/^lsl128(uint64_t *r0, uint64_t *r1, uint64_t x0, uint64_t x1, uint32_t shift)$/;"	f	namespace:ArmISA
lsl16	./arch/arm/insts/fplib.cc	/^lsl16(uint16_t x, uint32_t shift)$/;"	f	namespace:ArmISA
lsl32	./arch/arm/insts/fplib.cc	/^lsl32(uint32_t x, uint32_t shift)$/;"	f	namespace:ArmISA
lsl64	./arch/arm/insts/fplib.cc	/^lsl64(uint64_t x, uint32_t shift)$/;"	f	namespace:ArmISA
lsnm	./arch/mips/dt_constants.hh	/^    Bitfield<28>     lsnm;$/;"	m	namespace:MipsISA
lsq	./cpu/minor/execute.hh	/^    LSQ lsq;$/;"	m	class:Minor::Execute
lsq	./cpu/minor/lsq.hh	/^        LSQ &lsq;$/;"	m	class:Minor::LSQ::DcachePort
lsq	./cpu/minor/lsq.hh	/^        LSQ &lsq;$/;"	m	class:Minor::LSQ::StoreBuffer
lsq	./cpu/o3/cpu.hh	/^        LSQ<Impl> *lsq;$/;"	m	class:FullO3CPU::DcachePort
lsq	./cpu/o3/lsq_unit.hh	/^    LSQ *lsq;$/;"	m	class:LSQUnit
lsqBlockedLoads	./cpu/o3/lsq_unit.hh	/^    Stats::Scalar lsqBlockedLoads;$/;"	m	class:LSQUnit
lsqCacheBlocked	./cpu/o3/lsq_unit.hh	/^    Stats::Scalar lsqCacheBlocked;$/;"	m	class:LSQUnit
lsqCount	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::lsqCount()$/;"	f	class:DefaultFetch
lsqForwLoads	./cpu/o3/lsq_unit.hh	/^    Stats::Scalar lsqForwLoads;$/;"	m	class:LSQUnit
lsqID	./cpu/o3/lsq_unit.hh	/^    ThreadID lsqID;$/;"	m	class:LSQUnit
lsqIgnoredResponses	./cpu/o3/lsq_unit.hh	/^    Stats::Scalar lsqIgnoredResponses;$/;"	m	class:LSQUnit
lsqMemOrderViolation	./cpu/o3/lsq_unit.hh	/^    Stats::Scalar lsqMemOrderViolation;$/;"	m	class:LSQUnit
lsqPolicy	./cpu/o3/lsq.hh	/^    LSQPolicy lsqPolicy;$/;"	m	class:LSQ
lsqPtr	./cpu/o3/lsq_unit.hh	/^        LSQUnit<Impl> *lsqPtr;$/;"	m	class:LSQUnit::WritebackEvent
lsqRescheduledLoads	./cpu/o3/lsq_unit.hh	/^    Stats::Scalar lsqRescheduledLoads;$/;"	m	class:LSQUnit
lsqSquashedLoads	./cpu/o3/lsq_unit.hh	/^    Stats::Scalar lsqSquashedLoads;$/;"	m	class:LSQUnit
lsqSquashedStores	./cpu/o3/lsq_unit.hh	/^    Stats::Scalar lsqSquashedStores;$/;"	m	class:LSQUnit
lsr128	./arch/arm/insts/fplib.cc	/^lsr128(uint64_t *r0, uint64_t *r1, uint64_t x0, uint64_t x1, uint32_t shift)$/;"	f	namespace:ArmISA
lsr16	./arch/arm/insts/fplib.cc	/^lsr16(uint16_t x, uint32_t shift)$/;"	f	namespace:ArmISA
lsr32	./arch/arm/insts/fplib.cc	/^lsr32(uint32_t x, uint32_t shift)$/;"	f	namespace:ArmISA
lsr64	./arch/arm/insts/fplib.cc	/^lsr64(uint64_t x, uint32_t shift)$/;"	f	namespace:ArmISA
lstat	./kern/tru64/tru64_syscalls.hh	/^        lstat = 225,$/;"	e	enum:SystemCalls::__anon102
lstat64Func	./sim/syscall_emul.hh	/^lstat64Func(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
lstatFunc	./sim/syscall_emul.hh	/^lstatFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
lsuCtrlReg	./arch/sparc/isa.hh	/^    uint64_t lsuCtrlReg;$/;"	m	class:SparcISA::ISA
lt	./arch/power/miscregs.hh	/^        Bitfield<31> lt;$/;"	m	namespace:PowerISA
ltcoproc	./arch/arm/types.hh	/^        Bitfield<11, 8>  ltcoproc;$/;"	m	namespace:ArmISA
ltopcode11_8	./arch/arm/types.hh	/^        Bitfield<11, 8>  ltopcode11_8;$/;"	m	namespace:ArmISA
ltopcode15	./arch/arm/types.hh	/^        Bitfield<15>     ltopcode15;$/;"	m	namespace:ArmISA
ltopcode4	./arch/arm/types.hh	/^        Bitfield<4>      ltopcode4;$/;"	m	namespace:ArmISA
ltopcode7_4	./arch/arm/types.hh	/^        Bitfield<7,  4>  ltopcode7_4;$/;"	m	namespace:ArmISA
ltopcode7_6	./arch/arm/types.hh	/^        Bitfield<7,  6>  ltopcode7_6;$/;"	m	namespace:ArmISA
ltrd	./arch/arm/types.hh	/^        Bitfield<11, 8>  ltrd;$/;"	m	namespace:ArmISA
ltseqnum	./cpu/o3/store_set.hh	/^struct ltseqnum {$/;"	s
lunAvail	./dev/arm/ufs_device.hh	/^        const uint32_t lunAvail;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
lunAvail	./dev/arm/ufs_device.hh	/^    const uint32_t lunAvail;$/;"	m	class:UFSHostDevice
lunID	./dev/arm/ufs_device.hh	/^        const uint32_t lunID;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
lunID	./dev/arm/ufs_device.hh	/^        uint32_t lunID;$/;"	m	struct:UFSHostDevice::transferDoneInfo
lunID	./dev/arm/ufs_device.hh	/^        uint32_t lunID;$/;"	m	struct:UFSHostDevice::transferInfo
lunInfo	./dev/arm/ufs_device.hh	/^        struct LUNInfo lunInfo;$/;"	m	class:UFSHostDevice::UFSSCSIDevice	typeref:struct:UFSHostDevice::UFSSCSIDevice::LUNInfo
lun_id	./dev/arm/ufs_device.hh	/^        uint32_t lun_id;$/;"	m	struct:UFSHostDevice::transferStart
lw_syscall	./kern/tru64/tru64_syscalls.hh	/^        lw_syscall = 68,$/;"	e	enum:SystemCalls::__anon103
lw_unwire	./kern/tru64/tru64_syscalls.hh	/^        lw_unwire = 31,$/;"	e	enum:SystemCalls::__anon103
lw_wire	./kern/tru64/tru64_syscalls.hh	/^        lw_wire = 30,$/;"	e	enum:SystemCalls::__anon103
m	./arch/arm/miscregs.hh	/^        Bitfield<0>    m;       \/\/ MMU enable$/;"	m	namespace:ArmISA
m	./arch/arm/pmu.hh	/^        Bitfield<26> m;$/;"	m	class:ArmISA::PMU
m	./arch/mips/mt_constants.hh	/^    Bitfield<31>     m;$/;"	m	namespace:MipsISA
m	./arch/mips/pra_constants.hh	/^    Bitfield<31>     m;$/;"	m	namespace:MipsISA
m	./arch/mips/pra_constants.hh	/^    Bitfield<31>    m;$/;"	m	namespace:MipsISA
m	./arch/mips/pra_constants.hh	/^    Bitfield<31> m;$/;"	m	namespace:MipsISA
m5	./base/stl_helpers.hh	/^namespace m5 {$/;"	n
m5Func	./arch/arm/types.hh	/^        Bitfield<15,  8>  m5Func;$/;"	m	namespace:ArmISA
m5Main	./sim/init.cc	/^m5Main(int argc, char **argv)$/;"	f
m5MainCommands	./sim/init.cc	/^const char * __attribute__((weak)) m5MainCommands[] = {$/;"	v
m5MainCommands	./unittest/stattest.cc	/^const char *m5MainCommands[] = {$/;"	v
m5PageFault	./arch/generic/pseudo_inst.cc	/^GenericISA::m5PageFault(ThreadContext *tc)$/;"	f	class:GenericISA
m5PageFault	./arch/x86/pseudo_inst.cc	/^m5PageFault(ThreadContext *tc)$/;"	f	namespace:X86ISA
m5Syscall	./arch/generic/pseudo_inst.cc	/^GenericISA::m5Syscall(ThreadContext *tc)$/;"	f	class:GenericISA
m5Syscall	./arch/x86/pseudo_inst.cc	/^m5Syscall(ThreadContext *tc)$/;"	f	namespace:X86ISA
m5_build_env	./unittest/genini.py	/^m5_build_env = {}$/;"	v
m5_cond_broadcastFunc	./kern/tru64/tru64.hh	/^    m5_cond_broadcastFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	class:Tru64
m5_cond_signalFunc	./kern/tru64/tru64.hh	/^    m5_cond_signalFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	class:Tru64
m5_cond_waitFunc	./kern/tru64/tru64.hh	/^    m5_cond_waitFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	class:Tru64
m5_fegetround	./base/fenv.c	/^int m5_fegetround()$/;"	f
m5_fegetround	./base/fenv.hh	/^inline int m5_fegetround() {return 0; }$/;"	f
m5_fesetround	./base/fenv.c	/^void m5_fesetround(int rm)$/;"	f
m5_fesetround	./base/fenv.hh	/^inline void m5_fesetround(int rm) { ; }$/;"	f
m5_lock_mutex	./kern/tru64/tru64.hh	/^    m5_lock_mutex(Addr uaddr, LiveProcess *process, ThreadContext *tc)$/;"	f	class:Tru64
m5_mutex_lockFunc	./kern/tru64/tru64.hh	/^    m5_mutex_lockFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	class:Tru64
m5_mutex_trylockFunc	./kern/tru64/tru64.hh	/^    m5_mutex_trylockFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	class:Tru64
m5_mutex_unlockFunc	./kern/tru64/tru64.hh	/^    m5_mutex_unlockFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	class:Tru64
m5_round_ops	./base/fenv.c	/^static const int m5_round_ops[] =  {FE_DOWNWARD, FE_TONEAREST, FE_TOWARDZERO, FE_UPWARD};$/;"	v	file:
m5_thread_exitFunc	./kern/tru64/tru64.hh	/^    m5_thread_exitFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	class:Tru64
m5_twin32_t	./base/bigint.hh	/^    m5_twin32_t()$/;"	f	struct:m5_twin32_t
m5_twin32_t	./base/bigint.hh	/^    m5_twin32_t(const uint32_t x)$/;"	f	struct:m5_twin32_t
m5_twin32_t	./base/bigint.hh	/^struct m5_twin32_t {$/;"	s
m5_twin64_t	./base/bigint.hh	/^    m5_twin64_t() : a(0), b(0)$/;"	f	struct:m5_twin64_t
m5_twin64_t	./base/bigint.hh	/^    m5_twin64_t(const uint64_t x) : a(x), b(x)$/;"	f	struct:m5_twin64_t
m5_twin64_t	./base/bigint.hh	/^struct m5_twin64_t {$/;"	s
m5_unlock_mutex	./kern/tru64/tru64.hh	/^    m5_unlock_mutex(Addr uaddr, LiveProcess *process, ThreadContext *tc)$/;"	f	class:Tru64
m5checkpoint	./sim/pseudo_inst.cc	/^m5checkpoint(ThreadContext *tc, Tick delay, Tick period)$/;"	f	namespace:PseudoInst
m5exit	./sim/pseudo_inst.cc	/^m5exit(ThreadContext *tc, Tick delay)$/;"	f	namespace:PseudoInst
m5fail	./sim/pseudo_inst.cc	/^m5fail(ThreadContext *tc, Tick delay, uint64_t code)$/;"	f	namespace:PseudoInst
mState	./arch/arm/nativetrace.hh	/^    ThreadState nState, mState;$/;"	m	class:Trace::ArmNativeTrace
mState	./arch/x86/nativetrace.hh	/^    ThreadState mState;$/;"	m	class:Trace::X86NativeTrace
m_AccessMode	./mem/ruby/slicc_interface/RubyRequest.hh	/^    RubyAccessMode m_AccessMode;$/;"	m	class:RubyRequest
m_Address	./mem/ruby/slicc_interface/AbstractCacheEntry.hh	/^    Addr m_Address;$/;"	m	class:AbstractCacheEntry
m_DelayedTicks	./mem/ruby/slicc_interface/Message.hh	/^    Tick m_DelayedTicks; \/\/ my delayed cycles$/;"	m	class:Message
m_FirstResponseToCompletionDelayHist	./mem/ruby/profiler/Profiler.hh	/^    std::vector<Stats::Histogram *> m_FirstResponseToCompletionDelayHist;$/;"	m	class:Profiler
m_FirstResponseToCompletionDelayHist	./mem/ruby/system/Sequencer.hh	/^    std::vector<Stats::Histogram *> m_FirstResponseToCompletionDelayHist;$/;"	m	class:Sequencer
m_ForwardToFirstResponseDelayHist	./mem/ruby/profiler/Profiler.hh	/^    std::vector<Stats::Histogram *> m_ForwardToFirstResponseDelayHist;$/;"	m	class:Profiler
m_ForwardToFirstResponseDelayHist	./mem/ruby/system/Sequencer.hh	/^    std::vector<Stats::Histogram *> m_ForwardToFirstResponseDelayHist;$/;"	m	class:Sequencer
m_IncompleteTimes	./mem/ruby/profiler/Profiler.hh	/^    Stats::Scalar m_IncompleteTimes[MachineType_NUM];$/;"	m	class:Profiler
m_IncompleteTimes	./mem/ruby/system/Sequencer.hh	/^    std::vector<Stats::Counter> m_IncompleteTimes;$/;"	m	class:Sequencer
m_InitialToForwardDelayHist	./mem/ruby/profiler/Profiler.hh	/^    std::vector<Stats::Histogram *> m_InitialToForwardDelayHist;$/;"	m	class:Profiler
m_InitialToForwardDelayHist	./mem/ruby/system/Sequencer.hh	/^    std::vector<Stats::Histogram *> m_InitialToForwardDelayHist;$/;"	m	class:Sequencer
m_IssueToInitialDelayHist	./mem/ruby/profiler/Profiler.hh	/^    std::vector<Stats::Histogram *> m_IssueToInitialDelayHist;$/;"	m	class:Profiler
m_IssueToInitialDelayHist	./mem/ruby/system/Sequencer.hh	/^    std::vector<Stats::Histogram *> m_IssueToInitialDelayHist;$/;"	m	class:Sequencer
m_LastEnqueueTime	./mem/ruby/slicc_interface/Message.hh	/^    Tick m_LastEnqueueTime; \/\/ my last enqueue time$/;"	m	class:Message
m_LineAddress	./mem/ruby/slicc_interface/RubyRequest.hh	/^    Addr m_LineAddress;$/;"	m	class:RubyRequest
m_Permission	./mem/ruby/slicc_interface/AbstractEntry.hh	/^    AccessPermission m_Permission; \/\/ Access permission for this$/;"	m	class:AbstractEntry
m_PhysicalAddress	./mem/ruby/slicc_interface/RubyRequest.hh	/^    Addr m_PhysicalAddress;$/;"	m	class:RubyRequest
m_Prefetch	./mem/ruby/slicc_interface/RubyRequest.hh	/^    PrefetchBit m_Prefetch;$/;"	m	class:RubyRequest
m_ProgramCounter	./mem/ruby/slicc_interface/RubyRequest.hh	/^    Addr m_ProgramCounter;$/;"	m	class:RubyRequest
m_Size	./mem/ruby/slicc_interface/RubyRequest.hh	/^    int m_Size;$/;"	m	class:RubyRequest
m_Type	./mem/ruby/slicc_interface/RubyRequest.hh	/^    RubyRequestType m_Type;$/;"	m	class:RubyRequest
m_abs_cntrl_vec	./mem/ruby/system/RubySystem.hh	/^    std::vector<AbstractController *> m_abs_cntrl_vec;$/;"	m	class:RubySystem
m_abstract_controls	./mem/ruby/system/RubySystem.hh	/^    std::vector<std::map<uint32_t, AbstractController *> > m_abstract_controls;$/;"	m	class:RubySystem
m_accessModeType	./mem/ruby/structures/CacheMemory.hh	/^    Stats::Vector m_accessModeType;$/;"	m	class:CacheMemory
m_access_backing_store	./mem/ruby/system/RubySystem.hh	/^    const bool m_access_backing_store;$/;"	m	class:RubySystem
m_access_mode	./cpu/testers/rubytest/Check.hh	/^    RubyAccessMode m_access_mode;$/;"	m	class:Check
m_act	./kern/tru64/mbuf.hh	92;"	d
m_active_inv_node	./cpu/testers/directedtest/InvalidateGenerator.hh	/^    uint32_t m_active_inv_node;$/;"	m	class:InvalidateGenerator
m_active_node	./cpu/testers/directedtest/SeriesRequestGenerator.hh	/^    uint32_t m_active_node;$/;"	m	class:SeriesRequestGenerator
m_active_read_node	./cpu/testers/directedtest/InvalidateGenerator.hh	/^    uint32_t m_active_read_node;$/;"	m	class:InvalidateGenerator
m_adaptive_routing	./mem/ruby/network/simple/SimpleNetwork.hh	/^    const bool m_adaptive_routing;$/;"	m	class:SimpleNetwork
m_addr	./mem/ruby/profiler/AccessTraceForAddress.hh	/^    Addr m_addr;$/;"	m	class:AccessTraceForAddress
m_addr	./mem/ruby/profiler/StoreTrace.hh	/^    Addr m_addr;$/;"	m	class:StoreTrace
m_addr	./mem/ruby/structures/MemoryNode.hh	/^    Addr m_addr;$/;"	m	class:MemoryNode
m_addr_increment_size	./cpu/testers/directedtest/InvalidateGenerator.hh	/^    uint32_t m_addr_increment_size;$/;"	m	class:InvalidateGenerator
m_addr_increment_size	./cpu/testers/directedtest/SeriesRequestGenerator.hh	/^    uint32_t m_addr_increment_size;$/;"	m	class:SeriesRequestGenerator
m_address	./cpu/testers/directedtest/InvalidateGenerator.hh	/^    Addr m_address;$/;"	m	class:InvalidateGenerator
m_address	./cpu/testers/directedtest/SeriesRequestGenerator.hh	/^    Addr m_address;$/;"	m	class:SeriesRequestGenerator
m_address	./cpu/testers/rubytest/Check.hh	/^    Addr m_address;$/;"	m	class:Check
m_address	./mem/ruby/common/SubBlock.hh	/^    Addr m_address;$/;"	m	class:SubBlock
m_address	./mem/ruby/structures/Prefetcher.hh	/^        Addr m_address;$/;"	m	class:PrefetchEntry
m_address_profiler_ptr	./mem/ruby/profiler/Profiler.hh	/^    AddressProfiler* m_address_profiler_ptr;$/;"	m	class:Profiler
m_ageCounter	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_ageCounter;         \/\/ age of old requests; to detect starvation$/;"	m	class:RubyMemoryControl
m_all_instructions	./mem/ruby/profiler/AddressProfiler.hh	/^    bool m_all_instructions;$/;"	m	class:AddressProfiler
m_all_instructions	./mem/ruby/profiler/Profiler.hh	/^    const bool m_all_instructions;$/;"	m	class:Profiler
m_alloc	./mem/ruby/common/DataBlock.hh	/^    bool m_alloc;$/;"	m	class:DataBlock
m_array	./mem/ruby/structures/Prefetcher.hh	/^        std::vector<PrefetchEntry> m_array;$/;"	m	class:Prefetcher
m_assoc	./mem/ruby/structures/AbstractReplacementPolicy.hh	/^    unsigned m_assoc;          \/** set associativity *\/$/;"	m	class:AbstractReplacementPolicy
m_atomics	./mem/ruby/profiler/AccessTraceForAddress.hh	/^    uint64_t m_atomics;$/;"	m	class:AccessTraceForAddress
m_attr	./kern/tru64/mbuf.hh	85;"	d
m_average_link_utilization	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.hh	/^    Stats::Scalar m_average_link_utilization;$/;"	m	class:GarnetNetwork_d
m_average_link_utilization	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.hh	/^    Stats::Scalar m_average_link_utilization;$/;"	m	class:GarnetNetwork
m_average_vc_load	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.hh	/^    Stats::Vector m_average_vc_load;$/;"	m	class:GarnetNetwork_d
m_average_vc_load	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.hh	/^    Stats::Vector m_average_vc_load;$/;"	m	class:GarnetNetwork
m_avg_latency	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    Stats::Formula m_avg_latency;$/;"	m	class:BaseGarnetNetwork
m_avg_network_latency	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    Stats::Formula m_avg_network_latency;$/;"	m	class:BaseGarnetNetwork
m_avg_queueing_latency	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    Stats::Formula m_avg_queueing_latency;$/;"	m	class:BaseGarnetNetwork
m_avg_utilization	./mem/ruby/network/simple/Switch.hh	/^    Stats::Formula m_avg_utilization;$/;"	m	class:Switch
m_avg_vnet_latency	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    Stats::Formula m_avg_vnet_latency;$/;"	m	class:BaseGarnetNetwork
m_avg_vqueue_latency	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    Stats::Formula m_avg_vqueue_latency;$/;"	m	class:BaseGarnetNetwork
m_bandwidth_factor	./mem/ruby/network/BasicLink.hh	/^    int m_bandwidth_factor;$/;"	m	class:BasicLink
m_bankBusyCounter	./mem/ruby/structures/RubyMemoryControl.hh	/^    int *m_bankBusyCounter;$/;"	m	class:RubyMemoryControl
m_bankQueues	./mem/ruby/structures/RubyMemoryControl.hh	/^    std::list<MemoryNode *>* m_bankQueues;$/;"	m	class:RubyMemoryControl
m_bank_bit_0	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_bank_bit_0;$/;"	m	class:RubyMemoryControl
m_bank_busy_time	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_bank_busy_time;$/;"	m	class:RubyMemoryControl
m_bank_queue_size	./mem/ruby/structures/RubyMemoryControl.hh	/^    unsigned int m_bank_queue_size;$/;"	m	class:RubyMemoryControl
m_banks_per_rank	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    int m_banks_per_rank;$/;"	m	class:MemCntrlProfiler
m_banks_per_rank	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_banks_per_rank;$/;"	m	class:RubyMemoryControl
m_basic_bus_busy_time	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_basic_bus_busy_time;$/;"	m	class:RubyMemoryControl
m_binsize	./mem/ruby/common/Histogram.hh	/^    int m_binsize;                \/\/ the size of each bucket$/;"	m	class:Histogram
m_bits	./mem/ruby/common/NetDest.hh	/^    std::vector<Set> m_bits;  \/\/ a vector of bit vectors - i.e. Sets$/;"	m	class:NetDest
m_block_map	./mem/ruby/slicc_interface/AbstractController.hh	/^    std::map<Addr, MessageBuffer*> m_block_map;$/;"	m	class:AbstractController
m_block_size_bits	./mem/ruby/system/RubySystem.cc	/^uint32_t RubySystem::m_block_size_bits;$/;"	m	class:RubySystem	file:
m_block_size_bits	./mem/ruby/system/RubySystem.hh	/^    static uint32_t m_block_size_bits;$/;"	m	class:RubySystem
m_block_size_bytes	./mem/ruby/system/CacheRecorder.hh	/^    uint64_t m_block_size_bytes;$/;"	m	class:CacheRecorder
m_block_size_bytes	./mem/ruby/system/RubySystem.cc	/^uint32_t RubySystem::m_block_size_bytes;$/;"	m	class:RubySystem	file:
m_block_size_bytes	./mem/ruby/system/RubySystem.hh	/^    static uint32_t m_block_size_bytes;$/;"	m	class:RubySystem
m_buffer	./mem/ruby/network/garnet/fixed-pipeline/flitBuffer_d.hh	/^    std::vector<flit_d *> m_buffer;$/;"	m	class:flitBuffer_d
m_buffer	./mem/ruby/network/garnet/flexible-pipeline/flitBuffer.hh	/^    std::vector<flit *> m_buffer;$/;"	m	class:flitBuffer
m_buffer_reads	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    Stats::Scalar m_buffer_reads;$/;"	m	class:Router_d
m_buffer_size	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.hh	/^    int m_buffer_size;$/;"	m	class:GarnetNetwork
m_buffer_size	./mem/ruby/network/simple/SimpleNetwork.hh	/^    const int m_buffer_size;$/;"	m	class:SimpleNetwork
m_buffer_size	./mem/ruby/slicc_interface/AbstractController.hh	/^    const unsigned int m_buffer_size;$/;"	m	class:AbstractController
m_buffer_writes	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    Stats::Scalar m_buffer_writes;$/;"	m	class:Router_d
m_buffers_per_ctrl_vc	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.hh	/^    int m_buffers_per_ctrl_vc;$/;"	m	class:GarnetNetwork_d
m_buffers_per_data_vc	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.hh	/^    int m_buffers_per_data_vc;$/;"	m	class:GarnetNetwork_d
m_busBusyCounter_Basic	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_busBusyCounter_Basic;$/;"	m	class:RubyMemoryControl
m_busBusyCounter_ReadNewRank	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_busBusyCounter_ReadNewRank;$/;"	m	class:RubyMemoryControl
m_busBusyCounter_Write	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_busBusyCounter_Write;$/;"	m	class:RubyMemoryControl
m_busBusy_WhichRank	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_busBusy_WhichRank;  \/\/ which rank last granted$/;"	m	class:RubyMemoryControl
m_bw_multiplier	./mem/ruby/network/simple/SimpleLink.hh	/^    int m_bw_multiplier;$/;"	m	class:SimpleExtLink
m_bw_multiplier	./mem/ruby/network/simple/SimpleLink.hh	/^    int m_bw_multiplier;$/;"	m	class:SimpleIntLink
m_bytes_read	./mem/ruby/system/CacheRecorder.hh	/^    uint64_t m_bytes_read;$/;"	m	class:CacheRecorder
m_cache	./mem/ruby/structures/AbstractReplacementPolicy.hh	/^    CacheMemory * m_cache;$/;"	m	class:AbstractReplacementPolicy
m_cache	./mem/ruby/structures/CacheMemory.hh	/^    std::vector<std::vector<AbstractCacheEntry*> > m_cache;$/;"	m	class:CacheMemory
m_cache_assoc	./mem/ruby/structures/CacheMemory.hh	/^    int m_cache_assoc;$/;"	m	class:CacheMemory
m_cache_num_set_bits	./mem/ruby/structures/CacheMemory.hh	/^    int m_cache_num_set_bits;$/;"	m	class:CacheMemory
m_cache_num_sets	./mem/ruby/structures/CacheMemory.hh	/^    int m_cache_num_sets;$/;"	m	class:CacheMemory
m_cache_recorder	./mem/ruby/system/RubySystem.hh	/^    CacheRecorder* m_cache_recorder;$/;"	m	class:RubySystem
m_cache_size	./mem/ruby/structures/CacheMemory.hh	/^    int m_cache_size;$/;"	m	class:CacheMemory
m_checkTable_ptr	./cpu/testers/rubytest/RubyTester.hh	/^    CheckTable* m_checkTable_ptr;$/;"	m	class:RubyTester
m_check_flush	./cpu/testers/rubytest/RubyTester.hh	/^    bool m_check_flush;$/;"	m	class:RubyTester
m_check_vector	./cpu/testers/rubytest/CheckTable.hh	/^    std::vector<Check*> m_check_vector;$/;"	m	class:CheckTable
m_checks_completed	./cpu/testers/rubytest/RubyTester.hh	/^    uint64_t m_checks_completed;$/;"	m	class:RubyTester
m_checks_to_complete	./cpu/testers/rubytest/RubyTester.hh	/^    uint64_t m_checks_to_complete;$/;"	m	class:RubyTester
m_clusterID	./mem/ruby/slicc_interface/AbstractController.hh	/^    const NodeID m_clusterID;$/;"	m	class:AbstractController
m_cntrl_id	./mem/ruby/system/CacheRecorder.hh	/^    int m_cntrl_id;$/;"	m	class:TraceRecord
m_consumer	./mem/ruby/network/MessageBuffer.hh	/^    Consumer* m_consumer;$/;"	m	class:MessageBuffer
m_consumer_ptr	./mem/ruby/common/Consumer.hh	/^          Consumer* m_consumer_ptr;$/;"	m	class:Consumer::ConsumerEvent
m_consumer_ptr	./mem/ruby/structures/TimerTable.hh	/^    Consumer* m_consumer_ptr;$/;"	m	class:TimerTable
m_consumer_ptr	./mem/ruby/structures/WireBuffer.hh	/^    Consumer* m_consumer_ptr;  \/\/ Consumer to signal a wakeup()$/;"	m	class:WireBuffer
m_contextId	./mem/ruby/slicc_interface/RubyRequest.hh	/^    ContextID m_contextId;$/;"	m	class:RubyRequest
m_control_msg_size	./mem/ruby/network/Network.cc	/^uint32_t Network::m_control_msg_size;$/;"	m	class:Network	file:
m_control_msg_size	./mem/ruby/network/Network.hh	/^    static uint32_t m_control_msg_size;$/;"	m	class:Network
m_controller	./mem/ruby/structures/Prefetcher.hh	/^        AbstractController *m_controller;$/;"	m	class:Prefetcher
m_controller	./mem/ruby/system/DMASequencer.hh	/^    AbstractController* m_controller;$/;"	m	class:DMASequencer
m_controller	./mem/ruby/system/RubyPort.hh	/^    AbstractController* m_controller;$/;"	m	class:RubyPort
m_cooldown_enabled	./mem/ruby/system/RubySystem.cc	/^bool RubySystem::m_cooldown_enabled = false;$/;"	m	class:RubySystem	file:
m_cooldown_enabled	./mem/ruby/system/RubySystem.hh	/^    static bool m_cooldown_enabled;$/;"	m	class:RubySystem
m_count	./mem/ruby/common/Histogram.hh	/^    uint64_t m_count;                \/\/ the number of elements added$/;"	m	class:Histogram
m_count	./mem/ruby/filters/LSB_CountingBloomFilter.hh	/^    int m_count;$/;"	m	class:LSB_CountingBloomFilter
m_count_bits	./mem/ruby/filters/LSB_CountingBloomFilter.hh	/^    int m_count_bits;$/;"	m	class:LSB_CountingBloomFilter
m_creation_time	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    const Cycles m_creation_time;$/;"	m	class:flit
m_credit_count	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.hh	/^    int m_credit_count;$/;"	m	class:OutVcState_d
m_credit_count	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    int m_credit_count;$/;"	m	class:VirtualChannel_d
m_credit_link	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    CreditLink_d *m_credit_link;$/;"	m	class:InputUnit_d
m_credit_link	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    CreditLink_d *m_credit_link;$/;"	m	class:NetworkInterface_d
m_credit_link	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.hh	/^    CreditLink_d *m_credit_link;$/;"	m	class:OutputUnit_d
m_credit_links	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.hh	/^    CreditLink_d* m_credit_links[2];$/;"	m	class:GarnetExtLink_d
m_credit_links	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.hh	/^    CreditLink_d* m_credit_links[2];$/;"	m	class:GarnetIntLink_d
m_creditlinks	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.hh	/^    std::vector<CreditLink_d *> m_creditlinks; \/\/ All links in net$/;"	m	class:GarnetNetwork_d
m_crossbar_activity	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    Stats::Scalar m_crossbar_activity;$/;"	m	class:Router_d
m_crossbar_activity	./mem/ruby/network/garnet/fixed-pipeline/Switch_d.hh	/^    double m_crossbar_activity;$/;"	m	class:Switch_d
m_cur_in_port	./mem/ruby/slicc_interface/AbstractController.hh	/^    unsigned int m_cur_in_port;$/;"	m	class:AbstractController
m_dat	./kern/tru64/mbuf.hh	96;"	d
m_data	./kern/tru64/mbuf.hh	88;"	d
m_data	./mem/ruby/common/DataBlock.hh	/^    uint8_t *m_data;$/;"	m	class:DataBlock
m_data	./mem/ruby/common/Histogram.hh	/^    std::vector<uint64_t> m_data;$/;"	m	class:Histogram
m_data	./mem/ruby/common/SubBlock.hh	/^    std::vector<uint8_t> m_data;$/;"	m	class:SubBlock
m_data	./mem/ruby/system/CacheRecorder.hh	/^    uint8_t m_data[0];$/;"	m	class:TraceRecord
m_dataAccessTrace	./mem/ruby/profiler/AddressProfiler.hh	/^    AddressMap m_dataAccessTrace;$/;"	m	class:AddressProfiler
m_dataCache_ptr	./mem/ruby/system/Sequencer.hh	/^    CacheMemory* m_dataCache_ptr;$/;"	m	class:Sequencer
m_data_address	./mem/ruby/system/CacheRecorder.hh	/^    Addr m_data_address;$/;"	m	class:TraceRecord
m_data_block_mask	./mem/ruby/system/DMASequencer.hh	/^    uint64_t m_data_block_mask;$/;"	m	class:DMASequencer
m_data_cache_hit_latency	./mem/ruby/system/Sequencer.hh	/^    Cycles m_data_cache_hit_latency;$/;"	m	class:Sequencer
m_data_msg_size	./mem/ruby/network/Network.cc	/^uint32_t Network::m_data_msg_size;$/;"	m	class:Network	file:
m_data_msg_size	./mem/ruby/network/Network.hh	/^    static uint32_t m_data_msg_size;$/;"	m	class:Network
m_deadlock_check_scheduled	./mem/ruby/system/Sequencer.hh	/^    bool m_deadlock_check_scheduled;$/;"	m	class:Sequencer
m_deadlock_threshold	./cpu/testers/rubytest/RubyTester.hh	/^    int m_deadlock_threshold;$/;"	m	class:RubyTester
m_deadlock_threshold	./mem/ruby/system/Sequencer.hh	/^    Cycles m_deadlock_threshold;$/;"	m	class:Sequencer
m_delayHistogram	./mem/ruby/slicc_interface/AbstractController.hh	/^    Stats::Histogram m_delayHistogram;$/;"	m	class:AbstractController
m_delayVCHistogram	./mem/ruby/slicc_interface/AbstractController.hh	/^    std::vector<Stats::Histogram *> m_delayVCHistogram;$/;"	m	class:AbstractController
m_demand_accesses	./mem/ruby/structures/CacheMemory.hh	/^    Stats::Formula m_demand_accesses;$/;"	m	class:CacheMemory
m_demand_hits	./mem/ruby/structures/CacheMemory.hh	/^    Stats::Scalar m_demand_hits;$/;"	m	class:CacheMemory
m_demand_misses	./mem/ruby/structures/CacheMemory.hh	/^    Stats::Scalar m_demand_misses;$/;"	m	class:CacheMemory
m_description	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    std::string m_description;$/;"	m	class:MemCntrlProfiler
m_description	./mem/ruby/structures/RubyMemoryControl.hh	/^    std::string m_description;$/;"	m	class:RubyMemoryControl
m_description	./mem/ruby/structures/WireBuffer.hh	/^    std::string m_description;$/;"	m	class:WireBuffer
m_dimm_bit_0	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_dimm_bit_0;$/;"	m	class:RubyMemoryControl
m_dimms_per_channel	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    int m_dimms_per_channel;$/;"	m	class:MemCntrlProfiler
m_dimms_per_channel	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_dimms_per_channel;$/;"	m	class:RubyMemoryControl
m_directed_tester	./cpu/testers/directedtest/DirectedGenerator.hh	/^    RubyDirectedTester* m_directed_tester;$/;"	m	class:DirectedGenerator
m_effective_assoc	./mem/ruby/structures/PseudoLRUPolicy.hh	/^    unsigned int m_effective_assoc;    \/** nearest (to ceiling) power of 2 *\/$/;"	m	class:PseudoLRUPolicy
m_enable_fault_model	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    bool m_enable_fault_model;$/;"	m	class:BaseGarnetNetwork
m_endpoint_bandwidth	./mem/ruby/network/simple/SimpleNetwork.hh	/^    const int m_endpoint_bandwidth;$/;"	m	class:SimpleNetwork
m_endpoint_bandwidth	./mem/ruby/network/simple/Throttle.hh	/^    int m_endpoint_bandwidth;$/;"	m	class:Throttle
m_enqueue_time	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    Cycles m_enqueue_time;$/;"	m	class:VirtualChannel_d
m_enqueue_time	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    Cycles m_enqueue_time, m_time;$/;"	m	class:flit_d
m_entries	./mem/ruby/structures/DirectoryMemory.hh	/^    AbstractEntry **m_entries;$/;"	m	class:DirectoryMemory
m_entry	./mem/ruby/structures/PerfectCacheMemory.hh	/^    ENTRY m_entry;$/;"	m	struct:PerfectCacheLineState
m_event	./mem/ruby/structures/RubyMemoryControl.hh	/^    MemCntrlEvent m_event;$/;"	m	class:RubyMemoryControl
m_ext	./kern/tru64/mbuf.hh	/^struct m_ext {$/;"	s	namespace:tru64
m_ext	./kern/tru64/mbuf.hh	94;"	d
m_ext_link_vector	./mem/ruby/network/Topology.hh	/^    std::vector<BasicExtLink*> m_ext_link_vector;$/;"	m	class:Topology
m_ext_node	./mem/ruby/network/BasicLink.hh	/^    AbstractController* m_ext_node;$/;"	m	class:BasicExtLink
m_filter	./mem/ruby/filters/BlockBloomFilter.hh	/^    std::vector<int> m_filter;$/;"	m	class:BlockBloomFilter
m_filter	./mem/ruby/filters/BulkBloomFilter.hh	/^    std::vector<int> m_filter;$/;"	m	class:BulkBloomFilter
m_filter	./mem/ruby/filters/H3BloomFilter.hh	/^    std::vector<int> m_filter;$/;"	m	class:H3BloomFilter
m_filter	./mem/ruby/filters/LSB_CountingBloomFilter.hh	/^    std::vector<int> m_filter;$/;"	m	class:LSB_CountingBloomFilter
m_filter	./mem/ruby/filters/MultiBitSelBloomFilter.hh	/^    std::vector<int> m_filter;$/;"	m	class:MultiBitSelBloomFilter
m_filter	./mem/ruby/filters/MultiGrainBloomFilter.hh	/^    std::vector<int> m_filter;$/;"	m	class:MultiGrainBloomFilter
m_filter	./mem/ruby/filters/NonCountingBloomFilter.hh	/^    std::vector<int> m_filter;$/;"	m	class:NonCountingBloomFilter
m_filter_size	./mem/ruby/filters/BlockBloomFilter.hh	/^    int m_filter_size;$/;"	m	class:BlockBloomFilter
m_filter_size	./mem/ruby/filters/BulkBloomFilter.hh	/^    int m_filter_size;$/;"	m	class:BulkBloomFilter
m_filter_size	./mem/ruby/filters/H3BloomFilter.hh	/^    int m_filter_size;$/;"	m	class:H3BloomFilter
m_filter_size	./mem/ruby/filters/LSB_CountingBloomFilter.hh	/^    int m_filter_size;$/;"	m	class:LSB_CountingBloomFilter
m_filter_size	./mem/ruby/filters/MultiBitSelBloomFilter.hh	/^    int m_filter_size;$/;"	m	class:MultiBitSelBloomFilter
m_filter_size	./mem/ruby/filters/MultiGrainBloomFilter.hh	/^    int m_filter_size;$/;"	m	class:MultiGrainBloomFilter
m_filter_size	./mem/ruby/filters/NonCountingBloomFilter.hh	/^    int m_filter_size;$/;"	m	class:NonCountingBloomFilter
m_filter_size_bits	./mem/ruby/filters/BlockBloomFilter.hh	/^    int m_filter_size_bits;$/;"	m	class:BlockBloomFilter
m_filter_size_bits	./mem/ruby/filters/BulkBloomFilter.hh	/^    int m_filter_size_bits;$/;"	m	class:BulkBloomFilter
m_filter_size_bits	./mem/ruby/filters/H3BloomFilter.hh	/^    int m_filter_size_bits;$/;"	m	class:H3BloomFilter
m_filter_size_bits	./mem/ruby/filters/LSB_CountingBloomFilter.hh	/^    int m_filter_size_bits;$/;"	m	class:LSB_CountingBloomFilter
m_filter_size_bits	./mem/ruby/filters/MultiBitSelBloomFilter.hh	/^    int m_filter_size_bits;$/;"	m	class:MultiBitSelBloomFilter
m_filter_size_bits	./mem/ruby/filters/MultiGrainBloomFilter.hh	/^    int m_filter_size_bits;$/;"	m	class:MultiGrainBloomFilter
m_filter_size_bits	./mem/ruby/filters/NonCountingBloomFilter.hh	/^    int m_filter_size_bits;$/;"	m	class:NonCountingBloomFilter
m_first_store	./mem/ruby/profiler/StoreTrace.hh	/^    Tick m_first_store;$/;"	m	class:StoreTrace
m_flags	./kern/tru64/mbuf.hh	90;"	d
m_flits_injected	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    Stats::Vector m_flits_injected;$/;"	m	class:BaseGarnetNetwork
m_flits_received	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    Stats::Vector m_flits_received;$/;"	m	class:BaseGarnetNetwork
m_fromNetQueues	./mem/ruby/network/Network.hh	/^    std::vector<std::vector<MessageBuffer*> > m_fromNetQueues;$/;"	m	class:Network
m_fully_busy_cycles	./mem/ruby/slicc_interface/AbstractController.hh	/^    Stats::Scalar m_fully_busy_cycles;$/;"	m	class:AbstractController
m_gets_sharing_histogram	./mem/ruby/profiler/AddressProfiler.hh	/^    Histogram m_gets_sharing_histogram;$/;"	m	class:AddressProfiler
m_getx_sharing_histogram	./mem/ruby/profiler/AddressProfiler.hh	/^    Histogram m_getx_sharing_histogram;$/;"	m	class:AddressProfiler
m_global_arbiter_activity	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.hh	/^    double m_local_arbiter_activity, m_global_arbiter_activity;$/;"	m	class:SWallocator_d
m_global_arbiter_activity	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.hh	/^    std::vector<double> m_global_arbiter_activity;$/;"	m	class:VCallocator_d
m_hdr	./kern/tru64/mbuf.hh	/^    struct      m_hdr m_hdr;$/;"	m	struct:tru64::mbuf	typeref:struct:tru64::mbuf::m_hdr
m_hdr	./kern/tru64/mbuf.hh	/^struct m_hdr {$/;"	s	namespace:tru64
m_histogram_ptr	./mem/ruby/profiler/AccessTraceForAddress.hh	/^    Histogram* m_histogram_ptr;$/;"	m	class:AccessTraceForAddress
m_hitLatencyHist	./mem/ruby/profiler/Profiler.hh	/^    Stats::Histogram m_hitLatencyHist;$/;"	m	class:Profiler
m_hitLatencyHist	./mem/ruby/system/Sequencer.hh	/^    Stats::Histogram m_hitLatencyHist;$/;"	m	class:Sequencer
m_hitMachLatencyHist	./mem/ruby/profiler/Profiler.hh	/^    std::vector<Stats::Histogram *> m_hitMachLatencyHist;$/;"	m	class:Profiler
m_hitMachLatencyHist	./mem/ruby/system/Sequencer.hh	/^    std::vector<Stats::Histogram *> m_hitMachLatencyHist;$/;"	m	class:Sequencer
m_hitTypeLatencyHist	./mem/ruby/profiler/Profiler.hh	/^    std::vector<Stats::Histogram *> m_hitTypeLatencyHist;$/;"	m	class:Profiler
m_hitTypeLatencyHist	./mem/ruby/system/Sequencer.hh	/^    std::vector<Stats::Histogram *> m_hitTypeLatencyHist;$/;"	m	class:Sequencer
m_hitTypeMachLatencyHist	./mem/ruby/profiler/Profiler.hh	/^    std::vector< std::vector<Stats::Histogram *> > m_hitTypeMachLatencyHist;$/;"	m	class:Profiler
m_hitTypeMachLatencyHist	./mem/ruby/system/Sequencer.hh	/^    std::vector< std::vector<Stats::Histogram *> > m_hitTypeMachLatencyHist;$/;"	m	class:Sequencer
m_hot_lines	./mem/ruby/profiler/AddressProfiler.hh	/^    bool m_hot_lines;$/;"	m	class:AddressProfiler
m_hot_lines	./mem/ruby/profiler/Profiler.hh	/^    const bool m_hot_lines;$/;"	m	class:Profiler
m_hw_prefetches	./mem/ruby/structures/CacheMemory.hh	/^    Stats::Scalar m_hw_prefetches;$/;"	m	class:CacheMemory
m_id	./mem/ruby/network/BasicRouter.hh	/^    uint32_t m_id;$/;"	m	class:BasicRouter
m_id	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    int m_id;$/;"	m	class:InputUnit_d
m_id	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    const NodeID M5_CLASS_VAR_USED m_id;$/;"	m	class:NetworkInterface_d
m_id	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.hh	/^    const int m_id;$/;"	m	class:NetworkLink_d
m_id	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.hh	/^    int m_id ;$/;"	m	class:OutVcState_d
m_id	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.hh	/^    int m_id;$/;"	m	class:OutputUnit_d
m_id	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    int m_id;$/;"	m	class:VirtualChannel_d
m_id	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    int m_id;$/;"	m	class:flit_d
m_id	./mem/ruby/network/garnet/flexible-pipeline/InVcState.hh	/^    int m_id;$/;"	m	class:InVcState
m_id	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	/^    NodeID m_id;$/;"	m	class:NetworkInterface
m_id	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	/^    int m_id;$/;"	m	class:NetworkLink
m_id	./mem/ruby/network/garnet/flexible-pipeline/OutVcState.hh	/^    int m_id ;$/;"	m	class:OutVcState
m_id	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    const int m_id;$/;"	m	class:flit
m_idleCount	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_idleCount;          \/\/ watchdog timer for shutting down$/;"	m	class:RubyMemoryControl
m_in	./mem/ruby/network/simple/PerfectSwitch.hh	/^    std::vector<std::vector<MessageBuffer*> > m_in;$/;"	m	class:PerfectSwitch
m_in	./mem/ruby/network/simple/Throttle.hh	/^    std::vector<MessageBuffer*> m_in;$/;"	m	class:Throttle
m_in_link	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    NetworkLink_d *m_in_link;$/;"	m	class:InputUnit_d
m_in_link	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    std::vector<NetworkLink *> m_in_link;$/;"	m	class:Router
m_in_port	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.hh	/^    int m_in_port;$/;"	m	class:OutVcState_d
m_in_port	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	/^    int m_in_port, m_out_port;$/;"	m	class:NetworkLink
m_in_ports	./mem/ruby/slicc_interface/AbstractController.hh	/^    unsigned int m_in_ports;$/;"	m	class:AbstractController
m_in_vc	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.hh	/^    int m_in_vc;$/;"	m	class:OutVcState_d
m_in_vc_state	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    std::vector<std::vector<InVcState *> > m_in_vc_state;$/;"	m	class:Router
m_initiatingNode	./cpu/testers/rubytest/Check.hh	/^    NodeID m_initiatingNode;$/;"	m	class:Check
m_input_buffer	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    flitBuffer_d *m_input_buffer;$/;"	m	class:VirtualChannel_d
m_input_link_id	./mem/ruby/network/MessageBuffer.hh	/^    int m_input_link_id;$/;"	m	class:MessageBuffer
m_input_queue	./mem/ruby/structures/RubyMemoryControl.hh	/^    std::list<MemoryNode *> m_input_queue;$/;"	m	class:RubyMemoryControl
m_input_unit	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    std::vector<InputUnit_d *> m_input_unit;$/;"	m	class:Router_d
m_input_unit	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.hh	/^    std::vector<InputUnit_d *> m_input_unit;$/;"	m	class:SWallocator_d
m_input_unit	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.hh	/^    std::vector<InputUnit_d *> m_input_unit;$/;"	m	class:VCallocator_d
m_instCache_ptr	./mem/ruby/system/Sequencer.hh	/^    CacheMemory* m_instCache_ptr;$/;"	m	class:Sequencer
m_inst_cache_hit_latency	./mem/ruby/system/Sequencer.hh	/^    Cycles m_inst_cache_hit_latency;$/;"	m	class:Sequencer
m_inst_profiler_ptr	./mem/ruby/profiler/Profiler.hh	/^    AddressProfiler* m_inst_profiler_ptr;$/;"	m	class:Profiler
m_int_link_buffers	./mem/ruby/network/simple/SimpleNetwork.hh	/^    std::vector<MessageBuffer*> m_int_link_buffers;$/;"	m	class:SimpleNetwork
m_int_link_vector	./mem/ruby/network/Topology.hh	/^    std::vector<BasicIntLink*> m_int_link_vector;$/;"	m	class:Topology
m_int_node	./mem/ruby/network/BasicLink.hh	/^    BasicRouter* m_int_node;$/;"	m	class:BasicExtLink
m_is_blocking	./mem/ruby/slicc_interface/AbstractController.hh	/^    bool m_is_blocking;$/;"	m	class:AbstractController
m_is_busy	./mem/ruby/system/DMASequencer.hh	/^    bool m_is_busy;$/;"	m	class:DMASequencer
m_is_dirty_wb	./mem/ruby/structures/MemoryNode.hh	/^    bool m_is_dirty_wb;$/;"	m	class:MemoryNode
m_is_free_signal	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    bool m_is_free_signal;$/;"	m	class:flit_d
m_is_instruction_only_cache	./mem/ruby/structures/CacheMemory.hh	/^    bool m_is_instruction_only_cache;$/;"	m	class:CacheMemory
m_is_mem_read	./mem/ruby/structures/MemoryNode.hh	/^    bool m_is_mem_read;$/;"	m	class:MemoryNode
m_is_valid	./mem/ruby/structures/Prefetcher.hh	/^        bool m_is_valid;$/;"	m	class:PrefetchEntry
m_largest_bin	./mem/ruby/common/Histogram.hh	/^    uint32_t m_largest_bin;      \/\/ the largest bin used$/;"	m	class:Histogram
m_last_arrival_time	./mem/ruby/network/MessageBuffer.hh	/^    Tick m_last_arrival_time;$/;"	m	class:MessageBuffer
m_last_progress_vector	./cpu/testers/rubytest/RubyTester.hh	/^    std::vector<Cycles> m_last_progress_vector;$/;"	m	class:RubyTester
m_last_ref_ptr	./mem/ruby/structures/AbstractReplacementPolicy.hh	/^    Tick **m_last_ref_ptr;         \/** timestamp of last reference *\/$/;"	m	class:AbstractReplacementPolicy
m_last_store	./mem/ruby/profiler/StoreTrace.hh	/^    Tick m_last_store;$/;"	m	class:StoreTrace
m_last_writer	./mem/ruby/profiler/StoreTrace.hh	/^    NodeID m_last_writer;$/;"	m	class:StoreTrace
m_latency	./mem/ruby/network/BasicLink.hh	/^    Cycles m_latency;$/;"	m	class:BasicLink
m_latency	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.hh	/^    const Cycles m_latency;$/;"	m	class:NetworkLink_d
m_latency	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	/^    Cycles m_latency;$/;"	m	class:NetworkLink
m_latencyHist	./mem/ruby/profiler/Profiler.hh	/^    Stats::Histogram m_latencyHist;$/;"	m	class:Profiler
m_latencyHist	./mem/ruby/system/Sequencer.hh	/^    Stats::Histogram m_latencyHist;$/;"	m	class:Sequencer
m_len	./kern/tru64/mbuf.hh	87;"	d
m_link	./mem/ruby/network/simple/PerfectSwitch.hh	/^    int m_link;$/;"	m	struct:LinkOrder
m_link_bandwidth_multiplier	./mem/ruby/network/simple/Throttle.hh	/^    int m_link_bandwidth_multiplier;$/;"	m	class:Throttle
m_link_latency	./mem/ruby/network/simple/Throttle.hh	/^    Cycles m_link_latency;$/;"	m	class:Throttle
m_link_map	./mem/ruby/network/Topology.hh	/^    LinkMap m_link_map;$/;"	m	class:Topology
m_link_order	./mem/ruby/network/simple/PerfectSwitch.hh	/^    std::vector<LinkOrder> m_link_order;$/;"	m	class:PerfectSwitch
m_link_utilization	./mem/ruby/network/simple/Throttle.hh	/^    Stats::Scalar m_link_utilization;$/;"	m	class:Throttle
m_link_utilization_proxy	./mem/ruby/network/simple/Throttle.hh	/^    double m_link_utilization_proxy;$/;"	m	class:Throttle
m_link_utilized	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.hh	/^    unsigned int m_link_utilized;$/;"	m	class:NetworkLink_d
m_link_utilized	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	/^    unsigned int m_link_utilized;$/;"	m	class:NetworkLink
m_link_weights	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    std::vector<int> m_link_weights;$/;"	m	class:Router
m_links	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.hh	/^    std::vector<NetworkLink_d *> m_links; \/\/ All links in the network$/;"	m	class:GarnetNetwork_d
m_links	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.hh	/^    std::vector<NetworkLink *> m_links; \/\/ All links in network$/;"	m	class:GarnetNetwork
m_load_waiting_on_load	./mem/ruby/system/Sequencer.hh	/^    Stats::Scalar m_load_waiting_on_load;$/;"	m	class:Sequencer
m_load_waiting_on_store	./mem/ruby/system/Sequencer.hh	/^    Stats::Scalar m_load_waiting_on_store;$/;"	m	class:Sequencer
m_loads	./mem/ruby/profiler/AccessTraceForAddress.hh	/^    uint64_t m_loads;$/;"	m	class:AccessTraceForAddress
m_local_arbiter_activity	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.hh	/^    double m_local_arbiter_activity, m_global_arbiter_activity;$/;"	m	class:SWallocator_d
m_local_arbiter_activity	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.hh	/^    std::vector<double> m_local_arbiter_activity;$/;"	m	class:VCallocator_d
m_locked	./mem/ruby/slicc_interface/AbstractCacheEntry.hh	/^    int m_locked;$/;"	m	class:AbstractCacheEntry
m_lookup_map	./cpu/testers/rubytest/CheckTable.hh	/^    std::unordered_map<Addr, Check*> m_lookup_map;$/;"	m	class:CheckTable
m_machineID	./mem/ruby/slicc_interface/AbstractController.hh	/^    MachineID m_machineID;$/;"	m	class:AbstractController
m_macroBlockAccessTrace	./mem/ruby/profiler/AddressProfiler.hh	/^    AddressMap m_macroBlockAccessTrace;$/;"	m	class:AddressProfiler
m_mandatory_q_ptr	./mem/ruby/system/DMASequencer.hh	/^    MessageBuffer* m_mandatory_q_ptr;$/;"	m	class:DMASequencer
m_mandatory_q_ptr	./mem/ruby/system/RubyPort.hh	/^    MessageBuffer* m_mandatory_q_ptr;$/;"	m	class:RubyPort
m_map	./mem/ruby/structures/PerfectCacheMemory.hh	/^    std::unordered_map<Addr, PerfectCacheLineState<ENTRY> > m_map;$/;"	m	class:PerfectCacheMemory
m_map	./mem/ruby/structures/PersistentTable.hh	/^    AddressMap m_map;$/;"	m	class:PersistentTable
m_map	./mem/ruby/structures/TBETable.hh	/^    std::unordered_map<Addr, ENTRY> m_map;$/;"	m	class:TBETable
m_map	./mem/ruby/structures/TimerTable.hh	/^    AddressMap m_map;$/;"	m	class:TimerTable
m_marked	./mem/ruby/structures/PersistentTable.hh	/^    NetDest m_marked;$/;"	m	class:PersistentTableEntry
m_masterId	./mem/ruby/slicc_interface/AbstractController.hh	/^    const MasterID m_masterId;$/;"	m	class:AbstractController
m_max	./mem/ruby/common/Histogram.hh	/^    int64_t m_max;          \/\/ the maximum value seen so far$/;"	m	class:Histogram
m_max_outstanding_requests	./mem/ruby/system/Sequencer.hh	/^    int m_max_outstanding_requests;$/;"	m	class:Sequencer
m_max_size	./mem/ruby/network/MessageBuffer.hh	/^    const unsigned int m_max_size;$/;"	m	class:MessageBuffer
m_memArbWait	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    Stats::Scalar m_memArbWait;$/;"	m	class:MemCntrlProfiler
m_memBankBusy	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    Stats::Scalar m_memBankBusy;$/;"	m	class:MemCntrlProfiler
m_memBankCount	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    Stats::Vector m_memBankCount;$/;"	m	class:MemCntrlProfiler
m_memBankQ	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    Stats::Scalar m_memBankQ;$/;"	m	class:MemCntrlProfiler
m_memBusBusy	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    Stats::Scalar m_memBusBusy;$/;"	m	class:MemCntrlProfiler
m_memDataBusBusy	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    Stats::Scalar m_memDataBusBusy;$/;"	m	class:MemCntrlProfiler
m_memInputQ	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    Stats::Scalar m_memInputQ;$/;"	m	class:MemCntrlProfiler
m_memNotOld	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    Stats::Scalar m_memNotOld;$/;"	m	class:MemCntrlProfiler
m_memRandBusy	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    Stats::Scalar m_memRandBusy;$/;"	m	class:MemCntrlProfiler
m_memRead	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    Stats::Scalar m_memRead;$/;"	m	class:MemCntrlProfiler
m_memReadWriteBusy	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    Stats::Scalar m_memReadWriteBusy;$/;"	m	class:MemCntrlProfiler
m_memRefresh	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    Stats::Scalar m_memRefresh;$/;"	m	class:MemCntrlProfiler
m_memReq	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    Stats::Scalar m_memReq;$/;"	m	class:MemCntrlProfiler
m_memTfawBusy	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    Stats::Scalar m_memTfawBusy;$/;"	m	class:MemCntrlProfiler
m_memWaitCycles	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    Stats::Scalar m_memWaitCycles;$/;"	m	class:MemCntrlProfiler
m_memWrite	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    Stats::Scalar m_memWrite;$/;"	m	class:MemCntrlProfiler
m_mem_ctl_latency	./mem/ruby/structures/RubyMemoryControl.hh	/^    Cycles m_mem_ctl_latency;$/;"	m	class:RubyMemoryControl
m_mem_fixed_delay	./mem/ruby/structures/RubyMemoryControl.hh	/^    Cycles m_mem_fixed_delay;$/;"	m	class:RubyMemoryControl
m_mem_random_arbitrate	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_mem_random_arbitrate;$/;"	m	class:RubyMemoryControl
m_memory_size_bits	./mem/ruby/system/RubySystem.cc	/^uint32_t RubySystem::m_memory_size_bits;$/;"	m	class:RubySystem	file:
m_memory_size_bits	./mem/ruby/system/RubySystem.hh	/^    static uint32_t m_memory_size_bits;$/;"	m	class:RubySystem
m_message_queue	./mem/ruby/structures/WireBuffer.hh	/^    std::vector<MsgPtr> m_message_queue;$/;"	m	class:WireBuffer
m_missLatencyHist	./mem/ruby/profiler/Profiler.hh	/^    Stats::Histogram m_missLatencyHist;$/;"	m	class:Profiler
m_missLatencyHist	./mem/ruby/system/Sequencer.hh	/^    Stats::Histogram m_missLatencyHist;$/;"	m	class:Sequencer
m_missMachLatencyHist	./mem/ruby/profiler/Profiler.hh	/^    std::vector<Stats::Histogram *> m_missMachLatencyHist;$/;"	m	class:Profiler
m_missMachLatencyHist	./mem/ruby/system/Sequencer.hh	/^    std::vector<Stats::Histogram *> m_missMachLatencyHist;$/;"	m	class:Sequencer
m_missTypeLatencyHist	./mem/ruby/profiler/Profiler.hh	/^    std::vector<Stats::Histogram *> m_missTypeLatencyHist;$/;"	m	class:Profiler
m_missTypeLatencyHist	./mem/ruby/system/Sequencer.hh	/^    std::vector<Stats::Histogram *> m_missTypeLatencyHist;$/;"	m	class:Sequencer
m_missTypeMachLatencyHist	./mem/ruby/profiler/Profiler.hh	/^    std::vector< std::vector<Stats::Histogram *> > m_missTypeMachLatencyHist;$/;"	m	class:Profiler
m_missTypeMachLatencyHist	./mem/ruby/system/Sequencer.hh	/^    std::vector< std::vector<Stats::Histogram *> > m_missTypeMachLatencyHist;$/;"	m	class:Sequencer
m_msg_bytes	./mem/ruby/network/simple/SimpleNetwork.hh	/^    Stats::Formula m_msg_bytes[MessageSizeType_NUM];$/;"	m	class:SimpleNetwork
m_msg_bytes	./mem/ruby/network/simple/Switch.hh	/^    Stats::Formula m_msg_bytes[MessageSizeType_NUM];$/;"	m	class:Switch
m_msg_bytes	./mem/ruby/network/simple/Throttle.hh	/^    Stats::Formula m_msg_bytes[MessageSizeType_NUM];$/;"	m	class:Throttle
m_msg_counter	./mem/ruby/network/MessageBuffer.hh	/^    uint64_t m_msg_counter;$/;"	m	class:MessageBuffer
m_msg_counter	./mem/ruby/slicc_interface/Message.hh	/^    uint64_t m_msg_counter; \/\/ FIXME, should this be a 64-bit value?$/;"	m	class:Message
m_msg_counter	./mem/ruby/structures/MemoryNode.hh	/^    int m_msg_counter;$/;"	m	class:MemoryNode
m_msg_counter	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_msg_counter;$/;"	m	class:RubyMemoryControl
m_msg_counter	./mem/ruby/structures/WireBuffer.hh	/^    uint64_t m_msg_counter;$/;"	m	class:WireBuffer
m_msg_counts	./mem/ruby/network/simple/SimpleNetwork.hh	/^    Stats::Formula m_msg_counts[MessageSizeType_NUM];$/;"	m	class:SimpleNetwork
m_msg_counts	./mem/ruby/network/simple/Switch.hh	/^    Stats::Formula m_msg_counts[MessageSizeType_NUM];$/;"	m	class:Switch
m_msg_counts	./mem/ruby/network/simple/Throttle.hh	/^    Stats::Vector m_msg_counts[MessageSizeType_NUM];$/;"	m	class:Throttle
m_msg_ptr	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    MsgPtr m_msg_ptr;$/;"	m	class:flit_d
m_msg_ptr	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    MsgPtr m_msg_ptr;$/;"	m	class:flit
m_msgs_this_cycle	./mem/ruby/network/MessageBuffer.hh	/^    unsigned int m_msgs_this_cycle;$/;"	m	class:MessageBuffer
m_nSize	./mem/ruby/common/Set.hh	/^    int m_nSize;$/;"	m	class:Set
m_name	./mem/ruby/structures/DirectoryMemory.hh	/^    const std::string m_name;$/;"	m	class:DirectoryMemory
m_name	./mem/ruby/structures/TimerTable.hh	/^    std::string m_name;$/;"	m	class:TimerTable
m_need_refresh	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_need_refresh;       \/\/ set whenever m_refresh_count goes to zero$/;"	m	class:RubyMemoryControl
m_negative_filter	./mem/ruby/structures/Prefetcher.hh	/^        std::vector<Addr> m_negative_filter;$/;"	m	class:Prefetcher
m_negative_filter_hit	./mem/ruby/structures/Prefetcher.hh	/^        uint32_t *m_negative_filter_hit;$/;"	m	class:Prefetcher
m_negative_filter_index	./mem/ruby/structures/Prefetcher.hh	/^        uint32_t m_negative_filter_index;$/;"	m	class:Prefetcher
m_net_ptr	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    GarnetNetwork_d *m_net_ptr;$/;"	m	class:NetworkInterface_d
m_net_ptr	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	/^    GarnetNetwork *m_net_ptr;$/;"	m	class:NetworkInterface
m_net_ptr	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	/^    GarnetNetwork *m_net_ptr;$/;"	m	class:NetworkLink
m_net_ptr	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    GarnetNetwork *m_net_ptr;$/;"	m	class:Router
m_net_ptr	./mem/ruby/slicc_interface/AbstractController.hh	/^    Network *m_net_ptr;$/;"	m	class:AbstractController
m_network	./mem/ruby/system/RubySystem.hh	/^    Network* m_network;$/;"	m	class:RubySystem
m_network_latency	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    Stats::Vector m_network_latency;$/;"	m	class:BaseGarnetNetwork
m_network_links	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.hh	/^    NetworkLink_d* m_network_links[2];$/;"	m	class:GarnetExtLink_d
m_network_links	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.hh	/^    NetworkLink_d* m_network_links[2];$/;"	m	class:GarnetIntLink_d
m_network_links	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.hh	/^    NetworkLink* m_network_links[2];$/;"	m	class:GarnetExtLink
m_network_links	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.hh	/^    NetworkLink* m_network_links[2];$/;"	m	class:GarnetIntLink
m_network_ptr	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    GarnetNetwork_d *m_network_ptr;$/;"	m	class:Router_d
m_network_ptr	./mem/ruby/network/simple/PerfectSwitch.hh	/^    SimpleNetwork* m_network_ptr;$/;"	m	class:PerfectSwitch
m_network_ptr	./mem/ruby/network/simple/Switch.hh	/^    SimpleNetwork* m_network_ptr;$/;"	m	class:Switch
m_next	./kern/tru64/mbuf.hh	86;"	d
m_next_address	./mem/ruby/structures/TimerTable.hh	/^    mutable Addr m_next_address;  \/\/ Only valid if m_next_valid is true$/;"	m	class:TimerTable
m_next_time	./mem/ruby/structures/TimerTable.hh	/^    mutable Tick m_next_time; \/\/ Only valid if m_next_valid is true$/;"	m	class:TimerTable
m_next_valid	./mem/ruby/structures/TimerTable.hh	/^    mutable bool m_next_valid;$/;"	m	class:TimerTable
m_nextpkt	./kern/tru64/mbuf.hh	91;"	d
m_ni_buffers	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    std::vector<flitBuffer_d *>   m_ni_buffers;$/;"	m	class:NetworkInterface_d
m_ni_buffers	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	/^    std::vector<flitBuffer *>   m_ni_buffers;$/;"	m	class:NetworkInterface
m_ni_credit_link	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    CreditLink_d *m_ni_credit_link;$/;"	m	class:NetworkInterface_d
m_ni_enqueue_time	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    std::vector<Cycles> m_ni_enqueue_time;$/;"	m	class:NetworkInterface_d
m_ni_flit_size	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    int m_ni_flit_size;$/;"	m	class:BaseGarnetNetwork
m_nis	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.hh	/^    std::vector<NetworkInterface_d *> m_nis;   \/\/ All NI's in Network$/;"	m	class:GarnetNetwork_d
m_nis	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.hh	/^    std::vector<NetworkInterface *> m_nis; \/\/ All NI's in Network$/;"	m	class:GarnetNetwork
m_node	./mem/ruby/network/simple/Throttle.hh	/^    NodeID m_node;$/;"	m	class:Throttle
m_node_a	./mem/ruby/network/BasicLink.hh	/^    BasicRouter* m_node_a;$/;"	m	class:BasicIntLink
m_node_b	./mem/ruby/network/BasicLink.hh	/^    BasicRouter* m_node_b;$/;"	m	class:BasicIntLink
m_nodes	./mem/ruby/network/Network.hh	/^    uint32_t m_nodes;$/;"	m	class:Network
m_nodes	./mem/ruby/network/Topology.hh	/^    const uint32_t m_nodes;$/;"	m	class:Topology
m_nonunit_filter	./mem/ruby/structures/Prefetcher.hh	/^        std::vector<Addr> m_nonunit_filter;$/;"	m	class:Prefetcher
m_nonunit_hit	./mem/ruby/structures/Prefetcher.hh	/^        uint32_t *m_nonunit_hit;$/;"	m	class:Prefetcher
m_nonunit_index	./mem/ruby/structures/Prefetcher.hh	/^        uint32_t m_nonunit_index;$/;"	m	class:Prefetcher
m_nonunit_stride	./mem/ruby/structures/Prefetcher.hh	/^        int *m_nonunit_stride;$/;"	m	class:Prefetcher
m_not_avail_count	./mem/ruby/network/MessageBuffer.hh	/^    int m_not_avail_count;  \/\/ count the # of times I didn't have N$/;"	m	class:MessageBuffer
m_num_buffer_reads	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    std::vector<double> m_num_buffer_reads;$/;"	m	class:InputUnit_d
m_num_buffer_writes	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    std::vector<double> m_num_buffer_writes;$/;"	m	class:InputUnit_d
m_num_connected_buffers	./mem/ruby/network/simple/SimpleNetwork.hh	/^    int m_num_connected_buffers;$/;"	m	class:SimpleNetwork
m_num_connected_buffers	./mem/ruby/network/simple/Switch.hh	/^    unsigned m_num_connected_buffers;$/;"	m	class:Switch
m_num_cpus	./cpu/testers/directedtest/DirectedGenerator.hh	/^    int m_num_cpus;$/;"	m	class:DirectedGenerator
m_num_cpus	./cpu/testers/rubytest/RubyTester.hh	/^    int m_num_cpus;$/;"	m	class:RubyTester
m_num_directories	./mem/ruby/structures/DirectoryMemory.cc	/^int DirectoryMemory::m_num_directories = 0;$/;"	m	class:DirectoryMemory	file:
m_num_directories	./mem/ruby/structures/DirectoryMemory.hh	/^    static int m_num_directories;$/;"	m	class:DirectoryMemory
m_num_directories_bits	./mem/ruby/structures/DirectoryMemory.cc	/^int DirectoryMemory::m_num_directories_bits = 0;$/;"	m	class:DirectoryMemory	file:
m_num_directories_bits	./mem/ruby/structures/DirectoryMemory.hh	/^    static int m_num_directories_bits;$/;"	m	class:DirectoryMemory
m_num_entries	./mem/ruby/structures/DirectoryMemory.hh	/^    uint64_t m_num_entries;$/;"	m	class:DirectoryMemory
m_num_hashes	./mem/ruby/filters/H3BloomFilter.hh	/^    int m_num_hashes;$/;"	m	class:H3BloomFilter
m_num_hashes	./mem/ruby/filters/MultiBitSelBloomFilter.hh	/^    int m_num_hashes;$/;"	m	class:MultiBitSelBloomFilter
m_num_inports	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.hh	/^    int m_num_inports, m_num_outports;$/;"	m	class:SWallocator_d
m_num_inports	./mem/ruby/network/garnet/fixed-pipeline/Switch_d.hh	/^    int m_num_inports;$/;"	m	class:Switch_d
m_num_inports	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.hh	/^    int m_num_inports;$/;"	m	class:VCallocator_d
m_num_inst_data_ports	./cpu/testers/rubytest/RubyTester.hh	/^    int m_num_inst_data_ports;$/;"	m	class:RubyTester
m_num_inst_only_ports	./cpu/testers/rubytest/RubyTester.hh	/^    int m_num_inst_only_ports;$/;"	m	class:RubyTester
m_num_levels	./mem/ruby/structures/PseudoLRUPolicy.hh	/^    unsigned int m_num_levels;         \/** number of levels in the tree *\/$/;"	m	class:PseudoLRUPolicy
m_num_nonunit_filters	./mem/ruby/structures/Prefetcher.hh	/^        uint32_t m_num_nonunit_filters;$/;"	m	class:Prefetcher
m_num_of_sequencers	./mem/ruby/profiler/AddressProfiler.hh	/^    int m_num_of_sequencers;$/;"	m	class:AddressProfiler
m_num_outports	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.hh	/^    int m_num_inports, m_num_outports;$/;"	m	class:SWallocator_d
m_num_outports	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.hh	/^    int m_num_outports;$/;"	m	class:VCallocator_d
m_num_readers	./cpu/testers/rubytest/Check.hh	/^    int m_num_readers;$/;"	m	class:Check
m_num_readers	./cpu/testers/rubytest/CheckTable.hh	/^    int m_num_readers;$/;"	m	class:CheckTable
m_num_readers	./cpu/testers/rubytest/RubyTester.hh	/^    int m_num_readers;$/;"	m	class:RubyTester
m_num_sets	./mem/ruby/structures/AbstractReplacementPolicy.hh	/^    unsigned m_num_sets;       \/** total number of sets *\/$/;"	m	class:AbstractReplacementPolicy
m_num_startup_pfs	./mem/ruby/structures/Prefetcher.hh	/^        uint32_t m_num_startup_pfs;$/;"	m	class:Prefetcher
m_num_streams	./mem/ruby/structures/Prefetcher.hh	/^        uint32_t m_num_streams;$/;"	m	class:Prefetcher
m_num_unit_filters	./mem/ruby/structures/Prefetcher.hh	/^        uint32_t m_num_unit_filters;$/;"	m	class:Prefetcher
m_num_vcs	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    int m_num_vcs;$/;"	m	class:InputUnit_d
m_num_vcs	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    const int m_virtual_networks, m_vc_per_vnet, m_num_vcs;$/;"	m	class:NetworkInterface_d
m_num_vcs	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.hh	/^    int m_num_vcs;$/;"	m	class:OutputUnit_d
m_num_vcs	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    int m_virtual_networks, m_num_vcs, m_vc_per_vnet;$/;"	m	class:Router_d
m_num_vcs	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.hh	/^    int m_num_vcs, m_vc_per_vnet;$/;"	m	class:SWallocator_d
m_num_vcs	./mem/ruby/network/garnet/fixed-pipeline/Switch_d.hh	/^    int m_num_vcs;$/;"	m	class:Switch_d
m_num_vcs	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.hh	/^    int m_num_vcs, m_vc_per_vnet;$/;"	m	class:VCallocator_d
m_num_vcs	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	/^    uint32_t m_virtual_networks, m_num_vcs, m_vc_per_vnet;$/;"	m	class:NetworkInterface
m_num_vcs	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    int m_virtual_networks, m_num_vcs, m_vc_per_vnet;$/;"	m	class:Router
m_num_vnets	./mem/ruby/profiler/Profiler.hh	/^    const uint32_t m_num_vnets;$/;"	m	class:Profiler
m_num_writers	./cpu/testers/rubytest/Check.hh	/^    int m_num_writers;$/;"	m	class:Check
m_num_writers	./cpu/testers/rubytest/CheckTable.hh	/^    int m_num_writers;$/;"	m	class:CheckTable
m_num_writers	./cpu/testers/rubytest/RubyTester.hh	/^    int m_num_writers;$/;"	m	class:RubyTester
m_numa_high_bit	./mem/ruby/structures/DirectoryMemory.cc	/^int DirectoryMemory::m_numa_high_bit = 0;$/;"	m	class:DirectoryMemory	file:
m_numa_high_bit	./mem/ruby/structures/DirectoryMemory.hh	/^    static int m_numa_high_bit;$/;"	m	class:DirectoryMemory
m_number_of_TBEs	./mem/ruby/slicc_interface/AbstractController.hh	/^    const int m_number_of_TBEs;$/;"	m	class:AbstractController
m_number_of_TBEs	./mem/ruby/structures/TBETable.hh	/^    int m_number_of_TBEs;$/;"	m	class:TBETable
m_number_of_pipe_stages	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.hh	/^    int m_number_of_pipe_stages;$/;"	m	class:GarnetNetwork
m_number_of_switches	./mem/ruby/network/Topology.hh	/^    const uint32_t m_number_of_switches;$/;"	m	class:Topology
m_offset	./mem/ruby/filters/NonCountingBloomFilter.hh	/^    int m_offset;$/;"	m	class:NonCountingBloomFilter
m_oldRequest	./mem/ruby/structures/RubyMemoryControl.hh	/^    int *m_oldRequest;$/;"	m	class:RubyMemoryControl
m_ordered	./mem/ruby/network/Network.hh	/^    std::vector<bool> m_ordered;$/;"	m	class:Network
m_out	./mem/ruby/network/simple/PerfectSwitch.hh	/^    std::vector<std::vector<MessageBuffer*> > m_out;$/;"	m	class:PerfectSwitch
m_out	./mem/ruby/network/simple/Throttle.hh	/^    std::vector<MessageBuffer*> m_out;$/;"	m	class:Throttle
m_out_buffer	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.hh	/^    flitBuffer_d *m_out_buffer; \/\/ This is for the network link to consume$/;"	m	class:OutputUnit_d
m_out_link	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.hh	/^    NetworkLink_d *m_out_link;$/;"	m	class:OutputUnit_d
m_out_link	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    std::vector<NetworkLink *> m_out_link;$/;"	m	class:Router
m_out_port	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	/^    int m_in_port, m_out_port;$/;"	m	class:NetworkLink
m_out_src_queue	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    std::vector<flitBuffer *> m_out_src_queue;$/;"	m	class:Router
m_out_vc_state	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    std::vector<OutVcState_d *> m_out_vc_state;$/;"	m	class:NetworkInterface_d
m_out_vc_state	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	/^    std::vector<OutVcState *> m_out_vc_state;$/;"	m	class:NetworkInterface
m_out_vc_state	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    std::vector<std::vector<OutVcState *> > m_out_vc_state;$/;"	m	class:Router
m_outport	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    int m_outport;$/;"	m	class:flit_d
m_output_unit	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    std::vector<OutputUnit_d *> m_output_unit;$/;"	m	class:Router_d
m_output_unit	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.hh	/^    std::vector<OutputUnit_d *> m_output_unit;$/;"	m	class:SWallocator_d
m_output_unit	./mem/ruby/network/garnet/fixed-pipeline/Switch_d.hh	/^    std::vector<OutputUnit_d *> m_output_unit;$/;"	m	class:Switch_d
m_output_unit	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.hh	/^    std::vector<OutputUnit_d *> m_output_unit;$/;"	m	class:VCallocator_d
m_output_vc	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    int m_output_vc;$/;"	m	class:VirtualChannel_d
m_output_vc	./mem/ruby/network/garnet/flexible-pipeline/InVcState.hh	/^    int m_output_vc;$/;"	m	class:InVcState
m_outstandReqHist	./mem/ruby/profiler/Profiler.hh	/^    Stats::Histogram m_outstandReqHist;$/;"	m	class:Profiler
m_outstandReqHist	./mem/ruby/system/Sequencer.hh	/^    Stats::Histogram m_outstandReqHist;$/;"	m	class:Sequencer
m_outstanding_count	./mem/ruby/system/Sequencer.hh	/^    int m_outstanding_count;$/;"	m	class:Sequencer
m_outvc_is_req	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.hh	/^    std::vector<std::vector<bool> > m_outvc_is_req;$/;"	m	class:VCallocator_d
m_outvc_req	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.hh	/^    std::vector<std::vector<std::vector<std::vector<bool> > > > m_outvc_req;$/;"	m	class:VCallocator_d
m_outvc_state	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.hh	/^    std::vector<OutVcState_d *> m_outvc_state; \/\/ vc state of downstream router$/;"	m	class:OutputUnit_d
m_page_filter	./mem/ruby/filters/MultiGrainBloomFilter.hh	/^    std::vector<int> m_page_filter;$/;"	m	class:MultiGrainBloomFilter
m_page_filter_size	./mem/ruby/filters/MultiGrainBloomFilter.hh	/^    int m_page_filter_size;$/;"	m	class:MultiGrainBloomFilter
m_page_filter_size_bits	./mem/ruby/filters/MultiGrainBloomFilter.hh	/^    int m_page_filter_size_bits;$/;"	m	class:MultiGrainBloomFilter
m_page_shift	./mem/ruby/structures/Prefetcher.hh	/^        const Addr m_page_shift;$/;"	m	class:Prefetcher
m_par_filter_size	./mem/ruby/filters/H3BloomFilter.hh	/^    int m_par_filter_size;$/;"	m	class:H3BloomFilter
m_par_filter_size	./mem/ruby/filters/MultiBitSelBloomFilter.hh	/^    int m_par_filter_size;$/;"	m	class:MultiBitSelBloomFilter
m_par_filter_size_bits	./mem/ruby/filters/H3BloomFilter.hh	/^    int m_par_filter_size_bits;$/;"	m	class:H3BloomFilter
m_par_filter_size_bits	./mem/ruby/filters/MultiBitSelBloomFilter.hh	/^    int m_par_filter_size_bits;$/;"	m	class:MultiBitSelBloomFilter
m_pc	./cpu/testers/rubytest/Check.hh	/^    Addr m_pc;$/;"	m	class:Check
m_pc_address	./mem/ruby/system/CacheRecorder.hh	/^    Addr m_pc_address;$/;"	m	class:TraceRecord
m_pending_message_count	./mem/ruby/network/simple/PerfectSwitch.hh	/^    std::vector<int> m_pending_message_count;$/;"	m	class:PerfectSwitch
m_percent_writes	./cpu/testers/directedtest/SeriesRequestGenerator.hh	/^    uint32_t m_percent_writes;$/;"	m	class:SeriesRequestGenerator
m_perfect_switch	./mem/ruby/network/simple/Switch.hh	/^    PerfectSwitch* m_perfect_switch;$/;"	m	class:Switch
m_permission	./mem/ruby/structures/PerfectCacheMemory.hh	/^    AccessPermission m_permission;$/;"	m	struct:PerfectCacheLineState
m_phys_mem	./mem/ruby/system/RubySystem.hh	/^    SimpleMemory *m_phys_mem;$/;"	m	class:RubySystem
m_pktdat	./kern/tru64/mbuf.hh	95;"	d
m_pkthdr	./kern/tru64/mbuf.hh	93;"	d
m_port_buffers	./mem/ruby/network/simple/Switch.hh	/^    std::vector<MessageBuffer*> m_port_buffers;$/;"	m	class:Switch
m_port_req	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.hh	/^    std::vector<std::vector<bool> > m_port_req;$/;"	m	class:SWallocator_d
m_prefetch_cross_pages	./mem/ruby/structures/Prefetcher.hh	/^        bool m_prefetch_cross_pages;$/;"	m	class:Prefetcher
m_prefetches	./mem/ruby/structures/CacheMemory.hh	/^    Stats::Formula m_prefetches;$/;"	m	class:CacheMemory
m_prio_heap	./mem/ruby/network/MessageBuffer.hh	/^    std::vector<MsgPtr> m_prio_heap;$/;"	m	class:MessageBuffer
m_priority_rank	./mem/ruby/network/MessageBuffer.hh	/^    int m_priority_rank;$/;"	m	class:MessageBuffer
m_profiler	./mem/ruby/profiler/AddressProfiler.hh	/^    Profiler *m_profiler;$/;"	m	class:AddressProfiler
m_profiler	./mem/ruby/system/RubySystem.hh	/^    Profiler* m_profiler;$/;"	m	class:RubySystem
m_profiler_ptr	./mem/ruby/structures/RubyMemoryControl.hh	/^    MemCntrlProfiler *m_profiler_ptr;$/;"	m	class:RubyMemoryControl
m_programCounterAccessTrace	./mem/ruby/profiler/AddressProfiler.hh	/^    AddressMap m_programCounterAccessTrace;$/;"	m	class:AddressProfiler
m_queueing_latency	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    Stats::Vector m_queueing_latency;$/;"	m	class:BaseGarnetNetwork
m_randomization	./mem/ruby/network/MessageBuffer.hh	/^    const bool m_randomization;$/;"	m	class:MessageBuffer
m_randomization	./mem/ruby/system/RubySystem.hh	/^    static bool m_randomization;$/;"	m	class:RubySystem
m_rank_bit_0	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_rank_bit_0;$/;"	m	class:RubyMemoryControl
m_rank_rank_delay	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_rank_rank_delay;$/;"	m	class:RubyMemoryControl
m_ranks_per_dimm	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    int m_ranks_per_dimm;$/;"	m	class:MemCntrlProfiler
m_ranks_per_dimm	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_ranks_per_dimm;$/;"	m	class:RubyMemoryControl
m_readRequestTable	./mem/ruby/system/Sequencer.hh	/^    RequestTable m_readRequestTable;$/;"	m	class:Sequencer
m_read_write_delay	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_read_write_delay;$/;"	m	class:RubyMemoryControl
m_records	./mem/ruby/system/CacheRecorder.hh	/^    std::vector<TraceRecord*> m_records;$/;"	m	class:CacheRecorder
m_records_flushed	./mem/ruby/system/CacheRecorder.hh	/^    uint64_t m_records_flushed;$/;"	m	class:CacheRecorder
m_records_read	./mem/ruby/system/CacheRecorder.hh	/^    uint64_t m_records_read;$/;"	m	class:CacheRecorder
m_recycle_latency	./mem/ruby/slicc_interface/AbstractController.hh	/^    Cycles m_recycle_latency;$/;"	m	class:AbstractController
m_refresh_bank	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_refresh_bank;       \/\/ which bank to refresh next$/;"	m	class:RubyMemoryControl
m_refresh_count	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_refresh_count;      \/\/ cycles until next refresh$/;"	m	class:RubyMemoryControl
m_refresh_period	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_refresh_period;$/;"	m	class:RubyMemoryControl
m_refresh_period_system	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_refresh_period_system;$/;"	m	class:RubyMemoryControl
m_replacementPolicy_ptr	./mem/ruby/structures/CacheMemory.hh	/^    AbstractReplacementPolicy *m_replacementPolicy_ptr;$/;"	m	class:CacheMemory
m_request_to_write	./mem/ruby/structures/PersistentTable.hh	/^    NetDest m_request_to_write;$/;"	m	class:PersistentTableEntry
m_requests_completed	./cpu/testers/directedtest/RubyDirectedTester.hh	/^    uint64_t m_requests_completed;$/;"	m	class:RubyDirectedTester
m_requests_to_complete	./cpu/testers/directedtest/RubyDirectedTester.hh	/^    uint64_t m_requests_to_complete;$/;"	m	class:RubyDirectedTester
m_resource_stalls	./mem/ruby/structures/CacheMemory.hh	/^    bool m_resource_stalls;$/;"	m	class:CacheMemory
m_response_queue	./mem/ruby/structures/RubyMemoryControl.hh	/^    std::list<MemoryNode *> m_response_queue;$/;"	m	class:RubyMemoryControl
m_retryProfileHisto	./mem/ruby/profiler/AddressProfiler.hh	/^    Histogram m_retryProfileHisto;$/;"	m	class:AddressProfiler
m_retryProfileHistoRead	./mem/ruby/profiler/AddressProfiler.hh	/^    Histogram m_retryProfileHistoRead;$/;"	m	class:AddressProfiler
m_retryProfileHistoWrite	./mem/ruby/profiler/AddressProfiler.hh	/^    Histogram m_retryProfileHistoWrite;$/;"	m	class:AddressProfiler
m_retryProfileMap	./mem/ruby/profiler/AddressProfiler.hh	/^    AddressMap m_retryProfileMap;$/;"	m	class:AddressProfiler
m_roundRobin	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_roundRobin;         \/\/ which bank queue was last granted$/;"	m	class:RubyMemoryControl
m_round_robin_inport	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.hh	/^    std::vector<int> m_round_robin_inport;$/;"	m	class:SWallocator_d
m_round_robin_inport	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    int m_round_robin_inport, m_round_robin_start; \/\/ for vc arbitration$/;"	m	class:Router
m_round_robin_invc	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.hh	/^    std::vector<std::vector<int> > m_round_robin_invc;$/;"	m	class:VCallocator_d
m_round_robin_invc	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    std::vector<int> m_round_robin_invc; \/\/ For vc arbitration of each outport$/;"	m	class:Router
m_round_robin_outport	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.hh	/^    std::vector<int> m_round_robin_outport;$/;"	m	class:SWallocator_d
m_round_robin_outvc	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.hh	/^    std::vector<std::vector<std::pair<int, int> > > m_round_robin_outvc;$/;"	m	class:VCallocator_d
m_round_robin_start	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    int m_round_robin_inport, m_round_robin_start; \/\/ for vc arbitration$/;"	m	class:Router
m_round_robin_start	./mem/ruby/network/simple/PerfectSwitch.hh	/^    int m_round_robin_start;$/;"	m	class:PerfectSwitch
m_route	./mem/ruby/network/garnet/flexible-pipeline/InVcState.hh	/^    int m_route;$/;"	m	class:InVcState
m_router	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    Router_d *m_router;$/;"	m	class:InputUnit_d
m_router	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.hh	/^    Router_d *m_router;$/;"	m	class:OutputUnit_d
m_router	./mem/ruby/network/garnet/fixed-pipeline/RoutingUnit_d.hh	/^    Router_d *m_router;$/;"	m	class:RoutingUnit_d
m_router	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.hh	/^    Router_d *m_router;$/;"	m	class:SWallocator_d
m_router	./mem/ruby/network/garnet/fixed-pipeline/Switch_d.hh	/^    Router_d *m_router;$/;"	m	class:Switch_d
m_router	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.hh	/^    Router_d *m_router;$/;"	m	class:VCallocator_d
m_router	./mem/ruby/network/garnet/flexible-pipeline/VCarbiter.hh	/^    Router *m_router;$/;"	m	class:VCarbiter
m_router_buffers	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    std::vector<std::vector<flitBuffer *> > m_router_buffers;$/;"	m	class:Router
m_routers	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.hh	/^    std::vector<Router_d *> m_routers;   \/\/ All Routers in Network$/;"	m	class:GarnetNetwork_d
m_routers	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.hh	/^    std::vector<Router *> m_routers;   \/\/ All Routers in Network$/;"	m	class:GarnetNetwork
m_routing_table	./mem/ruby/network/garnet/fixed-pipeline/RoutingUnit_d.hh	/^    std::vector<NetDest> m_routing_table;$/;"	m	class:RoutingUnit_d
m_routing_table	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    std::vector<NetDest> m_routing_table;$/;"	m	class:Router
m_routing_table	./mem/ruby/network/simple/PerfectSwitch.hh	/^    std::vector<NetDest> m_routing_table;$/;"	m	class:PerfectSwitch
m_routing_unit	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    RoutingUnit_d *m_routing_unit;$/;"	m	class:Router_d
m_ruby_system	./mem/ruby/network/simple/Throttle.hh	/^    RubySystem *m_ruby_system;$/;"	m	class:Throttle
m_ruby_system	./mem/ruby/profiler/Profiler.hh	/^    RubySystem *m_ruby_system;$/;"	m	class:Profiler
m_ruby_system	./mem/ruby/structures/BankedArray.hh	/^    RubySystem *m_ruby_system;$/;"	m	class:BankedArray
m_ruby_system	./mem/ruby/system/DMASequencer.hh	/^        RubySystem* m_ruby_system;$/;"	m	class:DMASequencer::MemSlavePort
m_ruby_system	./mem/ruby/system/DMASequencer.hh	/^    RubySystem *m_ruby_system;$/;"	m	class:DMASequencer
m_ruby_system	./mem/ruby/system/RubyPort.hh	/^    RubySystem *m_ruby_system;$/;"	m	class:RubyPort
m_ruby_system	./mem/ruby/system/RubySystem.hh	/^        RubySystem* m_ruby_system;$/;"	m	class:RubySystem::RubyEvent
m_ruby_system	./mem/ruby/system/RubySystem.hh	/^    RubySystem *m_ruby_system;$/;"	m	class:RubyStatsCallback
m_scheduled_wakeups	./mem/ruby/common/Consumer.hh	/^    std::set<Tick> m_scheduled_wakeups;$/;"	m	class:Consumer
m_sector_bits	./mem/ruby/filters/BulkBloomFilter.hh	/^    int m_sector_bits;$/;"	m	class:BulkBloomFilter
m_seq_map	./mem/ruby/system/CacheRecorder.hh	/^    std::vector<Sequencer*> m_seq_map;$/;"	m	class:CacheRecorder
m_sequencer_ptr	./mem/ruby/system/Sequencer.hh	/^        Sequencer *m_sequencer_ptr;$/;"	m	class:Sequencer::SequencerWakeupEvent
m_set_index	./mem/ruby/slicc_interface/AbstractCacheEntry.hh	/^    uint32_t m_set_index;$/;"	m	class:AbstractCacheEntry
m_sharing	./mem/ruby/profiler/AccessTraceForAddress.hh	/^    uint64_t m_sharing;$/;"	m	class:AccessTraceForAddress
m_sharing_miss_counter	./mem/ruby/profiler/AddressProfiler.hh	/^    int64_t m_sharing_miss_counter;$/;"	m	class:AddressProfiler
m_size	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    int m_size;$/;"	m	class:flit_d
m_size	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    const int m_size;$/;"	m	class:flit
m_size_at_cycle_start	./mem/ruby/network/MessageBuffer.hh	/^    unsigned int m_size_at_cycle_start;$/;"	m	class:MessageBuffer
m_size_bits	./mem/ruby/structures/DirectoryMemory.hh	/^    uint64_t m_size_bits;$/;"	m	class:DirectoryMemory
m_size_bytes	./mem/ruby/structures/DirectoryMemory.hh	/^    uint64_t m_size_bytes;$/;"	m	class:DirectoryMemory
m_size_last_time_size_checked	./mem/ruby/network/MessageBuffer.hh	/^    unsigned int m_size_last_time_size_checked;$/;"	m	class:MessageBuffer
m_skip_bits	./mem/ruby/filters/MultiBitSelBloomFilter.hh	/^    int m_skip_bits;$/;"	m	class:MultiBitSelBloomFilter
m_stage	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    std::pair<flit_stage, Cycles> m_stage;$/;"	m	class:flit_d
m_stall_msg_map	./mem/ruby/network/MessageBuffer.hh	/^    StallMsgMapType m_stall_msg_map;$/;"	m	class:MessageBuffer
m_stallsPerReq	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    Stats::Formula m_stallsPerReq;$/;"	m	class:MemCntrlProfiler
m_start_cycle	./mem/ruby/system/RubySystem.hh	/^    Cycles m_start_cycle;$/;"	m	class:RubySystem
m_start_index_bit	./mem/ruby/structures/CacheMemory.hh	/^    int m_start_index_bit;$/;"	m	class:CacheMemory
m_starving	./mem/ruby/structures/PersistentTable.hh	/^    NetDest m_starving;$/;"	m	class:PersistentTableEntry
m_status	./cpu/testers/directedtest/InvalidateGenerator.hh	/^    InvalidateGeneratorStatus m_status;$/;"	m	class:InvalidateGenerator
m_status	./cpu/testers/directedtest/SeriesRequestGenerator.hh	/^    SeriesRequestGeneratorStatus m_status;$/;"	m	class:SeriesRequestGenerator
m_status	./cpu/testers/rubytest/Check.hh	/^    TesterStatus m_status;$/;"	m	class:Check
m_store_count	./cpu/testers/rubytest/Check.hh	/^    int m_store_count;$/;"	m	class:Check
m_store_count	./mem/ruby/profiler/StoreTrace.hh	/^    Histogram m_store_count;$/;"	m	class:StoreTrace
m_store_first_to_last	./mem/ruby/profiler/StoreTrace.hh	/^    Histogram m_store_first_to_last;$/;"	m	class:StoreTrace
m_store_first_to_stolen	./mem/ruby/profiler/StoreTrace.hh	/^    Histogram m_store_first_to_stolen;$/;"	m	class:StoreTrace
m_store_last_to_stolen	./mem/ruby/profiler/StoreTrace.hh	/^    Histogram m_store_last_to_stolen;$/;"	m	class:StoreTrace
m_store_waiting_on_load	./mem/ruby/system/Sequencer.hh	/^    Stats::Scalar m_store_waiting_on_load;$/;"	m	class:Sequencer
m_store_waiting_on_store	./mem/ruby/system/Sequencer.hh	/^    Stats::Scalar m_store_waiting_on_store;$/;"	m	class:Sequencer
m_stores	./mem/ruby/profiler/AccessTraceForAddress.hh	/^    uint64_t m_stores;$/;"	m	class:AccessTraceForAddress
m_stores_this_interval	./mem/ruby/profiler/StoreTrace.hh	/^    int m_stores_this_interval;$/;"	m	class:StoreTrace
m_strict_fifo	./mem/ruby/network/MessageBuffer.hh	/^    const bool m_strict_fifo;$/;"	m	class:MessageBuffer
m_stride	./mem/ruby/structures/Prefetcher.hh	/^        int m_stride;$/;"	m	class:PrefetchEntry
m_sumSamples	./mem/ruby/common/Histogram.hh	/^    int64_t m_sumSamples;   \/\/ the sum of all samples$/;"	m	class:Histogram
m_sumSquaredSamples	./mem/ruby/common/Histogram.hh	/^    uint64_t m_sumSquaredSamples; \/\/ the sum of the square of all samples$/;"	m	class:Histogram
m_sw_alloc	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    SWallocator_d *m_sw_alloc;$/;"	m	class:Router_d
m_sw_global_arbiter_activity	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    Stats::Scalar m_sw_global_arbiter_activity;$/;"	m	class:Router_d
m_sw_local_arbiter_activity	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    Stats::Scalar m_sw_local_arbiter_activity;$/;"	m	class:Router_d
m_sw_prefetches	./mem/ruby/structures/CacheMemory.hh	/^    Stats::Scalar m_sw_prefetches;$/;"	m	class:CacheMemory
m_switch	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    Switch_d *m_switch;$/;"	m	class:Router_d
m_switch	./mem/ruby/network/simple/PerfectSwitch.hh	/^    Switch * const m_switch;$/;"	m	class:PerfectSwitch
m_switch	./mem/ruby/network/simple/Throttle.hh	/^    Switch *m_switch;$/;"	m	class:Throttle
m_switch_buffer	./mem/ruby/network/garnet/fixed-pipeline/Switch_d.hh	/^    std::vector<flitBuffer_d *> m_switch_buffer;$/;"	m	class:Switch_d
m_switch_id	./mem/ruby/network/simple/PerfectSwitch.hh	/^    const SwitchID m_switch_id;$/;"	m	class:PerfectSwitch
m_switch_id	./mem/ruby/network/simple/Throttle.hh	/^    const int m_switch_id;$/;"	m	class:Throttle
m_switches	./mem/ruby/network/simple/SimpleNetwork.hh	/^    std::vector<Switch*> m_switches;$/;"	m	class:SimpleNetwork
m_systems_to_warmup	./mem/ruby/system/RubySystem.cc	/^unsigned RubySystem::m_systems_to_warmup = 0;$/;"	m	class:RubySystem	file:
m_systems_to_warmup	./mem/ruby/system/RubySystem.hh	/^    static unsigned m_systems_to_warmup;$/;"	m	class:RubySystem
m_tFaw	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_tFaw;$/;"	m	class:RubyMemoryControl
m_tag_index	./mem/ruby/structures/CacheMemory.hh	/^    std::unordered_map<Addr, int> m_tag_index;$/;"	m	class:CacheMemory
m_temp_filter	./mem/ruby/filters/BulkBloomFilter.hh	/^    std::vector<int> m_temp_filter;$/;"	m	class:BulkBloomFilter
m_tester_ptr	./cpu/testers/rubytest/Check.hh	/^    RubyTester* m_tester_ptr;$/;"	m	class:Check
m_tester_ptr	./cpu/testers/rubytest/CheckTable.hh	/^    RubyTester* m_tester_ptr;$/;"	m	class:CheckTable
m_tfaw_count	./mem/ruby/structures/RubyMemoryControl.hh	/^    int *m_tfaw_count;$/;"	m	class:RubyMemoryControl
m_tfaw_shift	./mem/ruby/structures/RubyMemoryControl.hh	/^    uint64_t *m_tfaw_shift;$/;"	m	class:RubyMemoryControl
m_throttles	./mem/ruby/network/simple/Switch.hh	/^    std::vector<Throttle*> m_throttles;$/;"	m	class:Switch
m_time	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.hh	/^    Cycles m_time;$/;"	m	class:OutVcState_d
m_time	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    Cycles m_enqueue_time, m_time;$/;"	m	class:flit_d
m_time	./mem/ruby/network/garnet/flexible-pipeline/InVcState.hh	/^    Cycles m_time;$/;"	m	class:InVcState
m_time	./mem/ruby/network/garnet/flexible-pipeline/OutVcState.hh	/^    Cycles m_time;$/;"	m	class:OutVcState
m_time	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    Cycles m_time;$/;"	m	class:flit
m_time	./mem/ruby/slicc_interface/Message.hh	/^    const Tick m_time;$/;"	m	class:Message
m_time	./mem/ruby/structures/MemoryNode.hh	/^    Cycles m_time;$/;"	m	class:MemoryNode
m_time	./mem/ruby/system/CacheRecorder.hh	/^    Tick m_time;$/;"	m	class:TraceRecord
m_time_last_time_enqueue	./mem/ruby/network/MessageBuffer.hh	/^    Tick m_time_last_time_enqueue;$/;"	m	class:MessageBuffer
m_time_last_time_pop	./mem/ruby/network/MessageBuffer.hh	/^    Tick m_time_last_time_pop;$/;"	m	class:MessageBuffer
m_time_last_time_size_checked	./mem/ruby/network/MessageBuffer.hh	/^    Tick m_time_last_time_size_checked;$/;"	m	class:MessageBuffer
m_toNetQueues	./mem/ruby/network/Network.hh	/^    std::vector<std::vector<MessageBuffer*> > m_toNetQueues;$/;"	m	class:Network
m_topology_ptr	./mem/ruby/network/Network.hh	/^    Topology* m_topology_ptr;$/;"	m	class:Network
m_total	./mem/ruby/profiler/AccessTraceForAddress.hh	/^    uint64_t m_total;$/;"	m	class:AccessTraceForAddress
m_totalStalls	./mem/ruby/profiler/MemCntrlProfiler.hh	/^    Stats::Formula m_totalStalls;$/;"	m	class:MemCntrlProfiler
m_total_banks	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_total_banks;$/;"	m	class:RubyMemoryControl
m_total_ranks	./mem/ruby/structures/RubyMemoryControl.hh	/^    int m_total_ranks;$/;"	m	class:RubyMemoryControl
m_total_samples	./mem/ruby/profiler/StoreTrace.hh	/^    int64_t m_total_samples; \/\/ Total number of store lifetimes of this line$/;"	m	class:StoreTrace
m_touched_by	./mem/ruby/profiler/AccessTraceForAddress.hh	/^    Set m_touched_by;$/;"	m	class:AccessTraceForAddress
m_train_misses	./mem/ruby/structures/Prefetcher.hh	/^        uint32_t m_train_misses;$/;"	m	class:Prefetcher
m_transitions_per_cycle	./mem/ruby/slicc_interface/AbstractController.hh	/^    const int m_transitions_per_cycle;$/;"	m	class:AbstractController
m_trees	./mem/ruby/structures/PseudoLRUPolicy.hh	/^    uint64_t* m_trees;                   \/** bit representation of the$/;"	m	class:PseudoLRUPolicy
m_type	./kern/tru64/mbuf.hh	89;"	d
m_type	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    flit_type m_type;$/;"	m	class:flit_d
m_type	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    flit_type m_type;$/;"	m	class:flit
m_type	./mem/ruby/structures/Prefetcher.hh	/^        RubyRequestType m_type;$/;"	m	class:PrefetchEntry
m_type	./mem/ruby/system/CacheRecorder.hh	/^    RubyRequestType m_type;$/;"	m	class:TraceRecord
m_type	./mem/ruby/system/Sequencer.hh	/^    RubyRequestType m_type;$/;"	m	struct:SequencerRequest
m_typeLatencyHist	./mem/ruby/profiler/Profiler.hh	/^    std::vector<Stats::Histogram *> m_typeLatencyHist;$/;"	m	class:Profiler
m_typeLatencyHist	./mem/ruby/system/Sequencer.hh	/^    std::vector<Stats::Histogram *> m_typeLatencyHist;$/;"	m	class:Sequencer
m_uncompressed_trace	./mem/ruby/system/CacheRecorder.hh	/^    uint8_t* m_uncompressed_trace;$/;"	m	class:CacheRecorder
m_uncompressed_trace_size	./mem/ruby/system/CacheRecorder.hh	/^    uint64_t m_uncompressed_trace_size;$/;"	m	class:CacheRecorder
m_unit_filter	./mem/ruby/structures/Prefetcher.hh	/^        std::vector<Addr> m_unit_filter;$/;"	m	class:Prefetcher
m_unit_filter_hit	./mem/ruby/structures/Prefetcher.hh	/^        uint32_t *m_unit_filter_hit;$/;"	m	class:Prefetcher
m_unit_filter_index	./mem/ruby/structures/Prefetcher.hh	/^        uint32_t m_unit_filter_index;$/;"	m	class:Prefetcher
m_units_remaining	./mem/ruby/network/simple/Throttle.hh	/^    std::vector<int> m_units_remaining;$/;"	m	class:Throttle
m_use_time	./mem/ruby/structures/Prefetcher.hh	/^        Cycles m_use_time;$/;"	m	class:PrefetchEntry
m_user	./mem/ruby/profiler/AccessTraceForAddress.hh	/^    uint64_t m_user;$/;"	m	class:AccessTraceForAddress
m_usingNetworkTester	./mem/ruby/system/Sequencer.hh	/^    bool m_usingNetworkTester;$/;"	m	class:Sequencer
m_usingRubyTester	./mem/ruby/system/DMASequencer.hh	/^    bool m_usingRubyTester;$/;"	m	class:DMASequencer
m_usingRubyTester	./mem/ruby/system/RubyPort.hh	/^    bool m_usingRubyTester;$/;"	m	class:RubyPort
m_value	./cpu/testers/rubytest/Check.hh	/^    uint8_t m_value;$/;"	m	class:Check
m_value	./mem/ruby/network/simple/PerfectSwitch.hh	/^    int m_value;$/;"	m	struct:LinkOrder
m_vc	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    int m_vc;$/;"	m	class:flit_d
m_vc	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    int m_vc;$/;"	m	class:flit
m_vc_alloc	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    VCallocator_d *m_vc_alloc;$/;"	m	class:Router_d
m_vc_allocator	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    std::vector<int> m_vc_allocator;$/;"	m	class:NetworkInterface_d
m_vc_allocator	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	/^    std::vector<int> m_vc_allocator;$/;"	m	class:NetworkInterface
m_vc_arbiter	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    VCarbiter *m_vc_arbiter;$/;"	m	class:Router
m_vc_global_arbiter_activity	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    Stats::Scalar m_vc_global_arbiter_activity;$/;"	m	class:Router_d
m_vc_load	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.hh	/^    std::vector<unsigned int> m_vc_load;$/;"	m	class:NetworkLink_d
m_vc_load	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	/^    std::vector<unsigned int> m_vc_load;$/;"	m	class:NetworkLink
m_vc_local_arbiter_activity	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    Stats::Scalar m_vc_local_arbiter_activity;$/;"	m	class:Router_d
m_vc_per_vnet	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    int m_vc_per_vnet;$/;"	m	class:InputUnit_d
m_vc_per_vnet	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    const int m_virtual_networks, m_vc_per_vnet, m_num_vcs;$/;"	m	class:NetworkInterface_d
m_vc_per_vnet	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    int m_virtual_networks, m_num_vcs, m_vc_per_vnet;$/;"	m	class:Router_d
m_vc_per_vnet	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.hh	/^    int m_num_vcs, m_vc_per_vnet;$/;"	m	class:SWallocator_d
m_vc_per_vnet	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.hh	/^    int m_num_vcs, m_vc_per_vnet;$/;"	m	class:VCallocator_d
m_vc_per_vnet	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	/^    uint32_t m_virtual_networks, m_num_vcs, m_vc_per_vnet;$/;"	m	class:NetworkInterface
m_vc_per_vnet	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    int m_virtual_networks, m_num_vcs, m_vc_per_vnet;$/;"	m	class:Router
m_vc_round_robin	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    int m_vc_round_robin; \/\/ For round robin scheduling$/;"	m	class:NetworkInterface_d
m_vc_round_robin	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	/^    int m_vc_round_robin; \/\/ For round robin scheduling$/;"	m	class:NetworkInterface
m_vc_round_robin	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    std::vector<int> m_vc_round_robin; \/\/ For scheduling of out source queues$/;"	m	class:Router
m_vc_state	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.hh	/^    VC_state_type m_vc_state;$/;"	m	class:OutVcState_d
m_vc_state	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    std::pair<VC_state_type, Cycles> m_vc_state; \/\/ I\/R\/V\/A\/C$/;"	m	class:VirtualChannel_d
m_vc_state	./mem/ruby/network/garnet/flexible-pipeline/InVcState.hh	/^    VC_state_type m_vc_state;$/;"	m	class:InVcState
m_vc_state	./mem/ruby/network/garnet/flexible-pipeline/OutVcState.hh	/^    VC_state_type m_vc_state;$/;"	m	class:OutVcState
m_vc_winners	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.hh	/^    std::vector<std::vector<int> > m_vc_winners; \/\/ a list for each outport$/;"	m	class:SWallocator_d
m_vcs	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    std::vector<VirtualChannel_d *> m_vcs;$/;"	m	class:InputUnit_d
m_vcs_per_vnet	./mem/ruby/network/garnet/BaseGarnetNetwork.hh	/^    int m_vcs_per_vnet;$/;"	m	class:BaseGarnetNetwork
m_version	./mem/ruby/slicc_interface/AbstractController.hh	/^    const NodeID m_version;$/;"	m	class:AbstractController
m_version	./mem/ruby/structures/DirectoryMemory.hh	/^    int m_version;$/;"	m	class:DirectoryMemory
m_version	./mem/ruby/system/DMASequencer.hh	/^    uint32_t m_version;$/;"	m	class:DMASequencer
m_version	./mem/ruby/system/RubyPort.hh	/^    uint32_t m_version;$/;"	m	class:RubyPort
m_virtual_networks	./mem/ruby/network/Network.cc	/^uint32_t Network::m_virtual_networks;$/;"	m	class:Network	file:
m_virtual_networks	./mem/ruby/network/Network.hh	/^    static uint32_t m_virtual_networks;$/;"	m	class:Network
m_virtual_networks	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    const int m_virtual_networks, m_vc_per_vnet, m_num_vcs;$/;"	m	class:NetworkInterface_d
m_virtual_networks	./mem/ruby/network/garnet/fixed-pipeline/Router_d.hh	/^    int m_virtual_networks, m_num_vcs, m_vc_per_vnet;$/;"	m	class:Router_d
m_virtual_networks	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	/^    uint32_t m_virtual_networks, m_num_vcs, m_vc_per_vnet;$/;"	m	class:NetworkInterface
m_virtual_networks	./mem/ruby/network/garnet/flexible-pipeline/Router.hh	/^    int m_virtual_networks, m_num_vcs, m_vc_per_vnet;$/;"	m	class:Router
m_virtual_networks	./mem/ruby/network/simple/PerfectSwitch.hh	/^    uint32_t m_virtual_networks;$/;"	m	class:PerfectSwitch
m_vnet	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    int m_vnet;$/;"	m	class:flit_d
m_vnet	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    const int m_vnet;$/;"	m	class:flit
m_vnet_id	./mem/ruby/network/MessageBuffer.hh	/^    int m_vnet_id;$/;"	m	class:MessageBuffer
m_vnet_type	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.hh	/^    std::vector<VNET_type > m_vnet_type;$/;"	m	class:GarnetNetwork_d
m_vnet_type_names	./mem/ruby/network/Network.hh	/^    std::vector<std::string> m_vnet_type_names;$/;"	m	class:Network
m_vnets	./mem/ruby/network/simple/Throttle.hh	/^    unsigned int m_vnets;$/;"	m	class:Throttle
m_waiting_buffers	./mem/ruby/slicc_interface/AbstractController.hh	/^    WaitingBufType m_waiting_buffers;$/;"	m	class:AbstractController
m_wakeup_frequency	./cpu/testers/rubytest/RubyTester.hh	/^    int m_wakeup_frequency;$/;"	m	class:RubyTester
m_wakeups_wo_switch	./mem/ruby/network/simple/PerfectSwitch.hh	/^    int m_wakeups_wo_switch;$/;"	m	class:PerfectSwitch
m_wakeups_wo_switch	./mem/ruby/network/simple/Throttle.hh	/^    int m_wakeups_wo_switch;$/;"	m	class:Throttle
m_warmup_enabled	./mem/ruby/system/RubySystem.cc	/^bool RubySystem::m_warmup_enabled = false;$/;"	m	class:RubySystem	file:
m_warmup_enabled	./mem/ruby/system/RubySystem.hh	/^    static bool m_warmup_enabled;$/;"	m	class:RubySystem
m_way_index	./mem/ruby/slicc_interface/AbstractCacheEntry.hh	/^    uint32_t m_way_index;$/;"	m	class:AbstractCacheEntry
m_weight	./mem/ruby/network/BasicLink.hh	/^    int m_weight;$/;"	m	class:BasicLink
m_weight_table	./mem/ruby/network/garnet/fixed-pipeline/RoutingUnit_d.hh	/^    std::vector<int> m_weight_table;$/;"	m	class:RoutingUnit_d
m_writeRequestTable	./mem/ruby/system/Sequencer.hh	/^    RequestTable m_writeRequestTable;$/;"	m	class:Sequencer
ma	./dev/pci/pcireg.h	/^        uint32_t ma;   \/* 0:1  reserved$/;"	m	struct:MSICAP::__anon28
macAddr	./dev/net/i8254xGBe.hh	/^    uint64_t macAddr;$/;"	m	class:IGbE
machInst	./arch/arm/faults.hh	/^    ExtMachInst machInst;$/;"	m	class:ArmISA::ArmFault
machInst	./arch/arm/faults.hh	/^    ExtMachInst machInst;$/;"	m	class:ArmISA::HypervisorTrap
machInst	./arch/arm/faults.hh	/^    ExtMachInst machInst;$/;"	m	class:ArmISA::SecureMonitorTrap
machInst	./arch/arm/faults.hh	/^    ExtMachInst machInst;$/;"	m	class:ArmISA::SupervisorTrap
machInst	./cpu/static_inst.hh	/^    const ExtMachInst machInst;$/;"	m	class:StaticInst
machSyscallDescs	./arch/alpha/tru64/process.cc	/^SyscallDesc AlphaTru64Process::machSyscallDescs[] = {$/;"	m	class:AlphaTru64Process	file:
machSyscallDescs	./arch/alpha/tru64/process.hh	/^    static SyscallDesc machSyscallDescs[];$/;"	m	class:AlphaISA::AlphaTru64Process
mach_sctimes_0	./kern/tru64/tru64_syscalls.hh	/^        mach_sctimes_0 = 70,$/;"	e	enum:SystemCalls::__anon103
mach_sctimes_1	./kern/tru64/tru64_syscalls.hh	/^        mach_sctimes_1 = 71,$/;"	e	enum:SystemCalls::__anon103
mach_sctimes_10	./kern/tru64/tru64_syscalls.hh	/^        mach_sctimes_10 = 80,$/;"	e	enum:SystemCalls::__anon103
mach_sctimes_11	./kern/tru64/tru64_syscalls.hh	/^        mach_sctimes_11 = 81,$/;"	e	enum:SystemCalls::__anon103
mach_sctimes_2	./kern/tru64/tru64_syscalls.hh	/^        mach_sctimes_2 = 72,$/;"	e	enum:SystemCalls::__anon103
mach_sctimes_3	./kern/tru64/tru64_syscalls.hh	/^        mach_sctimes_3 = 73,$/;"	e	enum:SystemCalls::__anon103
mach_sctimes_4	./kern/tru64/tru64_syscalls.hh	/^        mach_sctimes_4 = 74,$/;"	e	enum:SystemCalls::__anon103
mach_sctimes_5	./kern/tru64/tru64_syscalls.hh	/^        mach_sctimes_5 = 75,$/;"	e	enum:SystemCalls::__anon103
mach_sctimes_6	./kern/tru64/tru64_syscalls.hh	/^        mach_sctimes_6 = 76,$/;"	e	enum:SystemCalls::__anon103
mach_sctimes_7	./kern/tru64/tru64_syscalls.hh	/^        mach_sctimes_7 = 77,$/;"	e	enum:SystemCalls::__anon103
mach_sctimes_8	./kern/tru64/tru64_syscalls.hh	/^        mach_sctimes_8 = 78,$/;"	e	enum:SystemCalls::__anon103
mach_sctimes_9	./kern/tru64/tru64_syscalls.hh	/^        mach_sctimes_9 = 79,$/;"	e	enum:SystemCalls::__anon103
mach_sctimes_port_alloc_dealloc	./kern/tru64/tru64_syscalls.hh	/^        mach_sctimes_port_alloc_dealloc = 82,$/;"	e	enum:SystemCalls::__anon103
mach_strings	./kern/tru64/tru64_syscalls.cc	/^    mach_strings[SystemCalls<Tru64>::MachNumber] = {$/;"	m	namespace:__anon107	file:
machine	./kern/linux/linux.hh	/^        char machine[_SYS_NMLN];        \/\/!< Machine type.$/;"	m	struct:Linux::utsname
machine	./kern/operatingsystem.hh	/^        char machine[_SYS_NMLN];        \/\/!< Machine type.$/;"	m	struct:OperatingSystem::__anon92
machine	./kern/solaris/solaris.hh	/^        char machine[_SYS_NMLN];        \/\/!< Machine type.$/;"	m	struct:Solaris::utsname
machine	./kern/tru64/tru64.hh	/^        char machine[_SYS_NMLN];        \/\/!< Machine type.$/;"	m	struct:Tru64::utsname
machineCount	./mem/ruby/slicc_interface/RubySlicc_ComponentMapping.hh	/^machineCount(MachineType machType)$/;"	f
machineIDToMachineType	./mem/ruby/slicc_interface/RubySlicc_ComponentMapping.hh	/^machineIDToMachineType(MachineID machID)$/;"	f
machineIDToNodeID	./mem/ruby/slicc_interface/RubySlicc_ComponentMapping.hh	/^machineIDToNodeID(MachineID machID)$/;"	f
machine_type	./arch/arm/ArmSystem.py	/^    machine_type = Param.ArmMachineType('VExpress_EMM',$/;"	v	class:GenericArmSystem
macroStaticInst	./sim/insttracer.hh	/^    StaticInstPtr macroStaticInst;$/;"	m	class:Trace::InstRecord
macrocodeBlock	./arch/x86/insts/macroop.hh	/^    const char *macrocodeBlock;$/;"	m	class:X86ISA::MacroopBase
macroop	./cpu/base_dyn_inst.hh	/^    const StaticInstPtr macroop;$/;"	m	class:BaseDynInst
macroop	./cpu/o3/fetch.hh	/^    StaticInstPtr macroop[Impl::MaxThreads];$/;"	m	class:DefaultFetch
madvise	./kern/tru64/tru64_syscalls.hh	/^        madvise = 75,$/;"	e	enum:SystemCalls::__anon102
magic	./arch/alpha/aout_machdep.h	/^    uint16_t    magic;          \/\/\/< magic number$/;"	m	struct:aout_exechdr
magic	./base/loader/coff_sym.h	/^    coff_short  magic;          \/* to verify validity of the table *\/$/;"	m	struct:ecoff_symhdr
magic	./base/loader/exec_ecoff.h	/^        coff_ushort magic;$/;"	m	struct:ecoff_aouthdr
magic	./dev/net/etherdump.cc	/^    uint32_t magic;$/;"	m	struct:pcap_file_header	file:
magicNumber	./proto/protoio.hh	/^    static const uint32_t magicNumber = 0x356d6567;$/;"	m	class:ProtoStream
magicSym	./base/loader/coff_symconst.h	68;"	d
magicSym2	./base/loader/coff_symconst.h	70;"	d
magic_number	./base/bitmap.hh	/^        unsigned char magic_number[2];$/;"	m	struct:Bitmap::FileHeader
main	./mem/slicc/main.py	/^def main(args=None):$/;"	f
main	./python/m5/main.py	/^def main(*args):$/;"	f
main	./python/m5/util/jobfile.py	/^def main(conf=None):$/;"	f
main	./sim/main.cc	/^main(int argc, char **argv)$/;"	f
main	./unittest/bituniontest.cc	/^main()$/;"	f
main	./unittest/bitvectest.cc	/^main()$/;"	f
main	./unittest/circlebuf.cc	/^main(int argc, char *argv[])$/;"	f
main	./unittest/cprintftest.cc	/^main()$/;"	f
main	./unittest/cprintftime.cc	/^main()$/;"	f
main	./unittest/fbtest.cc	/^main()$/;"	f
main	./unittest/initest.cc	/^main(int argc, char *argv[])$/;"	f
main	./unittest/nmtest.cc	/^main(int argc, char *argv[])$/;"	f
main	./unittest/rangemaptest.cc	/^main()$/;"	f
main	./unittest/refcnttest.cc	/^main()$/;"	f
main	./unittest/stattestmain.py	/^def main():$/;"	f
main	./unittest/strnumtest.cc	/^main(int argc, char *argv[])$/;"	f
main	./unittest/symtest.cc	/^main(int argc, char *argv[])$/;"	f
main	./unittest/tokentest.cc	/^main(int argc, char *argv[])$/;"	f
main	./unittest/trietest.cc	/^main()$/;"	f
mainEventQueue	./sim/eventq.cc	/^vector<EventQueue *> mainEventQueue;$/;"	v
mainPkt	./cpu/o3/lsq_unit.hh	/^        PacketPtr mainPkt;$/;"	m	class:LSQUnit::LSQSenderState
mainReq	./cpu/translation.hh	/^    RequestPtr mainReq;$/;"	m	class:WholeTranslationState
mainq	./python/m5/event.py	/^mainq = None$/;"	v
maintInt	./dev/arm/vgic.hh	/^    int maintInt;$/;"	m	class:VGic
maintIntPosted	./dev/arm/vgic.hh	/^    bool        maintIntPosted[VGIC_CPU_MAX];$/;"	m	class:VGic
major	./arch/x86/bios/SMBios.py	/^    major = Param.UInt8(0, "major version number")$/;"	v	class:X86SMBiosBiosInformation
majorVer	./arch/x86/bios/smbios.hh	/^    uint8_t majorVer;$/;"	m	class:X86ISA::SMBios::BiosInformation
majorVersion	./arch/x86/bios/smbios.hh	/^        uint8_t majorVersion;$/;"	m	struct:X86ISA::SMBios::SMBiosTable::SMBiosHeader
major_version	./arch/x86/bios/SMBios.py	/^    major_version = Param.UInt8(2, "major version number")$/;"	v	class:X86SMBiosSMBiosTable
makeAtomicResponse	./mem/packet.hh	/^    makeAtomicResponse()$/;"	f	class:Packet
makeCRField	./arch/power/insts/floating.hh	/^    makeCRField(double a, double b) const$/;"	f	class:PowerISA::FloatOp
makeCRField	./arch/power/insts/integer.hh	/^    makeCRField(int32_t a, int32_t b, uint32_t xerSO) const$/;"	f	class:PowerISA::IntOp
makeCRField	./arch/power/insts/integer.hh	/^    makeCRField(uint32_t a, uint32_t b, uint32_t xerSO) const$/;"	f	class:PowerISA::IntOp
makeCacheRecorder	./mem/ruby/system/RubySystem.cc	/^RubySystem::makeCacheRecorder(uint8_t *uncompressed_trace,$/;"	f	class:RubySystem
makeConstructor	./arch/isa_parser.py	/^    def makeConstructor(self, predRead, predWrite):$/;"	m	class:CCRegOperand
makeConstructor	./arch/isa_parser.py	/^    def makeConstructor(self, predRead, predWrite):$/;"	m	class:ControlRegOperand
makeConstructor	./arch/isa_parser.py	/^    def makeConstructor(self, predRead, predWrite):$/;"	m	class:FloatRegOperand
makeConstructor	./arch/isa_parser.py	/^    def makeConstructor(self, predRead, predWrite):$/;"	m	class:IntRegOperand
makeConstructor	./arch/isa_parser.py	/^    def makeConstructor(self, predRead, predWrite):$/;"	m	class:MemOperand
makeConstructor	./arch/isa_parser.py	/^    def makeConstructor(self, predRead, predWrite):$/;"	m	class:PCStateOperand
makeDecl	./arch/isa_parser.py	/^    def makeDecl(self):$/;"	m	class:MemOperand
makeDecl	./arch/isa_parser.py	/^    def makeDecl(self):$/;"	m	class:Operand
makeDecl	./arch/isa_parser.py	/^    def makeDecl(self):$/;"	m	class:PCStateOperand
makeDir	./python/m5/util/__init__.py	/^def makeDir(path):$/;"	f
makeDouble	./arch/arm/insts/vfp.hh	/^makeDouble(uint32_t low, uint32_t high)$/;"	f	namespace:ArmISA
makeFlagConstructor	./arch/isa_parser.py	/^def makeFlagConstructor(flag_list):$/;"	f
makeFragmentPackets	./cpu/minor/lsq.cc	/^LSQ::SplitDataRequest::makeFragmentPackets()$/;"	f	class:Minor::LSQ::SplitDataRequest
makeFragmentRequests	./cpu/minor/lsq.cc	/^LSQ::SplitDataRequest::makeFragmentRequests()$/;"	f	class:Minor::LSQ::SplitDataRequest
makeInLink	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.cc	/^GarnetNetwork_d::makeInLink(NodeID src, SwitchID dest, BasicLink* link,$/;"	f	class:GarnetNetwork_d
makeInLink	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.cc	/^GarnetNetwork::makeInLink(NodeID src, SwitchID dest, BasicLink* link,$/;"	f	class:GarnetNetwork
makeInLink	./mem/ruby/network/simple/SimpleNetwork.cc	/^SimpleNetwork::makeInLink(NodeID src, SwitchID dest, BasicLink* link,$/;"	f	class:SimpleNetwork
makeInternalLink	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.cc	/^GarnetNetwork_d::makeInternalLink(SwitchID src, SwitchID dest, BasicLink* link,$/;"	f	class:GarnetNetwork_d
makeInternalLink	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.cc	/^GarnetNetwork::makeInternalLink(SwitchID src, SwitchID dest, BasicLink* link,$/;"	f	class:GarnetNetwork
makeInternalLink	./mem/ruby/network/simple/SimpleNetwork.cc	/^SimpleNetwork::makeInternalLink(SwitchID src, SwitchID dest, BasicLink* link,$/;"	f	class:SimpleNetwork
makeKvmCpuid	./cpu/kvm/x86_cpu.cc	/^makeKvmCpuid(uint32_t function, uint32_t index,$/;"	f	file:
makeLineAddress	./mem/ruby/common/Address.cc	/^makeLineAddress(Addr addr)$/;"	f
makeLink	./mem/ruby/network/Topology.cc	/^Topology::makeLink(Network *net, SwitchID src, SwitchID dest,$/;"	f	class:Topology
makeList	./arch/isa_parser.py	/^def makeList(arg):$/;"	f
makeList	./python/m5/util/__init__.py	/^def makeList(objOrList):$/;"	f
makeNextStrideAddress	./mem/ruby/common/Address.cc	/^makeNextStrideAddress(Addr addr, int stride)$/;"	f
makeOutLink	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.cc	/^GarnetNetwork_d::makeOutLink(SwitchID src, NodeID dest, BasicLink* link,$/;"	f	class:GarnetNetwork_d
makeOutLink	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.cc	/^GarnetNetwork::makeOutLink(SwitchID src, NodeID dest, BasicLink* link,$/;"	f	class:GarnetNetwork
makeOutLink	./mem/ruby/network/simple/SimpleNetwork.cc	/^SimpleNetwork::makeOutLink(SwitchID src, NodeID dest, BasicLink* link,$/;"	f	class:SimpleNetwork
makePacket	./cpu/minor/fetch1.cc	/^Fetch1::FetchRequest::makePacket()$/;"	f	class:Minor::Fetch1::FetchRequest
makePacket	./cpu/minor/lsq.cc	/^LSQ::LSQRequest::makePacket()$/;"	f	class:Minor::LSQ::LSQRequest
makePacketForRequest	./cpu/minor/lsq.cc	/^makePacketForRequest(Request &request, bool isLoad,$/;"	f	namespace:Minor
makeParamsObject	./sim/cxx_config.hh	/^    virtual CxxConfigParams *makeParamsObject() const { return NULL; }$/;"	f	class:CxxConfigDirectoryEntry
makeRead	./arch/isa_parser.py	/^    def makeRead(self, predRead):$/;"	m	class:CCRegOperand
makeRead	./arch/isa_parser.py	/^    def makeRead(self, predRead):$/;"	m	class:ControlRegOperand
makeRead	./arch/isa_parser.py	/^    def makeRead(self, predRead):$/;"	m	class:FloatRegOperand
makeRead	./arch/isa_parser.py	/^    def makeRead(self, predRead):$/;"	m	class:IntRegOperand
makeRead	./arch/isa_parser.py	/^    def makeRead(self, predRead):$/;"	m	class:MemOperand
makeRead	./arch/isa_parser.py	/^    def makeRead(self, predRead):$/;"	m	class:PCStateOperand
makeReadCmd	./mem/packet.hh	/^    makeReadCmd(const RequestPtr req)$/;"	f	class:Packet
makeRef	./python/m5/params.py	/^    def makeRef(self, simobj):$/;"	m	class:Port
makeRef	./python/m5/params.py	/^    def makeRef(self, simobj):$/;"	m	class:VectorPort
makeRequest	./mem/ruby/system/DMASequencer.cc	/^DMASequencer::makeRequest(PacketPtr pkt)$/;"	f	class:DMASequencer
makeRequest	./mem/ruby/system/RubyPortProxy.cc	/^RubyPortProxy::makeRequest(PacketPtr pkt)$/;"	f	class:RubyPortProxy
makeRequest	./mem/ruby/system/Sequencer.cc	/^Sequencer::makeRequest(PacketPtr pkt)$/;"	f	class:Sequencer
makeResponse	./mem/packet.hh	/^    makeResponse()$/;"	f	class:Packet
makeSP	./arch/arm/intregs.hh	/^makeSP(IntRegIndex reg)$/;"	f	namespace:ArmISA
makeTimingResponse	./mem/packet.hh	/^    makeTimingResponse()$/;"	f	class:Packet
makeWrite	./arch/isa_parser.py	/^    def makeWrite(self, predWrite):$/;"	m	class:CCRegOperand
makeWrite	./arch/isa_parser.py	/^    def makeWrite(self, predWrite):$/;"	m	class:ControlRegOperand
makeWrite	./arch/isa_parser.py	/^    def makeWrite(self, predWrite):$/;"	m	class:FloatRegOperand
makeWrite	./arch/isa_parser.py	/^    def makeWrite(self, predWrite):$/;"	m	class:IntRegOperand
makeWrite	./arch/isa_parser.py	/^    def makeWrite(self, predWrite):$/;"	m	class:MemOperand
makeWrite	./arch/isa_parser.py	/^    def makeWrite(self, predWrite):$/;"	m	class:PCStateOperand
makeWriteCmd	./mem/packet.hh	/^    makeWriteCmd(const RequestPtr req)$/;"	f	class:Packet
makeZero	./arch/arm/intregs.hh	/^makeZero(IntRegIndex reg)$/;"	f	namespace:ArmISA
make_version_list	./python/m5/util/__init__.py	/^    def make_version_list(v):$/;"	f	function:compareVersions
malta	./dev/mips/Malta.py	/^    malta = Param.Malta(Parent.any, "Malta")$/;"	v	class:MaltaCChip
malta	./dev/mips/Malta.py	/^    malta = Param.Malta(Parent.any, "Malta")$/;"	v	class:MaltaIO
malta	./dev/mips/malta_cchip.hh	/^    Malta *malta;$/;"	m	class:MaltaCChip
malta	./dev/mips/malta_io.hh	/^        Malta *malta;$/;"	m	class:MaltaIO::RTC
malta	./dev/mips/malta_io.hh	/^    Malta *malta;$/;"	m	class:MaltaIO
manageReadTransfer	./dev/arm/ufs_device.cc	/^UFSHostDevice::manageReadTransfer(uint32_t size, uint32_t LUN, uint64_t$/;"	f	class:UFSHostDevice
manageWriteTransfer	./dev/arm/ufs_device.cc	/^UFSHostDevice::manageWriteTransfer(uint8_t LUN, uint64_t offset, uint32_t$/;"	f	class:UFSHostDevice
manager	./mem/probes/BaseMemProbe.py	/^    manager = VectorParam.SimObject(Parent.any,$/;"	v	class:BaseMemProbe
manager	./sim/probe/Probe.py	/^    manager = Param.SimObject(Parent.any, "ProbeManager")$/;"	v	class:ProbeListenerObject
manager	./sim/probe/probe.hh	/^    ProbeManager *const manager;$/;"	m	class:ProbeListener
manager	./sim/probe/probe.hh	/^    ProbeManager *manager;$/;"	m	class:ProbeListenerObject
manc	./dev/net/i8254xGBe_defs.hh	/^    MANC manc;$/;"	m	struct:iGbReg::Regs
map	./arch/arm/ArmSystem.py	/^    map = {$/;"	v	class:ArmMachineType
map	./arch/x86/bios/IntelMP.py	/^    map = {"IOAddress" : 0,$/;"	v	class:X86IntelMPAddressType
map	./arch/x86/bios/IntelMP.py	/^    map = {"ISACompatible" : 0,$/;"	v	class:X86IntelMPRangeList
map	./arch/x86/bios/IntelMP.py	/^    map = {'ConformPolarity' : 0,$/;"	v	class:X86IntelMPPolarity
map	./arch/x86/bios/IntelMP.py	/^    map = {'ConformTrigger' : 0,$/;"	v	class:X86IntelMPTriggerMode
map	./arch/x86/bios/IntelMP.py	/^    map = {'INT' : 0,$/;"	v	class:X86IntelMPInterruptType
map	./arch/x86/bios/SMBios.py	/^    map = {'ACPI' : 0,$/;"	v	class:ExtCharacteristic
map	./arch/x86/bios/SMBios.py	/^    map = {'Unknown' : 2,$/;"	v	class:Characteristic
map	./cpu/o3/rename_map.hh	/^    std::vector<PhysRegIndex> map;$/;"	m	class:SimpleRenameMap
map	./dev/x86/I8259.py	/^    map = {'I8259Master' : 0,$/;"	v	class:X86I8259CascadeMode
map	./mem/multi_level_page_table_impl.hh	/^MultiLevelPageTable<ISAOps>::map(Addr vaddr, Addr paddr,$/;"	f	class:MultiLevelPageTable
map	./mem/page_table.cc	/^FuncPageTable::map(Addr vaddr, Addr paddr, int64_t size, uint64_t flags)$/;"	f	class:FuncPageTable
map	./sim/process.cc	/^Process::map(Addr vaddr, Addr paddr, int size, bool cacheable)$/;"	f	class:Process
mapAddressToDirectoryVersion	./mem/ruby/structures/DirectoryMemory.cc	/^DirectoryMemory::mapAddressToDirectoryVersion(Addr address)$/;"	f	class:DirectoryMemory
mapAddressToLocalIdx	./mem/ruby/structures/DirectoryMemory.cc	/^DirectoryMemory::mapAddressToLocalIdx(Addr address)$/;"	f	class:DirectoryMemory
mapAddressToRange	./mem/ruby/slicc_interface/RubySlicc_ComponentMapping.hh	/^mapAddressToRange(Addr addr, MachineType type, int low_bit,$/;"	f
mapIndexToBank	./mem/ruby/structures/BankedArray.cc	/^BankedArray::mapIndexToBank(int64_t idx)$/;"	f	class:BankedArray
mapPciInterrupt	./dev/pci/host.cc	/^GenericPciHost::mapPciInterrupt(const PciBusAddr &addr, PciIntPin pin) const$/;"	f	class:GenericPciHost
mapPid	./arch/arm/linux/system.cc	/^LinuxArmSystem::mapPid(ThreadContext *tc, uint32_t pid)$/;"	f	class:LinuxArmSystem
map_Address_to_Directory	./mem/ruby/slicc_interface/RubySlicc_ComponentMapping.hh	/^map_Address_to_Directory(Addr addr)$/;"	f
map_Address_to_DirectoryNode	./mem/ruby/slicc_interface/RubySlicc_ComponentMapping.hh	/^map_Address_to_DirectoryNode(Addr addr)$/;"	f
map_fd	./kern/tru64/tru64_syscalls.hh	/^        map_fd = 43,$/;"	e	enum:SystemCalls::__anon103
map_select	./arch/x86/types.hh	/^            Bitfield<12, 8> map_select;$/;"	m	namespace:X86ISA
map_t	./base/output.hh	/^    typedef std::map<std::string, std::ostream *> map_t;$/;"	t	class:OutputDirectory
map_t	./cpu/pc_event.hh	/^    typedef std::vector<record_t> map_t;$/;"	t	class:PCEventQueue
mapper	./mem/addr_mapper.hh	/^        AddrMapper& mapper;$/;"	m	class:AddrMapper::MapperMasterPort
mapper	./mem/addr_mapper.hh	/^        AddrMapper& mapper;$/;"	m	class:AddrMapper::MapperSlavePort
markCompletedInsts	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::markCompletedInsts()$/;"	f	class:DefaultCommit
markDelayed	./arch/arm/stage2_lookup.hh	/^    void markDelayed() {}$/;"	f	class:ArmISA::Stage2LookUp
markDelayed	./arch/arm/stage2_mmu.hh	/^        markDelayed() {}$/;"	f	class:ArmISA::Stage2MMU::Stage2Translation
markDelayed	./cpu/minor/fetch1.hh	/^        void markDelayed() { }$/;"	f	class:Minor::Fetch1::FetchRequest
markDelayed	./cpu/minor/lsq.hh	/^        void markDelayed() { }$/;"	f	class:Minor::LSQ::LSQRequest
markDelayed	./cpu/o3/fetch.hh	/^        markDelayed()$/;"	f	class:DefaultFetch::FetchTranslation
markDelayed	./cpu/simple/timing.hh	/^        markDelayed()$/;"	f	class:TimingSimpleCPU::FetchTranslation
markDelayed	./cpu/translation.hh	/^    markDelayed()$/;"	f	class:DataTranslation
markEntries	./mem/ruby/structures/PersistentTable.cc	/^PersistentTable::markEntries(Addr address)$/;"	f	class:PersistentTable
markInService	./mem/cache/cache.cc	/^Cache::markInService(MSHR *mshr, bool pending_modified_resp)$/;"	f	class:Cache
markInService	./mem/cache/mshr.cc	/^MSHR::markInService(bool pending_modified_resp)$/;"	f	class:MSHR
markInService	./mem/cache/mshr_queue.cc	/^MSHRQueue::markInService(MSHR *mshr, bool pending_modified_resp)$/;"	f	class:MSHRQueue
markInServiceInternal	./mem/cache/base.hh	/^    void markInServiceInternal(MSHR *mshr, bool pending_modified_resp)$/;"	f	class:BaseCache
markPending	./mem/cache/mshr_queue.cc	/^MSHRQueue::markPending(MSHR *mshr)$/;"	f	class:MSHRQueue
markRemoved	./mem/ruby/system/Sequencer.cc	/^Sequencer::markRemoved()$/;"	f	class:Sequencer
markSrcRegReady	./cpu/base_dyn_inst_impl.hh	/^BaseDynInst<Impl>::markSrcRegReady()$/;"	f	class:BaseDynInst
markSrcRegReady	./cpu/base_dyn_inst_impl.hh	/^BaseDynInst<Impl>::markSrcRegReady(RegIndex src_idx)$/;"	f	class:BaseDynInst
markTfaw	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::markTfaw(int rank)$/;"	f	class:RubyMemoryControl
markWorkItem	./sim/system.hh	/^    markWorkItem(int index)$/;"	f	class:System
markedPending	./mem/cache/mshr.hh	/^        const bool markedPending; \/\/!< Did we mark upstream MSHR$/;"	m	class:MSHR::Target
markupInstDests	./cpu/minor/scoreboard.cc	/^Scoreboard::markupInstDests(MinorDynInstPtr inst, Cycles retire_time,$/;"	f	class:Minor::Scoreboard
mask	./arch/arm/types.hh	/^        Bitfield<3, 0> mask;$/;"	m	namespace:ArmISA
mask	./arch/mips/pra_constants.hh	/^    Bitfield<11, 3>  mask;$/;"	m	namespace:MipsISA
mask	./arch/mips/pra_constants.hh	/^    Bitfield<28, 13> mask;$/;"	m	namespace:MipsISA
mask	./arch/mips/pra_constants.hh	/^    Bitfield<3,  0>  mask;$/;"	m	namespace:MipsISA
mask	./arch/x86/regs/misc.hh	/^        Bitfield<31,0> mask;$/;"	m	namespace:X86ISA
mask	./base/bitfield.hh	/^mask(int first, int last)$/;"	f
mask	./base/bitfield.hh	/^mask(int nbits)$/;"	f
mask	./base/framebuffer.hh	/^        unsigned mask;$/;"	m	struct:PixelConverter::Channel
mask	./base/trie.hh	/^        Key mask;$/;"	m	struct:Trie::Node
mask	./cpu/minor/MinorCPU.py	/^    mask = Param.UInt64(0, "mask for testing ExtMachInst")$/;"	v	class:MinorFUTiming
mask	./cpu/minor/func_unit.hh	/^    uint64_t mask;$/;"	m	class:MinorFUTiming
mask	./dev/arm/ufs_device.hh	/^        uint32_t mask;$/;"	m	struct:UFSHostDevice::taskStart
mask	./dev/arm/ufs_device.hh	/^        uint32_t mask;$/;"	m	struct:UFSHostDevice::transferStart
mask	./dev/sparc/iob.hh	/^        bool mask;$/;"	m	struct:Iob::IntCtl
mask	./dev/x86/i82094aa.hh	/^        Bitfield<16> mask;$/;"	m	class:X86ISA::I82094AA
mask	./mem/abstract_mem.hh	/^    static Addr mask(Addr paddr) { return (paddr & ~Addr_Mask); }$/;"	f	class:LockedAddr
mask1	./dev/alpha/tsunami_io.hh	/^    uint8_t mask1;$/;"	m	class:TsunamiIO
mask1	./dev/mips/malta_io.hh	/^    uint8_t mask1;$/;"	m	class:MaltaIO
mask2	./dev/alpha/tsunami_io.hh	/^    uint8_t mask2;$/;"	m	class:TsunamiIO
mask2	./dev/mips/malta_io.hh	/^    uint8_t mask2;$/;"	m	class:MaltaIO
maskAll	./dev/x86/i8259.hh	/^    maskAll()$/;"	f	class:X86ISA::I8259
maskHighOrderBits	./mem/ruby/common/Address.cc	/^maskHighOrderBits(Addr addr, unsigned int number)$/;"	f
maskInt	./dev/arm/pl011.hh	/^    inline uint16_t maskInt() const { return rawInt & imsc; }$/;"	f	class:Pl011
maskInt	./dev/arm/rtc_pl031.hh	/^    bool maskInt;$/;"	m	class:PL031
maskLowOrderBits	./mem/ruby/common/Address.cc	/^maskLowOrderBits(Addr addr, unsigned int number)$/;"	f
maskReg	./dev/x86/i8237.hh	/^    uint8_t maskReg;$/;"	m	class:X86ISA::I8237
maskToPortList	./mem/snoop_filter.hh	/^SnoopFilter::maskToPortList(SnoopMask port_mask) const$/;"	f	class:SnoopFilter
masked	./arch/x86/interrupts.hh	/^        Bitfield<16> masked;$/;"	m	class:X86ISA::Interrupts
masks	./arch/x86/decoder.hh	/^        std::vector<MachInst> masks;$/;"	m	struct:X86ISA::Decoder::InstBytes
maskx	./arch/mips/pra_constants.hh	/^    Bitfield<12, 11> maskx;$/;"	m	namespace:MipsISA
master	./dev/net/dist_iface.cc	/^DistIface *DistIface::master = nullptr;$/;"	m	class:DistIface	file:
master	./dev/net/dist_iface.hh	/^    static DistIface *master;$/;"	m	class:DistIface
master	./dev/storage/ide_ctrl.hh	/^        IdeDisk *master, *slave;$/;"	m	struct:IdeController::Channel
master	./mem/AddrMapper.py	/^    master = MasterPort("Master port")$/;"	v	class:AddrMapper
master	./mem/Bridge.py	/^    master = MasterPort('Master port')$/;"	v	class:Bridge
master	./mem/CommMonitor.py	/^    master = MasterPort("Master port")$/;"	v	class:CommMonitor
master	./mem/MemChecker.py	/^    master = MasterPort("Master port")$/;"	v	class:MemCheckerMonitor
master	./mem/SerialLink.py	/^    master = MasterPort('Master port')$/;"	v	class:SerialLink
master	./mem/XBar.py	/^    master = VectorMasterPort("Vector port for connecting slaves")$/;"	v	class:BaseXBar
master	./mem/ruby/network/MessageBuffer.py	/^    master = MasterPort("Master port to MessageBuffer receiver")$/;"	v	class:MessageBuffer
master	./mem/ruby/network/Network.py	/^    master = VectorMasterPort("CPU master port")$/;"	v	class:RubyNetwork
master	./mem/ruby/system/Sequencer.py	/^    master = VectorMasterPort("CPU master port")$/;"	v	class:RubyPort
masterID	./cpu/testers/traffic_gen/generators.hh	/^    const MasterID masterID;$/;"	m	class:BaseGen
masterID	./cpu/testers/traffic_gen/traffic_gen.hh	/^    MasterID masterID;$/;"	m	class:TrafficGen
masterID	./cpu/trace/trace_cpu.hh	/^        const MasterID masterID;$/;"	m	class:TraceCPU::ElasticDataGen
masterID	./cpu/trace/trace_cpu.hh	/^        const MasterID masterID;$/;"	m	class:TraceCPU::FixedRetryGen
masterId	./arch/arm/stage2_mmu.hh	/^    MasterID masterId;$/;"	m	class:ArmISA::Stage2MMU
masterId	./arch/arm/table_walker.hh	/^    MasterID masterId;$/;"	m	class:ArmISA::TableWalker
masterId	./arch/x86/pagetable_walker.hh	/^        MasterID masterId;$/;"	m	class:X86ISA::Walker
masterId	./cpu/base_dyn_inst.hh	/^    MasterID masterId() const { return cpu->dataMasterId(); }$/;"	f	class:BaseDynInst
masterId	./cpu/checker/cpu.hh	/^    MasterID masterId;$/;"	m	class:CheckerCPU
masterId	./cpu/testers/directedtest/DirectedGenerator.hh	/^    MasterID masterId;$/;"	m	class:DirectedGenerator
masterId	./cpu/testers/memtest/memtest.hh	/^    MasterID masterId;$/;"	m	class:MemTest
masterId	./cpu/testers/networktest/networktest.hh	/^    MasterID masterId;$/;"	m	class:NetworkTest
masterId	./cpu/testers/rubytest/RubyTester.hh	/^    MasterID masterId() { return _masterId; }$/;"	f	class:RubyTester
masterId	./dev/dma_device.hh	/^    const MasterID masterId;$/;"	m	class:DmaPort
masterId	./mem/cache/prefetch/base.hh	/^    MasterID masterId;$/;"	m	class:BasePrefetcher
masterId	./mem/request.hh	/^    masterId() const$/;"	f	class:Request
masterIds	./sim/system.hh	/^    std::vector<std::string> masterIds;$/;"	m	class:System
masterPort	./mem/addr_mapper.hh	/^    MapperMasterPort masterPort;$/;"	m	class:AddrMapper
masterPort	./mem/bridge.hh	/^        BridgeMasterPort& masterPort;$/;"	m	class:Bridge::BridgeSlavePort
masterPort	./mem/bridge.hh	/^    BridgeMasterPort masterPort;$/;"	m	class:Bridge
masterPort	./mem/comm_monitor.hh	/^    MonitorMasterPort masterPort;$/;"	m	class:CommMonitor
masterPort	./mem/mem_checker_monitor.hh	/^    MonitorMasterPort masterPort;$/;"	m	class:MemCheckerMonitor
masterPort	./mem/packet_queue.hh	/^    MasterPort& masterPort;$/;"	m	class:ReqPacketQueue
masterPort	./mem/packet_queue.hh	/^    MasterPort& masterPort;$/;"	m	class:SnoopRespPacketQueue
masterPort	./mem/serial_link.hh	/^        SerialLinkMasterPort& masterPort;$/;"	m	class:SerialLink::SerialLinkSlavePort
masterPort	./mem/serial_link.hh	/^    SerialLinkMasterPort masterPort;$/;"	m	class:SerialLink
masterPorts	./mem/xbar.hh	/^    std::vector<MasterPort*> masterPorts;$/;"	m	class:BaseXBar
master_ports	./mem/ruby/system/RubyPort.hh	/^    std::vector<PioMasterPort *> master_ports;$/;"	m	class:RubyPort
match	./arch/arm/pagetable.hh	/^    match(Addr va, uint16_t asn, uint8_t _vmid, bool hypLookUp,$/;"	f	struct:ArmISA::TlbEntry
match	./arch/arm/pagetable.hh	/^    match(Addr va, uint8_t _vmid, bool hypLookUp, bool secure_lookup,$/;"	f	struct:ArmISA::TlbEntry
match	./base/match.hh	/^    bool match(const std::string &name) const$/;"	f	class:ObjectMatch
match	./cpu/minor/MinorCPU.py	/^    match = Param.UInt64(0, "match value for testing ExtMachInst:"$/;"	v	class:MinorFUTiming
match	./cpu/minor/func_unit.hh	/^    uint64_t match;$/;"	m	class:MinorFUTiming
match	./sim/emul_driver.hh	/^    bool match(const std::string &s) const { return (s == filename); }$/;"	f	class:EmulatedDriver
matchEvent	./dev/arm/rtc_pl031.hh	/^    EventWrapper<PL031, &PL031::counterMatch> matchEvent;$/;"	m	class:PL031
matchVal	./dev/arm/rtc_pl031.hh	/^    uint32_t matchVal;$/;"	m	class:PL031
matches	./base/trie.hh	/^        matches(Key test)$/;"	f	struct:Trie::Node
matchesContext	./mem/abstract_mem.hh	/^    bool matchesContext(Request *req) const$/;"	f	class:LockedAddr
matchesContext	./mem/cache/blk.hh	/^        bool matchesContext(const RequestPtr req) const$/;"	f	class:CacheBlk::Lock
max	./base/statistics.hh	/^        Counter max;$/;"	m	struct:Stats::DistStor::Params
max	./base/stats/info.hh	/^    Counter max;$/;"	m	struct:Stats::DistData
maxAccessesPerRow	./mem/dram_ctrl.hh	/^    const uint32_t maxAccessesPerRow;$/;"	m	class:DRAMCtrl
maxAddr	./dev/arm/pl111.hh	/^    Addr maxAddr;$/;"	m	class:Pl111
maxConf	./mem/cache/prefetch/stride.hh	/^    const int maxConf;$/;"	m	class:StridePrefetcher
maxDependents	./cpu/trace/trace_cpu.hh	/^        Stats::Scalar maxDependents;$/;"	m	class:TraceCPU::ElasticDataGen
maxDoorbell	./dev/arm/ufs_device.hh	/^        Stats::Scalar maxDoorbell;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
maxEntries	./cpu/o3/inst_queue.hh	/^    unsigned maxEntries[Impl::MaxThreads];$/;"	m	class:InstructionQueue
maxEntries	./cpu/o3/rob.hh	/^    unsigned maxEntries[Impl::MaxThreads];$/;"	m	class:ROB
maxEntryCount	./mem/snoop_filter.hh	/^    const unsigned maxEntryCount;$/;"	m	class:SnoopFilter
maxLQEntries	./cpu/o3/lsq.hh	/^    unsigned maxLQEntries;$/;"	m	class:LSQ
maxLineWidth	./cpu/minor/fetch1.hh	/^    unsigned int maxLineWidth;$/;"	m	class:Minor::Fetch1
maxLoads	./cpu/testers/memtest/memtest.hh	/^    const uint64_t maxLoads;$/;"	m	class:MemTest
maxMasters	./sim/system.hh	/^    MasterID maxMasters()$/;"	f	class:System
maxMemorySlot	./cpu/kvm/vm.hh	/^    uint32_t maxMemorySlot;$/;"	m	class:KvmVM
maxNumDependents	./cpu/o3/probe/elastic_trace.hh	/^    Stats::Scalar maxNumDependents;$/;"	m	class:ElasticTrace
maxOpLatencies	./cpu/o3/fu_pool.hh	/^    std::array<Cycles, Num_OpClasses> maxOpLatencies;$/;"	m	class:FUPool
maxOutstandingDma	./dev/arm/pl111.hh	/^    static const int maxOutstandingDma  = 16;   \/\/ 16 deep FIFO of 64 bits$/;"	m	class:Pl111
maxPackets	./cpu/testers/networktest/networktest.hh	/^    int maxPackets;$/;"	m	class:NetworkTest
maxPeriod	./cpu/testers/traffic_gen/generators.hh	/^    const Tick maxPeriod;$/;"	m	class:LinearGen
maxPeriod	./cpu/testers/traffic_gen/generators.hh	/^    const Tick maxPeriod;$/;"	m	class:RandomGen
maxPhysRegDepMapSize	./cpu/o3/probe/elastic_trace.hh	/^    Stats::Scalar maxPhysRegDepMapSize;$/;"	m	class:ElasticTrace
maxPhysicalRegs	./cpu/o3/rename.hh	/^    PhysRegIndex maxPhysicalRegs;$/;"	m	class:DefaultRename
maxReadyListSize	./cpu/trace/trace_cpu.hh	/^        Stats::Scalar maxReadyListSize;$/;"	m	class:TraceCPU::ElasticDataGen
maxReqSize	./dev/dma_device.hh	/^    const Addr maxReqSize;$/;"	m	class:DmaReadFifo
maxRobDep	./cpu/trace/trace_cpu.hh	/^            static const uint8_t maxRobDep = 2;$/;"	m	class:TraceCPU::ElasticDataGen::GraphNode
maxSQEntries	./cpu/o3/lsq.hh	/^    unsigned maxSQEntries;$/;"	m	class:LSQ
maxSeqCountPerRank	./cpu/testers/traffic_gen/generators.hh	/^    const unsigned int maxSeqCountPerRank;$/;"	m	class:DramRotGen
maxTempStoreSize	./cpu/o3/probe/elastic_trace.hh	/^    Stats::Scalar maxTempStoreSize;$/;"	m	class:ElasticTrace
maxThreadsPerCPU	./arch/null/cpu_dummy.cc	/^int maxThreadsPerCPU = 1;$/;"	v
maxThreadsPerCPU	./cpu/base.cc	/^int maxThreadsPerCPU = 1;$/;"	v
maxVal	./cpu/pred/sat_counter.hh	/^    uint8_t maxVal;$/;"	m	class:SatCounter
maxVnicDistance	./dev/net/sinic.hh	/^    Stats::Scalar maxVnicDistance;$/;"	m	class:Sinic::Device
max_accesses_per_row	./mem/DRAMCtrl.py	/^    max_accesses_per_row = Param.Unsigned(16, "Max accesses per row before "$/;"	v	class:DRAMCtrl
max_bucket	./base/statistics.hh	/^    Counter max_bucket;$/;"	m	class:Stats::HistStor
max_capacity	./mem/XBar.py	/^    max_capacity = Param.MemorySize('8MB', "Maximum capacity of snoop filter")$/;"	v	class:SnoopFilter
max_conf	./mem/cache/prefetch/Prefetcher.py	/^    max_conf = Param.Int(7, "Maximum confidence level")$/;"	v	class:StridePrefetcher
max_insts_all_threads	./cpu/BaseCPU.py	/^    max_insts_all_threads = Param.Counter(0,$/;"	v
max_insts_any_thread	./cpu/BaseCPU.py	/^    max_insts_any_thread = Param.Counter(0,$/;"	v
max_loads	./cpu/testers/memtest/MemTest.py	/^    max_loads = Param.Counter(0, "Number of loads to execute before exiting")$/;"	v	class:MemTest
max_loads_all_threads	./cpu/BaseCPU.py	/^    max_loads_all_threads = Param.Counter(0,$/;"	v
max_loads_any_thread	./cpu/BaseCPU.py	/^    max_loads_any_thread = Param.Counter(0,$/;"	v
max_miss_count	./mem/cache/Cache.py	/^    max_miss_count = Param.Counter(0,$/;"	v	class:BaseCache
max_outstanding	./dev/arm/hdlcd.hh	/^        Bitfield<11,8>  max_outstanding;$/;"	m	class:HDLcd
max_outstanding_requests	./mem/ruby/system/Sequencer.py	/^    max_outstanding_requests = Param.Int(16,$/;"	v	class:RubySequencer
max_packets	./cpu/testers/networktest/NetworkTest.py	/^    max_packets = Param.Counter(0, "Number of packets to send when in fixed_pkts mode")$/;"	v	class:NetworkTest
max_size	./base/pollevent.hh	/^    int max_size;$/;"	m	class:PollQueue
max_size	./mem/ruby/network/garnet/fixed-pipeline/flitBuffer_d.hh	/^    int max_size;$/;"	m	class:flitBuffer_d
max_size	./mem/ruby/network/garnet/flexible-pipeline/flitBuffer.hh	/^    int max_size;$/;"	m	class:flitBuffer
max_stack_size	./sim/Process.py	/^    max_stack_size = Param.MemorySize('64MB', 'maximum size of the stack')$/;"	v	class:Process
max_stack_size	./sim/process.hh	/^    Addr max_stack_size;$/;"	m	class:Process
max_tokens	./mem/ruby/slicc_interface/RubySlicc_Util.hh	/^inline int max_tokens()$/;"	f
max_track	./base/statistics.hh	/^    Counter max_track;$/;"	m	class:Stats::DistStor
max_val	./base/statistics.hh	/^    Counter max_val;$/;"	m	class:Stats::DistStor
max_val	./base/stats/info.hh	/^    Counter max_val;$/;"	m	struct:Stats::DistData
maximumLatency	./dev/pci/pcireg.h	/^        uint8_t maximumLatency;$/;"	m	struct:PCIConfig::__anon26
maxlen	./dev/net/Ethernet.py	/^    maxlen = Param.Int(96, "max portion of packet data to dump")$/;"	v	class:EtherDump
maxlen	./dev/net/etherdump.hh	/^    const unsigned maxlen;$/;"	m	class:EtherDump
maxsize	./dev/net/pktfifo.hh	/^    unsigned maxsize() const { return _maxsize; }$/;"	f	class:PacketFifo
mb	./arch/mips/dt_constants.hh	/^    Bitfield<31>     mb;$/;"	m	namespace:MipsISA
mb	./arch/power/insts/integer.hh	/^    uint32_t mb;$/;"	m	class:PowerISA::IntRotateOp
mb	./arch/power/types.hh	/^    Bitfield<10,  6> mb;$/;"	m	namespace:PowerISA
mbits	./base/bitfield.hh	/^mbits(T val, int first, int last)$/;"	f
mbuf	./kern/tru64/mbuf.hh	/^struct mbuf {$/;"	s	namespace:tru64
mc	./dev/pci/pcireg.h	/^        uint16_t mc;   \/* 0     msie;$/;"	m	struct:MSICAP::__anon28
mcaErrorCode	./arch/x86/regs/misc.hh	/^        Bitfield<15,0> mcaErrorCode;$/;"	m	namespace:X86ISA
mcc	./dev/arm/RealView.py	/^    mcc = VExpressMCC()$/;"	v	class:RealViewEB
mcc	./dev/arm/RealView.py	/^    mcc = VExpressMCC()$/;"	v	class:RealViewPBX
mcc	./dev/arm/RealView.py	/^    mcc = VExpressMCC()$/;"	v	class:VExpress_EMM
mce	./arch/x86/regs/misc.hh	/^        Bitfield<6> mce; \/\/ Machine Check Enable$/;"	m	namespace:X86ISA
mcheckep	./arch/mips/dt_constants.hh	/^    Bitfield<23>     mcheckep;$/;"	m	namespace:MipsISA
mcip	./arch/x86/regs/misc.hh	/^        Bitfield<2> mcip; \/\/ Machine check in-progress$/;"	m	namespace:X86ISA
mcrMrc14TrapToHyp	./arch/arm/utility.cc	/^mcrMrc14TrapToHyp(const MiscRegIndex miscReg, HCR hcr, CPSR cpsr, SCR scr,$/;"	f	namespace:ArmISA
mcrMrc15TrapToHyp	./arch/arm/utility.cc	/^mcrMrc15TrapToHyp(const MiscRegIndex miscReg, HCR hcr, CPSR cpsr, SCR scr,$/;"	f	namespace:ArmISA
mcrMrcIssBuild	./arch/arm/utility.hh	/^mcrMrcIssBuild(bool isRead, uint32_t crm, IntRegIndex rt, uint32_t crn,$/;"	f	namespace:ArmISA
mcrMrcIssExtract	./arch/arm/utility.hh	/^mcrMrcIssExtract(uint32_t iss, bool &isRead, uint32_t &crm, IntRegIndex &rt,$/;"	f	namespace:ArmISA
mcrrMrrc15TrapToHyp	./arch/arm/utility.cc	/^mcrrMrrc15TrapToHyp(const MiscRegIndex miscReg, CPSR cpsr, SCR scr, HSTR hstr,$/;"	f	namespace:ArmISA
mcrrMrrcIssBuild	./arch/arm/utility.hh	/^mcrrMrrcIssBuild(bool isRead, uint32_t crm, IntRegIndex rt, IntRegIndex rt2,$/;"	f	namespace:ArmISA
md	./arch/mips/pra_constants.hh	/^    Bitfield<5>      md;$/;"	m	namespace:MipsISA
md	./dev/pci/pcireg.h	/^        uint16_t md;$/;"	m	struct:MSICAP::__anon28
md5	./base/inet.hh	/^    const uint8_t *md5() const { return opt_data.md5; }$/;"	f	struct:Net::TcpOpt
md_ipr_names	./arch/alpha/ipr.hh	/^enum md_ipr_names {$/;"	g	namespace:AlphaISA
mday	./dev/mc146818.hh	/^            uint8_t mday;$/;"	m	struct:MC146818::__anon17::__anon18
mdic	./dev/net/i8254xGBe_defs.hh	/^    MDIC mdic;$/;"	m	struct:iGbReg::Regs
me	./arch/power/insts/integer.hh	/^    uint32_t me;$/;"	m	class:PowerISA::IntRotateOp
me	./arch/power/types.hh	/^    Bitfield< 5,  1> me;$/;"	m	namespace:PowerISA
mear	./dev/net/ns_gige.hh	/^    uint32_t    mear;$/;"	m	struct:dp_regs
mebi	./python/m5/util/convert.py	/^mebi = kibi * 1024$/;"	v
mediaOpcode	./arch/arm/types.hh	/^        Bitfield<24, 20> mediaOpcode;$/;"	m	namespace:ArmISA
mega	./python/m5/util/convert.py	/^mega = 1.0e6$/;"	v
mem2hex	./base/remote_gdb.cc	/^BaseRemoteGDB::mem2hex(char *vdst, const char *vsrc, int len)$/;"	f	class:BaseRemoteGDB
memAccInst	./cpu/static_inst.hh	/^    StaticInstPtr &memAccInst() const { return nullStaticInstPtr; }$/;"	f	class:StaticInst
memAccPtr	./arch/power/insts/mem.hh	/^    const StaticInstPtr memAccPtr;$/;"	m	class:PowerISA::MemOp
memAccess	./cpu/o3/dyn_inst.hh	/^    Fault memAccess()$/;"	f	class:BaseO3DynInst
memAccessFlags	./arch/arm/insts/macromem.hh	/^    unsigned memAccessFlags;$/;"	m	class:ArmISA::MicroMemOp
memAccessFlags	./arch/arm/insts/macromem.hh	/^    unsigned memAccessFlags;$/;"	m	class:ArmISA::MicroMemPairOp
memAccessFlags	./arch/arm/insts/macromem.hh	/^    unsigned memAccessFlags;$/;"	m	class:ArmISA::MicroNeonMemOp
memAccessFlags	./arch/arm/insts/mem64.hh	/^    unsigned memAccessFlags;$/;"	m	class:ArmISA::Memory64
memAccessFlags	./arch/power/insts/mem.hh	/^    unsigned memAccessFlags;$/;"	m	class:PowerISA::MemOp
memAddr	./dev/pci/host.hh	/^        Addr memAddr(Addr addr) const { return host.memAddr(busAddr, addr); }$/;"	f	class:PciHost::DeviceInterface
memAllocCounter	./cpu/o3/dep_graph.hh	/^    unsigned memAllocCounter;$/;"	m	class:DependencyGraph
memAttr	./arch/arm/table_walker.hh	/^        uint8_t memAttr() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
memAttrs	./arch/arm/table_walker.cc	/^TableWalker::memAttrs(ThreadContext *tc, TlbEntry &te, SCTLR sctlr,$/;"	f	class:TableWalker
memAttrsAArch64	./arch/arm/table_walker.cc	/^TableWalker::memAttrsAArch64(ThreadContext *tc, TlbEntry &te, uint8_t attrIndx,$/;"	f	class:TableWalker
memAttrsLPAE	./arch/arm/table_walker.cc	/^TableWalker::memAttrsLPAE(ThreadContext *tc, TlbEntry &te,$/;"	f	class:TableWalker
memData	./cpu/base_dyn_inst.hh	/^    uint8_t *memData;$/;"	m	class:BaseDynInst
memDepHash	./cpu/o3/mem_dep_unit.hh	/^    MemDepHash memDepHash;$/;"	m	class:MemDepUnit
memDepReady	./cpu/o3/mem_dep_unit.hh	/^        bool memDepReady;$/;"	m	class:MemDepUnit::MemDepEntry
memDepUnit	./cpu/o3/inst_queue.hh	/^    MemDepUnit memDepUnit[Impl::MaxThreads];$/;"	m	class:InstructionQueue
memDepViolator	./cpu/o3/lsq_unit.hh	/^    DynInstPtr memDepViolator;$/;"	m	class:LSQUnit
memFlags	./arch/x86/insts/microldstop.hh	/^        const Request::FlagsType memFlags;$/;"	m	class:X86ISA::LdStOp
memInvalidate	./arch/generic/tlb.hh	/^    void memInvalidate() { flushAll(); }$/;"	f	class:BaseTLB
memInvalidate	./mem/cache/cache.cc	/^Cache::memInvalidate()$/;"	f	class:Cache
memInvalidate	./python/m5/simulate.py	/^def memInvalidate(root):$/;"	f
memInvalidate	./sim/sim_object.hh	/^    virtual void memInvalidate() {};$/;"	f	class:SimObject
memMasterPort	./mem/ruby/system/RubyPort.hh	/^    MemMasterPort memMasterPort;$/;"	m	class:RubyPort
memOpDone	./cpu/base_dyn_inst.hh	/^    bool memOpDone() const { return instFlags[MemOpDone]; }$/;"	f	class:BaseDynInst
memOpDone	./cpu/base_dyn_inst.hh	/^    void memOpDone(bool f) { instFlags[MemOpDone] = f; }$/;"	f	class:BaseDynInst
memOpsPred	./cpu/o3/store_set.hh	/^    int memOpsPred;$/;"	m	class:StoreSet
memOrderViolationEvents	./cpu/o3/iew.hh	/^    Stats::Scalar memOrderViolationEvents;$/;"	m	class:DefaultIEW
memProxy	./dev/virtio/base.hh	/^    PortProxy &memProxy;$/;"	m	class:VirtQueue
memProxy	./dev/virtio/base.hh	/^    PortProxy *memProxy;$/;"	m	class:VirtDescriptor
memReadCallback	./dev/arm/ufs_device.hh	/^        Callback* memReadCallback;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
memReadCallback	./dev/arm/ufs_device.hh	/^    Callback* memReadCallback;$/;"	m	class:UFSHostDevice
memReq	./cpu/checker/cpu.hh	/^    RequestPtr memReq;$/;"	m	class:CheckerCPU
memReq	./cpu/o3/fetch.hh	/^    RequestPtr memReq[Impl::MaxThreads];$/;"	m	class:DefaultFetch
memReqFlags	./cpu/base_dyn_inst.hh	/^    unsigned memReqFlags;$/;"	m	class:BaseDynInst
memSchedPolicy	./mem/dram_ctrl.hh	/^    Enums::MemSched memSchedPolicy;$/;"	m	class:DRAMCtrl
memSidePort	./mem/cache/base.hh	/^    CacheMasterPort *memSidePort;$/;"	m	class:BaseCache
memSize	./arch/arm/linux/atag.hh	/^    void memSize(uint32_t i) { storage[2] = i; }$/;"	f	class:AtagMem
memSize	./sim/system.cc	/^System::memSize() const$/;"	f	class:System
memSlavePort	./mem/ruby/system/RubyPort.hh	/^    MemSlavePort memSlavePort;$/;"	m	class:RubyPort
memStart	./arch/arm/linux/atag.hh	/^    void memStart(uint32_t i) { storage[3] = i; }$/;"	f	class:AtagMem
memUsage	./base/hostinfo.cc	/^memUsage()$/;"	f
memWriteCallback	./dev/arm/ufs_device.hh	/^        Callback* memWriteCallback;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
memWriteback	./cpu/minor/cpu.cc	/^MinorCPU::memWriteback()$/;"	f	class:MinorCPU
memWriteback	./mem/cache/cache.cc	/^Cache::memWriteback()$/;"	f	class:Cache
memWriteback	./mem/ruby/system/RubySystem.cc	/^RubySystem::memWriteback()$/;"	f	class:RubySystem
memWriteback	./python/m5/simulate.py	/^def memWriteback(root):$/;"	f
memWriteback	./sim/sim_object.hh	/^    virtual void memWriteback() {};$/;"	f	class:SimObject
mem_cntrl	./mem/ruby/structures/RubyMemoryControl.hh	/^        RubyMemoryControl* mem_cntrl;$/;"	m	class:RubyMemoryControl::MemCntrlEvent
mem_ctl_latency	./mem/ruby/structures/RubyMemoryControl.py	/^    mem_ctl_latency = Param.Cycles(12, "");$/;"	v	class:RubyMemoryControl
mem_fixed_delay	./mem/ruby/structures/RubyMemoryControl.py	/^    mem_fixed_delay = Param.Cycles(0, "");$/;"	v	class:RubyMemoryControl
mem_master_port	./mem/ruby/system/Sequencer.py	/^    mem_master_port = MasterPort("Ruby mem master port")$/;"	v	class:RubyPort
mem_mode	./sim/System.py	/^    mem_mode = Param.MemoryMode('atomic', "The mode the memory system is in")$/;"	v
mem_random_arbitrate	./mem/ruby/structures/RubyMemoryControl.py	/^    mem_random_arbitrate = Param.Int(0, "");$/;"	v	class:RubyMemoryControl
mem_ranges	./sim/System.py	/^    mem_ranges = VectorParam.AddrRange([], "Ranges that constitute main memory")$/;"	v
mem_sched_policy	./mem/DRAMCtrl.py	/^    mem_sched_policy = Param.MemSched('frfcfs', "Memory scheduling policy")$/;"	v	class:DRAMCtrl
mem_side	./mem/MemChecker.py	/^    mem_side = MasterPort("Alias for master")$/;"	v	class:MemCheckerMonitor
mem_side	./mem/cache/Cache.py	/^    mem_side = MasterPort("Downstream port closer to memory")$/;"	v	class:BaseCache
mem_size	./dev/alpha/access.h	/^    uint64_t    mem_size;               \/\/ 18:$/;"	m	struct:AlphaAccess
mem_size	./dev/mips/access.h	/^    uint64_t    mem_size;               \/\/ 40:$/;"	m	struct:MipsAccess
mem_slave_port	./mem/ruby/system/Sequencer.py	/^    mem_slave_port = SlavePort("Ruby memory port")$/;"	v	class:RubyPort
mem_unit	./arch/alpha/linux/linux.hh	/^       uint64_t mem_unit;  \/* Memory unit size in bytes *\/$/;"	m	struct:AlphaLinux::__anon51
mem_unit	./arch/arm/linux/linux.hh	/^        uint32_t mem_unit;  \/* Memory unit size in bytes *\/$/;"	m	struct:ArmLinux32::__anon76
mem_unit	./arch/arm/linux/linux.hh	/^        uint32_t mem_unit;  \/* Memory unit size in bytes *\/$/;"	m	struct:ArmLinux64::__anon79
mem_unit	./arch/mips/linux/linux.hh	/^       uint32_t mem_unit;  \/* Memory unit size in bytes *\/$/;"	m	struct:MipsLinux::__anon84
mem_unit	./arch/sparc/linux/linux.hh	/^        uint32_t mem_unit;  \/* Memory unit size in bytes *\/$/;"	m	struct:Sparc32Linux::__anon47
mem_unit	./arch/sparc/linux/linux.hh	/^        uint64_t mem_unit;  \/* Memory unit size in bytes *\/$/;"	m	struct:SparcLinux::__anon45
mem_unit	./arch/x86/linux/linux.hh	/^        uint64_t mem_unit;  \/* Memory unit size in bytes *\/$/;"	m	struct:X86Linux64::__anon61
mem_unit	./arch/x86/linux/linux.hh	/^       uint32_t mem_unit;  \/* Memory unit size in bytes *\/$/;"	m	struct:X86Linux32::__anon63
mem_valid	./sim/insttracer.hh	/^    bool mem_valid;$/;"	m	class:Trace::InstRecord
members	./sim/clock_domain.hh	/^    std::vector<Clocked *> members;$/;"	m	class:ClockDomain
memchecker	./mem/MemChecker.py	/^    memchecker = Param.MemChecker("Instance shared with other monitors")$/;"	v	class:MemCheckerMonitor
memchecker	./mem/mem_checker_monitor.hh	/^    MemChecker *memchecker;$/;"	m	class:MemCheckerMonitor
memcntl	./kern/tru64/tru64_syscalls.hh	/^        memcntl = 260,$/;"	e	enum:SystemCalls::__anon102
memdep_count	./cpu/o3/mem_dep_unit.cc	/^MemDepUnit<StoreSet, O3CPUImpl>::MemDepEntry::memdep_count = 0;$/;"	m	class:MemDepUnit::MemDepEntry	file:
memdep_count	./cpu/o3/mem_dep_unit.hh	/^        static int memdep_count;$/;"	m	class:MemDepUnit::MemDepEntry
memdep_erase	./cpu/o3/mem_dep_unit.cc	/^MemDepUnit<StoreSet, O3CPUImpl>::MemDepEntry::memdep_erase = 0;$/;"	m	class:MemDepUnit::MemDepEntry	file:
memdep_erase	./cpu/o3/mem_dep_unit.hh	/^        static int memdep_erase;$/;"	m	class:MemDepUnit::MemDepEntry
memdep_insert	./cpu/o3/mem_dep_unit.cc	/^MemDepUnit<StoreSet, O3CPUImpl>::MemDepEntry::memdep_insert = 0;$/;"	m	class:MemDepUnit::MemDepEntry	file:
memdep_insert	./cpu/o3/mem_dep_unit.hh	/^        static int memdep_insert;$/;"	m	class:MemDepUnit::MemDepEntry
memories	./mem/physical.hh	/^    std::vector<AbstractMemory*> memories;$/;"	m	class:PhysicalMemory
memories	./sim/System.py	/^    memories = VectorParam.AbstractMemory(Self.all,$/;"	v
memory	./mem/dram_ctrl.hh	/^        DRAMCtrl& memory;$/;"	m	class:DRAMCtrl::MemoryPort
memory	./mem/dram_ctrl.hh	/^        DRAMCtrl& memory;$/;"	m	class:DRAMCtrl::Rank
memory	./mem/dramsim2.hh	/^        DRAMSim2& memory;$/;"	m	class:DRAMSim2::MemoryPort
memory	./mem/ruby/slicc_interface/Controller.py	/^    memory = MasterPort("Port for attaching a memory controller")$/;"	v	class:RubyController
memory	./mem/ruby/structures/RubyMemoryControl.hh	/^        RubyMemoryControl& memory;$/;"	m	class:RubyMemoryControl::MemoryPort
memory	./mem/simple_mem.hh	/^        SimpleMemory& memory;$/;"	m	class:SimpleMemory::MemoryPort
memoryCommitLimit	./cpu/minor/execute.hh	/^    unsigned int memoryCommitLimit;$/;"	m	class:Minor::Execute
memoryIssueLimit	./cpu/minor/execute.hh	/^    unsigned int memoryIssueLimit;$/;"	m	class:Minor::Execute
memoryMode	./sim/system.hh	/^    Enums::MemoryMode memoryMode;$/;"	m	class:System
memoryPort	./mem/ruby/slicc_interface/AbstractController.hh	/^    MemoryPort memoryPort;$/;"	m	class:AbstractController
memorySlots	./cpu/kvm/vm.hh	/^    std::vector<MemorySlot> memorySlots;$/;"	m	class:KvmVM
memory_mode	./cpu/BaseCPU.py	/^    def memory_mode(cls):$/;"	f
memory_mode	./cpu/kvm/BaseKvmCPU.py	/^    def memory_mode(cls):$/;"	f
memory_mode	./cpu/minor/MinorCPU.py	/^    def memory_mode(cls):$/;"	m	class:MinorCPU
memory_mode	./cpu/o3/O3CPU.py	/^    def memory_mode(cls):$/;"	m	class:DerivO3CPU
memory_mode	./cpu/simple/AtomicSimpleCPU.py	/^    def memory_mode(cls):$/;"	m	class:AtomicSimpleCPU
memory_mode	./cpu/simple/TimingSimpleCPU.py	/^    def memory_mode(cls):$/;"	m	class:TimingSimpleCPU
memory_mode	./cpu/trace/TraceCPU.py	/^    def memory_mode(cls):$/;"	m	class:TraceCPU
memory_size	./cpu/testers/networktest/NetworkTest.py	/^    memory_size = Param.Int(65536, "memory size")$/;"	v	class:NetworkTest
memory_size_bits	./mem/ruby/system/RubySystem.py	/^    memory_size_bits = Param.UInt32(64,$/;"	v	class:RubySystem
memsetBlob	./mem/fs_translating_port_proxy.cc	/^FSTranslatingPortProxy::memsetBlob(Addr address, uint8_t v, int size) const$/;"	f	class:FSTranslatingPortProxy
memsetBlob	./mem/port_proxy.cc	/^PortProxy::memsetBlob(Addr addr, uint8_t v, int size) const$/;"	f	class:PortProxy
memsetBlob	./mem/se_translating_port_proxy.cc	/^SETranslatingPortProxy::memsetBlob(Addr addr, uint8_t val, int size) const$/;"	f	class:SETranslatingPortProxy
memtest	./cpu/testers/memtest/memtest.hh	/^        MemTest &memtest;$/;"	m	class:MemTest::CpuPort
merge	./arch/x86/insts/static_inst.hh	/^        inline uint64_t merge(uint64_t into, uint64_t val, int size) const$/;"	f	class:X86ISA::X86StaticInst
merge	./mem/ruby/filters/BlockBloomFilter.cc	/^BlockBloomFilter::merge(AbstractBloomFilter * other_filter)$/;"	f	class:BlockBloomFilter
merge	./mem/ruby/filters/BulkBloomFilter.cc	/^BulkBloomFilter::merge(AbstractBloomFilter * other_filter)$/;"	f	class:BulkBloomFilter
merge	./mem/ruby/filters/H3BloomFilter.cc	/^H3BloomFilter::merge(AbstractBloomFilter *other_filter)$/;"	f	class:H3BloomFilter
merge	./mem/ruby/filters/LSB_CountingBloomFilter.cc	/^LSB_CountingBloomFilter::merge(AbstractBloomFilter * other_filter)$/;"	f	class:LSB_CountingBloomFilter
merge	./mem/ruby/filters/MultiBitSelBloomFilter.cc	/^MultiBitSelBloomFilter::merge(AbstractBloomFilter *other_filter)$/;"	f	class:MultiBitSelBloomFilter
merge	./mem/ruby/filters/MultiGrainBloomFilter.cc	/^MultiGrainBloomFilter::merge(AbstractBloomFilter *other_filter)$/;"	f	class:MultiGrainBloomFilter
merge	./mem/ruby/filters/NonCountingBloomFilter.cc	/^NonCountingBloomFilter::merge(AbstractBloomFilter *other_filter)$/;"	f	class:NonCountingBloomFilter
mergeFrom	./mem/ruby/common/SubBlock.hh	/^    void mergeFrom(const DataBlock& data) { internalMergeFrom(data); }$/;"	f	class:SubBlock
mergeTe	./arch/arm/stage2_lookup.cc	/^Stage2LookUp::mergeTe(RequestPtr req, BaseTLB::Mode mode)$/;"	f	class:Stage2LookUp
mergeTo	./mem/ruby/common/SubBlock.hh	/^    void mergeTo(DataBlock& data) const { internalMergeTo(data); }$/;"	f	class:SubBlock
mergedWrBursts	./mem/dram_ctrl.hh	/^    Stats::Scalar mergedWrBursts;$/;"	m	class:DRAMCtrl
mergesWith	./base/addr_range.hh	/^    bool mergesWith(const AddrRange& r) const$/;"	f	class:AddrRange
message	./arch/generic/debugfaults.hh	/^    std::string message;$/;"	m	class:GenericISA::M5DebugFault
message	./dev/arm/ufs_device.hh	/^        struct UPIUMessage message;$/;"	m	struct:UFSHostDevice::SCSIReply	typeref:struct:UFSHostDevice::SCSIReply::UPIUMessage
message	./dev/i2c/bus.hh	/^    uint8_t message;$/;"	m	class:I2CBus
message	./sim/cxx_manager.hh	/^        std::string message;$/;"	m	class:CxxConfigManager::Exception
method	./base/statistics.hh	/^    MethodPointer method;$/;"	m	class:Stats::MethodProxy
method	./base/statistics.hh	/^    method(T *obj,  V (T::*method)() const)$/;"	f	class:Stats::ValueBase
methodId	./mem/slicc/symbols/Type.py	/^    def methodId(self, name, param_type_vec):$/;"	m	class:Type
methodIdAbstract	./mem/slicc/symbols/Type.py	/^    def methodIdAbstract(self, name, param_type_vec):$/;"	m	class:Type
mfde	./arch/x86/regs/misc.hh	/^        Bitfield<18> mfde; \/\/ MtrrFixDramEn$/;"	m	namespace:X86ISA
mfdm	./arch/x86/regs/misc.hh	/^        Bitfield<19> mfdm; \/\/ MtrrFixDramModEn$/;"	m	namespace:X86ISA
mh_data	./kern/tru64/mbuf.hh	/^    Addr        mh_data;        \/\/ 0x10$/;"	m	struct:tru64::m_hdr
mh_flags	./kern/tru64/mbuf.hh	/^    int32_t     mh_flags;       \/\/ 0x20$/;"	m	struct:tru64::m_hdr
mh_foo	./kern/tru64/mbuf.hh	/^    Addr        mh_foo[4];      \/\/ 0x28, 0x30, 0x38, 0x40$/;"	m	struct:tru64::m_hdr
mh_len	./kern/tru64/mbuf.hh	/^    int32_t     mh_len;         \/\/ 0x18$/;"	m	struct:tru64::m_hdr
mh_next	./kern/tru64/mbuf.hh	/^    Addr        mh_next;        \/\/ 0x00$/;"	m	struct:tru64::m_hdr
mh_nextpkt	./kern/tru64/mbuf.hh	/^    Addr        mh_nextpkt;     \/\/ 0x08$/;"	m	struct:tru64::m_hdr
mh_pad0	./kern/tru64/mbuf.hh	/^    int32_t     mh_pad0;        \/\/ 0x24$/;"	m	struct:tru64::m_hdr
mh_type	./kern/tru64/mbuf.hh	/^    int32_t     mh_type;        \/\/ 0x1C$/;"	m	struct:tru64::m_hdr
mhz	./kern/tru64/tru64.hh	/^        uint32_t     mhz;               \/\/!< mhz$/;"	m	struct:Tru64::cpu_info
mibc	./dev/net/ns_gige.hh	/^    uint32_t    mibc;$/;"	m	struct:dp_regs
micro	./python/m5/util/convert.py	/^micro = 1.0e-6$/;"	v
microOpCount	./cpu/trace/trace_cpu.hh	/^            uint64_t microOpCount;$/;"	m	class:TraceCPU::ElasticDataGen::InputStream
microOps	./arch/arm/insts/pred_inst.hh	/^    StaticInstPtr * microOps;$/;"	m	class:ArmISA::PredMacroOp
microPC	./arch/generic/types.hh	/^    microPC() const$/;"	f	class:GenericISA::DelaySlotUPCState
microPC	./arch/generic/types.hh	/^    microPC() const$/;"	f	class:GenericISA::PCStateBase
microPC	./arch/generic/types.hh	/^    microPC() const$/;"	f	class:GenericISA::UPCState
microPC	./cpu/base_dyn_inst.hh	/^    Addr microPC() const { return pc.microPC(); }$/;"	f	class:BaseDynInst
microPC	./cpu/checker/cpu.hh	/^    MicroPC microPC() { return thread->microPC(); }$/;"	f	class:CheckerCPU
microPC	./cpu/checker/thread_context.hh	/^    MicroPC microPC()$/;"	f	class:CheckerThreadContext
microPC	./cpu/o3/commit.hh	/^    Addr microPC(ThreadID tid) { return pc[tid].microPC(); }$/;"	f	class:DefaultCommit
microPC	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::microPC(ThreadID tid)$/;"	f	class:FullO3CPU
microPC	./cpu/o3/thread_context.hh	/^    virtual MicroPC microPC()$/;"	f	class:O3ThreadContext
microPC	./cpu/simple_thread.hh	/^    microPC()$/;"	f	class:SimpleThread
microPC	./cpu/thread_context.hh	/^    MicroPC microPC() { return actualTC->microPC(); }$/;"	f	class:ProxyThreadContext
microcode	./arch/x86/isa/insts/general_purpose/arithmetic/__init__.py	/^microcode = ""$/;"	v
microcode	./arch/x86/isa/insts/general_purpose/compare_and_test/__init__.py	/^microcode = ""$/;"	v
microcode	./arch/x86/isa/insts/general_purpose/control_transfer/__init__.py	/^microcode = ""$/;"	v
microcode	./arch/x86/isa/insts/general_purpose/data_conversion/__init__.py	/^microcode = ""$/;"	v
microcode	./arch/x86/isa/insts/general_purpose/data_conversion/ascii_adjust.py	/^microcode = ""$/;"	v
microcode	./arch/x86/isa/insts/general_purpose/data_conversion/bcd_adjust.py	/^microcode = ""$/;"	v
microcode	./arch/x86/isa/insts/general_purpose/data_conversion/extract_sign_mask.py	/^microcode = ""$/;"	v
microcode	./arch/x86/isa/insts/general_purpose/data_transfer/__init__.py	/^microcode = ""$/;"	v
microcode	./arch/x86/isa/insts/general_purpose/flags/__init__.py	/^microcode = ""$/;"	v
microcode	./arch/x86/isa/insts/general_purpose/input_output/__init__.py	/^microcode = ""$/;"	v
microcode	./arch/x86/isa/insts/general_purpose/load_segment_registers.py	/^microcode = ""$/;"	v
microcode	./arch/x86/isa/insts/general_purpose/rotate_and_shift/__init__.py	/^microcode = ""$/;"	v
microcode	./arch/x86/isa/insts/general_purpose/string/__init__.py	/^microcode = ""$/;"	v
microcode	./arch/x86/isa/insts/romutil.py	/^    "startLabel" : "longModeInterrupt",$/;"	v
microcode	./arch/x86/isa/insts/system/__init__.py	/^microcode = ""$/;"	v
microcodeRom	./cpu/base.hh	/^    TheISA::MicrocodeRom microcodeRom;$/;"	m	class:BaseCPU
microopPC	./cpu/minor/decode.hh	/^    TheISA::PCState microopPC;$/;"	m	class:Minor::Decode
microops	./arch/micro_asm_test.py	/^microops = {$/;"	v
microops	./arch/x86/insts/macroop.hh	/^    StaticInstPtr * microops;$/;"	m	class:X86ISA::MacroopBase
microseconds	./dev/net/etherdump.cc	/^    uint32_t microseconds;$/;"	m	struct:pcap_pkthdr	file:
mid	./dev/pci/pcireg.h	/^        uint16_t mid;  \/* 0:7  cid$/;"	m	struct:MSICAP::__anon28
middleButton	./dev/ps2.hh	/^    Bitfield<2> middleButton;$/;"	m	namespace:Ps2
midr	./arch/arm/ArmISA.py	/^    midr = Param.UInt32(0x410fc0f0, "MIDR value")$/;"	v	class:ArmISA
milli	./python/m5/util/convert.py	/^milli = 1.0e-3$/;"	v
min	./base/statistics.hh	/^        Counter min;$/;"	m	struct:Stats::DistStor::Params
min	./base/stats/info.hh	/^    Counter min;$/;"	m	struct:Stats::DistData
min	./dev/mc146818.hh	/^            uint8_t min;$/;"	m	struct:MC146818::__anon17::__anon18
minBankPrep	./mem/dram_ctrl.cc	/^DRAMCtrl::minBankPrep(const deque<DRAMPacket*>& queue,$/;"	f	class:DRAMCtrl
minConf	./mem/cache/prefetch/stride.hh	/^    const int minConf;$/;"	m	class:StridePrefetcher
minPeriod	./cpu/testers/traffic_gen/generators.hh	/^    const Tick minPeriod;$/;"	m	class:LinearGen
minPeriod	./cpu/testers/traffic_gen/generators.hh	/^    const Tick minPeriod;$/;"	m	class:RandomGen
minWritesPerSwitch	./mem/dram_ctrl.hh	/^    const uint32_t minWritesPerSwitch;$/;"	m	class:DRAMCtrl
min_alrm	./dev/mc146818.hh	/^            uint8_t min_alrm;$/;"	m	struct:MC146818::__anon17::__anon18
min_bucket	./base/statistics.hh	/^    Counter min_bucket;$/;"	m	class:Stats::HistStor
min_conf	./mem/cache/prefetch/Prefetcher.py	/^    min_conf = Param.Int(0, "Minimum confidence level")$/;"	v	class:StridePrefetcher
min_track	./base/statistics.hh	/^    Counter min_track;$/;"	m	class:Stats::DistStor
min_val	./base/statistics.hh	/^    Counter min_val;$/;"	m	class:Stats::DistStor
min_val	./base/stats/info.hh	/^    Counter min_val;$/;"	m	struct:Stats::DistData
min_writes_per_switch	./mem/DRAMCtrl.py	/^    min_writes_per_switch = 8$/;"	v	class:HMC_2500_x32
min_writes_per_switch	./mem/DRAMCtrl.py	/^    min_writes_per_switch = Param.Unsigned(16, "Minimum write bursts before "$/;"	v	class:DRAMCtrl
mincore	./kern/tru64/tru64_syscalls.hh	/^        mincore = 78,$/;"	e	enum:SystemCalls::__anon102
minimumCommitCycle	./cpu/minor/dyn_inst.hh	/^    Cycles minimumCommitCycle;$/;"	m	class:Minor::MinorDynInst
minimumGrant	./dev/pci/pcireg.h	/^        uint8_t minimumGrant;$/;"	m	struct:PCIConfig::__anon26
minor	./arch/x86/bios/SMBios.py	/^    minor = Param.UInt8(0, "minor version number")$/;"	v	class:X86SMBiosBiosInformation
minorMakeOpClassSet	./cpu/minor/MinorCPU.py	/^def minorMakeOpClassSet(op_classes):$/;"	f
minorTrace	./cpu/minor/activity.cc	/^MinorActivityRecorder::minorTrace() const$/;"	f	class:Minor::MinorActivityRecorder
minorTrace	./cpu/minor/buffers.hh	/^    minorTrace() const$/;"	f	class:Minor::InputBuffer
minorTrace	./cpu/minor/buffers.hh	/^    minorTrace() const$/;"	f	class:Minor::MinorBuffer
minorTrace	./cpu/minor/buffers.hh	/^    minorTrace() const$/;"	f	class:Minor::Queue
minorTrace	./cpu/minor/buffers.hh	/^    void minorTrace() const { buffer.minorTrace(); }$/;"	f	class:Minor::Latch
minorTrace	./cpu/minor/decode.cc	/^Decode::minorTrace() const$/;"	f	class:Minor::Decode
minorTrace	./cpu/minor/execute.cc	/^Execute::minorTrace() const$/;"	f	class:Minor::Execute
minorTrace	./cpu/minor/fetch1.cc	/^Fetch1::minorTrace() const$/;"	f	class:Minor::Fetch1
minorTrace	./cpu/minor/fetch2.cc	/^Fetch2::minorTrace() const$/;"	f	class:Minor::Fetch2
minorTrace	./cpu/minor/lsq.cc	/^LSQ::StoreBuffer::minorTrace() const$/;"	f	class:Minor::LSQ::StoreBuffer
minorTrace	./cpu/minor/lsq.cc	/^LSQ::minorTrace() const$/;"	f	class:Minor::LSQ
minorTrace	./cpu/minor/pipeline.cc	/^Pipeline::minorTrace() const$/;"	f	class:Minor::Pipeline
minorTrace	./cpu/minor/scoreboard.cc	/^Scoreboard::minorTrace() const$/;"	f	class:Minor::Scoreboard
minorTraceInst	./cpu/minor/dyn_inst.cc	/^MinorDynInst::minorTraceInst(const Named &named_object) const$/;"	f	class:Minor::MinorDynInst
minorTraceResponseLine	./cpu/minor/fetch1.cc	/^Fetch1::minorTraceResponseLine(const std::string &name,$/;"	f	class:Minor::Fetch1
minorVer	./arch/x86/bios/smbios.hh	/^    uint8_t minorVer;$/;"	m	class:X86ISA::SMBios::BiosInformation
minorVersion	./arch/x86/bios/smbios.hh	/^        uint8_t minorVersion;$/;"	m	struct:X86ISA::SMBios::SMBiosTable::SMBiosHeader
minor_version	./arch/x86/bios/SMBios.py	/^    minor_version = Param.UInt8(5, "minor version number")$/;"	v	class:X86SMBiosSMBiosTable
miscOpcode	./arch/arm/types.hh	/^        Bitfield<7,  4>  miscOpcode;$/;"	m	namespace:ArmISA
miscRegContext	./arch/arm/tlb.hh	/^    ContextID miscRegContext;$/;"	m	class:ArmISA::TLB
miscRegFile	./arch/mips/isa.hh	/^        std::vector<std::vector<MiscReg> > miscRegFile;$/;"	m	class:MipsISA::ISA
miscRegFile_WriteMask	./arch/mips/isa.hh	/^        std::vector<std::vector<MiscReg> > miscRegFile_WriteMask;$/;"	m	class:MipsISA::ISA
miscRegIdxs	./cpu/checker/cpu.hh	/^    std::queue<int> miscRegIdxs;$/;"	m	class:CheckerCPU
miscRegMap	./arch/arm/kvm/armv8_cpu.cc	/^const std::vector<ArmV8KvmCPU::MiscRegInfo> ArmV8KvmCPU::miscRegMap = {$/;"	m	class:ArmV8KvmCPU	file:
miscRegMap	./arch/arm/kvm/armv8_cpu.hh	/^    static const std::vector<ArmV8KvmCPU::MiscRegInfo> miscRegMap;$/;"	m	class:ArmV8KvmCPU
miscRegName	./arch/arm/miscregs.hh	/^    const char * const miscRegName[] = {$/;"	m	namespace:ArmISA
miscRegName	./arch/power/miscregs.hh	/^const char * const miscRegName[NUM_MISCREGS] = {$/;"	m	namespace:PowerISA
miscRegNames	./arch/mips/isa.cc	/^ISA::miscRegNames[NumMiscRegs] =$/;"	m	class:MipsISA::ISA	file:
miscRegNames	./arch/mips/isa.hh	/^        static std::string miscRegNames[NumMiscRegs];$/;"	m	class:MipsISA::ISA
miscRegTranslateACTLR_EL1	./arch/arm/isa.hh	/^        miscRegTranslateACTLR_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateACTLR_EL2	./arch/arm/isa.hh	/^        miscRegTranslateACTLR_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateAFSR0_EL1	./arch/arm/isa.hh	/^        miscRegTranslateAFSR0_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateAFSR0_EL2	./arch/arm/isa.hh	/^        miscRegTranslateAFSR0_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateAFSR1_EL1	./arch/arm/isa.hh	/^        miscRegTranslateAFSR1_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateAFSR1_EL2	./arch/arm/isa.hh	/^        miscRegTranslateAFSR1_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateAMAIR_EL1	./arch/arm/isa.hh	/^        miscRegTranslateAMAIR_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCNTFRQ_EL0	./arch/arm/isa.hh	/^        miscRegTranslateCNTFRQ_EL0,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCNTHCTL_EL2	./arch/arm/isa.hh	/^        miscRegTranslateCNTHCTL_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCNTHP_CTL_EL2	./arch/arm/isa.hh	/^        miscRegTranslateCNTHP_CTL_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCNTHP_CVAL_EL2	./arch/arm/isa.hh	/^        miscRegTranslateCNTHP_CVAL_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCNTHP_TVAL_EL2	./arch/arm/isa.hh	/^        miscRegTranslateCNTHP_TVAL_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCNTKCTL_EL1	./arch/arm/isa.hh	/^        miscRegTranslateCNTKCTL_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCNTPCT_EL0	./arch/arm/isa.hh	/^        miscRegTranslateCNTPCT_EL0,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCNTP_CTL_EL0	./arch/arm/isa.hh	/^        miscRegTranslateCNTP_CTL_EL0,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCNTP_CVAL_EL0	./arch/arm/isa.hh	/^        miscRegTranslateCNTP_CVAL_EL0,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCNTP_TVAL_EL0	./arch/arm/isa.hh	/^        miscRegTranslateCNTP_TVAL_EL0,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCNTVCT_EL0	./arch/arm/isa.hh	/^        miscRegTranslateCNTVCT_EL0,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCNTVOFF_EL2	./arch/arm/isa.hh	/^        miscRegTranslateCNTVOFF_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCNTV_CTL_EL0	./arch/arm/isa.hh	/^        miscRegTranslateCNTV_CTL_EL0,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCNTV_CVAL_EL0	./arch/arm/isa.hh	/^        miscRegTranslateCNTV_CVAL_EL0,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCNTV_TVAL_EL0	./arch/arm/isa.hh	/^        miscRegTranslateCNTV_TVAL_EL0,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCONTEXTIDR_EL1	./arch/arm/isa.hh	/^        miscRegTranslateCONTEXTIDR_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCPACR_EL1	./arch/arm/isa.hh	/^        miscRegTranslateCPACR_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCPTR_EL2	./arch/arm/isa.hh	/^        miscRegTranslateCPTR_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateCSSELR_EL1	./arch/arm/isa.hh	/^        miscRegTranslateCSSELR_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateDACR32_EL2	./arch/arm/isa.hh	/^        miscRegTranslateDACR32_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateESR_EL2	./arch/arm/isa.hh	/^        miscRegTranslateESR_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateFAR_EL1	./arch/arm/isa.hh	/^        miscRegTranslateFAR_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateFAR_EL2	./arch/arm/isa.hh	/^        miscRegTranslateFAR_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateHACR_EL2	./arch/arm/isa.hh	/^        miscRegTranslateHACR_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateHCR_EL2	./arch/arm/isa.hh	/^        miscRegTranslateHCR_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateHPFAR_EL2	./arch/arm/isa.hh	/^        miscRegTranslateHPFAR_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateHSTR_EL2	./arch/arm/isa.hh	/^        miscRegTranslateHSTR_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateIFSR32_EL2	./arch/arm/isa.hh	/^        miscRegTranslateIFSR32_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateMAIR_EL1	./arch/arm/isa.hh	/^        miscRegTranslateMAIR_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateMAIR_EL2	./arch/arm/isa.hh	/^        miscRegTranslateMAIR_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateMDCR_EL2	./arch/arm/isa.hh	/^        miscRegTranslateMDCR_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateMax	./arch/arm/isa.hh	/^        miscRegTranslateMax$/;"	e	enum:ArmISA::translateTable
miscRegTranslatePAR_EL1	./arch/arm/isa.hh	/^        miscRegTranslatePAR_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateSCTLR_EL1	./arch/arm/isa.hh	/^        miscRegTranslateSCTLR_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateSCTLR_EL2	./arch/arm/isa.hh	/^        miscRegTranslateSCTLR_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateSDER32_EL3	./arch/arm/isa.hh	/^        miscRegTranslateSDER32_EL3,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateTCR_EL1	./arch/arm/isa.hh	/^        miscRegTranslateTCR_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateTCR_EL2	./arch/arm/isa.hh	/^        miscRegTranslateTCR_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateTEECR32_EL1	./arch/arm/isa.hh	/^        miscRegTranslateTEECR32_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateTEEHBR32_EL1	./arch/arm/isa.hh	/^        miscRegTranslateTEEHBR32_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateTPIDRRO_EL0	./arch/arm/isa.hh	/^        miscRegTranslateTPIDRRO_EL0,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateTPIDR_EL0	./arch/arm/isa.hh	/^        miscRegTranslateTPIDR_EL0,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateTPIDR_EL1	./arch/arm/isa.hh	/^        miscRegTranslateTPIDR_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateTPIDR_EL2	./arch/arm/isa.hh	/^        miscRegTranslateTPIDR_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateTTBR0_EL1	./arch/arm/isa.hh	/^        miscRegTranslateTTBR0_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateTTBR0_EL2	./arch/arm/isa.hh	/^        miscRegTranslateTTBR0_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateTTBR1_EL1	./arch/arm/isa.hh	/^        miscRegTranslateTTBR1_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateVBAR_EL1	./arch/arm/isa.hh	/^        miscRegTranslateVBAR_EL1,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateVBAR_EL2	./arch/arm/isa.hh	/^        miscRegTranslateVBAR_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateVTCR_EL2	./arch/arm/isa.hh	/^        miscRegTranslateVTCR_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegTranslateVTTBR_EL2	./arch/arm/isa.hh	/^        miscRegTranslateVTTBR_EL2,$/;"	e	enum:ArmISA::translateTable
miscRegValid	./arch/arm/tlb.hh	/^    bool miscRegValid;$/;"	m	class:ArmISA::TLB
miscRegfileReads	./cpu/o3/cpu.hh	/^    Stats::Scalar miscRegfileReads;$/;"	m	class:FullO3CPU
miscRegfileWrites	./cpu/o3/cpu.hh	/^    Stats::Scalar miscRegfileWrites;$/;"	m	class:FullO3CPU
miscRegs	./arch/arm/isa.hh	/^        MiscReg miscRegs[NumMiscRegs];$/;"	m	class:ArmISA::ISA
miscRegs	./arch/power/isa.hh	/^    MiscReg miscRegs[NumMiscRegs];$/;"	m	class:PowerISA::ISA
miscv	./arch/x86/regs/misc.hh	/^        Bitfield<59> miscv; \/\/ Miscellaneous-error register valid$/;"	m	namespace:X86ISA
mispredPC	./cpu/o3/comm.hh	/^        Addr mispredPC;$/;"	m	struct:TimeBufStruct::decodeComm
mispredPC	./cpu/o3/comm.hh	/^    Addr mispredPC[Impl::MaxThreads];$/;"	m	struct:DefaultIEWDefaultCommit
mispredictInst	./cpu/o3/comm.hh	/^        DynInstPtr mispredictInst;  \/\/ *F$/;"	m	struct:TimeBufStruct::commitComm
mispredictInst	./cpu/o3/comm.hh	/^        DynInstPtr mispredictInst;$/;"	m	struct:TimeBufStruct::decodeComm
mispredictInst	./cpu/o3/comm.hh	/^    DynInstPtr mispredictInst[Impl::MaxThreads];$/;"	m	struct:DefaultIEWDefaultCommit
mispredicted	./cpu/base_dyn_inst.hh	/^    bool mispredicted()$/;"	f	class:BaseDynInst
misrouting	./mem/ruby/network/fault_model/FaultModel.hh	/^        misrouting,$/;"	e	enum:FaultModel::fault_type
missCount	./mem/cache/base.hh	/^    Counter missCount;$/;"	m	class:BaseCache
missLatency	./mem/cache/base.hh	/^    Stats::Vector missLatency[MemCmd::NUM_MEM_CMDS];$/;"	m	class:BaseCache
missRate	./mem/cache/base.hh	/^    Stats::Formula missRate[MemCmd::NUM_MEM_CMDS];$/;"	m	class:BaseCache
misses	./arch/arm/tlb.hh	/^    Stats::Formula misses;$/;"	m	class:ArmISA::TLB
misses	./arch/mips/tlb.hh	/^    Stats::Formula misses;$/;"	m	class:MipsISA::TLB
misses	./arch/power/tlb.hh	/^    Stats::Formula misses;$/;"	m	class:PowerISA::TLB
misses	./mem/cache/base.hh	/^    Stats::Vector misses[MemCmd::NUM_MEM_CMDS];$/;"	m	class:BaseCache
misses	./mem/cache/tags/fa_lru.hh	/^    Stats::Vector misses;$/;"	m	class:FALRU
mkdir	./kern/tru64/tru64_syscalls.hh	/^        mkdir = 136,$/;"	e	enum:SystemCalls::__anon102
mkdirFunc	./sim/syscall_emul.cc	/^mkdirFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)$/;"	f
mknod	./kern/tru64/tru64_syscalls.hh	/^        mknod = 14,$/;"	e	enum:SystemCalls::__anon102
mkutctime	./base/time.cc	/^mkutctime(struct tm *time)$/;"	f
mm	./arch/sparc/miscregs.hh	/^    Bitfield<7, 6> mm;$/;"	m	namespace:SparcISA
mmap	./kern/tru64/tru64_syscalls.hh	/^        mmap = 71,$/;"	e	enum:SystemCalls::__anon102
mmapFunc	./sim/syscall_emul.hh	/^mmapFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)$/;"	f
mmapGrowsDown	./arch/x86/linux/linux.hh	/^    static bool mmapGrowsDown() { return true; }$/;"	f	class:X86Linux32
mmapGrowsDown	./kern/operatingsystem.hh	/^    static bool mmapGrowsDown() { return false; }$/;"	f	class:OperatingSystem
mmapGrowsUp	./kern/operatingsystem.hh	/^    static const bool mmapGrowsUp = true;$/;"	m	class:OperatingSystem
mmapPerf	./cpu/kvm/perfevent.cc	/^PerfKvmCounter::mmapPerf(int pages)$/;"	f	class:PerfKvmCounter
mmapUsingNoReserve	./mem/physical.hh	/^    const bool mmapUsingNoReserve;$/;"	m	class:PhysicalMemory
mmap_end	./sim/process.hh	/^    Addr mmap_end;$/;"	m	class:Process
mmap_start	./sim/process.hh	/^    Addr mmap_start;$/;"	m	class:Process
mmap_using_noreserve	./sim/System.py	/^                                          "without reserving swap")$/;"	v
mmask	./dev/pci/pcireg.h	/^        uint32_t mmask;$/;"	m	struct:MSICAP::__anon28
mmc_fake	./dev/arm/RealView.py	/^    mmc_fake       = AmbaFake(pio_addr=0x1c050000)$/;"	v	class:VExpress_EMM
mmc_fake	./dev/arm/RealView.py	/^    mmc_fake      = AmbaFake(pio_addr=0x10005000)$/;"	v	class:RealViewEB
mmc_fake	./dev/arm/RealView.py	/^    mmc_fake      = AmbaFake(pio_addr=0x10005000)$/;"	v	class:RealViewPBX
mmioRing	./cpu/kvm/base.hh	/^    struct kvm_coalesced_mmio_ring *mmioRing;$/;"	m	class:BaseKvmCPU	typeref:struct:BaseKvmCPU::kvm_coalesced_mmio_ring
mmuSize	./arch/mips/pra_constants.hh	/^    Bitfield<30, 25> mmuSize;$/;"	m	namespace:MipsISA
mmx	./arch/x86/nativetrace.hh	/^        uint64_t mmx[8];$/;"	m	struct:Trace::X86NativeTrace::ThreadState
mnem	./arch/x86/faults.hh	/^        const char * mnem;$/;"	m	class:X86ISA::X86FaultBase
mnemonic	./arch/arm/faults.hh	/^    const char *mnemonic;$/;"	m	class:ArmISA::UndefinedInstruction
mnemonic	./arch/x86/faults.hh	/^        virtual const char * mnemonic() const$/;"	f	class:X86ISA::X86FaultBase
mnemonic	./cpu/static_inst.hh	/^    const char *mnemonic;$/;"	m	class:StaticInst
mod	./arch/x86/bios/intelmp.hh	/^    uint8_t mod;$/;"	m	class:X86ISA::IntelMP::CompatAddrSpaceMod
mod	./arch/x86/types.hh	/^        Bitfield<7,6> mod;$/;"	m	namespace:X86ISA
mod	./mem/ruby/slicc_interface/RubySlicc_Util.hh	/^mod(int val, int mod)$/;"	f
modRM	./arch/x86/types.hh	/^        ModRM modRM;$/;"	m	struct:X86ISA::ExtMachInst
mode	./arch/alpha/kernel_stats.cc	/^Statistics::mode(cpu_mode newmode, ThreadContext *tc)$/;"	f	class:AlphaISA::Kernel::Statistics
mode	./arch/arm/insts/mem.hh	/^    AddrMode mode;$/;"	m	class:ArmISA::RfeOp
mode	./arch/arm/insts/mem.hh	/^    AddrMode mode;$/;"	m	class:ArmISA::SrsOp
mode	./arch/arm/miscregs.hh	/^        Bitfield<4, 0> mode;$/;"	m	namespace:ArmISA
mode	./arch/arm/stage2_lookup.hh	/^    BaseTLB::Mode           mode;$/;"	m	class:ArmISA::Stage2LookUp
mode	./arch/arm/table_walker.hh	/^        BaseTLB::Mode mode;$/;"	m	class:ArmISA::TableWalker::WalkerState
mode	./arch/mips/dt_constants.hh	/^    Bitfield<11, 7>  mode;$/;"	m	namespace:MipsISA
mode	./arch/x86/decoder.hh	/^    X86Mode mode;$/;"	m	class:X86ISA::Decoder
mode	./arch/x86/pagetable_walker.hh	/^            BaseTLB::Mode mode;$/;"	m	class:X86ISA::Walker::WalkerState
mode	./arch/x86/regs/misc.hh	/^        Bitfield<0> mode;$/;"	m	namespace:X86ISA
mode	./arch/x86/types.hh	/^        Bitfield<3> mode;$/;"	m	namespace:X86ISA
mode	./arch/x86/types.hh	/^        OperatingMode mode;$/;"	m	struct:X86ISA::ExtMachInst
mode	./cpu/translation.hh	/^    BaseTLB::Mode mode;$/;"	m	class:WholeTranslationState
mode	./dev/intel_8254_timer.hh	/^        Bitfield<3, 1> mode;$/;"	m	class:Intel8254Timer
mode	./dev/intel_8254_timer.hh	/^        uint8_t mode;$/;"	m	class:Intel8254Timer::Counter
mode	./dev/x86/I8259.py	/^    mode = Param.X86I8259CascadeMode('How this I8259 is cascaded')$/;"	v	class:I8259
mode	./dev/x86/i8259.hh	/^    Enums::X86I8259CascadeMode mode;$/;"	m	class:X86ISA::I8259
mode	./sim/fd_entry.hh	/^    int mode;$/;"	m	class:FDEntry
mode1	./dev/alpha/tsunami_io.hh	/^    uint8_t mode1;$/;"	m	class:TsunamiIO
mode1	./dev/mips/malta_io.hh	/^    uint8_t mode1;$/;"	m	class:MaltaIO
mode2	./dev/alpha/tsunami_io.hh	/^    uint8_t mode2;$/;"	m	class:TsunamiIO
mode2	./dev/mips/malta_io.hh	/^    uint8_t mode2;$/;"	m	class:MaltaIO
modeConv	./arch/arm/insts/fplib.cc	/^modeConv(FPSCR fpscr)$/;"	f	namespace:ArmISA
mode_debug	./arch/mips/isa_traits.hh	/^    mode_debug = 3,         \/\/ debug mode$/;"	e	enum:MipsISA::mode_type
mode_executive	./arch/alpha/isa_traits.hh	/^    mode_executive = 1,     \/\/ executive (unused by unix)$/;"	e	enum:AlphaISA::mode_type
mode_kernel	./arch/alpha/isa_traits.hh	/^    mode_kernel = 0,        \/\/ kernel$/;"	e	enum:AlphaISA::mode_type
mode_kernel	./arch/mips/isa_traits.hh	/^    mode_kernel = 0,        \/\/ kernel$/;"	e	enum:MipsISA::mode_type
mode_number	./arch/alpha/isa_traits.hh	/^    mode_number             \/\/ number of modes$/;"	e	enum:AlphaISA::mode_type
mode_number	./arch/mips/isa_traits.hh	/^    mode_number             \/\/ number of modes$/;"	e	enum:MipsISA::mode_type
mode_supervisor	./arch/alpha/isa_traits.hh	/^    mode_supervisor = 2,    \/\/ supervisor (unused by unix)$/;"	e	enum:AlphaISA::mode_type
mode_supervisor	./arch/mips/isa_traits.hh	/^    mode_supervisor = 1,    \/\/ supervisor$/;"	e	enum:MipsISA::mode_type
mode_t	./kern/solaris/solaris.hh	/^    typedef uint32_t mode_t;$/;"	t	class:Solaris
mode_t	./kern/tru64/tru64.hh	/^    typedef uint32_t mode_t;$/;"	t	class:Tru64
mode_type	./arch/alpha/isa_traits.hh	/^enum mode_type$/;"	g	namespace:AlphaISA
mode_type	./arch/mips/isa_traits.hh	/^enum mode_type$/;"	g	namespace:MipsISA
mode_user	./arch/alpha/isa_traits.hh	/^    mode_user = 3,          \/\/ user mode$/;"	e	enum:AlphaISA::mode_type
mode_user	./arch/mips/isa_traits.hh	/^    mode_user = 2,          \/\/ user mode$/;"	e	enum:MipsISA::mode_type
model	./arch/x86/bios/IntelMP.py	/^    model = Param.UInt8(0, 'Processor model')$/;"	v	class:X86IntelMPProcessor
modelSpecificCode	./arch/x86/regs/misc.hh	/^        Bitfield<31,16> modelSpecificCode;$/;"	m	namespace:X86ISA
modestr	./arch/alpha/kernel_stats.cc	/^const char *modestr[] = { "kernel", "user", "idle" };$/;"	m	namespace:AlphaISA::Kernel	file:
modified_imm	./arch/arm/insts/pred_inst.hh	/^modified_imm(uint8_t ctrlImm, uint8_t dataImm)$/;"	f	namespace:ArmISA
modpath	./sim/init.hh	/^    const char *modpath;$/;"	m	struct:EmbeddedPython
modules	./python/m5/internal/params.py	/^    modules = __loader__.modules$/;"	v
modules	./python/m5/internal/params.py	/^    modules = { }$/;"	v
modules	./python/m5/objects/__init__.py	/^    modules = __loader__.modules$/;"	v
modules	./python/m5/objects/__init__.py	/^    modules = { }$/;"	v
mon	./dev/mc146818.hh	/^            uint8_t mon;$/;"	m	struct:MC146818::__anon17::__anon18
mon	./mem/comm_monitor.hh	/^        CommMonitor& mon;$/;"	m	class:CommMonitor::MonitorMasterPort
mon	./mem/comm_monitor.hh	/^        CommMonitor& mon;$/;"	m	class:CommMonitor::MonitorSlavePort
mon	./mem/mem_checker_monitor.hh	/^        MemCheckerMonitor& mon;$/;"	m	class:MemCheckerMonitor::MonitorMasterPort
mon	./mem/mem_checker_monitor.hh	/^        MemCheckerMonitor& mon;$/;"	m	class:MemCheckerMonitor::MonitorSlavePort
moreBytes	./arch/alpha/decoder.hh	/^    moreBytes(const PCState &pc, Addr fetchPC, MachInst inst)$/;"	f	class:AlphaISA::Decoder
moreBytes	./arch/arm/decoder.cc	/^Decoder::moreBytes(const PCState &pc, Addr fetchPC, MachInst inst)$/;"	f	class:ArmISA::Decoder
moreBytes	./arch/mips/decoder.hh	/^    moreBytes(const PCState &pc, Addr fetchPC, MachInst inst)$/;"	f	class:MipsISA::Decoder
moreBytes	./arch/power/decoder.hh	/^    moreBytes(MachInst machInst)$/;"	f	class:PowerISA::Decoder
moreBytes	./arch/power/decoder.hh	/^    moreBytes(const PCState &pc, Addr fetchPC, MachInst inst)$/;"	f	class:PowerISA::Decoder
moreBytes	./arch/sparc/decoder.hh	/^    moreBytes(const PCState &pc, Addr fetchPC, MachInst inst)$/;"	f	class:SparcISA::Decoder
moreBytes	./arch/x86/decoder.hh	/^    void moreBytes(const PCState &pc, Addr fetchPC, MachInst data)$/;"	f	class:X86ISA::Decoder
moreToWb	./dev/net/i8254xGBe.hh	/^        bool moreToWb;$/;"	m	class:IGbE::DescCache
mount	./kern/tru64/tru64_syscalls.hh	/^        mount = 21,$/;"	e	enum:SystemCalls::__anon102
mouse	./base/vnc/vncinput.hh	/^    VncMouse *mouse;$/;"	m	class:VncInput
mouse	./dev/x86/i8042.hh	/^    PS2Mouse mouse;$/;"	m	class:X86ISA::I8042
mouseAt	./dev/arm/kmi.cc	/^Pl050::mouseAt(uint16_t x, uint16_t y, uint8_t buttons)$/;"	f	class:Pl050
mouseFullInt	./dev/x86/i8042.hh	/^        Bitfield<1> mouseFullInt;$/;"	m	class:X86ISA::I8042
mouseIntPin	./dev/x86/i8042.hh	/^    IntSourcePin *mouseIntPin;$/;"	m	class:X86ISA::I8042
mouseOutputFull	./dev/x86/i8042.hh	/^        Bitfield<5> mouseOutputFull;$/;"	m	class:X86ISA::I8042
mouse_int_pin	./dev/x86/I8042.py	/^    mouse_int_pin = Param.X86IntSourcePin(X86IntSourcePin(),$/;"	v	class:I8042
moveFromRequestsToTransfers	./cpu/minor/fetch1.cc	/^Fetch1::moveFromRequestsToTransfers(FetchRequestPtr request)$/;"	f	class:Minor::Fetch1
moveFromRequestsToTransfers	./cpu/minor/lsq.cc	/^LSQ::moveFromRequestsToTransfers(LSQRequestPtr request)$/;"	f	class:Minor::LSQ
moveToFront	./mem/cache/mshr_queue.cc	/^MSHRQueue::moveToFront(MSHR *mshr)$/;"	f	class:MSHRQueue
moveToHead	./mem/cache/tags/cacheset.hh	/^CacheSet<Blktype>::moveToHead(Blktype *blk)$/;"	f	class:CacheSet
moveToHead	./mem/cache/tags/fa_lru.cc	/^FALRU::moveToHead(FALRUBlk *blk)$/;"	f	class:FALRU
moveToReady	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::moveToReady(MemDepEntryPtr &woken_inst_entry)$/;"	f	class:MemDepUnit
moveToTail	./mem/cache/tags/cacheset.hh	/^CacheSet<Blktype>::moveToTail(Blktype *blk)$/;"	f	class:CacheSet
moveToYoungerInst	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::moveToYoungerInst(ListOrderIt list_order_it)$/;"	f	class:InstructionQueue
mp	./arch/x86/regs/misc.hh	/^        Bitfield<1> mp; \/\/ Monitor Coprocessor$/;"	m	namespace:X86ISA
mpConfigTable	./arch/x86/system.hh	/^    X86ISA::IntelMP::ConfigTable * mpConfigTable;$/;"	m	class:X86System
mpFloatingPointer	./arch/x86/system.hh	/^    X86ISA::IntelMP::FloatingPointer * mpFloatingPointer;$/;"	m	class:X86System
mpba	./dev/pci/pcireg.h	/^        uint32_t mpba; \/* 0:2   pbir;$/;"	m	struct:MSIXCAP::__anon29
mpend	./dev/pci/pcireg.h	/^        uint32_t mpend;$/;"	m	struct:MSICAP::__anon28
mprotect	./kern/tru64/tru64_syscalls.hh	/^        mprotect = 74,$/;"	e	enum:SystemCalls::__anon102
mremap	./kern/tru64/tru64_syscalls.hh	/^        mremap = 65,$/;"	e	enum:SystemCalls::__anon102
mremapFunc	./sim/syscall_emul.hh	/^mremapFunc(SyscallDesc *desc, int callnum, LiveProcess *process, ThreadContext *tc)$/;"	f
ms	./sim/core.cc	/^Tick ms;$/;"	m	namespace:SimClock::Int	file:
ms	./sim/core.cc	/^double ms;$/;"	m	namespace:SimClock::Float	file:
msec	./base/time.hh	/^    long msec() const { return _time.tv_nsec \/ NSEC_PER_MSEC; }$/;"	f	class:Time
msec	./base/time.hh	/^    void msec(long msec) { _time.tv_nsec = msec * NSEC_PER_MSEC; }$/;"	f	class:Time
msfs_syscall	./kern/tru64/tru64_syscalls.hh	/^        msfs_syscall = 240,$/;"	e	enum:SystemCalls::__anon102
msgSize	./dev/arm/ufs_device.hh	/^        uint32_t msgSize;$/;"	m	struct:UFSHostDevice::SCSIReply
msgType	./dev/net/dist_packet.hh	/^        MsgType msgType;$/;"	m	struct:DistHeaderPkt::Header
msg_data	./dev/pci/pcireg.h	/^        uint32_t msg_data;$/;"	m	struct:MSIXTable::__anon30
msg_receive_trap	./kern/tru64/tru64_syscalls.hh	/^        msg_receive_trap = 21,$/;"	e	enum:SystemCalls::__anon103
msg_rpc_trap	./kern/tru64/tru64_syscalls.hh	/^        msg_rpc_trap = 22,$/;"	e	enum:SystemCalls::__anon103
msg_send_trap	./kern/tru64/tru64_syscalls.hh	/^        msg_send_trap = 20,$/;"	e	enum:SystemCalls::__anon103
msgctl	./kern/tru64/tru64_syscalls.hh	/^        msgctl = 200,$/;"	e	enum:SystemCalls::__anon102
msgget	./kern/tru64/tru64_syscalls.hh	/^        msgget = 201,$/;"	e	enum:SystemCalls::__anon102
msgrcv	./kern/tru64/tru64_syscalls.hh	/^        msgrcv = 202,$/;"	e	enum:SystemCalls::__anon102
msgsnd	./kern/tru64/tru64_syscalls.hh	/^        msgsnd = 203,$/;"	e	enum:SystemCalls::__anon102
mshrMissRate	./mem/cache/base.hh	/^    Stats::Formula mshrMissRate[MemCmd::NUM_MEM_CMDS];$/;"	m	class:BaseCache
mshrQueue	./mem/cache/base.hh	/^    MSHRQueue mshrQueue;$/;"	m	class:BaseCache
mshr_cap_events	./mem/cache/base.hh	/^    Stats::Vector mshr_cap_events;$/;"	m	class:BaseCache
mshr_hits	./mem/cache/base.hh	/^    Stats::Vector mshr_hits[MemCmd::NUM_MEM_CMDS];$/;"	m	class:BaseCache
mshr_miss_latency	./mem/cache/base.hh	/^    Stats::Vector mshr_miss_latency[MemCmd::NUM_MEM_CMDS];$/;"	m	class:BaseCache
mshr_misses	./mem/cache/base.hh	/^    Stats::Vector mshr_misses[MemCmd::NUM_MEM_CMDS];$/;"	m	class:BaseCache
mshr_no_allocate_misses	./mem/cache/base.hh	/^    Stats::Scalar mshr_no_allocate_misses;$/;"	m	class:BaseCache
mshr_uncacheable	./mem/cache/base.hh	/^    Stats::Vector mshr_uncacheable[MemCmd::NUM_MEM_CMDS];$/;"	m	class:BaseCache
mshr_uncacheable_lat	./mem/cache/base.hh	/^    Stats::Vector mshr_uncacheable_lat[MemCmd::NUM_MEM_CMDS];$/;"	m	class:BaseCache
mshrs	./mem/cache/Cache.py	/^    mshrs = Param.Unsigned("Number of MSHRs (max outstanding requests)")$/;"	v	class:BaseCache
msicap	./dev/pci/device.hh	/^    MSICAP msicap;$/;"	m	class:PciDevice
msix_pba	./dev/pci/device.hh	/^    std::vector<MSIXPbaEntry> msix_pba;$/;"	m	class:PciDevice
msix_table	./dev/pci/device.hh	/^    std::vector<MSIXTable> msix_table;$/;"	m	class:PciDevice
msixcap	./dev/pci/device.hh	/^    MSIXCAP msixcap;$/;"	m	class:PciDevice
msleep	./kern/tru64/tru64_syscalls.hh	/^        msleep = 215,$/;"	e	enum:SystemCalls::__anon102
msr	./arch/power/remote_gdb.hh	/^            uint32_t msr;$/;"	m	struct:PowerISA::RemoteGDB::PowerGdbRegCache::__anon53
msrAddrToIndex	./arch/x86/regs/msr.cc	/^msrAddrToIndex(MiscRegIndex &regNum, Addr addr)$/;"	f	namespace:X86ISA
msrMapData	./arch/x86/regs/msr.cc	/^const MsrMap::value_type msrMapData[] = {$/;"	m	namespace:X86ISA	file:
msrMapSize	./arch/x86/regs/msr.cc	/^static const unsigned msrMapSize = sizeof(msrMapData) \/ sizeof(msrMapData[0]);$/;"	m	namespace:X86ISA	file:
msrMrs64IssBuild	./arch/arm/utility.hh	/^msrMrs64IssBuild(bool isRead, uint32_t op0, uint32_t op1, uint32_t crn,$/;"	f	namespace:ArmISA
msrMrs64TrapToHyp	./arch/arm/utility.cc	/^msrMrs64TrapToHyp(const MiscRegIndex miscReg, bool isRead,$/;"	f	namespace:ArmISA
msrMrs64TrapToMon	./arch/arm/utility.cc	/^msrMrs64TrapToMon(const MiscRegIndex miscReg, CPTR cptr \/* CPTR_EL3 *\/,$/;"	f	namespace:ArmISA
msrMrs64TrapToSup	./arch/arm/utility.cc	/^msrMrs64TrapToSup(const MiscRegIndex miscReg, ExceptionLevel el,$/;"	f	namespace:ArmISA
mss	./base/inet.hh	/^    uint16_t mss() const { return ntohs(opt_data.mss); }$/;"	f	struct:Net::TcpOpt
mss	./dev/net/i8254xGBe_defs.hh	/^inline int mss(TxDesc *d) { assert(isContext(d)); return bits(d->d2,63,48); }$/;"	f	namespace:iGbReg::TxdOp
msync	./kern/tru64/tru64_syscalls.hh	/^        msync = 217,$/;"	e	enum:SystemCalls::__anon102
mt	./arch/mips/pra_constants.hh	/^    Bitfield<2>  mt;$/;"	m	namespace:MipsISA
mt	./arch/mips/pra_constants.hh	/^    Bitfield<9,  7>  mt;$/;"	m	namespace:MipsISA
mtab	./dev/pci/pcireg.h	/^        uint32_t mtab; \/* 0:2   tbir;$/;"	m	struct:MSIXCAP::__anon29
mtup	./base/inet.hh	/^    uint16_t mtup() const { return ntohs(opt_data.mtu); }$/;"	f	struct:Net::IpOpt
mtur	./base/inet.hh	/^    uint16_t mtur() const { return ntohs(opt_data.mtu); }$/;"	f	struct:Net::IpOpt
mtype	./arch/arm/pagetable.hh	/^    MemoryType mtype;$/;"	m	struct:ArmISA::TlbEntry
mua	./dev/pci/pcireg.h	/^        uint32_t mua;$/;"	m	struct:MSICAP::__anon28
mul62x62	./arch/arm/insts/fplib.cc	/^mul62x62(uint64_t *x0, uint64_t *x1, uint64_t a, uint64_t b)$/;"	f	namespace:ArmISA
mul64x32	./arch/arm/insts/fplib.cc	/^void mul64x32(uint64_t *x0, uint64_t *x1, uint64_t a, uint32_t b)$/;"	f	namespace:ArmISA
multHi	./arch/x86/insts/micromediaop.hh	/^        multHi() const$/;"	f	class:X86ISA::MediaOpBase
multiProc	./arch/arm/system.hh	/^    bool multiProc;$/;"	m	class:ArmSystem
multiThread	./sim/system.hh	/^    const bool multiThread;$/;"	m	class:System
multi_proc	./arch/arm/ArmSystem.py	/^    multi_proc = Param.Bool(True, "Multiprocessor system?")$/;"	v	class:ArmSystem
multi_thread	./sim/System.py	/^    multi_thread = Param.Bool(False,$/;"	v
multiattrdict	./python/m5/util/attrdict.py	/^class multiattrdict(attrdict):$/;"	c
multicast	./base/inet.hh	/^    bool multicast() const { return !unicast() && !broadcast(); }$/;"	f	struct:Net::EthAddr
multicastHashEnable	./dev/net/ns_gige.hh	/^    bool multicastHashEnable;$/;"	m	class:NSGigE
multidict	./python/m5/util/multidict.py	/^class multidict(object):$/;"	c
mults_list	./mem/ruby/filters/H3BloomFilter.hh	/^    int mults_list[6]; \/\/= {255,29,51,3,77,43};$/;"	m	class:H3BloomFilter
mungeSnippet	./arch/isa_parser.py	/^    def mungeSnippet(self, s):$/;"	m	class:ISAParser
munmap	./kern/tru64/tru64_syscalls.hh	/^        munmap = 73,$/;"	e	enum:SystemCalls::__anon102
munmapFunc	./sim/syscall_emul.cc	/^munmapFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)$/;"	f
mustCheckAbove	./mem/packet.hh	/^    mustCheckAbove() const$/;"	f	class:Packet
mustRetry	./mem/external_slave.cc	/^    bool mustRetry;$/;"	m	class:StubSlavePort	file:
mustSendRetry	./mem/cache/base.hh	/^        bool mustSendRetry;$/;"	m	class:BaseCache::CacheSlavePort
mvalid	./kern/tru64/tru64_syscalls.hh	/^        mvalid = 213,$/;"	e	enum:SystemCalls::__anon102
mvdm	./arch/x86/regs/misc.hh	/^        Bitfield<20> mvdm; \/\/ MtrrVarDramEn$/;"	m	namespace:X86ISA
mvp	./arch/mips/mt_constants.hh	/^    Bitfield<1>      mvp;$/;"	m	namespace:MipsISA
mwait	./cpu/base.cc	/^BaseCPU::mwait(ThreadID tid, PacketPtr pkt)$/;"	f	class:BaseCPU
mwait	./cpu/base_dyn_inst.hh	/^    bool mwait(PacketPtr pkt) { return cpu->mwait(threadNumber, pkt); }$/;"	f	class:BaseDynInst
mwait	./cpu/minor/exec_context.hh	/^    bool mwait(PacketPtr pkt) { return getCpuPtr()->mwait(0, pkt); }$/;"	f	class:Minor::ExecContext
mwaitAtomic	./cpu/base.cc	/^BaseCPU::mwaitAtomic(ThreadID tid, ThreadContext *tc, TheISA::TLB *dtb)$/;"	f	class:BaseCPU
mwaitAtomic	./cpu/base_dyn_inst.hh	/^    void mwaitAtomic(ThreadContext *tc)$/;"	f	class:BaseDynInst
mwaitAtomic	./cpu/minor/exec_context.hh	/^    void mwaitAtomic(ThreadContext *tc)$/;"	f	class:Minor::ExecContext
mwakeup	./kern/tru64/tru64_syscalls.hh	/^        mwakeup = 216,$/;"	e	enum:SystemCalls::__anon102
mx	./arch/mips/pra_constants.hh	/^    Bitfield<24>     mx;$/;"	m	namespace:MipsISA
mxc	./dev/pci/pcireg.h	/^        uint16_t mxc;  \/* 0:10  ts;$/;"	m	struct:MSIXCAP::__anon29
mxcsr	./cpu/kvm/x86_cpu.cc	/^    uint32_t mxcsr;$/;"	m	struct:FXSave	file:
mxcsr_mask	./cpu/kvm/x86_cpu.cc	/^    uint32_t mxcsr_mask;$/;"	m	struct:FXSave	file:
mxid	./dev/pci/pcireg.h	/^        uint16_t mxid; \/* 0:7  cid$/;"	m	struct:MSIXCAP::__anon29
myname	./kern/kernel_stats.hh	/^    std::string myname;$/;"	m	class:Kernel::Statistics
mypath	./unittest/genini.py	/^mypath = sys.path[0]$/;"	v
mystream	./base/stats/text.hh	/^    bool mystream;$/;"	m	class:Stats::Text
n	./arch/arm/miscregs.hh	/^        Bitfield<2, 0> n;$/;"	m	namespace:ArmISA
n	./arch/arm/miscregs.hh	/^        Bitfield<31> n;$/;"	m	namespace:ArmISA
n	./arch/arm/pmu.hh	/^        Bitfield<15, 11> n;$/;"	m	class:ArmISA::PMU
n	./python/m5/util/region.py	/^    n = Region(9,10)$/;"	v
nEt	./arch/arm/miscregs.hh	/^        Bitfield<6> nEt;$/;"	m	namespace:ArmISA
nIENBit	./dev/storage/ide_disk.hh	/^    bool nIENBit;$/;"	m	class:IdeDisk
nState	./arch/arm/nativetrace.hh	/^    ThreadState nState, mState;$/;"	m	class:Trace::ArmNativeTrace
nState	./arch/x86/nativetrace.hh	/^    ThreadState nState;$/;"	m	class:Trace::X86NativeTrace
n_master_ports	./mem/hmc_controller.hh	/^    int n_master_ports;$/;"	m	class:HMCController
nack	./dev/x86/i8042.cc	/^X86ISA::PS2Device::nack()$/;"	f	class:X86ISA::PS2Device
name	./arch/alpha/faults.hh	/^    FaultName name() const {return _name;}$/;"	f	class:AlphaISA::AlignmentFault
name	./arch/alpha/faults.hh	/^    FaultName name() const {return _name;}$/;"	f	class:AlphaISA::ArithmeticFault
name	./arch/alpha/faults.hh	/^    FaultName name() const {return _name;}$/;"	f	class:AlphaISA::DtbAcvFault
name	./arch/alpha/faults.hh	/^    FaultName name() const {return _name;}$/;"	f	class:AlphaISA::DtbAlignmentFault
name	./arch/alpha/faults.hh	/^    FaultName name() const {return _name;}$/;"	f	class:AlphaISA::DtbPageFault
name	./arch/alpha/faults.hh	/^    FaultName name() const {return _name;}$/;"	f	class:AlphaISA::FloatEnableFault
name	./arch/alpha/faults.hh	/^    FaultName name() const {return _name;}$/;"	f	class:AlphaISA::IntegerOverflowFault
name	./arch/alpha/faults.hh	/^    FaultName name() const {return _name;}$/;"	f	class:AlphaISA::InterruptFault
name	./arch/alpha/faults.hh	/^    FaultName name() const {return _name;}$/;"	f	class:AlphaISA::ItbAcvFault
name	./arch/alpha/faults.hh	/^    FaultName name() const {return _name;}$/;"	f	class:AlphaISA::ItbPageFault
name	./arch/alpha/faults.hh	/^    FaultName name() const {return _name;}$/;"	f	class:AlphaISA::MachineCheckFault
name	./arch/alpha/faults.hh	/^    FaultName name() const {return _name;}$/;"	f	class:AlphaISA::NDtbMissFault
name	./arch/alpha/faults.hh	/^    FaultName name() const {return _name;}$/;"	f	class:AlphaISA::PDtbMissFault
name	./arch/alpha/faults.hh	/^    FaultName name() const {return _name;}$/;"	f	class:AlphaISA::PalFault
name	./arch/alpha/faults.hh	/^    FaultName name() const {return _name;}$/;"	f	class:AlphaISA::ResetFault
name	./arch/alpha/faults.hh	/^    FaultName name() const {return _name;}$/;"	f	class:AlphaISA::UnimplementedOpcodeFault
name	./arch/alpha/osfpal.cc	/^PAL::name(int index)$/;"	f	class:PAL
name	./arch/alpha/remote_gdb.hh	/^        const std::string name() const { return gdb->name() + ".AlphaGdbRegCache"; }$/;"	f	class:AlphaISA::RemoteGDB::AlphaGdbRegCache
name	./arch/alpha/stacktrace.cc	/^ProcessInfo::name(Addr ksp) const$/;"	f	class:AlphaISA::ProcessInfo
name	./arch/arm/faults.hh	/^        const FaultName name;$/;"	m	struct:ArmISA::ArmFault::FaultVals
name	./arch/arm/faults.hh	/^    FaultName name() const { return vals.name; }$/;"	f	class:ArmISA::ArmFaultVals
name	./arch/arm/kvm/arm_cpu.hh	/^        const char *name;$/;"	m	struct:ArmKvmCPU::KvmCoreMiscRegInfo
name	./arch/arm/kvm/arm_cpu.hh	/^        const char *name;$/;"	m	struct:ArmKvmCPU::KvmIntRegInfo
name	./arch/arm/kvm/armv8_cpu.hh	/^        const char *name;$/;"	m	struct:ArmV8KvmCPU::IntRegInfo
name	./arch/arm/kvm/armv8_cpu.hh	/^        const char *name;$/;"	m	struct:ArmV8KvmCPU::MiscRegInfo
name	./arch/arm/pmu.hh	/^        const std::string name;$/;"	m	struct:ArmISA::PMU::EventType
name	./arch/arm/remote_gdb.hh	/^        const std::string name() const { return gdb->name() + ".AArch32GdbRegCache"; }$/;"	f	class:ArmISA::RemoteGDB::AArch32GdbRegCache
name	./arch/arm/remote_gdb.hh	/^        const std::string name() const { return gdb->name() + ".AArch64GdbRegCache"; }$/;"	f	class:ArmISA::RemoteGDB::AArch64GdbRegCache
name	./arch/arm/stacktrace.cc	/^    ProcessInfo::name(Addr ksp) const$/;"	f	class:ArmISA::ProcessInfo
name	./arch/arm/table_walker.hh	/^        std::string name() const { return tableWalker->name(); }$/;"	f	class:ArmISA::TableWalker::WalkerState
name	./arch/generic/debugfaults.hh	/^    name() const$/;"	f	class:GenericISA::M5DebugFault
name	./arch/mips/faults.hh	/^        const FaultName name;$/;"	m	struct:MipsISA::MipsFaultBase::FaultVals
name	./arch/mips/faults.hh	/^    FaultName name() const { return vals.name; }$/;"	f	class:MipsISA::MipsFault
name	./arch/mips/remote_gdb.hh	/^        const std::string name() const { return gdb->name() + ".MipsGdbRegCache"; }$/;"	f	class:MipsISA::RemoteGDB::MipsGdbRegCache
name	./arch/mips/stacktrace.cc	/^ProcessInfo::name(Addr ksp) const$/;"	f	class:ProcessInfo
name	./arch/power/faults.hh	/^    name() const$/;"	f	class:PowerISA::PowerFault
name	./arch/power/remote_gdb.hh	/^        const std::string name() const { return gdb->name() + ".PowerGdbRegCache"; }$/;"	f	class:PowerISA::RemoteGDB::PowerGdbRegCache
name	./arch/power/stacktrace.cc	/^ProcessInfo::name(Addr ksp) const$/;"	f	class:PowerISA::ProcessInfo
name	./arch/sparc/faults.hh	/^        const FaultName name;$/;"	m	struct:SparcISA::SparcFaultBase::FaultVals
name	./arch/sparc/faults.hh	/^    FaultName name() const { return vals.name; }$/;"	f	class:SparcISA::SparcFault
name	./arch/sparc/remote_gdb.hh	/^        const std::string name() const { return gdb->name() + ".SPARC64GdbRegCache"; }$/;"	f	class:SparcISA::RemoteGDB::SPARC64GdbRegCache
name	./arch/sparc/remote_gdb.hh	/^        const std::string name() const { return gdb->name() + ".SPARCGdbRegCache"; }$/;"	f	class:SparcISA::RemoteGDB::SPARCGdbRegCache
name	./arch/x86/faults.hh	/^        const char * name() const$/;"	f	class:X86ISA::UnimpInstFault
name	./arch/x86/faults.hh	/^        const char * name() const$/;"	f	class:X86ISA::X86FaultBase
name	./arch/x86/pagetable_walker.hh	/^            std::string name() const {return walker->name();}$/;"	f	class:X86ISA::Walker::WalkerState
name	./arch/x86/remote_gdb.hh	/^        const std::string name() const { return gdb->name() + ".AMD64GdbRegCache"; }$/;"	f	class:X86ISA::RemoteGDB::AMD64GdbRegCache
name	./arch/x86/remote_gdb.hh	/^        const std::string name() const { return gdb->name() + ".X86GdbRegCache"; }$/;"	f	class:X86ISA::RemoteGDB::X86GdbRegCache
name	./arch/x86/stacktrace.cc	/^    ProcessInfo::name(Addr ksp) const$/;"	f	class:X86ISA::ProcessInfo
name	./base/callback.hh	/^    std::string name() const { return "CallbackQueue"; }$/;"	f	class:CallbackQueue
name	./base/debug.hh	/^    std::string name() const { return _name; }$/;"	f	class:Debug::Flag
name	./base/remote_gdb.cc	/^BaseRemoteGDB::name()$/;"	f	class:BaseRemoteGDB
name	./base/remote_gdb.cc	/^GDBListener::name()$/;"	f	class:GDBListener
name	./base/remote_gdb.hh	/^        const std::string name() const { return gdb->name() + ".hwbkpt"; }$/;"	f	class:BaseRemoteGDB::HardBreakpoint
name	./base/statistics.hh	/^    const std::string &name() const { return this->info()->name; }$/;"	f	class:Stats::DataWrap
name	./base/statistics.hh	/^    name(const std::string &name)$/;"	f	class:Stats::DataWrap
name	./base/stats/info.hh	/^    std::string name;$/;"	m	class:Stats::Info
name	./base/stats/text.cc	/^    string name;$/;"	m	struct:Stats::DistPrint	file:
name	./base/stats/text.cc	/^    string name;$/;"	m	struct:Stats::ScalarPrint	file:
name	./base/stats/text.cc	/^    string name;$/;"	m	struct:Stats::SparseHistPrint	file:
name	./base/stats/text.cc	/^    string name;$/;"	m	struct:Stats::VectorPrint	file:
name	./base/trace.cc	/^const std::string &name()$/;"	f
name	./base/trace.hh	/^    const std::string &name() const { return _name; }$/;"	f	class:Named
name	./base/vnc/vncserver.hh	/^        char name[2]; \/\/ just to put M5 in here$/;"	m	struct:VncServer::ServerInitMsg
name	./cpu/activity.hh	/^    const std::string &name() const { return _name; }$/;"	f	class:ActivityRecorder
name	./cpu/func_unit.hh	/^    std::string name;$/;"	m	class:FuncUnit
name	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::name() const$/;"	f	class:DefaultCommit
name	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::name() const$/;"	f	class:DefaultDecode
name	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::name() const$/;"	f	class:DefaultFetch
name	./cpu/o3/free_list.hh	/^    std::string name() const { return _name; };$/;"	f	class:UnifiedFreeList
name	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::name() const$/;"	f	class:DefaultIEW
name	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::name() const$/;"	f	class:InstructionQueue
name	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::name() const$/;"	f	class:LSQ
name	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::name() const$/;"	f	class:LSQUnit
name	./cpu/o3/mem_dep_unit.hh	/^        std::string name() const { return "memdepentry"; }$/;"	f	class:MemDepUnit::MemDepEntry
name	./cpu/o3/mem_dep_unit.hh	/^    std::string name() const { return _name; }$/;"	f	class:MemDepUnit
name	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::name() const$/;"	f	class:ElasticTrace
name	./cpu/o3/probe/simple_trace.hh	/^    const std::string name() const { return ProbeListenerObject::name() + ".trace"; }$/;"	f	class:SimpleTrace
name	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::name() const$/;"	f	class:DefaultRename
name	./cpu/o3/rob_impl.hh	/^ROB<Impl>::name() const$/;"	f	class:ROB
name	./cpu/o3/scoreboard.hh	/^    std::string name() const { return _name; };$/;"	f	class:Scoreboard
name	./cpu/pc_event.hh	/^    virtual const std::string name() const { return description; }$/;"	f	class:PCEvent
name	./cpu/simple_thread.hh	/^    std::string name() const$/;"	f	class:SimpleThread
name	./cpu/testers/traffic_gen/generators.hh	/^    std::string name() const { return _name; }$/;"	f	class:BaseGen
name	./cpu/trace/trace_cpu.hh	/^        const std::string& name() const { return genName; }$/;"	f	class:TraceCPU::ElasticDataGen
name	./cpu/trace/trace_cpu.hh	/^        const std::string& name() const { return genName; }$/;"	f	class:TraceCPU::FixedRetryGen
name	./dev/arm/generic_timer.hh	/^    std::string name() const { return _name; }$/;"	f	class:ArchTimer
name	./dev/arm/pl111.hh	/^        const std::string name() const {$/;"	f	class:Pl111::DmaDoneEvent
name	./dev/arm/timer_cpulocal.hh	/^        std::string name() const { return _name; }$/;"	f	class:CpuLocalTimer::Timer
name	./dev/arm/timer_sp804.hh	/^        std::string name() const { return _name; }$/;"	f	class:Sp804::Timer
name	./dev/intel_8254_timer.hh	/^        const std::string &name() const { return _name; }$/;"	f	class:Intel8254Timer::Counter
name	./dev/intel_8254_timer.hh	/^    const std::string &name() const { return _name; }$/;"	f	class:Intel8254Timer
name	./dev/mc146818.hh	/^    const std::string &name() const { return _name; }$/;"	f	class:MC146818
name	./dev/net/dist_etherlink.hh	/^        const std::string name() const { return objName; }$/;"	f	class:DistEtherLink::Link
name	./dev/net/etherint.hh	/^    const std::string &name() const { return portName; }$/;"	f	class:EtherInt
name	./dev/net/etherlink.hh	/^        const std::string name() const { return objName; }$/;"	f	class:EtherLink::Link
name	./dev/net/i8254xGBe.hh	/^        std::string name() { return _name; }$/;"	f	class:IGbE::DescCache
name	./dev/net/sinicreg.hh	/^    const char *name;$/;"	m	struct:Sinic::Regs::Info
name	./dev/pci/copy_engine.hh	/^        std::string name() { assert(ce); return ce->name() + csprintf("-chan%d", channelId); }$/;"	f	class:CopyEngine::CopyEngineChannel
name	./dev/pci/host.cc	/^PciHost::DeviceInterface::name() const$/;"	f	class:PciHost::DeviceInterface
name	./dev/storage/ide_ctrl.hh	/^        name()$/;"	f	struct:IdeController::Channel
name	./dev/virtio/block.hh	/^        std::string name() const { return parent.name() + ".qRequests"; }$/;"	f	class:VirtIOBlock::RequestQueue
name	./dev/virtio/console.hh	/^        std::string name() const { return parent.name() + ".qRecv"; }$/;"	f	class:VirtIOConsole::TermRecvQueue
name	./dev/virtio/console.hh	/^        std::string name() const { return parent.name() + ".qTrans"; }$/;"	f	class:VirtIOConsole::TermTransQueue
name	./dev/virtio/fs9p.cc	/^    std::string name;$/;"	m	struct:P9MsgInfo	file:
name	./dev/virtio/fs9p.hh	/^        std::string name() const { return parent.name() + ".queue"; }$/;"	f	class:VirtIO9PBase::FSQueue
name	./kern/kernel_stats.hh	/^    const std::string name() const { return myname; }$/;"	f	class:Kernel::Statistics
name	./kern/tru64/tru64_syscalls.cc	/^SystemCalls<Tru64>::name(int num)$/;"	f	class:SystemCalls
name	./mem/cache/prefetch/stride.hh	/^        const std::string name() {return _name; }$/;"	f	class:StridePrefetcher::PCTable
name	./mem/dram_ctrl.hh	/^        const std::string name() const$/;"	f	class:DRAMCtrl::Rank
name	./mem/packet_queue.hh	/^    const std::string name() const$/;"	f	class:ReqPacketQueue
name	./mem/packet_queue.hh	/^    const std::string name() const$/;"	f	class:RespPacketQueue
name	./mem/packet_queue.hh	/^    const std::string name() const$/;"	f	class:SnoopRespPacketQueue
name	./mem/page_table.hh	/^    const std::string name() const { return _name; }$/;"	f	class:PageTableBase
name	./mem/physical.hh	/^    const std::string name() const { return _name; }$/;"	f	class:PhysicalMemory
name	./mem/port.hh	/^    const std::string name() const { return portName; }$/;"	f	class:Port
name	./mem/ruby/network/simple/PerfectSwitch.hh	/^    std::string name()$/;"	f	class:PerfectSwitch
name	./mem/ruby/network/simple/Throttle.hh	/^    std::string name()$/;"	f	class:Throttle
name	./mem/slicc/ast/FormalParamAST.py	/^    def name(self):$/;"	m	class:FormalParamAST
name	./mem/slicc/ast/LocalVariableAST.py	/^    def name(self):$/;"	m	class:LocalVariableAST
name	./mem/slicc/ast/NewExprAST.py	/^    def name(self):$/;"	m	class:NewExprAST
name	./mem/slicc/ast/VarExprAST.py	/^    def name(self):$/;"	m	class:VarExprAST
name	./mem/xbar.hh	/^        const std::string name() const { return xbar.name() + _name; }$/;"	f	class:BaseXBar::Layer
name	./sim/cxx_config.hh	/^        const std::string name;$/;"	m	class:CxxConfigDirectoryEntry::ParamDesc
name	./sim/cxx_config.hh	/^        const std::string name;$/;"	m	class:CxxConfigDirectoryEntry::PortDesc
name	./sim/cxx_manager.hh	/^        std::string name;$/;"	m	class:CxxConfigManager::Exception
name	./sim/eventq.cc	/^Event::name() const$/;"	f	class:Event
name	./sim/eventq.hh	/^    name() const$/;"	f	class:EventWrapper
name	./sim/eventq.hh	/^    virtual const std::string name() const { return objName; }$/;"	f	class:EventQueue
name	./sim/eventq.hh	/^    void name(const std::string &st) { objName = st; }$/;"	f	class:EventQueue
name	./sim/faults.hh	/^    FaultName name() const {return "Generic alignment fault";}$/;"	f	class:GenericAlignmentFault
name	./sim/faults.hh	/^    FaultName name() const {return "Generic page table fault";}$/;"	f	class:GenericPageTableFault
name	./sim/faults.hh	/^    FaultName name() const {return "Unimplemented simulator feature";}$/;"	f	class:UnimpFault
name	./sim/faults.hh	/^    virtual FaultName name() const { return "Re-execution fault";}$/;"	f	class:ReExec
name	./sim/probe/probe.hh	/^    const std::string name;$/;"	m	class:ProbeListener
name	./sim/probe/probe.hh	/^    const std::string name;$/;"	m	class:ProbePoint
name	./sim/sim_object.hh	/^    virtual const std::string name() const { return params()->name; }$/;"	f	class:SimObject
name	./sim/syscall_emul.hh	/^    const char *name;   \/\/!< Syscall name (e.g., "open").$/;"	m	class:SyscallDesc
name	./unittest/genini.py	/^                name = arg$/;"	v
name	./unittest/genini.py	/^                name = arg[:offset]$/;"	v
nameCache	./base/cp_annotate.hh	/^    NameCache nameCache;$/;"	m	class:CPA
nameMap	./base/statistics.cc	/^nameMap()$/;"	f	namespace:Stats
nameOut	./sim/serialize.cc	/^Serializable::ScopedCheckpointSection::nameOut(CheckpointOut &cp)$/;"	f	class:Serializable::ScopedCheckpointSection
nameOut	./sim/serialize.hh	/^        void nameOut(CheckpointIn &cp) {};$/;"	f	class:Serializable::ScopedCheckpointSection
nameString	./arch/x86/cpuid.cc	/^    static const char nameString[nameStringSize] = "Fake M5 x86_64 CPU";$/;"	m	namespace:X86ISA	file:
nameStringSize	./arch/x86/cpuid.cc	/^    static const int nameStringSize = 48;$/;"	m	namespace:X86ISA	file:
name_off	./arch/alpha/stacktrace.hh	/^    int name_off;$/;"	m	class:AlphaISA::ProcessInfo
name_off	./arch/arm/stacktrace.hh	/^    int name_off;$/;"	m	class:ArmISA::ProcessInfo
name_off	./arch/mips/stacktrace.hh	/^    int name_off;$/;"	m	class:MipsISA::ProcessInfo
name_off	./arch/x86/stacktrace.hh	/^        int name_off;$/;"	m	class:X86ISA::ProcessInfo
namelen	./base/vnc/vncserver.hh	/^        uint32_t namelen;$/;"	m	struct:VncServer::ServerInitMsg
names	./arch/x86/intmessage.hh	/^        static const char * const names[NumModes] = {$/;"	m	namespace:X86ISA::DeliveryMode
names	./python/m5/stats/__init__.py	/^names = []$/;"	v
nano	./python/m5/util/convert.py	/^nano  = 1.0e-9$/;"	v
native_listener	./cpu/nativetrace.hh	/^    ListenSocket native_listener;$/;"	m	class:Trace::NativeTrace
nbrOfBanksDRAM	./cpu/testers/traffic_gen/generators.hh	/^    const unsigned int nbrOfBanksDRAM;$/;"	m	class:DramGen
nbrOfBanksUtil	./cpu/testers/traffic_gen/generators.hh	/^    const unsigned int nbrOfBanksUtil;$/;"	m	class:DramGen
nbrOfRanks	./cpu/testers/traffic_gen/generators.hh	/^    const unsigned int nbrOfRanks;$/;"	m	class:DramGen
nbrOutstanding	./mem/dramsim2.cc	/^DRAMSim2::nbrOutstanding() const$/;"	f	class:DRAMSim2
nbrOutstandingReads	./mem/dramsim2.hh	/^    unsigned int nbrOutstandingReads;$/;"	m	class:DRAMSim2
nbrOutstandingWrites	./mem/dramsim2.hh	/^    unsigned int nbrOutstandingWrites;$/;"	m	class:DRAMSim2
ncpus	./kern/tru64/tru64.hh	/^        uint32_t     ncpus;             \/\/!< ncpus$/;"	m	struct:Tru64::cpu_info
ne	./arch/x86/regs/misc.hh	/^        Bitfield<5> ne; \/\/ Numeric Error$/;"	m	namespace:X86ISA
needCkpt	./dev/net/dist_iface.hh	/^        ReqType needCkpt;$/;"	m	class:DistIface::SyncNode
needCkpt	./dev/net/dist_packet.hh	/^                ReqType needCkpt;$/;"	m	struct:DistHeaderPkt::Header::__anon13::__anon14
needExit	./dev/net/dist_iface.hh	/^        ReqType needExit;$/;"	m	class:DistIface::SyncNode
needExit	./dev/net/dist_packet.hh	/^                ReqType needExit;$/;"	m	struct:DistHeaderPkt::Header::__anon13::__anon14
needMoreBytes	./arch/alpha/decoder.hh	/^    needMoreBytes()$/;"	f	class:AlphaISA::Decoder
needMoreBytes	./arch/arm/decoder.hh	/^    bool needMoreBytes() const { return outOfBytes; }$/;"	f	class:ArmISA::Decoder
needMoreBytes	./arch/mips/decoder.hh	/^    needMoreBytes()$/;"	f	class:MipsISA::Decoder
needMoreBytes	./arch/power/decoder.hh	/^    needMoreBytes()$/;"	f	class:PowerISA::Decoder
needMoreBytes	./arch/sparc/decoder.hh	/^    needMoreBytes()$/;"	f	class:SparcISA::Decoder
needMoreBytes	./arch/x86/decoder.hh	/^    bool needMoreBytes()$/;"	f	class:X86ISA::Decoder
needToSignalDrained	./cpu/minor/pipeline.hh	/^    bool needToSignalDrained;$/;"	m	class:Minor::Pipeline
need_stage	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    need_stage(int vc, VC_state_type state, flit_stage stage, Cycles cTime)$/;"	f	class:InputUnit_d
need_stage	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.cc	/^VirtualChannel_d::need_stage(VC_state_type state, flit_stage stage,$/;"	f	class:VirtualChannel_d
need_startup	./python/m5/simulate.py	/^need_startup = True$/;"	v
needsResponse	./mem/packet.hh	/^    bool needsResponse() const       { return cmd.needsResponse(); }$/;"	f	class:Packet
needsResponse	./mem/packet.hh	/^    bool needsResponse() const     { return testCmdAttrib(NeedsResponse); }$/;"	f	class:MemCmd
needsRetry	./sim/syscallreturn.hh	/^    bool needsRetry() const { return retryFlag; }$/;"	f	class:SyscallReturn
needsTSO	./cpu/o3/O3CPU.py	/^    needsTSO = Param.Bool(buildEnv['TARGET_ISA'] == 'x86',$/;"	v	class:DerivO3CPU
needsTSO	./cpu/o3/lsq_unit.hh	/^    bool needsTSO;$/;"	m	class:LSQUnit
needsToBeSentToStoreBuffer	./cpu/minor/lsq.cc	/^LSQ::LSQRequest::needsToBeSentToStoreBuffer()$/;"	f	class:Minor::LSQ::LSQRequest
needsToTick	./cpu/minor/lsq.cc	/^LSQ::needsToTick()$/;"	f	class:Minor::LSQ
needsWritable	./mem/cache/mshr.hh	/^        bool needsWritable;$/;"	m	class:MSHR::TargetList
needsWritable	./mem/cache/mshr.hh	/^    bool needsWritable() const { return targets.needsWritable; }$/;"	f	class:MSHR
needsWritable	./mem/packet.hh	/^    bool needsWritable() const     { return testCmdAttrib(NeedsWritable); }$/;"	f	class:MemCmd
needsWritable	./mem/packet.hh	/^    bool needsWritable() const$/;"	f	class:Packet
neg_inf	./python/m5/util/region.py	/^neg_inf = _neg_inf()$/;"	v
neitherReadNorWrite	./mem/dram_ctrl.hh	/^    Stats::Scalar neitherReadNorWrite;$/;"	m	class:DRAMCtrl
netifs	./mem/ruby/network/Network.py	/^    netifs = VectorParam.ClockedObject("Network Interfaces")$/;"	v	class:RubyNetwork
netmask	./base/inet.hh	/^    uint8_t netmask() const { return _netmask; }$/;"	f	struct:Net::IpNetmask
network_links	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    network_links = VectorParam.NetworkLink_d(nls, "forward links")$/;"	v	class:GarnetExtLink_d
network_links	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    network_links = VectorParam.NetworkLink_d(nls, "forward links")$/;"	v	class:GarnetIntLink_d
network_links	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.py	/^    network_links = VectorParam.NetworkLink(nls, "forward links")$/;"	v	class:GarnetExtLink
network_links	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.py	/^    network_links = VectorParam.NetworkLink(nls, "forward links")$/;"	v	class:GarnetIntLink
network_message_to_size	./mem/ruby/network/simple/Throttle.cc	/^network_message_to_size(Message *net_msg_ptr)$/;"	f
networktest	./cpu/testers/networktest/networktest.hh	/^        NetworkTest *networktest;$/;"	m	class:NetworkTest::CpuPort
newCount	./cpu/pred/tournament.cc	/^TournamentBP::BPHistory::newCount = 0;$/;"	m	class:TournamentBP::BPHistory	file:
newCount	./cpu/pred/tournament.hh	/^        static int newCount;$/;"	m	struct:TournamentBP::BPHistory
newCurrentMachine	./mem/slicc/symbols/SymbolTable.py	/^    def newCurrentMachine(self, sym):$/;"	m	class:SymbolTable
newInfoSet	./arch/alpha/interrupts.hh	/^    bool newInfoSet;$/;"	m	class:AlphaISA::Interrupts
newIpl	./arch/alpha/interrupts.hh	/^    int newIpl;$/;"	m	class:AlphaISA::Interrupts
newMachComponentSym	./mem/slicc/symbols/SymbolTable.py	/^    def newMachComponentSym(self, symbol):$/;"	m	class:SymbolTable
newPCState	./cpu/checker/cpu.hh	/^    TheISA::PCState newPCState;$/;"	m	class:CheckerCPU
newPhysReg	./cpu/o3/rename.hh	/^        PhysRegIndex newPhysReg;$/;"	m	struct:DefaultRename::RenameHistory
newPredictionSeqNum	./cpu/minor/pipe_data.hh	/^    InstSeqNum newPredictionSeqNum;$/;"	m	class:Minor::BranchData
newState	./arch/arm/nativetrace.hh	/^        uint64_t *newState;$/;"	m	struct:Trace::ArmNativeTrace::ThreadState
newStreamSeqNum	./cpu/minor/pipe_data.hh	/^    InstSeqNum newStreamSeqNum;$/;"	m	class:Minor::BranchData
newSummary	./arch/alpha/interrupts.hh	/^    int newSummary;$/;"	m	class:AlphaISA::Interrupts
newSymbol	./mem/slicc/symbols/SymbolTable.py	/^    def newSymbol(self, sym):$/;"	m	class:SymbolTable
newVarStruct	./cpu/kvm/x86_cpu.cc	/^static STRUCT *newVarStruct(size_t entries)$/;"	f	file:
new_eq	./sim/eventq.hh	/^        EventQueue &new_eq;$/;"	m	class:EventQueue::ScopedMigration
newline_if_needed	./base/misc.cc	/^newline_if_needed(std::ostream &stream, const char *format)$/;"	f	file:
next	./base/chunk_generator.hh	/^    next()$/;"	f	class:ChunkGenerator
next	./cpu/o3/dep_graph.hh	/^    DependencyEntry<DynInstPtr> *next;$/;"	m	class:DependencyEntry
next	./dev/pci/copy_engine_defs.hh	/^    Addr next;$/;"	m	struct:CopyEngineReg::DmaDesc
next	./dev/virtio/base.cc	/^VirtDescriptor::next() const$/;"	f	class:VirtDescriptor
next	./dev/virtio/virtio_ring.h	/^    uint16_t next;$/;"	m	struct:vring_desc
next	./mem/cache/tags/fa_lru.hh	/^    FALRUBlk *next;$/;"	m	class:FALRUBlk
next	./python/m5/util/multidict.py	/^    def next(self):$/;"	m	class:multidict
nextAArch64	./arch/arm/types.hh	/^        nextAArch64() const$/;"	f	class:ArmISA::PCState
nextAArch64	./arch/arm/types.hh	/^        nextAArch64(bool val)$/;"	f	class:ArmISA::PCState
nextAddr	./base/chunk_generator.hh	/^    Addr nextAddr;$/;"	m	class:ChunkGenerator
nextAddr	./cpu/testers/traffic_gen/generators.hh	/^    Addr nextAddr;$/;"	m	class:LinearGen
nextAddr	./dev/dma_device.hh	/^    Addr nextAddr;$/;"	m	class:DmaReadFifo
nextAddress	./mem/ruby/structures/TimerTable.cc	/^TimerTable::nextAddress() const$/;"	f	class:TimerTable
nextAt	./dev/net/dist_iface.hh	/^        Tick nextAt;$/;"	m	class:DistIface::Sync
nextBin	./sim/eventq.hh	/^    Event *nextBin;$/;"	m	class:Event
nextCycle	./sim/clocked_object.hh	/^    Tick nextCycle() const$/;"	f	class:Clocked
nextDescAddr	./arch/arm/table_walker.hh	/^        Addr nextDescAddr(Addr va) const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
nextElement	./cpu/testers/traffic_gen/generators.hh	/^    TraceElement nextElement;$/;"	m	class:TraceGen
nextExecute	./cpu/trace/trace_cpu.cc	/^TraceCPU::FixedRetryGen::nextExecute()$/;"	f	class:TraceCPU::FixedRetryGen
nextFlags	./arch/arm/types.hh	/^        uint8_t nextFlags;$/;"	m	class:ArmISA::PCState
nextIdxs	./arch/arm/insts/vfp.cc	/^VfpMacroOp::nextIdxs(IntRegIndex &dest)$/;"	f	class:ArmISA::VfpMacroOp
nextIdxs	./arch/arm/insts/vfp.cc	/^VfpMacroOp::nextIdxs(IntRegIndex &dest, IntRegIndex &op1)$/;"	f	class:ArmISA::VfpMacroOp
nextIdxs	./arch/arm/insts/vfp.cc	/^VfpMacroOp::nextIdxs(IntRegIndex &dest, IntRegIndex &op1, IntRegIndex &op2)$/;"	f	class:ArmISA::VfpMacroOp
nextInBin	./sim/eventq.hh	/^    Event *nextInBin;$/;"	m	class:Event
nextIndex	./mem/stack_dist_calc.hh	/^    std::vector<uint64_t> nextIndex;$/;"	m	class:StackDistCalc
nextInsertCycle	./cpu/minor/func_unit.hh	/^    Cycles nextInsertCycle;$/;"	m	class:Minor::FUPipeline
nextInstAddr	./arch/generic/types.hh	/^    nextInstAddr() const$/;"	f	class:GenericISA::PCStateBase
nextInstAddr	./cpu/base_dyn_inst.hh	/^    Addr nextInstAddr() const { return pc.nextInstAddr(); }$/;"	f	class:BaseDynInst
nextInstAddr	./cpu/checker/cpu.hh	/^    Addr nextInstAddr() { return thread->nextInstAddr(); }$/;"	f	class:CheckerCPU
nextInstAddr	./cpu/checker/thread_context.hh	/^    Addr nextInstAddr()$/;"	f	class:CheckerThreadContext
nextInstAddr	./cpu/o3/commit.hh	/^    Addr nextInstAddr(ThreadID tid) { return pc[tid].nextInstAddr(); }$/;"	f	class:DefaultCommit
nextInstAddr	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::nextInstAddr(ThreadID tid)$/;"	f	class:FullO3CPU
nextInstAddr	./cpu/o3/thread_context.hh	/^    virtual Addr nextInstAddr()$/;"	f	class:O3ThreadContext
nextInstAddr	./cpu/simple_thread.hh	/^    nextInstAddr()$/;"	f	class:SimpleThread
nextInstAddr	./cpu/thread_context.hh	/^    Addr nextInstAddr() { return actualTC->nextInstAddr(); }$/;"	f	class:ProxyThreadContext
nextItstate	./arch/arm/types.hh	/^        nextItstate() const$/;"	f	class:ArmISA::PCState
nextItstate	./arch/arm/types.hh	/^        nextItstate(uint8_t value)$/;"	f	class:ArmISA::PCState
nextJazelle	./arch/arm/types.hh	/^        nextJazelle() const$/;"	f	class:ArmISA::PCState
nextJazelle	./arch/arm/types.hh	/^        nextJazelle(bool val)$/;"	f	class:ArmISA::PCState
nextLineAddr	./dev/arm/hdlcd.hh	/^        Addr nextLineAddr;$/;"	m	class:HDLcd::DmaEngine
nextMSHRReadyTime	./mem/cache/cache.cc	/^Cache::nextMSHRReadyTime() const$/;"	f	class:Cache
nextMSHRReadyTime	./mem/cache/mshr_queue.hh	/^    Tick nextMSHRReadyTime() const$/;"	f	class:MSHRQueue
nextMode	./arch/arm/faults.hh	/^        const OperatingMode nextMode;$/;"	m	struct:ArmISA::ArmFault::FaultVals
nextMode	./arch/arm/faults.hh	/^    OperatingMode nextMode() { return vals.nextMode; }$/;"	f	class:ArmISA::ArmFaultVals
nextPC	./cpu/o3/comm.hh	/^        TheISA::PCState nextPC;$/;"	m	struct:TimeBufStruct::decodeComm
nextPID	./sim/system.hh	/^    uint64_t nextPID;$/;"	m	class:System
nextPacketTick	./cpu/testers/traffic_gen/generators.cc	/^LinearGen::nextPacketTick(bool elastic, Tick delay) const$/;"	f	class:LinearGen
nextPacketTick	./cpu/testers/traffic_gen/generators.cc	/^RandomGen::nextPacketTick(bool elastic, Tick delay) const$/;"	f	class:RandomGen
nextPacketTick	./cpu/testers/traffic_gen/generators.cc	/^TraceGen::nextPacketTick(bool elastic, Tick delay) const$/;"	f	class:TraceGen
nextPacketTick	./cpu/testers/traffic_gen/generators.hh	/^    Tick nextPacketTick(bool elastic, Tick delay) const { return MaxTick; }$/;"	f	class:IdleGen
nextPacketTick	./cpu/testers/traffic_gen/traffic_gen.hh	/^    Tick nextPacketTick;$/;"	m	class:TrafficGen
nextPrefetchReadyTime	./mem/cache/prefetch/queued.hh	/^    Tick nextPrefetchReadyTime() const$/;"	f	class:QueuedPrefetcher
nextPrivilegeLevel	./arch/sparc/faults.hh	/^        const PrivilegeLevel nextPrivilegeLevel[NumLevels];$/;"	m	struct:SparcISA::SparcFaultBase::FaultVals
nextProgressMessage	./cpu/testers/memtest/memtest.hh	/^    Tick nextProgressMessage;   \/\/ access # for next progress report$/;"	m	class:MemTest
nextRead	./cpu/trace/trace_cpu.hh	/^        bool nextRead;$/;"	m	class:TraceCPU::ElasticDataGen
nextRepeat	./dev/net/dist_iface.hh	/^        Tick nextRepeat;$/;"	m	class:DistIface::Sync
nextReqEvent	./mem/dram_ctrl.hh	/^    EventWrapper<DRAMCtrl,&DRAMCtrl::processNextReqEvent> nextReqEvent;$/;"	m	class:DRAMCtrl
nextReqTime	./mem/dram_ctrl.hh	/^    Tick nextReqTime;$/;"	m	class:DRAMCtrl
nextSeq	./arch/x86/tlb.hh	/^        nextSeq()$/;"	f	class:X86ISA::TLB
nextSeqCount	./cpu/testers/traffic_gen/generators.hh	/^    unsigned int nextSeqCount;$/;"	m	class:DramRotGen
nextSerial	./mem/mem_checker.hh	/^    Serial nextSerial;$/;"	m	class:MemChecker
nextStageReserve	./cpu/minor/decode.hh	/^    Reservable &nextStageReserve;$/;"	m	class:Minor::Decode
nextStageReserve	./cpu/minor/fetch1.hh	/^    Reservable &nextStageReserve;$/;"	m	class:Minor::Fetch1
nextStageReserve	./cpu/minor/fetch2.hh	/^    Reservable &nextStageReserve;$/;"	m	class:Minor::Fetch2
nextState	./arch/x86/pagetable_walker.hh	/^            State nextState;$/;"	m	class:X86ISA::Walker::WalkerState
nextState	./dev/pci/copy_engine.hh	/^        ChannelState nextState;$/;"	m	class:CopyEngine::CopyEngineChannel
nextState	./mem/slicc/generate/tex.py	/^                    nextState = ""$/;"	v
nextState	./mem/slicc/generate/tex.py	/^                    nextState = trans.getNextStateShorthand()$/;"	v
nextTableAddr	./arch/arm/table_walker.hh	/^        Addr nextTableAddr() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
nextThumb	./arch/arm/types.hh	/^        nextThumb() const$/;"	f	class:ArmISA::PCState
nextThumb	./arch/arm/types.hh	/^        nextThumb(bool val)$/;"	f	class:ArmISA::PCState
nextTick	./sim/eventq.hh	/^    Tick nextTick() const { return head->when(); }$/;"	f	class:EventQueue
nextTransitionTick	./cpu/testers/traffic_gen/traffic_gen.hh	/^    Tick nextTransitionTick;$/;"	m	class:TrafficGen
nextVCPUID	./cpu/kvm/vm.hh	/^    long nextVCPUID;$/;"	m	class:KvmVM
nextWalk	./arch/arm/table_walker.cc	/^TableWalker::nextWalk(ThreadContext *tc)$/;"	f	class:TableWalker
next_thread_stack_base	./sim/process.hh	/^    Addr next_thread_stack_base;$/;"	m	class:Process
nextnlu	./arch/alpha/tlb.hh	/^    void nextnlu() { if (++nlu >= table.size()) nlu = 0; }$/;"	f	class:AlphaISA::TLB
nextnlu	./arch/mips/tlb.hh	/^    void nextnlu() { if (++nlu >= size) nlu = 0; }$/;"	f	class:MipsISA::TLB
nextnlu	./arch/power/tlb.hh	/^    nextnlu()$/;"	f	class:PowerISA::TLB
nfssvc	./kern/tru64/tru64_syscalls.hh	/^        nfssvc = 158,$/;"	e	enum:SystemCalls::__anon102
ni	./arch/power/miscregs.hh	/^    Bitfield<3> ni;$/;"	m	namespace:PowerISA
ni_flit_size	./mem/ruby/network/garnet/BaseGarnetNetwork.py	/^    ni_flit_size = Param.Int(16, "network interface flit size in bytes")$/;"	v	class:BaseGarnetNetwork
nlink_t	./kern/solaris/solaris.hh	/^    typedef uint32_t nlink_t;$/;"	t	class:Solaris
nlink_t	./kern/tru64/tru64.hh	/^    typedef uint16_t nlink_t;$/;"	t	class:Tru64
nls	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    nls = []$/;"	v	class:GarnetExtLink_d
nls	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    nls = []$/;"	v	class:GarnetIntLink_d
nls	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.py	/^    nls = []$/;"	v	class:GarnetExtLink
nls	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.py	/^    nls = []$/;"	v	class:GarnetIntLink
nlu	./arch/alpha/tlb.hh	/^    int nlu;                \/\/ not last used entry (for replacement)$/;"	m	class:AlphaISA::TLB
nlu	./arch/mips/tlb.hh	/^    int nlu;                    \/\/ not last used entry (for replacement)$/;"	m	class:MipsISA::TLB
nlu	./arch/power/tlb.hh	/^    int nlu;                    \/\/ not last used entry (for replacement)$/;"	m	class:PowerISA::TLB
nmfi	./arch/arm/miscregs.hh	/^        Bitfield<27>   nmfi;    \/\/ Non-maskable FIQ support (ARMv7 only)$/;"	m	namespace:ArmISA
nmi	./arch/mips/pra_constants.hh	/^    Bitfield<19>     nmi;$/;"	m	namespace:MipsISA
nmiVector	./arch/x86/interrupts.hh	/^    uint8_t nmiVector;$/;"	m	class:X86ISA::Interrupts
nmrr	./arch/arm/tlb.hh	/^    NMRR nmrr;$/;"	m	class:ArmISA::TLB
nnpc	./arch/generic/types.hh	/^    Addr nnpc() const { return _nnpc; }$/;"	f	class:GenericISA::DelaySlotPCState
nnpc	./arch/generic/types.hh	/^    void nnpc(Addr val) { _nnpc = val; }$/;"	f	class:GenericISA::DelaySlotPCState
noCostFUIndex	./cpu/minor/execute.hh	/^    unsigned int noCostFUIndex;$/;"	m	class:Minor::Execute
noCxxHeader	./python/m5/SimObject.py	/^noCxxHeader = False$/;"	v
noExec	./arch/x86/pagetable.hh	/^        bool noExec;$/;"	m	struct:X86ISA::TlbEntry
noOutput	./base/stats/text.cc	/^Text::noOutput(const Info &info)$/;"	f	class:Stats::Text
noRequest	./cpu/testers/memtest/memtest.cc	/^MemTest::noRequest()$/;"	f	class:MemTest
noRequestEvent	./cpu/testers/memtest/memtest.hh	/^    EventWrapper<MemTest, &MemTest::noRequest> noRequestEvent;$/;"	m	class:MemTest
noResponse	./cpu/testers/memtest/memtest.cc	/^MemTest::noResponse()$/;"	f	class:MemTest
noResponseCycles	./cpu/testers/networktest/networktest.hh	/^    Tick noResponseCycles;$/;"	m	class:NetworkTest
noResponseEvent	./cpu/testers/memtest/memtest.hh	/^    EventWrapper<MemTest, &MemTest::noResponse> noResponseEvent;$/;"	m	class:MemTest
noSquashFromTC	./cpu/o3/thread_state.hh	/^    bool noSquashFromTC;$/;"	m	struct:O3ThreadState
noTargetMSHR	./mem/cache/base.hh	/^    MSHR *noTargetMSHR;$/;"	m	class:BaseCache
noWB	./cpu/o3/lsq_unit.hh	/^        bool noWB;$/;"	m	class:LSQUnit::LSQSenderState
no_retry_on_stall	./mem/ruby/system/RubyPort.hh	/^        bool no_retry_on_stall;$/;"	m	class:RubyPort::MemSlavePort
no_retry_on_stall	./mem/ruby/system/Sequencer.py	/^    no_retry_on_stall = Param.Bool(False, "")$/;"	v	class:RubyPort
no_termcap	./python/m5/util/terminal.py	/^no_termcap = ColorStrings(null_cap_string)$/;"	v
nodcr	./arch/mips/dt_constants.hh	/^    Bitfield<29>     nodcr;$/;"	m	namespace:MipsISA
node	./base/statistics.hh	/^    NodePtr node;$/;"	m	class:Stats::Temp
nodeIndex	./mem/stack_dist_calc.hh	/^        uint64_t nodeIndex;$/;"	m	struct:StackDistCalc::Node
node_a	./mem/ruby/network/BasicLink.py	/^    node_a = Param.BasicRouter("Router on one end")$/;"	v	class:BasicIntLink
node_b	./mem/ruby/network/BasicLink.py	/^    node_b = Param.BasicRouter("Router on other end")$/;"	v	class:BasicIntLink
node_less_then_eq	./mem/ruby/common/Histogram.cc	/^node_less_then_eq(const Histogram* n1, const Histogram* n2)$/;"	f
node_less_then_eq	./mem/ruby/profiler/StoreTrace.hh	/^node_less_then_eq(const StoreTrace* n1, const StoreTrace* n2)$/;"	f
nodefault	./python/m5/options.py	/^class nodefault(object): pass$/;"	c
nodename	./kern/linux/linux.hh	/^        char nodename[_SYS_NMLN];       \/\/!< Node name.$/;"	m	struct:Linux::utsname
nodename	./kern/operatingsystem.hh	/^        char nodename[_SYS_NMLN];       \/\/!< Node name.$/;"	m	struct:OperatingSystem::__anon92
nodename	./kern/solaris/solaris.hh	/^        char nodename[_SYS_NMLN];       \/\/!< Node name.$/;"	m	struct:Solaris::utsname
nodename	./kern/tru64/tru64.hh	/^        char nodename[_SYS_NMLN];       \/\/!< Node name.$/;"	m	struct:Tru64::utsname
nodes	./dev/net/tcp_iface.hh	/^    static std::vector<std::pair<NodeInfo, int> > nodes;$/;"	m	class:TCPIface
nodesRemoved	./cpu/o3/dep_graph.hh	/^    uint64_t nodesRemoved;$/;"	m	class:DependencyGraph
nodesTraversed	./cpu/o3/dep_graph.hh	/^    uint64_t nodesTraversed;$/;"	m	class:DependencyGraph
noexcept	./dev/virtio/base.hh	/^    VirtDescriptor &operator=(VirtDescriptor &&rhs) noexcept;$/;"	m	class:VirtDescriptor
noexcept	./dev/virtio/base.hh	/^    VirtDescriptor(VirtDescriptor &&other) noexcept;$/;"	m	class:VirtDescriptor
noexcept	./dev/virtio/base.hh	/^    ~VirtDescriptor() noexcept;$/;"	m	class:VirtDescriptor
nofault	./arch/sparc/pagetable.hh	/^    bool nofault()  const { assert(populated); return bits(entry4u,60,60); }$/;"	f	class:SparcISA::PageTableEntry
nofix	./python/m5/util/code_formatter.py	/^    def nofix(self):$/;"	m	class:code_formatter
nomali	./dev/arm/gpu_nomali.hh	/^    nomali_handle_t nomali;$/;"	m	class:NoMaliGpu
nomaliInfo	./dev/arm/gpu_nomali.hh	/^    nomali_info_t nomaliInfo;$/;"	m	class:NoMaliGpu
nonCacheable	./arch/arm/pagetable.hh	/^    bool nonCacheable;     \/\/ Can we wrap this in mtype?$/;"	m	struct:ArmISA::TlbEntry
nonSpecInstReady	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::nonSpecInstReady(DynInstPtr &inst)$/;"	f	class:MemDepUnit
nonSpecInsts	./cpu/o3/inst_queue.hh	/^    std::map<InstSeqNum, DynInstPtr> nonSpecInsts;$/;"	m	class:InstructionQueue
nonSpecSeqNum	./cpu/o3/comm.hh	/^        InstSeqNum nonSpecSeqNum; \/\/ *I$/;"	m	struct:TimeBufStruct::commitComm
nonan	./base/stats/info.hh	/^const FlagsType nonan =         0x0200;$/;"	m	namespace:Stats
none	./base/cprintf_formats.hh	/^    enum { none, string, integer, character, floating } format;$/;"	e	enum:cp::Format::__anon118
none	./base/stats/info.hh	/^const FlagsType none =          0x0000;$/;"	m	namespace:Stats
noneSet	./base/flags.hh	/^    bool noneSet() const { return _flags == 0; }$/;"	f	class:Flags
noneSet	./base/flags.hh	/^    bool noneSet(Type flags) const { return (_flags & flags) == 0; }$/;"	f	class:Flags
nonunit_filter	./mem/ruby/structures/RubyPrefetcher.py	/^    nonunit_filter = Param.UInt32(8,$/;"	v	class:Prefetcher
normalMicroPC	./base/types.hh	/^normalMicroPC(MicroPC upc)$/;"	f
normalize	./base/circlebuf.hh	/^    void normalize() {$/;"	f	class:CircleBuf
norml1	./arch/x86/pagetable.hh	/^        Bitfield<21, 12> norml1;$/;"	m	namespace:X86ISA
norml2	./arch/x86/pagetable.hh	/^        Bitfield<31, 22> norml2;$/;"	m	namespace:X86ISA
nos0	./arch/arm/miscregs.hh	/^       Bitfield<24> nos0;$/;"	m	namespace:ArmISA
nos1	./arch/arm/miscregs.hh	/^       Bitfield<25> nos1;$/;"	m	namespace:ArmISA
nos2	./arch/arm/miscregs.hh	/^       Bitfield<26> nos2;$/;"	m	namespace:ArmISA
nos3	./arch/arm/miscregs.hh	/^       Bitfield<27> nos3;$/;"	m	namespace:ArmISA
nos4	./arch/arm/miscregs.hh	/^       Bitfield<28> nos4;$/;"	m	namespace:ArmISA
nos5	./arch/arm/miscregs.hh	/^       Bitfield<29> nos5;$/;"	m	namespace:ArmISA
nos6	./arch/arm/miscregs.hh	/^       Bitfield<30> nos6;$/;"	m	namespace:ArmISA
nos7	./arch/arm/miscregs.hh	/^       Bitfield<31> nos7;$/;"	m	namespace:ArmISA
nosst	./arch/mips/dt_constants.hh	/^    Bitfield<9>      nosst;$/;"	m	namespace:MipsISA
notIdleFraction	./cpu/simple/exec_context.hh	/^    Stats::Average notIdleFraction;$/;"	m	class:SimpleExecContext
notTakenCounters	./cpu/pred/bi_mode.hh	/^    std::vector<SatCounter> notTakenCounters;$/;"	m	class:BiModeBP
notTakenPred	./cpu/pred/bi_mode.hh	/^        bool notTakenPred;$/;"	m	struct:BiModeBP::BPHistory
notTakenThreshold	./cpu/pred/bi_mode.hh	/^    unsigned notTakenThreshold;$/;"	m	class:BiModeBP
notify	./mem/cache/prefetch/queued.cc	/^QueuedPrefetcher::notify(const PacketPtr &pkt)$/;"	f	class:QueuedPrefetcher
notify	./sim/probe/probe.hh	/^    virtual void notify(const Arg &val) { (object->*function)(val); }$/;"	f	class:ProbeListenerArg
notify	./sim/probe/probe.hh	/^    void notify(const Arg &arg)$/;"	f	class:ProbePointArg
nozero	./base/stats/info.hh	/^const FlagsType nozero =        0x0100;$/;"	m	namespace:Stats
npc	./arch/generic/types.hh	/^    Addr npc() const { return _npc; }$/;"	f	class:GenericISA::SimplePCState
npc	./arch/generic/types.hh	/^    void npc(Addr val) { _npc = val; }$/;"	f	class:GenericISA::SimplePCState
npc	./arch/sparc/remote_gdb.hh	/^            uint32_t npc;$/;"	m	struct:SparcISA::RemoteGDB::SPARCGdbRegCache::__anon42
npc	./arch/sparc/remote_gdb.hh	/^            uint64_t npc;$/;"	m	struct:SparcISA::RemoteGDB::SPARC64GdbRegCache::__anon43
nphalt	./arch/alpha/osfpal.hh	/^        nphalt = 0xbe,$/;"	e	enum:PAL::__anon50
nprint	./mem/slicc/main.py	/^def nprint(format, *args):$/;"	f
nres_error_head	./arch/sparc/isa.hh	/^    uint64_t nres_error_head;$/;"	m	class:SparcISA::ISA
nres_error_tail	./arch/sparc/isa.hh	/^    uint64_t nres_error_tail;$/;"	m	class:SparcISA::ISA
ns	./arch/arm/miscregs.hh	/^        Bitfield<0> ns;$/;"	m	namespace:ArmISA
ns	./arch/arm/miscregs.hh	/^        Bitfield<9>      ns;$/;"	m	namespace:ArmISA
ns	./arch/arm/pagetable.hh	/^    bool ns;$/;"	m	struct:ArmISA::TlbEntry
ns	./sim/core.cc	/^Tick ns;$/;"	m	namespace:SimClock::Int	file:
ns	./sim/core.cc	/^double ns;$/;"	m	namespace:SimClock::Float	file:
ns0	./arch/arm/miscregs.hh	/^       Bitfield<18> ns0;$/;"	m	namespace:ArmISA
ns1	./arch/arm/miscregs.hh	/^       Bitfield<19> ns1;$/;"	m	namespace:ArmISA
ns_desc32	./dev/net/ns_gige_reg.h	/^struct ns_desc32 {$/;"	s
ns_desc64	./dev/net/ns_gige_reg.h	/^struct ns_desc64 {$/;"	s
nsasedis	./arch/arm/miscregs.hh	/^        Bitfield<15> nsasedis;$/;"	m	namespace:ArmISA
nsd32dis	./arch/arm/miscregs.hh	/^        Bitfield<14> nsd32dis;$/;"	m	namespace:ArmISA
nsec	./base/time.hh	/^    long nsec() const { return _time.tv_nsec; }$/;"	f	class:Time
nsec	./base/time.hh	/^    void nsec(long nsec) { _time.tv_nsec = nsec; }$/;"	f	class:Time
nsh	./arch/arm/pmu.hh	/^        Bitfield<27> nsh;$/;"	m	class:ArmISA::PMU
nsk	./arch/arm/pmu.hh	/^        Bitfield<29> nsk;$/;"	m	class:ArmISA::PMU
nstid	./arch/arm/pagetable.hh	/^    bool nstid;$/;"	m	struct:ArmISA::TlbEntry
nstrcdis	./arch/arm/miscregs.hh	/^        Bitfield<20> nstrcdis;$/;"	m	namespace:ArmISA
nsu	./arch/arm/pmu.hh	/^        Bitfield<28> nsu;$/;"	m	class:ArmISA::PMU
nt	./arch/x86/regs/misc.hh	/^        Bitfield<14> nt; \/\/ Nested Task$/;"	m	namespace:X86ISA
ntp_adjtime	./kern/tru64/tru64_syscalls.hh	/^        ntp_adjtime = 245,$/;"	e	enum:SystemCalls::__anon102
ntp_gettime	./kern/tru64/tru64_syscalls.hh	/^        ntp_gettime = 246,$/;"	e	enum:SystemCalls::__anon102
ntwe	./arch/arm/miscregs.hh	/^        Bitfield<18>   ntwe;    \/\/ Not trap WFE$/;"	m	namespace:ArmISA
ntwi	./arch/arm/miscregs.hh	/^        Bitfield<16>   ntwi;    \/\/ Not trap WFI$/;"	m	namespace:ArmISA
null	./arch/arm/linux/atag.hh	/^    virtual bool null() { return false; }$/;"	f	class:AtagHeader
null	./arch/arm/linux/atag.hh	/^    virtual bool null() { return true; }$/;"	f	class:AtagNone
null	./mem/AbstractMemory.py	/^    null = Param.Bool(False, "Do not store data, always return zero")$/;"	v	class:AbstractMemory
nullCallback	./dev/net/i8254xGBe.hh	/^        void nullCallback() {$/;"	f	class:IGbE::TxDescCache
nullEvent	./dev/net/i8254xGBe.hh	/^        EventWrapper<TxDescCache, &TxDescCache::nullCallback> nullEvent;$/;"	m	class:IGbE::TxDescCache
nullStaticInstPtr	./cpu/static_inst.cc	/^StaticInstPtr StaticInst::nullStaticInstPtr;$/;"	m	class:StaticInst	file:
nullStaticInstPtr	./cpu/static_inst.hh	/^    static StaticInstPtr nullStaticInstPtr;$/;"	m	class:StaticInst
null_cap_string	./python/m5/util/terminal.py	/^def null_cap_string(s, *args):$/;"	f
num	./cpu/kvm/vm.hh	/^        int32_t num;$/;"	m	struct:KvmVM::MemSlot
num	./dev/intel_8254_timer.hh	/^        unsigned int num;$/;"	m	class:Intel8254Timer::Counter
num	./dev/virtio/virtio_ring.h	/^    unsigned int num;$/;"	m	struct:vring
num	./mem/ruby/common/MachineID.hh	/^    NodeID num;$/;"	m	struct:MachineID
numAccessesInDTLB	./cpu/minor/lsq.hh	/^    unsigned int numAccessesInDTLB;$/;"	m	class:Minor::LSQ
numAccessesInMemorySystem	./cpu/minor/lsq.hh	/^    unsigned int numAccessesInMemorySystem;$/;"	m	class:Minor::LSQ
numAccessesIssuedToMemory	./cpu/minor/lsq.hh	/^    unsigned int numAccessesIssuedToMemory;$/;"	m	class:Minor::LSQ
numActiveThreads	./cpu/o3/cpu.hh	/^    int numActiveThreads()$/;"	f	class:FullO3CPU
numAllocatedStreams	./mem/ruby/structures/Prefetcher.hh	/^        Stats::Scalar numAllocatedStreams;$/;"	m	class:Prefetcher
numBanksActive	./mem/dram_ctrl.hh	/^        unsigned int numBanksActive;$/;"	m	class:DRAMCtrl::Rank
numBlocks	./mem/cache/tags/base.hh	/^    unsigned numBlocks;$/;"	m	class:BaseTags
numBranchMispred	./cpu/simple/exec_context.hh	/^    Stats::Scalar numBranchMispred;$/;"	m	class:SimpleExecContext
numBranches	./cpu/simple/exec_context.hh	/^    Stats::Scalar numBranches;$/;"	m	class:SimpleExecContext
numBusyCycles	./cpu/simple/exec_context.hh	/^    Stats::Formula numBusyCycles;$/;"	m	class:SimpleExecContext
numBytes	./arch/arm/stage2_mmu.hh	/^        int       numBytes;$/;"	m	class:ArmISA::Stage2MMU::Stage2Translation
numBytes	./dev/dma_device.hh	/^        Addr numBytes;$/;"	m	struct:DmaPort::DmaReqState
numCCDestRegs	./cpu/base_dyn_inst.hh	/^    int8_t numCCDestRegs() const { return staticInst->numCCDestRegs(); }$/;"	f	class:BaseDynInst
numCCDestRegs	./cpu/static_inst.hh	/^    int8_t numCCDestRegs() const { return _numCCDestRegs; }$/;"	f	class:StaticInst
numCCPhysRegs	./cpu/o3/regfile.hh	/^    unsigned numCCPhysRegs() const$/;"	f	class:PhysRegFile
numCCRegReads	./cpu/simple/exec_context.hh	/^    Stats::Scalar numCCRegReads;$/;"	m	class:SimpleExecContext
numCCRegWrites	./cpu/simple/exec_context.hh	/^    Stats::Scalar numCCRegWrites;$/;"	m	class:SimpleExecContext
numCPUs	./arch/arm/miscregs.hh	/^      Bitfield<25,24> numCPUs;$/;"	m	namespace:ArmISA
numCPUs	./dev/alpha/access.h	/^    uint32_t    numCPUs;                \/\/ 08:$/;"	m	struct:AlphaAccess
numCPUs	./dev/mips/access.h	/^    uint32_t    numCPUs;                \/\/ 0C:$/;"	m	struct:MipsAccess
numCaches	./mem/cache/tags/fa_lru.hh	/^    unsigned numCaches;$/;"	m	class:FALRU
numCallsReturns	./cpu/simple/exec_context.hh	/^    Stats::Scalar numCallsReturns;$/;"	m	class:SimpleExecContext
numCkptReq	./dev/net/dist_iface.hh	/^        unsigned numCkptReq;$/;"	m	class:DistIface::SyncSwitch
numCoalescedMMIO	./cpu/kvm/base.hh	/^    Stats::Scalar numCoalescedMMIO;$/;"	m	class:BaseKvmCPU
numCommittedDist	./cpu/o3/commit.hh	/^    Stats::Distribution numCommittedDist;$/;"	m	class:DefaultCommit
numCondCtrlInsts	./cpu/simple/exec_context.hh	/^    Stats::Scalar numCondCtrlInsts;$/;"	m	class:SimpleExecContext
numContexts	./cpu/base.hh	/^   unsigned numContexts() { return threadContexts.size(); }$/;"	f	class:BaseCPU
numContexts	./sim/system.hh	/^    int numContexts()$/;"	f	class:System
numCpus	./sim/process.hh	/^    unsigned int numCpus() { return contextIds.size(); }$/;"	f	class:Process
numCycles	./cpu/base.hh	/^    Stats::Scalar numCycles;$/;"	m	class:BaseCPU
numCycles	./sim/ticked_object.hh	/^    Stats::Scalar &numCycles;$/;"	m	class:Ticked
numCyclesLocal	./sim/ticked_object.hh	/^    Stats::Scalar *numCyclesLocal;$/;"	m	class:Ticked
numDataArrayReads	./mem/ruby/structures/CacheMemory.hh	/^    Stats::Scalar numDataArrayReads;$/;"	m	class:CacheMemory
numDataArrayStalls	./mem/ruby/structures/CacheMemory.hh	/^    Stats::Scalar numDataArrayStalls;$/;"	m	class:CacheMemory
numDataArrayWrites	./mem/ruby/structures/CacheMemory.hh	/^    Stats::Scalar numDataArrayWrites;$/;"	m	class:CacheMemory
numDepts	./cpu/o3/probe/elastic_trace.hh	/^        uint32_t numDepts;$/;"	m	struct:ElasticTrace::TraceInfo
numDestRegs	./cpu/base_dyn_inst.hh	/^    int8_t numDestRegs() const { return staticInst->numDestRegs(); }$/;"	f	class:BaseDynInst
numDestRegs	./cpu/static_inst.hh	/^    int8_t numDestRegs() const { return _numDestRegs; }$/;"	f	class:StaticInst
numDiscardedOps	./cpu/minor/stats.hh	/^    Stats::Scalar numDiscardedOps;$/;"	m	class:Minor::MinorStats
numDomains	./sim/dvfs_handler.hh	/^    uint32_t numDomains() const { return domainIDList.size(); }$/;"	f	class:DVFSHandler
numDroppedPrefetches	./mem/ruby/structures/Prefetcher.hh	/^        Stats::Scalar numDroppedPrefetches;$/;"	m	class:Prefetcher
numEntries	./cpu/o3/dep_graph.hh	/^    int numEntries;$/;"	m	class:DependencyGraph
numEntries	./cpu/o3/inst_queue.hh	/^    unsigned numEntries;$/;"	m	class:InstructionQueue
numEntries	./cpu/o3/rob.hh	/^    unsigned numEntries;$/;"	m	class:ROB
numEntries	./cpu/pred/btb.hh	/^    unsigned numEntries;$/;"	m	class:DefaultBTB
numEntries	./cpu/pred/ras.hh	/^    unsigned numEntries;$/;"	m	class:ReturnAddrStack
numEntries	./mem/cache/mshr_queue.hh	/^    const int numEntries;$/;"	m	class:MSHRQueue
numExitReq	./dev/net/dist_iface.hh	/^        unsigned numExitReq;$/;"	m	class:DistIface::SyncSwitch
numExitSignal	./cpu/kvm/base.hh	/^    Stats::Scalar numExitSignal;$/;"	m	class:BaseKvmCPU
numFPDestRegs	./cpu/base_dyn_inst.hh	/^    int8_t numFPDestRegs()  const { return staticInst->numFPDestRegs(); }$/;"	f	class:BaseDynInst
numFPDestRegs	./cpu/static_inst.hh	/^    int8_t numFPDestRegs()  const { return _numFPDestRegs; }$/;"	f	class:StaticInst
numFU	./cpu/o3/fu_pool.hh	/^    int numFU;$/;"	m	class:FUPool
numFetchSuspends	./cpu/minor/stats.hh	/^    Stats::Scalar numFetchSuspends;$/;"	m	class:Minor::MinorStats
numFetchesInITLB	./cpu/minor/fetch1.hh	/^    unsigned int numFetchesInITLB;$/;"	m	class:Minor::Fetch1
numFetchesInMemorySystem	./cpu/minor/fetch1.hh	/^    unsigned int numFetchesInMemorySystem;$/;"	m	class:Minor::Fetch1
numFetchingThreads	./cpu/o3/fetch.hh	/^    ThreadID numFetchingThreads;$/;"	m	class:DefaultFetch
numFillInsts	./arch/sparc/handlers.hh	/^const int numFillInsts = 32;$/;"	m	namespace:SparcISA
numFilteredNodes	./cpu/o3/probe/elastic_trace.hh	/^    Stats::Scalar numFilteredNodes;$/;"	m	class:ElasticTrace
numFloatPhysRegs	./cpu/o3/regfile.hh	/^    unsigned numFloatPhysRegs() const$/;"	f	class:PhysRegFile
numFpAluAccesses	./cpu/simple/exec_context.hh	/^    Stats::Scalar numFpAluAccesses;$/;"	m	class:SimpleExecContext
numFpInsts	./cpu/simple/exec_context.hh	/^    Stats::Scalar numFpInsts;$/;"	m	class:SimpleExecContext
numFpRegReads	./cpu/simple/exec_context.hh	/^    Stats::Scalar numFpRegReads;$/;"	m	class:SimpleExecContext
numFpRegWrites	./cpu/simple/exec_context.hh	/^    Stats::Scalar numFpRegWrites;$/;"	m	class:SimpleExecContext
numFragments	./cpu/minor/lsq.hh	/^        unsigned int numFragments;$/;"	m	class:Minor::LSQ::SplitDataRequest
numFreeCCRegs	./cpu/o3/free_list.hh	/^    unsigned numFreeCCRegs() const { return ccList.numFreeRegs(); }$/;"	f	class:UnifiedFreeList
numFreeEntries	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::numFreeEntries()$/;"	f	class:InstructionQueue
numFreeEntries	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::numFreeEntries(ThreadID tid)$/;"	f	class:InstructionQueue
numFreeEntries	./cpu/o3/rename_map.hh	/^    unsigned numFreeEntries() const { return freeList->numFreeRegs(); }$/;"	f	class:SimpleRenameMap
numFreeEntries	./cpu/o3/rename_map.hh	/^    unsigned numFreeEntries() const$/;"	f	class:UnifiedRenameMap
numFreeEntries	./cpu/o3/rob_impl.hh	/^ROB<Impl>::numFreeEntries()$/;"	f	class:ROB
numFreeEntries	./cpu/o3/rob_impl.hh	/^ROB<Impl>::numFreeEntries(ThreadID tid)$/;"	f	class:ROB
numFreeFloatRegs	./cpu/o3/free_list.hh	/^    unsigned numFreeFloatRegs() const { return floatList.numFreeRegs(); }$/;"	f	class:UnifiedFreeList
numFreeIntRegs	./cpu/o3/free_list.hh	/^    unsigned numFreeIntRegs() const { return intList.numFreeRegs(); }$/;"	f	class:UnifiedFreeList
numFreeLoadEntries	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::numFreeLoadEntries()$/;"	f	class:LSQ
numFreeLoadEntries	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::numFreeLoadEntries(ThreadID tid)$/;"	f	class:LSQ
numFreeLoadEntries	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::numFreeLoadEntries()$/;"	f	class:LSQUnit
numFreeRegs	./cpu/o3/free_list.hh	/^    unsigned numFreeRegs() const { return freeRegs.size(); }$/;"	f	class:SimpleFreeList
numFreeStoreEntries	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::numFreeStoreEntries()$/;"	f	class:LSQ
numFreeStoreEntries	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::numFreeStoreEntries(ThreadID tid)$/;"	f	class:LSQ
numFreeStoreEntries	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::numFreeStoreEntries()$/;"	f	class:LSQUnit
numFuncUnits	./cpu/minor/execute.hh	/^    unsigned int numFuncUnits;$/;"	m	class:Minor::Execute
numHalt	./cpu/kvm/base.hh	/^    Stats::Scalar numHalt;$/;"	m	class:BaseKvmCPU
numHits	./mem/ruby/structures/Prefetcher.hh	/^        Stats::Scalar numHits;$/;"	m	class:Prefetcher
numHypercalls	./cpu/kvm/base.hh	/^    Stats::Scalar numHypercalls;$/;"	m	class:BaseKvmCPU
numIO	./cpu/kvm/base.hh	/^    Stats::Scalar numIO;$/;"	m	class:BaseKvmCPU
numIQEntries	./cpu/o3/O3CPU.py	/^    numIQEntries = Param.Unsigned(64, "Number of instruction queue entries")$/;"	v	class:DerivO3CPU
numIdleCycles	./cpu/simple/exec_context.hh	/^    Stats::Formula numIdleCycles;$/;"	m	class:SimpleExecContext
numInFlightFetches	./cpu/minor/fetch1.cc	/^Fetch1::numInFlightFetches()$/;"	f	class:Minor::Fetch1
numInFlightLoads	./cpu/trace/trace_cpu.hh	/^            uint16_t numInFlightLoads;$/;"	m	class:TraceCPU::ElasticDataGen::HardwareResource
numInFlightStores	./cpu/trace/trace_cpu.hh	/^            uint16_t numInFlightStores;$/;"	m	class:TraceCPU::ElasticDataGen::HardwareResource
numInTranslationFragments	./cpu/minor/lsq.hh	/^        unsigned int numInTranslationFragments;$/;"	m	class:Minor::LSQ::SplitDataRequest
numIncomplete	./mem/mem_checker.hh	/^        size_t numIncomplete;$/;"	m	class:MemChecker::WriteCluster
numInst	./cpu/checker/cpu.hh	/^    Counter numInst;$/;"	m	class:CheckerCPU
numInst	./cpu/o3/fetch.hh	/^    int numInst;$/;"	m	class:DefaultFetch
numInst	./cpu/simple/exec_context.hh	/^    Counter numInst;$/;"	m	class:SimpleExecContext
numInst	./cpu/thread_state.hh	/^    Counter numInst;$/;"	m	struct:ThreadState
numInsts	./cpu/kvm/base.hh	/^    Stats::Scalar numInsts;$/;"	m	class:BaseKvmCPU
numInsts	./cpu/minor/pipe_data.hh	/^    unsigned int numInsts;$/;"	m	class:Minor::ForwardInstData
numInsts	./cpu/minor/stats.hh	/^    Stats::Scalar numInsts;$/;"	m	class:Minor::MinorStats
numInsts	./cpu/simple/exec_context.hh	/^    Stats::Scalar numInsts;$/;"	m	class:SimpleExecContext
numInsts	./cpu/thread_state.hh	/^    Stats::Scalar numInsts;$/;"	m	struct:ThreadState
numInstsInROB	./cpu/o3/rob.hh	/^    int numInstsInROB;$/;"	m	class:ROB
numIntAluAccesses	./cpu/simple/exec_context.hh	/^    Stats::Scalar numIntAluAccesses;$/;"	m	class:SimpleExecContext
numIntDestRegs	./cpu/base_dyn_inst.hh	/^    int8_t numIntDestRegs() const { return staticInst->numIntDestRegs(); }$/;"	f	class:BaseDynInst
numIntDestRegs	./cpu/static_inst.hh	/^    int8_t numIntDestRegs() const { return _numIntDestRegs; }$/;"	f	class:StaticInst
numIntInsts	./cpu/simple/exec_context.hh	/^    Stats::Scalar numIntInsts;$/;"	m	class:SimpleExecContext
numIntPhysRegs	./cpu/o3/regfile.hh	/^    unsigned numIntPhysRegs() const { return baseFloatRegIndex; }$/;"	f	class:PhysRegFile
numIntRegReads	./cpu/simple/exec_context.hh	/^    Stats::Scalar numIntRegReads;$/;"	m	class:SimpleExecContext
numIntRegWrites	./cpu/simple/exec_context.hh	/^    Stats::Scalar numIntRegWrites;$/;"	m	class:SimpleExecContext
numInterrupts	./cpu/kvm/base.hh	/^    Stats::Scalar numInterrupts;$/;"	m	class:BaseKvmCPU
numIssueOrderDepLoads	./cpu/o3/probe/elastic_trace.hh	/^    Stats::Scalar numIssueOrderDepLoads;$/;"	m	class:ElasticTrace
numIssueOrderDepOther	./cpu/o3/probe/elastic_trace.hh	/^    Stats::Scalar numIssueOrderDepOther;$/;"	m	class:ElasticTrace
numIssueOrderDepStores	./cpu/o3/probe/elastic_trace.hh	/^    Stats::Scalar numIssueOrderDepStores;$/;"	m	class:ElasticTrace
numIssuedDist	./cpu/o3/inst_queue.hh	/^    Stats::Distribution numIssuedDist;$/;"	m	class:InstructionQueue
numIssuedFragments	./cpu/minor/lsq.hh	/^        unsigned int numIssuedFragments;$/;"	m	class:Minor::LSQ::SplitDataRequest
numItems	./arch/x86/insts/micromediaop.hh	/^        numItems(int size) const$/;"	f	class:X86ISA::MediaOpBase
numLeft	./base/barrier.hh	/^    unsigned numLeft;$/;"	m	class:Barrier
numLevels	./mem/multi_level_page_table.hh	/^    const uint64_t numLevels;$/;"	m	class:MultiLevelPageTable
numLines	./dev/arm/hdlcd.hh	/^        const unsigned numLines;$/;"	m	class:HDLcd::DmaEngine
numLoad	./cpu/checker/cpu.hh	/^    Counter numLoad;$/;"	m	class:CheckerCPU
numLoad	./cpu/simple/exec_context.hh	/^    Counter numLoad;$/;"	m	class:SimpleExecContext
numLoad	./cpu/thread_state.hh	/^    Counter numLoad;$/;"	m	struct:ThreadState
numLoadInsts	./cpu/simple/exec_context.hh	/^    Stats::Scalar numLoadInsts;$/;"	m	class:SimpleExecContext
numLoads	./cpu/o3/lsq.hh	/^    int numLoads(ThreadID tid)$/;"	f	class:LSQ
numLoads	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::numLoads()$/;"	f	class:LSQ
numLoads	./cpu/o3/lsq_unit.hh	/^    int numLoads() { return loads; }$/;"	f	class:LSQUnit
numMMIO	./cpu/kvm/base.hh	/^    Stats::Scalar numMMIO;$/;"	m	class:BaseKvmCPU
numMainEventQueues	./sim/eventq.cc	/^uint32_t numMainEventQueues = 0;$/;"	v
numMemRefs	./cpu/simple/exec_context.hh	/^    Stats::Scalar numMemRefs;$/;"	m	class:SimpleExecContext
numMemRefs	./cpu/thread_state.hh	/^    Stats::Scalar numMemRefs;$/;"	m	struct:ThreadState
numMemories	./cpu/testers/networktest/networktest.hh	/^    int numMemories;$/;"	m	class:NetworkTest
numMicroops	./arch/arm/insts/mem.hh	/^    static const unsigned numMicroops = 2;$/;"	m	class:ArmISA::SrsOp
numMicroops	./arch/arm/insts/mem.hh	/^    static const unsigned numMicroops = 3;$/;"	m	class:ArmISA::Memory
numMicroops	./arch/arm/insts/mem.hh	/^    static const unsigned numMicroops = 3;$/;"	m	class:ArmISA::RfeOp
numMicroops	./arch/arm/insts/mem64.hh	/^    static const unsigned numMicroops = 3;$/;"	m	class:ArmISA::Memory64
numMicroops	./arch/arm/insts/pred_inst.hh	/^    uint32_t numMicroops;$/;"	m	class:ArmISA::PredMacroOp
numMicroops	./arch/x86/insts/macroop.hh	/^    const uint32_t numMicroops;$/;"	m	class:X86ISA::MacroopBase
numMicroops	./arch/x86/microcode_rom.hh	/^        static const MicroPC numMicroops;$/;"	m	class:X86ISAInst::MicrocodeRom
numMissObserved	./mem/ruby/structures/Prefetcher.hh	/^        Stats::Scalar numMissObserved;$/;"	m	class:Prefetcher
numMissedPrefetchedBlocks	./mem/ruby/structures/Prefetcher.hh	/^        Stats::Scalar numMissedPrefetchedBlocks;$/;"	m	class:Prefetcher
numNodes	./dev/net/dist_iface.hh	/^        unsigned numNodes;$/;"	m	class:DistIface::SyncSwitch
numOp	./cpu/simple/exec_context.hh	/^    Counter numOp;$/;"	m	class:SimpleExecContext
numOp	./cpu/thread_state.hh	/^    Counter numOp;$/;"	m	struct:ThreadState
numOps	./cpu/minor/stats.hh	/^    Stats::Scalar numOps;$/;"	m	class:Minor::MinorStats
numOps	./cpu/simple/exec_context.hh	/^    Stats::Scalar numOps;$/;"	m	class:SimpleExecContext
numOps	./cpu/thread_state.hh	/^    Stats::Scalar numOps;$/;"	m	struct:ThreadState
numOps	./cpu/trace/trace_cpu.hh	/^    Stats::Scalar numOps;$/;"	m	class:TraceCPU
numOrderDepStores	./cpu/o3/probe/elastic_trace.hh	/^    Stats::Scalar numOrderDepStores;$/;"	m	class:ElasticTrace
numOther	./mem/abstract_mem.hh	/^    Stats::Vector numOther;$/;"	m	class:AbstractMemory
numPackets	./cpu/testers/traffic_gen/traffic_gen.hh	/^    Stats::Scalar numPackets;$/;"	m	class:TrafficGen
numPacketsSent	./cpu/testers/networktest/networktest.hh	/^    int numPacketsSent;$/;"	m	class:NetworkTest
numPagesCrossed	./mem/ruby/structures/Prefetcher.hh	/^        Stats::Scalar numPagesCrossed;$/;"	m	class:Prefetcher
numPartialHits	./mem/ruby/structures/Prefetcher.hh	/^        Stats::Scalar numPartialHits;$/;"	m	class:Prefetcher
numPerfLevels	./sim/clock_domain.hh	/^    PerfLevel numPerfLevels() const {return freqOpPoints.size();}$/;"	f	class:SrcClockDomain
numPerfLevels	./sim/dvfs_handler.hh	/^    PerfLevel numPerfLevels(PerfLevel domain_id) const$/;"	f	class:DVFSHandler
numPhysCCRegs	./cpu/o3/O3CPU.py	/^    numPhysCCRegs = Param.Unsigned(_defaultNumPhysCCRegs,$/;"	v	class:DerivO3CPU
numPhysFloatRegs	./cpu/o3/O3CPU.py	/^    numPhysFloatRegs = Param.Unsigned(256, "Number of physical floating point "$/;"	v	class:DerivO3CPU
numPhysIntRegs	./cpu/o3/O3CPU.py	/^    numPhysIntRegs = Param.Unsigned(256, "Number of physical integer registers")$/;"	v	class:DerivO3CPU
numPhysRegs	./cpu/o3/inst_queue.hh	/^    unsigned numPhysRegs;$/;"	m	class:InstructionQueue
numPhysRegs	./cpu/o3/scoreboard.hh	/^    unsigned numPhysRegs;$/;"	m	class:Scoreboard
numPlanes	./dev/arm/flash_device.hh	/^    const uint32_t numPlanes;$/;"	m	class:FlashDevice
numPredictedBranches	./cpu/simple/exec_context.hh	/^    Stats::Scalar numPredictedBranches;$/;"	m	class:SimpleExecContext
numPrefetchAccepted	./mem/ruby/structures/Prefetcher.hh	/^        Stats::Scalar numPrefetchAccepted;$/;"	m	class:Prefetcher
numPrefetchRequested	./mem/ruby/structures/Prefetcher.hh	/^        Stats::Scalar numPrefetchRequested;$/;"	m	class:Prefetcher
numQ	./base/cp_annotate.hh	/^    std::vector<int> numSt, numQ;$/;"	m	class:CPA
numQs	./base/cp_annotate.hh	/^    int numQs;$/;"	m	class:CPA
numROBEntries	./cpu/o3/O3CPU.py	/^    numROBEntries = Param.Unsigned(192, "Number of reorder buffer entries")$/;"	v	class:DerivO3CPU
numROBFreeEntries	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::numROBFreeEntries(ThreadID tid)$/;"	f	class:DefaultCommit
numRdRetry	./mem/dram_ctrl.hh	/^    Stats::Scalar numRdRetry;$/;"	m	class:DRAMCtrl
numReads	./cpu/testers/memtest/memtest.hh	/^    uint64_t numReads;$/;"	m	class:MemTest
numReads	./mem/abstract_mem.hh	/^    Stats::Vector numReads;$/;"	m	class:AbstractMemory
numReadsStat	./cpu/testers/memtest/memtest.hh	/^    Stats::Scalar numReadsStat;$/;"	m	class:MemTest
numRegDep	./cpu/o3/probe/elastic_trace.hh	/^    Stats::Scalar numRegDep;$/;"	m	class:ElasticTrace
numRegDep	./cpu/trace/trace_cpu.hh	/^            uint8_t numRegDep;$/;"	m	class:TraceCPU::ElasticDataGen::GraphNode
numRegs	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, numRegs, step;$/;"	m	class:ArmISA::MicroNeonMixOp64
numRegs	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, numRegs;$/;"	m	class:ArmISA::VldMultOp64
numRegs	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, numRegs;$/;"	m	class:ArmISA::VstMultOp64
numRegs	./cpu/minor/scoreboard.hh	/^    const unsigned numRegs;$/;"	m	class:Minor::Scoreboard
numRegs	./dev/x86/cmos.hh	/^    static const int numRegs = 128;$/;"	m	class:X86ISA::Cmos
numReserve	./mem/cache/mshr_queue.hh	/^    const int numReserve;$/;"	m	class:MSHRQueue
numReservedSlots	./cpu/minor/buffers.hh	/^    unsigned int numReservedSlots;$/;"	m	class:Minor::Queue
numResults	./cpu/minor/scoreboard.hh	/^    std::vector<Index> numResults;$/;"	m	class:Minor::Scoreboard
numRetiredFragments	./cpu/minor/lsq.hh	/^        unsigned int numRetiredFragments;$/;"	m	class:Minor::LSQ::SplitDataRequest
numRetries	./cpu/testers/traffic_gen/traffic_gen.hh	/^    Stats::Scalar numRetries;$/;"	m	class:TrafficGen
numRetrySucceeded	./cpu/trace/trace_cpu.hh	/^        Stats::Scalar numRetrySucceeded;$/;"	m	class:TraceCPU::ElasticDataGen
numRetrySucceeded	./cpu/trace/trace_cpu.hh	/^        Stats::Scalar numRetrySucceeded;$/;"	m	class:TraceCPU::FixedRetryGen
numRobDep	./cpu/trace/trace_cpu.hh	/^            uint8_t numRobDep;$/;"	m	class:TraceCPU::ElasticDataGen::GraphNode
numRobs	./cpu/o3/O3CPU.py	/^    numRobs = Param.Unsigned(1, "Number of Reorder Buffers");$/;"	v	class:DerivO3CPU
numRobs	./cpu/o3/commit.hh	/^    unsigned numRobs;$/;"	m	class:DefaultCommit
numRunningContexts	./sim/system.cc	/^System::numRunningContexts()$/;"	f	class:System
numSOLoads	./cpu/trace/trace_cpu.hh	/^        Stats::Scalar numSOLoads;$/;"	m	class:TraceCPU::ElasticDataGen
numSOStores	./cpu/trace/trace_cpu.hh	/^        Stats::Scalar numSOStores;$/;"	m	class:TraceCPU::ElasticDataGen
numSchedDcacheEvent	./cpu/trace/trace_cpu.hh	/^    Stats::Scalar numSchedDcacheEvent;$/;"	m	class:TraceCPU
numSchedIcacheEvent	./cpu/trace/trace_cpu.hh	/^    Stats::Scalar numSchedIcacheEvent;$/;"	m	class:TraceCPU
numSendAttempted	./cpu/trace/trace_cpu.hh	/^        Stats::Scalar numSendAttempted;$/;"	m	class:TraceCPU::ElasticDataGen
numSendAttempted	./cpu/trace/trace_cpu.hh	/^        Stats::Scalar numSendAttempted;$/;"	m	class:TraceCPU::FixedRetryGen
numSendFailed	./cpu/trace/trace_cpu.hh	/^        Stats::Scalar numSendFailed;$/;"	m	class:TraceCPU::ElasticDataGen
numSendFailed	./cpu/trace/trace_cpu.hh	/^        Stats::Scalar numSendFailed;$/;"	m	class:TraceCPU::FixedRetryGen
numSendSucceeded	./cpu/trace/trace_cpu.hh	/^        Stats::Scalar numSendSucceeded;$/;"	m	class:TraceCPU::ElasticDataGen
numSendSucceeded	./cpu/trace/trace_cpu.hh	/^        Stats::Scalar numSendSucceeded;$/;"	m	class:TraceCPU::FixedRetryGen
numSeqPkts	./cpu/testers/traffic_gen/generators.hh	/^    const unsigned int numSeqPkts;$/;"	m	class:DramGen
numSets	./mem/cache/tags/base_set_assoc.hh	/^    const unsigned numSets;$/;"	m	class:BaseSetAssoc
numSimulatedCPUs	./cpu/base.hh	/^    static int numSimulatedCPUs() { return cpuList.size(); }$/;"	f	class:BaseCPU
numSimulatedInsts	./arch/null/cpu_dummy.hh	/^    static int numSimulatedInsts() { return 0; }$/;"	f	class:BaseCPU
numSimulatedInsts	./cpu/base.hh	/^    static Counter numSimulatedInsts()$/;"	f	class:BaseCPU
numSimulatedOps	./arch/null/cpu_dummy.hh	/^    static int numSimulatedOps() { return 0; }$/;"	f	class:BaseCPU
numSimulatedOps	./cpu/base.hh	/^    static Counter numSimulatedOps()$/;"	f	class:BaseCPU
numSlots	./cpu/minor/lsq.hh	/^        const unsigned int numSlots;$/;"	m	class:Minor::LSQ::StoreBuffer
numSm	./base/cp_annotate.hh	/^    int numSm;$/;"	m	class:CPA
numSmt	./base/cp_annotate.hh	/^    int numSmt;$/;"	m	class:CPA
numSpillInsts	./arch/sparc/handlers.hh	/^const int numSpillInsts = 32;$/;"	m	namespace:SparcISA
numSplitReqs	./cpu/trace/trace_cpu.hh	/^        Stats::Scalar numSplitReqs;$/;"	m	class:TraceCPU::ElasticDataGen
numSquashable	./arch/arm/table_walker.hh	/^    unsigned numSquashable;$/;"	m	class:ArmISA::TableWalker
numSquashable	./arch/x86/pagetable_walker.hh	/^        unsigned numSquashable;$/;"	m	class:X86ISA::Walker
numSrcRegs	./cpu/base_dyn_inst.hh	/^    int8_t numSrcRegs() const { return staticInst->numSrcRegs(); }$/;"	f	class:BaseDynInst
numSrcRegs	./cpu/static_inst.hh	/^    int8_t numSrcRegs()  const { return _numSrcRegs; }$/;"	f	class:StaticInst
numSt	./base/cp_annotate.hh	/^    std::vector<int> numSt, numQ;$/;"	m	class:CPA
numStages	./cpu/activity.hh	/^    int numStages;$/;"	m	class:ActivityRecorder
numStoreInsts	./cpu/simple/exec_context.hh	/^    Stats::Scalar numStoreInsts;$/;"	m	class:SimpleExecContext
numStores	./cpu/o3/lsq.hh	/^    int numStores(ThreadID tid)$/;"	f	class:LSQ
numStores	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::numStores()$/;"	f	class:LSQ
numStores	./cpu/o3/lsq_unit.hh	/^    int numStores() { return stores; }$/;"	f	class:LSQUnit
numStoresInTransfers	./cpu/minor/lsq.hh	/^    unsigned int numStoresInTransfers;$/;"	m	class:Minor::LSQ
numStoresToWB	./cpu/o3/lsq.hh	/^    int numStoresToWB(ThreadID tid)$/;"	f	class:LSQ
numStoresToWB	./cpu/o3/lsq_unit.hh	/^    int numStoresToWB() { return storesToWB; }$/;"	f	class:LSQUnit
numStructElems	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, index;$/;"	m	class:ArmISA::VldSingleOp64
numStructElems	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, index;$/;"	m	class:ArmISA::VstSingleOp64
numStructElems	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, lane, step;$/;"	m	class:ArmISA::MicroNeonMixLaneOp64
numStructElems	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, numRegs, step;$/;"	m	class:ArmISA::MicroNeonMixOp64
numStructElems	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, numRegs;$/;"	m	class:ArmISA::VldMultOp64
numStructElems	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, numRegs;$/;"	m	class:ArmISA::VstMultOp64
numSwitches	./mem/ruby/network/Topology.hh	/^    uint32_t numSwitches() const { return m_number_of_switches; }$/;"	f	class:Topology
numSys	./base/cp_annotate.hh	/^    int numSys;$/;"	m	class:CPA
numSyscallDescs	./arch/x86/process.hh	/^        const int numSyscallDescs;$/;"	m	class:X86ISA::X86LiveProcess
numSystemsRunning	./sim/system.cc	/^int System::numSystemsRunning = 0;$/;"	m	class:System	file:
numSystemsRunning	./sim/system.hh	/^    static int numSystemsRunning;$/;"	m	class:System
numTagArrayReads	./mem/ruby/structures/CacheMemory.hh	/^    Stats::Scalar numTagArrayReads;$/;"	m	class:CacheMemory
numTagArrayStalls	./mem/ruby/structures/CacheMemory.hh	/^    Stats::Scalar numTagArrayStalls;$/;"	m	class:CacheMemory
numTagArrayWrites	./mem/ruby/structures/CacheMemory.hh	/^    Stats::Scalar numTagArrayWrites;$/;"	m	class:CacheMemory
numTarget	./mem/cache/base.hh	/^    const int numTarget;$/;"	m	class:BaseCache
numThreads	./arch/mips/isa.hh	/^        uint8_t numThreads;$/;"	m	class:MipsISA::ISA
numThreads	./cpu/BaseCPU.py	/^    numThreads = Param.Unsigned(1, "number of HW thread contexts")$/;"	v
numThreads	./cpu/base.hh	/^    ThreadID numThreads;$/;"	m	class:BaseCPU
numThreads	./cpu/o3/commit.hh	/^    const ThreadID numThreads;$/;"	m	class:DefaultCommit
numThreads	./cpu/o3/decode.hh	/^    ThreadID numThreads;$/;"	m	class:DefaultDecode
numThreads	./cpu/o3/fetch.hh	/^    ThreadID numThreads;$/;"	m	class:DefaultFetch
numThreads	./cpu/o3/iew.hh	/^    ThreadID numThreads;$/;"	m	class:DefaultIEW
numThreads	./cpu/o3/inst_queue.hh	/^    ThreadID numThreads;$/;"	m	class:InstructionQueue
numThreads	./cpu/o3/lsq.hh	/^    ThreadID numThreads;$/;"	m	class:LSQ
numThreads	./cpu/o3/rename.hh	/^    ThreadID numThreads;$/;"	m	class:DefaultRename
numThreads	./cpu/o3/rob.hh	/^    ThreadID numThreads;$/;"	m	class:ROB
numThreads	./cpu/pred/BranchPredictor.py	/^    numThreads = Param.Unsigned(1, "Number of threads")$/;"	v	class:BranchPredictor
numThreads	./cpu/pred/bpred_unit.hh	/^    const unsigned numThreads;$/;"	m	class:BPredUnit
numTotalRegs	./cpu/o3/scoreboard.hh	/^    unsigned M5_CLASS_VAR_USED numTotalRegs;$/;"	m	class:Scoreboard
numTraceCPUs	./cpu/trace/trace_cpu.cc	/^int TraceCPU::numTraceCPUs = 0;$/;"	m	class:TraceCPU	file:
numTraceCPUs	./cpu/trace/trace_cpu.hh	/^    static int numTraceCPUs;$/;"	m	class:TraceCPU
numTranslatedFragments	./cpu/minor/lsq.hh	/^        unsigned int numTranslatedFragments;$/;"	m	class:Minor::LSQ::SplitDataRequest
numUnissuedAccesses	./cpu/minor/lsq.hh	/^        unsigned int numUnissuedAccesses;$/;"	m	class:Minor::LSQ::StoreBuffer
numUnissuedStores	./cpu/minor/lsq.hh	/^        unsigned int numUnissuedStores() { return numUnissuedAccesses; }$/;"	f	class:Minor::LSQ::StoreBuffer
numUnpredictableResults	./cpu/minor/scoreboard.hh	/^    std::vector<Index> numUnpredictableResults;$/;"	m	class:Minor::Scoreboard
numVMExits	./cpu/kvm/base.hh	/^    Stats::Scalar numVMExits;$/;"	m	class:BaseKvmCPU
numVMHalfEntries	./cpu/kvm/base.hh	/^    Stats::Scalar numVMHalfEntries;$/;"	m	class:BaseKvmCPU
numVnicDistance	./dev/net/sinic.hh	/^    Stats::Scalar numVnicDistance;$/;"	m	class:Sinic::Device
numVoltages	./sim/voltage_domain.hh	/^    uint32_t numVoltages() const { return (uint32_t)voltageOpPoints.size(); }$/;"	f	class:VoltageDomain
numVpes	./arch/mips/isa.hh	/^        uint8_t numVpes;$/;"	m	class:MipsISA::ISA
numWaiting	./base/barrier.hh	/^    unsigned numWaiting;$/;"	m	class:Barrier
numWorkIds	./sim/system.hh	/^    uint32_t numWorkIds;$/;"	m	class:System
numWorkItemsCompleted	./cpu/base.hh	/^    Stats::Scalar numWorkItemsCompleted;$/;"	m	class:BaseCPU
numWorkItemsStarted	./cpu/base.hh	/^    Stats::Scalar numWorkItemsStarted;$/;"	m	class:BaseCPU
numWrRetry	./mem/dram_ctrl.hh	/^    Stats::Scalar numWrRetry;$/;"	m	class:DRAMCtrl
numWrites	./cpu/testers/memtest/memtest.hh	/^    uint64_t numWrites;$/;"	m	class:MemTest
numWrites	./mem/abstract_mem.hh	/^    Stats::Vector numWrites;$/;"	m	class:AbstractMemory
numWritesStat	./cpu/testers/memtest/memtest.hh	/^    Stats::Scalar numWritesStat;$/;"	m	class:MemTest
num_cpus	./cpu/testers/directedtest/RubyDirectedTester.py	/^    num_cpus = Param.Int("num of cpus")$/;"	v	class:DirectedGenerator
num_cpus	./cpu/testers/rubytest/RubyTester.py	/^    num_cpus = Param.Int("number of cpus \/ RubyPorts")$/;"	v	class:RubyTester
num_encodings	./base/vnc/vncinput.hh	/^        uint16_t num_encodings;$/;"	m	struct:VncInput::PixelEncodingsMessage
num_fds	./base/pollevent.hh	/^    int num_fds;$/;"	m	class:PollQueue
num_lanes	./mem/SerialLink.py	/^    num_lanes = Param.Unsigned(1, "Number of parallel lanes inside the serial"$/;"	v	class:SerialLink
num_lanes	./mem/serial_link.hh	/^    unsigned num_lanes;$/;"	m	class:SerialLink
num_memories	./cpu/testers/networktest/NetworkTest.py	/^    num_memories = Param.Int(1, "Num Memories")$/;"	v	class:NetworkTest
num_nodes	./dev/net/Ethernet.py	/^    num_nodes = Param.UInt32('2', "Number of simulate nodes")$/;"	v	class:DistEtherLink
num_of_sequencers	./mem/ruby/system/RubySystem.py	/^    num_of_sequencers = Param.Int("")$/;"	v	class:RubySystem
num_planes	./dev/arm/FlashDevice.py	/^    num_planes = Param.UInt32(1, "Number of planes per die")$/;"	v	class:FlashDevice
num_processes	./sim/process.cc	/^int num_processes = 0;$/;"	v
num_recs	./base/cp_annotate.hh	/^        uint64_t num_recs;$/;"	m	struct:CPA::AnnotateHeader
num_rects	./base/vnc/vncserver.hh	/^        uint16_t num_rects;$/;"	m	struct:VncServer::FrameBufferUpdate
num_series	./cpu/testers/directedtest/RubyDirectedTester.py	/^    num_series = Param.UInt32(1,$/;"	v	class:SeriesRequestGenerator
num_squash_per_cycle	./arch/arm/ArmTLB.py	/^    num_squash_per_cycle = Param.Unsigned(2,$/;"	v	class:ArmTableWalker
num_squash_per_cycle	./arch/x86/X86TLB.py	/^    num_squash_per_cycle = Param.Unsigned(4,$/;"	v	class:X86PagetableWalker
num_startup_pfs	./mem/ruby/structures/RubyPrefetcher.py	/^    num_startup_pfs = Param.UInt32(1, "")$/;"	v	class:Prefetcher
num_streams	./mem/ruby/structures/RubyPrefetcher.py	/^    num_streams = Param.UInt32(4,$/;"	v	class:Prefetcher
num_syscalls	./sim/process.hh	/^    Stats::Scalar num_syscalls;       \/\/ number of syscalls executed$/;"	m	class:Process
num_threads	./arch/mips/MipsISA.py	/^    num_threads = Param.UInt8(1, "Maximum number this ISA can handle")$/;"	v	class:MipsISA
num_vpes	./arch/mips/MipsISA.py	/^    num_vpes = Param.UInt8(1, "Maximum number of vpes this ISA can handle")$/;"	v	class:MipsISA
num_work_ids	./sim/System.py	/^    num_work_ids = Param.Int(16, "Number of distinct work item types")$/;"	v
numa_high_bit	./mem/ruby/structures/DirectoryMemory.py	/^    numa_high_bit = Param.Int("numa high bit")$/;"	v	class:RubyDirectoryMemory
numa_syscalls	./kern/tru64/tru64_syscalls.hh	/^        numa_syscalls = 119,$/;"	e	enum:SystemCalls::__anon102
number	./base/remote_gdb.hh	/^    int number;$/;"	m	class:BaseRemoteGDB
number	./base/vnc/Vnc.py	/^    number = Param.Int(0, "vnc client number")$/;"	v	class:VncServer
number	./base/vnc/vncserver.hh	/^    int number;$/;"	m	class:VncServer
number	./cpu/func_unit.hh	/^    unsigned         number;$/;"	m	class:FUDesc
number	./dev/Terminal.py	/^    number = Param.Int(0, "terminal number")$/;"	v	class:Terminal
number	./dev/net/etherlink.hh	/^        const int number;$/;"	m	class:EtherLink::Link
number	./dev/net/pktfifo.hh	/^    uint64_t number;$/;"	m	struct:PacketFifoEntry
number	./dev/terminal.hh	/^    int number;$/;"	m	class:Terminal
number	./dev/x86/X86IntPin.py	/^    number = Param.Int("The pin number on the device")$/;"	v	class:X86IntSinkPin
number	./dev/x86/intdev.hh	/^    int number;$/;"	m	class:X86ISA::IntSinkPin
number	./sim/arguments.hh	/^    int number;$/;"	m	class:Arguments
number_of_TBEs	./mem/ruby/slicc_interface/Controller.py	/^    number_of_TBEs = Param.Int(256, "")$/;"	v	class:RubyController
number_of_fault_types	./mem/ruby/network/fault_model/FaultModel.hh	/^        number_of_fault_types$/;"	e	enum:FaultModel::fault_type
number_of_ones	./arch/arm/insts/macromem.hh	/^number_of_ones(int32_t val)$/;"	f	namespace:ArmISA
number_of_pipe_stages	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.py	/^    number_of_pipe_stages = Param.UInt32(4, "router pipeline stages");$/;"	v	class:GarnetNetwork
number_of_virtual_networks	./mem/ruby/network/Network.py	/^    number_of_virtual_networks = Param.Unsigned("Number of virtual networks "$/;"	v	class:RubyNetwork
number_of_virtual_networks	./mem/ruby/system/RubySystem.py	/^    number_of_virtual_networks = Param.Unsigned("")$/;"	v	class:RubySystem
nupc	./arch/generic/types.hh	/^    MicroPC nupc() const { return _nupc; }$/;"	f	class:GenericISA::DelaySlotUPCState
nupc	./arch/generic/types.hh	/^    MicroPC nupc() const { return _nupc; }$/;"	f	class:GenericISA::UPCState
nupc	./arch/generic/types.hh	/^    void nupc(MicroPC val) { _nupc = val; }$/;"	f	class:GenericISA::DelaySlotUPCState
nupc	./arch/generic/types.hh	/^    void nupc(MicroPC val) { _nupc = val; }$/;"	f	class:GenericISA::UPCState
nvram	./arch/sparc/SparcSystem.py	/^    nvram = Param.SimpleMemory($/;"	v	class:SparcSystem
nvram	./arch/sparc/system.hh	/^    ObjectFile *nvram;$/;"	m	class:SparcSystem
nvramSymtab	./arch/sparc/system.hh	/^    SymbolTable *nvramSymtab;$/;"	m	class:SparcSystem
nvram_addr	./arch/sparc/SparcSystem.py	/^    nvram_addr = Param.Addr(_nvram_base, "Address to put the nvram")$/;"	v	class:SparcSystem
nvram_bin	./arch/sparc/SparcSystem.py	/^    nvram_bin = Param.String("file that contains the contents of nvram")$/;"	v	class:SparcSystem
nw	./arch/x86/regs/misc.hh	/^        Bitfield<29> nw; \/\/ Not Writethrough$/;"	m	namespace:X86ISA
nx	./arch/x86/pagetable.hh	/^        Bitfield<63> nx;$/;"	m	namespace:X86ISA
nxe	./arch/x86/regs/misc.hh	/^        Bitfield<11> nxe; \/\/ No-execute enable$/;"	m	namespace:X86ISA
nxm_active	./kern/tru64/tru64.hh	/^        int64_t            nxm_active;     \/\/!< scheduler active$/;"	m	struct:Tru64::ushared_state
nxm_bits	./kern/tru64/tru64.hh	/^        unsigned int    nxm_bits;               \/\/!< scheduler state \/ slot$/;"	m	struct:Tru64::nxm_sched_state
nxm_block	./kern/tru64/tru64_syscalls.hh	/^        nxm_block = 24,$/;"	e	enum:SystemCalls::__anon103
nxm_blockFunc	./kern/tru64/tru64.hh	/^    nxm_blockFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	class:Tru64
nxm_bound_pcs_count	./kern/tru64/tru64.hh	/^        uint64_t   nxm_bound_pcs_count;    \/\/!< bound PCS thread count$/;"	m	struct:Tru64::nxm_sched_state
nxm_callback	./kern/tru64/tru64.hh	/^        int64_t nxm_callback;              \/\/!< address of upcall routine$/;"	m	struct:Tru64::nxm_shared
nxm_callback	./kern/tru64/tru64.hh	/^        int64_t nxm_callback;   \/\/!< nxm_callback$/;"	m	struct:Tru64::nxm_task_attr
nxm_config_info	./kern/tru64/tru64.hh	/^    struct nxm_config_info {$/;"	s	class:Tru64
nxm_end	./sim/process.hh	/^    Addr nxm_end;$/;"	m	class:Process
nxm_get_binding	./kern/tru64/tru64_syscalls.hh	/^        nxm_get_binding = 42,$/;"	e	enum:SystemCalls::__anon103
nxm_get_state	./kern/tru64/tru64_syscalls.hh	/^        nxm_get_state = 48,$/;"	e	enum:SystemCalls::__anon103
nxm_idle	./kern/tru64/tru64_syscalls.hh	/^        nxm_idle = 35,$/;"	e	enum:SystemCalls::__anon103
nxm_idleFunc	./kern/tru64/tru64.hh	/^    nxm_idleFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	class:Tru64
nxm_nrads	./kern/tru64/tru64.hh	/^        int nxm_nrads;                  \/\/!< max number of RADs$/;"	m	struct:Tru64::nxm_config_info
nxm_nslots_per_rad	./kern/tru64/tru64.hh	/^        int nxm_nslots_per_rad;         \/\/!< max number of VP slots per RAD$/;"	m	struct:Tru64::nxm_config_info
nxm_pshared_block	./kern/tru64/tru64_syscalls.hh	/^        nxm_pshared_block = 64,$/;"	e	enum:SystemCalls::__anon103
nxm_pshared_destroy	./kern/tru64/tru64_syscalls.hh	/^        nxm_pshared_destroy = 66,$/;"	e	enum:SystemCalls::__anon103
nxm_pshared_init	./kern/tru64/tru64_syscalls.hh	/^        nxm_pshared_init = 63,$/;"	e	enum:SystemCalls::__anon103
nxm_pshared_unblock	./kern/tru64/tru64_syscalls.hh	/^        nxm_pshared_unblock = 65,$/;"	e	enum:SystemCalls::__anon103
nxm_pthid	./kern/tru64/tru64.hh	/^        Addr nxm_pthid; \/\/!< id of null thread$/;"	m	struct:Tru64::nxm_sched_state
nxm_quantum	./kern/tru64/tru64.hh	/^        int             nxm_quantum;            \/\/!< quantum count-down value$/;"	m	struct:Tru64::nxm_sched_state
nxm_quantum	./kern/tru64/tru64.hh	/^        int nxm_quantum;        \/\/!< nxm_quantum$/;"	m	struct:Tru64::nxm_task_attr
nxm_rad	./kern/tru64/tru64.hh	/^        Addr nxm_rad[1];  \/\/!< per-RAD shared areas$/;"	m	struct:Tru64::nxm_config_info
nxm_resched	./kern/tru64/tru64_syscalls.hh	/^        nxm_resched = 44,$/;"	e	enum:SystemCalls::__anon103
nxm_sched_state	./kern/tru64/tru64.hh	/^    struct nxm_sched_state {$/;"	s	class:Tru64
nxm_set_binding	./kern/tru64/tru64_syscalls.hh	/^        nxm_set_binding = 46,$/;"	e	enum:SystemCalls::__anon103
nxm_set_cancel	./kern/tru64/tru64_syscalls.hh	/^        nxm_set_cancel = 45,$/;"	e	enum:SystemCalls::__anon103
nxm_set_pthid	./kern/tru64/tru64_syscalls.hh	/^        nxm_set_pthid = 37,$/;"	e	enum:SystemCalls::__anon103
nxm_set_quantum	./kern/tru64/tru64.hh	/^        int             nxm_set_quantum;        \/\/!< quantum reset value$/;"	m	struct:Tru64::nxm_sched_state
nxm_shared	./kern/tru64/tru64.hh	/^    struct nxm_shared {$/;"	s	class:Tru64
nxm_signal_check	./kern/tru64/tru64_syscalls.hh	/^        nxm_signal_check = 51,$/;"	e	enum:SystemCalls::__anon103
nxm_slot_state	./kern/tru64/tru64.hh	/^        Addr nxm_slot_state; \/\/!< per-VP slot state$/;"	m	struct:Tru64::nxm_config_info
nxm_slot_state_t	./kern/tru64/tru64.hh	/^    enum nxm_slot_state_t {$/;"	g	class:Tru64
nxm_ss	./kern/tru64/tru64.hh	/^        struct nxm_sched_state nxm_ss[1]; \/\/!< array of shared areas$/;"	m	struct:Tru64::nxm_shared	typeref:struct:Tru64::nxm_shared::nxm_sched_state
nxm_ssig	./kern/tru64/tru64.hh	/^        int             nxm_ssig;       \/\/!< scheduler's synchronous signals$/;"	m	struct:Tru64::ushared_state
nxm_start	./sim/process.hh	/^    Addr nxm_start;$/;"	m	class:Process
nxm_swtch_pri	./kern/tru64/tru64_syscalls.hh	/^        nxm_swtch_pri = 67,$/;"	e	enum:SystemCalls::__anon103
nxm_sysevent	./kern/tru64/tru64.hh	/^        int             nxm_sysevent;           \/\/!< syscall state$/;"	m	struct:Tru64::nxm_sched_state
nxm_task_attr	./kern/tru64/tru64.hh	/^    struct nxm_task_attr {$/;"	s	class:Tru64
nxm_task_init	./kern/tru64/tru64_syscalls.hh	/^        nxm_task_init = 33,$/;"	e	enum:SystemCalls::__anon103
nxm_task_initFunc	./kern/tru64/tru64.hh	/^    nxm_task_initFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	class:Tru64
nxm_thread_attr	./kern/tru64/tru64.hh	/^    struct nxm_thread_attr {$/;"	s	class:Tru64
nxm_thread_block	./kern/tru64/tru64_syscalls.hh	/^        nxm_thread_block = 39,$/;"	e	enum:SystemCalls::__anon103
nxm_thread_blockFunc	./kern/tru64/tru64.hh	/^    nxm_thread_blockFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	class:Tru64
nxm_thread_create	./kern/tru64/tru64_syscalls.hh	/^        nxm_thread_create = 32,$/;"	e	enum:SystemCalls::__anon103
nxm_thread_createFunc	./kern/tru64/tru64.hh	/^    nxm_thread_createFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	class:Tru64
nxm_thread_destroy	./kern/tru64/tru64_syscalls.hh	/^        nxm_thread_destroy = 29,$/;"	e	enum:SystemCalls::__anon103
nxm_thread_kill	./kern/tru64/tru64_syscalls.hh	/^        nxm_thread_kill = 38,$/;"	e	enum:SystemCalls::__anon103
nxm_thread_resume	./kern/tru64/tru64_syscalls.hh	/^        nxm_thread_resume = 50,$/;"	e	enum:SystemCalls::__anon103
nxm_thread_suspend	./kern/tru64/tru64_syscalls.hh	/^        nxm_thread_suspend = 49,$/;"	e	enum:SystemCalls::__anon103
nxm_thread_type	./kern/tru64/tru64.hh	/^    enum nxm_thread_type {$/;"	g	class:Tru64
nxm_thread_wakeup	./kern/tru64/tru64_syscalls.hh	/^        nxm_thread_wakeup = 40,$/;"	e	enum:SystemCalls::__anon103
nxm_tid	./kern/tru64/tru64.hh	/^        Addr nxm_tid;               \/\/!< scheduler's thread id$/;"	m	struct:Tru64::nxm_sched_state
nxm_u	./kern/tru64/tru64.hh	/^        struct          ushared_state nxm_u;    \/\/!< state own by user thread$/;"	m	struct:Tru64::nxm_sched_state	typeref:struct:Tru64::nxm_sched_state::ushared_state
nxm_uc_ret	./kern/tru64/tru64.hh	/^        Addr        nxm_uc_ret; \/\/!< stack ptr of null thread$/;"	m	struct:Tru64::nxm_sched_state
nxm_unblock	./kern/tru64/tru64_syscalls.hh	/^        nxm_unblock = 25,$/;"	e	enum:SystemCalls::__anon103
nxm_unblockFunc	./kern/tru64/tru64.hh	/^    nxm_unblockFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	class:Tru64
nxm_uniq_offset	./kern/tru64/tru64.hh	/^        unsigned short nxm_uniq_offset; \/\/!< correction factor for TEB$/;"	m	struct:Tru64::nxm_shared
nxm_uniq_offset	./kern/tru64/tru64.hh	/^        unsigned short nxm_uniq_offset; \/\/!< nxm_uniq_offset$/;"	m	struct:Tru64::nxm_task_attr
nxm_va	./kern/tru64/tru64.hh	/^        int64_t            nxm_va;                 \/\/!< page fault address$/;"	m	struct:Tru64::nxm_sched_state
nxm_version	./kern/tru64/tru64.hh	/^        unsigned int nxm_version;       \/\/!< nxm_version$/;"	m	struct:Tru64::nxm_task_attr
nxm_version	./kern/tru64/tru64.hh	/^        unsigned int nxm_version;       \/\/!< version number$/;"	m	struct:Tru64::nxm_shared
nxm_wakeup_idle	./kern/tru64/tru64_syscalls.hh	/^        nxm_wakeup_idle = 36,$/;"	e	enum:SystemCalls::__anon103
nxt	./base/inet.hh	/^    uint8_t nxt() const { return ext_nxt; }$/;"	f	struct:Net::Ip6Opt
nxt	./base/inet.hh	/^    uint8_t nxt() const { return ip6_nxt; }$/;"	f	struct:Net::Ip6Hdr
nz	./arch/arm/miscregs.hh	/^        Bitfield<31, 30> nz;$/;"	m	namespace:ArmISA
oVAddr	./arch/arm/stage2_mmu.hh	/^        Addr      oVAddr;$/;"	m	class:ArmISA::Stage2MMU::Stage2Translation
obj	./arch/arm/pmu.hh	/^        SimObject *const obj;$/;"	m	struct:ArmISA::PMU::EventType
obj	./dev/arm/pl111.hh	/^        Pl111 &obj;$/;"	m	class:Pl111::DmaDoneEvent
objFile	./sim/process.hh	/^    ObjectFile *objFile;$/;"	m	class:LiveProcess
objName	./dev/net/dist_etherlink.hh	/^        std::string objName;$/;"	m	class:DistEtherLink::Link
objName	./dev/net/etherlink.hh	/^        const std::string objName;$/;"	m	class:EtherLink::Link
objName	./sim/eventq.hh	/^    std::string objName;$/;"	m	class:EventQueue
objNameResolver	./sim/serialize.hh	/^    SimObjectResolver &objNameResolver;$/;"	m	class:CheckpointIn
objParamIn	./sim/serialize.cc	/^objParamIn(CheckpointIn &cp, const string &name, SimObject * &param)$/;"	f
object	./base/callback.hh	/^    T *object;$/;"	m	class:MakeCallback
object	./base/statistics.hh	/^    T *object;$/;"	m	class:Stats::MethodProxy
object	./cpu/cpuevent.hh	/^    T *object;$/;"	m	class:CpuEventWrapper
object	./python/swig/pyevent.hh	/^    PyObject *object;    \/\/ PyObject wrapping this PythonEvent$/;"	m	class:PythonEvent
object	./sim/eventq.hh	/^    T *object;$/;"	m	class:EventWrapper
object	./sim/probe/probe.hh	/^    T *object;$/;"	m	class:ProbeListenerArg
object	./sim/probe/probe.hh	/^    const M5_CLASS_VAR_USED SimObject *object;$/;"	m	class:ProbeManager
object	./sim/ticked_object.hh	/^    ClockedObject &object;$/;"	m	class:Ticked
objectExists	./sim/cxx_config_ini.cc	/^CxxIniFile::objectExists(const std::string &object) const$/;"	f	class:CxxIniFile
objectParamsByName	./sim/cxx_manager.hh	/^    std::map<std::string, CxxConfigParams *> objectParamsByName;$/;"	m	class:CxxConfigManager
objectsByName	./sim/cxx_manager.hh	/^    std::map<std::string, SimObject *> objectsByName;$/;"	m	class:CxxConfigManager
objectsInOrder	./sim/cxx_manager.hh	/^    std::list<SimObject *> objectsInOrder;$/;"	m	class:CxxConfigManager
obreak	./kern/tru64/tru64_syscalls.hh	/^        obreak = 17,$/;"	e	enum:SystemCalls::__anon102
observeAccess	./mem/cache/prefetch/base.cc	/^BasePrefetcher::observeAccess(const PacketPtr &pkt) const$/;"	f	class:BasePrefetcher
observeMiss	./mem/ruby/structures/Prefetcher.cc	/^Prefetcher::observeMiss(Addr address, const RubyRequestType& type)$/;"	f	class:Prefetcher
observePfHit	./mem/ruby/structures/Prefetcher.cc	/^Prefetcher::observePfHit(Addr address)$/;"	f	class:Prefetcher
observePfMiss	./mem/ruby/structures/Prefetcher.cc	/^Prefetcher::observePfMiss(Addr address)$/;"	f	class:Prefetcher
obsolete_42_sigreturn	./kern/tru64/tru64_syscalls.hh	/^        obsolete_42_sigreturn = 139,$/;"	e	enum:SystemCalls::__anon102
obsolete_osigaction	./kern/tru64/tru64_syscalls.hh	/^        obsolete_osigaction = 46,$/;"	e	enum:SystemCalls::__anon102
obsolete_vtrcae	./kern/tru64/tru64_syscalls.hh	/^        obsolete_vtrcae = 115,$/;"	e	enum:SystemCalls::__anon102
occupancies	./mem/cache/tags/base.hh	/^    Stats::AverageVector occupancies;$/;"	m	class:BaseTags
occupanciesTaskId	./mem/cache/tags/base.hh	/^    Stats::Vector occupanciesTaskId;$/;"	m	class:BaseTags
occupancy	./cpu/minor/buffers.hh	/^    unsigned int occupancy;$/;"	m	class:Minor::SelfStallingPipeline
occupancy	./mem/xbar.hh	/^        Stats::Scalar occupancy;$/;"	m	class:BaseXBar::Layer
occupiedSpace	./cpu/minor/buffers.hh	/^    unsigned int occupiedSpace() const { return queue.size(); }$/;"	f	class:Minor::Queue
occupy	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::HardwareResource::occupy(const GraphNode* new_node)$/;"	f	class:TraceCPU::ElasticDataGen::HardwareResource
occupyLayer	./mem/xbar.cc	/^void BaseXBar::Layer<SrcType,DstType>::occupyLayer(Tick until)$/;"	f	class:BaseXBar::Layer
oct	./base/cprintf_formats.hh	/^    enum { dec, hex, oct } base;$/;"	e	enum:cp::Format::__anon117
oe	./arch/power/miscregs.hh	/^    Bitfield<7> oe;$/;"	m	namespace:PowerISA
oe	./arch/power/types.hh	/^    Bitfield<10>     oe;$/;"	m	namespace:PowerISA
oeSet	./arch/power/insts/integer.hh	/^    bool oeSet;$/;"	m	class:PowerISA::IntOp
oemID	./arch/x86/bios/acpi.hh	/^    std::string oemID;$/;"	m	class:X86ISA::ACPI::RSDP
oemID	./arch/x86/bios/acpi.hh	/^    std::string oemID;$/;"	m	class:X86ISA::ACPI::SysDescTable
oemID	./arch/x86/bios/intelmp.hh	/^    std::string oemID;$/;"	m	class:X86ISA::IntelMP::ConfigTable
oemRevision	./arch/x86/bios/acpi.hh	/^    uint32_t oemRevision;$/;"	m	class:X86ISA::ACPI::SysDescTable
oemTableAddr	./arch/x86/bios/intelmp.hh	/^    uint32_t oemTableAddr;$/;"	m	class:X86ISA::IntelMP::ConfigTable
oemTableID	./arch/x86/bios/acpi.hh	/^    std::string oemTableID;$/;"	m	class:X86ISA::ACPI::SysDescTable
oemTableSize	./arch/x86/bios/intelmp.hh	/^    uint16_t oemTableSize;$/;"	m	class:X86ISA::IntelMP::ConfigTable
oem_id	./arch/x86/bios/ACPI.py	/^    oem_id = Param.String('', 'string identifying the oem')$/;"	v	class:X86ACPIRSDP
oem_id	./arch/x86/bios/ACPI.py	/^    oem_id = Param.String('', 'string identifying the oem')$/;"	v	class:X86ACPISysDescTable
oem_id	./arch/x86/bios/IntelMP.py	/^    oem_id = Param.String("", 'system manufacturer')$/;"	v	class:X86IntelMPConfigTable
oem_revision	./arch/x86/bios/ACPI.py	/^    oem_revision = Param.UInt32(0, 'oem revision number for the table')$/;"	v	class:X86ACPISysDescTable
oem_table_addr	./arch/x86/bios/IntelMP.py	/^    oem_table_addr = Param.UInt32(0,$/;"	v	class:X86IntelMPConfigTable
oem_table_id	./arch/x86/bios/ACPI.py	/^    oem_table_id = Param.String('', 'oem table ID')$/;"	v	class:X86ACPISysDescTable
oem_table_size	./arch/x86/bios/IntelMP.py	/^    oem_table_size = Param.UInt16(0, 'size of the oem configuration table')$/;"	v	class:X86IntelMPConfigTable
oemap	./sim/process.hh	/^    std::map<std::string, int> oemap;$/;"	m	class:Process
of	./arch/x86/regs/misc.hh	/^        Bitfield<11> of; \/\/ Overflow Flag$/;"	m	namespace:X86ISA
of	./arch/x86/regs/misc.hh	/^        Bitfield<11> of;$/;"	m	namespace:X86ISA
ofc	./arch/arm/miscregs.hh	/^        Bitfield<2> ofc;$/;"	m	namespace:ArmISA
ofe	./arch/arm/miscregs.hh	/^        Bitfield<10> ofe;$/;"	m	namespace:ArmISA
off	./base/inet.hh	/^    int off() const { return (sizeof(eth_hdr) + ((eth_hdr_vlan) ? 4 : 0)); }$/;"	f	class:Net::IpPtr
off	./base/inet.hh	/^    int off() const { return 0; }$/;"	f	class:Net::EthPtr
off	./base/inet.hh	/^    int off() const { return _off; }$/;"	f	class:Net::TcpPtr
off	./base/inet.hh	/^    int off() const { return _off; }$/;"	f	class:Net::UdpPtr
off	./base/inet.hh	/^    int off() const { return sizeof(eth_hdr) + ((eth_hdr_vlan) ? 4 : 0); }$/;"	f	class:Net::Ip6Ptr
off	./base/inet.hh	/^    uint8_t  off() const { return th_off*4; }$/;"	f	struct:Net::TcpHdr
offChipIOClkDomain	./dev/arm/RealView.py	/^    def offChipIOClkDomain(self, clkdomain):$/;"	m	class:RealView
offChipIOClkDomain	./dev/arm/RealView.py	/^    def offChipIOClkDomain(self, clkdomain):$/;"	m	class:RealViewEB
offChipIOClkDomain	./dev/arm/RealView.py	/^    def offChipIOClkDomain(self, clkdomain):$/;"	m	class:RealViewPBX
offChipIOClkDomain	./dev/arm/RealView.py	/^    def offChipIOClkDomain(self, clkdomain):$/;"	m	class:VExpress_EMM
off_t	./arch/arm/freebsd/freebsd.hh	/^    typedef uint32_t off_t;$/;"	t	class:ArmFreebsd32
off_t	./arch/arm/freebsd/freebsd.hh	/^    typedef uint64_t off_t;$/;"	t	class:ArmFreebsd64
off_t	./arch/arm/linux/linux.hh	/^    typedef uint32_t off_t;$/;"	t	class:ArmLinux32
off_t	./arch/arm/linux/linux.hh	/^    typedef uint64_t off_t;$/;"	t	class:ArmLinux64
off_t	./kern/freebsd/freebsd.hh	/^    typedef uint64_t off_t;$/;"	t	class:FreeBSD
off_t	./kern/linux/linux.hh	/^    typedef uint64_t off_t;$/;"	t	class:Linux
off_t	./kern/solaris/solaris.hh	/^    typedef uint64_t off_t;$/;"	t	class:Solaris
off_t	./kern/tru64/tru64.hh	/^    typedef uint64_t off_t;$/;"	t	class:Tru64
off_type	./base/stats/types.hh	/^typedef unsigned int off_type;$/;"	t	namespace:Stats
offlg	./base/inet.hh	/^    uint16_t offlg;$/;"	m	struct:Net::ip6_opt_fragment
offline	./arch/mips/dt_constants.hh	/^    Bitfield<7>      offline;$/;"	m	namespace:MipsISA
offset	./arch/alpha/pagetable.hh	/^    Addr offset() const { return addr & PageOffset; }$/;"	f	struct:AlphaISA::VAddr
offset	./arch/arm/decoder.hh	/^    int offset;$/;"	m	class:ArmISA::Decoder
offset	./arch/arm/faults.cc	/^ArmFaultVals<T>::offset(ThreadContext *tc)$/;"	f	class:ArmISA::ArmFaultVals
offset	./arch/arm/faults.hh	/^        const FaultOffset offset;$/;"	m	struct:ArmISA::ArmFault::FaultVals
offset	./arch/arm/insts/mem64.hh	/^    IntRegIndex offset;$/;"	m	class:ArmISA::MemoryReg64
offset	./arch/arm/types.hh	/^        Bitfield<23, 0>  offset;$/;"	m	namespace:ArmISA
offset	./arch/mips/faults.hh	/^        const FaultVect offset;$/;"	m	struct:MipsISA::MipsFaultBase::FaultVals
offset	./arch/mips/faults.hh	/^    FaultVect offset(ThreadContext *tc) const { return vals.offset; }$/;"	f	class:MipsISA::MipsFault
offset	./arch/mips/faults.hh	/^    offset(ThreadContext *tc) const$/;"	f	class:MipsISA::InterruptFault
offset	./arch/mips/faults.hh	/^    offset(ThreadContext *tc) const$/;"	f	class:MipsISA::TlbRefillFault
offset	./arch/power/pagetable.hh	/^    offset() const$/;"	f	struct:PowerISA::VAddr
offset	./arch/x86/decoder.hh	/^    int offset;$/;"	m	class:X86ISA::Decoder
offset	./arch/x86/regs/misc.hh	/^        Bitfield<31, 0> offset; \/\/ Target Code-Segment Offset$/;"	m	namespace:X86ISA
offset	./base/bitmap.hh	/^        uint32_t offset;$/;"	m	struct:Bitmap::FileHeader
offset	./base/framebuffer.hh	/^        unsigned offset;$/;"	m	struct:PixelConverter::Channel
offset	./base/loader/coff_sym.h	/^    coff_ulong  offset; \/* relative offset this occured *\/$/;"	m	struct:__anon116
offset	./base/statistics.hh	/^    off_type offset;$/;"	m	class:Stats::VectorProxy
offset	./dev/arm/generic_timer.hh	/^    uint64_t offset() const { return _offset; }$/;"	f	class:ArchTimer
offset	./dev/arm/hdlcd.hh	/^        Bitfield<4,0>   offset;$/;"	m	class:HDLcd
offset	./dev/arm/ufs_device.hh	/^        uint64_t offset;$/;"	m	struct:UFSHostDevice::SCSIReply
offset	./dev/arm/ufs_device.hh	/^        uint64_t offset;$/;"	m	struct:UFSHostDevice::transferInfo
offset	./dev/intel_8254_timer.hh	/^        Tick offset;$/;"	m	class:Intel8254Timer::Counter
offset	./dev/mc146818.hh	/^        Tick offset;$/;"	m	struct:MC146818::RTCEvent
offset	./dev/mc146818.hh	/^        Tick offset;$/;"	m	struct:MC146818::RTCTickEvent
offset	./unittest/genini.py	/^            offset = arg.find('=')$/;"	v
offset64	./arch/arm/faults.hh	/^    offset64()$/;"	f	class:ArmISA::ArmFaultVals
offsetBits	./arch/arm/table_walker.hh	/^        uint8_t offsetBits() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
offsetBits	./arch/arm/table_walker.hh	/^        virtual uint8_t offsetBits() const$/;"	f	class:ArmISA::TableWalker::L1Descriptor
offsetBits	./arch/arm/table_walker.hh	/^        virtual uint8_t offsetBits() const$/;"	f	class:ArmISA::TableWalker::L2Descriptor
offsetBits	./cpu/o3/store_set.hh	/^    int offsetBits;$/;"	m	class:StoreSet
offsetHigh	./arch/x86/regs/misc.hh	/^        Bitfield<63, 48> offsetHigh; \/\/ Target Code-Segment Offset$/;"	m	namespace:X86ISA
offsetLow	./arch/x86/regs/misc.hh	/^        Bitfield<15, 0> offsetLow; \/\/ Target Code-Segment Offset$/;"	m	namespace:X86ISA
offsetMask	./mem/page_table.hh	/^    const Addr offsetMask;$/;"	m	class:PageTableBase
oflock	./kern/tru64/tru64_syscalls.hh	/^        oflock = 262,$/;"	e	enum:SystemCalls::__anon102
okToIssueStarving	./mem/ruby/structures/PersistentTable.cc	/^PersistentTable::okToIssueStarving(Addr address,$/;"	f	class:PersistentTable
oldR11Val	./arch/x86/nativetrace.hh	/^    uint64_t oldRcxVal, oldR11Val;$/;"	m	class:Trace::X86NativeTrace
oldRcxVal	./arch/x86/nativetrace.hh	/^    uint64_t oldRcxVal, oldR11Val;$/;"	m	class:Trace::X86NativeTrace
oldRealR11Val	./arch/x86/nativetrace.hh	/^    uint64_t oldRealRcxVal, oldRealR11Val;$/;"	m	class:Trace::X86NativeTrace
oldRealRcxVal	./arch/x86/nativetrace.hh	/^    uint64_t oldRealRcxVal, oldRealR11Val;$/;"	m	class:Trace::X86NativeTrace
oldState	./arch/arm/nativetrace.hh	/^        uint64_t *oldState;$/;"	m	struct:Trace::ArmNativeTrace::ThreadState
old_accept	./kern/tru64/tru64_syscalls.hh	/^        old_accept = 99,$/;"	e	enum:SystemCalls::__anon102
old_creat	./kern/tru64/tru64_syscalls.hh	/^        old_creat = 8,$/;"	e	enum:SystemCalls::__anon102
old_eq	./sim/eventq.hh	/^        EventQueue &old_eq;$/;"	m	class:EventQueue::ScopedMigration
old_fstat	./kern/tru64/tru64_syscalls.hh	/^        old_fstat = 62,$/;"	e	enum:SystemCalls::__anon102
old_getpeername	./kern/tru64/tru64_syscalls.hh	/^        old_getpeername = 141,$/;"	e	enum:SystemCalls::__anon102
old_getpgrp	./kern/tru64/tru64_syscalls.hh	/^        old_getpgrp = 81,$/;"	e	enum:SystemCalls::__anon102
old_getsockname	./kern/tru64/tru64_syscalls.hh	/^        old_getsockname = 150,$/;"	e	enum:SystemCalls::__anon102
old_killpg	./kern/tru64/tru64_syscalls.hh	/^        old_killpg = 146,$/;"	e	enum:SystemCalls::__anon102
old_lstat	./kern/tru64/tru64_syscalls.hh	/^        old_lstat = 40,$/;"	e	enum:SystemCalls::__anon102
old_open	./kern/tru64/tru64_syscalls.hh	/^        old_open = 5,$/;"	e	enum:SystemCalls::__anon102
old_recv	./kern/tru64/tru64_syscalls.hh	/^        old_recv = 102,$/;"	e	enum:SystemCalls::__anon102
old_recvfrom	./kern/tru64/tru64_syscalls.hh	/^        old_recvfrom = 125,$/;"	e	enum:SystemCalls::__anon102
old_recvmsg	./kern/tru64/tru64_syscalls.hh	/^        old_recvmsg = 113,$/;"	e	enum:SystemCalls::__anon102
old_send	./kern/tru64/tru64_syscalls.hh	/^        old_send = 101,$/;"	e	enum:SystemCalls::__anon102
old_sendmsg	./kern/tru64/tru64_syscalls.hh	/^        old_sendmsg = 114,$/;"	e	enum:SystemCalls::__anon102
old_sigblock	./kern/tru64/tru64_syscalls.hh	/^        old_sigblock = 109,$/;"	e	enum:SystemCalls::__anon102
old_sigsetmask	./kern/tru64/tru64_syscalls.hh	/^        old_sigsetmask = 110,$/;"	e	enum:SystemCalls::__anon102
old_sigvec	./kern/tru64/tru64_syscalls.hh	/^        old_sigvec = 108,$/;"	e	enum:SystemCalls::__anon102
old_stat	./kern/tru64/tru64_syscalls.hh	/^        old_stat = 38,$/;"	e	enum:SystemCalls::__anon102
old_vhangup	./kern/tru64/tru64_syscalls.hh	/^        old_vhangup = 76,$/;"	e	enum:SystemCalls::__anon102
old_wait	./kern/tru64/tru64_syscalls.hh	/^        old_wait = 84,$/;"	e	enum:SystemCalls::__anon102
oldestInFlightRobNum	./cpu/trace/trace_cpu.hh	/^            NodeRobNum oldestInFlightRobNum;$/;"	m	class:TraceCPU::ElasticDataGen::HardwareResource
oldestInst	./cpu/o3/inst_queue.hh	/^        InstSeqNum oldestInst;$/;"	m	struct:InstructionQueue::ListOrderEntry
oldestReady	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::oldestReady()$/;"	f	class:DefaultCommit
oldquota	./kern/tru64/tru64_syscalls.hh	/^        oldquota = 149,$/;"	e	enum:SystemCalls::__anon102
on	./arch/mips/dt_constants.hh	/^    Bitfield<0>      on;$/;"	m	namespace:MipsISA
onChipIOClkDomain	./dev/arm/RealView.py	/^    def onChipIOClkDomain(self, clkdomain):$/;"	m	class:RealView
onChipIOClkDomain	./dev/arm/RealView.py	/^    def onChipIOClkDomain(self, clkdomain):$/;"	m	class:RealViewEB
onChipIOClkDomain	./dev/arm/RealView.py	/^    def onChipIOClkDomain(self, clkdomain):$/;"	m	class:RealViewPBX
onChipIOClkDomain	./dev/arm/RealView.py	/^    def onChipIOClkDomain(self, clkdomain):$/;"	m	class:VExpress_EMM
onCpuTimerInterrupt	./arch/mips/interrupts.cc	/^Interrupts::onCpuTimerInterrupt(ThreadContext * tc) const$/;"	f	class:MipsISA::Interrupts
onData	./mem/cache/prefetch/base.hh	/^    bool onData;$/;"	m	class:BasePrefetcher
onEndOfBlock	./dev/arm/hdlcd.cc	/^HDLcd::DmaEngine::onEndOfBlock()$/;"	f	class:HDLcd::DmaEngine
onEndOfBlock	./dev/dma_device.hh	/^    virtual void onEndOfBlock() {};$/;"	f	class:DmaReadFifo
onFrameDone	./dev/pixelpump.hh	/^    virtual void onFrameDone() {};$/;"	f	class:BasePixelPump
onHSyncBegin	./dev/pixelpump.hh	/^    virtual void onHSyncBegin() {};$/;"	f	class:BasePixelPump
onHSyncEnd	./dev/pixelpump.hh	/^    virtual void onHSyncEnd() {};$/;"	f	class:BasePixelPump
onIdle	./dev/arm/hdlcd.cc	/^HDLcd::DmaEngine::onIdle()$/;"	f	class:HDLcd::DmaEngine
onIdle	./dev/dma_device.hh	/^    virtual void onIdle() {};$/;"	f	class:DmaReadFifo
onInst	./mem/cache/prefetch/base.hh	/^    bool onInst;$/;"	m	class:BasePrefetcher
onInterrupt	./dev/arm/gpu_nomali.cc	/^NoMaliGpu::onInterrupt(nomali_handle_t h, nomali_int_t intno, bool set)$/;"	f	class:NoMaliGpu
onKickSignal	./cpu/kvm/base.cc	/^onKickSignal(int signo, siginfo_t *si, void *data)$/;"	f	file:
onKvmExitHypercall	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::onKvmExitHypercall()$/;"	f	class:ArmKvmCPU
onMiss	./mem/cache/prefetch/base.hh	/^    bool onMiss;$/;"	m	class:BasePrefetcher
onNotify	./dev/virtio/base.cc	/^VirtIODeviceBase::onNotify(QueueID idx)$/;"	f	class:VirtIODeviceBase
onNotify	./dev/virtio/base.cc	/^VirtQueue::onNotify()$/;"	f	class:VirtQueue
onNotify	./dev/virtio/console.hh	/^        void onNotify() { trySend(); }$/;"	f	class:VirtIOConsole::TermRecvQueue
onNotifyDescriptor	./dev/virtio/base.hh	/^    virtual void onNotifyDescriptor(VirtDescriptor *desc) {};$/;"	f	class:VirtQueue
onNotifyDescriptor	./dev/virtio/block.cc	/^VirtIOBlock::RequestQueue::onNotifyDescriptor(VirtDescriptor *desc)$/;"	f	class:VirtIOBlock::RequestQueue
onNotifyDescriptor	./dev/virtio/console.cc	/^VirtIOConsole::TermTransQueue::onNotifyDescriptor(VirtDescriptor *desc)$/;"	f	class:VirtIOConsole::TermTransQueue
onNotifyDescriptor	./dev/virtio/fs9p.cc	/^VirtIO9PBase::FSQueue::onNotifyDescriptor(VirtDescriptor *desc)$/;"	f	class:VirtIO9PBase::FSQueue
onRead	./mem/cache/prefetch/base.hh	/^    bool onRead;$/;"	m	class:BasePrefetcher
onRetryList	./mem/ruby/system/RubyPort.hh	/^    bool onRetryList(MemSlavePort * port)$/;"	f	class:RubyPort
onUnderrun	./dev/pixelpump.hh	/^    virtual void onUnderrun(unsigned x, unsigned y) {};$/;"	f	class:BasePixelPump
onVSyncBegin	./dev/pixelpump.hh	/^    virtual void onVSyncBegin() {};$/;"	f	class:BasePixelPump
onVSyncEnd	./dev/pixelpump.hh	/^    virtual void onVSyncEnd() {};$/;"	f	class:BasePixelPump
onWrite	./mem/cache/prefetch/base.hh	/^    bool onWrite;$/;"	m	class:BasePrefetcher
on_data	./mem/cache/prefetch/Prefetcher.py	/^    on_data  = Param.Bool(True, "Notify prefetcher on data accesses")$/;"	v	class:BasePrefetcher
on_inst	./mem/cache/prefetch/Prefetcher.py	/^    on_inst  = Param.Bool(True, "Notify prefetcher on instruction accesses")$/;"	v	class:BasePrefetcher
on_miss	./mem/cache/prefetch/Prefetcher.py	/^    on_miss = Param.Bool(False, "Only notify prefetcher on misses")$/;"	v	class:BasePrefetcher
on_read	./mem/cache/prefetch/Prefetcher.py	/^    on_read = Param.Bool(True, "Notify prefetcher on reads")$/;"	v	class:BasePrefetcher
on_write	./mem/cache/prefetch/Prefetcher.py	/^    on_write = Param.Bool(True, "Notify prefetcher on writes")$/;"	v	class:BasePrefetcher
one	./dev/ps2.hh	/^    Bitfield<3> one;$/;"	m	namespace:Ps2
oneShot	./dev/arm/timer_sp804.hh	/^            Bitfield<0>   oneShot;$/;"	m	class:Sp804::Timer
oneTraceComplete	./cpu/trace/trace_cpu.hh	/^    bool oneTraceComplete;$/;"	m	class:TraceCPU
one_billion	./sim/syscall_emul.hh	/^const int one_billion = 1000000000;$/;"	v
one_million	./sim/syscall_emul.hh	/^const int one_million = 1000000;$/;"	v
oneline	./base/stats/info.hh	/^const FlagsType oneline =       0x0400;$/;"	m	namespace:Stats
op	./arch/x86/types.hh	/^            Opcode op;$/;"	m	struct:X86ISA::ExtMachInst::__anon64
op	./arch/x86/types.hh	/^        Bitfield<4> op;$/;"	m	namespace:X86ISA
op	./base/cp_annotate.hh	/^        uint8_t  op;$/;"	m	struct:CPA::AnnotateData
op	./cpu/TimingExpr.py	/^    op = Param.TimingExprOp("operator")$/;"	v	class:TimingExprBin
op	./cpu/TimingExpr.py	/^    op = Param.TimingExprOp("operator")$/;"	v	class:TimingExprUn
op	./cpu/timing_expr.hh	/^    Enums::TimingExprOp op;$/;"	m	class:TimingExprBin
op	./cpu/timing_expr.hh	/^    Enums::TimingExprOp op;$/;"	m	class:TimingExprUn
op1	./arch/arm/insts/branch.hh	/^    IntRegIndex op1;$/;"	m	class:ArmISA::BranchImmReg
op1	./arch/arm/insts/branch.hh	/^    IntRegIndex op1;$/;"	m	class:ArmISA::BranchReg
op1	./arch/arm/insts/branch.hh	/^    IntRegIndex op1;$/;"	m	class:ArmISA::BranchRegReg
op1	./arch/arm/insts/branch64.hh	/^    IntRegIndex op1;$/;"	m	class:ArmISA::BranchImmImmReg64
op1	./arch/arm/insts/branch64.hh	/^    IntRegIndex op1;$/;"	m	class:ArmISA::BranchImmReg64
op1	./arch/arm/insts/branch64.hh	/^    IntRegIndex op1;$/;"	m	class:ArmISA::BranchReg64
op1	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2, op3;$/;"	m	class:ArmISA::DataX3RegOp
op1	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::DataX2RegImmOp
op1	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::DataX2RegOp
op1	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::DataXCondSelOp
op1	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::DataXERegOp
op1	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::DataXSRegOp
op1	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1;$/;"	m	class:ArmISA::DataX1Reg2ImmOp
op1	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1;$/;"	m	class:ArmISA::DataX1RegImmOp
op1	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1;$/;"	m	class:ArmISA::DataX1RegOp
op1	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1;$/;"	m	class:ArmISA::DataXImmOp
op1	./arch/arm/insts/data64.hh	/^    IntRegIndex op1, op2;$/;"	m	class:ArmISA::DataXCondCompRegOp
op1	./arch/arm/insts/data64.hh	/^    IntRegIndex op1;$/;"	m	class:ArmISA::DataXCondCompImmOp
op1	./arch/arm/insts/macromem.hh	/^    RegIndex dest, op1;$/;"	m	class:ArmISA::MicroNeonMixLaneOp64
op1	./arch/arm/insts/macromem.hh	/^    RegIndex dest, op1;$/;"	m	class:ArmISA::MicroNeonMixOp
op1	./arch/arm/insts/macromem.hh	/^    RegIndex dest, op1;$/;"	m	class:ArmISA::MicroNeonMixOp64
op1	./arch/arm/insts/mem.hh	/^    IntRegIndex op1;$/;"	m	class:ArmISA::Swap
op1	./arch/arm/insts/misc.hh	/^    IntRegIndex op1;$/;"	m	class:McrrOp
op1	./arch/arm/insts/misc.hh	/^    IntRegIndex op1;$/;"	m	class:MiscRegRegImmOp
op1	./arch/arm/insts/misc.hh	/^    IntRegIndex op1;$/;"	m	class:MsrRegOp
op1	./arch/arm/insts/misc.hh	/^    IntRegIndex op1;$/;"	m	class:RegImmRegOp
op1	./arch/arm/insts/misc.hh	/^    IntRegIndex op1;$/;"	m	class:RegImmRegShiftOp
op1	./arch/arm/insts/misc.hh	/^    IntRegIndex op1;$/;"	m	class:RegRegImmImmOp
op1	./arch/arm/insts/misc.hh	/^    IntRegIndex op1;$/;"	m	class:RegRegImmOp
op1	./arch/arm/insts/misc.hh	/^    IntRegIndex op1;$/;"	m	class:RegRegOp
op1	./arch/arm/insts/misc.hh	/^    IntRegIndex op1;$/;"	m	class:RegRegRegImmOp
op1	./arch/arm/insts/misc.hh	/^    IntRegIndex op1;$/;"	m	class:RegRegRegOp
op1	./arch/arm/insts/misc.hh	/^    IntRegIndex op1;$/;"	m	class:RegRegRegRegOp
op1	./arch/arm/insts/misc.hh	/^    MiscRegIndex op1;$/;"	m	class:MrrcOp
op1	./arch/arm/insts/misc.hh	/^    MiscRegIndex op1;$/;"	m	class:RegMiscRegImmOp
op1	./arch/arm/insts/misc64.hh	/^    IntRegIndex op1;$/;"	m	class:RegRegImmImmOp64
op1	./arch/arm/insts/misc64.hh	/^    IntRegIndex op1;$/;"	m	class:RegRegRegImmOp64
op1	./arch/arm/insts/pred_inst.hh	/^    IntRegIndex dest, op1, op2, shift;$/;"	m	class:ArmISA::DataRegRegOp
op1	./arch/arm/insts/pred_inst.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::DataRegOp
op1	./arch/arm/insts/pred_inst.hh	/^    IntRegIndex dest, op1;$/;"	m	class:ArmISA::DataImmOp
op1	./arch/arm/insts/vfp.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::FpCondSelOp
op1	./arch/arm/insts/vfp.hh	/^    IntRegIndex op1, op2;$/;"	m	class:ArmISA::FpCondCompRegOp
op1	./arch/arm/insts/vfp.hh	/^    IntRegIndex op1;$/;"	m	class:ArmISA::FpRegRegImmOp
op1	./arch/arm/insts/vfp.hh	/^    IntRegIndex op1;$/;"	m	class:ArmISA::FpRegRegOp
op1	./arch/arm/insts/vfp.hh	/^    IntRegIndex op1;$/;"	m	class:ArmISA::FpRegRegRegImmOp
op1	./arch/arm/insts/vfp.hh	/^    IntRegIndex op1;$/;"	m	class:ArmISA::FpRegRegRegOp
op1	./arch/arm/insts/vfp.hh	/^    IntRegIndex op1;$/;"	m	class:ArmISA::FpRegRegRegRegOp
op2	./arch/arm/insts/branch.hh	/^    IntRegIndex op2;$/;"	m	class:ArmISA::BranchRegReg
op2	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2, op3;$/;"	m	class:ArmISA::DataX3RegOp
op2	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::DataX2RegImmOp
op2	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::DataX2RegOp
op2	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::DataXCondSelOp
op2	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::DataXERegOp
op2	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::DataXSRegOp
op2	./arch/arm/insts/data64.hh	/^    IntRegIndex op1, op2;$/;"	m	class:ArmISA::DataXCondCompRegOp
op2	./arch/arm/insts/misc.hh	/^    IntRegIndex op2;$/;"	m	class:McrrOp
op2	./arch/arm/insts/misc.hh	/^    IntRegIndex op2;$/;"	m	class:RegRegRegImmOp
op2	./arch/arm/insts/misc.hh	/^    IntRegIndex op2;$/;"	m	class:RegRegRegOp
op2	./arch/arm/insts/misc.hh	/^    IntRegIndex op2;$/;"	m	class:RegRegRegRegOp
op2	./arch/arm/insts/misc64.hh	/^    IntRegIndex op2;$/;"	m	class:RegRegRegImmOp64
op2	./arch/arm/insts/pred_inst.hh	/^    IntRegIndex dest, op1, op2, shift;$/;"	m	class:ArmISA::DataRegRegOp
op2	./arch/arm/insts/pred_inst.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::DataRegOp
op2	./arch/arm/insts/vfp.hh	/^    IntRegIndex dest, op1, op2;$/;"	m	class:ArmISA::FpCondSelOp
op2	./arch/arm/insts/vfp.hh	/^    IntRegIndex op1, op2;$/;"	m	class:ArmISA::FpCondCompRegOp
op2	./arch/arm/insts/vfp.hh	/^    IntRegIndex op2;$/;"	m	class:ArmISA::FpRegRegRegImmOp
op2	./arch/arm/insts/vfp.hh	/^    IntRegIndex op2;$/;"	m	class:ArmISA::FpRegRegRegOp
op2	./arch/arm/insts/vfp.hh	/^    IntRegIndex op2;$/;"	m	class:ArmISA::FpRegRegRegRegOp
op3	./arch/arm/insts/data64.hh	/^    IntRegIndex dest, op1, op2, op3;$/;"	m	class:ArmISA::DataX3RegOp
op3	./arch/arm/insts/misc.hh	/^    IntRegIndex op3;$/;"	m	class:RegRegRegRegOp
op3	./arch/arm/insts/vfp.hh	/^    IntRegIndex op3;$/;"	m	class:ArmISA::FpRegRegRegRegOp
opClass	./cpu/FuncUnit.py	/^    opClass = Param.OpClass("type of operation")$/;"	v	class:OpDesc
opClass	./cpu/base_dyn_inst.hh	/^    OpClass opClass() const { return staticInst->opClass(); }$/;"	f	class:BaseDynInst
opClass	./cpu/func_unit.hh	/^    OpClass opClass;$/;"	m	class:OpDesc
opClass	./cpu/minor/MinorCPU.py	/^    opClass = Param.OpClass("op class to match")$/;"	v	class:MinorOpClass
opClass	./cpu/minor/func_unit.hh	/^    OpClass opClass;$/;"	m	class:MinorOpClass
opClass	./cpu/static_inst.hh	/^    OpClass opClass()     const { return _opClass; }$/;"	f	class:StaticInst
opClassRE	./arch/isa_parser.py	/^opClassRE = re.compile(r'.*Op|No_OpClass')$/;"	v
opClasses	./cpu/minor/MinorCPU.py	/^    opClasses = Param.MinorOpClassSet(MinorOpClassSet(), "type of operations"$/;"	v	class:MinorFU
opClasses	./cpu/minor/MinorCPU.py	/^    opClasses = Param.MinorOpClassSet(MinorOpClassSet(),$/;"	v	class:MinorFUTiming
opClasses	./cpu/minor/MinorCPU.py	/^    opClasses = VectorParam.MinorOpClass([], "op classes to be matched."$/;"	v	class:MinorOpClassSet
opClasses	./cpu/minor/MinorCPU.py	/^    opClasses = minorMakeOpClassSet([$/;"	v	class:MinorDefaultFloatSimdFU
opClasses	./cpu/minor/MinorCPU.py	/^    opClasses = minorMakeOpClassSet(['IntAlu'])$/;"	v	class:MinorDefaultIntFU
opClasses	./cpu/minor/MinorCPU.py	/^    opClasses = minorMakeOpClassSet(['IntDiv'])$/;"	v	class:MinorDefaultIntDivFU
opClasses	./cpu/minor/MinorCPU.py	/^    opClasses = minorMakeOpClassSet(['IntMult'])$/;"	v	class:MinorDefaultIntMulFU
opClasses	./cpu/minor/MinorCPU.py	/^    opClasses = minorMakeOpClassSet(['IprAccess', 'InstPrefetch'])$/;"	v	class:MinorDefaultMiscFU
opClasses	./cpu/minor/MinorCPU.py	/^    opClasses = minorMakeOpClassSet(['MemRead', 'MemWrite'])$/;"	v	class:MinorDefaultMemFU
opClasses	./cpu/minor/func_unit.hh	/^    MinorOpClassSet *opClasses;$/;"	m	class:MinorFU
opClasses	./cpu/minor/func_unit.hh	/^    MinorOpClassSet *opClasses;$/;"	m	class:MinorFUTiming
opClasses	./cpu/minor/func_unit.hh	/^    std::vector<MinorOpClass *> opClasses;$/;"	m	class:MinorOpClassSet
opDescList	./cpu/func_unit.hh	/^    std::vector<OpDesc *> opDescList;$/;"	m	class:FUDesc
opLat	./cpu/FuncUnit.py	/^    opLat = Param.Cycles(1, "cycles until result is available")$/;"	v	class:OpDesc
opLat	./cpu/func_unit.hh	/^    Cycles opLat;$/;"	m	class:OpDesc
opLat	./cpu/minor/MinorCPU.py	/^    opLat = 1$/;"	v	class:MinorDefaultMemFU
opLat	./cpu/minor/MinorCPU.py	/^    opLat = 1$/;"	v	class:MinorDefaultMiscFU
opLat	./cpu/minor/MinorCPU.py	/^    opLat = 3$/;"	v	class:MinorDefaultIntFU
opLat	./cpu/minor/MinorCPU.py	/^    opLat = 3$/;"	v	class:MinorDefaultIntMulFU
opLat	./cpu/minor/MinorCPU.py	/^    opLat = 6$/;"	v	class:MinorDefaultFloatSimdFU
opLat	./cpu/minor/MinorCPU.py	/^    opLat = 9$/;"	v	class:MinorDefaultIntDivFU
opLat	./cpu/minor/MinorCPU.py	/^    opLat = Param.Cycles(1, "latency in cycles")$/;"	v	class:MinorFU
opLat	./cpu/minor/func_unit.hh	/^    Cycles opLat;$/;"	m	class:MinorFU
opLatencies	./cpu/func_unit.hh	/^    std::array<unsigned, Num_OpClasses> opLatencies;$/;"	m	class:FuncUnit
opLatency	./cpu/func_unit.cc	/^FuncUnit::opLatency(OpClass cap)$/;"	f	class:FuncUnit
opList	./cpu/FuncUnit.py	/^    opList = VectorParam.OpDesc("operation classes for this FU type")$/;"	v	class:FUDesc
opList	./cpu/o3/FuncUnitConfig.py	/^    opList = [ OpDesc(opClass='FloatAdd', opLat=2),$/;"	v	class:FP_ALU
opList	./cpu/o3/FuncUnitConfig.py	/^    opList = [ OpDesc(opClass='FloatMult', opLat=4),$/;"	v	class:FP_MultDiv
opList	./cpu/o3/FuncUnitConfig.py	/^    opList = [ OpDesc(opClass='IntAlu') ]$/;"	v	class:IntALU
opList	./cpu/o3/FuncUnitConfig.py	/^    opList = [ OpDesc(opClass='IntMult', opLat=3),$/;"	v	class:IntMultDiv
opList	./cpu/o3/FuncUnitConfig.py	/^    opList = [ OpDesc(opClass='IprAccess', opLat = 3, pipelined = False) ]$/;"	v	class:IprPort
opList	./cpu/o3/FuncUnitConfig.py	/^    opList = [ OpDesc(opClass='MemRead') ]$/;"	v	class:ReadPort
opList	./cpu/o3/FuncUnitConfig.py	/^    opList = [ OpDesc(opClass='MemRead'), OpDesc(opClass='MemWrite') ]$/;"	v	class:RdWrPort
opList	./cpu/o3/FuncUnitConfig.py	/^    opList = [ OpDesc(opClass='MemWrite') ]$/;"	v	class:WritePort
opList	./cpu/o3/FuncUnitConfig.py	/^    opList = [ OpDesc(opClass='SimdAdd'),$/;"	v	class:SIMD_Unit
opModeIs64	./arch/arm/types.hh	/^    opModeIs64(OperatingMode mode)$/;"	f	namespace:ArmISA
opModeIsH	./arch/arm/types.hh	/^    opModeIsH(OperatingMode mode)$/;"	f	namespace:ArmISA
opModeIsT	./arch/arm/types.hh	/^    opModeIsT(OperatingMode mode)$/;"	f	namespace:ArmISA
opModeToEL	./arch/arm/types.hh	/^    opModeToEL(OperatingMode mode)$/;"	f	namespace:ArmISA
opSize	./arch/x86/insts/microop.hh	/^        uint8_t opSize;$/;"	m	class:X86ISA::X86MicroopBase
opSize	./arch/x86/types.hh	/^        uint8_t opSize;$/;"	m	struct:X86ISA::ExtMachInst
opSys	./base/loader/object_file.hh	/^    OpSys opSys;$/;"	m	class:ObjectFile
opc2	./arch/arm/types.hh	/^        Bitfield<7,5>    opc2;$/;"	m	namespace:ArmISA
opcode	./arch/arm/types.hh	/^        Bitfield<24, 21> opcode;$/;"	m	namespace:ArmISA
opcode	./arch/x86/types.hh	/^        } opcode;$/;"	m	struct:X86ISA::ExtMachInst	typeref:struct:X86ISA::ExtMachInst::__anon64
opcode15	./arch/arm/types.hh	/^        Bitfield<15>     opcode15;$/;"	m	namespace:ArmISA
opcode15_12	./arch/arm/types.hh	/^        Bitfield<15, 12> opcode15_12;$/;"	m	namespace:ArmISA
opcode18	./arch/arm/types.hh	/^        Bitfield<18>     opcode18;$/;"	m	namespace:ArmISA
opcode19	./arch/arm/types.hh	/^        Bitfield<19>     opcode19;$/;"	m	namespace:ArmISA
opcode19_16	./arch/arm/types.hh	/^        Bitfield<19, 16> opcode19_16;$/;"	m	namespace:ArmISA
opcode20	./arch/arm/types.hh	/^        Bitfield<20>     opcode20;$/;"	m	namespace:ArmISA
opcode22	./arch/arm/types.hh	/^        Bitfield<22>     opcode22;$/;"	m	namespace:ArmISA
opcode23_20	./arch/arm/types.hh	/^        Bitfield<23, 20> opcode23_20;$/;"	m	namespace:ArmISA
opcode23_21	./arch/arm/types.hh	/^        Bitfield<23, 21> opcode23_21;$/;"	m	namespace:ArmISA
opcode24	./arch/arm/types.hh	/^        Bitfield<24>     opcode24;$/;"	m	namespace:ArmISA
opcode24_23	./arch/arm/types.hh	/^        Bitfield<24, 23> opcode24_23;$/;"	m	namespace:ArmISA
opcode4	./arch/arm/types.hh	/^        Bitfield<4>      opcode4;$/;"	m	namespace:ArmISA
opcode6	./arch/arm/types.hh	/^        Bitfield<6>      opcode6;$/;"	m	namespace:ArmISA
opcode7	./arch/arm/types.hh	/^        Bitfield<7>      opcode7;$/;"	m	namespace:ArmISA
opcodeTypeToStr	./arch/x86/types.hh	/^    opcodeTypeToStr(OpcodeType type)$/;"	f	namespace:X86ISA
open	./arch/isa_parser.py	/^    def open(self, name, bare=False):$/;"	m	class:ISAParser
open	./base/stats/text.cc	/^Text::open(const std::string &file)$/;"	f	class:Stats::Text
open	./base/stats/text.cc	/^Text::open(std::ostream &_stream)$/;"	f	class:Stats::Text
open	./dev/storage/disk_image.cc	/^CowDiskImage::open(const string &file)$/;"	f	class:CowDiskImage
open	./dev/storage/disk_image.cc	/^RawDiskImage::open(const string &filename, bool rd_only)$/;"	f	class:RawDiskImage
open	./kern/tru64/tru64_syscalls.hh	/^        open = 45,$/;"	e	enum:SystemCalls::__anon102
openFile	./base/output.cc	/^OutputDirectory::openFile(const string &filename,$/;"	f	class:OutputDirectory
openFile	./sim/process.cc	/^openFile(const string& filename, int flags, mode_t mode)$/;"	f	file:
openFlagTable	./arch/alpha/linux/linux.cc	/^OpenFlagTransTable AlphaLinux::openFlagTable[] = {$/;"	m	class:AlphaLinux	file:
openFlagTable	./arch/alpha/linux/linux.hh	/^    static OpenFlagTransTable openFlagTable[];$/;"	m	class:AlphaLinux
openFlagTable	./arch/alpha/tru64/tru64.cc	/^OpenFlagTransTable AlphaTru64::openFlagTable[] = {$/;"	m	class:AlphaTru64	file:
openFlagTable	./arch/alpha/tru64/tru64.hh	/^    static OpenFlagTransTable openFlagTable[];$/;"	m	class:AlphaTru64
openFlagTable	./arch/arm/freebsd/freebsd.cc	/^OpenFlagTransTable ArmFreebsd32::openFlagTable[] = {$/;"	m	class:ArmFreebsd32	file:
openFlagTable	./arch/arm/freebsd/freebsd.cc	/^OpenFlagTransTable ArmFreebsd64::openFlagTable[] = {$/;"	m	class:ArmFreebsd64	file:
openFlagTable	./arch/arm/freebsd/freebsd.hh	/^    static OpenFlagTransTable openFlagTable[];$/;"	m	class:ArmFreebsd32
openFlagTable	./arch/arm/freebsd/freebsd.hh	/^    static OpenFlagTransTable openFlagTable[];$/;"	m	class:ArmFreebsd64
openFlagTable	./arch/arm/linux/linux.cc	/^OpenFlagTransTable ArmLinux32::openFlagTable[] = {$/;"	m	class:ArmLinux32	file:
openFlagTable	./arch/arm/linux/linux.cc	/^OpenFlagTransTable ArmLinux64::openFlagTable[] = {$/;"	m	class:ArmLinux64	file:
openFlagTable	./arch/arm/linux/linux.hh	/^    static OpenFlagTransTable openFlagTable[];$/;"	m	class:ArmLinux32
openFlagTable	./arch/arm/linux/linux.hh	/^    static OpenFlagTransTable openFlagTable[];$/;"	m	class:ArmLinux64
openFlagTable	./arch/mips/linux/linux.cc	/^OpenFlagTransTable MipsLinux::openFlagTable[] = {$/;"	m	class:MipsLinux	file:
openFlagTable	./arch/mips/linux/linux.hh	/^    static OpenFlagTransTable openFlagTable[];$/;"	m	class:MipsLinux
openFlagTable	./arch/power/linux/linux.cc	/^OpenFlagTransTable PowerLinux::openFlagTable[] = {$/;"	m	class:PowerLinux	file:
openFlagTable	./arch/power/linux/linux.hh	/^    static OpenFlagTransTable openFlagTable[];$/;"	m	class:PowerLinux
openFlagTable	./arch/sparc/linux/linux.cc	/^OpenFlagTransTable SparcLinux::openFlagTable[] = {$/;"	m	class:SparcLinux	file:
openFlagTable	./arch/sparc/linux/linux.hh	/^    static OpenFlagTransTable openFlagTable[];$/;"	m	class:SparcLinux
openFlagTable	./arch/sparc/solaris/solaris.cc	/^OpenFlagTransTable SparcSolaris::openFlagTable[] = {$/;"	m	class:SparcSolaris	file:
openFlagTable	./arch/sparc/solaris/solaris.hh	/^    static OpenFlagTransTable openFlagTable[];$/;"	m	class:SparcSolaris
openFlagTable	./arch/x86/linux/linux.cc	/^OpenFlagTransTable X86Linux32::openFlagTable[] = {$/;"	m	class:X86Linux32	file:
openFlagTable	./arch/x86/linux/linux.cc	/^OpenFlagTransTable X86Linux64::openFlagTable[] = {$/;"	m	class:X86Linux64	file:
openFlagTable	./arch/x86/linux/linux.hh	/^    static OpenFlagTransTable openFlagTable[];$/;"	m	class:X86Linux32
openFlagTable	./arch/x86/linux/linux.hh	/^    static OpenFlagTransTable openFlagTable[];$/;"	m	class:X86Linux64
openFunc	./sim/syscall_emul.hh	/^openFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
openInputFile	./sim/process.cc	/^openInputFile(const string &filename)$/;"	f	file:
openOutputFile	./sim/process.cc	/^openOutputFile(const string &filename)$/;"	f	file:
openRow	./mem/dram_ctrl.hh	/^        uint32_t openRow;$/;"	m	class:DRAMCtrl::Bank
openSpecialFile	./kern/linux/linux.cc	/^Linux::openSpecialFile(std::string path, LiveProcess *process,$/;"	f	class:Linux
openSpecialFile	./kern/operatingsystem.cc	/^OperatingSystem::openSpecialFile(std::string path, LiveProcess *process,$/;"	f	class:OperatingSystem
openatFunc	./sim/syscall_emul.hh	/^openatFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
openboot	./arch/sparc/system.hh	/^    ObjectFile *openboot;$/;"	m	class:SparcSystem
openbootSymtab	./arch/sparc/system.hh	/^    SymbolTable *openbootSymtab;$/;"	m	class:SparcSystem
openboot_addr	./arch/sparc/SparcSystem.py	/^    openboot_addr = Param.Addr(Addr('512kB') + _rom_base,$/;"	v	class:SparcSystem
openboot_bin	./arch/sparc/SparcSystem.py	/^    openboot_bin = Param.String("file that contains the openboot code")$/;"	v	class:SparcSystem
operateMessageBuffer	./mem/ruby/network/simple/PerfectSwitch.cc	/^PerfectSwitch::operateMessageBuffer(MessageBuffer *buffer, int incoming,$/;"	f	class:PerfectSwitch
operateVnet	./mem/ruby/network/simple/PerfectSwitch.cc	/^PerfectSwitch::operateVnet(int vnet)$/;"	f	class:PerfectSwitch
operateVnet	./mem/ruby/network/simple/Throttle.cc	/^Throttle::operateVnet(int vnet, int &bw_remaining, bool &schedule_wakeup,$/;"	f	class:Throttle
operator !	./base/debug.hh	/^    bool operator!() const { return !_tracing; }$/;"	f	class:Debug::SimpleFlag
operator !	./base/inet.hh	/^    bool operator!() const { return !p; }$/;"	f	class:Net::EthPtr
operator !	./base/inet.hh	/^    bool operator!() const { return !p; }$/;"	f	class:Net::Ip6Ptr
operator !	./base/inet.hh	/^    bool operator!() const { return !p; }$/;"	f	class:Net::IpPtr
operator !	./base/inet.hh	/^    bool operator!() const { return !p; }$/;"	f	class:Net::TcpPtr
operator !	./base/inet.hh	/^    bool operator!() const { return !p; }$/;"	f	class:Net::UdpPtr
operator !	./base/refcnt.hh	/^    bool operator!() const { return data == 0; }$/;"	f	class:RefCountingPtr
operator !	./sim/arguments.hh	/^    bool operator!() {$/;"	f	class:Arguments
operator !	./sim/vptr.hh	/^    operator!() const$/;"	f	class:VPtr
operator !=	./arch/arm/types.hh	/^        operator != (const PCState &opc) const$/;"	f	class:ArmISA::PCState
operator !=	./arch/generic/types.hh	/^    operator != (const DelaySlotPCState<MachInst> &opc) const$/;"	f	class:GenericISA::DelaySlotPCState
operator !=	./arch/generic/types.hh	/^    operator != (const DelaySlotUPCState<MachInst> &opc) const$/;"	f	class:GenericISA::DelaySlotUPCState
operator !=	./arch/generic/types.hh	/^    operator != (const PCStateBase &opc) const$/;"	f	class:GenericISA::PCStateBase
operator !=	./arch/generic/types.hh	/^    operator != (const UPCState<MachInst> &opc) const$/;"	f	class:GenericISA::UPCState
operator !=	./base/addr_range.hh	/^    bool operator!=(const AddrRange& r) const$/;"	f	class:AddrRange
operator !=	./base/refcnt.hh	/^inline bool operator!=(const RefCountingPtr<T> &l, const RefCountingPtr<T> &r)$/;"	f
operator !=	./base/refcnt.hh	/^inline bool operator!=(const RefCountingPtr<T> &l, const T *r)$/;"	f
operator !=	./base/refcnt.hh	/^inline bool operator!=(const T *l, const RefCountingPtr<T> &r)$/;"	f
operator !=	./base/time.hh	/^operator!=(const Time &l, const Time &r)$/;"	f
operator !=	./mem/packet.hh	/^    bool operator!=(MemCmd c2) const { return (cmd != c2.cmd); }$/;"	f	class:MemCmd
operator !=	./mem/ruby/common/MachineID.hh	/^operator!=(const MachineID & obj1, const MachineID & obj2)$/;"	f
operator !=	./sim/eventq.hh	/^operator!=(const Event &l, const Event &r)$/;"	f
operator ()	./arch/arm/types.hh	/^    size_t operator()(const ArmISA::ExtMachInst &emi) const {$/;"	f	struct:std::hash
operator ()	./arch/power/types.hh	/^    size_t operator()(const PowerISA::ExtMachInst &emi) const {$/;"	f	struct:std::hash
operator ()	./arch/sparc/pagetable.hh	/^    uint64_t operator()() const { assert(populated); return entry4u; }$/;"	f	class:SparcISA::PageTableEntry
operator ()	./arch/x86/types.hh	/^        size_t operator()(const X86ISA::ExtMachInst &emi) const {$/;"	f	struct:std::hash
operator ()	./base/cp_annotate.hh	/^    operator()(const std::pair<std::string, uint64_t>& x) const$/;"	f	struct:std::hash
operator ()	./base/stats/text.cc	/^DistPrint::operator()(ostream &stream) const$/;"	f	class:Stats::DistPrint
operator ()	./base/stats/text.cc	/^ScalarPrint::operator()(ostream &stream, bool oneLine) const$/;"	f	class:Stats::ScalarPrint
operator ()	./base/stats/text.cc	/^SparseHistPrint::operator()(ostream &stream) const$/;"	f	class:Stats::SparseHistPrint
operator ()	./base/stats/text.cc	/^VectorPrint::operator()(std::ostream &stream) const$/;"	f	class:Stats::VectorPrint
operator ()	./base/stl_helpers.hh	/^    operator()(const T &elem)$/;"	f	class:m5::stl_helpers::ContainerPrint
operator ()	./base/trace.hh	/^    const std::string &operator()() const { return str; }$/;"	f	struct:StringWrap
operator ()	./cpu/o3/inst_queue.hh	/^        bool operator() (const DynInstPtr &lhs, const DynInstPtr &rhs) const$/;"	f	struct:InstructionQueue::pqCompare
operator ()	./cpu/o3/mem_dep_unit.hh	/^    size_t operator() (const InstSeqNum &seq_num) const {$/;"	f	struct:SNHash
operator ()	./cpu/o3/store_set.hh	/^    bool operator()(const InstSeqNum &lhs, const InstSeqNum &rhs) const$/;"	f	struct:ltseqnum
operator ()	./cpu/pc_event.hh	/^        bool operator()(Addr pc, const record_t &r) const {$/;"	f	class:PCEventQueue::MapCompare
operator ()	./cpu/pc_event.hh	/^        bool operator()(const record_t &l, Addr pc) const {$/;"	f	class:PCEventQueue::MapCompare
operator ()	./cpu/pc_event.hh	/^        bool operator()(const record_t &l, const record_t &r) const {$/;"	f	class:PCEventQueue::MapCompare
operator ()	./cpu/simple/probes/simpoint.hh	/^    size_t operator()(const BasicBlockRange &bb) const {$/;"	f	struct:std::hash
operator ()	./dev/net/i8254xGBe_defs.hh	/^        T operator()() { return _data; }$/;"	f	struct:iGbReg::Regs::Reg
operator ()	./dev/net/i8254xGBe_defs.hh	/^        void operator()(T d) { _data = d; }$/;"	f	struct:iGbReg::Regs::Reg
operator ()	./dev/pci/copy_engine_defs.hh	/^    T operator()() { return _data; }$/;"	f	struct:CopyEngineReg::Reg
operator ()	./dev/pci/copy_engine_defs.hh	/^    void operator()(T d) { _data = d; }$/;"	f	struct:CopyEngineReg::Reg
operator ()	./unittest/stattest.cc	/^    double operator()() { return 9.7; }$/;"	f	class:TestClass
operator *	./base/inet.hh	/^    EthHdr &operator*() { return *(EthHdr *)p->data; }$/;"	f	class:Net::EthPtr
operator *	./base/inet.hh	/^    Ip6Hdr &operator*() { return *get(); }$/;"	f	class:Net::Ip6Ptr
operator *	./base/inet.hh	/^    IpHdr &operator*() { return *get(); }$/;"	f	class:Net::IpPtr
operator *	./base/inet.hh	/^    TcpHdr &operator*() { return *get(); }$/;"	f	class:Net::TcpPtr
operator *	./base/inet.hh	/^    UdpHdr &operator*() { return *get(); }$/;"	f	class:Net::UdpPtr
operator *	./base/inet.hh	/^    const EthHdr &operator*() const { return *(const EthHdr *)p->data; }$/;"	f	class:Net::EthPtr
operator *	./base/inet.hh	/^    const Ip6Hdr &operator*() const { return *get(); }$/;"	f	class:Net::Ip6Ptr
operator *	./base/inet.hh	/^    const IpHdr &operator*() const { return *get(); }$/;"	f	class:Net::IpPtr
operator *	./base/inet.hh	/^    const TcpHdr &operator*() const { return *get(); }$/;"	f	class:Net::TcpPtr
operator *	./base/inet.hh	/^    const UdpHdr &operator*() const { return *get(); }$/;"	f	class:Net::UdpPtr
operator *	./base/refcnt.hh	/^    T &operator*() const { return *data; }$/;"	f	class:RefCountingPtr
operator *	./base/statistics.hh	/^operator*(Temp l, Temp r)$/;"	f	namespace:Stats
operator *	./cpu/timebuf.hh	/^        T &operator*() const { return *buffer->access(index); }$/;"	f	class:TimeBuffer::wire
operator *	./sim/syscall_emul_buf.hh	/^    T &operator*()       { return *((T *)bufPtr); }$/;"	f	class:TypedBufferArg
operator *	./sim/vptr.hh	/^    operator*()$/;"	f	class:VPtr
operator +	./base/statistics.hh	/^operator+(Temp l, Temp r)$/;"	f	namespace:Stats
operator +	./base/time.hh	/^operator+(const Time &l, const Time &r)$/;"	f
operator +	./base/types.hh	/^    constexpr Cycles operator +(const Cycles& b) const$/;"	f	class:Cycles
operator +	./sim/vptr.hh	/^    operator+(int offset)$/;"	f	class:VPtr
operator ++	./base/statistics.hh	/^    void operator++() { data()->inc(1); }$/;"	f	class:Stats::ScalarBase
operator ++	./base/statistics.hh	/^    void operator++() { stat.data(index)->inc(1); }$/;"	f	class:Stats::ScalarProxy
operator ++	./base/statistics.hh	/^    void operator++(int) { ++*this; }$/;"	f	class:Stats::ScalarBase
operator ++	./base/statistics.hh	/^    void operator++(int) { ++*this; }$/;"	f	class:Stats::ScalarProxy
operator ++	./base/types.hh	/^    Cycles& operator++()$/;"	f	class:Cycles
operator ++	./cpu/timebuf.hh	/^        wire &operator++()$/;"	f	class:TimeBuffer::wire
operator ++	./cpu/timebuf.hh	/^        wire &operator++(int)$/;"	f	class:TimeBuffer::wire
operator ++	./sim/arguments.hh	/^    Arguments &operator++() {$/;"	f	class:Arguments
operator ++	./sim/arguments.hh	/^    Arguments operator++(int) {$/;"	f	class:Arguments
operator +=	./base/statistics.cc	/^Formula::operator+=(Temp r)$/;"	f	class:Stats::Formula
operator +=	./base/statistics.hh	/^    operator+=(const U &v)$/;"	f	class:Stats::ScalarProxy
operator +=	./base/statistics.hh	/^    void operator+=(const U &v) { data()->inc(v); }$/;"	f	class:Stats::ScalarBase
operator +=	./base/time.hh	/^    operator+=(const Time &other)$/;"	f	class:Time
operator +=	./base/types.hh	/^    Cycles& operator+=(const Cycles& cc)$/;"	f	class:Cycles
operator +=	./cpu/timebuf.hh	/^        const wire &operator+=(int offset)$/;"	f	class:TimeBuffer::wire
operator +=	./sim/arguments.hh	/^    const Arguments &operator+=(int index) {$/;"	f	class:Arguments
operator +=	./sim/vptr.hh	/^    operator+=(int offset)$/;"	f	class:VPtr
operator -	./base/statistics.hh	/^operator-(Temp l)$/;"	f	namespace:Stats
operator -	./base/statistics.hh	/^operator-(Temp l, Temp r)$/;"	f	namespace:Stats
operator -	./base/time.hh	/^operator-(const Time &l, const Time &r)$/;"	f
operator -	./base/types.hh	/^    constexpr Cycles operator -(const Cycles& b) const$/;"	f	class:Cycles
operator --	./base/statistics.hh	/^    void operator--() { data()->dec(1); }$/;"	f	class:Stats::ScalarBase
operator --	./base/statistics.hh	/^    void operator--() { stat.data(index)->dec(1); }$/;"	f	class:Stats::ScalarProxy
operator --	./base/statistics.hh	/^    void operator--(int) { --*this; }$/;"	f	class:Stats::ScalarBase
operator --	./base/statistics.hh	/^    void operator--(int) { --*this; }$/;"	f	class:Stats::ScalarProxy
operator --	./base/types.hh	/^    Cycles& operator--()$/;"	f	class:Cycles
operator --	./cpu/timebuf.hh	/^        wire &operator--()$/;"	f	class:TimeBuffer::wire
operator --	./cpu/timebuf.hh	/^        wire &operator--(int)$/;"	f	class:TimeBuffer::wire
operator --	./sim/arguments.hh	/^    Arguments &operator--() {$/;"	f	class:Arguments
operator --	./sim/arguments.hh	/^    Arguments operator--(int) {$/;"	f	class:Arguments
operator -=	./base/statistics.hh	/^    operator-=(const U &v)$/;"	f	class:Stats::ScalarProxy
operator -=	./base/statistics.hh	/^    void operator-=(const U &v) { data()->dec(v); }$/;"	f	class:Stats::ScalarBase
operator -=	./base/time.hh	/^    operator-=(const Time &other)$/;"	f	class:Time
operator -=	./cpu/timebuf.hh	/^        const wire &operator-=(int offset)$/;"	f	class:TimeBuffer::wire
operator -=	./sim/arguments.hh	/^    const Arguments &operator-=(int index) {$/;"	f	class:Arguments
operator ->	./base/inet.hh	/^    EthHdr *operator->() { return (EthHdr *)p->data; }$/;"	f	class:Net::EthPtr
operator ->	./base/inet.hh	/^    Ip6Hdr *operator->() { return get(); }$/;"	f	class:Net::Ip6Ptr
operator ->	./base/inet.hh	/^    IpHdr *operator->() { return get(); }$/;"	f	class:Net::IpPtr
operator ->	./base/inet.hh	/^    TcpHdr *operator->() { return get(); }$/;"	f	class:Net::TcpPtr
operator ->	./base/inet.hh	/^    UdpHdr *operator->() { return get(); }$/;"	f	class:Net::UdpPtr
operator ->	./base/inet.hh	/^    const EthHdr *operator->() const { return (const EthHdr *)p->data; }$/;"	f	class:Net::EthPtr
operator ->	./base/inet.hh	/^    const Ip6Hdr *operator->() const { return get(); }$/;"	f	class:Net::Ip6Ptr
operator ->	./base/inet.hh	/^    const IpHdr *operator->() const { return get(); }$/;"	f	class:Net::IpPtr
operator ->	./base/inet.hh	/^    const TcpHdr *operator->() const { return get(); }$/;"	f	class:Net::TcpPtr
operator ->	./base/inet.hh	/^    const UdpHdr *operator->() const { return get(); }$/;"	f	class:Net::UdpPtr
operator ->	./base/refcnt.hh	/^    T *operator->() const { return data; }$/;"	f	class:RefCountingPtr
operator ->	./cpu/timebuf.hh	/^        T *operator->() const { return buffer->access(index); }$/;"	f	class:TimeBuffer::wire
operator ->	./sim/syscall_emul_buf.hh	/^    T* operator->()      { return (T *)bufPtr; }$/;"	f	class:TypedBufferArg
operator ->	./sim/vptr.hh	/^    operator->()$/;"	f	class:VPtr
operator /	./base/statistics.hh	/^operator\/(Temp l, Temp r)$/;"	f	namespace:Stats
operator /=	./base/statistics.cc	/^Formula::operator\/=(Temp r)$/;"	f	class:Stats::Formula
operator <	./arch/sparc/pagetable.hh	/^    operator<(const TlbRange &r2) const$/;"	f	struct:SparcISA::TlbRange
operator <	./base/addr_range.hh	/^    bool operator<(const AddrRange& r) const$/;"	f	class:AddrRange
operator <	./base/bitunion.hh	/^        operator<(Base const & base) const$/;"	f	class:BitfieldBackend::BitUnionOperators
operator <	./base/time.hh	/^operator<(const Time &l, const Time &r)$/;"	f
operator <	./dev/pci/types.hh	/^    constexpr bool operator<(const PciBusAddr &rhs) const {$/;"	f	struct:PciBusAddr
operator <	./mem/mem_checker.hh	/^        bool operator<(const Transaction& rhs) const$/;"	f	class:MemChecker::Transaction
operator <	./mem/ruby/network/simple/PerfectSwitch.cc	/^operator<(const LinkOrder& l1, const LinkOrder& l2)$/;"	f
operator <	./sim/eventq.hh	/^operator<(const Event &l, const Event &r)$/;"	f
operator <<	./arch/generic/types.hh	/^operator<<(std::ostream & os, const DelaySlotPCState<MachInst> &pc)$/;"	f	namespace:GenericISA
operator <<	./arch/generic/types.hh	/^operator<<(std::ostream & os, const DelaySlotUPCState<MachInst> &pc)$/;"	f	namespace:GenericISA
operator <<	./arch/generic/types.hh	/^operator<<(std::ostream & os, const SimplePCState<MachInst> &pc)$/;"	f	namespace:GenericISA
operator <<	./arch/generic/types.hh	/^operator<<(std::ostream & os, const UPCState<MachInst> &pc)$/;"	f	namespace:GenericISA
operator <<	./arch/x86/types.hh	/^        operator << (std::ostream & os, const ExtMachInst & emi)$/;"	f	namespace:X86ISA
operator <<	./base/bigint.cc	/^ostream & operator << (ostream & os, const Twin32_t & t)$/;"	f
operator <<	./base/bigint.cc	/^ostream & operator << (ostream & os, const Twin64_t & t)$/;"	f
operator <<	./base/framebuffer.hh	/^operator<<(std::ostream &os, const Pixel &pxl)$/;"	f
operator <<	./base/inet.cc	/^operator<<(ostream &stream, const EthAddr &ea)$/;"	f	namespace:Net
operator <<	./base/inet.cc	/^operator<<(ostream &stream, const IpAddress &ia)$/;"	f	namespace:Net
operator <<	./base/inet.cc	/^operator<<(ostream &stream, const IpNetmask &in)$/;"	f	namespace:Net
operator <<	./base/inet.cc	/^operator<<(ostream &stream, const IpWithPort &iwp)$/;"	f	namespace:Net
operator <<	./base/stl_helpers.hh	/^operator<<(std::ostream& out, const C<T,A> &vec)$/;"	f	namespace:m5::stl_helpers
operator <<	./base/time.hh	/^operator<<(std::ostream &out, const Time &time)$/;"	f
operator <<	./base/types.cc	/^operator<<(std::ostream &out, const Cycles & cycles)$/;"	f
operator <<	./base/types.hh	/^    constexpr Cycles operator <<(const int32_t shift) const$/;"	f	class:Cycles
operator <<	./cpu/minor/dyn_inst.cc	/^operator <<(std::ostream &os, const InstId &id)$/;"	f	namespace:Minor
operator <<	./cpu/minor/dyn_inst.cc	/^operator <<(std::ostream &os, const MinorDynInst &inst)$/;"	f	namespace:Minor
operator <<	./cpu/minor/execute.cc	/^std::ostream &operator <<(std::ostream &os, Execute::DrainState state)$/;"	f	namespace:Minor
operator <<	./cpu/minor/fetch1.cc	/^operator <<(std::ostream &os, Fetch1::FetchState state)$/;"	f	namespace:Minor
operator <<	./cpu/minor/fetch1.cc	/^operator <<(std::ostream &os, Fetch1::IcacheState state)$/;"	f	namespace:Minor
operator <<	./cpu/minor/lsq.cc	/^operator <<(std::ostream &os, LSQ::AddrRangeCoverage coverage)$/;"	f	namespace:Minor
operator <<	./cpu/minor/lsq.cc	/^operator <<(std::ostream &os, LSQ::LSQRequest::LSQRequestState state)$/;"	f	namespace:Minor
operator <<	./cpu/minor/lsq.cc	/^operator <<(std::ostream &os, LSQ::MemoryState state)$/;"	f	namespace:Minor
operator <<	./cpu/minor/pipe_data.cc	/^operator <<(std::ostream &os, BranchData::Reason reason)$/;"	f	namespace:Minor
operator <<	./cpu/minor/pipe_data.cc	/^operator <<(std::ostream &os, const BranchData &branch)$/;"	f	namespace:Minor
operator <<	./cpu/testers/rubytest/Check.hh	/^operator<<(std::ostream& out, const Check& obj)$/;"	f
operator <<	./cpu/testers/rubytest/CheckTable.hh	/^operator<<(std::ostream& out, const CheckTable& obj)$/;"	f
operator <<	./cpu/testers/rubytest/RubyTester.hh	/^operator<<(std::ostream& out, const RubyTester& obj)$/;"	f
operator <<	./mem/ruby/common/BoolVec.cc	/^std::ostream& operator<<(std::ostream& os, const BoolVec& myvector) {$/;"	f
operator <<	./mem/ruby/common/Consumer.hh	/^operator<<(std::ostream& out, const Consumer& obj)$/;"	f
operator <<	./mem/ruby/common/DataBlock.hh	/^operator<<(std::ostream& out, const DataBlock& obj)$/;"	f
operator <<	./mem/ruby/common/Histogram.hh	/^operator<<(std::ostream& out, const Histogram& obj)$/;"	f
operator <<	./mem/ruby/common/IntVec.cc	/^std::ostream& operator<<(std::ostream& os, const IntVec& myvector) {$/;"	f
operator <<	./mem/ruby/common/MachineID.hh	/^operator<<(std::ostream& out, const MachineID& obj)$/;"	f
operator <<	./mem/ruby/common/NetDest.hh	/^operator<<(std::ostream& out, const NetDest& obj)$/;"	f
operator <<	./mem/ruby/common/Set.hh	/^operator<<(std::ostream& out, const Set& obj)$/;"	f
operator <<	./mem/ruby/common/SubBlock.hh	/^operator<<(std::ostream& out, const SubBlock& obj)$/;"	f
operator <<	./mem/ruby/network/BasicLink.hh	/^operator<<(std::ostream& out, const BasicLink& obj)$/;"	f
operator <<	./mem/ruby/network/BasicRouter.hh	/^operator<<(std::ostream& out, const BasicRouter& obj)$/;"	f
operator <<	./mem/ruby/network/MessageBuffer.hh	/^operator<<(std::ostream& out, const MessageBuffer& obj)$/;"	f
operator <<	./mem/ruby/network/Network.hh	/^operator<<(std::ostream& out, const Network& obj)$/;"	f
operator <<	./mem/ruby/network/Topology.hh	/^operator<<(std::ostream& out, const Topology& obj)$/;"	f
operator <<	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.hh	/^operator<<(std::ostream& out, const GarnetExtLink_d& obj)$/;"	f
operator <<	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.hh	/^operator<<(std::ostream& out, const GarnetIntLink_d& obj)$/;"	f
operator <<	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.hh	/^operator<<(std::ostream& out, const GarnetNetwork_d& obj)$/;"	f
operator <<	./mem/ruby/network/garnet/fixed-pipeline/flitBuffer_d.hh	/^operator<<(std::ostream& out, const flitBuffer_d& obj)$/;"	f
operator <<	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^operator<<(std::ostream& out, const flit_d& obj)$/;"	f
operator <<	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.hh	/^operator<<(std::ostream& out, const GarnetExtLink& obj)$/;"	f
operator <<	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.hh	/^operator<<(std::ostream& out, const GarnetIntLink& obj)$/;"	f
operator <<	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.hh	/^operator<<(std::ostream& out, const GarnetNetwork& obj)$/;"	f
operator <<	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^operator<<(std::ostream& out, const flit& obj)$/;"	f
operator <<	./mem/ruby/network/garnet/flexible-pipeline/flitBuffer.hh	/^operator<<(std::ostream& out, const flitBuffer& obj)$/;"	f
operator <<	./mem/ruby/network/simple/PerfectSwitch.hh	/^operator<<(std::ostream& out, const PerfectSwitch& obj)$/;"	f
operator <<	./mem/ruby/network/simple/SimpleLink.hh	/^operator<<(std::ostream& out, const SimpleExtLink& obj)$/;"	f
operator <<	./mem/ruby/network/simple/SimpleLink.hh	/^operator<<(std::ostream& out, const SimpleIntLink& obj)$/;"	f
operator <<	./mem/ruby/network/simple/SimpleNetwork.hh	/^operator<<(std::ostream& out, const SimpleNetwork& obj)$/;"	f
operator <<	./mem/ruby/network/simple/Switch.hh	/^operator<<(std::ostream& out, const Switch& obj)$/;"	f
operator <<	./mem/ruby/network/simple/Throttle.hh	/^operator<<(std::ostream& out, const Throttle& obj)$/;"	f
operator <<	./mem/ruby/profiler/AccessTraceForAddress.hh	/^operator<<(std::ostream& out, const AccessTraceForAddress& obj)$/;"	f
operator <<	./mem/ruby/profiler/AddressProfiler.hh	/^operator<<(std::ostream& out, const AddressProfiler& obj)$/;"	f
operator <<	./mem/ruby/profiler/MemCntrlProfiler.hh	/^operator<<(std::ostream& out, const MemCntrlProfiler& obj)$/;"	f
operator <<	./mem/ruby/profiler/StoreTrace.hh	/^operator<<(std::ostream& out, const StoreTrace& obj)$/;"	f
operator <<	./mem/ruby/slicc_interface/AbstractCacheEntry.hh	/^operator<<(std::ostream& out, const AbstractCacheEntry& obj)$/;"	f
operator <<	./mem/ruby/slicc_interface/AbstractEntry.hh	/^operator<<(std::ostream& out, const AbstractEntry& obj)$/;"	f
operator <<	./mem/ruby/slicc_interface/Message.hh	/^operator<<(std::ostream& out, const Message& obj)$/;"	f
operator <<	./mem/ruby/slicc_interface/RubyRequest.hh	/^operator<<(std::ostream& out, const RubyRequest& obj)$/;"	f
operator <<	./mem/ruby/structures/CacheMemory.cc	/^operator<<(ostream& out, const CacheMemory& obj)$/;"	f
operator <<	./mem/ruby/structures/DirectoryMemory.hh	/^operator<<(std::ostream& out, const DirectoryMemory& obj)$/;"	f
operator <<	./mem/ruby/structures/MemoryNode.hh	/^operator<<(std::ostream& out, const MemoryNode& obj)$/;"	f
operator <<	./mem/ruby/structures/PerfectCacheMemory.hh	/^operator<<(std::ostream& out, const PerfectCacheLineState<ENTRY>& obj)$/;"	f
operator <<	./mem/ruby/structures/PerfectCacheMemory.hh	/^operator<<(std::ostream& out, const PerfectCacheMemory<ENTRY>& obj)$/;"	f
operator <<	./mem/ruby/structures/PersistentTable.hh	/^operator<<(std::ostream& out, const PersistentTable& obj)$/;"	f
operator <<	./mem/ruby/structures/PersistentTable.hh	/^operator<<(std::ostream& out, const PersistentTableEntry& obj)$/;"	f
operator <<	./mem/ruby/structures/RubyMemoryControl.cc	/^operator<<(ostream& out, const RubyMemoryControl& obj)$/;"	f
operator <<	./mem/ruby/structures/TBETable.hh	/^operator<<(std::ostream& out, const TBETable<ENTRY>& obj)$/;"	f
operator <<	./mem/ruby/structures/TimerTable.hh	/^operator<<(std::ostream& out, const TimerTable& obj)$/;"	f
operator <<	./mem/ruby/structures/WireBuffer.cc	/^operator<<(ostream& out, const WireBuffer& obj)$/;"	f
operator <<	./mem/ruby/system/CacheRecorder.hh	/^operator<<(std::ostream& out, const TraceRecord& obj)$/;"	f
operator <<	./mem/ruby/system/Sequencer.cc	/^operator<<(ostream &out, const std::unordered_map<KEY, VALUE> &map)$/;"	f
operator <<	./mem/ruby/system/Sequencer.hh	/^operator<<(std::ostream& out, const Sequencer& obj)$/;"	f
operator <=	./base/time.hh	/^operator<=(const Time &l, const Time &r)$/;"	f
operator <=	./sim/eventq.hh	/^operator<=(const Event &l, const Event &r)$/;"	f
operator =	./arch/alpha/pagetable.hh	/^    const PageTableEntry &operator=(const PageTableEntry &e)$/;"	f	struct:AlphaISA::PageTableEntry
operator =	./arch/alpha/pagetable.hh	/^    const PageTableEntry &operator=(uint64_t e) { entry = e; return *this; }$/;"	f	struct:AlphaISA::PageTableEntry
operator =	./arch/alpha/pagetable.hh	/^    const VAddr &operator=(Addr a) { addr = a; return *this; }$/;"	f	struct:AlphaISA::VAddr
operator =	./arch/power/pagetable.hh	/^    &operator=(Addr a)$/;"	f	struct:PowerISA::VAddr
operator =	./arch/sparc/pagetable.hh	/^    operator=(const PageTableEntry &e)$/;"	f	class:SparcISA::PageTableEntry
operator =	./arch/sparc/pagetable.hh	/^    operator=(uint64_t e) $/;"	f	class:SparcISA::TteTag
operator =	./arch/sparc/pagetable.hh	/^    operator=(uint64_t e)$/;"	f	class:SparcISA::PageTableEntry
operator =	./base/bigint.hh	/^    inline m5_twin32_t& operator=(const uint32_t x)$/;"	f	struct:m5_twin32_t
operator =	./base/bigint.hh	/^    inline m5_twin64_t& operator=(const uint64_t x)$/;"	f	struct:m5_twin64_t
operator =	./base/bitmap.hh	/^        BmpPixel32 &operator=(const Pixel &rhs) {$/;"	f	struct:Bitmap::BmpPixel32
operator =	./base/bitunion.hh	/^            operator=(Bitfield<first, last> const & other)$/;"	f	class:BitfieldBackend::RegularBitfieldTypes::Bitfield
operator =	./base/bitunion.hh	/^            operator=(SignedBitfield<first, last> const & other)$/;"	f	class:BitfieldBackend::SignedBitfieldTypes::SignedBitfield
operator =	./base/bitunion.hh	/^            operator=(const int64_t _data)$/;"	f	class:BitfieldBackend::SignedBitfieldTypes::SignedBitfield
operator =	./base/bitunion.hh	/^            operator=(const uint64_t _data)$/;"	f	class:BitfieldBackend::RegularBitfieldTypes::Bitfield
operator =	./base/bitunion.hh	/^        operator=(BitUnionOperators const & other)$/;"	f	class:BitfieldBackend::BitUnionOperators
operator =	./base/bitunion.hh	/^        operator=(Type const & _data)$/;"	f	class:BitfieldBackend::BitUnionOperators
operator =	./base/flags.hh	/^    operator=(T flags)$/;"	f	class:Flags
operator =	./base/flags.hh	/^    operator=(const Flags<U> &flags)$/;"	f	class:Flags
operator =	./base/inet.cc	/^EthAddr::operator=(const eth_addr &ea)$/;"	f	class:Net::EthAddr
operator =	./base/inet.cc	/^EthAddr::operator=(const std::string &addr)$/;"	f	class:Net::EthAddr
operator =	./base/inet.hh	/^    const EthPtr &operator=(const EthPacketPtr &ptr) { p = ptr; return *this; }$/;"	f	class:Net::EthPtr
operator =	./base/inet.hh	/^    const Ip6Ptr &operator=(const EthPacketPtr &ptr)$/;"	f	class:Net::Ip6Ptr
operator =	./base/inet.hh	/^    const Ip6Ptr &operator=(const EthPtr &ptr)$/;"	f	class:Net::Ip6Ptr
operator =	./base/inet.hh	/^    const Ip6Ptr &operator=(const Ip6Ptr &ptr)$/;"	f	class:Net::Ip6Ptr
operator =	./base/inet.hh	/^    const IpPtr &operator=(const EthPacketPtr &ptr) { set(ptr); return *this; }$/;"	f	class:Net::IpPtr
operator =	./base/inet.hh	/^    const IpPtr &operator=(const EthPtr &ptr) { set(ptr.p); return *this; }$/;"	f	class:Net::IpPtr
operator =	./base/inet.hh	/^    const IpPtr &operator=(const IpPtr &ptr) { p = ptr.p; return *this; }$/;"	f	class:Net::IpPtr
operator =	./base/inet.hh	/^    const TcpPtr &operator=(const IpPtr &i)$/;"	f	class:Net::TcpPtr
operator =	./base/inet.hh	/^    const TcpPtr &operator=(const TcpPtr &t)$/;"	f	class:Net::TcpPtr
operator =	./base/inet.hh	/^    const UdpPtr &operator=(const IpPtr &i) { set(i); return *this; }$/;"	f	class:Net::UdpPtr
operator =	./base/inet.hh	/^    const UdpPtr &operator=(const UdpPtr &t)$/;"	f	class:Net::UdpPtr
operator =	./base/refcnt.hh	/^    const RefCountingPtr &operator=(T *p) { set(p); return *this; }$/;"	f	class:RefCountingPtr
operator =	./base/refcnt.hh	/^    const RefCountingPtr &operator=(const RefCountingPtr &r)$/;"	f	class:RefCountingPtr
operator =	./base/statistics.cc	/^Formula::operator=(Temp r)$/;"	f	class:Stats::Formula
operator =	./base/statistics.hh	/^    operator=(const DistProxy &sp)$/;"	f	class:Stats::DistProxy
operator =	./base/statistics.hh	/^    operator=(const ScalarProxy &sp)$/;"	f	class:Stats::ScalarProxy
operator =	./base/statistics.hh	/^    operator=(const U &v)$/;"	f	class:Stats::ScalarProxy
operator =	./base/statistics.hh	/^    operator=(const VectorProxy &sp)$/;"	f	class:Stats::VectorProxy
operator =	./base/statistics.hh	/^    void operator=(const DataWrap &) {}$/;"	f	class:Stats::DataWrap
operator =	./base/statistics.hh	/^    void operator=(const DataWrapVec &)$/;"	f	class:Stats::DataWrapVec
operator =	./base/statistics.hh	/^    void operator=(const U &v) { data()->set(v); }$/;"	f	class:Stats::ScalarBase
operator =	./base/time.hh	/^    operator=(const Time &other)$/;"	f	class:Time
operator =	./base/time.hh	/^    operator=(const timespec &ts)$/;"	f	class:Time
operator =	./base/time.hh	/^    operator=(const timeval &tv)$/;"	f	class:Time
operator =	./base/time.hh	/^    operator=(double new_time)$/;"	f	class:Time
operator =	./cpu/minor/pipe_data.cc	/^ForwardInstData::operator =(const ForwardInstData &src)$/;"	f	class:Minor::ForwardInstData
operator =	./cpu/timebuf.hh	/^        const wire &operator=(const wire &i)$/;"	f	class:TimeBuffer::wire
operator =	./cpu/timebuf.hh	/^        const wire &operator=(int idx)$/;"	f	class:TimeBuffer::wire
operator =	./dev/net/i8254xGBe_defs.hh	/^        const Reg<T> &operator=(T d) { _data = d; return *this;}$/;"	f	struct:iGbReg::Regs::Reg
operator =	./dev/pci/copy_engine_defs.hh	/^    const Reg<T> &operator=(T d) { _data = d; return *this;}$/;"	f	struct:CopyEngineReg::Reg
operator =	./mem/ruby/common/DataBlock.cc	/^DataBlock::operator=(const DataBlock & obj)$/;"	f	class:DataBlock
operator =	./mem/ruby/common/Set.hh	/^    Set& operator=(const Set& obj)$/;"	f	class:Set
operator =	./sim/arguments.hh	/^    const Arguments &operator=(const Arguments &args) {$/;"	f	class:Arguments
operator =	./sim/vptr.hh	/^    operator=(Addr p)$/;"	f	class:VPtr
operator =	./sim/vptr.hh	/^    operator=(const VPtr<U> &vp)$/;"	f	class:VPtr
operator ==	./arch/arm/types.hh	/^        operator == (const PCState &opc) const$/;"	f	class:ArmISA::PCState
operator ==	./arch/generic/types.hh	/^    operator == (const DelaySlotPCState<MachInst> &opc) const$/;"	f	class:GenericISA::DelaySlotPCState
operator ==	./arch/generic/types.hh	/^    operator == (const DelaySlotUPCState<MachInst> &opc) const$/;"	f	class:GenericISA::DelaySlotUPCState
operator ==	./arch/generic/types.hh	/^    operator == (const PCStateBase &opc) const$/;"	f	class:GenericISA::PCStateBase
operator ==	./arch/generic/types.hh	/^    operator == (const UPCState<MachInst> &opc) const$/;"	f	class:GenericISA::UPCState
operator ==	./arch/sparc/pagetable.hh	/^    operator==(const TlbRange &r2) const$/;"	f	struct:SparcISA::TlbRange
operator ==	./arch/x86/types.hh	/^        operator == (const ExtMachInst &emi1, const ExtMachInst &emi2)$/;"	f	namespace:X86ISA
operator ==	./base/addr_range.hh	/^    bool operator==(const AddrRange& r) const$/;"	f	class:AddrRange
operator ==	./base/bitunion.hh	/^        operator==(Base const & base) const$/;"	f	class:BitfieldBackend::BitUnionOperators
operator ==	./base/framebuffer.hh	/^operator==(const Pixel &lhs, const Pixel &rhs)$/;"	f
operator ==	./base/inet.cc	/^operator==(const EthAddr &left, const EthAddr &right)$/;"	f	namespace:Net
operator ==	./base/inet.cc	/^operator==(const IpAddress &left, const IpAddress &right)$/;"	f	namespace:Net
operator ==	./base/inet.cc	/^operator==(const IpNetmask &left, const IpNetmask &right)$/;"	f	namespace:Net
operator ==	./base/inet.cc	/^operator==(const IpWithPort &left, const IpWithPort &right)$/;"	f	namespace:Net
operator ==	./base/refcnt.hh	/^inline bool operator==(const RefCountingPtr<T> &l, const RefCountingPtr<T> &r)$/;"	f
operator ==	./base/refcnt.hh	/^inline bool operator==(const RefCountingPtr<T> &l, const T *r)$/;"	f
operator ==	./base/refcnt.hh	/^inline bool operator==(const T *l, const RefCountingPtr<T> &r)$/;"	f
operator ==	./base/time.hh	/^operator==(const Time &l, const Time &r)$/;"	f
operator ==	./cpu/minor/dyn_inst.hh	/^    operator== (const InstId &rhs)$/;"	f	class:Minor::InstId
operator ==	./cpu/pred/bpred_unit.hh	/^        bool operator==(const PredictorHistory &entry) const {$/;"	f	struct:BPredUnit::PredictorHistory
operator ==	./dev/net/i8254xGBe_defs.hh	/^        bool operator==(T d) { return d == _data; }$/;"	f	struct:iGbReg::Regs::Reg
operator ==	./dev/pci/copy_engine_defs.hh	/^    bool operator==(T d) { return d == _data; }$/;"	f	struct:CopyEngineReg::Reg
operator ==	./mem/packet.hh	/^    bool operator==(MemCmd c2) const { return (cmd == c2.cmd); }$/;"	f	class:MemCmd
operator ==	./mem/ruby/common/DataBlock.hh	/^operator==(const DataBlock& obj1,const DataBlock& obj2)$/;"	f
operator ==	./mem/ruby/common/MachineID.hh	/^operator==(const MachineID & obj1, const MachineID & obj2)$/;"	f
operator ==	./sim/eventq.hh	/^operator==(const Event &l, const Event &r)$/;"	f
operator >	./base/time.hh	/^operator>(const Time &l, const Time &r)$/;"	f
operator >	./base/types.hh	/^    constexpr bool operator>(const Cycles& cc) const$/;"	f	class:Cycles
operator >	./mem/ruby/slicc_interface/Message.hh	/^operator>(const MsgPtr &lhs, const MsgPtr &rhs)$/;"	f
operator >	./sim/eventq.hh	/^operator>(const Event &l, const Event &r)$/;"	f
operator >=	./base/time.hh	/^operator>=(const Time &l, const Time &r)$/;"	f
operator >=	./sim/eventq.hh	/^operator>=(const Event &l, const Event &r)$/;"	f
operator >>	./base/types.hh	/^    constexpr Cycles operator >>(const int32_t shift) const$/;"	f	class:Cycles
operator Addr	./arch/alpha/pagetable.hh	/^    operator Addr() const { return addr; }$/;"	f	struct:AlphaISA::VAddr
operator Addr	./arch/power/pagetable.hh	/^    operator Addr() const$/;"	f	struct:PowerISA::VAddr
operator EthHdr *	./base/inet.hh	/^    operator EthHdr *() { return (EthHdr *)p->data; }$/;"	f	class:Net::EthPtr
operator NodePtr&	./base/statistics.hh	/^    operator NodePtr&() { return node; }$/;"	f	class:Stats::Temp
operator T	./sim/arguments.hh	/^    operator T() {$/;"	f	class:Arguments
operator T *	./sim/arguments.hh	/^    operator T *() {$/;"	f	class:Arguments
operator T *	./sim/vptr.hh	/^    operator T *()$/;"	f	class:VPtr
operator T*	./sim/syscall_emul_buf.hh	/^    operator T*() { return (T *)bufPtr; }$/;"	f	class:TypedBufferArg
operator []	./base/statistics.hh	/^    Proxy operator[](off_type index)$/;"	f	class:Stats::VectorDistBase
operator []	./base/statistics.hh	/^    operator[](off_type index)$/;"	f	class:Stats::Vector2dBase
operator []	./base/statistics.hh	/^    operator[](off_type index)$/;"	f	class:Stats::VectorBase
operator []	./base/statistics.hh	/^    operator[](off_type index)$/;"	f	class:Stats::VectorProxy
operator []	./cpu/timebuf.hh	/^    T &operator[](int idx)$/;"	f	class:TimeBuffer
operator []	./cpu/timebuf.hh	/^    const T &operator[] (int idx) const$/;"	f	class:TimeBuffer
operator []	./mem/cache/prefetch/stride.hh	/^        StrideEntry** operator[] (int context) {$/;"	f	class:StridePrefetcher::PCTable
operator []	./mem/ruby/filters/H3BloomFilter.hh	/^    operator[](const int index) const$/;"	f	class:H3BloomFilter
operator []	./mem/ruby/filters/MultiBitSelBloomFilter.hh	/^    operator[](const int index) const$/;"	f	class:MultiBitSelBloomFilter
operator []	./mem/ruby/filters/NonCountingBloomFilter.hh	/^    operator[](const int index) const$/;"	f	class:NonCountingBloomFilter
operator []	./sim/arguments.hh	/^    Arguments operator[](int index) {$/;"	f	class:Arguments
operator []	./sim/syscall_emul_buf.hh	/^    T &operator[](int i) { return ((T *)bufPtr)[i]; }$/;"	f	class:TypedBufferArg
operator bool	./base/debug.hh	/^    operator bool() const { return _tracing; }$/;"	f	class:Debug::SimpleFlag
operator bool	./base/inet.hh	/^    operator bool() const { return (p != nullptr); }$/;"	f	class:Net::EthPtr
operator bool	./base/inet.hh	/^    operator bool() const { return (p != nullptr); }$/;"	f	class:Net::Ip6Ptr
operator bool	./base/inet.hh	/^    operator bool() const { return (p != nullptr); }$/;"	f	class:Net::IpPtr
operator bool	./base/inet.hh	/^    operator bool() const { return (p != nullptr); }$/;"	f	class:Net::TcpPtr
operator bool	./base/inet.hh	/^    operator bool() const { return (p != nullptr); }$/;"	f	class:Net::UdpPtr
operator bool	./base/refcnt.hh	/^    operator bool() const { return data != 0; }$/;"	f	class:RefCountingPtr
operator char *	./sim/arguments.hh	/^    operator char *() {$/;"	f	class:Arguments
operator const EthHdr *	./base/inet.hh	/^    operator const EthHdr *() const { return (const EthHdr *)p->data; }$/;"	f	class:Net::EthPtr
operator const Type	./base/bitunion.hh	/^        operator const Type () const$/;"	f	class:BitfieldBackend::BitUnionOperators
operator const Type	./base/flags.hh	/^    operator const Type() const { return _flags; }$/;"	f	class:Flags
operator double	./base/time.hh	/^    operator double() const$/;"	f	class:Time
operator int64_t	./base/bitunion.hh	/^            operator int64_t () const$/;"	f	class:BitfieldBackend::SignedBitfieldTypes::SignedBitfield
operator timespec	./base/time.hh	/^    operator timespec() const { return _time; }$/;"	f	class:Time
operator timeval	./base/time.hh	/^    operator timeval() const$/;"	f	class:Time
operator uint32_t	./base/bigint.hh	/^    operator uint32_t()$/;"	f	struct:m5_twin32_t
operator uint64_t	./arch/alpha/pagetable.hh	/^    operator uint64_t() const { return entry; }$/;"	f	struct:AlphaISA::PageTableEntry
operator uint64_t	./base/bigint.hh	/^    operator uint64_t()$/;"	f	struct:m5_twin64_t
operator uint64_t	./base/bitunion.hh	/^            operator uint64_t () const$/;"	f	class:BitfieldBackend::RegularBitfieldTypes::Bitfield
operator uint64_t	./base/inet.hh	/^    operator uint64_t() const$/;"	f	struct:Net::EthAddr
operator uint64_t	./base/types.hh	/^    constexpr operator uint64_t() const { return c; }$/;"	f	class:Cycles
ops	./base/cp_annotate.hh	/^    enum ops {$/;"	g	class:CPA
opsCommitted	./cpu/o3/commit.hh	/^    Stats::Vector opsCommitted;$/;"	m	class:DefaultCommit
optNil	./base/loader/coff_sym.h	409;"	d
optParamIn	./sim/serialize.cc	/^optParamIn(CheckpointIn &cp, const string &name, T &param, bool warn)$/;"	f
optParamIn	./sim/serialize.hh	/^bool optParamIn(CheckpointIn &cp, const std::string &name,$/;"	f
option	./python/m5/util/jobfile.py	/^    def option(self, name, desc, **kwargs):$/;"	m	class:Group
optiondict	./python/m5/util/attrdict.py	/^class optiondict(attrdict):$/;"	c
optiondict	./python/m5/util/jobfile.py	/^    def optiondict(self):$/;"	m	class:Data
options	./base/inet.cc	/^IpHdr::options(vector<const IpOpt *> &vec) const$/;"	f	class:Net::IpHdr
options	./base/inet.cc	/^TcpHdr::options(vector<const TcpOpt *> &vec) const$/;"	f	class:Net::TcpHdr
options	./python/m5/util/jobfile.py	/^    def options(self):$/;"	m	class:Group
options	./python/m5/util/jobfile.py	/^    def options(self, groups=None, checkpoint=False):$/;"	m	class:Configuration
or0	./arch/arm/miscregs.hh	/^       Bitfield<17,16> or0;$/;"	m	namespace:ArmISA
or1	./arch/arm/miscregs.hh	/^       Bitfield<19,18> or1;$/;"	m	namespace:ArmISA
or2	./arch/arm/miscregs.hh	/^       Bitfield<21,20> or2;$/;"	m	namespace:ArmISA
or3	./arch/arm/miscregs.hh	/^       Bitfield<23,22> or3;$/;"	m	namespace:ArmISA
or4	./arch/arm/miscregs.hh	/^       Bitfield<25,24> or4;$/;"	m	namespace:ArmISA
or5	./arch/arm/miscregs.hh	/^       Bitfield<27,26> or5;$/;"	m	namespace:ArmISA
or6	./arch/arm/miscregs.hh	/^       Bitfield<29,28> or6;$/;"	m	namespace:ArmISA
or7	./arch/arm/miscregs.hh	/^       Bitfield<31,30> or7;$/;"	m	namespace:ArmISA
order	./mem/cache/base.hh	/^    uint64_t order;$/;"	m	class:BaseCache
order	./mem/cache/mshr.hh	/^        const Counter order;  \/\/!< Global order (for memory consistency mgmt)$/;"	m	class:MSHR::Target
order	./mem/cache/mshr.hh	/^    Counter order;$/;"	m	class:MSHR
orderdict	./python/m5/util/orderdict.py	/^class orderdict(dict, DictMixin):$/;"	c
ordered	./mem/ruby/network/MessageBuffer.py	/^    ordered = Param.Bool(False, "Whether the buffer is ordered")$/;"	v	class:MessageBuffer
orgn0	./arch/arm/miscregs.hh	/^        Bitfield<11, 10> orgn0;$/;"	m	namespace:ArmISA
orgn1	./arch/arm/miscregs.hh	/^        Bitfield<27, 26> orgn1; \/\/ EL1$/;"	m	namespace:ArmISA
orgn1	./arch/arm/miscregs.hh	/^        Bitfield<27, 26> orgn1;$/;"	m	namespace:ArmISA
origAddr	./mem/addr_mapper.hh	/^        Addr origAddr;$/;"	m	class:AddrMapper::AddrMapperSenderState
origPC	./arch/x86/decoder.hh	/^    Addr origPC;$/;"	m	class:X86ISA::Decoder
orig_data	./base/cp_annotate.hh	/^        uint32_t orig_data;$/;"	m	struct:CPA::AnnotateData
originalRanges	./mem/addr_mapper.hh	/^    std::vector<AddrRange> originalRanges;$/;"	m	class:RangeAddrMapper
original_ranges	./mem/AddrMapper.py	/^    original_ranges = VectorParam.AddrRange($/;"	v	class:RangeAddrMapper
os	./arch/x86/regs/misc.hh	/^        Bitfield<17> os; \/\/ Operating-system mode$/;"	m	namespace:X86ISA
os	./mem/packet.hh	/^        std::ostream &os;$/;"	m	class:Packet::PrintReqState
osbin	./base/cp_annotate.hh	/^    std::ostream *osbin;$/;"	m	class:CPA
osc_clcd	./dev/arm/RealView.py	/^    osc_clcd = Osc(device=1, freq="23.75MHz")$/;"	v	class:VExpressMCC
osc_cpu	./dev/arm/RealView.py	/^    osc_cpu = Osc(device=0, freq="60MHz")$/;"	v	class:CoreTile2A15DCC
osc_ddr	./dev/arm/RealView.py	/^    osc_ddr = Osc(device=8, freq="40MHz")$/;"	v	class:CoreTile2A15DCC
osc_hsbm	./dev/arm/RealView.py	/^    osc_hsbm = Osc(device=4, freq="40MHz")$/;"	v	class:CoreTile2A15DCC
osc_mcc	./dev/arm/RealView.py	/^    osc_mcc = Osc(device=0, freq="50MHz")$/;"	v	class:VExpressMCC
osc_peripheral	./dev/arm/RealView.py	/^    osc_peripheral = Osc(device=2, freq="24MHz")$/;"	v	class:VExpressMCC
osc_pxl	./dev/arm/RealView.py	/^    osc_pxl = Osc(device=5, freq="23.75MHz")$/;"	v	class:CoreTile2A15DCC
osc_smb	./dev/arm/RealView.py	/^    osc_smb = Osc(device=6, freq="50MHz")$/;"	v	class:CoreTile2A15DCC
osc_sys	./dev/arm/RealView.py	/^    osc_sys = Osc(device=7, freq="60MHz")$/;"	v	class:CoreTile2A15DCC
osc_system_bus	./dev/arm/RealView.py	/^    osc_system_bus = Osc(device=4, freq="24MHz")$/;"	v	class:VExpressMCC
osf_getsysinfoFunc	./arch/alpha/linux/process.cc	/^osf_getsysinfoFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
osf_setsysinfoFunc	./arch/alpha/linux/process.cc	/^osf_setsysinfoFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
osfxsr	./arch/x86/regs/misc.hh	/^        Bitfield<9> osfxsr; \/\/ Operating System FXSave\/FSRSTOR Support$/;"	m	namespace:X86ISA
osxmmexcpt	./arch/x86/regs/misc.hh	/^        Bitfield<10> osxmmexcpt; \/\/ Operating System Unmasked$/;"	m	namespace:X86ISA
osxsave	./arch/x86/regs/misc.hh	/^        Bitfield<18> osxsave; \/\/ Enable XSAVE and Proc Extended States$/;"	m	namespace:X86ISA
ot	./base/loader/coff_sym.h	/^    unsigned ot: 8;             \/* optimization type *\/$/;"	m	struct:__anon116
otherInfo	./arch/x86/regs/misc.hh	/^        Bitfield<56,32> otherInfo;$/;"	m	namespace:X86ISA
out	./base/stl_helpers.hh	/^    std::ostream &out;$/;"	m	class:m5::stl_helpers::ContainerPrint
out	./cpu/minor/decode.hh	/^    Latch<ForwardInstData>::Input out;$/;"	m	class:Minor::Decode
out	./cpu/minor/execute.hh	/^    Latch<BranchData>::Input out;$/;"	m	class:Minor::Execute
out	./cpu/minor/fetch1.hh	/^    Latch<ForwardLineData>::Input out;$/;"	m	class:Minor::Fetch1
out	./cpu/minor/fetch2.hh	/^    Latch<ForwardInstData>::Input out;$/;"	m	class:Minor::Fetch2
out	./dev/terminal.cc	/^Terminal::out(char c)$/;"	f	class:Terminal
outBuffer	./dev/x86/i8042.hh	/^    std::deque<uint8_t> outBuffer;$/;"	m	class:X86ISA::PS2Device
outNetLink	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    NetworkLink_d *outNetLink;$/;"	m	class:NetworkInterface_d
outNetLink	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	/^    NetworkLink *outNetLink;$/;"	m	class:NetworkInterface
outNode_ptr	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    std::vector<MessageBuffer *> outNode_ptr;$/;"	m	class:NetworkInterface_d
outNode_ptr	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	/^    std::vector<MessageBuffer *> outNode_ptr;$/;"	m	class:NetworkInterface
outOfBytes	./arch/arm/decoder.hh	/^    bool outOfBytes;$/;"	m	class:ArmISA::Decoder
outOfBytes	./arch/x86/decoder.hh	/^    bool outOfBytes;$/;"	m	class:X86ISA::Decoder
outSrcQueue	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.hh	/^    flitBuffer_d *outSrcQueue; \/\/ For modelling link contention$/;"	m	class:NetworkInterface_d
outSrcQueue	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.hh	/^    flitBuffer *outSrcQueue; \/\/ For modelling link contention$/;"	m	class:NetworkInterface
outerAttrs	./arch/arm/pagetable.hh	/^    uint8_t outerAttrs;$/;"	m	struct:ArmISA::TlbEntry
outerShareable	./arch/arm/pagetable.hh	/^    bool outerShareable;$/;"	m	struct:ArmISA::TlbEntry
outfile	./dev/terminal.hh	/^    std::ostream *outfile;$/;"	m	class:Terminal
output	./base/trace.cc	/^output()$/;"	f	namespace:Trace
output	./cpu/minor/buffers.hh	/^    Output output() { return Output(buffer.getWire(-delay)); }$/;"	f	class:Minor::Latch
output	./dev/Terminal.py	/^    output = Param.Bool(True, "Enable output dump to file")$/;"	v	class:Terminal
output	./dev/x86/I8259.py	/^    output = Param.X86IntSourcePin(X86IntSourcePin(),$/;"	v	class:I8259
output	./dev/x86/i8259.hh	/^    IntSourcePin *output;$/;"	m	class:X86ISA::I8259
output	./sim/Process.py	/^    output = Param.String('cout', 'filename for stdout')$/;"	v	class:Process
outputChar	./dev/alpha/access.h	/^    uint64_t    outputChar;             \/\/ 60: Placeholder for output$/;"	m	struct:AlphaAccess
outputChar	./dev/mips/access.h	/^                uint32_t        outputChar;             \/\/ 20: Placeholder for output$/;"	m	struct:MipsAccess
outputFull	./dev/x86/i8042.hh	/^        Bitfield<0> outputFull;$/;"	m	class:X86ISA::I8042
outputHigh	./dev/intel_8254_timer.cc	/^Intel8254Timer::Counter::outputHigh()$/;"	f	class:Intel8254Timer::Counter
outputHigh	./dev/intel_8254_timer.hh	/^    outputHigh(unsigned int num)$/;"	f	class:Intel8254Timer
outputHigh	./dev/x86/i8254.hh	/^    outputHigh(unsigned int num)$/;"	f	class:X86ISA::I8254
outputList	./python/m5/stats/__init__.py	/^outputList = []$/;"	v
outputWidth	./cpu/minor/decode.hh	/^    unsigned int outputWidth;$/;"	m	class:Minor::Decode
outputWidth	./cpu/minor/fetch2.hh	/^    unsigned int outputWidth;$/;"	m	class:Minor::Fetch2
outputWire	./cpu/minor/buffers.hh	/^        typename Buffer::wire outputWire;$/;"	m	class:Minor::Latch::Output
output_high	./dev/intel_8254_timer.hh	/^        bool output_high;$/;"	m	class:Intel8254Timer::Counter
outstanding	./cpu/o3/lsq_unit.hh	/^        uint8_t outstanding;$/;"	m	class:LSQUnit::LSQSenderState
outstanding	./cpu/simple/timing.hh	/^        int outstanding;$/;"	m	class:TimingSimpleCPU::SplitMainSenderState
outstanding	./cpu/translation.hh	/^    int outstanding;$/;"	m	class:WholeTranslationState
outstandingAddrs	./cpu/testers/memtest/memtest.hh	/^    std::set<Addr> outstandingAddrs;$/;"	m	class:MemTest
outstandingCount	./mem/ruby/system/DMASequencer.hh	/^    int outstandingCount() const { return (m_is_busy ? 1 : 0); }$/;"	f	class:DMASequencer
outstandingCount	./mem/ruby/system/RubyPortProxy.hh	/^    int outstandingCount() const { return 0; }$/;"	f	class:RubyPortProxy
outstandingCount	./mem/ruby/system/Sequencer.hh	/^    int outstandingCount() const { return m_outstanding_count; }$/;"	f	class:Sequencer
outstandingMisses	./mem/cache/cache.hh	/^    bool outstandingMisses() const$/;"	f	class:Cache
outstandingReadReqs	./mem/comm_monitor.hh	/^        unsigned int outstandingReadReqs;$/;"	m	struct:CommMonitor::MonitorStats
outstandingReads	./mem/dramsim2.hh	/^    std::unordered_map<Addr, std::queue<PacketPtr> > outstandingReads;$/;"	m	class:DRAMSim2
outstandingReads	./mem/mem_checker.hh	/^        std::map<Serial, Transaction> outstandingReads;$/;"	m	class:MemChecker::ByteTracker
outstandingReadsHist	./mem/comm_monitor.hh	/^        Stats::Histogram outstandingReadsHist;$/;"	m	struct:CommMonitor::MonitorStats
outstandingResponses	./mem/bridge.hh	/^        unsigned int outstandingResponses;$/;"	m	class:Bridge::BridgeSlavePort
outstandingResponses	./mem/serial_link.hh	/^        unsigned int outstandingResponses;$/;"	m	class:SerialLink::SerialLinkSlavePort
outstandingSnoop	./mem/cache/cache.hh	/^    std::unordered_set<RequestPtr> outstandingSnoop;$/;"	m	class:Cache
outstandingSnoop	./mem/coherent_xbar.hh	/^    std::unordered_set<RequestPtr> outstandingSnoop;$/;"	m	class:CoherentXBar
outstandingWriteReqs	./mem/comm_monitor.hh	/^        unsigned int outstandingWriteReqs;$/;"	m	struct:CommMonitor::MonitorStats
outstandingWrites	./mem/dramsim2.hh	/^    std::unordered_map<Addr, std::queue<PacketPtr> > outstandingWrites;$/;"	m	class:DRAMSim2
outstandingWritesHist	./mem/comm_monitor.hh	/^        Stats::Histogram outstandingWritesHist;$/;"	m	struct:CommMonitor::MonitorStats
outstanding_bins	./mem/CommMonitor.py	/^                                          "requests histograms")$/;"	v	class:CommMonitor
ov	./arch/power/miscregs.hh	/^    Bitfield<30> ov;$/;"	m	namespace:PowerISA
ovadvise	./kern/tru64/tru64_syscalls.hh	/^        ovadvise = 72,$/;"	e	enum:SystemCalls::__anon102
over	./arch/x86/regs/misc.hh	/^        Bitfield<62> over; \/\/ Status register overflow$/;"	m	namespace:X86ISA
overallAccesses	./mem/cache/base.hh	/^    Stats::Formula overallAccesses;$/;"	m	class:BaseCache
overallAvgMissLatency	./mem/cache/base.hh	/^    Stats::Formula overallAvgMissLatency;$/;"	m	class:BaseCache
overallAvgMshrMissLatency	./mem/cache/base.hh	/^    Stats::Formula overallAvgMshrMissLatency;$/;"	m	class:BaseCache
overallAvgMshrUncacheableLatency	./mem/cache/base.hh	/^    Stats::Formula overallAvgMshrUncacheableLatency;$/;"	m	class:BaseCache
overallHits	./mem/cache/base.hh	/^    Stats::Formula overallHits;$/;"	m	class:BaseCache
overallMissLatency	./mem/cache/base.hh	/^    Stats::Formula overallMissLatency;$/;"	m	class:BaseCache
overallMissRate	./mem/cache/base.hh	/^    Stats::Formula overallMissRate;$/;"	m	class:BaseCache
overallMisses	./mem/cache/base.hh	/^    Stats::Formula overallMisses;$/;"	m	class:BaseCache
overallMshrHits	./mem/cache/base.hh	/^    Stats::Formula overallMshrHits;$/;"	m	class:BaseCache
overallMshrMissLatency	./mem/cache/base.hh	/^    Stats::Formula overallMshrMissLatency;$/;"	m	class:BaseCache
overallMshrMissRate	./mem/cache/base.hh	/^    Stats::Formula overallMshrMissRate;$/;"	m	class:BaseCache
overallMshrMisses	./mem/cache/base.hh	/^    Stats::Formula overallMshrMisses;$/;"	m	class:BaseCache
overallMshrUncacheable	./mem/cache/base.hh	/^    Stats::Formula overallMshrUncacheable;$/;"	m	class:BaseCache
overallMshrUncacheableLatency	./mem/cache/base.hh	/^    Stats::Formula overallMshrUncacheableLatency;$/;"	m	class:BaseCache
overflow	./base/statistics.hh	/^    Counter overflow;$/;"	m	class:Stats::DistStor
overflow	./base/stats/info.hh	/^    Counter overflow;$/;"	m	struct:Stats::DistData
overflow64	./arch/arm/pmu.hh	/^        bool overflow64;$/;"	m	struct:ArmISA::PMU::CounterState
overlapping	./mem/cache/blk.hh	/^        bool overlapping(const RequestPtr req) const$/;"	f	class:CacheBlk::Lock
override	./arch/alpha/isa.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	class:AlphaISA::ISA
override	./arch/alpha/isa.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	class:AlphaISA::ISA
override	./arch/alpha/kernel_stats.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:AlphaISA::Kernel::Statistics
override	./arch/alpha/kernel_stats.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:AlphaISA::Kernel::Statistics
override	./arch/alpha/pagetable.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	struct:AlphaISA::TlbEntry
override	./arch/alpha/pagetable.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	struct:AlphaISA::TlbEntry
override	./arch/alpha/process.hh	/^                          SyscallReturn return_value) override;$/;"	m	class:AlphaLiveProcess
override	./arch/alpha/process.hh	/^    AlphaISA::IntReg getSyscallArg(ThreadContext *tc, int &i) override;$/;"	m	class:AlphaLiveProcess
override	./arch/alpha/process.hh	/^    void initState() override;$/;"	m	class:AlphaLiveProcess
override	./arch/alpha/process.hh	/^    void loadState(CheckpointIn &cp) override;$/;"	m	class:AlphaLiveProcess
override	./arch/alpha/process.hh	/^    void setSyscallArg(ThreadContext *tc, int i, AlphaISA::IntReg val) override;$/;"	m	class:AlphaLiveProcess
override	./arch/alpha/system.hh	/^    Addr fixFuncEventAddr(Addr addr) override;$/;"	m	class:AlphaSystem
override	./arch/alpha/system.hh	/^    void initState() override;$/;"	m	class:AlphaSystem
override	./arch/alpha/system.hh	/^    void serializeSymtab(CheckpointOut &cp) const override;$/;"	m	class:AlphaSystem
override	./arch/alpha/system.hh	/^    void startup() override;$/;"	m	class:AlphaSystem
override	./arch/alpha/system.hh	/^    void unserializeSymtab(CheckpointIn &cp) override;$/;"	m	class:AlphaSystem
override	./arch/alpha/tlb.hh	/^    void flushAll() override;$/;"	m	class:AlphaISA::TLB
override	./arch/alpha/tlb.hh	/^    void regStats() override;$/;"	m	class:AlphaISA::TLB
override	./arch/alpha/tlb.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:AlphaISA::TLB
override	./arch/alpha/tlb.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:AlphaISA::TLB
override	./arch/arm/isa_device.hh	/^    MiscReg readMiscReg(int misc_reg) override;$/;"	m	class:ArmISA::DummyISADevice
override	./arch/arm/isa_device.hh	/^    void setMiscReg(int misc_reg, MiscReg val) override;$/;"	m	class:ArmISA::DummyISADevice
override	./arch/arm/kvm/armv8_cpu.hh	/^    void dump() const override;$/;"	m	class:ArmV8KvmCPU
override	./arch/arm/kvm/armv8_cpu.hh	/^    void updateKvmState() override;$/;"	m	class:ArmV8KvmCPU
override	./arch/arm/kvm/armv8_cpu.hh	/^    void updateThreadContext() override;$/;"	m	class:ArmV8KvmCPU
override	./arch/arm/kvm/base_cpu.hh	/^    Tick kvmRun(Tick ticks) override;$/;"	m	class:BaseArmKvmCPU
override	./arch/arm/kvm/base_cpu.hh	/^    void startup() override;$/;"	m	class:BaseArmKvmCPU
override	./arch/arm/kvm/gic.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:KvmGic
override	./arch/arm/kvm/gic.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:KvmGic
override	./arch/arm/kvm/gic.hh	/^    void clearInt(uint32_t num) override;$/;"	m	class:KvmGic
override	./arch/arm/kvm/gic.hh	/^    void clearPPInt(uint32_t num, uint32_t cpu) override;$/;"	m	class:KvmGic
override	./arch/arm/kvm/gic.hh	/^    void sendInt(uint32_t num) override;$/;"	m	class:KvmGic
override	./arch/arm/kvm/gic.hh	/^    void sendPPInt(uint32_t num, uint32_t cpu) override;$/;"	m	class:KvmGic
override	./arch/arm/kvm/gic.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:KvmGic
override	./arch/arm/kvm/gic.hh	/^    void unserialize(CheckpointIn &cp)  override;$/;"	m	class:KvmGic
override	./arch/arm/pmu.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	struct:ArmISA::PMU::CounterState
override	./arch/arm/pmu.hh	/^        void unserialize(CheckpointIn &cp)  override;$/;"	m	struct:ArmISA::PMU::CounterState
override	./arch/arm/pmu.hh	/^    MiscReg readMiscReg(int misc_reg) override;$/;"	m	class:ArmISA::PMU
override	./arch/arm/pmu.hh	/^    void drainResume() override;$/;"	m	class:ArmISA::PMU
override	./arch/arm/pmu.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:ArmISA::PMU
override	./arch/arm/pmu.hh	/^    void setMiscReg(int misc_reg, MiscReg val) override;$/;"	m	class:ArmISA::PMU
override	./arch/arm/pmu.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:ArmISA::PMU
override	./arch/arm/table_walker.hh	/^                                  PortID idx = InvalidPortID) override;$/;"	m	class:ArmISA::TableWalker
override	./arch/arm/table_walker.hh	/^    DrainState drain() override;$/;"	m	class:ArmISA::TableWalker
override	./arch/arm/table_walker.hh	/^    void drainResume() override;$/;"	m	class:ArmISA::TableWalker
override	./arch/arm/table_walker.hh	/^    void init() override;$/;"	m	class:ArmISA::TableWalker
override	./arch/arm/table_walker.hh	/^    void regStats() override;$/;"	m	class:ArmISA::TableWalker
override	./arch/arm/tlb.hh	/^    BaseMasterPort* getMasterPort() override;$/;"	m	class:ArmISA::TLB
override	./arch/arm/tlb.hh	/^    void drainResume() override;$/;"	m	class:ArmISA::TLB
override	./arch/arm/tlb.hh	/^    void init() override;$/;"	m	class:ArmISA::TLB
override	./arch/arm/tlb.hh	/^    void regProbePoints() override;$/;"	m	class:ArmISA::TLB
override	./arch/arm/tlb.hh	/^    void regStats() override;$/;"	m	class:ArmISA::TLB
override	./arch/arm/tlb.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:ArmISA::TLB
override	./arch/arm/tlb.hh	/^    void takeOverFrom(BaseTLB *otlb) override;$/;"	m	class:ArmISA::TLB
override	./arch/arm/tlb.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:ArmISA::TLB
override	./arch/generic/tlb.hh	/^    void demapPage(Addr vaddr, uint64_t asn) override;$/;"	m	class:GenericTLB
override	./arch/mips/tlb.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:MipsISA::TLB
override	./arch/mips/tlb.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:MipsISA::TLB
override	./arch/power/tlb.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:PowerISA::TLB
override	./arch/power/tlb.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:PowerISA::TLB
override	./arch/sparc/isa.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:SparcISA::ISA
override	./arch/sparc/isa.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:SparcISA::ISA
override	./arch/sparc/system.hh	/^    void serializeSymtab(CheckpointOut &cp) const override;$/;"	m	class:SparcSystem
override	./arch/sparc/system.hh	/^    void unserializeSymtab(CheckpointIn &cp) override;$/;"	m	class:SparcSystem
override	./arch/sparc/tlb.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:SparcISA::TLB
override	./arch/sparc/tlb.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:SparcISA::TLB
override	./arch/x86/interrupts.hh	/^    AddrRangeList getIntAddrRange() const override;$/;"	m	class:X86ISA::Interrupts
override	./arch/x86/interrupts.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:X86ISA::Interrupts
override	./arch/x86/interrupts.hh	/^    Tick recvMessage(PacketPtr pkt) override;$/;"	m	class:X86ISA::Interrupts
override	./arch/x86/interrupts.hh	/^    Tick recvResponse(PacketPtr pkt) override;$/;"	m	class:X86ISA::Interrupts
override	./arch/x86/interrupts.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:X86ISA::Interrupts
override	./arch/x86/interrupts.hh	/^    void init() override;$/;"	m	class:X86ISA::Interrupts
override	./arch/x86/interrupts.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:X86ISA::Interrupts
override	./arch/x86/interrupts.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:X86ISA::Interrupts
override	./arch/x86/isa.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	class:X86ISA::ISA
override	./arch/x86/isa.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	class:X86ISA::ISA
override	./arch/x86/pagetable.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	struct:X86ISA::TlbEntry
override	./arch/x86/pagetable.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	struct:X86ISA::TlbEntry
override	./arch/x86/tlb.hh	/^        BaseMasterPort *getMasterPort() override;$/;"	m	class:X86ISA::TLB
override	./arch/x86/tlb.hh	/^        void demapPage(Addr va, uint64_t asn) override;$/;"	m	class:X86ISA::TLB
override	./arch/x86/tlb.hh	/^        void flushAll() override;$/;"	m	class:X86ISA::TLB
override	./arch/x86/tlb.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	class:X86ISA::TLB
override	./arch/x86/tlb.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	class:X86ISA::TLB
override	./base/cp_annotate.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	struct:CPA::AnnotateData
override	./base/cp_annotate.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	struct:CPA::AnnotateData
override	./base/cp_annotate.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:CPA
override	./base/cp_annotate.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:CPA
override	./base/framebuffer.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:FrameBuffer
override	./base/framebuffer.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:FrameBuffer
override	./base/pollevent.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:PollEvent
override	./base/pollevent.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:PollEvent
override	./base/random.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Random
override	./base/random.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Random
override	./base/trace.hh	/^                    const std::string &message) override;$/;"	m	class:Trace::OstreamLogger
override	./base/vnc/vncserver.hh	/^    void frameBufferResized() override;$/;"	m	class:VncServer
override	./base/vnc/vncserver.hh	/^    void setDirty() override;$/;"	m	class:VncServer
override	./cpu/base.hh	/^                                  PortID idx = InvalidPortID) override;$/;"	m	class:BaseCPU
override	./cpu/base.hh	/^    void init() override;$/;"	m	class:BaseCPU
override	./cpu/base.hh	/^    void regProbePoints() override;$/;"	m	class:BaseCPU
override	./cpu/base.hh	/^    void regStats() override;$/;"	m	class:BaseCPU
override	./cpu/base.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:BaseCPU
override	./cpu/base.hh	/^    void startup() override;$/;"	m	class:BaseCPU
override	./cpu/base.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:BaseCPU
override	./cpu/checker/cpu.hh	/^                   Addr addr, unsigned flags, uint64_t *res) override;$/;"	m	class:CheckerCPU
override	./cpu/checker/cpu.hh	/^                  unsigned flags) override;$/;"	m	class:CheckerCPU
override	./cpu/checker/cpu.hh	/^    void init() override;$/;"	m	class:CheckerCPU
override	./cpu/checker/cpu.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:CheckerCPU
override	./cpu/checker/cpu.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:CheckerCPU
override	./cpu/inst_pb_trace.hh	/^                                    StaticInstPtr mi = NULL) override;$/;"	m	class:Trace::InstPBTrace
override	./cpu/inst_pb_trace.hh	/^    void dump() override;$/;"	m	class:Trace::InstPBTraceRecord
override	./cpu/kvm/base.hh	/^    DrainState drain() override;$/;"	m	class:BaseKvmCPU
override	./cpu/kvm/base.hh	/^    void drainResume() override;$/;"	m	class:BaseKvmCPU
override	./cpu/kvm/base.hh	/^    void serializeThread(CheckpointOut &cp, ThreadID tid) const override;$/;"	m	class:BaseKvmCPU
override	./cpu/kvm/base.hh	/^    void unserializeThread(CheckpointIn &cp, ThreadID tid) override;$/;"	m	class:BaseKvmCPU
override	./cpu/kvm/base.hh	/^    void wakeup(ThreadID tid = 0) override;$/;"	m	class:BaseKvmCPU
override	./cpu/kvm/x86_cpu.hh	/^    void dump() const override;$/;"	m	class:X86KvmCPU
override	./cpu/minor/cpu.hh	/^    Counter totalInsts() const override;$/;"	m	class:MinorCPU
override	./cpu/minor/cpu.hh	/^    Counter totalOps() const override;$/;"	m	class:MinorCPU
override	./cpu/minor/cpu.hh	/^    DrainState drain() override;$/;"	m	class:MinorCPU
override	./cpu/minor/cpu.hh	/^    MasterPort &getDataPort() override;$/;"	m	class:MinorCPU
override	./cpu/minor/cpu.hh	/^    MasterPort &getInstPort() override;$/;"	m	class:MinorCPU
override	./cpu/minor/cpu.hh	/^    void activateContext(ThreadID thread_id) override;$/;"	m	class:MinorCPU
override	./cpu/minor/cpu.hh	/^    void drainResume() override;$/;"	m	class:MinorCPU
override	./cpu/minor/cpu.hh	/^    void init() override;$/;"	m	class:MinorCPU
override	./cpu/minor/cpu.hh	/^    void memWriteback() override;$/;"	m	class:MinorCPU
override	./cpu/minor/cpu.hh	/^    void regStats() override;$/;"	m	class:MinorCPU
override	./cpu/minor/cpu.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:MinorCPU
override	./cpu/minor/cpu.hh	/^    void serializeThread(CheckpointOut &cp, ThreadID tid) const override;$/;"	m	class:MinorCPU
override	./cpu/minor/cpu.hh	/^    void startup() override;$/;"	m	class:MinorCPU
override	./cpu/minor/cpu.hh	/^    void suspendContext(ThreadID thread_id) override;$/;"	m	class:MinorCPU
override	./cpu/minor/cpu.hh	/^    void switchOut() override;$/;"	m	class:MinorCPU
override	./cpu/minor/cpu.hh	/^    void takeOverFrom(BaseCPU *old_cpu) override;$/;"	m	class:MinorCPU
override	./cpu/minor/cpu.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:MinorCPU
override	./cpu/minor/cpu.hh	/^    void unserializeThread(CheckpointIn &cp, ThreadID tid) override;$/;"	m	class:MinorCPU
override	./cpu/minor/cpu.hh	/^    void wakeup(ThreadID tid) override;$/;"	m	class:MinorCPU
override	./cpu/minor/pipeline.hh	/^    void evaluate() override;$/;"	m	class:Minor::Pipeline
override	./cpu/o3/cpu.hh	/^    Counter totalInsts() const override;$/;"	m	class:FullO3CPU
override	./cpu/o3/cpu.hh	/^    Counter totalOps() const override;$/;"	m	class:FullO3CPU
override	./cpu/o3/cpu.hh	/^    DrainState drain() override;$/;"	m	class:FullO3CPU
override	./cpu/o3/cpu.hh	/^    virtual void wakeup(ThreadID tid) override;$/;"	m	class:FullO3CPU
override	./cpu/o3/cpu.hh	/^    void activateContext(ThreadID tid) override;$/;"	m	class:FullO3CPU
override	./cpu/o3/cpu.hh	/^    void drainResume() override;$/;"	m	class:FullO3CPU
override	./cpu/o3/cpu.hh	/^    void haltContext(ThreadID tid) override;$/;"	m	class:FullO3CPU
override	./cpu/o3/cpu.hh	/^    void init() override;$/;"	m	class:FullO3CPU
override	./cpu/o3/cpu.hh	/^    void regProbePoints() override;$/;"	m	class:FullO3CPU
override	./cpu/o3/cpu.hh	/^    void regStats() override;$/;"	m	class:FullO3CPU
override	./cpu/o3/cpu.hh	/^    void serializeThread(CheckpointOut &cp, ThreadID tid) const override;$/;"	m	class:FullO3CPU
override	./cpu/o3/cpu.hh	/^    void startup() override;$/;"	m	class:FullO3CPU
override	./cpu/o3/cpu.hh	/^    void suspendContext(ThreadID tid) override;$/;"	m	class:FullO3CPU
override	./cpu/o3/cpu.hh	/^    void switchOut() override;$/;"	m	class:FullO3CPU
override	./cpu/o3/cpu.hh	/^    void takeOverFrom(BaseCPU *oldCPU) override;$/;"	m	class:FullO3CPU
override	./cpu/o3/cpu.hh	/^    void unserializeThread(CheckpointIn &cp, ThreadID tid) override;$/;"	m	class:FullO3CPU
override	./cpu/o3/cpu.hh	/^    void verifyMemoryMode() const override;$/;"	m	class:FullO3CPU
override	./cpu/pred/bpred_unit.hh	/^    void regProbePoints() override;$/;"	m	class:BPredUnit
override	./cpu/pred/bpred_unit.hh	/^    void regStats() override;$/;"	m	class:BPredUnit
override	./cpu/simple/atomic.hh	/^                   Addr addr, unsigned flags, uint64_t *res) override;$/;"	m	class:AtomicSimpleCPU
override	./cpu/simple/atomic.hh	/^                  unsigned flags) override;$/;"	m	class:AtomicSimpleCPU
override	./cpu/simple/atomic.hh	/^    DrainState drain() override;$/;"	m	class:AtomicSimpleCPU
override	./cpu/simple/atomic.hh	/^    void activateContext(ThreadID thread_num) override;$/;"	m	class:AtomicSimpleCPU
override	./cpu/simple/atomic.hh	/^    void drainResume() override;$/;"	m	class:AtomicSimpleCPU
override	./cpu/simple/atomic.hh	/^    void init() override;$/;"	m	class:AtomicSimpleCPU
override	./cpu/simple/atomic.hh	/^    void regProbePoints() override;$/;"	m	class:AtomicSimpleCPU
override	./cpu/simple/atomic.hh	/^    void suspendContext(ThreadID thread_num) override;$/;"	m	class:AtomicSimpleCPU
override	./cpu/simple/atomic.hh	/^    void switchOut() override;$/;"	m	class:AtomicSimpleCPU
override	./cpu/simple/atomic.hh	/^    void takeOverFrom(BaseCPU *oldCPU) override;$/;"	m	class:AtomicSimpleCPU
override	./cpu/simple/atomic.hh	/^    void verifyMemoryMode() const override;$/;"	m	class:AtomicSimpleCPU
override	./cpu/simple/base.hh	/^    Counter totalInsts() const override;$/;"	m	class:BaseSimpleCPU
override	./cpu/simple/base.hh	/^    Counter totalOps() const override;$/;"	m	class:BaseSimpleCPU
override	./cpu/simple/base.hh	/^    void haltContext(ThreadID thread_num) override;$/;"	m	class:BaseSimpleCPU
override	./cpu/simple/base.hh	/^    void init() override;$/;"	m	class:BaseSimpleCPU
override	./cpu/simple/base.hh	/^    void regStats() override;$/;"	m	class:BaseSimpleCPU
override	./cpu/simple/base.hh	/^    void resetStats() override;$/;"	m	class:BaseSimpleCPU
override	./cpu/simple/base.hh	/^    void serializeThread(CheckpointOut &cp, ThreadID tid) const override;$/;"	m	class:BaseSimpleCPU
override	./cpu/simple/base.hh	/^    void startup() override;$/;"	m	class:BaseSimpleCPU
override	./cpu/simple/base.hh	/^    void unserializeThread(CheckpointIn &cp, ThreadID tid) override;$/;"	m	class:BaseSimpleCPU
override	./cpu/simple/base.hh	/^    void wakeup(ThreadID tid) override;$/;"	m	class:BaseSimpleCPU
override	./cpu/simple/timing.hh	/^                   Addr addr, unsigned flags, uint64_t *res) override;$/;"	m	class:TimingSimpleCPU
override	./cpu/simple/timing.hh	/^                  unsigned flags) override;$/;"	m	class:TimingSimpleCPU
override	./cpu/simple/timing.hh	/^    DrainState drain() override;$/;"	m	class:TimingSimpleCPU
override	./cpu/simple/timing.hh	/^    void activateContext(ThreadID thread_num) override;$/;"	m	class:TimingSimpleCPU
override	./cpu/simple/timing.hh	/^    void drainResume() override;$/;"	m	class:TimingSimpleCPU
override	./cpu/simple/timing.hh	/^    void init() override;$/;"	m	class:TimingSimpleCPU
override	./cpu/simple/timing.hh	/^    void suspendContext(ThreadID thread_num) override;$/;"	m	class:TimingSimpleCPU
override	./cpu/simple/timing.hh	/^    void switchOut() override;$/;"	m	class:TimingSimpleCPU
override	./cpu/simple/timing.hh	/^    void takeOverFrom(BaseCPU *oldCPU) override;$/;"	m	class:TimingSimpleCPU
override	./cpu/simple/timing.hh	/^    void verifyMemoryMode() const override;$/;"	m	class:TimingSimpleCPU
override	./cpu/simple_thread.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:SimpleThread
override	./cpu/simple_thread.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:SimpleThread
override	./cpu/testers/traffic_gen/traffic_gen.hh	/^                                  PortID idx = InvalidPortID) override;$/;"	m	class:TrafficGen
override	./cpu/testers/traffic_gen/traffic_gen.hh	/^    DrainState drain() override;$/;"	m	class:TrafficGen
override	./cpu/testers/traffic_gen/traffic_gen.hh	/^    void init() override;$/;"	m	class:TrafficGen
override	./cpu/testers/traffic_gen/traffic_gen.hh	/^    void initState() override;$/;"	m	class:TrafficGen
override	./cpu/testers/traffic_gen/traffic_gen.hh	/^    void regStats() override;$/;"	m	class:TrafficGen
override	./cpu/testers/traffic_gen/traffic_gen.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:TrafficGen
override	./cpu/testers/traffic_gen/traffic_gen.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:TrafficGen
override	./cpu/thread_state.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	struct:ThreadState
override	./cpu/thread_state.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	struct:ThreadState
override	./dev/alpha/backdoor.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	struct:AlphaBackdoor::Access
override	./dev/alpha/backdoor.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	struct:AlphaBackdoor::Access
override	./dev/alpha/backdoor.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:AlphaBackdoor
override	./dev/alpha/backdoor.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:AlphaBackdoor
override	./dev/alpha/backdoor.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:AlphaBackdoor
override	./dev/alpha/backdoor.hh	/^    void startup() override;$/;"	m	class:AlphaBackdoor
override	./dev/alpha/backdoor.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:AlphaBackdoor
override	./dev/alpha/tsunami.hh	/^    void clearConsoleInt() override;$/;"	m	class:Tsunami
override	./dev/alpha/tsunami.hh	/^    void clearPciInt(int line) override;$/;"	m	class:Tsunami
override	./dev/alpha/tsunami.hh	/^    void init() override;$/;"	m	class:Tsunami
override	./dev/alpha/tsunami.hh	/^    void postConsoleInt() override;$/;"	m	class:Tsunami
override	./dev/alpha/tsunami.hh	/^    void postPciInt(int line) override;$/;"	m	class:Tsunami
override	./dev/alpha/tsunami.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Tsunami
override	./dev/alpha/tsunami.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Tsunami
override	./dev/alpha/tsunami_cchip.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:TsunamiCChip
override	./dev/alpha/tsunami_cchip.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:TsunamiCChip
override	./dev/alpha/tsunami_cchip.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:TsunamiCChip
override	./dev/alpha/tsunami_cchip.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:TsunamiCChip
override	./dev/alpha/tsunami_io.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:TsunamiIO
override	./dev/alpha/tsunami_io.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:TsunamiIO
override	./dev/alpha/tsunami_io.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:TsunamiIO
override	./dev/alpha/tsunami_io.hh	/^    void startup() override;$/;"	m	class:TsunamiIO
override	./dev/alpha/tsunami_io.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:TsunamiIO
override	./dev/alpha/tsunami_pchip.hh	/^    Addr dmaAddr(const PciBusAddr &addr, Addr pci_addr) const override;$/;"	m	class:TsunamiPChip
override	./dev/alpha/tsunami_pchip.hh	/^    AddrRangeList getAddrRanges() const override;$/;"	m	class:TsunamiPChip
override	./dev/alpha/tsunami_pchip.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:TsunamiPChip
override	./dev/alpha/tsunami_pchip.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:TsunamiPChip
override	./dev/alpha/tsunami_pchip.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:TsunamiPChip
override	./dev/alpha/tsunami_pchip.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:TsunamiPChip
override	./dev/arm/energy_ctrl.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:EnergyCtrl
override	./dev/arm/energy_ctrl.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:EnergyCtrl
override	./dev/arm/energy_ctrl.hh	/^    void init() override;$/;"	m	class:EnergyCtrl
override	./dev/arm/energy_ctrl.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:EnergyCtrl
override	./dev/arm/energy_ctrl.hh	/^    void startup() override;$/;"	m	class:EnergyCtrl
override	./dev/arm/energy_ctrl.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:EnergyCtrl
override	./dev/arm/flash_device.hh	/^    DrainState drain() override;$/;"	m	class:FlashDevice
override	./dev/arm/flash_device.hh	/^    void regStats() override;$/;"	m	class:FlashDevice
override	./dev/arm/flash_device.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:FlashDevice
override	./dev/arm/flash_device.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:FlashDevice
override	./dev/arm/generic_timer.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:GenericTimerMem
override	./dev/arm/generic_timer.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:GenericTimerMem
override	./dev/arm/generic_timer.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:ArchTimer
override	./dev/arm/generic_timer.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:GenericTimer
override	./dev/arm/generic_timer.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:GenericTimerMem
override	./dev/arm/generic_timer.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:SystemCounter
override	./dev/arm/generic_timer.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:ArchTimer
override	./dev/arm/generic_timer.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:GenericTimer
override	./dev/arm/generic_timer.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:GenericTimerMem
override	./dev/arm/generic_timer.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:SystemCounter
override	./dev/arm/gic_pl390.hh	/^    AddrRangeList getAddrRanges() const override;$/;"	m	class:Pl390
override	./dev/arm/gic_pl390.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:Pl390
override	./dev/arm/gic_pl390.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:Pl390
override	./dev/arm/gic_pl390.hh	/^    void clearInt(uint32_t number) override;$/;"	m	class:Pl390
override	./dev/arm/gic_pl390.hh	/^    void clearPPInt(uint32_t num, uint32_t cpu) override;$/;"	m	class:Pl390
override	./dev/arm/gic_pl390.hh	/^    void sendInt(uint32_t number) override;$/;"	m	class:Pl390
override	./dev/arm/gic_pl390.hh	/^    void sendPPInt(uint32_t num, uint32_t cpu) override;$/;"	m	class:Pl390
override	./dev/arm/gic_pl390.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Pl390
override	./dev/arm/gic_pl390.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Pl390
override	./dev/arm/gpu_nomali.hh	/^    AddrRangeList getAddrRanges() const override;$/;"	m	class:NoMaliGpu
override	./dev/arm/gpu_nomali.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:NoMaliGpu
override	./dev/arm/gpu_nomali.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:NoMaliGpu
override	./dev/arm/gpu_nomali.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:NoMaliGpu
override	./dev/arm/gpu_nomali.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:NoMaliGpu
override	./dev/arm/hdlcd.hh	/^        void onEndOfBlock() override;$/;"	m	class:HDLcd::DmaEngine
override	./dev/arm/hdlcd.hh	/^        void onIdle() override;$/;"	m	class:HDLcd::DmaEngine
override	./dev/arm/hdlcd.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	class:HDLcd::DmaEngine
override	./dev/arm/hdlcd.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	class:HDLcd::DmaEngine
override	./dev/arm/hdlcd.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:HDLcd
override	./dev/arm/hdlcd.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:HDLcd
override	./dev/arm/hdlcd.hh	/^    void drainResume() override;$/;"	m	class:HDLcd
override	./dev/arm/hdlcd.hh	/^    void regStats() override;$/;"	m	class:HDLcd
override	./dev/arm/hdlcd.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:HDLcd
override	./dev/arm/hdlcd.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:HDLcd
override	./dev/arm/kmi.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:Pl050
override	./dev/arm/kmi.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:Pl050
override	./dev/arm/kmi.hh	/^    void keyPress(uint32_t key, bool down) override;$/;"	m	class:Pl050
override	./dev/arm/kmi.hh	/^    void mouseAt(uint16_t x, uint16_t y, uint8_t buttons) override;$/;"	m	class:Pl050
override	./dev/arm/kmi.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Pl050
override	./dev/arm/kmi.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Pl050
override	./dev/arm/pl011.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:Pl011
override	./dev/arm/pl011.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:Pl011
override	./dev/arm/pl011.hh	/^    void dataAvailable() override;$/;"	m	class:Pl011
override	./dev/arm/pl011.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Pl011
override	./dev/arm/pl011.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Pl011
override	./dev/arm/pl111.hh	/^    AddrRangeList getAddrRanges() const override;$/;"	m	class:Pl111
override	./dev/arm/pl111.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:Pl111
override	./dev/arm/pl111.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:Pl111
override	./dev/arm/pl111.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Pl111
override	./dev/arm/pl111.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Pl111
override	./dev/arm/realview.hh	/^    void clearConsoleInt() override;$/;"	m	class:RealView
override	./dev/arm/realview.hh	/^    void clearPciInt(int line) override;$/;"	m	class:RealView
override	./dev/arm/realview.hh	/^    void postConsoleInt() override;$/;"	m	class:RealView
override	./dev/arm/realview.hh	/^    void postPciInt(int line) override;$/;"	m	class:RealView
override	./dev/arm/rtc_pl031.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:PL031
override	./dev/arm/rtc_pl031.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:PL031
override	./dev/arm/rtc_pl031.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:PL031
override	./dev/arm/rtc_pl031.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:PL031
override	./dev/arm/rv_ctrl.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:RealViewCtrl
override	./dev/arm/rv_ctrl.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:RealViewCtrl
override	./dev/arm/rv_ctrl.hh	/^    uint32_t read() const override;$/;"	m	class:RealViewOsc
override	./dev/arm/rv_ctrl.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:RealViewCtrl
override	./dev/arm/rv_ctrl.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:RealViewOsc
override	./dev/arm/rv_ctrl.hh	/^    void startup() override;$/;"	m	class:RealViewOsc
override	./dev/arm/rv_ctrl.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:RealViewCtrl
override	./dev/arm/rv_ctrl.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:RealViewOsc
override	./dev/arm/rv_ctrl.hh	/^    void write(uint32_t freq) override;$/;"	m	class:RealViewOsc
override	./dev/arm/timer_cpulocal.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	class:CpuLocalTimer::Timer
override	./dev/arm/timer_cpulocal.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	class:CpuLocalTimer::Timer
override	./dev/arm/timer_cpulocal.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:CpuLocalTimer
override	./dev/arm/timer_cpulocal.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:CpuLocalTimer
override	./dev/arm/timer_cpulocal.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:CpuLocalTimer
override	./dev/arm/timer_cpulocal.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:CpuLocalTimer
override	./dev/arm/timer_sp804.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	class:Sp804::Timer
override	./dev/arm/timer_sp804.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	class:Sp804::Timer
override	./dev/arm/timer_sp804.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:Sp804
override	./dev/arm/timer_sp804.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:Sp804
override	./dev/arm/timer_sp804.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Sp804
override	./dev/arm/timer_sp804.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Sp804
override	./dev/arm/ufs_device.hh	/^    AddrRangeList getAddrRanges() const override;$/;"	m	class:UFSHostDevice
override	./dev/arm/ufs_device.hh	/^    DrainState drain() override;$/;"	m	class:UFSHostDevice
override	./dev/arm/ufs_device.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:UFSHostDevice
override	./dev/arm/ufs_device.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:UFSHostDevice
override	./dev/arm/ufs_device.hh	/^    void regStats() override;$/;"	m	class:UFSHostDevice
override	./dev/arm/ufs_device.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:UFSHostDevice
override	./dev/arm/ufs_device.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:UFSHostDevice
override	./dev/arm/vgic.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	struct:VGic::vcpuIntData
override	./dev/arm/vgic.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	struct:VGic::vcpuIntData
override	./dev/arm/vgic.hh	/^    AddrRangeList getAddrRanges() const override;$/;"	m	class:VGic
override	./dev/arm/vgic.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:VGic
override	./dev/arm/vgic.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:VGic
override	./dev/arm/vgic.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:VGic
override	./dev/arm/vgic.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:VGic
override	./dev/dma_device.hh	/^                                  PortID idx = InvalidPortID) override;$/;"	m	class:DmaDevice
override	./dev/dma_device.hh	/^    DrainState drain() override;$/;"	m	class:DmaPort
override	./dev/dma_device.hh	/^    DrainState drain() override;$/;"	m	class:DmaReadFifo
override	./dev/dma_device.hh	/^    bool recvTimingResp(PacketPtr pkt) override;$/;"	m	class:DmaPort
override	./dev/dma_device.hh	/^    void init() override;$/;"	m	class:DmaDevice
override	./dev/dma_device.hh	/^    void recvReqRetry() override;$/;"	m	class:DmaPort
override	./dev/dma_device.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:DmaReadFifo
override	./dev/dma_device.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:DmaReadFifo
override	./dev/i2c/bus.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:I2CBus
override	./dev/i2c/bus.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:I2CBus
override	./dev/i2c/bus.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:I2CBus
override	./dev/i2c/bus.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:I2CBus
override	./dev/mips/malta.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Malta
override	./dev/mips/malta.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Malta
override	./dev/mips/malta_cchip.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:MaltaCChip
override	./dev/mips/malta_cchip.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:MaltaCChip
override	./dev/mips/malta_io.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:MaltaIO
override	./dev/mips/malta_io.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:MaltaIO
override	./dev/net/dist_etherlink.hh	/^                                 int idx) override;$/;"	m	class:DistEtherLink
override	./dev/net/dist_etherlink.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	class:DistEtherLink::Link
override	./dev/net/dist_etherlink.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	class:DistEtherLink::Link
override	./dev/net/dist_etherlink.hh	/^    virtual void init() override;$/;"	m	class:DistEtherLink
override	./dev/net/dist_etherlink.hh	/^    virtual void startup() override;$/;"	m	class:DistEtherLink
override	./dev/net/dist_etherlink.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:DistEtherLink
override	./dev/net/dist_etherlink.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:DistEtherLink
override	./dev/net/dist_iface.hh	/^                      ReqType do_exit) override;$/;"	m	class:DistIface::SyncNode
override	./dev/net/dist_iface.hh	/^                      ReqType do_exit) override;$/;"	m	class:DistIface::SyncSwitch
override	./dev/net/dist_iface.hh	/^            void serialize(CheckpointOut &cp) const override;$/;"	m	struct:DistIface::RecvScheduler::Desc
override	./dev/net/dist_iface.hh	/^            void unserialize(CheckpointIn &cp) override;$/;"	m	struct:DistIface::RecvScheduler::Desc
override	./dev/net/dist_iface.hh	/^        virtual void serialize(CheckpointOut &cp) const override = 0;$/;"	m	class:DistIface::Sync
override	./dev/net/dist_iface.hh	/^        virtual void unserialize(CheckpointIn &cp) override = 0;$/;"	m	class:DistIface::Sync
override	./dev/net/dist_iface.hh	/^        void process() override;$/;"	m	class:DistIface::SyncEvent
override	./dev/net/dist_iface.hh	/^        void requestCkpt(ReqType req) override;$/;"	m	class:DistIface::SyncNode
override	./dev/net/dist_iface.hh	/^        void requestExit(ReqType req) override;$/;"	m	class:DistIface::SyncNode
override	./dev/net/dist_iface.hh	/^        void run(bool same_tick) override;$/;"	m	class:DistIface::SyncNode
override	./dev/net/dist_iface.hh	/^        void run(bool same_tick) override;$/;"	m	class:DistIface::SyncSwitch
override	./dev/net/dist_iface.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	class:DistIface::RecvScheduler
override	./dev/net/dist_iface.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	class:DistIface::SyncNode
override	./dev/net/dist_iface.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	class:DistIface::SyncSwitch
override	./dev/net/dist_iface.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	class:DistIface::RecvScheduler
override	./dev/net/dist_iface.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	class:DistIface::SyncNode
override	./dev/net/dist_iface.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	class:DistIface::SyncSwitch
override	./dev/net/dist_iface.hh	/^    DrainState drain() override;$/;"	m	class:DistIface
override	./dev/net/dist_iface.hh	/^    void drainResume() override;$/;"	m	class:DistIface
override	./dev/net/dist_iface.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:DistIface
override	./dev/net/dist_iface.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:DistIface
override	./dev/net/etherlink.hh	/^    EtherInt *getEthPort(const std::string &if_name, int idx) override;$/;"	m	class:EtherLink
override	./dev/net/etherlink.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:EtherLink
override	./dev/net/etherlink.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:EtherLink
override	./dev/net/ethertap.hh	/^    EtherInt *getEthPort(const std::string &if_name, int idx) override;$/;"	m	class:EtherTap
override	./dev/net/ethertap.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:EtherTap
override	./dev/net/ethertap.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:EtherTap
override	./dev/net/i8254xGBe.hh	/^        bool hasOutstandingEvents() override;$/;"	m	class:IGbE::RxDescCache
override	./dev/net/i8254xGBe.hh	/^        bool hasOutstandingEvents() override;$/;"	m	class:IGbE::TxDescCache
override	./dev/net/i8254xGBe.hh	/^        void actionAfterWb() override;$/;"	m	class:IGbE::TxDescCache
override	./dev/net/i8254xGBe.hh	/^        void enableSm() override;$/;"	m	class:IGbE::RxDescCache
override	./dev/net/i8254xGBe.hh	/^        void enableSm() override;$/;"	m	class:IGbE::TxDescCache
override	./dev/net/i8254xGBe.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	class:IGbE::DescCache
override	./dev/net/i8254xGBe.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	class:IGbE::RxDescCache
override	./dev/net/i8254xGBe.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	class:IGbE::TxDescCache
override	./dev/net/i8254xGBe.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	class:IGbE::DescCache
override	./dev/net/i8254xGBe.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	class:IGbE::RxDescCache
override	./dev/net/i8254xGBe.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	class:IGbE::TxDescCache
override	./dev/net/i8254xGBe.hh	/^    DrainState drain() override;$/;"	m	class:IGbE
override	./dev/net/i8254xGBe.hh	/^    EtherInt *getEthPort(const std::string &if_name, int idx) override;$/;"	m	class:IGbE
override	./dev/net/i8254xGBe.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:IGbE
override	./dev/net/i8254xGBe.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:IGbE
override	./dev/net/i8254xGBe.hh	/^    Tick writeConfig(PacketPtr pkt) override;$/;"	m	class:IGbE
override	./dev/net/i8254xGBe.hh	/^    void drainResume() override;$/;"	m	class:IGbE
override	./dev/net/i8254xGBe.hh	/^    void init() override;$/;"	m	class:IGbE
override	./dev/net/i8254xGBe.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:IGbE
override	./dev/net/i8254xGBe.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:IGbE
override	./dev/net/ns_gige.hh	/^    EtherInt *getEthPort(const std::string &if_name, int idx) override;$/;"	m	class:NSGigE
override	./dev/net/ns_gige.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:NSGigE
override	./dev/net/ns_gige.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:NSGigE
override	./dev/net/ns_gige.hh	/^    Tick writeConfig(PacketPtr pkt) override;$/;"	m	class:NSGigE
override	./dev/net/ns_gige.hh	/^    void drainResume() override;$/;"	m	class:NSGigE
override	./dev/net/ns_gige.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:NSGigE
override	./dev/net/ns_gige.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:NSGigE
override	./dev/net/sinic.hh	/^    EtherInt *getEthPort(const std::string &if_name, int idx) override;$/;"	m	class:Sinic::Device
override	./dev/net/sinic.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:Sinic::Device
override	./dev/net/sinic.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:Sinic::Device
override	./dev/net/sinic.hh	/^    virtual void drainResume() override;$/;"	m	class:Sinic::Device
override	./dev/net/sinic.hh	/^    void regStats() override;$/;"	m	class:Sinic::Device
override	./dev/net/sinic.hh	/^    void resetStats() override;$/;"	m	class:Sinic::Device
override	./dev/net/sinic.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Sinic::Base
override	./dev/net/sinic.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Sinic::Device
override	./dev/net/sinic.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Sinic::Base
override	./dev/net/sinic.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Sinic::Device
override	./dev/net/tcp_iface.hh	/^                    const EthPacketPtr &packet) override;$/;"	m	class:TCPIface
override	./dev/net/tcp_iface.hh	/^    bool recvHeader(Header &header) override;$/;"	m	class:TCPIface
override	./dev/net/tcp_iface.hh	/^    void initTransport() override;$/;"	m	class:TCPIface
override	./dev/net/tcp_iface.hh	/^    void recvPacket(const Header &header, EthPacketPtr &packet) override;$/;"	m	class:TCPIface
override	./dev/net/tcp_iface.hh	/^    void sendCmd(const Header &header) override;$/;"	m	class:TCPIface
override	./dev/net/tcp_iface.hh	/^    ~TCPIface() override;$/;"	m	class:TCPIface
override	./dev/pci/copy_engine.hh	/^                                  PortID idx = InvalidPortID) override;$/;"	m	class:CopyEngine
override	./dev/pci/copy_engine.hh	/^        DrainState drain() override;$/;"	m	class:CopyEngine::CopyEngineChannel
override	./dev/pci/copy_engine.hh	/^        void drainResume() override;$/;"	m	class:CopyEngine::CopyEngineChannel
override	./dev/pci/copy_engine.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	class:CopyEngine::CopyEngineChannel
override	./dev/pci/copy_engine.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	class:CopyEngine::CopyEngineChannel
override	./dev/pci/copy_engine.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:CopyEngine
override	./dev/pci/copy_engine.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:CopyEngine
override	./dev/pci/copy_engine.hh	/^    void regStats() override;$/;"	m	class:CopyEngine
override	./dev/pci/copy_engine.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:CopyEngine
override	./dev/pci/copy_engine.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:CopyEngine
override	./dev/pci/device.hh	/^    AddrRangeList getAddrRanges() const override;$/;"	m	class:PciDevice
override	./dev/pci/device.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:PciDevice
override	./dev/pci/device.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:PciDevice
override	./dev/pci/host.hh	/^    AddrRangeList getAddrRanges() const override;$/;"	m	class:GenericPciHost
override	./dev/pci/host.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:GenericPciHost
override	./dev/pci/host.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:GenericPciHost
override	./dev/pci/host.hh	/^    void clearInt(const PciBusAddr &addr, PciIntPin pin) override;$/;"	m	class:GenericPciHost
override	./dev/pci/host.hh	/^    void postInt(const PciBusAddr &addr, PciIntPin pin) override;$/;"	m	class:GenericPciHost
override	./dev/pixelpump.hh	/^        DrainState drain() override;$/;"	m	class:BasePixelPump::PixelEvent
override	./dev/pixelpump.hh	/^        void drainResume() override;$/;"	m	class:BasePixelPump::PixelEvent
override	./dev/pixelpump.hh	/^        void serialize(CheckpointOut &cp) const override;$/;"	m	class:BasePixelPump::PixelEvent
override	./dev/pixelpump.hh	/^        void unserialize(CheckpointIn &cp) override;$/;"	m	class:BasePixelPump::PixelEvent
override	./dev/pixelpump.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:BasePixelPump
override	./dev/pixelpump.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	struct:DisplayTimings
override	./dev/pixelpump.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:BasePixelPump
override	./dev/pixelpump.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	struct:DisplayTimings
override	./dev/sparc/dtod.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:DumbTOD
override	./dev/sparc/dtod.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:DumbTOD
override	./dev/sparc/iob.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Iob
override	./dev/sparc/iob.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Iob
override	./dev/sparc/mm_disk.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:MmDisk
override	./dev/storage/disk_image.hh	/^    std::streampos read(uint8_t *data, std::streampos offset) const override;$/;"	m	class:CowDiskImage
override	./dev/storage/disk_image.hh	/^    std::streampos size() const override;$/;"	m	class:CowDiskImage
override	./dev/storage/disk_image.hh	/^    std::streampos write(const uint8_t *data, std::streampos offset) override;$/;"	m	class:CowDiskImage
override	./dev/storage/disk_image.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:CowDiskImage
override	./dev/storage/disk_image.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:CowDiskImage
override	./dev/storage/ide_ctrl.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:IdeController
override	./dev/storage/ide_ctrl.hh	/^    Tick readConfig(PacketPtr pkt) override;$/;"	m	class:IdeController
override	./dev/storage/ide_ctrl.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:IdeController
override	./dev/storage/ide_ctrl.hh	/^    Tick writeConfig(PacketPtr pkt) override;$/;"	m	class:IdeController
override	./dev/storage/ide_ctrl.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:IdeController
override	./dev/storage/ide_ctrl.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:IdeController
override	./dev/storage/ide_disk.hh	/^    void regStats() override;$/;"	m	class:IdeDisk
override	./dev/storage/ide_disk.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:IdeDisk
override	./dev/storage/ide_disk.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:IdeDisk
override	./dev/uart8250.hh	/^    AddrRangeList getAddrRanges() const override;$/;"	m	class:Uart8250
override	./dev/uart8250.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:Uart8250
override	./dev/uart8250.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:Uart8250
override	./dev/uart8250.hh	/^    void dataAvailable() override;$/;"	m	class:Uart8250
override	./dev/uart8250.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Uart8250
override	./dev/uart8250.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Uart8250
override	./dev/virtio/base.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:VirtIODeviceBase
override	./dev/virtio/base.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:VirtQueue
override	./dev/virtio/base.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:VirtIODeviceBase
override	./dev/virtio/base.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:VirtQueue
override	./dev/virtio/fs9p.hh	/^                  size_t size) override;$/;"	m	class:VirtIO9PProxy
override	./dev/virtio/fs9p.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:VirtIO9PProxy
override	./dev/virtio/fs9p.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:VirtIO9PProxy
override	./dev/x86/cmos.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:X86ISA::Cmos
override	./dev/x86/cmos.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:X86ISA::Cmos
override	./dev/x86/cmos.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:X86ISA::Cmos
override	./dev/x86/cmos.hh	/^    void startup() override;$/;"	m	class:X86ISA::Cmos
override	./dev/x86/cmos.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:X86ISA::Cmos
override	./dev/x86/i8042.hh	/^    AddrRangeList getAddrRanges() const override;$/;"	m	class:X86ISA::I8042
override	./dev/x86/i8042.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:X86ISA::I8042
override	./dev/x86/i8042.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:X86ISA::I8042
override	./dev/x86/i8042.hh	/^    bool processData(uint8_t data) override;$/;"	m	class:X86ISA::PS2Keyboard
override	./dev/x86/i8042.hh	/^    bool processData(uint8_t data) override;$/;"	m	class:X86ISA::PS2Mouse
override	./dev/x86/i8042.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:X86ISA::I8042
override	./dev/x86/i8042.hh	/^    void serialize(const std::string &base, CheckpointOut &cp) const override;$/;"	m	class:X86ISA::PS2Mouse
override	./dev/x86/i8042.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:X86ISA::I8042
override	./dev/x86/i8042.hh	/^    void unserialize(const std::string &base, CheckpointIn &cp) override;$/;"	m	class:X86ISA::PS2Mouse
override	./dev/x86/i82094aa.hh	/^                                  PortID idx = InvalidPortID) override;$/;"	m	class:X86ISA::I82094AA
override	./dev/x86/i82094aa.hh	/^    AddrRangeList getIntAddrRange() const override;$/;"	m	class:X86ISA::I82094AA
override	./dev/x86/i82094aa.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:X86ISA::I82094AA
override	./dev/x86/i82094aa.hh	/^    Tick recvResponse(PacketPtr pkt) override;$/;"	m	class:X86ISA::I82094AA
override	./dev/x86/i82094aa.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:X86ISA::I82094AA
override	./dev/x86/i82094aa.hh	/^    void init() override;$/;"	m	class:X86ISA::I82094AA
override	./dev/x86/i82094aa.hh	/^    void lowerInterruptPin(int number) override;$/;"	m	class:X86ISA::I82094AA
override	./dev/x86/i82094aa.hh	/^    void raiseInterruptPin(int number) override;$/;"	m	class:X86ISA::I82094AA
override	./dev/x86/i82094aa.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:X86ISA::I82094AA
override	./dev/x86/i82094aa.hh	/^    void signalInterrupt(int line) override;$/;"	m	class:X86ISA::I82094AA
override	./dev/x86/i82094aa.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:X86ISA::I82094AA
override	./dev/x86/i8237.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:X86ISA::I8237
override	./dev/x86/i8237.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:X86ISA::I8237
override	./dev/x86/i8237.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:X86ISA::I8237
override	./dev/x86/i8237.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:X86ISA::I8237
override	./dev/x86/i8254.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:X86ISA::I8254
override	./dev/x86/i8254.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:X86ISA::I8254
override	./dev/x86/i8254.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:X86ISA::I8254
override	./dev/x86/i8254.hh	/^    void startup() override;$/;"	m	class:X86ISA::I8254
override	./dev/x86/i8254.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:X86ISA::I8254
override	./dev/x86/i8259.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:X86ISA::I8259
override	./dev/x86/i8259.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:X86ISA::I8259
override	./dev/x86/i8259.hh	/^    void lowerInterruptPin(int number) override;$/;"	m	class:X86ISA::I8259
override	./dev/x86/i8259.hh	/^    void raiseInterruptPin(int number) override;$/;"	m	class:X86ISA::I8259
override	./dev/x86/i8259.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:X86ISA::I8259
override	./dev/x86/i8259.hh	/^    void signalInterrupt(int line) override;$/;"	m	class:X86ISA::I8259
override	./dev/x86/i8259.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:X86ISA::I8259
override	./dev/x86/pc.hh	/^    void clearConsoleInt() override;$/;"	m	class:Pc
override	./dev/x86/pc.hh	/^    void clearPciInt(int line) override;$/;"	m	class:Pc
override	./dev/x86/pc.hh	/^    void postConsoleInt() override;$/;"	m	class:Pc
override	./dev/x86/pc.hh	/^    void postPciInt(int line) override;$/;"	m	class:Pc
override	./dev/x86/speaker.hh	/^    Tick read(PacketPtr pkt) override;$/;"	m	class:X86ISA::Speaker
override	./dev/x86/speaker.hh	/^    Tick write(PacketPtr pkt) override;$/;"	m	class:X86ISA::Speaker
override	./dev/x86/speaker.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:X86ISA::Speaker
override	./dev/x86/speaker.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:X86ISA::Speaker
override	./kern/kernel_stats.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Kernel::Statistics
override	./kern/kernel_stats.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Kernel::Statistics
override	./mem/abstract_mem.hh	/^    void init() override;$/;"	m	class:AbstractMemory
override	./mem/abstract_mem.hh	/^    void regStats() override;$/;"	m	class:AbstractMemory
override	./mem/cache/cache.hh	/^    bool isDirty() const override;$/;"	m	class:Cache
override	./mem/cache/cache.hh	/^    void memInvalidate() override;$/;"	m	class:Cache
override	./mem/cache/cache.hh	/^    void memWriteback() override;$/;"	m	class:Cache
override	./mem/cache/cache.hh	/^    void regStats() override;$/;"	m	class:Cache
override	./mem/cache/cache.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Cache
override	./mem/cache/cache.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Cache
override	./mem/cache/mshr_queue.hh	/^    DrainState drain() override;$/;"	m	class:MSHRQueue
override	./mem/cache/tags/base_set_assoc.hh	/^    CacheBlk *findBlockBySetAndWay(int set, int way) const override;$/;"	m	class:BaseSetAssoc
override	./mem/cache/tags/base_set_assoc.hh	/^    CacheBlk* findBlock(Addr addr, bool is_secure) const override;$/;"	m	class:BaseSetAssoc
override	./mem/cache/tags/base_set_assoc.hh	/^    std::string print() const override;$/;"	m	class:BaseSetAssoc
override	./mem/cache/tags/base_set_assoc.hh	/^    void cleanupRefs() override;$/;"	m	class:BaseSetAssoc
override	./mem/cache/tags/base_set_assoc.hh	/^    void computeStats() override;$/;"	m	class:BaseSetAssoc
override	./mem/cache/tags/fa_lru.hh	/^                          int context_src) override;$/;"	m	class:FALRU
override	./mem/cache/tags/fa_lru.hh	/^    CacheBlk* findBlock(Addr addr, bool is_secure) const override;$/;"	m	class:FALRU
override	./mem/cache/tags/fa_lru.hh	/^    CacheBlk* findBlockBySetAndWay(int set, int way) const override;$/;"	m	class:FALRU
override	./mem/cache/tags/fa_lru.hh	/^    CacheBlk* findVictim(Addr addr) override;$/;"	m	class:FALRU
override	./mem/cache/tags/fa_lru.hh	/^    void insertBlock(PacketPtr pkt, CacheBlk *blk) override;$/;"	m	class:FALRU
override	./mem/cache/tags/fa_lru.hh	/^    void invalidate(CacheBlk *blk) override;$/;"	m	class:FALRU
override	./mem/cache/tags/fa_lru.hh	/^    void regStats() override;$/;"	m	class:FALRU
override	./mem/comm_monitor.hh	/^                                  PortID idx = InvalidPortID) override;$/;"	m	class:CommMonitor
override	./mem/comm_monitor.hh	/^                                PortID idx = InvalidPortID) override;$/;"	m	class:CommMonitor
override	./mem/comm_monitor.hh	/^    void init() override;$/;"	m	class:CommMonitor
override	./mem/comm_monitor.hh	/^    void regProbePoints() override;$/;"	m	class:CommMonitor
override	./mem/comm_monitor.hh	/^    void regStats() override;$/;"	m	class:CommMonitor
override	./mem/comm_monitor.hh	/^    void startup() override;$/;"	m	class:CommMonitor
override	./mem/dram_ctrl.hh	/^                                        PortID idx = InvalidPortID) override;$/;"	m	class:DRAMCtrl
override	./mem/dram_ctrl.hh	/^    DrainState drain() override;$/;"	m	class:DRAMCtrl
override	./mem/dram_ctrl.hh	/^    virtual void drainResume() override;$/;"	m	class:DRAMCtrl
override	./mem/dram_ctrl.hh	/^    virtual void init() override;$/;"	m	class:DRAMCtrl
override	./mem/dram_ctrl.hh	/^    virtual void startup() override;$/;"	m	class:DRAMCtrl
override	./mem/dram_ctrl.hh	/^    void regStats() override;$/;"	m	class:DRAMCtrl
override	./mem/dramsim2.hh	/^                                        PortID idx = InvalidPortID) override;$/;"	m	class:DRAMSim2
override	./mem/dramsim2.hh	/^    DrainState drain() override;$/;"	m	class:DRAMSim2
override	./mem/dramsim2.hh	/^    void init() override;$/;"	m	class:DRAMSim2
override	./mem/dramsim2.hh	/^    void startup() override;$/;"	m	class:DRAMSim2
override	./mem/multi_level_page_table.hh	/^             uint64_t flags = 0) override;$/;"	m	class:MultiLevelPageTable
override	./mem/multi_level_page_table.hh	/^    bool isUnmapped(Addr vaddr, int64_t size) override;$/;"	m	class:MultiLevelPageTable
override	./mem/multi_level_page_table.hh	/^    bool lookup(Addr vaddr, TheISA::TlbEntry &entry) override;$/;"	m	class:MultiLevelPageTable
override	./mem/multi_level_page_table.hh	/^    void initState(ThreadContext* tc) override;$/;"	m	class:MultiLevelPageTable
override	./mem/multi_level_page_table.hh	/^    void remap(Addr vaddr, int64_t size, Addr new_vaddr) override;$/;"	m	class:MultiLevelPageTable
override	./mem/multi_level_page_table.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:MultiLevelPageTable
override	./mem/multi_level_page_table.hh	/^    void unmap(Addr vaddr, int64_t size) override;$/;"	m	class:MultiLevelPageTable
override	./mem/multi_level_page_table.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:MultiLevelPageTable
override	./mem/packet_queue.hh	/^    DrainState drain() override;$/;"	m	class:PacketQueue
override	./mem/page_table.hh	/^             uint64_t flags = 0) override;$/;"	m	class:FuncPageTable
override	./mem/page_table.hh	/^    bool isUnmapped(Addr vaddr, int64_t size) override;$/;"	m	class:FuncPageTable
override	./mem/page_table.hh	/^    bool lookup(Addr vaddr, TheISA::TlbEntry &entry) override;$/;"	m	class:FuncPageTable
override	./mem/page_table.hh	/^    void remap(Addr vaddr, int64_t size, Addr new_vaddr) override;$/;"	m	class:FuncPageTable
override	./mem/page_table.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:FuncPageTable
override	./mem/page_table.hh	/^    void unmap(Addr vaddr, int64_t size) override;$/;"	m	class:FuncPageTable
override	./mem/page_table.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:FuncPageTable
override	./mem/physical.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:PhysicalMemory
override	./mem/physical.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:PhysicalMemory
override	./mem/probes/base.hh	/^    void regProbeListeners() override;$/;"	m	class:BaseMemProbe
override	./mem/probes/mem_trace.hh	/^    void handleRequest(const ProbePoints::PacketInfo &pkt_info) override;$/;"	m	class:MemTraceProbe
override	./mem/probes/stack_dist.hh	/^    void handleRequest(const ProbePoints::PacketInfo &pkt_info) override;$/;"	m	class:StackDistProbe
override	./mem/probes/stack_dist.hh	/^    void regStats() override;$/;"	m	class:StackDistProbe
override	./mem/ruby/structures/RubyMemoryControl.hh	/^                                        PortID idx = InvalidPortID) override;$/;"	m	class:RubyMemoryControl
override	./mem/ruby/structures/RubyMemoryControl.hh	/^    DrainState drain() override;$/;"	m	class:RubyMemoryControl
override	./mem/ruby/structures/RubyMemoryControl.hh	/^    void init() override;$/;"	m	class:RubyMemoryControl
override	./mem/ruby/structures/RubyMemoryControl.hh	/^    void print(std::ostream& out) const override;$/;"	m	class:RubyMemoryControl
override	./mem/ruby/structures/RubyMemoryControl.hh	/^    void regStats() override;$/;"	m	class:RubyMemoryControl
override	./mem/ruby/structures/RubyMemoryControl.hh	/^    void wakeup() override;$/;"	m	class:RubyMemoryControl
override	./mem/ruby/system/DMASequencer.hh	/^                                PortID idx = InvalidPortID) override;$/;"	m	class:DMASequencer
override	./mem/ruby/system/DMASequencer.hh	/^    DrainState drain() override;$/;"	m	class:DMASequencer
override	./mem/ruby/system/DMASequencer.hh	/^    void init() override;$/;"	m	class:DMASequencer
override	./mem/ruby/system/RubyPort.hh	/^                                  PortID idx = InvalidPortID) override;$/;"	m	class:RubyPort
override	./mem/ruby/system/RubyPort.hh	/^                                PortID idx = InvalidPortID) override;$/;"	m	class:RubyPort
override	./mem/ruby/system/RubyPort.hh	/^    DrainState drain() override;$/;"	m	class:RubyPort
override	./mem/ruby/system/RubyPort.hh	/^    void init() override;$/;"	m	class:RubyPort
override	./mem/ruby/system/RubySystem.hh	/^    void drainResume() override;$/;"	m	class:RubySystem
override	./mem/ruby/system/RubySystem.hh	/^    void memWriteback() override;$/;"	m	class:RubySystem
override	./mem/ruby/system/RubySystem.hh	/^    void resetStats() override;$/;"	m	class:RubySystem
override	./mem/ruby/system/RubySystem.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:RubySystem
override	./mem/ruby/system/RubySystem.hh	/^    void startup() override;$/;"	m	class:RubySystem
override	./mem/ruby/system/RubySystem.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:RubySystem
override	./mem/simple_mem.hh	/^                                PortID idx = InvalidPortID) override;$/;"	m	class:SimpleMemory
override	./mem/simple_mem.hh	/^    DrainState drain() override;$/;"	m	class:SimpleMemory
override	./mem/simple_mem.hh	/^    void init() override;$/;"	m	class:SimpleMemory
override	./mem/xbar.hh	/^        DrainState drain() override;$/;"	m	class:BaseXBar::Layer
override	./sim/clock_domain.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:SrcClockDomain
override	./sim/clock_domain.hh	/^    void startup() override;$/;"	m	class:SrcClockDomain
override	./sim/clock_domain.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:SrcClockDomain
override	./sim/dvfs_handler.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:DVFSHandler
override	./sim/dvfs_handler.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:DVFSHandler
override	./sim/eventq.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Event
override	./sim/eventq.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Event
override	./sim/fd_entry.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:FDEntry
override	./sim/fd_entry.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:FDEntry
override	./sim/process.hh	/^    DrainState drain() override;$/;"	m	class:Process
override	./sim/process.hh	/^    void initState() override;$/;"	m	class:Process
override	./sim/process.hh	/^    void regStats() override;$/;"	m	class:Process
override	./sim/process.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Process
override	./sim/process.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Process
override	./sim/root.hh	/^    void initState() override;$/;"	m	class:Root
override	./sim/root.hh	/^    void loadState(CheckpointIn &cp) override;$/;"	m	class:Root
override	./sim/root.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Root
override	./sim/root.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Root
override	./sim/serialize.cc	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Globals	file:
override	./sim/serialize.cc	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Globals	file:
override	./sim/sim_events.hh	/^    const char *description() const override;$/;"	m	class:CountedExitEvent
override	./sim/sim_events.hh	/^    const char *description() const override;$/;"	m	class:LocalSimLoopExitEvent
override	./sim/sim_events.hh	/^    void process() override;     \/\/ process event$/;"	m	class:CountedExitEvent
override	./sim/sim_events.hh	/^    void process() override;     \/\/ process event$/;"	m	class:LocalSimLoopExitEvent
override	./sim/sim_events.hh	/^    void process() override;$/;"	m	class:CountedDrainEvent
override	./sim/sim_events.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:LocalSimLoopExitEvent
override	./sim/sim_events.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:LocalSimLoopExitEvent
override	./sim/system.hh	/^                                  PortID idx = InvalidPortID) override;$/;"	m	class:System
override	./sim/system.hh	/^    void drainResume() override;$/;"	m	class:System
override	./sim/system.hh	/^    void init() override;$/;"	m	class:System
override	./sim/system.hh	/^    void initState() override;$/;"	m	class:System
override	./sim/system.hh	/^    void regStats() override;$/;"	m	class:System
override	./sim/system.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:System
override	./sim/system.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:System
override	./sim/ticked_object.hh	/^    void regStats() override;$/;"	m	class:TickedObject
override	./sim/ticked_object.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:Ticked
override	./sim/ticked_object.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:TickedObject
override	./sim/ticked_object.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:Ticked
override	./sim/ticked_object.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:TickedObject
override	./sim/voltage_domain.hh	/^    void regStats() override;$/;"	m	class:VoltageDomain
override	./sim/voltage_domain.hh	/^    void serialize(CheckpointOut &cp) const override;$/;"	m	class:VoltageDomain
override	./sim/voltage_domain.hh	/^    void startup() override;$/;"	m	class:VoltageDomain
override	./sim/voltage_domain.hh	/^    void unserialize(CheckpointIn &cp) override;$/;"	m	class:VoltageDomain
overrideEc	./arch/arm/faults.hh	/^    ExceptionClass overrideEc;$/;"	m	class:ArmISA::HypervisorTrap
overrideEc	./arch/arm/faults.hh	/^    ExceptionClass overrideEc;$/;"	m	class:ArmISA::SecureMonitorTrap
overrideEc	./arch/arm/faults.hh	/^    ExceptionClass overrideEc;$/;"	m	class:ArmISA::SupervisorCall
overrideEc	./arch/arm/faults.hh	/^    ExceptionClass overrideEc;$/;"	m	class:ArmISA::SupervisorTrap
overrideEc	./arch/arm/faults.hh	/^    ExceptionClass overrideEc;$/;"	m	class:ArmISA::UndefinedInstruction
owner	./cpu/minor/lsq.hh	/^            SplitDataRequest &owner;$/;"	m	class:Minor::LSQ::SplitDataRequest::TranslationEvent
owner	./cpu/trace/trace_cpu.hh	/^        TraceCPU& owner;$/;"	m	class:TraceCPU::ElasticDataGen
owner	./cpu/trace/trace_cpu.hh	/^        TraceCPU& owner;$/;"	m	class:TraceCPU::FixedRetryGen
owner	./cpu/trace/trace_cpu.hh	/^        TraceCPU* owner;$/;"	m	class:TraceCPU::DcachePort
owner	./cpu/trace/trace_cpu.hh	/^        TraceCPU* owner;$/;"	m	class:TraceCPU::IcachePort
owner	./mem/external_master.hh	/^        ExternalMaster &owner;$/;"	m	class:ExternalMaster::Port
owner	./mem/external_slave.cc	/^        StubSlavePort &owner;$/;"	m	class:StubSlavePort::ResponseEvent	file:
owner	./mem/external_slave.hh	/^        ExternalSlave &owner;$/;"	m	class:ExternalSlave::Port
owner	./mem/port.hh	/^    MemObject& owner;$/;"	m	class:Port
owner	./sim/ticked_object.hh	/^        Ticked &owner;$/;"	m	class:Ticked::ClockEvent
ox	./arch/power/miscregs.hh	/^    Bitfield<28> ox;$/;"	m	namespace:PowerISA
p	./arch/arm/pmu.hh	/^        Bitfield<1> p;$/;"	m	class:ArmISA::PMU
p	./arch/arm/pmu.hh	/^        Bitfield<31> p;$/;"	m	class:ArmISA::PMU
p	./arch/mips/pra_constants.hh	/^    Bitfield<0>     p;$/;"	m	namespace:MipsISA
p	./arch/mips/pra_constants.hh	/^    Bitfield<31> p;$/;"	m	namespace:MipsISA
p	./arch/x86/pagetable.hh	/^        Bitfield<0> p;$/;"	m	namespace:X86ISA
p	./arch/x86/regs/misc.hh	/^        Bitfield<47> p; \/\/ Present$/;"	m	namespace:X86ISA
p	./base/inet.hh	/^    EthPacketPtr p;$/;"	m	class:Net::EthPtr
p	./base/inet.hh	/^    EthPacketPtr p;$/;"	m	class:Net::Ip6Ptr
p	./base/inet.hh	/^    EthPacketPtr p;$/;"	m	class:Net::IpPtr
p	./base/inet.hh	/^    EthPacketPtr p;$/;"	m	class:Net::TcpPtr
p	./base/inet.hh	/^    EthPacketPtr p;$/;"	m	class:Net::UdpPtr
p	./cpu/testers/traffic_gen/traffic_gen.hh	/^        double p;$/;"	m	struct:TrafficGen::Transition
p9toh	./dev/virtio/fs9p.hh	/^p9toh(P9MsgHeader v)$/;"	f
p9toh	./dev/virtio/fs9p.hh	/^p9toh(T v) { return letoh(v); }$/;"	f
pAUXU	./base/loader/coff_sym.h	/^} AUXU, *pAUXU;$/;"	t	typeref:union:__anon115
pAddr	./arch/arm/pagetable.hh	/^    pAddr(Addr va) const$/;"	f	struct:ArmISA::TlbEntry
pAddr	./cpu/base.hh	/^    Addr pAddr;$/;"	m	struct:AddressMonitor
pDNR	./base/loader/coff_sym.h	/^} DNR, *pDNR;$/;"	t	typeref:struct:__anon114
pEXTR	./base/loader/coff_sym.h	/^} EXTR, *pEXTR;$/;"	t	typeref:struct:ecoff_extsym
pFDR	./base/loader/coff_sym.h	/^} FDR, *pFDR;$/;"	t	typeref:struct:ecoff_fdr
pFIT	./base/loader/coff_sym.h	/^typedef coff_int FIT, *pFIT;$/;"	t
pHDRR	./base/loader/coff_sym.h	/^} HDRR, *pHDRR;$/;"	t	typeref:struct:ecoff_symhdr
pLINER	./base/loader/coff_sym.h	/^typedef coff_int LINER, *pLINER;$/;"	t
pOPTR	./base/loader/coff_sym.h	/^} OPTR, *pOPTR;$/;"	t	typeref:struct:__anon116
pPDR	./base/loader/coff_sym.h	/^} PDR, *pPDR;$/;"	t	typeref:struct:pdr
pRFDT	./base/loader/coff_sym.h	/^typedef coff_long RFDT, *pRFDT;$/;"	t
pRNDXR	./base/loader/coff_sym.h	/^} RNDXR, *pRNDXR;$/;"	t	typeref:struct:__anon113
pSYMR	./base/loader/coff_sym.h	/^} SYMR, *pSYMR;$/;"	t	typeref:struct:ecoff_sym
pState	./arch/mips/pra_constants.hh	/^    Bitfield<7,  6> pState;$/;"	m	namespace:MipsISA
pTIR	./base/loader/coff_sym.h	/^} TIR, *pTIR;$/;"	t	typeref:struct:__anon112
pTable	./mem/page_table.hh	/^    PTable pTable;$/;"	m	class:FuncPageTable
pTable	./mem/se_translating_port_proxy.hh	/^    PageTableBase *pTable;$/;"	m	class:SETranslatingPortProxy
pTable	./sim/process.hh	/^    PageTableBase* pTable;$/;"	m	class:Process
pTableCache	./mem/page_table.hh	/^    struct cacheElement pTableCache[3];$/;"	m	class:PageTableBase	typeref:struct:PageTableBase::cacheElement
pTableISAOps	./mem/multi_level_page_table.hh	/^    ISAOps pTableISAOps;$/;"	m	class:MultiLevelPageTable
pTagLo	./arch/mips/pra_constants.hh	/^    Bitfield<31, 8> pTagLo;$/;"	m	namespace:MipsISA
p_arg_list_0	./arch/isa_parser.py	/^    def p_arg_list_0(self, t):$/;"	m	class:ISAParser
p_arg_list_1	./arch/isa_parser.py	/^    def p_arg_list_1(self, t):$/;"	m	class:ISAParser
p_arg_list_2	./arch/isa_parser.py	/^    def p_arg_list_2(self, t):$/;"	m	class:ISAParser
p_block	./arch/micro_asm.py	/^def p_block(t):$/;"	f
p_case_list_0	./arch/isa_parser.py	/^    def p_case_list_0(self, t):$/;"	m	class:ISAParser
p_case_list_1	./arch/isa_parser.py	/^    def p_case_list_1(self, t):$/;"	m	class:ISAParser
p_case_list_2	./arch/isa_parser.py	/^    def p_case_list_2(self, t):$/;"	m	class:ISAParser
p_case_list_3	./arch/isa_parser.py	/^    def p_case_list_3(self, t):$/;"	m	class:ISAParser
p_case_list_4	./arch/isa_parser.py	/^    def p_case_list_4(self, t):$/;"	m	class:ISAParser
p_content_of_statement_0	./arch/micro_asm.py	/^def p_content_of_statement_0(t):$/;"	f
p_content_of_statement_1	./arch/micro_asm.py	/^def p_content_of_statement_1(t):$/;"	f
p_decl__action	./mem/slicc/parser.py	/^    def p_decl__action(self, p):$/;"	m	class:SLICC
p_decl__enum	./mem/slicc/parser.py	/^    def p_decl__enum(self, p):$/;"	m	class:SLICC
p_decl__extern0	./mem/slicc/parser.py	/^    def p_decl__extern0(self, p):$/;"	m	class:SLICC
p_decl__func_decl	./mem/slicc/parser.py	/^    def p_decl__func_decl(self, p):$/;"	m	class:SLICC
p_decl__func_def	./mem/slicc/parser.py	/^    def p_decl__func_def(self, p):$/;"	m	class:SLICC
p_decl__global	./mem/slicc/parser.py	/^    def p_decl__global(self, p):$/;"	m	class:SLICC
p_decl__in_port	./mem/slicc/parser.py	/^    def p_decl__in_port(self, p):$/;"	m	class:SLICC
p_decl__include	./mem/slicc/parser.py	/^    def p_decl__include(self, p):$/;"	m	class:SLICC
p_decl__machine0	./mem/slicc/parser.py	/^    def p_decl__machine0(self, p):$/;"	m	class:SLICC
p_decl__machine1	./mem/slicc/parser.py	/^    def p_decl__machine1(self, p):$/;"	m	class:SLICC
p_decl__obj_decl	./mem/slicc/parser.py	/^    def p_decl__obj_decl(self, p):$/;"	m	class:SLICC
p_decl__out_port	./mem/slicc/parser.py	/^    def p_decl__out_port(self, p):$/;"	m	class:SLICC
p_decl__protocol	./mem/slicc/parser.py	/^    def p_decl__protocol(self, p):$/;"	m	class:SLICC
p_decl__state_decl	./mem/slicc/parser.py	/^    def p_decl__state_decl(self, p):$/;"	m	class:SLICC
p_decl__struct	./mem/slicc/parser.py	/^    def p_decl__struct(self, p):$/;"	m	class:SLICC
p_decl__trans0	./mem/slicc/parser.py	/^    def p_decl__trans0(self, p):$/;"	m	class:SLICC
p_decl__trans1	./mem/slicc/parser.py	/^    def p_decl__trans1(self, p):$/;"	m	class:SLICC
p_decl__trans2	./mem/slicc/parser.py	/^    def p_decl__trans2(self, p):$/;"	m	class:SLICC
p_decl__trans3	./mem/slicc/parser.py	/^    def p_decl__trans3(self, p):$/;"	m	class:SLICC
p_decls	./mem/slicc/parser.py	/^    def p_decls(self, p):$/;"	m	class:SLICC
p_declsx__list	./mem/slicc/parser.py	/^    def p_declsx__list(self, p):$/;"	m	class:SLICC
p_declsx__none	./mem/slicc/parser.py	/^    def p_declsx__none(self, p):$/;"	m	class:SLICC
p_decode_block	./arch/isa_parser.py	/^    def p_decode_block(self, t):$/;"	m	class:ISAParser
p_decode_stmt_cpp	./arch/isa_parser.py	/^    def p_decode_stmt_cpp(self, t):$/;"	m	class:ISAParser
p_decode_stmt_decode	./arch/isa_parser.py	/^    def p_decode_stmt_decode(self, t):$/;"	m	class:ISAParser
p_decode_stmt_format	./arch/isa_parser.py	/^    def p_decode_stmt_format(self, t):$/;"	m	class:ISAParser
p_decode_stmt_inst	./arch/isa_parser.py	/^    def p_decode_stmt_inst(self, t):$/;"	m	class:ISAParser
p_decode_stmt_list_0	./arch/isa_parser.py	/^    def p_decode_stmt_list_0(self, t):$/;"	m	class:ISAParser
p_decode_stmt_list_1	./arch/isa_parser.py	/^    def p_decode_stmt_list_1(self, t):$/;"	m	class:ISAParser
p_def_bitfield_0	./arch/isa_parser.py	/^    def p_def_bitfield_0(self, t):$/;"	m	class:ISAParser
p_def_bitfield_1	./arch/isa_parser.py	/^    def p_def_bitfield_1(self, t):$/;"	m	class:ISAParser
p_def_bitfield_struct	./arch/isa_parser.py	/^    def p_def_bitfield_struct(self, t):$/;"	m	class:ISAParser
p_def_format	./arch/isa_parser.py	/^    def p_def_format(self, t):$/;"	m	class:ISAParser
p_def_operand_types	./arch/isa_parser.py	/^    def p_def_operand_types(self, t):$/;"	m	class:ISAParser
p_def_operands	./arch/isa_parser.py	/^    def p_def_operands(self, t):$/;"	m	class:ISAParser
p_def_or_output	./arch/isa_parser.py	/^    def p_def_or_output(self, t):$/;"	m	class:ISAParser
p_def_template	./arch/isa_parser.py	/^    def p_def_template(self, t):$/;"	m	class:ISAParser
p_defs_and_outputs_0	./arch/isa_parser.py	/^    def p_defs_and_outputs_0(self, t):$/;"	m	class:ISAParser
p_defs_and_outputs_1	./arch/isa_parser.py	/^    def p_defs_and_outputs_1(self, t):$/;"	m	class:ISAParser
p_directive_0	./arch/micro_asm.py	/^def p_directive_0(t):$/;"	f
p_directive_1	./arch/micro_asm.py	/^def p_directive_1(t):$/;"	f
p_empty	./arch/isa_parser.py	/^    def p_empty(self, t):$/;"	m	class:ISAParser
p_empty	./mem/slicc/parser.py	/^    def p_empty(self, p):$/;"	m	class:SLICC
p_end_of_statement	./arch/micro_asm.py	/^def p_end_of_statement(t):$/;"	f
p_enumeration	./mem/slicc/parser.py	/^    def p_enumeration(self, p):$/;"	m	class:SLICC
p_error	./arch/isa_parser.py	/^    def p_error(self, t):$/;"	m	class:ISAParser
p_error	./arch/micro_asm.py	/^def p_error(t):$/;"	f
p_error	./python/m5/util/grammar.py	/^    def p_error(self, t):$/;"	m	class:Grammar
p_excess_args_param	./arch/isa_parser.py	/^    def p_excess_args_param(self, t):$/;"	m	class:ISAParser
p_expr_0	./arch/isa_parser.py	/^    def p_expr_0(self, t):$/;"	m	class:ISAParser
p_expr_1	./arch/isa_parser.py	/^    def p_expr_1(self, t):$/;"	m	class:ISAParser
p_expr__aexpr	./mem/slicc/parser.py	/^    def p_expr__aexpr(self, p):$/;"	m	class:SLICC
p_expr__binary_op	./mem/slicc/parser.py	/^    def p_expr__binary_op(self, p):$/;"	m	class:SLICC
p_expr__class_method_call	./mem/slicc/parser.py	/^    def p_expr__class_method_call(self, p):$/;"	m	class:SLICC
p_expr__enumeration	./mem/slicc/parser.py	/^    def p_expr__enumeration(self, p):$/;"	m	class:SLICC
p_expr__func_call	./mem/slicc/parser.py	/^    def p_expr__func_call(self, p):$/;"	m	class:SLICC
p_expr__is_invalid_ptr	./mem/slicc/parser.py	/^    def p_expr__is_invalid_ptr(self, p):$/;"	m	class:SLICC
p_expr__is_valid_ptr	./mem/slicc/parser.py	/^    def p_expr__is_valid_ptr(self, p):$/;"	m	class:SLICC
p_expr__literal	./mem/slicc/parser.py	/^    def p_expr__literal(self, p):$/;"	m	class:SLICC
p_expr__localvar	./mem/slicc/parser.py	/^    def p_expr__localvar(self, p):$/;"	m	class:SLICC
p_expr__member	./mem/slicc/parser.py	/^    def p_expr__member(self, p):$/;"	m	class:SLICC
p_expr__member_method_call	./mem/slicc/parser.py	/^    def p_expr__member_method_call(self, p):$/;"	m	class:SLICC
p_expr__member_method_call_lookup	./mem/slicc/parser.py	/^    def p_expr__member_method_call_lookup(self, p):$/;"	m	class:SLICC
p_expr__new	./mem/slicc/parser.py	/^    def p_expr__new(self, p):$/;"	m	class:SLICC
p_expr__null	./mem/slicc/parser.py	/^    def p_expr__null(self, p):$/;"	m	class:SLICC
p_expr__parens	./mem/slicc/parser.py	/^    def p_expr__parens(self, p):$/;"	m	class:SLICC
p_expr__static_cast	./mem/slicc/parser.py	/^    def p_expr__static_cast(self, p):$/;"	m	class:SLICC
p_expr__static_cast_ptr	./mem/slicc/parser.py	/^    def p_expr__static_cast_ptr(self, p):$/;"	m	class:SLICC
p_expr__unary_op	./mem/slicc/parser.py	/^    def p_expr__unary_op(self, p):$/;"	m	class:SLICC
p_expr__var	./mem/slicc/parser.py	/^    def p_expr__var(self, p):$/;"	m	class:SLICC
p_exprs__empty	./mem/slicc/parser.py	/^    def p_exprs__empty(self, p):$/;"	m	class:SLICC
p_exprs__multiple	./mem/slicc/parser.py	/^    def p_exprs__multiple(self, p):$/;"	m	class:SLICC
p_exprs__one	./mem/slicc/parser.py	/^    def p_exprs__one(self, p):$/;"	m	class:SLICC
p_file	./arch/micro_asm.py	/^def p_file(t):$/;"	f
p_file	./mem/slicc/parser.py	/^    def p_file(self, p):$/;"	m	class:SLICC
p_func_decl__0	./mem/slicc/parser.py	/^    def p_func_decl__0(self, p):$/;"	m	class:SLICC
p_func_decl__1	./mem/slicc/parser.py	/^    def p_func_decl__1(self, p):$/;"	m	class:SLICC
p_func_def__0	./mem/slicc/parser.py	/^    def p_func_def__0(self, p):$/;"	m	class:SLICC
p_global_let	./arch/isa_parser.py	/^    def p_global_let(self, t):$/;"	m	class:ISAParser
p_id_with_dot_0	./arch/isa_parser.py	/^    def p_id_with_dot_0(self, t):$/;"	m	class:ISAParser
p_id_with_dot_1	./arch/isa_parser.py	/^    def p_id_with_dot_1(self, t):$/;"	m	class:ISAParser
p_ident	./mem/slicc/parser.py	/^    def p_ident(self, p):$/;"	m	class:SLICC
p_ident_or_star	./mem/slicc/parser.py	/^    def p_ident_or_star(self, p):$/;"	m	class:SLICC
p_idents__bare	./mem/slicc/parser.py	/^    def p_idents__bare(self, p):$/;"	m	class:SLICC
p_idents__braced	./mem/slicc/parser.py	/^    def p_idents__braced(self, p):$/;"	m	class:SLICC
p_identx__multiple_1	./mem/slicc/parser.py	/^    def p_identx__multiple_1(self, p):$/;"	m	class:SLICC
p_identx__multiple_2	./mem/slicc/parser.py	/^    def p_identx__multiple_2(self, p):$/;"	m	class:SLICC
p_identx__single	./mem/slicc/parser.py	/^    def p_identx__single(self, p):$/;"	m	class:SLICC
p_if_statement__if	./mem/slicc/parser.py	/^    def p_if_statement__if(self, p):$/;"	m	class:SLICC
p_if_statement__if_else	./mem/slicc/parser.py	/^    def p_if_statement__if_else(self, p):$/;"	m	class:SLICC
p_inst_0	./arch/isa_parser.py	/^    def p_inst_0(self, t):$/;"	m	class:ISAParser
p_inst_1	./arch/isa_parser.py	/^    def p_inst_1(self, t):$/;"	m	class:ISAParser
p_keyword_arg	./arch/isa_parser.py	/^    def p_keyword_arg(self, t):$/;"	m	class:ISAParser
p_keyword_arg_list_0	./arch/isa_parser.py	/^    def p_keyword_arg_list_0(self, t):$/;"	m	class:ISAParser
p_keyword_arg_list_1	./arch/isa_parser.py	/^    def p_keyword_arg_list_1(self, t):$/;"	m	class:ISAParser
p_keyword_param	./arch/isa_parser.py	/^    def p_keyword_param(self, t):$/;"	m	class:ISAParser
p_keyword_param_list_0	./arch/isa_parser.py	/^    def p_keyword_param_list_0(self, t):$/;"	m	class:ISAParser
p_keyword_param_list_1	./arch/isa_parser.py	/^    def p_keyword_param_list_1(self, t):$/;"	m	class:ISAParser
p_label_0	./arch/micro_asm.py	/^def p_label_0(t):$/;"	f
p_label_1	./arch/micro_asm.py	/^def p_label_1(t):$/;"	f
p_labels_0	./arch/micro_asm.py	/^def p_labels_0(t):$/;"	f
p_labels_1	./arch/micro_asm.py	/^def p_labels_1(t):$/;"	f
p_labels_2	./arch/micro_asm.py	/^def p_labels_2(t):$/;"	f
p_list_expr_0	./arch/isa_parser.py	/^    def p_list_expr_0(self, t):$/;"	m	class:ISAParser
p_list_expr_1	./arch/isa_parser.py	/^    def p_list_expr_1(self, t):$/;"	m	class:ISAParser
p_list_expr_2	./arch/isa_parser.py	/^    def p_list_expr_2(self, t):$/;"	m	class:ISAParser
p_literal__bool	./mem/slicc/parser.py	/^    def p_literal__bool(self, p):$/;"	m	class:SLICC
p_literal__float	./mem/slicc/parser.py	/^    def p_literal__float(self, p):$/;"	m	class:SLICC
p_literal__number	./mem/slicc/parser.py	/^    def p_literal__number(self, p):$/;"	m	class:SLICC
p_literal__string	./mem/slicc/parser.py	/^    def p_literal__string(self, p):$/;"	m	class:SLICC
p_macroop_def_0	./arch/micro_asm.py	/^def p_macroop_def_0(t):$/;"	f
p_macroop_def_1	./arch/micro_asm.py	/^def p_macroop_def_1(t):$/;"	f
p_microop_0	./arch/micro_asm.py	/^def p_microop_0(t):$/;"	f
p_microop_1	./arch/micro_asm.py	/^def p_microop_1(t):$/;"	f
p_microop_2	./arch/micro_asm.py	/^def p_microop_2(t):$/;"	f
p_microop_3	./arch/micro_asm.py	/^def p_microop_3(t):$/;"	f
p_name_decl	./arch/isa_parser.py	/^    def p_name_decl(self, t):$/;"	m	class:ISAParser
p_nonpositional_param_list_0	./arch/isa_parser.py	/^    def p_nonpositional_param_list_0(self, t):$/;"	m	class:ISAParser
p_nonpositional_param_list_1	./arch/isa_parser.py	/^    def p_nonpositional_param_list_1(self, t):$/;"	m	class:ISAParser
p_obj_decl__0	./mem/slicc/parser.py	/^    def p_obj_decl__0(self, p):$/;"	m	class:SLICC
p_obj_decl__1	./mem/slicc/parser.py	/^    def p_obj_decl__1(self, p):$/;"	m	class:SLICC
p_obj_decl__2	./mem/slicc/parser.py	/^    def p_obj_decl__2(self, p):$/;"	m	class:SLICC
p_obj_decl__3	./mem/slicc/parser.py	/^    def p_obj_decl__3(self, p):$/;"	m	class:SLICC
p_obj_decls__empty	./mem/slicc/parser.py	/^    def p_obj_decls__empty(self, p):$/;"	m	class:SLICC
p_obj_decls__list	./mem/slicc/parser.py	/^    def p_obj_decls__list(self, p):$/;"	m	class:SLICC
p_opt_default_0	./arch/isa_parser.py	/^    def p_opt_default_0(self, t):$/;"	m	class:ISAParser
p_opt_default_1	./arch/isa_parser.py	/^    def p_opt_default_1(self, t):$/;"	m	class:ISAParser
p_opt_defs_and_outputs_0	./arch/isa_parser.py	/^    def p_opt_defs_and_outputs_0(self, t):$/;"	m	class:ISAParser
p_opt_defs_and_outputs_1	./arch/isa_parser.py	/^    def p_opt_defs_and_outputs_1(self, t):$/;"	m	class:ISAParser
p_opt_rom_or_macros_0	./arch/micro_asm.py	/^def p_opt_rom_or_macros_0(t):$/;"	f
p_opt_rom_or_macros_1	./arch/micro_asm.py	/^def p_opt_rom_or_macros_1(t):$/;"	f
p_opt_signed_0	./arch/isa_parser.py	/^    def p_opt_signed_0(self, t):$/;"	m	class:ISAParser
p_opt_signed_1	./arch/isa_parser.py	/^    def p_opt_signed_1(self, t):$/;"	m	class:ISAParser
p_output	./arch/isa_parser.py	/^    def p_output(self, t):$/;"	m	class:ISAParser
p_output_type	./arch/isa_parser.py	/^    def p_output_type(self, t):$/;"	m	class:ISAParser
p_pair__assign	./mem/slicc/parser.py	/^    def p_pair__assign(self, p):$/;"	m	class:SLICC
p_pair__literal	./mem/slicc/parser.py	/^    def p_pair__literal(self, p):$/;"	m	class:SLICC
p_pairs__empty	./mem/slicc/parser.py	/^    def p_pairs__empty(self, p):$/;"	m	class:SLICC
p_pairs__list	./mem/slicc/parser.py	/^    def p_pairs__list(self, p):$/;"	m	class:SLICC
p_pairsx__many	./mem/slicc/parser.py	/^    def p_pairsx__many(self, p):$/;"	m	class:SLICC
p_pairsx__one	./mem/slicc/parser.py	/^    def p_pairsx__one(self, p):$/;"	m	class:SLICC
p_param	./mem/slicc/parser.py	/^    def p_param(self, p):$/;"	m	class:SLICC
p_param__default_bool	./mem/slicc/parser.py	/^    def p_param__default_bool(self, p):$/;"	m	class:SLICC
p_param__default_number	./mem/slicc/parser.py	/^    def p_param__default_number(self, p):$/;"	m	class:SLICC
p_param__default_string	./mem/slicc/parser.py	/^    def p_param__default_string(self, p):$/;"	m	class:SLICC
p_param__pointer	./mem/slicc/parser.py	/^    def p_param__pointer(self, p):$/;"	m	class:SLICC
p_param__pointer_default	./mem/slicc/parser.py	/^    def p_param__pointer_default(self, p):$/;"	m	class:SLICC
p_param_list_0	./arch/isa_parser.py	/^    def p_param_list_0(self, t):$/;"	m	class:ISAParser
p_param_list_1	./arch/isa_parser.py	/^    def p_param_list_1(self, t):$/;"	m	class:ISAParser
p_params__many	./mem/slicc/parser.py	/^    def p_params__many(self, p):$/;"	m	class:SLICC
p_params__none	./mem/slicc/parser.py	/^    def p_params__none(self, p):$/;"	m	class:SLICC
p_params__one	./mem/slicc/parser.py	/^    def p_params__one(self, p):$/;"	m	class:SLICC
p_positional_arg_list_0	./arch/isa_parser.py	/^    def p_positional_arg_list_0(self, t):$/;"	m	class:ISAParser
p_positional_arg_list_1	./arch/isa_parser.py	/^    def p_positional_arg_list_1(self, t):$/;"	m	class:ISAParser
p_positional_arg_list_2	./arch/isa_parser.py	/^    def p_positional_arg_list_2(self, t):$/;"	m	class:ISAParser
p_positional_param_list_0	./arch/isa_parser.py	/^    def p_positional_param_list_0(self, t):$/;"	m	class:ISAParser
p_positional_param_list_1	./arch/isa_parser.py	/^    def p_positional_param_list_1(self, t):$/;"	m	class:ISAParser
p_positional_param_list_2	./arch/isa_parser.py	/^    def p_positional_param_list_2(self, t):$/;"	m	class:ISAParser
p_push_format_id	./arch/isa_parser.py	/^    def p_push_format_id(self, t):$/;"	m	class:ISAParser
p_rom_block	./arch/micro_asm.py	/^def p_rom_block(t):$/;"	f
p_rom_or_macro_0	./arch/micro_asm.py	/^def p_rom_or_macro_0(t):$/;"	f
p_rom_or_macros_0	./arch/micro_asm.py	/^def p_rom_or_macros_0(t):$/;"	f
p_rom_or_macros_1	./arch/micro_asm.py	/^def p_rom_or_macros_1(t):$/;"	f
p_specification	./arch/isa_parser.py	/^    def p_specification(self, t):$/;"	m	class:ISAParser
p_split	./arch/isa_parser.py	/^    def p_split(self, t):$/;"	m	class:ISAParser
p_statement	./arch/micro_asm.py	/^def p_statement(t):$/;"	f
p_statement__assign	./mem/slicc/parser.py	/^    def p_statement__assign(self, p):$/;"	m	class:SLICC
p_statement__check_allocate	./mem/slicc/parser.py	/^    def p_statement__check_allocate(self, p):$/;"	m	class:SLICC
p_statement__check_next_cycle	./mem/slicc/parser.py	/^    def p_statement__check_next_cycle(self, p):$/;"	m	class:SLICC
p_statement__check_stop	./mem/slicc/parser.py	/^    def p_statement__check_stop(self, p):$/;"	m	class:SLICC
p_statement__enqueue	./mem/slicc/parser.py	/^    def p_statement__enqueue(self, p):$/;"	m	class:SLICC
p_statement__enqueue_latency	./mem/slicc/parser.py	/^    def p_statement__enqueue_latency(self, p):$/;"	m	class:SLICC
p_statement__expression	./mem/slicc/parser.py	/^    def p_statement__expression(self, p):$/;"	m	class:SLICC
p_statement__if	./mem/slicc/parser.py	/^    def p_statement__if(self, p):$/;"	m	class:SLICC
p_statement__if_else_if	./mem/slicc/parser.py	/^    def p_statement__if_else_if(self, p):$/;"	m	class:SLICC
p_statement__peek	./mem/slicc/parser.py	/^    def p_statement__peek(self, p):$/;"	m	class:SLICC
p_statement__return	./mem/slicc/parser.py	/^    def p_statement__return(self, p):$/;"	m	class:SLICC
p_statement__stall_and_wait	./mem/slicc/parser.py	/^    def p_statement__stall_and_wait(self, p):$/;"	m	class:SLICC
p_statements_0	./arch/micro_asm.py	/^def p_statements_0(t):$/;"	f
p_statements_1	./arch/micro_asm.py	/^def p_statements_1(t):$/;"	f
p_statements__inner	./mem/slicc/parser.py	/^    def p_statements__inner(self, p):$/;"	m	class:SLICC
p_statements__none	./mem/slicc/parser.py	/^    def p_statements__none(self, p):$/;"	m	class:SLICC
p_statements_inner__many	./mem/slicc/parser.py	/^    def p_statements_inner__many(self, p):$/;"	m	class:SLICC
p_statements_inner__one	./mem/slicc/parser.py	/^    def p_statements_inner__one(self, p):$/;"	m	class:SLICC
p_top_level_decode_block	./arch/isa_parser.py	/^    def p_top_level_decode_block(self, t):$/;"	m	class:ISAParser
p_type__one	./mem/slicc/parser.py	/^    def p_type__one(self, p):$/;"	m	class:SLICC
p_type_enum	./mem/slicc/parser.py	/^    def p_type_enum(self, p):$/;"	m	class:SLICC
p_type_enums__empty	./mem/slicc/parser.py	/^    def p_type_enums__empty(self, p):$/;"	m	class:SLICC
p_type_enums__list	./mem/slicc/parser.py	/^    def p_type_enums__list(self, p):$/;"	m	class:SLICC
p_type_member__0	./mem/slicc/parser.py	/^    def p_type_member__0(self, p):$/;"	m	class:SLICC
p_type_members__empty	./mem/slicc/parser.py	/^    def p_type_members__empty(self, p):$/;"	m	class:SLICC
p_type_members__list	./mem/slicc/parser.py	/^    def p_type_members__list(self, p):$/;"	m	class:SLICC
p_type_state	./mem/slicc/parser.py	/^    def p_type_state(self, p):$/;"	m	class:SLICC
p_type_states__empty	./mem/slicc/parser.py	/^    def p_type_states__empty(self, p):$/;"	m	class:SLICC
p_type_states__list	./mem/slicc/parser.py	/^    def p_type_states__list(self, p):$/;"	m	class:SLICC
p_types__empty	./mem/slicc/parser.py	/^    def p_types__empty(self, p):$/;"	m	class:SLICC
p_types__multiple	./mem/slicc/parser.py	/^    def p_types__multiple(self, p):$/;"	m	class:SLICC
p_types__one	./mem/slicc/parser.py	/^    def p_types__one(self, p):$/;"	m	class:SLICC
p_typestr__multi	./mem/slicc/parser.py	/^    def p_typestr__multi(self, p):$/;"	m	class:SLICC
p_typestr__single	./mem/slicc/parser.py	/^    def p_typestr__single(self, p):$/;"	m	class:SLICC
p_var	./mem/slicc/parser.py	/^    def p_var(self, p):$/;"	m	class:SLICC
p_void	./mem/slicc/parser.py	/^    def p_void(self, p):$/;"	m	class:SLICC
pa	./arch/arm/miscregs.hh	/^        Bitfield<39, 12> pa;$/;"	m	namespace:ArmISA
packet	./base/inet.hh	/^    EthPacketPtr packet() { return p; }$/;"	f	class:Net::EthPtr
packet	./base/inet.hh	/^    EthPacketPtr packet() { return p; }$/;"	f	class:Net::Ip6Ptr
packet	./base/inet.hh	/^    EthPacketPtr packet() { return p; }$/;"	f	class:Net::IpPtr
packet	./base/inet.hh	/^    EthPacketPtr packet() { return p; }$/;"	f	class:Net::TcpPtr
packet	./base/inet.hh	/^    EthPacketPtr packet() { return p; }$/;"	f	class:Net::UdpPtr
packet	./base/inet.hh	/^    const EthPacketPtr packet() const { return p; }$/;"	f	class:Net::EthPtr
packet	./base/inet.hh	/^    const EthPacketPtr packet() const { return p; }$/;"	f	class:Net::Ip6Ptr
packet	./base/inet.hh	/^    const EthPacketPtr packet() const { return p; }$/;"	f	class:Net::IpPtr
packet	./base/inet.hh	/^    const EthPacketPtr packet() const { return p; }$/;"	f	class:Net::TcpPtr
packet	./base/inet.hh	/^    const EthPacketPtr packet() const { return p; }$/;"	f	class:Net::UdpPtr
packet	./cpu/minor/fetch1.hh	/^        PacketPtr packet;$/;"	m	class:Minor::Fetch1::FetchRequest
packet	./cpu/minor/lsq.hh	/^        PacketPtr packet;$/;"	m	class:Minor::LSQ::LSQRequest
packet	./cpu/minor/pipe_data.hh	/^    Packet *packet;$/;"	m	class:Minor::ForwardLineData
packet	./dev/net/dist_etherlink.hh	/^        EthPacketPtr packet;$/;"	m	class:DistEtherLink::Link
packet	./dev/net/dist_iface.hh	/^            EthPacketPtr packet;$/;"	m	struct:DistIface::RecvScheduler::Desc
packet	./dev/net/etherbus.hh	/^    EthPacketPtr packet;$/;"	m	class:EtherBus
packet	./dev/net/etherlink.hh	/^        EthPacketPtr packet;$/;"	m	class:EtherLink::Link
packet	./dev/net/pktfifo.hh	/^    EthPacketPtr packet;$/;"	m	struct:PacketFifoEntry
packetAvailable	./dev/net/i8254xGBe.cc	/^IGbE::TxDescCache::packetAvailable()$/;"	f	class:IGbE::TxDescCache
packetBuffer	./dev/net/ethertap.hh	/^    std::queue<EthPacketPtr> packetBuffer;$/;"	m	class:EtherTap
packetDone	./dev/net/i8254xGBe.cc	/^IGbE::RxDescCache::packetDone()$/;"	f	class:IGbE::RxDescCache
packetIn	./dev/net/dist_iface.hh	/^    EthPacketPtr packetIn() { return recvScheduler.popPacket(); }$/;"	f	class:DistIface
packetInFlight	./cpu/minor/lsq.hh	/^        bool packetInFlight;$/;"	m	class:Minor::LSQ::SingleDataRequest
packetMultiDesc	./dev/net/i8254xGBe.hh	/^        bool packetMultiDesc() { return pktMultiDesc;}$/;"	f	class:IGbE::TxDescCache
packetOut	./dev/net/dist_iface.cc	/^DistIface::packetOut(EthPacketPtr pkt, Tick send_delay)$/;"	f	class:DistIface
packetQueue	./mem/simple_mem.hh	/^    std::list<DeferredPacket> packetQueue;$/;"	m	class:SimpleMemory
packetSent	./cpu/minor/lsq.hh	/^        bool packetSent;$/;"	m	class:Minor::LSQ::SingleDataRequest
packetWaiting	./dev/net/i8254xGBe.hh	/^        bool packetWaiting() { return pktWaiting; }$/;"	f	class:IGbE::TxDescCache
packets	./dev/net/pktfifo.hh	/^    unsigned packets() const { return fifo.size(); }$/;"	f	class:PacketFifo
paco	./arch/mips/dt_constants.hh	/^    Bitfield<0> paco;$/;"	m	namespace:MipsISA
pad	./arch/arm/linux/linux.hh	/^        uint16_t pad;$/;"	m	struct:ArmLinux64::__anon79
pad	./kern/tru64/tru64.hh	/^        int64_t            pad[2];         \/\/!< pad$/;"	m	struct:Tru64::nxm_sched_state
pad	./kern/tru64/tru64.hh	/^        uint32_t  pad;          \/\/!< padding$/;"	m	struct:Tru64::tbl_sysinfo
pad0	./cpu/kvm/x86_cpu.cc	/^    uint8_t pad0;$/;"	m	struct:FXSave	file:
pad1	./cpu/kvm/x86_cpu.cc	/^            uint16_t pad1;$/;"	m	struct:FXSave::__anon38::__anon39	file:
pad1	./kern/tru64/tru64.hh	/^        int pad1;               \/\/!< pad1$/;"	m	struct:Tru64::nxm_task_attr
pad1	./kern/tru64/tru64.hh	/^        unsigned short pad1;            \/\/!< pad1$/;"	m	struct:Tru64::nxm_shared
pad2	./cpu/kvm/x86_cpu.cc	/^            uint16_t pad2;$/;"	m	struct:FXSave::__anon38::__anon39	file:
pad2	./kern/tru64/tru64.hh	/^        int64_t pad2;           \/\/!< pad2$/;"	m	struct:Tru64::nxm_task_attr
pad2	./kern/tru64/tru64.hh	/^        uint64_t pad2[2];       \/\/!< pad2$/;"	m	struct:Tru64::nxm_thread_attr
padcell	./arch/alpha/aout_machdep.h	/^    uint16_t    padcell;        \/\/\/< padding$/;"	m	struct:aout_exechdr
padding	./base/bitmap.hh	/^        uint8_t padding;$/;"	m	struct:Bitmap::BmpPixel32
padding	./base/framebuffer.hh	/^    uint8_t padding;$/;"	m	struct:Pixel
padding	./base/vnc/vncinput.hh	/^        uint8_t padding;$/;"	m	struct:VncInput::PixelEncodingsMessage
padding	./base/vnc/vncinput.hh	/^        uint8_t padding[2];$/;"	m	struct:VncInput::KeyEventMessage
padding	./base/vnc/vncinput.hh	/^        uint8_t padding[3];$/;"	m	struct:VncInput::ClientCutTextMessage
padding	./base/vnc/vncinput.hh	/^        uint8_t padding[3];$/;"	m	struct:VncInput::PixelFormat
padding	./base/vnc/vncinput.hh	/^        uint8_t padding[3];$/;"	m	struct:VncInput::PixelFormatMessage
padding	./base/vnc/vncserver.hh	/^        uint8_t padding;$/;"	m	struct:VncServer::FrameBufferUpdate
padding	./base/vnc/vncserver.hh	/^        uint8_t padding[3];$/;"	m	struct:VncServer::ServerCutText
paddr	./arch/alpha/pagetable.hh	/^    Addr paddr() const { return _pfn() << PageShift; }$/;"	f	struct:AlphaISA::PageTableEntry
paddr	./arch/arm/table_walker.hh	/^        Addr paddr() const$/;"	f	class:ArmISA::TableWalker::L1Descriptor
paddr	./arch/arm/table_walker.hh	/^        Addr paddr() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
paddr	./arch/arm/table_walker.hh	/^        Addr paddr(Addr va) const$/;"	f	class:ArmISA::TableWalker::L1Descriptor
paddr	./arch/arm/table_walker.hh	/^        Addr paddr(Addr va) const$/;"	f	class:ArmISA::TableWalker::L2Descriptor
paddr	./arch/arm/table_walker.hh	/^        Addr paddr(Addr va) const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
paddr	./arch/sparc/pagetable.hh	/^    Addr paddr()    const { assert(populated); return mbits(entry4u, 39,13);}$/;"	f	class:SparcISA::PageTableEntry
paddr	./arch/x86/pagetable.hh	/^        Addr paddr;$/;"	m	struct:X86ISA::TlbEntry
paddrMask	./arch/sparc/pagetable.hh	/^    Addr paddrMask() const { assert(populated); return paddr() & ~sizeMask(); }$/;"	f	class:SparcISA::PageTableEntry
pae	./arch/x86/regs/misc.hh	/^        Bitfield<5> pae; \/\/ Physical-Address Extension$/;"	m	namespace:X86ISA
paePdtb	./arch/x86/regs/misc.hh	/^        Bitfield<31, 5> paePdtb; \/\/ PAE Addressing Page-Directory-Table$/;"	m	namespace:X86ISA
pael1	./arch/x86/pagetable.hh	/^        Bitfield<20, 12> pael1;$/;"	m	namespace:X86ISA
pael2	./arch/x86/pagetable.hh	/^        Bitfield<29, 21> pael2;$/;"	m	namespace:X86ISA
pael3	./arch/x86/pagetable.hh	/^        Bitfield<31, 30> pael3;$/;"	m	namespace:X86ISA
page	./arch/alpha/pagetable.hh	/^    Addr page() const { return addr & PageMask; }$/;"	f	struct:AlphaISA::VAddr
page	./arch/power/pagetable.hh	/^    page() const$/;"	f	struct:PowerISA::VAddr
page	./dev/arm/flash_device.hh	/^        uint32_t page;$/;"	m	struct:FlashDevice::PageMapEntry
pageAddress	./mem/ruby/structures/Prefetcher.cc	/^Prefetcher::pageAddress(Addr addr) const$/;"	f	class:Prefetcher
pageAlign	./mem/page_table.hh	/^    Addr pageAlign(Addr a)  { return (a & ~offsetMask); }$/;"	f	class:PageTableBase
pageBits	./cpu/testers/traffic_gen/generators.hh	/^    const unsigned int pageBits;$/;"	m	class:DramGen
pageBytes	./mem/cache/prefetch/base.hh	/^    const Addr pageBytes;$/;"	m	class:BasePrefetcher
pageFault	./arch/x86/pagetable_walker.cc	/^Walker::WalkerState::pageFault(bool present)$/;"	f	class:X86ISA::Walker::WalkerState
pageHitRate	./mem/dram_ctrl.hh	/^    Stats::Formula pageHitRate;$/;"	m	class:DRAMCtrl
pageMap	./cpu/decode_cache.hh	/^    PageMap pageMap;$/;"	m	class:DecodeCache::AddrMap
pageMgmt	./mem/dram_ctrl.hh	/^    Enums::PageManage pageMgmt;$/;"	m	class:DRAMCtrl
pageOffset	./mem/page_table.hh	/^    Addr pageOffset(Addr a) { return (a &  offsetMask); }$/;"	f	class:PageTableBase
pagePtr	./sim/system.hh	/^    Addr pagePtr;$/;"	m	class:System
pageSize	./cpu/kvm/base.hh	/^    const long pageSize;$/;"	m	class:BaseKvmCPU
pageSize	./cpu/kvm/perfevent.hh	/^    long pageSize;$/;"	m	class:PerfKvmCounter
pageSize	./cpu/testers/traffic_gen/generators.hh	/^    const unsigned int pageSize;$/;"	m	class:DramGen
pageSize	./dev/arm/flash_device.hh	/^    const uint32_t pageSize;$/;"	m	class:FlashDevice
pageSize	./mem/page_table.hh	/^    const Addr pageSize;$/;"	m	class:PageTableBase
pageSizeNtoStatBin	./arch/arm/table_walker.cc	/^TableWalker::pageSizeNtoStatBin(uint8_t N)$/;"	f	class:TableWalker
pageSizes	./arch/sparc/pagetable.cc	/^int PageTableEntry::pageSizes[] =$/;"	m	class:SparcISA::PageTableEntry	file:
pageSizes	./arch/sparc/pagetable.hh	/^    static int pageSizes[6];$/;"	m	class:SparcISA::PageTableEntry
pageStart	./arch/alpha/pagetable.hh	/^    pageStart()$/;"	f	struct:AlphaISA::TlbEntry
pageStart	./arch/arm/pagetable.hh	/^    pageStart() const$/;"	f	struct:ArmISA::TlbEntry
pageStart	./arch/mips/pagetable.hh	/^    Addr pageStart()$/;"	f	struct:MipsISA::TlbEntry
pageStart	./arch/power/tlb.hh	/^    pageStart()$/;"	f	struct:PowerISA::TlbEntry
pageStart	./arch/sparc/pagetable.hh	/^    pageStart()$/;"	f	struct:SparcISA::TlbEntry
pageStart	./arch/x86/pagetable.hh	/^        Addr pageStart()$/;"	f	struct:X86ISA::TlbEntry
pageTablePhysAddr	./arch/x86/system.hh	/^    const uint64_t pageTablePhysAddr = 0x70000;$/;"	m	namespace:X86ISA
page_policy	./mem/DRAMCtrl.py	/^    page_policy = 'close_adaptive'$/;"	v	class:HMC_2500_x32
page_policy	./mem/DRAMCtrl.py	/^    page_policy = Param.PageManage('open_adaptive', "Page management policy")$/;"	v	class:DRAMCtrl
page_size	./dev/arm/FlashDevice.py	/^    page_size = Param.MemorySize("2kB", "Size of one disk page")$/;"	v	class:FlashDevice
pagesPerBlock	./dev/arm/flash_device.hh	/^    uint32_t pagesPerBlock;$/;"	m	class:FlashDevice
pagesPerDisk	./dev/arm/flash_device.hh	/^    uint32_t pagesPerDisk;$/;"	m	class:FlashDevice
pagesize	./arch/arm/linux/atag.hh	/^    void pagesize(uint32_t i) { storage[3] = i; }$/;"	f	class:AtagCore
paging	./arch/x86/regs/misc.hh	/^        Bitfield<6> paging;$/;"	m	namespace:X86ISA
pair	./doxygen/stl.hh	/^template <class X, class Y> class pair {$/;"	c	namespace:std
pal	./arch/alpha/AlphaSystem.py	/^    pal = Param.String("file that contains palcode")$/;"	v	class:AlphaSystem
pal	./arch/alpha/system.hh	/^    ObjectFile *pal;$/;"	m	class:AlphaSystem
palSymtab	./arch/alpha/system.hh	/^    SymbolTable *palSymtab;$/;"	m	class:AlphaSystem
panic	./base/misc.hh	104;"	d
panic	./python/m5/util/__init__.py	/^def panic(fmt, *args):$/;"	f
panicFsOnlyPseudoInst	./sim/pseudo_inst.cc	/^panicFsOnlyPseudoInst(const char *name)$/;"	f	namespace:PseudoInst
panicOnErr	./dev/arm/gpu_nomali.hh	/^    static void panicOnErr(nomali_error_t err, const char *msg) {$/;"	f	class:NoMaliGpu
panicStr	./sim/faults.hh	/^    std::string panicStr;$/;"	m	class:UnimpFault
panic_if	./base/misc.hh	123;"	d
panic_on_oops	./arch/arm/ArmSystem.py	/^                                   "guest kernel oopses")$/;"	v	class:GenericArmSystem
panic_on_panic	./arch/arm/ArmSystem.py	/^                                    "guest kernel panics")$/;"	v	class:GenericArmSystem
paramIn	./arch/x86/types.cc	/^paramIn(CheckpointIn &cp, const string &name, ExtMachInst &machInst)$/;"	f
paramIn	./sim/serialize.cc	/^paramIn(CheckpointIn &cp, const string &name, T &param)$/;"	f
paramIn	./sim/serialize.hh	/^void paramIn(CheckpointIn &cp, const std::string &name,$/;"	f
paramOut	./arch/x86/types.cc	/^paramOut(CheckpointOut &cp, const string &name, ExtMachInst const &machInst)$/;"	f
paramOut	./sim/serialize.cc	/^paramOut(CheckpointOut &os, const string &name, const T &param)$/;"	f
paramOut	./sim/serialize.hh	/^void paramOut(CheckpointOut &cp, const std::string &name,$/;"	f
parameters	./sim/cxx_config.hh	/^    std::map<std::string, ParamDesc *> parameters;$/;"	m	class:CxxConfigDirectoryEntry
params	./arch/alpha/interrupts.hh	/^    params() const$/;"	f	class:AlphaISA::Interrupts
params	./arch/alpha/isa.cc	/^ISA::params() const$/;"	f	class:AlphaISA::ISA
params	./arch/alpha/linux/system.hh	/^    const Params *params() const { return (const Params *)_params; }$/;"	f	class:LinuxAlphaSystem
params	./arch/alpha/system.hh	/^    const Params *params() const { return (const Params *)_params; }$/;"	f	class:AlphaSystem
params	./arch/arm/freebsd/system.hh	/^    params() const$/;"	f	class:FreebsdArmSystem
params	./arch/arm/interrupts.hh	/^    params() const$/;"	f	class:ArmISA::Interrupts
params	./arch/arm/isa.cc	/^ISA::params() const$/;"	f	class:ArmISA::ISA
params	./arch/arm/linux/system.hh	/^    params() const$/;"	f	class:LinuxArmSystem
params	./arch/arm/nativetrace.hh	/^    params() const$/;"	f	class:Trace::ArmNativeTrace
params	./arch/arm/system.hh	/^    params() const$/;"	f	class:ArmSystem
params	./arch/arm/system.hh	/^    params() const$/;"	f	class:GenericArmSystem
params	./arch/arm/table_walker.hh	/^    params() const$/;"	f	class:ArmISA::TableWalker
params	./arch/arm/tlb.hh	/^    params() const$/;"	f	class:ArmISA::TLB
params	./arch/mips/interrupts.hh	/^    params() const$/;"	f	class:MipsISA::Interrupts
params	./arch/mips/isa.cc	/^ISA::params() const$/;"	f	class:MipsISA::ISA
params	./arch/mips/system.hh	/^    const Params *params() const { return (const Params *)_params; }$/;"	f	class:MipsSystem
params	./arch/power/interrupts.hh	/^    params() const$/;"	f	class:PowerISA::Interrupts
params	./arch/power/isa.cc	/^ISA::params() const$/;"	f	class:PowerISA::ISA
params	./arch/sparc/interrupts.hh	/^    params() const$/;"	f	class:SparcISA::Interrupts
params	./arch/sparc/isa.cc	/^ISA::params() const$/;"	f	class:SparcISA::ISA
params	./arch/sparc/system.hh	/^    const Params *params() const { return (const Params *)_params; }$/;"	f	class:SparcSystem
params	./arch/x86/interrupts.hh	/^    params() const$/;"	f	class:X86ISA::Interrupts
params	./arch/x86/isa.cc	/^ISA::params() const$/;"	f	class:X86ISA::ISA
params	./arch/x86/pagetable_walker.hh	/^        params() const$/;"	f	class:X86ISA::Walker
params	./arch/x86/system.hh	/^    const Params *params() const { return (const Params *)_params; }$/;"	f	class:X86System
params	./base/cp_annotate.hh	/^        params() const$/;"	f	class:CPA
params	./cpu/base.hh	/^    const Params *params() const$/;"	f	class:BaseCPU
params	./dev/alpha/backdoor.hh	/^    params() const$/;"	f	class:AlphaBackdoor
params	./dev/alpha/tsunami_cchip.hh	/^    params() const$/;"	f	class:TsunamiCChip
params	./dev/alpha/tsunami_io.hh	/^    params() const$/;"	f	class:TsunamiIO
params	./dev/alpha/tsunami_pchip.hh	/^    params() const$/;"	f	class:TsunamiPChip
params	./dev/arm/amba_fake.hh	/^    params() const$/;"	f	class:AmbaFake
params	./dev/arm/base_gic.cc	/^BaseGic::params() const$/;"	f	class:BaseGic
params	./dev/arm/gic_pl390.hh	/^    params() const$/;"	f	class:Pl390
params	./dev/arm/kmi.hh	/^    params() const$/;"	f	class:Pl050
params	./dev/arm/pl111.hh	/^    params() const$/;"	f	class:Pl111
params	./dev/arm/realview.hh	/^    params() const {$/;"	f	class:RealView
params	./dev/arm/rtc_pl031.hh	/^    params() const$/;"	f	class:PL031
params	./dev/arm/rv_ctrl.hh	/^    params() const$/;"	f	class:RealViewCtrl
params	./dev/arm/timer_cpulocal.hh	/^    params() const$/;"	f	class:CpuLocalTimer
params	./dev/arm/timer_sp804.hh	/^    params() const$/;"	f	class:Sp804
params	./dev/arm/vgic.hh	/^    params() const$/;"	f	class:VGic
params	./dev/baddev.hh	/^    params() const$/;"	f	class:BadDevice
params	./dev/io_device.hh	/^    params() const$/;"	f	class:BasicPioDevice
params	./dev/io_device.hh	/^    params() const$/;"	f	class:PioDevice
params	./dev/isa_fake.hh	/^    params() const$/;"	f	class:IsaFake
params	./dev/mips/malta_cchip.hh	/^    params() const$/;"	f	class:MaltaCChip
params	./dev/mips/malta_io.hh	/^    params() const$/;"	f	class:MaltaIO
params	./dev/net/dist_etherlink.hh	/^    params() const$/;"	f	class:DistEtherLink
params	./dev/net/etherbus.hh	/^    params() const$/;"	f	class:EtherBus
params	./dev/net/etherdevice.hh	/^    params() const$/;"	f	class:EtherDevBase
params	./dev/net/etherdevice.hh	/^    params() const$/;"	f	class:EtherDevice
params	./dev/net/etherlink.hh	/^    params() const$/;"	f	class:EtherLink
params	./dev/net/etherobject.hh	/^    params() const$/;"	f	class:EtherObject
params	./dev/net/ethertap.hh	/^    params() const$/;"	f	class:EtherTap
params	./dev/net/i8254xGBe.hh	/^    params() const {$/;"	f	class:IGbE
params	./dev/net/ns_gige.hh	/^    const Params *params() const {$/;"	f	class:NSGigE
params	./dev/net/sinic.hh	/^    const Params *params() const { return (const Params *)_params; }$/;"	f	class:Sinic::Base
params	./dev/pci/copy_engine.hh	/^    params() const$/;"	f	class:CopyEngine
params	./dev/sparc/dtod.hh	/^    params() const$/;"	f	class:DumbTOD
params	./dev/sparc/iob.hh	/^    params() const$/;"	f	class:Iob
params	./dev/sparc/mm_disk.hh	/^    params() const$/;"	f	class:MmDisk
params	./dev/storage/ide_ctrl.hh	/^    const Params *params() const { return (const Params *)_params; }$/;"	f	class:IdeController
params	./dev/uart.hh	/^    params() const$/;"	f	class:Uart
params	./dev/uart8250.hh	/^    params() const$/;"	f	class:Uart8250
params	./dev/x86/i8042.hh	/^    params() const$/;"	f	class:X86ISA::I8042
params	./dev/x86/i82094aa.hh	/^    params() const$/;"	f	class:X86ISA::I82094AA
params	./dev/x86/i8237.hh	/^    params() const$/;"	f	class:X86ISA::I8237
params	./dev/x86/i8254.hh	/^    params() const$/;"	f	class:X86ISA::I8254
params	./dev/x86/i8259.hh	/^    params() const$/;"	f	class:X86ISA::I8259
params	./dev/x86/intdev.hh	/^    params() const$/;"	f	class:X86ISA::IntLine
params	./dev/x86/intdev.hh	/^    params() const$/;"	f	class:X86ISA::IntSinkPin
params	./dev/x86/intdev.hh	/^    params() const$/;"	f	class:X86ISA::IntSourcePin
params	./dev/x86/south_bridge.hh	/^    params() const$/;"	f	class:SouthBridge
params	./dev/x86/speaker.hh	/^    params() const$/;"	f	class:X86ISA::Speaker
params	./mem/abstract_mem.hh	/^    params() const$/;"	f	class:AbstractMemory
params	./mem/comm_monitor.hh	/^    const Params* params() const$/;"	f	class:CommMonitor
params	./mem/mem_checker_monitor.hh	/^    const Params* params() const$/;"	f	class:MemCheckerMonitor
params	./mem/mem_object.hh	/^    const Params *params() const$/;"	f	class:MemObject
params	./mem/ruby/network/BasicLink.hh	/^    const Params *params() const { return (const Params *)_params; }$/;"	f	class:BasicExtLink
params	./mem/ruby/network/BasicLink.hh	/^    const Params *params() const { return (const Params *)_params; }$/;"	f	class:BasicIntLink
params	./mem/ruby/network/BasicLink.hh	/^    const Params *params() const { return (const Params *)_params; }$/;"	f	class:BasicLink
params	./mem/ruby/network/BasicRouter.hh	/^    const Params *params() const { return (const Params *)_params; }$/;"	f	class:BasicRouter
params	./mem/ruby/network/Network.hh	/^    const Params * params() const$/;"	f	class:Network
params	./mem/ruby/network/fault_model/FaultModel.hh	/^    const Params *params() const { return (const Params *)_params; }$/;"	f	class:FaultModel
params	./mem/ruby/network/simple/SimpleLink.hh	/^    const Params *params() const { return (const Params *)_params; }$/;"	f	class:SimpleExtLink
params	./mem/ruby/network/simple/SimpleLink.hh	/^    const Params *params() const { return (const Params *)_params; }$/;"	f	class:SimpleIntLink
params	./mem/ruby/slicc_interface/AbstractController.hh	/^    const Params *params() const { return (const Params *)_params; }$/;"	f	class:AbstractController
params	./sim/root.hh	/^    params() const$/;"	f	class:Root
params	./sim/sim_object.hh	/^    const Params *params() const { return _params; }$/;"	f	class:SimObject
params	./sim/system.hh	/^    const Params *params() const { return (const Params *)_params; }$/;"	f	class:System
parent	./arch/arm/stage2_mmu.hh	/^        Stage2MMU &parent;$/;"	m	class:ArmISA::Stage2MMU::Stage2Translation
parent	./base/trie.hh	/^        Node *parent;$/;"	m	struct:Trie::Node
parent	./cpu/nativetrace.hh	/^    NativeTrace * parent;$/;"	m	class:Trace::NativeTraceRecord
parent	./dev/arm/RealView.py	/^    parent = Param.RealViewCtrl(Parent.any, "RealView controller")$/;"	v	class:RealViewOsc
parent	./dev/arm/generic_timer.hh	/^    GenericTimer &parent;$/;"	m	class:GenericTimerISA
parent	./dev/arm/hdlcd.hh	/^        HDLcd &parent;$/;"	m	class:HDLcd::DmaEngine
parent	./dev/arm/hdlcd.hh	/^        HDLcd &parent;$/;"	m	class:HDLcd::PixelPump
parent	./dev/arm/timer_cpulocal.hh	/^        CpuLocalTimer *parent;$/;"	m	class:CpuLocalTimer::Timer
parent	./dev/arm/timer_sp804.hh	/^        Sp804 *parent;$/;"	m	class:Sp804::Timer
parent	./dev/dma_device.hh	/^        DmaReadFifo *parent;$/;"	m	class:DmaReadFifo::DmaDoneEvent
parent	./dev/intel_8254_timer.hh	/^        Intel8254Timer *parent;$/;"	m	class:Intel8254Timer::Counter
parent	./dev/mc146818.hh	/^        MC146818 * parent;$/;"	m	struct:MC146818::RTCEvent
parent	./dev/mc146818.hh	/^        MC146818 * parent;$/;"	m	struct:MC146818::RTCTickEvent
parent	./dev/net/dist_etherlink.hh	/^        DistEtherLink *parent;$/;"	m	class:DistEtherLink::Link
parent	./dev/net/etherlink.hh	/^        EtherLink *const parent;$/;"	m	class:EtherLink::Link
parent	./dev/pixelpump.hh	/^        BasePixelPump &parent;$/;"	m	class:BasePixelPump::PixelEvent
parent	./dev/virtio/block.hh	/^        VirtIOBlock &parent;$/;"	m	class:VirtIOBlock::RequestQueue
parent	./dev/virtio/console.hh	/^        VirtIOConsole &parent;$/;"	m	class:VirtIOConsole::TermRecvQueue
parent	./dev/virtio/console.hh	/^        VirtIOConsole &parent;$/;"	m	class:VirtIOConsole::TermTransQueue
parent	./dev/virtio/fs9p.hh	/^        VirtIO9PBase &parent;$/;"	m	class:VirtIO9PBase::FSQueue
parent	./dev/virtio/fs9p.hh	/^        VirtIO9PDiod &parent;$/;"	m	class:VirtIO9PDiod::DiodDataEvent
parent	./dev/virtio/fs9p.hh	/^        VirtIO9PSocket &parent;$/;"	m	class:VirtIO9PSocket::SocketDataEvent
parent	./dev/x86/i8254.hh	/^        I8254 * parent;$/;"	m	class:X86ISA::I8254::X86Intel8254Timer
parent	./mem/probes/base.hh	/^        BaseMemProbe &parent;$/;"	m	class:BaseMemProbe::PacketListener
parent	./mem/stack_dist_calc.hh	/^        Node* parent;$/;"	m	struct:StackDistCalc::Node
parent	./sim/clock_domain.hh	/^    ClockDomain &parent;$/;"	m	class:DerivedClockDomain
parentBus	./arch/x86/bios/intelmp.hh	/^    uint8_t parentBus;$/;"	m	class:X86ISA::IntelMP::BusHierarchy
parent_bus	./arch/x86/bios/IntelMP.py	/^    parent_bus = Param.UInt8(0, 'bus id of this busses parent')$/;"	v	class:X86IntelMPBusHierarchy
parityError	./dev/x86/i8042.hh	/^        Bitfield<7> parityError;$/;"	m	class:X86ISA::I8042
parse	./base/inet.cc	/^EthAddr::parse(const std::string &addr)$/;"	f	class:Net::EthAddr
parseConfig	./cpu/testers/traffic_gen/traffic_gen.cc	/^TrafficGen::parseConfig()$/;"	f	class:TrafficGen
parseLine	./base/loader/hex_file.cc	/^HexFile::parseLine(char *Str, Addr *A, uint32_t *D)$/;"	f	class:HexFile
parseParam	./sim/serialize.cc	/^parseParam(const string &s, T &value)$/;"	f
parseParam	./sim/serialize.cc	/^parseParam(const string &s, bool &value)$/;"	f
parseParam	./sim/serialize.cc	/^parseParam(const string &s, double &value)$/;"	f
parseParam	./sim/serialize.cc	/^parseParam(const string &s, float &value)$/;"	f
parseParam	./sim/serialize.cc	/^parseParam(const string &s, string &value)$/;"	f
parsePort	./sim/cxx_manager.cc	/^CxxConfigManager::parsePort(const std::string &inp,$/;"	f	class:CxxConfigManager
parse_args	./python/m5/options.py	/^    def parse_args(self):$/;"	m	class:OptionParser
parse_file	./python/m5/util/grammar.py	/^    def parse_file(self, f, **kwargs):$/;"	m	class:Grammar
parse_isa_desc	./arch/isa_parser.py	/^    def parse_isa_desc(self, *args, **kwargs):$/;"	m	class:ISAParser
parse_options	./python/m5/main.py	/^def parse_options():$/;"	f
parse_string	./python/m5/util/grammar.py	/^    def parse_string(self, data, source='<string>', debug=None, tracking=0):$/;"	m	class:Grammar
parse_time	./python/m5/params.py	/^def parse_time(value):$/;"	f
partId	./arch/sparc/isa.hh	/^    uint16_t partId;$/;"	m	class:SparcISA::ISA
partitionDescSymtab	./arch/sparc/system.hh	/^    SymbolTable *partitionDescSymtab;$/;"	m	class:SparcSystem
partitionId	./arch/sparc/pagetable.hh	/^    int partitionId;$/;"	m	struct:SparcISA::TlbRange
partition_desc	./arch/sparc/SparcSystem.py	/^    partition_desc = Param.SimpleMemory($/;"	v	class:SparcSystem
partition_desc	./arch/sparc/system.hh	/^    ObjectFile *partition_desc;$/;"	m	class:SparcSystem
partition_desc_addr	./arch/sparc/SparcSystem.py	/^    partition_desc_addr = Param.Addr(_partition_desc_base,$/;"	v	class:SparcSystem
partition_desc_bin	./arch/sparc/SparcSystem.py	/^    partition_desc_bin = Param.String("file that contains the partition description")$/;"	v	class:SparcSystem
passedSelfTest	./dev/x86/i8042.hh	/^        Bitfield<2> passedSelfTest;$/;"	m	class:X86ISA::I8042
passes	./unittest/unittest.cc	/^unsigned passes() { return _passes; }$/;"	f	namespace:UnitTest
past	./cpu/timebuf.hh	/^    int past;$/;"	m	class:TimeBuffer
patBit	./arch/x86/pagetable.hh	/^        bool patBit;$/;"	m	struct:X86ISA::TlbEntry
path	./python/m5/SimObject.py	/^    def path(self):$/;"	f
path	./python/m5/proxy.py	/^    def path(self):$/;"	m	class:AllProxy
path	./python/m5/proxy.py	/^    def path(self):$/;"	m	class:AnyProxy
path	./python/m5/proxy.py	/^    def path(self):$/;"	m	class:AttrProxy
path	./sim/Root.py	/^    def path(self):$/;"	m	class:Root
path	./sim/serialize.cc	/^std::stack<std::string> Serializable::path;$/;"	m	class:Serializable	file:
path	./sim/serialize.hh	/^    static std::stack<std::string> path;$/;"	m	class:Serializable
pathconf	./kern/tru64/tru64_syscalls.hh	/^        pathconf = 247,$/;"	e	enum:SystemCalls::__anon102
pathlist	./unittest/genini.py	/^pathlist = [ '.' ]$/;"	v
payload	./base/inet.hh	/^    const uint8_t *payload() const { return bytes() + IP6_HDR_LEN$/;"	f	struct:Net::Ip6Hdr
payload	./base/inet.hh	/^    const uint8_t *payload() const { return bytes() + size(); }$/;"	f	struct:Net::EthHdr
payload	./base/inet.hh	/^    const uint8_t *payload() const { return bytes() + size(); }$/;"	f	struct:Net::IpHdr
payload	./base/inet.hh	/^    const uint8_t *payload() const { return bytes() + size(); }$/;"	f	struct:Net::TcpHdr
payload	./base/inet.hh	/^    const uint8_t *payload() const { return bytes() + size(); }$/;"	f	struct:Net::TcpOpt
payload	./base/inet.hh	/^    const uint8_t *payload() const { return bytes() + size(); }$/;"	f	struct:Net::UdpHdr
payload	./base/inet.hh	/^    uint8_t *payload() { return bytes() + IP6_HDR_LEN$/;"	f	struct:Net::Ip6Hdr
payload	./base/inet.hh	/^    uint8_t *payload() { return bytes() + size(); }$/;"	f	struct:Net::EthHdr
payload	./base/inet.hh	/^    uint8_t *payload() { return bytes() + size(); }$/;"	f	struct:Net::IpHdr
payload	./base/inet.hh	/^    uint8_t *payload() { return bytes() + size(); }$/;"	f	struct:Net::TcpHdr
payload	./base/inet.hh	/^    uint8_t *payload() { return bytes() + size(); }$/;"	f	struct:Net::TcpOpt
payload	./base/inet.hh	/^    uint8_t *payload() { return bytes() + size(); }$/;"	f	struct:Net::UdpHdr
payloadDelay	./mem/packet.hh	/^    uint32_t payloadDelay;$/;"	m	class:Packet
pb0	./arch/x86/regs/misc.hh	/^        Bitfield<2> pb0; \/\/ Performance monitoring pin control 0$/;"	m	namespace:X86ISA
pb1	./arch/x86/regs/misc.hh	/^        Bitfield<3> pb1; \/\/ Performance monitoring pin control 1$/;"	m	namespace:X86ISA
pb2	./arch/x86/regs/misc.hh	/^        Bitfield<4> pb2; \/\/ Performance monitoring pin control 2$/;"	m	namespace:X86ISA
pb3	./arch/x86/regs/misc.hh	/^        Bitfield<5> pb3; \/\/ Performance monitoring pin control 3$/;"	m	namespace:X86ISA
pba	./dev/net/i8254xGBe_defs.hh	/^    PBA pba;$/;"	m	struct:iGbReg::Regs
pc	./arch/alpha/faults.hh	/^    Addr pc;$/;"	m	class:AlphaISA::ItbFault
pc	./arch/alpha/remote_gdb.hh	/^            uint64_t pc;$/;"	m	struct:AlphaISA::RemoteGDB::AlphaGdbRegCache::__anon48
pc	./arch/arm/remote_gdb.hh	/^          uint64_t pc;$/;"	m	struct:ArmISA::RemoteGDB::AArch64GdbRegCache::__anon68
pc	./arch/generic/types.hh	/^    Addr pc() const { return _pc; }$/;"	f	class:GenericISA::SimplePCState
pc	./arch/generic/types.hh	/^    void pc(Addr val) { _pc = val; }$/;"	f	class:GenericISA::SimplePCState
pc	./arch/mips/pra_constants.hh	/^    Bitfield<4>      pc;$/;"	m	namespace:MipsISA
pc	./arch/mips/remote_gdb.hh	/^            uint32_t pc;$/;"	m	struct:MipsISA::RemoteGDB::MipsGdbRegCache::__anon83
pc	./arch/power/remote_gdb.hh	/^            uint32_t pc;$/;"	m	struct:PowerISA::RemoteGDB::PowerGdbRegCache::__anon53
pc	./arch/sparc/remote_gdb.hh	/^            uint32_t pc;$/;"	m	struct:SparcISA::RemoteGDB::SPARCGdbRegCache::__anon42
pc	./arch/sparc/remote_gdb.hh	/^            uint64_t pc;$/;"	m	struct:SparcISA::RemoteGDB::SPARC64GdbRegCache::__anon43
pc	./arch/x86/regs/misc.hh	/^        Bitfield<19> pc; \/\/ Pin control$/;"	m	namespace:X86ISA
pc	./cpu/base_dyn_inst.hh	/^    TheISA::PCState pc;$/;"	m	class:BaseDynInst
pc	./cpu/minor/dyn_inst.hh	/^    TheISA::PCState pc;$/;"	m	class:Minor::MinorDynInst
pc	./cpu/minor/fetch1.hh	/^        TheISA::PCState pc;$/;"	m	class:Minor::Fetch1::FetchRequest
pc	./cpu/minor/fetch1.hh	/^    TheISA::PCState pc;$/;"	m	class:Minor::Fetch1
pc	./cpu/minor/fetch2.hh	/^    TheISA::PCState pc;$/;"	m	class:Minor::Fetch2
pc	./cpu/minor/pipe_data.hh	/^    TheISA::PCState pc;$/;"	m	class:Minor::ForwardLineData
pc	./cpu/o3/comm.hh	/^        TheISA::PCState pc; \/\/ *F$/;"	m	struct:TimeBufStruct::commitComm
pc	./cpu/o3/comm.hh	/^    TheISA::PCState pc[Impl::MaxThreads];$/;"	m	struct:DefaultIEWDefaultCommit
pc	./cpu/o3/commit.hh	/^    TheISA::PCState pc[Impl::MaxThreads];$/;"	m	class:DefaultCommit
pc	./cpu/o3/fetch.hh	/^    TheISA::PCState pc[Impl::MaxThreads];$/;"	m	class:DefaultFetch
pc	./cpu/o3/probe/elastic_trace.hh	/^        Addr pc;$/;"	m	struct:ElasticTrace::TraceInfo
pc	./cpu/pc_event.hh	/^    Addr pc() const { return evpc; }$/;"	f	class:PCEvent
pc	./cpu/pred/bpred_unit.hh	/^        Addr pc;$/;"	m	struct:BPredUnit::PredictorHistory
pc	./cpu/trace/trace_cpu.hh	/^            Addr pc;$/;"	m	class:TraceCPU::ElasticDataGen::GraphNode
pc	./cpu/trace/trace_cpu.hh	/^            Addr pc;$/;"	m	struct:TraceCPU::FixedRetryGen::TraceElement
pc	./dev/pci/pcireg.h	/^        uint16_t pc;   \/* 0:2   vs$/;"	m	struct:PMCAP::__anon27
pc	./kern/tru64/tru64.hh	/^            uint64_t pc;        \/\/!< pc$/;"	m	struct:Tru64::nxm_thread_attr::__anon106
pc	./sim/insttracer.hh	/^    TheISA::PCState pc;$/;"	m	class:Trace::InstRecord
pcEventQueue	./sim/system.hh	/^    PCEventQueue pcEventQueue;$/;"	m	class:System
pcHash	./mem/cache/prefetch/stride.cc	/^StridePrefetcher::pcHash(Addr pc) const$/;"	f	class:StridePrefetcher
pcState	./cpu/base_dyn_inst.hh	/^    TheISA::PCState pcState() const { return pc; }$/;"	f	class:BaseDynInst
pcState	./cpu/base_dyn_inst.hh	/^    void pcState(const TheISA::PCState &val) { pc = val; }$/;"	f	class:BaseDynInst
pcState	./cpu/checker/thread_context.hh	/^    TheISA::PCState pcState()$/;"	f	class:CheckerThreadContext
pcState	./cpu/checker/thread_context.hh	/^    void pcState(const TheISA::PCState &val)$/;"	f	class:CheckerThreadContext
pcState	./cpu/minor/exec_context.hh	/^    pcState() const$/;"	f	class:Minor::ExecContext
pcState	./cpu/minor/exec_context.hh	/^    pcState(const TheISA::PCState &val)$/;"	f	class:Minor::ExecContext
pcState	./cpu/o3/commit.hh	/^    TheISA::PCState pcState(ThreadID tid) { return pc[tid]; }$/;"	f	class:DefaultCommit
pcState	./cpu/o3/commit.hh	/^    void pcState(const TheISA::PCState &val, ThreadID tid)$/;"	f	class:DefaultCommit
pcState	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::pcState(ThreadID tid)$/;"	f	class:FullO3CPU
pcState	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::pcState(const TheISA::PCState &val, ThreadID tid)$/;"	f	class:FullO3CPU
pcState	./cpu/o3/thread_context.hh	/^    virtual TheISA::PCState pcState()$/;"	f	class:O3ThreadContext
pcState	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::pcState(const TheISA::PCState &val)$/;"	f	class:O3ThreadContext
pcState	./cpu/simple_thread.hh	/^    pcState()$/;"	f	class:SimpleThread
pcState	./cpu/simple_thread.hh	/^    pcState(const TheISA::PCState &val)$/;"	f	class:SimpleThread
pcState	./cpu/thread_context.hh	/^    TheISA::PCState pcState() { return actualTC->pcState(); }$/;"	f	class:ProxyThreadContext
pcState	./cpu/thread_context.hh	/^    void pcState(const TheISA::PCState &val) { actualTC->pcState(val); }$/;"	f	class:ProxyThreadContext
pcStateNoRecord	./cpu/checker/thread_context.hh	/^    void pcStateNoRecord(const TheISA::PCState &val)$/;"	f	class:CheckerThreadContext
pcStateNoRecord	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::pcStateNoRecord(const TheISA::PCState &val)$/;"	f	class:O3ThreadContext
pcStateNoRecord	./cpu/simple_thread.hh	/^    pcStateNoRecord(const TheISA::PCState &val)$/;"	f	class:SimpleThread
pcStateNoRecord	./cpu/thread_context.hh	/^    void pcStateNoRecord(const TheISA::PCState &val) { actualTC->pcState(val); }$/;"	f	class:ProxyThreadContext
pcTable	./mem/cache/prefetch/stride.hh	/^    PCTable pcTable;$/;"	m	class:StridePrefetcher
pcTableAssoc	./mem/cache/prefetch/stride.hh	/^        const int pcTableAssoc;$/;"	m	class:StridePrefetcher::PCTable
pcTableAssoc	./mem/cache/prefetch/stride.hh	/^    const int pcTableAssoc;$/;"	m	class:StridePrefetcher
pcTableHit	./mem/cache/prefetch/stride.cc	/^StridePrefetcher::pcTableHit(Addr pc, bool is_secure, int master_id,$/;"	f	class:StridePrefetcher
pcTableSets	./mem/cache/prefetch/stride.hh	/^        const int pcTableSets;$/;"	m	class:StridePrefetcher::PCTable
pcTableSets	./mem/cache/prefetch/stride.hh	/^    const int pcTableSets;$/;"	m	class:StridePrefetcher
pcTableVictim	./mem/cache/prefetch/stride.cc	/^StridePrefetcher::pcTableVictim(Addr pc, int master_id)$/;"	f	class:StridePrefetcher
pc_count	./cpu/profile.hh	/^    std::map<Addr, Counter> pc_count;$/;"	m	class:FunctionProfile
pc_map	./cpu/pc_event.hh	/^    map_t pc_map;$/;"	m	class:PCEventQueue
pcap_file_header	./dev/net/etherdump.cc	/^struct pcap_file_header {$/;"	s	file:
pcap_pkthdr	./dev/net/etherdump.cc	/^struct pcap_pkthdr {$/;"	s	file:
pcb	./arch/mips/linux/thread_info.hh	/^        struct pcb_struct       pcb;$/;"	m	struct:Linux::thread_info	typeref:struct:Linux::thread_info::pcb_struct
pcb_struct	./arch/mips/linux/hwrpb.hh	/^    struct pcb_struct {$/;"	s	namespace:Linux
pcbb	./arch/generic/linux/threadinfo.hh	/^    Addr pcbb;$/;"	m	class:Linux::ThreadInfo
pcc	./arch/x86/regs/misc.hh	/^        Bitfield<57> pcc; \/\/ Processor-context corrupt$/;"	m	namespace:X86ISA
pcd	./arch/x86/pagetable.hh	/^        Bitfield<4> pcd;$/;"	m	namespace:X86ISA
pcd	./arch/x86/regs/misc.hh	/^        Bitfield<4> pcd; \/\/ Page-Level Cache Disable$/;"	m	namespace:X86ISA
pcdhi	./dev/arm/pl111.hh	/^        Bitfield<31,27> pcdhi;$/;"	m	class:Pl111
pcdlo	./dev/arm/pl111.hh	/^        Bitfield<4,0> pcdlo;$/;"	m	class:Pl111
pce	./arch/x86/regs/misc.hh	/^        Bitfield<8> pce; \/\/ Performance-Monitoring Counter Enable$/;"	m	namespace:X86ISA
pchip	./dev/alpha/Tsunami.py	/^    pchip = TsunamiPChip(pio_addr=0x80180000000)$/;"	v	class:Tsunami
pchip	./dev/alpha/tsunami.hh	/^    TsunamiPChip *pchip;$/;"	m	class:Tsunami
pci	./arch/mips/pra_constants.hh	/^    Bitfield<26>     pci;$/;"	m	namespace:MipsISA
pciDmaBase	./dev/pci/host.hh	/^    const Addr pciDmaBase;$/;"	m	class:GenericPciHost
pciMemBase	./dev/pci/host.hh	/^    const Addr pciMemBase;$/;"	m	class:GenericPciHost
pciPioBase	./dev/pci/host.hh	/^    const Addr pciPioBase;$/;"	m	class:GenericPciHost
pciToDma	./dev/mips/malta.cc	/^Malta::pciToDma(Addr pciAddr) const$/;"	f	class:Malta
pciToDma	./dev/net/i8254xGBe.hh	/^        Addr pciToDma(Addr a) { return igbe->pciToDma(a); }$/;"	f	class:IGbE::DescCache
pciToDma	./dev/pci/device.hh	/^    Addr pciToDma(Addr pci_addr) const {$/;"	f	class:PciDevice
pciToDma	./dev/sparc/t1000.cc	/^T1000::pciToDma(Addr pciAddr) const$/;"	f	class:T1000
pciToDma	./dev/storage/ide_disk.cc	/^IdeDisk::pciToDma(Addr pciAddr)$/;"	f	class:IdeDisk
pci_bus	./dev/pci/PciDevice.py	/^    pci_bus = Param.Int("PCI bus")$/;"	v	class:PciDevice
pci_dev	./dev/pci/PciDevice.py	/^    pci_dev = Param.Int("PCI device number")$/;"	v	class:PciDevice
pci_dma_base	./dev/pci/PciHost.py	/^    pci_dma_base = Param.Addr(0, "Base address for DMA memory accesses")$/;"	v	class:GenericPciHost
pci_func	./dev/pci/PciDevice.py	/^    pci_func = Param.Int("PCI function code")$/;"	v	class:PciDevice
pci_host	./dev/arm/RealView.py	/^    pci_host = GenericPciHost($/;"	v	class:RealViewPBX
pci_host	./dev/arm/RealView.py	/^    pci_host = GenericPciHost($/;"	v	class:VExpress_EMM
pci_host	./dev/arm/RealView.py	/^    pci_host = GenericPciHost($/;"	v	class:VExpress_EMM64
pci_host	./dev/x86/Pc.py	/^    pci_host = PcPciHost()$/;"	v	class:Pc
pci_mem_base	./dev/alpha/Tsunami.py	/^    pci_mem_base = 0x80000000000$/;"	v	class:TsunamiPChip
pci_mem_base	./dev/pci/PciHost.py	/^    pci_mem_base = Param.Addr(0, "Base address for PCI memory accesses")$/;"	v	class:GenericPciHost
pci_pio_base	./dev/alpha/Tsunami.py	/^    pci_pio_base = 0x801fc000000$/;"	v	class:TsunamiPChip
pci_pio_base	./dev/arm/RealView.py	/^        pci_pio_base=0)$/;"	v	class:RealViewPBX
pci_pio_base	./dev/arm/RealView.py	/^        pci_pio_base=0)$/;"	v	class:VExpress_EMM
pci_pio_base	./dev/arm/RealView.py	/^        pci_pio_base=0x2f000000)$/;"	v	class:VExpress_EMM64
pci_pio_base	./dev/pci/PciHost.py	/^    pci_pio_base = Param.Addr(0, "Base address for PCI IO accesses")$/;"	v	class:GenericPciHost
pci_pio_base	./dev/x86/Pc.py	/^    pci_pio_base = 0x8000000000000000$/;"	v	class:PcPciHost
pcp	./arch/mips/mt_constants.hh	/^    Bitfield<27>     pcp;$/;"	m	namespace:MipsISA
pcr	./dev/net/ns_gige.hh	/^    uint32_t    pcr;$/;"	m	struct:dp_regs
pcreg	./base/loader/coff_sym.h	/^    coff_short  pcreg;          \/* offset or reg of return pc *\/$/;"	m	struct:pdr
pctl	./dev/alpha/tsunami_pchip.hh	/^    uint64_t pctl;$/;"	m	class:TsunamiPChip
pd0	./arch/arm/miscregs.hh	/^        Bitfield<4> pd0;$/;"	m	namespace:ArmISA
pd1	./arch/arm/miscregs.hh	/^        Bitfield<5> pd1;$/;"	m	namespace:ArmISA
pdNil	./base/loader/coff_sym.h	215;"	d
pdf	./base/stats/info.hh	/^const FlagsType pdf =           0x0020;$/;"	m	namespace:Stats
pdf	./base/stats/text.cc	/^    Result pdf;$/;"	m	struct:Stats::ScalarPrint	file:
pdr	./base/loader/coff_sym.h	/^typedef struct pdr {$/;"	s
pdtb	./arch/x86/regs/misc.hh	/^        Bitfield<31, 12> pdtb; \/\/ Non-PAE Addressing Page-Directory-Table$/;"	m	namespace:X86ISA
pe	./arch/x86/regs/misc.hh	/^        Bitfield<0> pe; \/\/ Protection Enabled$/;"	m	namespace:X86ISA
peakBW	./mem/dram_ctrl.hh	/^    Stats::Formula peakBW;$/;"	m	class:DRAMCtrl
pebi	./python/m5/util/convert.py	/^pebi = tebi * 1024$/;"	v
peek	./base/circlebuf.hh	/^    void peek(OutputIterator out, size_t len) const { buf.peek(out, len); }$/;"	f	class:Fifo
peek	./base/circlebuf.hh	/^    void peek(OutputIterator out, size_t len) const {$/;"	f	class:CircleBuf
peek	./mem/ruby/network/MessageBuffer.cc	/^MessageBuffer::peek() const$/;"	f	class:MessageBuffer
peek	./mem/ruby/structures/WireBuffer.cc	/^WireBuffer::peek()$/;"	f	class:WireBuffer
peekLink	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.hh	/^    inline flit_d* peekLink()       { return linkBuffer->peekTopFlit(); }$/;"	f	class:NetworkLink_d
peekLink	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.cc	/^NetworkLink::peekLink()$/;"	f	class:NetworkLink
peekMsgPtr	./mem/ruby/network/MessageBuffer.hh	/^    const MsgPtr &peekMsgPtr() const { return m_prio_heap.front(); }$/;"	f	class:MessageBuffer
peekTopFlit	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    peekTopFlit(int vc)$/;"	f	class:InputUnit_d
peekTopFlit	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    peekTopFlit()$/;"	f	class:VirtualChannel_d
peekTopFlit	./mem/ruby/network/garnet/fixed-pipeline/flitBuffer_d.hh	/^    peekTopFlit()$/;"	f	class:flitBuffer_d
peekTopFlit	./mem/ruby/network/garnet/flexible-pipeline/flitBuffer.cc	/^flitBuffer::peekTopFlit()$/;"	f	class:flitBuffer
peer	./dev/net/etherint.hh	/^    EtherInt *peer;$/;"	m	class:EtherInt
pef	./arch/sparc/miscregs.hh	/^    Bitfield<4> pef;$/;"	m	namespace:SparcISA
pen64ReleaseAddr	./arch/arm/freebsd/system.hh	/^    Addr pen64ReleaseAddr;$/;"	m	class:FreebsdArmSystem
penReleaseAddr	./arch/arm/freebsd/system.hh	/^    Addr penReleaseAddr;$/;"	m	class:FreebsdArmSystem
pend	./dev/sparc/iob.hh	/^        bool pend;$/;"	m	struct:Iob::IntCtl
pending	./arch/arm/table_walker.hh	/^    bool pending;$/;"	m	class:ArmISA::TableWalker
pending	./dev/net/dist_packet.hh	/^    enum class ReqType { immediate, collective, pending, none };$/;"	m	class:DistHeaderPkt::ReqType
pendingChange	./arch/arm/table_walker.cc	/^TableWalker::pendingChange()$/;"	f	class:TableWalker
pendingChangeTick	./arch/arm/table_walker.hh	/^    mutable Tick pendingChangeTick;$/;"	m	class:ArmISA::TableWalker
pendingCount	./dev/dma_device.hh	/^    uint32_t pendingCount;$/;"	m	class:DmaPort
pendingDelete	./mem/bridge.hh	/^        std::unique_ptr<Packet> pendingDelete;$/;"	m	class:Bridge::BridgeSlavePort
pendingDelete	./mem/cache/cache.hh	/^    std::unique_ptr<Packet> pendingDelete;$/;"	m	class:Cache
pendingDelete	./mem/coherent_xbar.hh	/^    std::unique_ptr<Packet> pendingDelete;$/;"	m	class:CoherentXBar
pendingDelete	./mem/dram_ctrl.hh	/^    std::unique_ptr<Packet> pendingDelete;$/;"	m	class:DRAMCtrl
pendingDelete	./mem/dramsim2.hh	/^    std::unique_ptr<Packet> pendingDelete;$/;"	m	class:DRAMSim2
pendingDelete	./mem/simple_mem.hh	/^    std::unique_ptr<Packet> pendingDelete;$/;"	m	class:SimpleMemory
pendingDelete	./mem/tport.hh	/^    std::unique_ptr<Packet> pendingDelete;$/;"	m	class:SimpleTimingPort
pendingDoorbells	./dev/arm/ufs_device.hh	/^    uint8_t pendingDoorbells;$/;"	m	class:UFSHostDevice
pendingExtInt	./arch/x86/interrupts.hh	/^    bool pendingExtInt;$/;"	m	class:X86ISA::Interrupts
pendingIPIs	./arch/x86/interrupts.hh	/^    int pendingIPIs;$/;"	m	class:X86ISA::Interrupts
pendingInit	./arch/x86/interrupts.hh	/^    bool pendingInit;$/;"	m	class:X86ISA::Interrupts
pendingInt	./dev/arm/gic_pl390.hh	/^    uint32_t pendingInt[INT_BITS_MAX];$/;"	m	class:Pl390
pendingInt	./dev/arm/rtc_pl031.hh	/^    bool pendingInt;$/;"	m	class:PL031
pendingInt	./dev/arm/timer_sp804.hh	/^        bool pendingInt;$/;"	m	class:Sp804::Timer
pendingIntTimer	./dev/arm/timer_cpulocal.hh	/^        bool pendingIntTimer;$/;"	m	class:CpuLocalTimer::Timer
pendingIntWatchdog	./dev/arm/timer_cpulocal.hh	/^        bool pendingIntWatchdog;$/;"	m	class:CpuLocalTimer::Timer
pendingModified	./mem/cache/mshr.hh	/^    bool pendingModified;$/;"	m	class:MSHR
pendingNmi	./arch/x86/interrupts.hh	/^    bool pendingNmi;$/;"	m	class:X86ISA::Interrupts
pendingPacket	./cpu/o3/lsq_unit.hh	/^        PacketPtr pendingPacket;$/;"	m	class:LSQUnit::LSQSenderState
pendingPkt	./cpu/o3/lsq_unit.hh	/^    PacketPtr pendingPkt;$/;"	m	class:LSQUnit
pendingQueue	./arch/arm/table_walker.hh	/^    std::list<WalkerState *> pendingQueue;$/;"	m	class:ArmISA::TableWalker
pendingReqs	./arch/arm/table_walker.hh	/^    mutable unsigned pendingReqs;$/;"	m	class:ArmISA::TableWalker
pendingRequests	./dev/dma_device.hh	/^    std::deque<DmaDoneEventUPtr> pendingRequests;$/;"	m	class:DmaReadFifo
pendingSmi	./arch/x86/interrupts.hh	/^    bool pendingSmi;$/;"	m	class:X86ISA::Interrupts
pendingStartup	./arch/x86/interrupts.hh	/^    bool pendingStartup;$/;"	m	class:X86ISA::Interrupts
pendingTransactions	./dev/virtio/fs9p.hh	/^    std::map<P9Tag, VirtDescriptor *> pendingTransactions;$/;"	m	class:VirtIO9PBase
pendingUnmaskableInt	./arch/x86/interrupts.hh	/^    bool pendingUnmaskableInt;$/;"	m	class:X86ISA::Interrupts
perBankRdBursts	./mem/dram_ctrl.hh	/^    Stats::Vector perBankRdBursts;$/;"	m	class:DRAMCtrl
perBankWrBursts	./mem/dram_ctrl.hh	/^    Stats::Vector perBankWrBursts;$/;"	m	class:DRAMCtrl
perProcessor	./arch/mips/isa.hh	/^            perProcessor,$/;"	e	enum:MipsISA::ISA::BankType
perThreadContext	./arch/mips/isa.hh	/^            perThreadContext,$/;"	e	enum:MipsISA::ISA::BankType
perVirtProcessor	./arch/mips/isa.hh	/^            perVirtProcessor$/;"	e	enum:MipsISA::ISA::BankType
percentFunctional	./cpu/testers/memtest/memtest.hh	/^    const unsigned percentFunctional;$/;"	m	class:MemTest
percentOccsTaskId	./mem/cache/tags/base.hh	/^    Stats::Formula percentOccsTaskId;$/;"	m	class:BaseTags
percentReads	./cpu/testers/memtest/memtest.hh	/^    const unsigned percentReads;$/;"	m	class:MemTest
percentUncacheable	./cpu/testers/memtest/memtest.hh	/^    const unsigned percentUncacheable;$/;"	m	class:MemTest
percent_functional	./cpu/testers/memtest/MemTest.py	/^    percent_functional = Param.Percent(50, "Percentage functional accesses")$/;"	v	class:MemTest
percent_reads	./cpu/testers/memtest/MemTest.py	/^    percent_reads = Param.Percent(65, "Percentage reads")$/;"	v	class:MemTest
percent_uncacheable	./cpu/testers/memtest/MemTest.py	/^    percent_uncacheable = Param.Percent(10, "Percentage uncacheable")$/;"	v	class:MemTest
percent_writes	./cpu/testers/directedtest/RubyDirectedTester.py	/^    percent_writes = Param.Percent(50, "percent of access that are writes")$/;"	v	class:SeriesRequestGenerator
perfControlledByTimer	./cpu/kvm/base.hh	/^    bool perfControlledByTimer;$/;"	m	class:BaseKvmCPU
perfLevel	./sim/clock_domain.cc	/^SrcClockDomain::perfLevel(PerfLevel perf_level)$/;"	f	class:SrcClockDomain
perfLevel	./sim/clock_domain.hh	/^    PerfLevel perfLevel() const { return _perfLevel; }$/;"	f	class:SrcClockDomain
perfLevel	./sim/dvfs_handler.cc	/^DVFSHandler::perfLevel(DomainID domain_id, PerfLevel perf_level)$/;"	f	class:DVFSHandler
perfLevel	./sim/dvfs_handler.hh	/^    PerfLevel perfLevel(DomainID domain_id) const {$/;"	f	class:DVFSHandler
perfLevel	./sim/voltage_domain.cc	/^VoltageDomain::perfLevel(PerfLevel perf_level)$/;"	f	class:VoltageDomain
perfLevel	./sim/voltage_domain.hh	/^    PerfLevel perfLevel() const { return _perfLevel; }$/;"	f	class:VoltageDomain
perfLevelAck	./dev/arm/energy_ctrl.hh	/^    uint32_t perfLevelAck;$/;"	m	class:EnergyCtrl
perfLevelToRead	./dev/arm/energy_ctrl.hh	/^    uint32_t perfLevelToRead;$/;"	m	class:EnergyCtrl
perfLevelToSet	./sim/dvfs_handler.hh	/^        PerfLevel perfLevelToSet;$/;"	m	struct:DVFSHandler::UpdateEvent
perfectMatch	./dev/net/ns_gige.hh	/^    uint8_t perfectMatch[ETH_ADDR_LEN];$/;"	m	struct:dp_rom
performCallback	./cpu/testers/directedtest/InvalidateGenerator.cc	/^InvalidateGenerator::performCallback(uint32_t proc, Addr address)$/;"	f	class:InvalidateGenerator
performCallback	./cpu/testers/directedtest/SeriesRequestGenerator.cc	/^SeriesRequestGenerator::performCallback(uint32_t proc, Addr address)$/;"	f	class:SeriesRequestGenerator
performCallback	./cpu/testers/rubytest/Check.cc	/^Check::performCallback(NodeID proc, SubBlock* data, Cycles curTime)$/;"	f	class:Check
period	./cpu/kvm/perfevent.cc	/^PerfKvmCounter::period(uint64_t period)$/;"	f	class:PerfKvmCounter
period	./dev/arm/generic_timer.hh	/^    Tick period() const { return _period; }$/;"	f	class:SystemCounter
period	./dev/intel_8254_timer.hh	/^        uint16_t period;$/;"	m	class:Intel8254Timer::Counter
periodic	./arch/x86/interrupts.hh	/^        Bitfield<17> periodic;$/;"	m	class:X86ISA::Interrupts
periodicStatDump	./sim/stat_control.cc	/^periodicStatDump(Tick period)$/;"	f	namespace:Stats
permsFaults	./arch/arm/tlb.hh	/^    mutable Stats::Scalar permsFaults;$/;"	m	class:ArmISA::TLB
permute	./mem/ruby/filters/BulkBloomFilter.cc	/^BulkBloomFilter::permute(Addr addr)$/;"	f	class:BulkBloomFilter
persistentRequestLock	./mem/ruby/structures/PersistentTable.cc	/^PersistentTable::persistentRequestLock(Addr address,$/;"	f	class:PersistentTable
persistentRequestUnlock	./mem/ruby/structures/PersistentTable.cc	/^PersistentTable::persistentRequestUnlock(Addr address,$/;"	f	class:PersistentTable
peta	./python/m5/util/convert.py	/^peta = 1.0e15$/;"	v
pf	./arch/x86/regs/misc.hh	/^        Bitfield<2> pf; \/\/ Parity Flag$/;"	m	namespace:X86ISA
pf	./arch/x86/regs/misc.hh	/^        Bitfield<2> pf;$/;"	m	namespace:X86ISA
pfBufferHit	./mem/cache/prefetch/queued.hh	/^    Stats::Scalar pfBufferHit;$/;"	m	class:QueuedPrefetcher
pfIdentified	./mem/cache/prefetch/queued.hh	/^    Stats::Scalar pfIdentified;$/;"	m	class:QueuedPrefetcher
pfInCache	./mem/cache/prefetch/queued.hh	/^    Stats::Scalar pfInCache;$/;"	m	class:QueuedPrefetcher
pfIssued	./mem/cache/prefetch/base.hh	/^    Stats::Scalar pfIssued;$/;"	m	class:BasePrefetcher
pfRemovedFull	./mem/cache/prefetch/queued.hh	/^    Stats::Scalar pfRemovedFull;$/;"	m	class:QueuedPrefetcher
pfSpanPage	./mem/cache/prefetch/queued.hh	/^    Stats::Scalar pfSpanPage;$/;"	m	class:QueuedPrefetcher
pf_per_stream	./mem/ruby/structures/RubyPrefetcher.py	/^    pf_per_stream = Param.UInt32(1, "Number of prefetches per stream")$/;"	v	class:Prefetcher
pfd	./base/pollevent.hh	/^    pollfd pfd;$/;"	m	class:PollEvent
pfn	./arch/arm/pagetable.hh	/^    Addr pfn;$/;"	m	struct:ArmISA::TlbEntry
pfn	./arch/arm/table_walker.hh	/^        Addr pfn() const$/;"	f	class:ArmISA::TableWalker::L1Descriptor
pfn	./arch/arm/table_walker.hh	/^        Addr pfn() const$/;"	f	class:ArmISA::TableWalker::L2Descriptor
pfn	./arch/arm/table_walker.hh	/^        Addr pfn() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
pfn	./arch/mips/pra_constants.hh	/^    Bitfield<29, 6>  pfn;   \/\/ Page frame number$/;"	m	namespace:MipsISA
pfn	./arch/sparc/pagetable.hh	/^    Addr pfn()      const { assert(populated); return bits(entry4u,39,13); }$/;"	f	class:SparcISA::PageTableEntry
pfq	./mem/cache/prefetch/queued.hh	/^    std::list<DeferredPacket> pfq;$/;"	m	class:QueuedPrefetcher
pg	./arch/x86/regs/misc.hh	/^        Bitfield<31> pg; \/\/ Paging$/;"	m	namespace:X86ISA
pge	./arch/x86/regs/misc.hh	/^        Bitfield<7> pge; \/\/ Page-Global Enable$/;"	m	namespace:X86ISA
phy_epid	./dev/net/Ethernet.py	/^    phy_epid = 0x0380$/;"	v	class:IGbE_e1000
phy_epid	./dev/net/Ethernet.py	/^    phy_epid = 0x0CC0$/;"	v	class:IGbE_igb
phy_epid	./dev/net/Ethernet.py	/^    phy_epid = Param.UInt16("Phy EPID that corresponds to device ID")$/;"	v	class:IGbE
phy_pid	./dev/net/Ethernet.py	/^    phy_pid = 0x0141$/;"	v	class:IGbE_igb
phy_pid	./dev/net/Ethernet.py	/^    phy_pid = 0x02A8$/;"	v	class:IGbE_e1000
phy_pid	./dev/net/Ethernet.py	/^    phy_pid = Param.UInt16("Phy PID that corresponds to device ID")$/;"	v	class:IGbE
phys	./dev/arm/generic_timer.hh	/^        ArchTimer phys;$/;"	m	struct:GenericTimer::CoreTimers
physAddr	./arch/x86/regs/misc.hh	/^        Bitfield<51,23> physAddr; \/\/ Top of memory physical address$/;"	m	namespace:X86ISA
physAddr	./cpu/o3/probe/elastic_trace.hh	/^        Addr physAddr;$/;"	m	struct:ElasticTrace::TraceInfo
physAddr	./cpu/trace/trace_cpu.hh	/^            Addr physAddr;$/;"	m	class:TraceCPU::ElasticDataGen::GraphNode
physAddrMask	./arch/arm/system.cc	/^ArmSystem::physAddrMask(ThreadContext *tc)$/;"	f	class:ArmSystem
physAddrMask	./arch/arm/system.hh	/^    Addr physAddrMask() const$/;"	f	class:ArmSystem
physAddrRange	./arch/arm/system.cc	/^ArmSystem::physAddrRange(ThreadContext *tc)$/;"	f	class:ArmSystem
physAddrRange	./arch/arm/system.hh	/^    uint8_t physAddrRange() const$/;"	f	class:ArmSystem
physAddrRange	./arch/arm/table_walker.hh	/^        int physAddrRange;$/;"	m	class:ArmISA::TableWalker::WalkerState
physAddrRange	./arch/arm/table_walker.hh	/^    uint8_t physAddrRange;$/;"	m	class:ArmISA::TableWalker
physAddrRange64	./arch/arm/isa.hh	/^        uint8_t physAddrRange64;$/;"	m	class:ArmISA::ISA
physAddrRange64	./arch/arm/system.hh	/^    uint8_t physAddrRange64() const { return _physAddrRange64; }$/;"	f	class:ArmSystem
physEffAddrHigh	./cpu/base_dyn_inst.hh	/^    Addr physEffAddrHigh;$/;"	m	class:BaseDynInst
physEffAddrLow	./cpu/base_dyn_inst.hh	/^    Addr physEffAddrLow;$/;"	m	class:BaseDynInst
physProxy	./cpu/thread_state.hh	/^    PortProxy *physProxy;$/;"	m	struct:ThreadState
physProxy	./sim/system.hh	/^    PortProxy physProxy;$/;"	m	class:System
physRegDepList	./cpu/o3/probe/elastic_trace.hh	/^        std::list<InstSeqNum> physRegDepList;$/;"	m	struct:ElasticTrace::TraceInfo
physRegDepMap	./cpu/o3/probe/elastic_trace.hh	/^    std::unordered_map<PhysRegIndex, InstSeqNum> physRegDepMap;$/;"	m	class:ElasticTrace
physRegDepSet	./cpu/o3/probe/elastic_trace.hh	/^        std::set<InstSeqNum> physRegDepSet;$/;"	m	struct:ElasticTrace::InstExecInfo
physTimer	./dev/arm/generic_timer.hh	/^    ArchTimer physTimer;$/;"	m	class:GenericTimerMem
phys_addr_range_64	./arch/arm/ArmSystem.py	/^    phys_addr_range_64 = Param.UInt8(40,$/;"	v	class:ArmSystem
phys_mem	./mem/ruby/system/RubySystem.py	/^    phys_mem = Param.SimpleMemory(NULL, "")$/;"	v	class:RubySystem
physbase	./arch/x86/regs/misc.hh	/^        Bitfield<51, 12> physbase; \/\/ Range physical base address$/;"	m	namespace:X86ISA
physbase	./arch/x86/regs/misc.hh	/^        Bitfield<51,12> physbase; \/\/ Range physical base address$/;"	m	namespace:X86ISA
physmask	./arch/x86/regs/misc.hh	/^        Bitfield<51, 12> physmask; \/\/ Range physical mask$/;"	m	namespace:X86ISA
physmask	./arch/x86/regs/misc.hh	/^        Bitfield<51,12> physmask; \/\/ Range physical mask$/;"	m	namespace:X86ISA
physmem	./sim/system.hh	/^    PhysicalMemory physmem;$/;"	m	class:System
pic	./dev/arm/hdlcd.hh	/^    std::ostream *pic;$/;"	m	class:HDLcd
pic	./dev/arm/pl111.hh	/^    std::ostream *pic;$/;"	m	class:Pl111
pic1	./dev/x86/SouthBridge.py	/^    pic1 = Param.I8259(_pic1, "Master PIC")$/;"	v	class:SouthBridge
pic1	./dev/x86/south_bridge.hh	/^    X86ISA::I8259 * pic1;$/;"	m	class:SouthBridge
pic2	./dev/x86/SouthBridge.py	/^    pic2 = Param.I8259(_pic2, "Slave PIC")$/;"	v	class:SouthBridge
pic2	./dev/x86/south_bridge.hh	/^    X86ISA::I8259 * pic2;$/;"	m	class:SouthBridge
picInterrupting	./dev/alpha/tsunami_io.hh	/^    bool picInterrupting;$/;"	m	class:TsunamiIO
picInterrupting	./dev/mips/malta_io.hh	/^    bool picInterrupting;$/;"	m	class:MaltaIO
pick	./arch/x86/insts/static_inst.hh	/^        inline uint64_t pick(uint64_t from, int idx, int size) const$/;"	f	class:X86ISA::X86StaticInst
pickInitiatingNode	./cpu/testers/rubytest/Check.cc	/^Check::pickInitiatingNode()$/;"	f	class:Check
pickValue	./cpu/testers/rubytest/Check.cc	/^Check::pickValue()$/;"	f	class:Check
pico	./python/m5/util/convert.py	/^pico  = 1.0e-12$/;"	v
picr	./dev/alpha/tsunami_io.hh	/^    uint8_t picr; \/\/Raw PIC interrput register$/;"	m	class:TsunamiIO
picr	./dev/mips/malta_io.hh	/^    uint8_t picr; \/\/Raw PIC interrput register$/;"	m	class:MaltaIO
pid	./arch/alpha/stacktrace.cc	/^ProcessInfo::pid(Addr ksp) const$/;"	f	class:AlphaISA::ProcessInfo
pid	./arch/arm/stacktrace.cc	/^    ProcessInfo::pid(Addr ksp) const$/;"	f	class:ArmISA::ProcessInfo
pid	./arch/mips/stacktrace.cc	/^ProcessInfo::pid(Addr ksp) const$/;"	f	class:ProcessInfo
pid	./arch/power/stacktrace.cc	/^ProcessInfo::pid(Addr ksp) const$/;"	f	class:PowerISA::ProcessInfo
pid	./arch/x86/stacktrace.cc	/^    ProcessInfo::pid(Addr ksp) const$/;"	f	class:X86ISA::ProcessInfo
pid	./dev/pci/pcireg.h	/^        uint16_t pid;  \/* 0:7  cid$/;"	m	struct:PMCAP::__anon27
pid	./mem/page_table.hh	/^    const uint64_t pid;$/;"	m	class:PageTableBase
pid	./sim/Process.py	/^    pid = Param.Int(100, 'process id')$/;"	v	class:LiveProcess
pid	./sim/process.hh	/^    inline uint64_t pid() {return __pid;}$/;"	f	class:LiveProcess
pid0	./arch/sparc/miscregs.hh	/^    Bitfield<10> pid0;$/;"	m	namespace:SparcISA
pid1	./arch/sparc/miscregs.hh	/^    Bitfield<11> pid1;$/;"	m	namespace:SparcISA
pid_block	./kern/tru64/tru64_syscalls.hh	/^        pid_block = 153,$/;"	e	enum:SystemCalls::__anon102
pid_off	./arch/alpha/stacktrace.hh	/^    int pid_off;$/;"	m	class:AlphaISA::ProcessInfo
pid_off	./arch/arm/stacktrace.hh	/^    int pid_off;$/;"	m	class:ArmISA::ProcessInfo
pid_off	./arch/mips/stacktrace.hh	/^    int pid_off;$/;"	m	class:MipsISA::ProcessInfo
pid_off	./arch/x86/stacktrace.hh	/^        int pid_off;$/;"	m	class:X86ISA::ProcessInfo
pid_unblock	./kern/tru64/tru64_syscalls.hh	/^        pid_unblock = 154,$/;"	e	enum:SystemCalls::__anon102
pie	./dev/mc146818.hh	/^        Bitfield<6> pie;       \/\/\/ 1 = enable periodic clock interrupt$/;"	m	class:MC146818
pil	./arch/sparc/isa.hh	/^    uint8_t pil;            \/\/ Process Interrupt Register$/;"	m	class:SparcISA::ISA
pin	./dev/x86/I82094AA.py	/^    def pin(self, line):$/;"	m	class:I82094AA
pin	./dev/x86/I8259.py	/^    def pin(self, line):$/;"	m	class:I8259
pinStates	./dev/x86/i82094aa.hh	/^    bool pinStates[TableSize];$/;"	m	class:X86ISA::I82094AA
pinStates	./dev/x86/i8259.hh	/^    bool pinStates[NumLines];$/;"	m	class:X86ISA::I8259
pinned	./cpu/kvm/perfevent.hh	/^    PerfKvmCounterConfig &pinned(bool val) {$/;"	f	class:PerfKvmCounterConfig
pio	./dev/Device.py	/^    pio = SlavePort("Programmed I\/O port")$/;"	v	class:PioDevice
pioAddr	./dev/arm/amba_device.hh	/^    Addr     pioAddr;$/;"	m	class:AmbaDmaDevice
pioAddr	./dev/arm/gpu_nomali.hh	/^    const Addr pioAddr;$/;"	m	class:NoMaliGpu
pioAddr	./dev/arm/ufs_device.hh	/^    const Addr pioAddr;$/;"	m	class:UFSHostDevice
pioAddr	./dev/io_device.hh	/^    Addr pioAddr;$/;"	m	class:BasicPioDevice
pioAddr	./dev/pci/host.hh	/^        Addr pioAddr(Addr addr) const { return host.pioAddr(busAddr, addr); }$/;"	f	class:PciHost::DeviceInterface
pioDelay	./dev/alpha/tsunami_pchip.hh	/^    const Tick pioDelay;$/;"	m	class:TsunamiPChip
pioDelay	./dev/arm/amba_device.hh	/^    Tick     pioDelay;$/;"	m	class:AmbaDmaDevice
pioDelay	./dev/arm/gic_v2m.hh	/^    const Tick pioDelay;$/;"	m	class:Gicv2m
pioDelay	./dev/arm/ufs_device.hh	/^    const Tick pioDelay;$/;"	m	class:UFSHostDevice
pioDelay	./dev/arm/vgic.hh	/^    Tick pioDelay;$/;"	m	class:VGic
pioDelay	./dev/io_device.hh	/^    Tick pioDelay;$/;"	m	class:BasicPioDevice
pioDelay	./dev/pci/device.hh	/^    Tick pioDelay;$/;"	m	class:PciDevice
pioDelay	./dev/sparc/iob.hh	/^    Tick pioDelay;$/;"	m	class:Iob
pioMasterPort	./mem/ruby/system/RubyPort.hh	/^    PioMasterPort pioMasterPort;$/;"	m	class:RubyPort
pioPort	./dev/io_device.hh	/^    PioPort pioPort;$/;"	m	class:PioDevice
pioRange	./dev/alpha/tsunami_pchip.hh	/^    const AddrRange pioRange;$/;"	m	class:TsunamiPChip
pioSize	./dev/arm/amba_device.hh	/^    Addr     pioSize;$/;"	m	class:AmbaDmaDevice
pioSize	./dev/arm/ufs_device.hh	/^    const Addr pioSize;$/;"	m	class:UFSHostDevice
pioSize	./dev/io_device.hh	/^    Addr pioSize;$/;"	m	class:BasicPioDevice
pioSlavePort	./mem/ruby/system/RubyPort.hh	/^    PioSlavePort pioSlavePort;$/;"	m	class:RubyPort
pio_addr	./dev/Device.py	/^    pio_addr = 0$/;"	v	class:BadAddr
pio_addr	./dev/Device.py	/^    pio_addr = Param.Addr("Device Address")$/;"	v	class:BasicPioDevice
pio_addr	./dev/alpha/Tsunami.py	/^    pio_addr = Param.Addr("Device Address")$/;"	v	class:TsunamiPChip
pio_addr	./dev/arm/NoMali.py	/^    pio_addr = Param.Addr("Device base address")$/;"	v	class:NoMaliGpu
pio_addr	./dev/arm/RealView.py	/^    pio_addr = Param.Addr("Address for AMBA slave interface")$/;"	v	class:AmbaDmaDevice
pio_addr	./dev/arm/UFSHostDevice.py	/^    pio_addr = Param.Addr("Address for SCSI configuration slave interface")$/;"	v	class:UFSHostDevice
pio_addr	./dev/sparc/T1000.py	/^    pio_addr = 0x1F40000000$/;"	v	class:MmDisk
pio_addr	./dev/sparc/T1000.py	/^    pio_addr = 0xfff0c1fff8$/;"	v	class:DumbTOD
pio_addr	./dev/x86/I8042.py	/^    pio_addr = 0x0$/;"	v	class:I8042
pio_delay	./dev/arm/Gic.py	/^    pio_delay = Param.Latency('10ns', "Delay for PIO r\/w")$/;"	v	class:Gicv2m
pio_delay	./dev/arm/RealView.py	/^    pio_delay = Param.Latency('10ns', "Delay for PIO r\/w")$/;"	v	class:VGic
pio_latency	./dev/Device.py	/^    pio_latency = Param.Latency('100ns', "Programmed IO latency")$/;"	v	class:BasicPioDevice
pio_latency	./dev/alpha/Tsunami.py	/^    pio_latency = Param.Latency('100ns', "Programmed IO latency")$/;"	v	class:TsunamiPChip
pio_latency	./dev/arm/RealView.py	/^    pio_latency = Param.Latency("10ns", "Time between action and write\/read result by AMBA DMA Device")$/;"	v	class:AmbaDmaDevice
pio_latency	./dev/arm/UFSHostDevice.py	/^       result by AMBA DMA Device")$/;"	v	class:UFSHostDevice
pio_latency	./dev/pci/PciDevice.py	/^    pio_latency = Param.Latency('30ns', "Programmed IO latency")$/;"	v	class:PciDevice
pio_latency	./dev/sparc/T1000.py	/^    pio_latency = Param.Latency('1ns', "Programed IO latency")$/;"	v	class:Iob
pio_master_port	./mem/ruby/system/Sequencer.py	/^    pio_master_port = MasterPort("Ruby mem master port")$/;"	v	class:RubyPort
pio_size	./dev/Device.py	/^    pio_size = Param.Addr(0x8, "Size of address range")$/;"	v	class:IsaFake
pio_slave_port	./mem/ruby/system/Sequencer.py	/^    pio_slave_port = SlavePort("Ruby pio slave port")$/;"	v	class:RubyPort
pipe	./kern/tru64/tru64_syscalls.hh	/^        pipe = 42,$/;"	e	enum:SystemCalls::__anon102
pipePseudoFunc	./sim/syscall_emul.cc	/^pipePseudoFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
pipeline	./cpu/minor/cpu.hh	/^    Minor::Pipeline *pipeline;$/;"	m	class:MinorCPU
pipelineIcacheAccesses	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::pipelineIcacheAccesses(ThreadID tid)$/;"	f	class:DefaultFetch
pipelined	./cpu/FuncUnit.py	/^    pipelined = Param.Bool(True, "set to true when the functional unit for"$/;"	v	class:OpDesc
pipelined	./cpu/func_unit.hh	/^    bool pipelined;$/;"	m	class:OpDesc
pipelined	./cpu/func_unit.hh	/^    std::array<bool, Num_OpClasses> pipelined;$/;"	m	class:FuncUnit
pipelined	./cpu/o3/fu_pool.hh	/^    std::array<bool, Num_OpClasses> pipelined;$/;"	m	class:FUPool
pit	./dev/x86/SouthBridge.py	/^    pit = Param.I8254(_pit, "Programmable interval timer")$/;"	v	class:SouthBridge
pit	./dev/x86/i8254.hh	/^    X86Intel8254Timer pit;$/;"	m	class:X86ISA::I8254
pit	./dev/x86/south_bridge.hh	/^    X86ISA::I8254 * pit;$/;"	m	class:SouthBridge
pitimer	./dev/alpha/tsunami_io.hh	/^    Intel8254Timer pitimer;$/;"	m	class:TsunamiIO
pitimer	./dev/mips/malta_io.hh	/^    Intel8254Timer pitimer;$/;"	m	class:MaltaIO
pixel	./base/framebuffer.hh	/^    Pixel &pixel(unsigned x, unsigned y) {$/;"	f	class:FrameBuffer
pixel	./base/framebuffer.hh	/^    const Pixel &pixel(unsigned x, unsigned y) const {$/;"	f	class:FrameBuffer
pixelBufferSize	./dev/arm/hdlcd.hh	/^    const Addr pixelBufferSize;$/;"	m	class:HDLcd
pixelChunk	./dev/pixelpump.hh	/^    const unsigned pixelChunk;$/;"	m	class:BasePixelPump
pixelClock	./dev/arm/pl111.hh	/^    Tick pixelClock;$/;"	m	class:Pl111
pixelConverter	./base/vnc/vncserver.hh	/^    static const PixelConverter pixelConverter;$/;"	m	class:VncServer
pixelConverter	./dev/arm/hdlcd.cc	/^HDLcd::pixelConverter() const$/;"	f	class:HDLcd
pixelConverter	./dev/arm/pl111.cc	/^Pl111::pixelConverter() const$/;"	f	class:Pl111
pixelEvents	./dev/pixelpump.hh	/^    std::vector<PixelEvent *> pixelEvents;$/;"	m	class:BasePixelPump
pixelFormat	./base/vnc/vncserver.hh	/^    PixelFormat pixelFormat;$/;"	m	class:VncServer
pixelPump	./dev/arm/hdlcd.hh	/^    PixelPump pixelPump;$/;"	m	class:HDLcd
pixel_buffer_size	./dev/arm/RealView.py	/^    pixel_buffer_size = Param.MemorySize32("2kB", "Size of address range")$/;"	v	class:HDLcd
pixel_chunk	./dev/arm/RealView.py	/^    pixel_chunk = Param.Unsigned(32, "Number of pixels to handle in one batch")$/;"	v	class:HDLcd
pixel_clock	./dev/arm/RealView.py	/^    pixel_clock = Param.Clock('24MHz', "Pixel clock")$/;"	v	class:Pl111
pixel_format	./dev/arm/hdlcd.hh	/^    PixelFormatReg pixel_format;    \/**< Pixel format register *\/$/;"	m	class:HDLcd
pixels	./base/framebuffer.hh	/^    std::vector<Pixel> pixels;$/;"	m	class:FrameBuffer
pkt	./cpu/o3/lsq_unit.hh	/^        PacketPtr pkt;$/;"	m	class:LSQUnit::WritebackEvent
pkt	./cpu/simple/timing.hh	/^            PacketPtr pkt;$/;"	m	struct:TimingSimpleCPU::TimingCPUPort::TickEvent
pkt	./cpu/simple/timing.hh	/^        Packet *pkt;$/;"	m	struct:TimingSimpleCPU::IprEvent
pkt	./dev/net/i8254xGBe_defs.hh	/^            Addr pkt;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon7
pkt	./mem/bridge.hh	/^        const PacketPtr pkt;$/;"	m	class:Bridge::DeferredPacket
pkt	./mem/cache/mshr.hh	/^        const PacketPtr pkt;  \/\/!< Pending request packet.$/;"	m	class:MSHR::Target
pkt	./mem/cache/prefetch/queued.hh	/^        PacketPtr pkt;$/;"	m	struct:QueuedPrefetcher::DeferredPacket
pkt	./mem/dram_ctrl.hh	/^        const PacketPtr pkt;$/;"	m	class:DRAMCtrl::DRAMPacket
pkt	./mem/packet_queue.hh	/^        PacketPtr pkt;  \/\/\/< Pointer to the packet to transmit$/;"	m	class:PacketQueue::DeferredPacket
pkt	./mem/ruby/slicc_interface/RubyRequest.hh	/^    PacketPtr pkt;$/;"	m	class:RubyRequest
pkt	./mem/ruby/structures/MemoryNode.hh	/^    PacketPtr pkt;$/;"	m	class:MemoryNode
pkt	./mem/ruby/system/DMASequencer.hh	/^    PacketPtr pkt;$/;"	m	struct:DMARequest
pkt	./mem/ruby/system/Sequencer.hh	/^    PacketPtr pkt;$/;"	m	struct:SequencerRequest
pkt	./mem/serial_link.hh	/^        const PacketPtr pkt;$/;"	m	class:SerialLink::DeferredPacket
pkt	./mem/simple_mem.hh	/^        const PacketPtr pkt;$/;"	m	class:SimpleMemory::DeferredPacket
pktComplete	./dev/net/i8254xGBe.cc	/^IGbE::RxDescCache::pktComplete()$/;"	f	class:IGbE::RxDescCache
pktComplete	./dev/net/i8254xGBe.cc	/^IGbE::TxDescCache::pktComplete()$/;"	f	class:IGbE::TxDescCache
pktCount	./mem/xbar.hh	/^    Stats::Vector2d pktCount;$/;"	m	class:BaseXBar
pktDataEvent	./dev/net/i8254xGBe.hh	/^        EventWrapper<RxDescCache, &RxDescCache::pktSplitDone> pktDataEvent;$/;"	m	class:IGbE::RxDescCache
pktDone	./dev/net/i8254xGBe.hh	/^        bool pktDone;$/;"	m	class:IGbE::RxDescCache
pktDone	./dev/net/i8254xGBe.hh	/^        bool pktDone;$/;"	m	class:IGbE::TxDescCache
pktEvent	./dev/net/i8254xGBe.hh	/^        EventWrapper<RxDescCache, &RxDescCache::pktComplete> pktEvent;$/;"	m	class:IGbE::RxDescCache
pktEvent	./dev/net/i8254xGBe.hh	/^        EventWrapper<TxDescCache, &TxDescCache::pktComplete> pktEvent;$/;"	m	class:IGbE::TxDescCache
pktHdrEvent	./dev/net/i8254xGBe.hh	/^        EventWrapper<RxDescCache, &RxDescCache::pktSplitDone> pktHdrEvent;$/;"	m	class:IGbE::RxDescCache
pktMultiDesc	./dev/net/i8254xGBe.hh	/^        bool pktMultiDesc;$/;"	m	class:IGbE::TxDescCache
pktOffset	./dev/net/i8254xGBe.hh	/^    unsigned pktOffset;$/;"	m	class:IGbE
pktPtr	./dev/net/i8254xGBe.hh	/^        EthPacketPtr pktPtr;$/;"	m	class:IGbE::DescCache
pktSize	./mem/xbar.hh	/^    Stats::Vector2d pktSize;$/;"	m	class:BaseXBar
pktSplitDone	./dev/net/i8254xGBe.cc	/^IGbE::RxDescCache::pktSplitDone()$/;"	f	class:IGbE::RxDescCache
pktToSend	./cpu/o3/lsq_unit.hh	/^        bool pktToSend;$/;"	m	class:LSQUnit::LSQSenderState
pktWaiting	./dev/net/i8254xGBe.hh	/^        bool pktWaiting;$/;"	m	class:IGbE::TxDescCache
pkt_len	./dev/net/i8254xGBe_defs.hh	/^            uint16_t pkt_len;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon8
pkt_type	./dev/net/i8254xGBe_defs.hh	/^            uint16_t pkt_type:12;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon8
pkthdr	./kern/tru64/mbuf.hh	/^struct  pkthdr {$/;"	s	namespace:tru64
planeEvent	./dev/arm/flash_device.hh	/^    EventWrapper<FlashDevice, &FlashDevice::actionComplete> planeEvent;$/;"	m	class:FlashDevice
planeEventQueue	./dev/arm/flash_device.hh	/^    std::vector<std::deque<struct CallBackEntry> > planeEventQueue;$/;"	m	class:FlashDevice
planeMask	./dev/arm/flash_device.hh	/^    uint32_t planeMask;$/;"	m	class:FlashDevice
platform	./arch/arm/ArmPMU.py	/^    platform = Param.Platform(Parent.any, "Platform this device is part of.")$/;"	v
platform	./arch/arm/pmu.hh	/^    Platform *const platform;$/;"	m	class:ArmISA::PMU
platform	./dev/Uart.py	/^    platform = Param.Platform(Parent.any, "Platform this device is part of.")$/;"	v	class:Uart
platform	./dev/alpha/AlphaBackdoor.py	/^    platform = Param.Platform(Parent.any, "Platform this device is part of.")$/;"	v	class:AlphaBackdoor
platform	./dev/arm/Gic.py	/^    platform = Param.Platform(Parent.any, "Platform this device is part of.")$/;"	v	class:BaseGic
platform	./dev/arm/NoMali.py	/^    platform = Param.RealView(Parent.any, "Platform this device is part of.")$/;"	v	class:NoMaliGpu
platform	./dev/arm/RealView.py	/^    platform = Param.Platform(Parent.any, "Platform this device is part of.")$/;"	v	class:VGic
platform	./dev/arm/base_gic.hh	/^    Platform *platform;$/;"	m	class:BaseGic
platform	./dev/arm/gic_pl390.hh	/^        Platform *platform;$/;"	m	class:Pl390::PostIntEvent
platform	./dev/arm/gpu_nomali.hh	/^    RealView *const platform;$/;"	m	class:NoMaliGpu
platform	./dev/arm/vgic.hh	/^        Platform *platform;$/;"	m	class:VGic::PostVIntEvent
platform	./dev/arm/vgic.hh	/^    Platform *platform;$/;"	m	class:VGic
platform	./dev/pci/PciHost.py	/^    platform = Param.Platform(Parent.any, "Platform to use for interrupts")$/;"	v	class:GenericPciHost
platform	./dev/pci/host.hh	/^    Platform &platform;$/;"	m	class:GenericPciHost
platform	./dev/sparc/T1000.py	/^    platform = Param.Platform(Parent.any, "Platform this device is part of.")$/;"	v	class:Iob
platform	./dev/uart.hh	/^    Platform *platform;$/;"	m	class:Uart
platform	./dev/x86/SouthBridge.py	/^    platform = Param.Platform(Parent.any, "Platform this device is part of")$/;"	v	class:SouthBridge
platform	./dev/x86/south_bridge.hh	/^    Platform * platform;$/;"	m	class:SouthBridge
plen	./base/inet.hh	/^    uint16_t plen() const { return ntohs(ip6_plen); }$/;"	f	struct:Net::Ip6Hdr
plen	./base/inet.hh	/^    void plen(uint16_t _plen) { ip6_plen = htons(_plen); }$/;"	f	struct:Net::Ip6Hdr
plock	./kern/tru64/tru64_syscalls.hh	/^        plock = 107,$/;"	e	enum:SystemCalls::__anon102
pmcap	./dev/pci/device.hh	/^    PMCAP pmcap;$/;"	m	class:PciDevice
pmcs	./dev/pci/pcireg.h	/^        uint16_t pmcs; \/* 0:1   ps$/;"	m	struct:PMCAP::__anon27
pmemAddr	./mem/abstract_mem.hh	/^    uint8_t* pmemAddr;$/;"	m	class:AbstractMemory
pmu	./arch/arm/ArmISA.py	/^    pmu = Param.ArmPMU(NULL, "Performance Monitoring Unit")$/;"	v	class:ArmISA
pmu	./arch/arm/isa.hh	/^        BaseISADevice *pmu;$/;"	m	class:ArmISA::ISA
pmu	./arch/arm/pmu.hh	/^        PMU &pmu;$/;"	m	class:ArmISA::PMU::ProbeListener
pmuEventTypes	./arch/arm/pmu.hh	/^    std::multimap<EventTypeId, EventType> pmuEventTypes;$/;"	m	class:ArmISA::PMU
pmuInterrupt	./arch/arm/ArmPMU.py	/^    pmuInterrupt = Param.Int(68, "PMU GIC interrupt number")$/;"	v
pmuInterrupt	./arch/arm/pmu.hh	/^    const unsigned int pmuInterrupt;$/;"	m	class:ArmISA::PMU
pmuProbePoint	./cpu/base.cc	/^BaseCPU::pmuProbePoint(const char *name)$/;"	f	class:BaseCPU
pmuProbePoint	./cpu/pred/bpred_unit.cc	/^BPredUnit::pmuProbePoint(const char *name)$/;"	f	class:BPredUnit
points	./sim/probe/probe.hh	/^    std::vector<ProbePoint *> points;$/;"	m	class:ProbeManager
polarities	./dev/arm/hdlcd.hh	/^    PolaritiesReg polarities;       \/**< Polarities register *\/$/;"	m	class:HDLcd
polarity	./arch/x86/bios/IntelMP.py	/^    polarity = Param.X86IntelMPPolarity('ConformPolarity', 'polarity')$/;"	v	class:X86IntelMPIOIntAssignment
polarity	./arch/x86/bios/IntelMP.py	/^    polarity = Param.X86IntelMPPolarity('ConformPolarity', 'polarity')$/;"	v	class:X86IntelMPLocalIntAssignment
polarity	./arch/x86/interrupts.hh	/^        Bitfield<13> polarity;$/;"	m	class:X86ISA::Interrupts
polarity	./dev/x86/i82094aa.hh	/^        Bitfield<13> polarity;$/;"	m	class:X86ISA::I82094AA
policy	./kern/tru64/tru64.hh	/^        int policy;     \/\/!< policy$/;"	m	struct:Tru64::nxm_thread_attr
poll	./kern/tru64/tru64_syscalls.hh	/^        poll = 94,$/;"	e	enum:SystemCalls::__anon102
poll_fds	./base/pollevent.hh	/^    pollfd *poll_fds;$/;"	m	class:PollQueue
pop	./cpu/minor/buffers.hh	/^    pop()$/;"	f	class:Minor::InputBuffer
pop	./cpu/minor/buffers.hh	/^    void pop() { queue.pop_front(); }$/;"	f	class:Minor::Queue
pop	./cpu/o3/dep_graph.hh	/^DependencyGraph<DynInstPtr>::pop(PhysRegIndex idx)$/;"	f	class:DependencyGraph
pop	./cpu/pred/ras.cc	/^ReturnAddrStack::pop()$/;"	f	class:ReturnAddrStack
pop	./dev/net/pktfifo.hh	/^    void pop()$/;"	f	class:PacketFifo
pop	./python/m5/util/sorteddict.py	/^    def pop(self, key, *args):$/;"	m	class:SortedDict
popAndDiscard	./cpu/minor/fetch1.cc	/^Fetch1::popAndDiscard(FetchQueue &queue)$/;"	f	class:Minor::Fetch1
popCount	./base/bitfield.hh	/^popCount(uint64_t val) {$/;"	f
popFrame	./mem/slicc/symbols/SymbolTable.py	/^    def popFrame(self):$/;"	m	class:SymbolTable
popInput	./cpu/minor/decode.cc	/^Decode::popInput()$/;"	f	class:Minor::Decode
popInput	./cpu/minor/execute.cc	/^Execute::popInput()$/;"	f	class:Minor::Execute
popInput	./cpu/minor/fetch2.cc	/^Fetch2::popInput()$/;"	f	class:Minor::Fetch2
popLabel	./mem/packet.cc	/^Packet::PrintReqState::popLabel()$/;"	f	class:Packet::PrintReqState
popLabel	./mem/packet.hh	/^    popLabel()$/;"	f	class:Packet
popPacket	./dev/net/dist_iface.cc	/^DistIface::RecvScheduler::popPacket()$/;"	f	class:DistIface::RecvScheduler
popResponse	./cpu/minor/lsq.cc	/^LSQ::popResponse(LSQ::LSQRequestPtr response)$/;"	f	class:Minor::LSQ
popResult	./cpu/base_dyn_inst.hh	/^    void popResult(T& t)$/;"	f	class:BaseDynInst
popSenderState	./mem/packet.cc	/^Packet::popSenderState()$/;"	f	class:Packet
popTarget	./mem/cache/mshr.hh	/^    void popTarget()$/;"	f	class:MSHR
popWire	./cpu/minor/buffers.hh	/^    typename TimeBuffer<ElemType>::wire popWire;$/;"	m	class:Minor::SelfStallingPipeline
popitem	./python/m5/util/sorteddict.py	/^    def popitem(self):$/;"	m	class:SortedDict
populate	./arch/sparc/pagetable.hh	/^    populate(uint64_t e, EntryType t = sun4u)$/;"	f	class:SparcISA::PageTableEntry
populated	./arch/sparc/pagetable.hh	/^    bool populated;$/;"	m	class:SparcISA::PageTableEntry
populated	./arch/sparc/pagetable.hh	/^    bool populated;$/;"	m	class:SparcISA::TteTag
port	./arch/arm/ArmTLB.py	/^    port = MasterPort("Port used by the two table walkers")$/;"	v	class:ArmTableWalker
port	./arch/arm/stage2_mmu.hh	/^    DmaPort port;$/;"	m	class:ArmISA::Stage2MMU
port	./arch/arm/table_walker.hh	/^    DmaPort* port;$/;"	m	class:ArmISA::TableWalker
port	./arch/x86/X86TLB.py	/^    port = MasterPort("Port for the hardware table walker")$/;"	v	class:X86PagetableWalker
port	./arch/x86/pagetable_walker.hh	/^        WalkerPort port;$/;"	m	class:X86ISA::Walker
port	./base/inet.hh	/^    uint8_t port() const { return _port; }$/;"	f	struct:Net::IpWithPort
port	./base/remote_gdb.hh	/^    int port;$/;"	m	class:GDBListener
port	./base/vnc/Vnc.py	/^    port = Param.TcpPort(5900, "listen port")$/;"	v	class:VncServer
port	./cpu/minor/lsq.hh	/^        LSQ &port;$/;"	m	class:Minor::LSQ::LSQRequest
port	./cpu/testers/memtest/MemTest.py	/^    port = MasterPort("Port to the memory system")$/;"	v	class:MemTest
port	./cpu/testers/memtest/memtest.hh	/^    CpuPort port;$/;"	m	class:MemTest
port	./cpu/testers/traffic_gen/TrafficGen.py	/^    port = MasterPort("Master port")$/;"	v	class:TrafficGen
port	./cpu/testers/traffic_gen/traffic_gen.hh	/^    TrafficGenPort port;$/;"	m	class:TrafficGen
port	./cpu/trace/trace_cpu.hh	/^        MasterPort& port;$/;"	m	class:TraceCPU::ElasticDataGen
port	./cpu/trace/trace_cpu.hh	/^        MasterPort& port;$/;"	m	class:TraceCPU::FixedRetryGen
port	./dev/Terminal.py	/^    port = Param.TcpPort(3456, "listen port")$/;"	v	class:Terminal
port	./dev/dma_device.hh	/^    DmaPort &port;$/;"	m	class:DmaReadFifo
port	./dev/net/Ethernet.py	/^    port = Param.UInt16(3500, "tap port")$/;"	v	class:EtherTap
port	./dev/net/ethertap.cc	/^    int port;$/;"	m	class:TapListener	file:
port	./dev/virtio/VirtIO9P.py	/^    port = Param.String("564", "9P server port")$/;"	v	class:VirtIO9PSocket
port	./mem/DRAMCtrl.py	/^    port = SlavePort("Slave port")$/;"	v	class:DRAMCtrl
port	./mem/DRAMSim2.py	/^    port = SlavePort("Slave port")$/;"	v	class:DRAMSim2
port	./mem/ExternalMaster.py	/^    port = MasterPort("Master port")$/;"	v	class:ExternalMaster
port	./mem/ExternalSlave.py	/^    port = SlavePort("Slave port")$/;"	v	class:ExternalSlave
port	./mem/SimpleMemory.py	/^    port = SlavePort("Slave ports")$/;"	v	class:SimpleMemory
port	./mem/dram_ctrl.hh	/^    MemoryPort port;$/;"	m	class:DRAMCtrl
port	./mem/dramsim2.hh	/^    MemoryPort port;$/;"	m	class:DRAMSim2
port	./mem/ruby/structures/RubyMemoryControl.hh	/^    MemoryPort port;$/;"	m	class:RubyMemoryControl
port	./mem/ruby/structures/RubyMemoryControl.py	/^    port = SlavePort("Slave port")$/;"	v	class:RubyMemoryControl
port	./mem/ruby/system/RubyPort.hh	/^        MemSlavePort *port;$/;"	m	struct:RubyPort::SenderState
port	./mem/simple_mem.hh	/^    MemoryPort port;$/;"	m	class:SimpleMemory
port	./mem/xbar.hh	/^        DstType& port;$/;"	m	class:BaseXBar::Layer
portCache	./mem/xbar.hh	/^    PortCache portCache[3];$/;"	m	class:BaseXBar
portData	./mem/external_master.hh	/^    std::string portData;$/;"	m	class:ExternalMaster
portData	./mem/external_slave.hh	/^    std::string portData;$/;"	m	class:ExternalSlave
portHandlers	./mem/external_master.cc	/^    ExternalMaster::portHandlers;$/;"	m	class:ExternalMaster	file:
portHandlers	./mem/external_master.hh	/^    static std::map<std::string, Handler *> portHandlers;$/;"	m	class:ExternalMaster
portHandlers	./mem/external_slave.cc	/^    ExternalSlave::portHandlers;$/;"	m	class:ExternalSlave	file:
portHandlers	./mem/external_slave.hh	/^    static std::map<std::string, Handler *> portHandlers;$/;"	m	class:ExternalSlave
portMap	./mem/xbar.hh	/^    AddrRangeMap<PortID> portMap;$/;"	m	class:BaseXBar
portName	./dev/net/etherint.hh	/^    mutable std::string portName;$/;"	m	class:EtherInt
portName	./mem/external_master.hh	/^    std::string portName;$/;"	m	class:ExternalMaster
portName	./mem/external_slave.hh	/^    std::string portName;$/;"	m	class:ExternalSlave
portName	./mem/port.hh	/^    std::string portName;$/;"	m	class:Port
portToMask	./mem/snoop_filter.hh	/^SnoopFilter::portToMask(const SlavePort& port) const$/;"	f	class:SnoopFilter
portType	./mem/external_master.hh	/^    std::string portType;$/;"	m	class:ExternalMaster
portType	./mem/external_slave.hh	/^    std::string portType;$/;"	m	class:ExternalSlave
port_buffers	./mem/ruby/network/simple/SimpleNetwork.py	/^    port_buffers = VectorParam.MessageBuffer("Port buffers")$/;"	v	class:Switch
port_data	./mem/ExternalMaster.py	/^    port_data = Param.String('stub', 'A string to pass to the port'$/;"	v	class:ExternalMaster
port_data	./mem/ExternalSlave.py	/^    port_data = Param.String('stub', 'A string to pass to the port'$/;"	v	class:ExternalSlave
port_type	./mem/ExternalMaster.py	/^    port_type = Param.String('stub', 'Registered external port handler'$/;"	v	class:ExternalMaster
port_type	./mem/ExternalSlave.py	/^    port_type = Param.String('stub', 'Registered external port handler'$/;"	v	class:ExternalSlave
ports	./cpu/testers/directedtest/RubyDirectedTester.hh	/^    std::vector<MasterPort*> ports;$/;"	m	class:RubyDirectedTester
ports	./sim/cxx_config.hh	/^    std::map<std::string, PortDesc *> ports;$/;"	m	class:CxxConfigDirectoryEntry
pos	./dev/arm/rv_ctrl.hh	/^        Bitfield<15, 12> pos;$/;"	m	class:RealViewCtrl
pos	./python/m5/util/code_formatter.py	/^    pos = r'[0-9]+'$/;"	v	class:code_formatter
posX	./dev/pixelpump.hh	/^    unsigned posX() const { return _posX; }$/;"	f	class:BasePixelPump
posY	./dev/pixelpump.hh	/^    unsigned posY() const {$/;"	f	class:BasePixelPump
pos_inf	./python/m5/util/region.py	/^pos_inf = _pos_inf()$/;"	v
position	./dev/arm/RealView.py	/^    position = Param.UInt8("Position in device stack")$/;"	v	class:RealViewOsc
possibleLoadViolation	./cpu/base_dyn_inst.hh	/^    bool possibleLoadViolation() const { return instFlags[PossibleLoadViolation]; }$/;"	f	class:BaseDynInst
possibleLoadViolation	./cpu/base_dyn_inst.hh	/^    void possibleLoadViolation(bool f) { instFlags[PossibleLoadViolation] = f; }$/;"	f	class:BaseDynInst
post	./arch/alpha/interrupts.hh	/^    post(int int_num, int index)$/;"	f	class:AlphaISA::Interrupts
post	./arch/arm/interrupts.hh	/^    post(int int_num, int index)$/;"	f	class:ArmISA::Interrupts
post	./arch/mips/interrupts.cc	/^Interrupts::post(int int_num, ThreadContext* tc)$/;"	f	class:MipsISA::Interrupts
post	./arch/mips/interrupts.cc	/^Interrupts::post(int int_num, int index)$/;"	f	class:MipsISA::Interrupts
post	./arch/power/interrupts.hh	/^    post(int int_num, int index)$/;"	f	class:PowerISA::Interrupts
post	./arch/sparc/interrupts.hh	/^    post(int int_num, int index)$/;"	f	class:SparcISA::Interrupts
post	./arch/x86/interrupts.hh	/^    post(int int_num, int index)$/;"	f	class:X86ISA::Interrupts
post	./cpu/intr_control.cc	/^IntrControl::post(int cpu_id, int int_num, int index)$/;"	f	class:IntrControl
post	./cpu/intr_control.hh	/^    post(int int_num, int index = 0)$/;"	f	class:IntrControl
post	./cpu/intr_control_noisa.cc	/^IntrControl::post(int cpu_id, int int_num, int index)$/;"	f	class:IntrControl
postConsoleInt	./dev/alpha/tsunami.cc	/^Tsunami::postConsoleInt()$/;"	f	class:Tsunami
postConsoleInt	./dev/arm/realview.cc	/^RealView::postConsoleInt()$/;"	f	class:RealView
postConsoleInt	./dev/mips/malta.cc	/^Malta::postConsoleInt()$/;"	f	class:Malta
postConsoleInt	./dev/sparc/t1000.cc	/^T1000::postConsoleInt()$/;"	f	class:T1000
postConsoleInt	./dev/x86/pc.cc	/^Pc::postConsoleInt()$/;"	f	class:Pc
postDRIR	./dev/alpha/tsunami_cchip.cc	/^TsunamiCChip::postDRIR(uint32_t interrupt)$/;"	f	class:TsunamiCChip
postDowngrade	./mem/cache/mshr.hh	/^    bool postDowngrade;$/;"	m	class:MSHR
postExecute	./cpu/simple/base.cc	/^BaseSimpleCPU::postExecute()$/;"	f	class:BaseSimpleCPU
postInt	./dev/arm/gic_pl390.cc	/^Pl390::postInt(uint32_t cpu, Tick when)$/;"	f	class:Pl390
postInt	./dev/pci/host.cc	/^GenericPciHost::postInt(const PciBusAddr &addr, PciIntPin pin)$/;"	f	class:GenericPciHost
postInt	./dev/pci/host.cc	/^PciHost::DeviceInterface::postInt()$/;"	f	class:PciHost::DeviceInterface
postIntEvent	./dev/arm/gic_pl390.hh	/^    PostIntEvent *postIntEvent[CPU_MAX];$/;"	m	class:Pl390
postInterrupt	./cpu/base.hh	/^    postInterrupt(ThreadID tid, int int_num, int index)$/;"	f	class:BaseCPU
postInterrupt	./dev/net/i8254xGBe.cc	/^IGbE::postInterrupt(IntTypes t, bool now)$/;"	f	class:IGbE
postIntr	./dev/mips/malta_cchip.cc	/^MaltaCChip::postIntr(uint32_t interrupt)$/;"	f	class:MaltaCChip
postIntr	./dev/mips/malta_io.cc	/^MaltaIO::postIntr(uint8_t interrupt)$/;"	f	class:MaltaIO
postInvalidate	./mem/cache/mshr.hh	/^    bool postInvalidate;$/;"	m	class:MSHR
postMaintInt	./dev/arm/vgic.cc	/^VGic::postMaintInt(uint32_t cpu)$/;"	f	class:VGic
postPIC	./dev/alpha/tsunami_io.cc	/^TsunamiIO::postPIC(uint8_t bitvector)$/;"	f	class:TsunamiIO
postPciInt	./dev/alpha/tsunami.cc	/^Tsunami::postPciInt(int line)$/;"	f	class:Tsunami
postPciInt	./dev/arm/realview.cc	/^RealView::postPciInt(int line)$/;"	f	class:RealView
postPciInt	./dev/mips/malta.cc	/^Malta::postPciInt(int line)$/;"	f	class:Malta
postPciInt	./dev/platform.cc	/^Platform::postPciInt(int line)$/;"	f	class:Platform
postPciInt	./dev/sparc/t1000.cc	/^T1000::postPciInt(int line)$/;"	f	class:T1000
postPciInt	./dev/x86/pc.cc	/^Pc::postPciInt(int line)$/;"	f	class:Pc
postRTC	./dev/alpha/tsunami_cchip.cc	/^TsunamiCChip::postRTC()$/;"	f	class:TsunamiCChip
postRTC	./dev/mips/malta_cchip.cc	/^MaltaCChip::postRTC()$/;"	f	class:MaltaCChip
postVInt	./dev/arm/vgic.cc	/^VGic::postVInt(uint32_t cpu, Tick when)$/;"	f	class:VGic
postVIntEvent	./dev/arm/vgic.hh	/^    PostVIntEvent *postVIntEvent[VGIC_CPU_MAX];$/;"	m	class:VGic
postedInterrupts	./dev/net/etherdevice.hh	/^    Stats::Scalar postedInterrupts;$/;"	m	class:EtherDevice
postedRxDesc	./dev/net/etherdevice.hh	/^    Stats::Scalar postedRxDesc;$/;"	m	class:EtherDevice
postedRxIdle	./dev/net/etherdevice.hh	/^    Stats::Scalar postedRxIdle;$/;"	m	class:EtherDevice
postedRxOk	./dev/net/etherdevice.hh	/^    Stats::Scalar postedRxOk;$/;"	m	class:EtherDevice
postedRxOrn	./dev/net/etherdevice.hh	/^    Stats::Scalar postedRxOrn;$/;"	m	class:EtherDevice
postedSwi	./dev/net/etherdevice.hh	/^    Stats::Scalar postedSwi;$/;"	m	class:EtherDevice
postedTxDesc	./dev/net/etherdevice.hh	/^    Stats::Scalar postedTxDesc;$/;"	m	class:EtherDevice
postedTxIdle	./dev/net/etherdevice.hh	/^    Stats::Scalar postedTxIdle;$/;"	m	class:EtherDevice
postedTxOk	./dev/net/etherdevice.hh	/^    Stats::Scalar postedTxOk;$/;"	m	class:EtherDevice
power	./base/intmath.hh	/^power(uint32_t n, uint32_t e)$/;"	f
power	./mem/dram_ctrl.hh	/^        DRAMPower power;$/;"	m	class:DRAMCtrl::Rank
powerEvent	./mem/dram_ctrl.hh	/^        powerEvent;$/;"	m	class:DRAMCtrl::Rank
powerlib	./mem/drampower.hh	/^    libDRAMPower powerlib;$/;"	m	class:DRAMPower
pp	./arch/x86/types.hh	/^            Bitfield<17, 16> pp;$/;"	m	namespace:X86ISA
pp	./arch/x86/types.hh	/^            Bitfield<9, 8> pp;$/;"	m	namespace:X86ISA
ppBranches	./cpu/pred/bpred_unit.hh	/^    ProbePoints::PMUUPtr ppBranches;$/;"	m	class:BPredUnit
ppCommit	./cpu/o3/commit.hh	/^    ProbePointArg<DynInstPtr> *ppCommit;$/;"	m	class:DefaultCommit
ppCommit	./cpu/simple/atomic.hh	/^    ProbePointArg<std::pair<SimpleThread*, const StaticInstPtr>> *ppCommit;$/;"	m	class:AtomicSimpleCPU
ppCommitStall	./cpu/o3/commit.hh	/^    ProbePointArg<DynInstPtr> *ppCommitStall;$/;"	m	class:DefaultCommit
ppCycles	./cpu/base.hh	/^    ProbePoints::PMUUPtr ppCycles;$/;"	m	class:BaseCPU
ppDataAccessComplete	./cpu/o3/cpu.hh	/^    ProbePointArg<std::pair<DynInstPtr, PacketPtr> > *ppDataAccessComplete;$/;"	m	class:FullO3CPU
ppDispatch	./cpu/o3/iew.hh	/^    ProbePointArg<DynInstPtr> *ppDispatch;$/;"	m	class:DefaultIEW
ppExecute	./cpu/o3/iew.hh	/^    ProbePointArg<DynInstPtr> *ppExecute;$/;"	m	class:DefaultIEW
ppFetch	./cpu/o3/fetch.hh	/^    ProbePointArg<DynInstPtr> *ppFetch;$/;"	m	class:DefaultFetch
ppFetchRequestSent	./cpu/o3/fetch.hh	/^    ProbePointArg<RequestPtr> *ppFetchRequestSent;$/;"	m	class:DefaultFetch
ppInstAccessComplete	./cpu/o3/cpu.hh	/^    ProbePointArg<PacketPtr> *ppInstAccessComplete;$/;"	m	class:FullO3CPU
ppMispredict	./cpu/o3/iew.hh	/^    ProbePointArg<DynInstPtr> *ppMispredict;$/;"	m	class:DefaultIEW
ppMisses	./cpu/pred/bpred_unit.hh	/^    ProbePoints::PMUUPtr ppMisses;$/;"	m	class:BPredUnit
ppPktReq	./mem/comm_monitor.hh	/^    ProbePoints::PacketUPtr ppPktReq;$/;"	m	class:CommMonitor
ppPktResp	./mem/comm_monitor.hh	/^    ProbePoints::PacketUPtr ppPktResp;$/;"	m	class:CommMonitor
ppRefills	./arch/arm/tlb.hh	/^    ProbePoints::PMUUPtr ppRefills;$/;"	m	class:ArmISA::TLB
ppRename	./cpu/o3/rename.hh	/^    ProbePointArg<DynInstPtr> *ppRename;$/;"	m	class:DefaultRename
ppRetiredBranches	./cpu/base.hh	/^    ProbePoints::PMUUPtr ppRetiredBranches;$/;"	m	class:BaseCPU
ppRetiredInsts	./cpu/base.hh	/^    ProbePoints::PMUUPtr ppRetiredInsts;$/;"	m	class:BaseCPU
ppRetiredLoads	./cpu/base.hh	/^    ProbePoints::PMUUPtr ppRetiredLoads;$/;"	m	class:BaseCPU
ppRetiredStores	./cpu/base.hh	/^    ProbePoints::PMUUPtr ppRetiredStores;$/;"	m	class:BaseCPU
ppSquash	./cpu/o3/commit.hh	/^    ProbePointArg<DynInstPtr> *ppSquash;$/;"	m	class:DefaultCommit
ppSquashInRename	./cpu/o3/rename.hh	/^    ProbePointArg<SeqNumRegPair> *ppSquashInRename;$/;"	m	class:DefaultRename
ppToCommit	./cpu/o3/iew.hh	/^    ProbePointArg<DynInstPtr> *ppToCommit;$/;"	m	class:DefaultIEW
ppid	./sim/Process.py	/^    ppid = Param.Int(99, 'parent process id')$/;"	v	class:LiveProcess
ppid	./sim/process.hh	/^    inline uint64_t ppid() {return __ppid;}$/;"	f	class:LiveProcess
ppint	./dev/arm/RealView.py	/^    ppint = Param.UInt32("HV maintenance interrupt number")$/;"	v	class:VGic
ppl	./dev/arm/pl111.hh	/^        Bitfield<7,2> ppl;$/;"	m	class:Pl111
ppn	./arch/alpha/pagetable.hh	/^    Addr ppn;               \/\/ physical page number$/;"	m	struct:AlphaISA::TlbEntry
pqCompare	./cpu/o3/inst_queue.hh	/^    struct pqCompare {$/;"	s	class:InstructionQueue
pqcr	./dev/net/ns_gige.hh	/^    uint32_t    pqcr;$/;"	m	struct:dp_regs
preAllowedAt	./mem/dram_ctrl.hh	/^        Tick preAllowedAt;$/;"	m	class:DRAMCtrl::Bank
preBackEnergy	./mem/dram_ctrl.hh	/^        Stats::Scalar preBackEnergy;$/;"	m	class:DRAMCtrl::Rank
preCheckpointRestore	./sim/drain.cc	/^DrainManager::preCheckpointRestore()$/;"	f	class:DrainManager
preEnergy	./mem/dram_ctrl.hh	/^        Stats::Scalar preEnergy;$/;"	m	class:DRAMCtrl::Rank
preExecute	./cpu/simple/base.cc	/^BaseSimpleCPU::preExecute()$/;"	f	class:BaseSimpleCPU
preUnflattenMiscReg	./arch/arm/miscregs.cc	/^preUnflattenMiscReg()$/;"	f	namespace:ArmISA
pre_F64_fstat	./kern/tru64/tru64_syscalls.hh	/^        pre_F64_fstat = 91,$/;"	e	enum:SystemCalls::__anon102
pre_F64_fstatfs	./kern/tru64/tru64_syscalls.hh	/^        pre_F64_fstatfs = 161,$/;"	e	enum:SystemCalls::__anon102
pre_F64_getfsstat	./kern/tru64/tru64_syscalls.hh	/^        pre_F64_getfsstat = 18,$/;"	e	enum:SystemCalls::__anon102
pre_F64_lstat	./kern/tru64/tru64_syscalls.hh	/^        pre_F64_lstat = 68,$/;"	e	enum:SystemCalls::__anon102
pre_F64_stat	./kern/tru64/tru64.hh	/^    struct pre_F64_stat {$/;"	s	class:Tru64_PreF64
pre_F64_stat	./kern/tru64/tru64_syscalls.hh	/^        pre_F64_stat = 67,$/;"	e	enum:SystemCalls::__anon102
pre_F64_statfs	./kern/tru64/tru64.hh	/^    struct pre_F64_statfs {$/;"	s	class:Tru64
pre_F64_statfs	./kern/tru64/tru64_syscalls.hh	/^        pre_F64_statfs = 160,$/;"	e	enum:SystemCalls::__anon102
pread	./kern/tru64/tru64_syscalls.hh	/^        pread = 151,$/;"	e	enum:SystemCalls::__anon102
precedence	./mem/slicc/parser.py	/^    precedence = ($/;"	v	class:SLICC
prechargeBank	./mem/dram_ctrl.cc	/^DRAMCtrl::prechargeBank(Rank& rank_ref, Bank& bank, Tick pre_at, bool trace)$/;"	f	class:DRAMCtrl
prechargeEvent	./mem/dram_ctrl.hh	/^        prechargeEvent;$/;"	m	class:DRAMCtrl::Rank
precision	./base/cprintf_formats.hh	/^    int precision;$/;"	m	struct:cp::Format
precision	./base/statistics.hh	/^    precision(int _precision)$/;"	f	class:Stats::DataWrap
precision	./base/stats/info.hh	/^    int precision;$/;"	m	class:Stats::Info
precision	./base/stats/text.cc	/^    int precision;$/;"	m	struct:Stats::DistPrint	file:
precision	./base/stats/text.cc	/^    int precision;$/;"	m	struct:Stats::ScalarPrint	file:
precision	./base/stats/text.cc	/^    int precision;$/;"	m	struct:Stats::SparseHistPrint	file:
precision	./base/stats/text.cc	/^    int precision;$/;"	m	struct:Stats::VectorPrint	file:
precision	./cpu/testers/networktest/NetworkTest.py	/^    precision = Param.Int(3, "Number of digits of precision after decimal point")$/;"	v	class:NetworkTest
precision	./cpu/testers/networktest/networktest.hh	/^    int precision;$/;"	m	class:NetworkTest
predHist	./cpu/pred/bpred_unit.hh	/^    std::vector<History> predHist;$/;"	m	class:BPredUnit
predIncorrect	./cpu/o3/comm.hh	/^        bool predIncorrect;$/;"	m	struct:TimeBufStruct::decodeComm
predInstAddr	./cpu/base_dyn_inst.hh	/^    Addr predInstAddr() { return predPC.instAddr(); }$/;"	f	class:BaseDynInst
predMicroPC	./cpu/base_dyn_inst.hh	/^    Addr predMicroPC() { return predPC.microPC(); }$/;"	f	class:BaseDynInst
predNextInstAddr	./cpu/base_dyn_inst.hh	/^    Addr predNextInstAddr() { return predPC.nextInstAddr(); }$/;"	f	class:BaseDynInst
predPC	./cpu/base_dyn_inst.hh	/^    TheISA::PCState predPC;$/;"	m	class:BaseDynInst
predPC	./cpu/simple/exec_context.hh	/^    TheISA::PCState predPC;$/;"	m	class:SimpleExecContext
predTaken	./cpu/pred/bpred_unit.hh	/^        bool predTaken;$/;"	m	struct:BPredUnit::PredictorHistory
predecessor	./mem/packet.hh	/^        SenderState* predecessor;$/;"	m	struct:Packet::SenderState
predicate	./cpu/simple_thread.hh	/^    bool predicate;$/;"	m	class:SimpleThread
predicate	./sim/insttracer.hh	/^    bool predicate;$/;"	m	class:Trace::InstRecord
predict	./cpu/pred/bpred_unit.cc	/^BPredUnit::predict(const StaticInstPtr &inst, const InstSeqNum &seqNum,$/;"	f	class:BPredUnit
predictBranch	./cpu/minor/fetch2.cc	/^Fetch2::predictBranch(MinorDynInstPtr inst, BranchData &branch)$/;"	f	class:Minor::Fetch2
predictInOrder	./cpu/pred/bpred_unit.cc	/^BPredUnit::predictInOrder(const StaticInstPtr &inst, const InstSeqNum &seqNum,$/;"	f	class:BPredUnit
predictedBranches	./cpu/o3/fetch.hh	/^    Stats::Scalar predictedBranches;$/;"	m	class:DefaultFetch
predictedNotTakenIncorrect	./cpu/o3/iew.hh	/^    Stats::Scalar predictedNotTakenIncorrect;$/;"	m	class:DefaultIEW
predictedTaken	./cpu/minor/dyn_inst.hh	/^    bool predictedTaken;$/;"	m	class:Minor::MinorDynInst
predictedTakenIncorrect	./cpu/o3/iew.hh	/^    Stats::Scalar predictedTakenIncorrect;$/;"	m	class:DefaultIEW
predictedTarget	./cpu/minor/dyn_inst.hh	/^    TheISA::PCState predictedTarget;$/;"	m	class:Minor::MinorDynInst
prediction	./cpu/minor/fetch1.hh	/^    Latch<BranchData>::Output prediction;$/;"	m	class:Minor::Fetch1
predictionOut	./cpu/minor/fetch2.hh	/^    Latch<BranchData>::Input predictionOut;$/;"	m	class:Minor::Fetch2
predictionSeqNum	./cpu/minor/dyn_inst.hh	/^    InstSeqNum predictionSeqNum;$/;"	m	class:Minor::InstId
predictionSeqNum	./cpu/minor/fetch1.hh	/^    InstSeqNum predictionSeqNum;$/;"	m	class:Minor::Fetch1
predictionSeqNum	./cpu/minor/fetch2.hh	/^    InstSeqNum predictionSeqNum;$/;"	m	class:Minor::Fetch2
prefetchFaults	./arch/arm/tlb.hh	/^    mutable Stats::Scalar prefetchFaults;$/;"	m	class:ArmISA::TLB
prefetchOnAccess	./mem/cache/cache.hh	/^    const bool prefetchOnAccess;$/;"	m	class:Cache
prefetch_on_access	./mem/cache/Cache.py	/^    prefetch_on_access = Param.Bool(False,$/;"	v	class:BaseCache
prefetcher	./mem/cache/Cache.py	/^    prefetcher = Param.BasePrefetcher(NULL,"Prefetcher attached to cache")$/;"	v	class:BaseCache
prefetcher	./mem/cache/cache.hh	/^    BasePrefetcher *prefetcher;$/;"	m	class:Cache
prefix	./mem/packet.hh	/^            std::string *prefix;$/;"	m	struct:Packet::PrintReqState::LabelStackEntry
prepFpState	./arch/arm/insts/vfp.cc	/^prepFpState(uint32_t rMode)$/;"	f	namespace:ArmISA
prepIntRequest	./arch/x86/intmessage.hh	/^    prepIntRequest(const uint8_t id, Addr offset, Addr size)$/;"	f	namespace:X86ISA
prep_int_lit_case_label	./arch/isa_parser.py	/^    def prep_int_lit_case_label(self, lit):$/;"	m	class:ISAParser
prep_str_lit_case_label	./arch/isa_parser.py	/^    def prep_str_lit_case_label(self, lit):$/;"	m	class:ISAParser
prepare	./base/statistics.hh	/^    prepare()$/;"	f	class:Stats::DataWrapVec
prepare	./base/statistics.hh	/^    prepare()$/;"	f	class:Stats::DistBase
prepare	./base/statistics.hh	/^    prepare()$/;"	f	class:Stats::SparseHistBase
prepare	./base/statistics.hh	/^    prepare()$/;"	f	class:Stats::Vector2dBase
prepare	./base/statistics.hh	/^    prepare()$/;"	f	class:Stats::VectorDistBase
prepare	./base/statistics.hh	/^    prepare(Info *info)$/;"	f	class:Stats::AvgStor
prepare	./base/statistics.hh	/^    prepare(Info *info, DistData &data)$/;"	f	class:Stats::AvgSampleStor
prepare	./base/statistics.hh	/^    prepare(Info *info, DistData &data)$/;"	f	class:Stats::DistStor
prepare	./base/statistics.hh	/^    prepare(Info *info, DistData &data)$/;"	f	class:Stats::HistStor
prepare	./base/statistics.hh	/^    prepare(Info *info, DistData &data)$/;"	f	class:Stats::SampleStor
prepare	./base/statistics.hh	/^    prepare(Info *info, SparseHistData &data)$/;"	f	class:Stats::SparseHistStor
prepare	./base/statistics.hh	/^    void prepare() { data()->prepare(this->info()); }$/;"	f	class:Stats::ScalarBase
prepare	./base/statistics.hh	/^    void prepare() { s.prepare(); }$/;"	f	class:Stats::InfoProxy
prepare	./base/statistics.hh	/^    void prepare() { }$/;"	f	class:Stats::Formula
prepare	./base/statistics.hh	/^    void prepare() { }$/;"	f	class:Stats::ProxyInfo
prepare	./base/statistics.hh	/^    void prepare() { }$/;"	f	class:Stats::ValueBase
prepare	./base/statistics.hh	/^    void prepare(Info *info) { }$/;"	f	class:Stats::StatStor
prepare	./python/m5/stats/__init__.py	/^def prepare():$/;"	f
prepareIO	./dev/net/sinic.cc	/^Device::prepareIO(ContextID cpu, int index)$/;"	f	class:Sinic::Device
prepareRead	./dev/net/sinic.cc	/^Device::prepareRead(ContextID cpu, int index)$/;"	f	class:Sinic::Device
prepareWrite	./dev/net/sinic.cc	/^Device::prepareWrite(ContextID cpu, int index)$/;"	f	class:Sinic::Device
prepend_all	./arch/isa_parser.py	/^    def prepend_all(self, pre):$/;"	m	class:GenCode
prepost	./arch/arm/types.hh	/^            Bitfield<24> prepost;$/;"	m	namespace:ArmISA
prereq	./base/statistics.hh	/^    prereq(const Stat &prereq)$/;"	f	class:Stats::DataWrap
prereq	./base/stats/info.hh	/^    const Info *prereq;$/;"	m	class:Stats::Info
prescalar	./dev/arm/timer_cpulocal.hh	/^            Bitfield<15,8> prescalar;$/;"	m	class:CpuLocalTimer::Timer
present	./arch/x86/faults.hh	/^            Bitfield<0> present;$/;"	m	class:X86ISA::PageFault
present	./arch/x86/regs/misc.hh	/^        Bitfield<7> present;$/;"	m	namespace:X86ISA
present	./arch/x86/types.hh	/^        Bitfield<6> present;$/;"	m	namespace:X86ISA
pretty_print	./python/m5/params.py	/^    def pretty_print(self, value):$/;"	m	class:Addr
pretty_print	./python/m5/params.py	/^    def pretty_print(self, value):$/;"	m	class:ParamDesc
pretty_print	./python/m5/params.py	/^    def pretty_print(self, value):$/;"	m	class:ParamValue
pretty_print	./python/m5/params.py	/^    def pretty_print(self, value):$/;"	m	class:VectorParamDesc
prev	./mem/cache/tags/fa_lru.hh	/^    FALRUBlk *prev;$/;"	m	class:FALRUBlk
prevArrival	./mem/dram_ctrl.hh	/^    Tick prevArrival;$/;"	m	class:DRAMCtrl
prevDestRegIdx	./cpu/base_dyn_inst.hh	/^    PhysRegIndex prevDestRegIdx(int idx) const$/;"	f	class:BaseDynInst
prevPhysReg	./cpu/o3/rename.hh	/^        PhysRegIndex prevPhysReg;$/;"	m	struct:DefaultRename::RenameHistory
prevPrime	./base/intmath.cc	/^prevPrime(int n)$/;"	f
prevRecvTick	./dev/net/dist_iface.hh	/^        Tick prevRecvTick;$/;"	m	class:DistIface::RecvScheduler
previousCycle	./cpu/simple/timing.hh	/^    Cycles previousCycle;$/;"	m	class:TimingSimpleCPU
priContext	./arch/sparc/isa.hh	/^    uint16_t priContext;$/;"	m	class:SparcISA::ISA
primary	./dev/storage/ide_ctrl.hh	/^    Channel primary;$/;"	m	class:IdeController
primaryTiming	./dev/storage/ide_ctrl.hh	/^    uint16_t primaryTiming, secondaryTiming;$/;"	m	class:IdeController
primes_list	./mem/ruby/filters/H3BloomFilter.hh	/^    int primes_list[6];\/\/ = {9323,11279,10247,30637,25717,43711};$/;"	m	class:H3BloomFilter
print	./arch/arm/pagetable.hh	/^    print() const$/;"	f	struct:ArmISA::TlbEntry
print	./arch/sparc/tlb_map.hh	/^    print()$/;"	f	class:SparcISA::TlbMap
print	./cpu/testers/rubytest/Check.cc	/^Check::print(std::ostream& out) const$/;"	f	class:Check
print	./cpu/testers/rubytest/CheckTable.cc	/^CheckTable::print(std::ostream& out) const$/;"	f	class:CheckTable
print	./cpu/testers/rubytest/RubyTester.cc	/^RubyTester::print(std::ostream& out) const$/;"	f	class:RubyTester
print	./mem/cache/blk.cc	/^CacheBlkPrintWrapper::print(std::ostream &os, int verbosity,$/;"	f	class:CacheBlkPrintWrapper
print	./mem/cache/blk.hh	/^    std::string print() const$/;"	f	class:CacheBlk
print	./mem/cache/mshr.cc	/^MSHR::TargetList::print(std::ostream &os, int verbosity,$/;"	f	class:MSHR::TargetList
print	./mem/cache/mshr.cc	/^MSHR::print() const$/;"	f	class:MSHR
print	./mem/cache/mshr.cc	/^MSHR::print(std::ostream &os, int verbosity, const std::string &prefix) const$/;"	f	class:MSHR
print	./mem/cache/tags/base_set_assoc.cc	/^BaseSetAssoc::print() const {$/;"	f	class:BaseSetAssoc
print	./mem/packet.cc	/^Packet::print() const {$/;"	f	class:Packet
print	./mem/packet.cc	/^Packet::print(ostream &o, const int verbosity, const string &prefix) const$/;"	f	class:Packet
print	./mem/ruby/common/DataBlock.cc	/^DataBlock::print(std::ostream& out) const$/;"	f	class:DataBlock
print	./mem/ruby/common/Histogram.cc	/^Histogram::print(ostream& out) const$/;"	f	class:Histogram
print	./mem/ruby/common/NetDest.cc	/^NetDest::print(std::ostream& out) const$/;"	f	class:NetDest
print	./mem/ruby/common/Set.hh	/^    void print(std::ostream& out) const$/;"	f	class:Set
print	./mem/ruby/common/SubBlock.cc	/^SubBlock::print(std::ostream& out) const$/;"	f	class:SubBlock
print	./mem/ruby/filters/BlockBloomFilter.cc	/^BlockBloomFilter::print(ostream& out) const$/;"	f	class:BlockBloomFilter
print	./mem/ruby/filters/BulkBloomFilter.cc	/^BulkBloomFilter::print(ostream& out) const$/;"	f	class:BulkBloomFilter
print	./mem/ruby/filters/H3BloomFilter.cc	/^H3BloomFilter::print(ostream& out) const$/;"	f	class:H3BloomFilter
print	./mem/ruby/filters/LSB_CountingBloomFilter.cc	/^LSB_CountingBloomFilter::print(ostream& out) const$/;"	f	class:LSB_CountingBloomFilter
print	./mem/ruby/filters/MultiBitSelBloomFilter.cc	/^MultiBitSelBloomFilter::print(ostream& out) const$/;"	f	class:MultiBitSelBloomFilter
print	./mem/ruby/filters/MultiGrainBloomFilter.cc	/^MultiGrainBloomFilter::print(ostream& out) const$/;"	f	class:MultiGrainBloomFilter
print	./mem/ruby/filters/NonCountingBloomFilter.cc	/^NonCountingBloomFilter::print(ostream& out) const$/;"	f	class:NonCountingBloomFilter
print	./mem/ruby/network/BasicLink.cc	/^BasicLink::print(std::ostream& out) const$/;"	f	class:BasicLink
print	./mem/ruby/network/BasicRouter.cc	/^BasicRouter::print(std::ostream& out) const$/;"	f	class:BasicRouter
print	./mem/ruby/network/MessageBuffer.cc	/^MessageBuffer::print(ostream& out) const$/;"	f	class:MessageBuffer
print	./mem/ruby/network/Topology.hh	/^    void print(std::ostream& out) const { out << "[Topology]"; }$/;"	f	class:Topology
print	./mem/ruby/network/fault_model/FaultModel.cc	/^FaultModel::print(void)$/;"	f	class:FaultModel
print	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.cc	/^GarnetExtLink_d::print(std::ostream& out) const$/;"	f	class:GarnetExtLink_d
print	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.cc	/^GarnetIntLink_d::print(std::ostream& out) const$/;"	f	class:GarnetIntLink_d
print	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.cc	/^GarnetNetwork_d::print(ostream& out) const$/;"	f	class:GarnetNetwork_d
print	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    void print(std::ostream& out) const {};$/;"	f	class:InputUnit_d
print	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.cc	/^NetworkInterface_d::print(std::ostream& out) const$/;"	f	class:NetworkInterface_d
print	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.hh	/^    void print(std::ostream& out) const {}$/;"	f	class:NetworkLink_d
print	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.hh	/^    void print(std::ostream& out) const {};$/;"	f	class:OutputUnit_d
print	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.hh	/^    void print(std::ostream& out) const {};$/;"	f	class:SWallocator_d
print	./mem/ruby/network/garnet/fixed-pipeline/Switch_d.hh	/^    void print(std::ostream& out) const {};$/;"	f	class:Switch_d
print	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.hh	/^    void print(std::ostream& out) const {}$/;"	f	class:VCallocator_d
print	./mem/ruby/network/garnet/fixed-pipeline/flitBuffer_d.cc	/^flitBuffer_d::print(std::ostream& out) const$/;"	f	class:flitBuffer_d
print	./mem/ruby/network/garnet/fixed-pipeline/flit_d.cc	/^flit_d::print(std::ostream& out) const$/;"	f	class:flit_d
print	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.cc	/^GarnetExtLink::print(std::ostream& out) const$/;"	f	class:GarnetExtLink
print	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.cc	/^GarnetIntLink::print(std::ostream& out) const$/;"	f	class:GarnetIntLink
print	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.cc	/^GarnetNetwork::print(ostream& out) const$/;"	f	class:GarnetNetwork
print	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.cc	/^NetworkInterface::print(std::ostream& out) const$/;"	f	class:NetworkInterface
print	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.hh	/^    void print(std::ostream& out) const {}$/;"	f	class:NetworkLink
print	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::print(ostream& out) const$/;"	f	class:Router
print	./mem/ruby/network/garnet/flexible-pipeline/VCarbiter.hh	/^    void print(std::ostream& out) const {}$/;"	f	class:VCarbiter
print	./mem/ruby/network/garnet/flexible-pipeline/flit.cc	/^flit::print(std::ostream& out) const$/;"	f	class:flit
print	./mem/ruby/network/garnet/flexible-pipeline/flitBuffer.cc	/^flitBuffer::print(std::ostream& out) const$/;"	f	class:flitBuffer
print	./mem/ruby/network/simple/PerfectSwitch.cc	/^PerfectSwitch::print(std::ostream& out) const$/;"	f	class:PerfectSwitch
print	./mem/ruby/network/simple/SimpleLink.cc	/^SimpleExtLink::print(std::ostream& out) const$/;"	f	class:SimpleExtLink
print	./mem/ruby/network/simple/SimpleLink.cc	/^SimpleIntLink::print(std::ostream& out) const$/;"	f	class:SimpleIntLink
print	./mem/ruby/network/simple/SimpleNetwork.cc	/^SimpleNetwork::print(ostream& out) const$/;"	f	class:SimpleNetwork
print	./mem/ruby/network/simple/Switch.cc	/^Switch::print(std::ostream& out) const$/;"	f	class:Switch
print	./mem/ruby/network/simple/Throttle.cc	/^Throttle::print(ostream& out) const$/;"	f	class:Throttle
print	./mem/ruby/profiler/AccessTraceForAddress.cc	/^AccessTraceForAddress::print(std::ostream& out) const$/;"	f	class:AccessTraceForAddress
print	./mem/ruby/profiler/StoreTrace.cc	/^StoreTrace::print(ostream& out) const$/;"	f	class:StoreTrace
print	./mem/ruby/slicc_interface/RubyRequest.cc	/^RubyRequest::print(ostream& out) const$/;"	f	class:RubyRequest
print	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::print(ostream& out) const$/;"	f	class:CacheMemory
print	./mem/ruby/structures/DirectoryMemory.cc	/^DirectoryMemory::print(ostream& out) const$/;"	f	class:DirectoryMemory
print	./mem/ruby/structures/MemoryNode.cc	/^MemoryNode::print(ostream& out) const$/;"	f	class:MemoryNode
print	./mem/ruby/structures/PerfectCacheMemory.hh	/^PerfectCacheMemory<ENTRY>::print(std::ostream& out) const$/;"	f	class:PerfectCacheMemory
print	./mem/ruby/structures/PersistentTable.cc	/^PersistentTable::print(ostream& out) const$/;"	f	class:PersistentTable
print	./mem/ruby/structures/PersistentTable.hh	/^    void print(std::ostream& out) const {}$/;"	f	class:PersistentTableEntry
print	./mem/ruby/structures/Prefetcher.cc	/^Prefetcher::print(std::ostream& out) const$/;"	f	class:Prefetcher
print	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::print(ostream& out) const$/;"	f	class:RubyMemoryControl
print	./mem/ruby/structures/TBETable.hh	/^TBETable<ENTRY>::print(std::ostream& out) const$/;"	f	class:TBETable
print	./mem/ruby/structures/TimerTable.cc	/^TimerTable::print(std::ostream& out) const$/;"	f	class:TimerTable
print	./mem/ruby/structures/WireBuffer.cc	/^WireBuffer::print(ostream& out) const$/;"	f	class:WireBuffer
print	./mem/ruby/system/CacheRecorder.cc	/^TraceRecord::print(ostream& out) const$/;"	f	class:TraceRecord
print	./mem/ruby/system/Sequencer.cc	/^Sequencer::print(ostream& out) const$/;"	f	class:Sequencer
printAddr	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::printAddr(Addr a)$/;"	f	class:AtomicSimpleCPU
printAddr	./cpu/simple/timing.cc	/^TimingSimpleCPU::printAddr(Addr a)$/;"	f	class:TimingSimpleCPU
printAddr	./cpu/testers/networktest/networktest.cc	/^NetworkTest::printAddr(Addr a)$/;"	f	class:NetworkTest
printAddr	./mem/port.cc	/^MasterPort::printAddr(Addr a)$/;"	f	class:MasterPort
printAddress	./mem/ruby/common/Address.cc	/^printAddress(Addr addr)$/;"	f
printAggregateFaultProbability	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^Router_d::printAggregateFaultProbability(std::ostream& out)$/;"	f	class:Router_d
printAvailableInsts	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::printAvailableInsts()$/;"	f	class:DefaultIEW
printCSwitch	./mem/slicc/symbols/StateMachine.py	/^    def printCSwitch(self, path):$/;"	m	class:StateMachine
printCWakeup	./mem/slicc/symbols/StateMachine.py	/^    def printCWakeup(self, path, includes):$/;"	m	class:StateMachine
printCondition	./arch/arm/insts/static_inst.cc	/^ArmStaticInst::printCondition(std::ostream &os,$/;"	f	class:ArmISA::ArmStaticInst
printConfig	./cpu/testers/directedtest/RubyDirectedTester.hh	/^    void printConfig(std::ostream& out) const {}$/;"	f	class:RubyDirectedTester
printConfig	./cpu/testers/rubytest/RubyTester.hh	/^    void printConfig(std::ostream& out) const {}$/;"	f	class:RubyTester
printControllerCC	./mem/slicc/symbols/StateMachine.py	/^    def printControllerCC(self, path, includes):$/;"	m	class:StateMachine
printControllerHH	./mem/slicc/symbols/StateMachine.py	/^    def printControllerHH(self, path):$/;"	m	class:StateMachine
printControllerPython	./mem/slicc/symbols/StateMachine.py	/^    def printControllerPython(self, path):$/;"	m	class:StateMachine
printData	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::printData(ostream& out) const$/;"	f	class:CacheMemory
printDataInst	./arch/arm/insts/static_inst.cc	/^ArmStaticInst::printDataInst(std::ostream &os, bool withImm,$/;"	f	class:ArmISA::ArmStaticInst
printDest	./arch/arm/insts/mem.hh	/^    printDest(std::ostream &os) const$/;"	f	class:ArmISA::Memory
printDest	./arch/arm/insts/mem.hh	/^    printDest(std::ostream &os) const$/;"	f	class:ArmISA::MemoryDImm
printDest	./arch/arm/insts/mem.hh	/^    printDest(std::ostream &os) const$/;"	f	class:ArmISA::MemoryDReg
printDest	./arch/arm/insts/mem.hh	/^    printDest(std::ostream &os) const$/;"	f	class:ArmISA::MemoryExDImm
printDest	./arch/arm/insts/mem.hh	/^    printDest(std::ostream &os) const$/;"	f	class:ArmISA::MemoryExImm
printDestReg	./arch/x86/insts/static_inst.cc	/^    X86StaticInst::printDestReg(std::ostream &os, int reg, int size) const$/;"	f	class:X86ISA::X86StaticInst
printDotty	./mem/slicc/generate/dot.py	/^def printDotty(sm, code):$/;"	f
printEnumCC	./mem/slicc/symbols/Type.py	/^    def printEnumCC(self, path):$/;"	m	class:Type
printEnumHH	./mem/slicc/symbols/Type.py	/^    def printEnumHH(self, path):$/;"	m	class:Type
printExtendOperand	./arch/arm/insts/static_inst.cc	/^ArmStaticInst::printExtendOperand(bool firstOperand, std::ostream &os,$/;"	f	class:ArmISA::ArmStaticInst
printFaultVector	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^Router_d::printFaultVector(ostream& out)$/;"	f	class:Router_d
printFlags	./cpu/static_inst.cc	/^StaticInst::printFlags(std::ostream &outs,$/;"	f	class:StaticInst
printHTMLTransitions	./mem/slicc/symbols/StateMachine.py	/^    def printHTMLTransitions(self, path, active_state):$/;"	m	class:StateMachine
printInst	./arch/arm/insts/mem.cc	/^Memory::printInst(std::ostream &os, AddrMode addrMode) const$/;"	f	class:ArmISA::Memory
printLabels	./mem/packet.cc	/^Packet::PrintReqState::printLabels()$/;"	f	class:Packet::PrintReqState
printList	./python/m5/util/__init__.py	/^def printList(items, indent=4):$/;"	f
printMem	./arch/x86/insts/static_inst.cc	/^    void X86StaticInst::printMem(std::ostream &os, uint8_t segment,$/;"	f	class:X86ISA::X86StaticInst
printMemSymbol	./arch/arm/insts/static_inst.cc	/^ArmStaticInst::printMemSymbol(std::ostream &os,$/;"	f	class:ArmISA::ArmStaticInst
printMnemonic	./arch/arm/insts/static_inst.cc	/^ArmStaticInst::printMnemonic(std::ostream &os,$/;"	f	class:ArmISA::ArmStaticInst
printMnemonic	./arch/x86/insts/static_inst.cc	/^    void X86StaticInst::printMnemonic(std::ostream &os,$/;"	f	class:X86ISA::X86StaticInst
printMsrBase	./arch/arm/insts/misc.cc	/^MsrBase::printMsrBase(std::ostream &os) const$/;"	f	class:MsrBase
printNewDel	./unittest/refcnttest.cc	/^bool printNewDel = false;$/;"	m	namespace:__anon3	file:
printObj	./mem/packet.cc	/^Packet::PrintReqState::printObj(Printable *obj)$/;"	f	class:Packet::PrintReqState
printOccupancy	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::HardwareResource::printOccupancy() {$/;"	f	class:TraceCPU::ElasticDataGen::HardwareResource
printOffset	./arch/arm/insts/mem.cc	/^MemoryReg::printOffset(std::ostream &os) const$/;"	f	class:ArmISA::MemoryReg
printOffset	./arch/arm/insts/mem.hh	/^    printOffset(std::ostream &os) const$/;"	f	class:ArmISA::Memory
printOffset	./arch/arm/insts/mem.hh	/^    printOffset(std::ostream &os) const$/;"	f	class:ArmISA::MemoryImm
printOnPass	./unittest/unittest.cc	/^bool printOnPass() { return _printOnPass; }$/;"	f	namespace:UnitTest
printOnPass	./unittest/unittest.cc	/^void printOnPass(bool newPrintOnPass) { _printOnPass = newPrintOnPass; }$/;"	f	namespace:UnitTest
printPercent	./mem/ruby/common/Histogram.cc	/^Histogram::printPercent(ostream& out) const$/;"	f	class:Histogram
printQs	./mem/dram_ctrl.cc	/^DRAMCtrl::printQs() const {$/;"	f	class:DRAMCtrl
printReadyList	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::printReadyList() {$/;"	f	class:TraceCPU::ElasticDataGen
printReg	./arch/arm/insts/static_inst.cc	/^ArmStaticInst::printReg(std::ostream &os, int reg) const$/;"	f	class:ArmISA::ArmStaticInst
printReg	./arch/power/insts/static_inst.cc	/^PowerStaticInst::printReg(std::ostream &os, int reg) const$/;"	f	class:PowerStaticInst
printReg	./arch/x86/insts/static_inst.cc	/^    X86StaticInst::printReg(std::ostream &os, int reg, int size) const$/;"	f	class:X86ISA::X86StaticInst
printRegName	./cpu/minor/dyn_inst.cc	/^printRegName(std::ostream &os, TheISA::RegIndex reg)$/;"	f	namespace:Minor
printResults	./unittest/unittest.cc	/^printResults()$/;"	f	namespace:UnitTest
printSegment	./arch/x86/insts/static_inst.cc	/^    void X86StaticInst::printSegment(std::ostream &os, int segment) const$/;"	f	class:X86ISA::X86StaticInst
printShiftOperand	./arch/arm/insts/static_inst.cc	/^ArmStaticInst::printShiftOperand(std::ostream &os,$/;"	f	class:ArmISA::ArmStaticInst
printSorted	./mem/ruby/profiler/AddressProfiler.cc	/^printSorted(ostream& out, int num_of_sequencers, const AddressMap &record_map,$/;"	f
printSrcReg	./arch/x86/insts/static_inst.cc	/^    X86StaticInst::printSrcReg(std::ostream &os, int reg, int size) const$/;"	f	class:X86ISA::X86StaticInst
printStack	./mem/stack_dist_calc.cc	/^StackDistCalc::printStack(int n) const$/;"	f	class:StackDistCalc
printStats	./cpu/testers/directedtest/RubyDirectedTester.hh	/^    void printStats(std::ostream& out) const {}$/;"	f	class:RubyDirectedTester
printStats	./cpu/testers/rubytest/RubyTester.hh	/^    void printStats(std::ostream& out) const {}$/;"	f	class:RubyTester
printStats	./mem/dramsim2_wrapper.cc	/^DRAMSim2Wrapper::printStats()$/;"	f	class:DRAMSim2Wrapper
printStats	./mem/ruby/profiler/AddressProfiler.cc	/^AddressProfiler::printStats(ostream& out) const$/;"	f	class:AddressProfiler
printSummary	./mem/ruby/profiler/StoreTrace.cc	/^StoreTrace::printSummary(ostream& out)$/;"	f	class:StoreTrace
printSystems	./sim/system.cc	/^System::printSystems()$/;"	f	class:System
printSystems	./sim/system.cc	/^printSystems()$/;"	f
printTarget	./arch/arm/insts/static_inst.cc	/^ArmStaticInst::printTarget(std::ostream &os, Addr target,$/;"	f	class:ArmISA::ArmStaticInst
printTexTable	./mem/slicc/generate/tex.py	/^def printTexTable(sm, code):$/;"	f
printThreadEvent	./arch/alpha/linux/system.hh	/^    PrintThreadInfo *printThreadEvent;$/;"	m	class:LinuxAlphaSystem
printTlb	./arch/arm/tlb.cc	/^TLB::printTlb() const$/;"	f	class:TLB
printTypeCC	./mem/slicc/symbols/Type.py	/^    def printTypeCC(self, path):$/;"	m	class:Type
printTypeHH	./mem/slicc/symbols/Type.py	/^    def printTypeHH(self, path):$/;"	m	class:Type
printUnreferenced	./base/inifile.cc	/^IniFile::Section::printUnreferenced(const string &sectionName)$/;"	f	class:IniFile::Section
printUnreferenced	./base/inifile.cc	/^IniFile::printUnreferenced()$/;"	f	class:IniFile
printWithMultiplier	./mem/ruby/common/Histogram.cc	/^Histogram::printWithMultiplier(ostream& out, double multiplier) const$/;"	f	class:Histogram
print_backtrace	./sim/backtrace_glibc.cc	/^print_backtrace()$/;"	f
print_backtrace	./sim/backtrace_none.cc	/^print_backtrace()$/;"	f
print_debug	./arch/micro_asm_test.py	/^    def print_debug(self, message):$/;"	m	class:TestMacroop
print_error	./arch/micro_asm.py	/^def print_error(message):$/;"	f
print_ini	./python/m5/SimObject.py	/^    def print_ini(self, ini_file):$/;"	f
print_sign	./base/cprintf_formats.hh	/^    bool print_sign;$/;"	m	struct:cp::Format
printfEvent	./arch/alpha/tru64/system.hh	/^    PrintfEvent *printfEvent;$/;"	m	class:Tru64AlphaSystem
printinfo	./python/m5/util/jobfile.py	/^    def printinfo(self):$/;"	m	class:Configuration
printinfo	./python/m5/util/jobfile.py	/^    def printinfo(self):$/;"	m	class:Data
printinfo	./python/m5/util/jobfile.py	/^    def printinfo(self):$/;"	m	class:Group
printinfo	./python/m5/util/jobfile.py	/^    def printinfo(self):$/;"	m	class:Job
printinfo	./python/m5/util/jobfile.py	/^    def printinfo(self):$/;"	m	class:Option
printverbose	./python/m5/util/jobfile.py	/^    def printverbose(self):$/;"	m	class:Data
priocntlset	./kern/tru64/tru64_syscalls.hh	/^        priocntlset = 237,$/;"	e	enum:SystemCalls::__anon102
priority	./arch/sparc/faults.hh	/^        const FaultPriority priority;$/;"	m	struct:SparcISA::SparcFaultBase::FaultVals
priority	./arch/sparc/faults.hh	/^    FaultPriority priority() { return 3200 - _n*100; }$/;"	f	class:SparcISA::InterruptLevelN
priority	./arch/sparc/faults.hh	/^    FaultPriority priority() { return vals.priority; }$/;"	f	class:SparcISA::SparcFault
priority	./kern/tru64/tru64.hh	/^        int priority;   \/\/!< priority$/;"	m	struct:Tru64::nxm_thread_attr
priority	./sim/eventq.hh	/^    Priority priority() const { return _priority; }$/;"	f	class:Event
priorityList	./cpu/o3/fetch.hh	/^    std::list<ThreadID> priorityList;$/;"	m	class:DefaultFetch
priority_list	./cpu/o3/commit.hh	/^    std::list<ThreadID> priority_list;$/;"	m	class:DefaultCommit
priv	./arch/sparc/miscregs.hh	/^    Bitfield<2> priv;$/;"	m	namespace:SparcISA
priv	./arch/sparc/pagetable.hh	/^    bool priv()     const { assert(populated); return bits(entry4u,2,2); }$/;"	f	class:SparcISA::PageTableEntry
priv	./dev/net/pktfifo.hh	/^    int priv;$/;"	m	struct:PacketFifoEntry
privSyscallDescs32	./arch/arm/linux/process.cc	/^static SyscallDesc privSyscallDescs32[] = {$/;"	v	file:
privSyscallDescs64	./arch/arm/linux/process.cc	/^static SyscallDesc privSyscallDescs64[] = {$/;"	v	file:
privateFlags	./mem/request.hh	/^    PrivateFlags privateFlags;$/;"	m	class:Request
prm	./arch/mips/dt_constants.hh	/^    Bitfield<3> prm;$/;"	m	namespace:MipsISA
probeEntry	./arch/mips/tlb.cc	/^TLB::probeEntry(Addr vpn, uint8_t asn) const$/;"	f	class:TLB
probeEntry	./arch/power/tlb.cc	/^TLB::probeEntry(Addr vpn,uint8_t asn) const$/;"	f	class:TLB
probeInstCommit	./cpu/base.cc	/^BaseCPU::probeInstCommit(const StaticInstPtr &inst)$/;"	f	class:BaseCPU
probeManager	./sim/sim_object.hh	/^    ProbeManager *probeManager;$/;"	m	class:SimObject
probe_name	./mem/probes/BaseMemProbe.py	/^    probe_name = Param.String("PktRequest", "Memory request probe to use")$/;"	v	class:BaseMemProbe
procId	./arch/mips/pra_constants.hh	/^    Bitfield<15, 8>  procId;$/;"	m	namespace:MipsISA
procInfo	./base/hostinfo.cc	/^procInfo(const char *filename, const char *target)$/;"	f
procMeminfo	./kern/linux/linux.cc	/^Linux::procMeminfo(LiveProcess *process, ThreadContext *tc)$/;"	f	class:Linux
proc_id0	./dev/arm/RealView.py	/^    proc_id0 = Param.UInt32(0x0C000000, "Processor ID, SYS_PROCID")$/;"	v	class:RealViewCtrl
proc_id1	./dev/arm/RealView.py	/^    proc_id1 = Param.UInt32(0x0C000222, "Processor ID, SYS_PROCID1")$/;"	v	class:RealViewCtrl
process	./arch/alpha/decoder.hh	/^    process()$/;"	f	class:AlphaISA::Decoder
process	./arch/alpha/freebsd/system.cc	/^FreebsdAlphaSystem::SkipCalibrateClocksEvent::process(ThreadContext *tc)$/;"	f	class:FreebsdAlphaSystem::SkipCalibrateClocksEvent
process	./arch/alpha/idle_event.cc	/^IdleStartEvent::process(ThreadContext *tc)$/;"	f	class:IdleStartEvent
process	./arch/alpha/linux/system.cc	/^LinuxAlphaSystem::PrintThreadInfo::process(ThreadContext *tc)$/;"	f	class:LinuxAlphaSystem::PrintThreadInfo
process	./arch/alpha/linux/system.cc	/^LinuxAlphaSystem::SkipDelayLoopEvent::process(ThreadContext *tc)$/;"	f	class:LinuxAlphaSystem::SkipDelayLoopEvent
process	./arch/arm/decoder.cc	/^Decoder::process()$/;"	f	class:ArmISA::Decoder
process	./arch/arm/linux/system.cc	/^DumpStatsPCEvent::process(ThreadContext *tc)$/;"	f	class:DumpStatsPCEvent
process	./arch/mips/decoder.hh	/^    process()$/;"	f	class:MipsISA::Decoder
process	./arch/mips/idle_event.cc	/^IdleStartEvent::process(ThreadContext *tc)$/;"	f	class:IdleStartEvent
process	./arch/mips/isa.cc	/^ISA::CP0Event::process()$/;"	f	class:MipsISA::ISA::CP0Event
process	./arch/mips/linux/system.cc	/^LinuxMipsSystem::PrintThreadInfo::process(ThreadContext *tc)$/;"	f	class:LinuxMipsSystem::PrintThreadInfo
process	./arch/mips/linux/system.cc	/^LinuxMipsSystem::SkipDelayLoopEvent::process(ThreadContext *tc)$/;"	f	class:LinuxMipsSystem::SkipDelayLoopEvent
process	./arch/power/decoder.hh	/^    process()$/;"	f	class:PowerISA::Decoder
process	./arch/sparc/decoder.hh	/^    void process() {}$/;"	f	class:SparcISA::Decoder
process	./arch/x86/decoder.cc	/^Decoder::process()$/;"	f	class:X86ISA::Decoder
process	./arch/x86/interrupts.hh	/^        void process()$/;"	f	class:X86ISA::Interrupts::ApicTimerEvent
process	./base/callback.hh	/^    process()$/;"	f	class:CallbackQueue
process	./base/callback.hh	/^    void process() { (object->*F)(); }$/;"	f	class:MakeCallback
process	./base/cp_annotate.cc	/^AnnotateDumpCallback::process()$/;"	f	class:AnnotateDumpCallback
process	./base/cprintf.cc	/^Print::process()$/;"	f	class:cp::Print
process	./base/remote_gdb.cc	/^BaseRemoteGDB::HardBreakpoint::process(ThreadContext *tc)$/;"	f	class:BaseRemoteGDB::HardBreakpoint
process	./base/remote_gdb.cc	/^BaseRemoteGDB::InputEvent::process(int revent)$/;"	f	class:BaseRemoteGDB::InputEvent
process	./base/remote_gdb.cc	/^BaseRemoteGDB::SingleStepEvent::process()$/;"	f	class:BaseRemoteGDB::SingleStepEvent
process	./base/remote_gdb.cc	/^BaseRemoteGDB::TrapEvent::process()$/;"	f	class:BaseRemoteGDB::TrapEvent
process	./base/remote_gdb.cc	/^GDBListener::InputEvent::process(int revent)$/;"	f	class:GDBListener::InputEvent
process	./base/vnc/vncserver.cc	/^VncServer::DataEvent::process(int revent)$/;"	f	class:VncServer::DataEvent
process	./base/vnc/vncserver.cc	/^VncServer::ListenEvent::process(int revent)$/;"	f	class:VncServer::ListenEvent
process	./cpu/base.cc	/^BaseCPU::ProfileEvent::process()$/;"	f	class:BaseCPU::ProfileEvent
process	./cpu/base.cc	/^CPUProgressEvent::process()$/;"	f	class:CPUProgressEvent
process	./cpu/cpuevent.hh	/^    void process() { (object->*F)(tc); }$/;"	f	class:CpuEventWrapper
process	./cpu/kvm/base.hh	/^        void process() { cpu.tick(); }$/;"	f	struct:BaseKvmCPU::TickEvent
process	./cpu/minor/lsq.hh	/^            void process()$/;"	f	class:Minor::LSQ::SplitDataRequest::TranslationEvent
process	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::TrapEvent::process()$/;"	f	class:DefaultCommit::TrapEvent
process	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::TickEvent::process()$/;"	f	class:FullO3CPU::TickEvent
process	./cpu/o3/fetch.hh	/^        void process()$/;"	f	class:DefaultFetch::FinishTranslationEvent
process	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::FUCompletion::process()$/;"	f	class:InstructionQueue::FUCompletion
process	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::WritebackEvent::process()$/;"	f	class:LSQUnit::WritebackEvent
process	./cpu/pc_event.cc	/^BreakPCEvent::process(ThreadContext *tc)$/;"	f	class:BreakPCEvent
process	./cpu/pc_event.cc	/^PanicPCEvent::process(ThreadContext *tc)$/;"	f	class:PanicPCEvent
process	./cpu/quiesce_event.cc	/^EndQuiesceEvent::process()$/;"	f	class:EndQuiesceEvent
process	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::TickEvent::process()$/;"	f	class:AtomicSimpleCPU::TickEvent
process	./cpu/simple/timing.cc	/^TimingSimpleCPU::DcachePort::DTickEvent::process()$/;"	f	class:TimingSimpleCPU::DcachePort::DTickEvent
process	./cpu/simple/timing.cc	/^TimingSimpleCPU::IcachePort::ITickEvent::process()$/;"	f	class:TimingSimpleCPU::IcachePort::ITickEvent
process	./cpu/simple/timing.cc	/^TimingSimpleCPU::IprEvent::process()$/;"	f	class:TimingSimpleCPU::IprEvent
process	./cpu/testers/directedtest/RubyDirectedTester.hh	/^        void process() { tester->wakeup(); }$/;"	f	class:RubyDirectedTester::DirectedStartEvent
process	./cpu/testers/networktest/networktest.hh	/^        void process() { cpu->tick(); }$/;"	f	class:NetworkTest::TickEvent
process	./cpu/testers/rubytest/RubyTester.hh	/^        void process() { tester->wakeup(); }$/;"	f	class:RubyTester::CheckStartEvent
process	./cpu/thread_state.hh	/^    Process *process;$/;"	m	struct:ThreadState
process	./dev/arm/gic_pl390.hh	/^        void process() { platform->intrctrl->post(cpu, ArmISA::INT_IRQ, 0);}$/;"	f	class:Pl390::PostIntEvent
process	./dev/arm/pl111.hh	/^        void process() {$/;"	f	class:Pl111::DmaDoneEvent
process	./dev/arm/vgic.hh	/^        void process() { platform->intrctrl->post(cpu, ArmISA::INT_VIRT_IRQ, 0);}$/;"	f	class:VGic::PostVIntEvent
process	./dev/dma_device.cc	/^DmaReadFifo::DmaDoneEvent::process()$/;"	f	class:DmaReadFifo::DmaDoneEvent
process	./dev/intel_8254_timer.cc	/^Intel8254Timer::Counter::CounterEvent::process()$/;"	f	class:Intel8254Timer::Counter::CounterEvent
process	./dev/mc146818.cc	/^MC146818::RTCEvent::process()$/;"	f	class:MC146818::RTCEvent
process	./dev/mc146818.cc	/^MC146818::RTCTickEvent::process()$/;"	f	class:MC146818::RTCTickEvent
process	./dev/net/dist_iface.cc	/^DistIface::SyncEvent::process()$/;"	f	class:DistIface::SyncEvent
process	./dev/net/etherbus.hh	/^        virtual void process() { bus->txDone(); }$/;"	f	class:EtherBus::DoneEvent
process	./dev/net/ethertap.cc	/^        virtual void process(int revent) { listener->accept(); }$/;"	f	class:TapListener::Event
process	./dev/net/ethertap.cc	/^    virtual void process(int revent) { tap->process(revent); }$/;"	f	class:TapEvent
process	./dev/net/ethertap.cc	/^EtherTap::process(int revent)$/;"	f	class:EtherTap
process	./dev/net/ethertap.hh	/^        void process() { tap->retransmit(); }$/;"	f	class:EtherTap::TxEvent
process	./dev/storage/disk_image.cc	/^    void process() { image->save(); delete this; }$/;"	f	class:CowDiskCallback
process	./dev/terminal.cc	/^Terminal::DataEvent::process(int revent)$/;"	f	class:Terminal::DataEvent
process	./dev/terminal.cc	/^Terminal::ListenEvent::process(int revent)$/;"	f	class:Terminal::ListenEvent
process	./dev/uart8250.cc	/^Uart8250::IntrEvent::process()$/;"	f	class:Uart8250::IntrEvent
process	./dev/virtio/fs9p.cc	/^VirtIO9PDiod::DiodDataEvent::process(int revent)$/;"	f	class:VirtIO9PDiod::DiodDataEvent
process	./dev/virtio/fs9p.cc	/^VirtIO9PSocket::SocketDataEvent::process(int revent)$/;"	f	class:VirtIO9PSocket::SocketDataEvent
process	./kern/freebsd/events.cc	/^UDelayEvent::process(ThreadContext *tc)$/;"	f	class:FreeBSD::UDelayEvent
process	./kern/linux/events.cc	/^DebugPrintkEvent::process(ThreadContext *tc)$/;"	f	class:Linux::DebugPrintkEvent
process	./kern/linux/events.cc	/^UDelayEvent::process(ThreadContext *tc)$/;"	f	class:Linux::UDelayEvent
process	./kern/system_events.cc	/^SkipFuncEvent::process(ThreadContext *tc)$/;"	f	class:SkipFuncEvent
process	./kern/tru64/tru64_events.cc	/^BadAddrEvent::process(ThreadContext *tc)$/;"	f	class:BadAddrEvent
process	./kern/tru64/tru64_events.cc	/^DebugPrintfEvent::process(ThreadContext *tc)$/;"	f	class:DebugPrintfEvent
process	./kern/tru64/tru64_events.cc	/^DumpMbufEvent::process(ThreadContext *tc)$/;"	f	class:DumpMbufEvent
process	./kern/tru64/tru64_events.cc	/^PrintfEvent::process(ThreadContext *tc)$/;"	f	class:PrintfEvent
process	./mem/cache/tags/base.hh	/^    virtual void process() { tags->cleanupRefs(); };$/;"	f	class:BaseTagsCallback
process	./mem/cache/tags/base.hh	/^    virtual void process() { tags->computeStats(); };$/;"	f	class:BaseTagsDumpCallback
process	./mem/external_slave.cc	/^StubSlavePort::ResponseEvent::process()$/;"	f	class:StubSlavePort::ResponseEvent
process	./mem/ruby/common/Consumer.hh	/^          void process() { m_consumer_ptr->wakeup(); }$/;"	f	class:Consumer::ConsumerEvent
process	./mem/ruby/network/Network.hh	/^        void process() {ctr->collateStats();}$/;"	f	class:Network::StatsCallback
process	./mem/ruby/slicc_interface/AbstractController.hh	/^        void process() {ctr->collateStats();}$/;"	f	class:AbstractController::StatsCallback
process	./mem/ruby/structures/RubyMemoryControl.hh	/^        void process() { mem_cntrl->wakeup(); }$/;"	f	class:RubyMemoryControl::MemCntrlEvent
process	./mem/ruby/system/RubySystem.cc	/^RubySystem::RubyEvent::process()$/;"	f	class:RubySystem::RubyEvent
process	./mem/ruby/system/RubySystem.hh	/^    void process() { m_ruby_system->collateStats(); }$/;"	f	class:RubyStatsCallback
process	./mem/ruby/system/Sequencer.hh	/^        void process() { m_sequencer_ptr->wakeup(); }$/;"	f	class:Sequencer::SequencerWakeupEvent
process	./mem/se_translating_port_proxy.hh	/^    Process *process;$/;"	m	class:SETranslatingPortProxy
process	./mem/slicc/parser.py	/^    def process(self):$/;"	m	class:SLICC
process	./python/swig/pyevent.cc	/^PythonEvent::process()$/;"	f	class:PythonEvent
process	./sim/debug.cc	/^DebugBreakEvent::process()$/;"	f	class:DebugBreakEvent
process	./sim/dvfs_handler.hh	/^        void process() { updatePerfLevel(); }$/;"	f	struct:DVFSHandler::UpdateEvent
process	./sim/eventq.hh	/^    void process() { (object->*F)(); }$/;"	f	class:EventWrapper
process	./sim/global_event.cc	/^GlobalEvent::BarrierEvent::process()$/;"	f	class:GlobalEvent::BarrierEvent
process	./sim/global_event.cc	/^GlobalSyncEvent::BarrierEvent::process()$/;"	f	class:GlobalSyncEvent::BarrierEvent
process	./sim/global_event.cc	/^GlobalSyncEvent::process()$/;"	f	class:GlobalSyncEvent
process	./sim/sim_events.cc	/^CountedExitEvent::process()$/;"	f	class:CountedExitEvent
process	./sim/sim_events.cc	/^GlobalSimLoopExitEvent::process()$/;"	f	class:GlobalSimLoopExitEvent
process	./sim/sim_events.cc	/^LocalSimLoopExitEvent::process()$/;"	f	class:LocalSimLoopExitEvent
process	./sim/stat_control.cc	/^    process()$/;"	f	class:Stats::StatEvent
process	./sim/stat_control.cc	/^    void process()$/;"	f	struct:Stats::SimTicksReset
process	./sim/ticked_object.hh	/^        process()$/;"	f	class:Ticked::ClockEvent
processActivateEvent	./mem/dram_ctrl.cc	/^DRAMCtrl::Rank::processActivateEvent()$/;"	f	class:DRAMCtrl::Rank
processCacheCompletion	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::processCacheCompletion(PacketPtr pkt)$/;"	f	class:DefaultFetch
processCommand	./dev/arm/kmi.cc	/^Pl050::processCommand(uint8_t byte)$/;"	f	class:Pl050
processContextDesc	./dev/net/i8254xGBe.cc	/^IGbE::TxDescCache::processContextDesc()$/;"	f	class:IGbE::TxDescCache
processData	./dev/x86/i8042.cc	/^X86ISA::PS2Keyboard::processData(uint8_t data)$/;"	f	class:X86ISA::PS2Keyboard
processData	./dev/x86/i8042.cc	/^X86ISA::PS2Mouse::processData(uint8_t data)$/;"	f	class:X86ISA::PS2Mouse
processDumpQueue	./base/statistics.cc	/^processDumpQueue()$/;"	f	namespace:Stats
processExtendedOpcode	./arch/x86/decoder.cc	/^Decoder::processExtendedOpcode(ByteTable &immTable)$/;"	f	class:X86ISA::Decoder
processFUCompletion	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::processFUCompletion(DynInstPtr &inst, int fu_idx)$/;"	f	class:InstructionQueue
processFreeUnits	./cpu/o3/fu_pool.cc	/^FUPool::processFreeUnits()$/;"	f	class:FUPool
processHSTickCompare	./arch/sparc/ua2005.cc	/^ISA::processHSTickCompare(ThreadContext *tc)$/;"	f	class:ISA
processInterrupts	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::processInterrupts(const Fault &interrupt)$/;"	f	class:FullO3CPU
processMoreThanOneInput	./cpu/minor/decode.hh	/^    bool processMoreThanOneInput;$/;"	m	class:Minor::Decode
processMoreThanOneInput	./cpu/minor/execute.hh	/^    bool processMoreThanOneInput;$/;"	m	class:Minor::Execute
processMoreThanOneInput	./cpu/minor/fetch2.hh	/^    bool processMoreThanOneInput;$/;"	m	class:Minor::Fetch2
processNans	./arch/arm/insts/vfp.cc	/^FpOp::processNans(FPSCR &fpscr, bool &done, bool defaultNan,$/;"	f	class:ArmISA::FpOp
processNextReqEvent	./mem/dram_ctrl.cc	/^DRAMCtrl::processNextReqEvent()$/;"	f	class:DRAMCtrl
processOpcode	./arch/x86/decoder.cc	/^Decoder::processOpcode(ByteTable &immTable, ByteTable &modrmTable,$/;"	f	class:X86ISA::Decoder
processPowerEvent	./mem/dram_ctrl.cc	/^DRAMCtrl::Rank::processPowerEvent()$/;"	f	class:DRAMCtrl::Rank
processPrechargeEvent	./mem/dram_ctrl.cc	/^DRAMCtrl::Rank::processPrechargeEvent()$/;"	f	class:DRAMCtrl::Rank
processRefreshEvent	./mem/dram_ctrl.cc	/^DRAMCtrl::Rank::processRefreshEvent()$/;"	f	class:DRAMCtrl::Rank
processResetQueue	./base/statistics.cc	/^processResetQueue()$/;"	f	namespace:Stats
processRespondEvent	./mem/dram_ctrl.cc	/^DRAMCtrl::processRespondEvent()$/;"	f	class:DRAMCtrl
processResponse	./cpu/minor/fetch1.cc	/^Fetch1::processResponse(Fetch1::FetchRequestPtr response,$/;"	f	class:Minor::Fetch1
processSTickCompare	./arch/sparc/ua2005.cc	/^ISA::processSTickCompare(ThreadContext *tc)$/;"	f	class:ISA
processSendEvent	./mem/packet_queue.cc	/^PacketQueue::processSendEvent()$/;"	f	class:PacketQueue
processSendRetry	./mem/cache/base.cc	/^BaseCache::CacheSlavePort::processSendRetry()$/;"	f	class:BaseCache::CacheSlavePort
processTickCompare	./arch/sparc/ua2005.cc	/^ISA::processTickCompare(ThreadContext *tc)$/;"	f	class:ISA
processTxQueue	./dev/net/etherlink.cc	/^EtherLink::Link::processTxQueue()$/;"	f	class:EtherLink::Link
processWalk	./arch/arm/table_walker.cc	/^TableWalker::processWalk()$/;"	f	class:TableWalker
processWalkAArch64	./arch/arm/table_walker.cc	/^TableWalker::processWalkAArch64()$/;"	f	class:TableWalker
processWalkLPAE	./arch/arm/table_walker.cc	/^TableWalker::processWalkLPAE()$/;"	f	class:TableWalker
processWalkWrapper	./arch/arm/table_walker.cc	/^TableWalker::processWalkWrapper()$/;"	f	class:TableWalker
process_flag	./base/cprintf.cc	/^Print::process_flag()$/;"	f	class:cp::Print
process_output	./arch/isa_parser.py	/^    def process_output(self, s):$/;"	m	class:ISAParser
procid	./arch/arm/miscregs.hh	/^      Bitfield<31,8> procid;$/;"	m	namespace:ArmISA
procs	./arch/alpha/linux/linux.hh	/^       uint16_t procs;     \/* Number of current processes *\/$/;"	m	struct:AlphaLinux::__anon51
procs	./arch/arm/linux/linux.hh	/^        uint16_t procs;     \/* Number of current processes *\/$/;"	m	struct:ArmLinux32::__anon76
procs	./arch/arm/linux/linux.hh	/^        uint16_t procs;     \/* Number of current processes *\/$/;"	m	struct:ArmLinux64::__anon79
procs	./arch/mips/linux/linux.hh	/^       uint16_t procs;     \/* Number of current processes *\/$/;"	m	struct:MipsLinux::__anon84
procs	./arch/sparc/linux/linux.hh	/^        uint16_t procs;     \/* Number of current processes *\/$/;"	m	struct:Sparc32Linux::__anon47
procs	./arch/sparc/linux/linux.hh	/^        uint16_t procs;     \/* Number of current processes *\/$/;"	m	struct:SparcLinux::__anon45
procs	./arch/x86/linux/linux.hh	/^        uint16_t procs;     \/* Number of current processes *\/$/;"	m	struct:X86Linux64::__anon61
procs	./arch/x86/linux/linux.hh	/^       uint16_t procs;     \/* Number of current processes *\/$/;"	m	struct:X86Linux32::__anon63
produceDescriptor	./dev/virtio/base.cc	/^VirtQueue::produceDescriptor(VirtDescriptor *desc, uint32_t len)$/;"	f	class:VirtQueue
producerInst	./cpu/o3/iew.hh	/^    Stats::Vector producerInst;$/;"	m	class:DefaultIEW
product0	./dev/arm/ufs_device.hh	/^        uint32_t product0;$/;"	m	struct:UFSHostDevice::LUNInfo
product1	./dev/arm/ufs_device.hh	/^        uint32_t product1;$/;"	m	struct:UFSHostDevice::LUNInfo
product2	./dev/arm/ufs_device.hh	/^        uint32_t product2;$/;"	m	struct:UFSHostDevice::LUNInfo
product3	./dev/arm/ufs_device.hh	/^        uint32_t product3;$/;"	m	struct:UFSHostDevice::LUNInfo
productID	./arch/x86/bios/intelmp.hh	/^    std::string productID;$/;"	m	class:X86ISA::IntelMP::ConfigTable
productRevision	./dev/arm/ufs_device.hh	/^        uint32_t productRevision;$/;"	m	struct:UFSHostDevice::LUNInfo
product_id	./arch/x86/bios/IntelMP.py	/^    product_id = Param.String("", 'product family')$/;"	v	class:X86IntelMPConfigTable
product_id	./dev/arm/hdlcd.hh	/^        Bitfield<31,16> product_id;$/;"	m	class:HDLcd
prof	./base/loader/coff_sym.h	/^    unsigned prof : 1;  \/* true if compiled with -pg *\/$/;"	m	struct:pdr
profil	./kern/tru64/tru64_syscalls.hh	/^        profil = 44,$/;"	e	enum:SystemCalls::__anon102
profile	./cpu/BaseCPU.py	/^    profile = Param.Latency('0ns', "trace the kernel stack")$/;"	v
profile	./cpu/simple/probes/simpoint.cc	/^SimPoint::profile(const std::pair<SimpleThread*, StaticInstPtr>& p)$/;"	f	class:SimPoint
profile	./cpu/thread_state.hh	/^    FunctionProfile *profile;$/;"	m	struct:ThreadState
profileClear	./cpu/checker/thread_context.hh	/^    void profileClear() { return actualTC->profileClear(); }$/;"	f	class:CheckerThreadContext
profileClear	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::profileClear()$/;"	f	class:O3ThreadContext
profileClear	./cpu/thread_context.hh	/^    void profileClear() { return actualTC->profileClear(); }$/;"	f	class:ProxyThreadContext
profileClear	./cpu/thread_state.cc	/^ThreadState::profileClear()$/;"	f	class:ThreadState
profileEvent	./cpu/base.hh	/^    ProfileEvent *profileEvent;$/;"	m	class:BaseCPU
profileGetS	./mem/ruby/profiler/AddressProfiler.cc	/^AddressProfiler::profileGetS(Addr datablock, Addr PC,$/;"	f	class:AddressProfiler
profileGetX	./mem/ruby/profiler/AddressProfiler.cc	/^AddressProfiler::profileGetX(Addr datablock, Addr PC,$/;"	f	class:AddressProfiler
profileMemArbWait	./mem/ruby/profiler/MemCntrlProfiler.cc	/^MemCntrlProfiler::profileMemArbWait(int cycles)$/;"	f	class:MemCntrlProfiler
profileMemBankBusy	./mem/ruby/profiler/MemCntrlProfiler.cc	/^MemCntrlProfiler::profileMemBankBusy()$/;"	f	class:MemCntrlProfiler
profileMemBankQ	./mem/ruby/profiler/MemCntrlProfiler.cc	/^MemCntrlProfiler::profileMemBankQ(int cycles)$/;"	f	class:MemCntrlProfiler
profileMemBusBusy	./mem/ruby/profiler/MemCntrlProfiler.cc	/^MemCntrlProfiler::profileMemBusBusy()$/;"	f	class:MemCntrlProfiler
profileMemDataBusBusy	./mem/ruby/profiler/MemCntrlProfiler.cc	/^MemCntrlProfiler::profileMemDataBusBusy()$/;"	f	class:MemCntrlProfiler
profileMemInputQ	./mem/ruby/profiler/MemCntrlProfiler.cc	/^MemCntrlProfiler::profileMemInputQ(int cycles)$/;"	f	class:MemCntrlProfiler
profileMemNotOld	./mem/ruby/profiler/MemCntrlProfiler.cc	/^MemCntrlProfiler::profileMemNotOld()$/;"	f	class:MemCntrlProfiler
profileMemRandBusy	./mem/ruby/profiler/MemCntrlProfiler.cc	/^MemCntrlProfiler::profileMemRandBusy()$/;"	f	class:MemCntrlProfiler
profileMemRead	./mem/ruby/profiler/MemCntrlProfiler.cc	/^MemCntrlProfiler::profileMemRead()$/;"	f	class:MemCntrlProfiler
profileMemReadWriteBusy	./mem/ruby/profiler/MemCntrlProfiler.cc	/^MemCntrlProfiler::profileMemReadWriteBusy()$/;"	f	class:MemCntrlProfiler
profileMemRefresh	./mem/ruby/profiler/MemCntrlProfiler.cc	/^MemCntrlProfiler::profileMemRefresh()$/;"	f	class:MemCntrlProfiler
profileMemReq	./mem/ruby/profiler/MemCntrlProfiler.cc	/^MemCntrlProfiler::profileMemReq(int bank)$/;"	f	class:MemCntrlProfiler
profileMemTfawBusy	./mem/ruby/profiler/MemCntrlProfiler.cc	/^MemCntrlProfiler::profileMemTfawBusy()$/;"	f	class:MemCntrlProfiler
profileMemWaitCycles	./mem/ruby/profiler/MemCntrlProfiler.cc	/^MemCntrlProfiler::profileMemWaitCycles(int cycles)$/;"	f	class:MemCntrlProfiler
profileMemWrite	./mem/ruby/profiler/MemCntrlProfiler.cc	/^MemCntrlProfiler::profileMemWrite()$/;"	f	class:MemCntrlProfiler
profileMsgDelay	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::profileMsgDelay(uint32_t virtualNetwork, Cycles delay)$/;"	f	class:AbstractController
profileNode	./cpu/thread_state.hh	/^    ProfileNode *profileNode;$/;"	m	struct:ThreadState
profilePC	./cpu/thread_state.hh	/^    Addr profilePC;$/;"	m	struct:ThreadState
profileRetry	./mem/ruby/profiler/AddressProfiler.cc	/^AddressProfiler::profileRetry(Addr data_addr, AccessType type, int count)$/;"	f	class:AddressProfiler
profileSample	./cpu/checker/thread_context.hh	/^    void profileSample() { return actualTC->profileSample(); }$/;"	f	class:CheckerThreadContext
profileSample	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::profileSample()$/;"	f	class:O3ThreadContext
profileSample	./cpu/thread_context.hh	/^    void profileSample() { return actualTC->profileSample(); }$/;"	f	class:ProxyThreadContext
profileSample	./cpu/thread_state.cc	/^ThreadState::profileSample()$/;"	f	class:ThreadState
profileStall	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::profileStall(ThreadID tid) {$/;"	f	class:DefaultFetch
profile_file	./cpu/simple/probes/SimPoint.py	/^    profile_file = Param.String("simpoint.bb.gz", "BBV (output) file")$/;"	v	class:SimPoint
progIF	./dev/pci/pcireg.h	/^        uint8_t progIF;$/;"	m	struct:PCIConfig::__anon26
progName	./sim/process.hh	/^    virtual const char *progName() const { return "<unknown>"; }$/;"	f	class:Process
progName	./sim/process.hh	/^    virtual const char *progName() const { return executable.c_str(); }$/;"	f	class:LiveProcess
progname	./unittest/initest.cc	/^char *progname;$/;"	v
programHeaderCount	./base/loader/elf_object.hh	/^    uint16_t programHeaderCount() {return _programHeaderCount;}$/;"	f	class:ElfObject
programHeaderSize	./base/loader/elf_object.hh	/^    uint16_t programHeaderSize() {return _programHeaderSize;}$/;"	f	class:ElfObject
programHeaderTable	./base/loader/elf_object.hh	/^    Addr programHeaderTable() {return _programHeaderTable;}$/;"	f	class:ElfObject
progress	./dev/net/dist_iface.cc	/^DistIface::SyncNode::progress(Tick max_send_tick,$/;"	f	class:DistIface::SyncNode
progress	./dev/net/dist_iface.cc	/^DistIface::SyncSwitch::progress(Tick send_tick,$/;"	f	class:DistIface::SyncSwitch
progressCheck	./cpu/testers/memtest/memtest.hh	/^    const Cycles progressCheck;$/;"	m	class:MemTest
progressInterval	./cpu/testers/memtest/memtest.hh	/^    const unsigned progressInterval;  \/\/ frequency of progress reports$/;"	m	class:MemTest
progress_check	./cpu/testers/memtest/MemTest.py	/^                                      "due to lack of progress")$/;"	v	class:MemTest
progress_interval	./cpu/BaseCPU.py	/^    progress_interval = Param.Frequency('0Hz',$/;"	v
progress_interval	./cpu/testers/memtest/MemTest.py	/^    progress_interval = Param.Counter(1000000,$/;"	v	class:MemTest
promoteDeferredTargets	./mem/cache/mshr.cc	/^MSHR::promoteDeferredTargets()$/;"	f	class:MSHR
promoteWholeLineWrites	./mem/cache/cache.cc	/^Cache::promoteWholeLineWrites(PacketPtr pkt)$/;"	f	class:Cache
promoteWritable	./mem/cache/mshr.cc	/^MSHR::promoteWritable()$/;"	f	class:MSHR
propagateInterrupt	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::propagateInterrupt()$/;"	f	class:DefaultCommit
proplist_syscall	./kern/tru64/tru64_syscalls.hh	/^        proplist_syscall = 244,$/;"	e	enum:SystemCalls::__anon102
prot	./arch/x86/regs/misc.hh	/^        Bitfield<7> prot;$/;"	m	namespace:X86ISA
protectCpuSymbols	./arch/isa_parser.py	/^    def protectCpuSymbols(self, template):$/;"	m	class:ISAParser
protectNonSubstPercents	./arch/isa_parser.py	/^    def protectNonSubstPercents(self, s):$/;"	m	class:ISAParser
proto	./base/inet.cc	/^Ip6Hdr::proto() const$/;"	f	class:Net::Ip6Hdr
proto	./base/inet.hh	/^    uint8_t  proto() const { return ip_p; }$/;"	f	struct:Net::IpHdr
protocolSum	./kern/tru64/mbuf.hh	/^    int32_t     protocolSum;    \/\/ 0x38$/;"	m	struct:tru64::m_ext
protocolSum	./kern/tru64/mbuf.hh	/^    int32_t     protocolSum;$/;"	m	struct:tru64::pkthdr
prototype	./mem/slicc/symbols/Func.py	/^    def prototype(self):$/;"	m	class:Func
provides	./cpu/func_unit.cc	/^FuncUnit::provides(OpClass capability)$/;"	f	class:FuncUnit
provides	./cpu/minor/func_unit.hh	/^    bool provides(OpClass op_class) { return capabilityList[op_class]; }$/;"	f	class:MinorOpClassSet
provides	./cpu/minor/func_unit.hh	/^    bool provides(OpClass op_class) { return opClasses->provides(op_class); }$/;"	f	class:MinorFUTiming
proxy	./base/statistics.hh	/^    ProxyInfo *proxy;$/;"	m	class:Stats::ValueBase
proxy	./base/statistics.hh	/^    const ScalarProxy<Stat> proxy;$/;"	m	class:Stats::ScalarProxyNode
proxy	./cpu/thread_state.hh	/^    SETranslatingPortProxy *proxy;$/;"	m	struct:ThreadState
prrr	./arch/arm/tlb.hh	/^    PRRR prrr;$/;"	m	class:ArmISA::TLB
pruneTransactions	./mem/mem_checker.cc	/^MemChecker::ByteTracker::pruneTransactions()$/;"	f	class:MemChecker::ByteTracker
ps	./arch/arm/miscregs.hh	/^        Bitfield<18, 16> ps;$/;"	m	namespace:ArmISA
ps	./arch/x86/pagetable.hh	/^        Bitfield<7> ps;$/;"	m	namespace:X86ISA
ps	./sim/core.cc	/^Tick ps;$/;"	m	namespace:SimClock::Int	file:
ps	./sim/core.cc	/^double ps;$/;"	m	namespace:SimClock::Float	file:
pse	./arch/x86/regs/misc.hh	/^        Bitfield<4> pse; \/\/ Page Size Extensions$/;"	m	namespace:X86ISA
pseudoInst	./sim/pseudo_inst.cc	/^pseudoInst(ThreadContext *tc, uint8_t func, uint8_t subfunc)$/;"	f	namespace:PseudoInst
psr	./arch/sparc/remote_gdb.hh	/^            uint32_t psr;$/;"	m	struct:SparcISA::RemoteGDB::SPARCGdbRegCache::__anon42
psruser	./arch/arm/types.hh	/^            Bitfield<22> psruser;$/;"	m	namespace:ArmISA
pss	./arch/mips/pra_constants.hh	/^    Bitfield<9,  6>  pss;$/;"	m	namespace:MipsISA
pstart	./base/inet.hh	/^    int pstart() const { return (off() + get()->size()); }$/;"	f	class:Net::IpPtr
pstart	./base/inet.hh	/^    int pstart() const { return off() + ((const EthHdr*)p->data)->size(); }$/;"	f	class:Net::EthPtr
pstart	./base/inet.hh	/^    int pstart() const { return off() + get()->size(); }$/;"	f	class:Net::Ip6Ptr
pstart	./base/inet.hh	/^    int pstart() const { return off() + get()->size(); }$/;"	f	class:Net::TcpPtr
pstart	./base/inet.hh	/^    int pstart() const { return off() + get()->size(); }$/;"	f	class:Net::UdpPtr
pstate	./arch/sparc/isa.hh	/^    PSTATE pstate;        \/\/ Process State Register$/;"	m	class:SparcISA::ISA
ptc	./arch/mips/mt_constants.hh	/^    Bitfield<7,  0>  ptc;$/;"	m	namespace:MipsISA
pte	./arch/sparc/pagetable.hh	/^    PageTableEntry pte;$/;"	m	struct:SparcISA::TlbEntry
pteBase	./arch/mips/pra_constants.hh	/^    Bitfield<63, 23> pteBase;$/;"	m	namespace:MipsISA
pterm	./dev/sparc/T1000.py	/^    pterm = Terminal()$/;"	v	class:T1000
pth_id	./kern/tru64/tru64.hh	/^        Addr pth_id; \/\/!< out-of-line state$/;"	m	struct:Tru64::ushared_state
pthid	./kern/tru64/tru64.hh	/^        Addr pthid;     \/\/!< pthid$/;"	m	struct:Tru64::nxm_thread_attr
ptlbe	./arch/mips/mt_constants.hh	/^    Bitfield<25, 16> ptlbe;$/;"	m	namespace:MipsISA
ptr	./base/cprintf.hh	/^    const char *ptr;$/;"	m	struct:cp::Print
ptr	./sim/vptr.hh	/^    Addr ptr;$/;"	m	class:VPtr
ptrace	./kern/tru64/tru64_syscalls.hh	/^        ptrace = 26,$/;"	e	enum:SystemCalls::__anon102
ptscr	./dev/net/ns_gige.hh	/^    uint32_t    ptscr;$/;"	m	struct:dp_regs
ptw	./arch/arm/miscregs.hh	/^        Bitfield<2>      ptw;$/;"	m	namespace:ArmISA
ptype	./python/m5/params.py	/^    ptype = Port$/;"	v	class:PortParamDesc
ptype_str	./python/m5/params.py	/^    ptype_str = 'Port'$/;"	v	class:PortParamDesc
puart0	./dev/sparc/T1000.py	/^    puart0 = Uart8250(pio_addr=0x1f10000000)$/;"	v	class:T1000
public_value	./python/m5/SimObject.py	/^def public_value(key, value):$/;"	f
pubwl	./arch/arm/types.hh	/^        Bitfield<24, 20> pubwl;$/;"	m	namespace:ArmISA
punwl	./arch/arm/types.hh	/^        Bitfield<24, 20> punwl;$/;"	m	namespace:ArmISA
purifyTaggedAddr	./arch/arm/utility.cc	/^purifyTaggedAddr(Addr addr, ThreadContext *tc, ExceptionLevel el)$/;"	f	namespace:ArmISA
purifyTaggedAddr	./arch/arm/utility.cc	/^purifyTaggedAddr(Addr addr, ThreadContext *tc, ExceptionLevel el,$/;"	f	namespace:ArmISA
push	./arch/isa_parser.py	/^    def push(self, item):$/;"	m	class:Stack
push	./cpu/minor/buffers.hh	/^    push(ElemType &data)$/;"	f	class:Minor::Queue
push	./cpu/minor/buffers.hh	/^    void push(ElemType &elem)$/;"	f	class:Minor::SelfStallingPipeline
push	./cpu/pred/ras.cc	/^ReturnAddrStack::push(const TheISA::PCState &return_addr)$/;"	f	class:ReturnAddrStack
push	./dev/net/pktfifo.hh	/^    bool push(EthPacketPtr ptr)$/;"	f	class:PacketFifo
pushFailedRequest	./cpu/minor/lsq.cc	/^LSQ::pushFailedRequest(MinorDynInstPtr inst)$/;"	f	class:Minor::LSQ
pushFrame	./mem/slicc/symbols/SymbolTable.py	/^    def pushFrame(self):$/;"	m	class:SymbolTable
pushLabel	./mem/packet.cc	/^Packet::PrintReqState::pushLabel(const string &lbl, const string &prefix)$/;"	f	class:Packet::PrintReqState
pushLabel	./mem/packet.hh	/^    pushLabel(const std::string &lbl)$/;"	f	class:Packet
pushName	./sim/serialize.cc	/^Serializable::ScopedCheckpointSection::pushName(const char *obj_name)$/;"	f	class:Serializable::ScopedCheckpointSection
pushPacket	./dev/net/dist_iface.cc	/^DistIface::RecvScheduler::pushPacket(EthPacketPtr new_packet,$/;"	f	class:DistIface::RecvScheduler
pushRequest	./cpu/minor/lsq.cc	/^LSQ::pushRequest(MinorDynInstPtr inst, bool isLoad, uint8_t *data,$/;"	f	class:Minor::LSQ
pushSenderState	./mem/packet.cc	/^Packet::pushSenderState(Packet::SenderState *sender_state)$/;"	f	class:Packet
pushTail	./cpu/minor/buffers.hh	/^    pushTail() const$/;"	f	class:Minor::InputBuffer
pushWire	./cpu/minor/buffers.hh	/^    typename TimeBuffer<ElemType>::wire pushWire;$/;"	m	class:Minor::SelfStallingPipeline
pushedRAS	./cpu/pred/bpred_unit.hh	/^        bool pushedRAS;$/;"	m	struct:BPredUnit::PredictorHistory
putbyte	./base/remote_gdb.cc	/^BaseRemoteGDB::putbyte(uint8_t b)$/;"	f	class:BaseRemoteGDB
pvi	./arch/x86/regs/misc.hh	/^        Bitfield<1> pvi; \/\/ Protected-Mode Virtual Interrupts$/;"	m	namespace:X86ISA
pvpe	./arch/mips/mt_constants.hh	/^    Bitfield<13, 10> pvpe;$/;"	m	namespace:MipsISA
pwrState	./mem/dram_ctrl.hh	/^        PowerState pwrState;$/;"	m	class:DRAMCtrl::Rank
pwrStateTick	./mem/dram_ctrl.hh	/^        Tick pwrStateTick;$/;"	m	class:DRAMCtrl::Rank
pwrStateTime	./mem/dram_ctrl.hh	/^        Stats::Vector pwrStateTime;$/;"	m	class:DRAMCtrl::Rank
pwrStateTrans	./mem/dram_ctrl.hh	/^        PowerState pwrStateTrans;$/;"	m	class:DRAMCtrl::Rank
pwrite	./kern/tru64/tru64_syscalls.hh	/^        pwrite = 152,$/;"	e	enum:SystemCalls::__anon102
pwt	./arch/x86/pagetable.hh	/^        Bitfield<3> pwt;$/;"	m	namespace:X86ISA
pwt	./arch/x86/regs/misc.hh	/^        Bitfield<3> pwt; \/\/ Page-Level Writethrough$/;"	m	namespace:X86ISA
px	./arch/mips/pra_constants.hh	/^    Bitfield<23>     px;$/;"	m	namespace:MipsISA
px	./base/vnc/vncinput.hh	/^        PixelFormat px;$/;"	m	struct:VncInput::PixelFormatMessage
px	./base/vnc/vncserver.hh	/^        PixelFormat px;$/;"	m	struct:VncServer::ServerInitMsg
pxcap	./dev/pci/device.hh	/^    PXCAP pxcap;$/;"	m	class:PciDevice
pxcap	./dev/pci/pcireg.h	/^        uint16_t pxcap; \/* 0:3   ver;$/;"	m	struct:PXCAP::__anon31
pxdc	./dev/pci/pcireg.h	/^        uint16_t pxdc; \/* 0     cere;$/;"	m	struct:PXCAP::__anon31
pxdc2	./dev/pci/pcireg.h	/^        uint32_t pxdc2; \/* 0:3   ctv;$/;"	m	struct:PXCAP::__anon31
pxdcap	./dev/pci/pcireg.h	/^        uint32_t pxdcap; \/* 0:2   mps;$/;"	m	struct:PXCAP::__anon31
pxdcap2	./dev/pci/pcireg.h	/^        uint32_t pxdcap2; \/* 0:3   ctrs;$/;"	m	struct:PXCAP::__anon31
pxds	./dev/pci/pcireg.h	/^        uint16_t pxds; \/* 0     ced;$/;"	m	struct:PXCAP::__anon31
pxid	./dev/pci/pcireg.h	/^        uint16_t pxid; \/* 0:7  cid$/;"	m	struct:PXCAP::__anon31
pxlFrameDone	./dev/arm/hdlcd.cc	/^HDLcd::pxlFrameDone()$/;"	f	class:HDLcd
pxlNext	./dev/arm/hdlcd.cc	/^HDLcd::pxlNext(Pixel &p)$/;"	f	class:HDLcd
pxlUnderrun	./dev/arm/hdlcd.cc	/^HDLcd::pxlUnderrun()$/;"	f	class:HDLcd
pxlVSyncBegin	./dev/arm/hdlcd.cc	/^HDLcd::pxlVSyncBegin()$/;"	f	class:HDLcd
pxlVSyncEnd	./dev/arm/hdlcd.cc	/^HDLcd::pxlVSyncEnd()$/;"	f	class:HDLcd
pxl_clk	./dev/arm/RealView.py	/^    pxl_clk = Param.ClockDomain("Pixel clock source")$/;"	v	class:HDLcd
pxlc	./dev/pci/pcireg.h	/^        uint16_t pxlc; \/* 0:1   aspmc;$/;"	m	struct:PXCAP::__anon31
pxlcap	./dev/pci/pcireg.h	/^        uint32_t pxlcap; \/* 0:3   sls;$/;"	m	struct:PXCAP::__anon31
pxlclk_polarity	./dev/arm/hdlcd.hh	/^        Bitfield<4>    pxlclk_polarity;$/;"	m	class:HDLcd
pxls	./dev/pci/pcireg.h	/^        uint16_t pxls; \/* 0:3   cls;$/;"	m	struct:PXCAP::__anon31
pxn	./arch/arm/pagetable.hh	/^    bool pxn;               \/\/ Privileged Execute Never (LPAE only)$/;"	m	struct:ArmISA::TlbEntry
pxn	./arch/arm/table_walker.hh	/^        bool pxn() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
pxnTable	./arch/arm/table_walker.hh	/^        bool pxnTable() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
pxnTable	./arch/arm/table_walker.hh	/^        bool pxnTable;$/;"	m	class:ArmISA::TableWalker::WalkerState
py_interact	./sim/py_interact.cc	/^py_interact()$/;"	f
pydot	./python/m5/util/dot_writer.py	/^    pydot = False$/;"	v
pythonSimObjectResolver	./python/swig/pyobject.cc	/^PythonSimObjectResolver pythonSimObjectResolver;$/;"	v
python_class_map	./mem/slicc/symbols/StateMachine.py	/^python_class_map = {$/;"	v
q	./arch/arm/miscregs.hh	/^        Bitfield<27> q;$/;"	m	namespace:ArmISA
q	./cpu/o3/regfile.hh	/^        FloatRegBits q;$/;"	m	union:PhysRegFile::__anon36
qBytes	./base/cp_annotate.hh	/^    std::vector<int32_t> qBytes;$/;"	m	class:CPA
qCache	./base/cp_annotate.hh	/^    IdCache qCache, smCache;$/;"	m	class:CPA
qData	./base/cp_annotate.hh	/^    std::vector<AnnotateList> qData;$/;"	m	class:CPA
qMap	./base/cp_annotate.hh	/^    IdMap smMap, qMap;$/;"	m	class:CPA
qRecv	./dev/virtio/console.hh	/^    TermRecvQueue qRecv;$/;"	m	class:VirtIOConsole
qRecvSize	./dev/virtio/VirtIOConsole.py	/^    qRecvSize = Param.Unsigned(16, "Receive queue size (descriptors)")$/;"	v	class:VirtIOConsole
qRequests	./dev/virtio/block.hh	/^    RequestQueue qRequests;$/;"	m	class:VirtIOBlock
qSize	./base/cp_annotate.hh	/^    std::vector<int> qSize;$/;"	m	class:CPA
qTrans	./dev/virtio/console.hh	/^    TermTransQueue qTrans;$/;"	m	class:VirtIOConsole
qTransSize	./dev/virtio/VirtIOConsole.py	/^    qTransSize = Param.Unsigned(16, "Transmit queue size (descriptors)")$/;"	v	class:VirtIOConsole
qc	./arch/arm/miscregs.hh	/^        Bitfield<27> qc;$/;"	m	namespace:ArmISA
quad	./kern/tru64/tru64.hh	/^    typedef struct { int val[2]; } quad;$/;"	t	class:Tru64	typeref:struct:Tru64::__anon104
queue	./base/callback.hh	/^    typedef std::list<Callback *> queue;$/;"	t	class:CallbackQueue
queue	./base/pollevent.hh	/^    PollQueue *queue;$/;"	m	class:PollEvent
queue	./cpu/minor/buffers.hh	/^      std::deque<ElemType> queue;$/;"	m	class:Minor::Queue
queue	./cpu/minor/buffers.hh	/^    mutable Queue<ElemType, ReportTraits, BubbleTraits> queue;$/;"	m	class:Minor::InputBuffer
queue	./cpu/pc_event.hh	/^    PCEventQueue *queue;$/;"	m	class:PCEvent
queue	./dev/virtio/base.hh	/^    VirtQueue *queue;$/;"	m	class:VirtDescriptor
queue	./dev/virtio/fs9p.hh	/^    FSQueue queue;$/;"	m	class:VirtIO9PBase
queue	./mem/cache/base.hh	/^        RespPacketQueue queue;$/;"	m	class:BaseCache::CacheSlavePort
queue	./mem/cache/mshr.hh	/^    MSHRQueue *queue;$/;"	m	class:MSHR
queue	./mem/coherent_xbar.hh	/^        RespPacketQueue queue;$/;"	m	class:CoherentXBar::CoherentXBarSlavePort
queue	./mem/dram_ctrl.hh	/^        RespPacketQueue queue;$/;"	m	class:DRAMCtrl::MemoryPort
queue	./mem/noncoherent_xbar.hh	/^        RespPacketQueue queue;$/;"	m	class:NoncoherentXBar::NoncoherentXBarSlavePort
queue	./mem/ruby/structures/RubyMemoryControl.hh	/^        RespPacketQueue queue;$/;"	m	class:RubyMemoryControl::MemoryPort
queue	./mem/ruby/system/DMASequencer.hh	/^        RespPacketQueue queue;$/;"	m	class:DMASequencer::MemSlavePort
queue	./mem/ruby/system/RubyPort.hh	/^        RespPacketQueue queue;$/;"	m	class:RubyPort::MemSlavePort
queue	./mem/ruby/system/RubyPort.hh	/^        RespPacketQueue queue;$/;"	m	class:RubyPort::PioSlavePort
queue	./sim/eventq.hh	/^    EventQueue *queue;$/;"	m	class:Event
queueDma	./dev/dma_device.cc	/^DmaPort::queueDma(PacketPtr pkt)$/;"	f	class:DmaPort
queueFilter	./mem/cache/prefetch/queued.hh	/^    const bool queueFilter;$/;"	m	class:QueuedPrefetcher
queueImpl	./mem/tport.hh	/^    RespPacketQueue queueImpl;$/;"	m	class:SimpleTimingPort
queueMemoryRead	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::queueMemoryRead(const MachineID &id, Addr addr,$/;"	f	class:AbstractController
queueMemoryWrite	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::queueMemoryWrite(const MachineID &id, Addr addr,$/;"	f	class:AbstractController
queueMemoryWritePartial	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::queueMemoryWritePartial(const MachineID &id, Addr addr,$/;"	f	class:AbstractController
queueNotify	./dev/virtio/pci.hh	/^    VirtIODeviceBase::QueueID queueNotify;$/;"	m	class:PciVirtIO
queueOnList	./cpu/o3/inst_queue.hh	/^    bool queueOnList[Num_OpClasses];$/;"	m	class:InstructionQueue
queueReady	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::queueReady(int bank)$/;"	f	class:RubyMemoryControl
queueSize	./dev/virtio/VirtIO9P.py	/^    queueSize = Param.Unsigned(32, "Output queue size (pages)")$/;"	v	class:VirtIO9PBase
queueSize	./dev/virtio/VirtIOBlock.py	/^    queueSize = Param.Unsigned(128, "Output queue size (pages)")$/;"	v	class:VirtIOBlock
queueSize	./mem/cache/prefetch/queued.hh	/^    const unsigned queueSize;$/;"	m	class:QueuedPrefetcher
queueSize	./mem/dramsim2_wrapper.cc	/^DRAMSim2Wrapper::queueSize() const$/;"	f	class:DRAMSim2Wrapper
queueSquash	./mem/cache/prefetch/queued.hh	/^    const bool queueSquash;$/;"	m	class:QueuedPrefetcher
queueType	./cpu/o3/inst_queue.hh	/^        OpClass queueType;$/;"	m	struct:InstructionQueue::ListOrderEntry
queue_filter	./mem/cache/prefetch/Prefetcher.py	/^    queue_filter = Param.Bool(True, "Don't queue redundant prefetches")$/;"	v	class:QueuedPrefetcher
queue_size	./mem/cache/prefetch/Prefetcher.py	/^    queue_size = Param.Int(32, "Maximum number of queued prefetches")$/;"	v	class:QueuedPrefetcher
queue_squash	./mem/cache/prefetch/Prefetcher.py	/^    queue_squash = Param.Bool(True, "Squash queued prefetch on demand access")$/;"	v	class:QueuedPrefetcher
queued	./base/pollevent.hh	/^    bool queued() { return queue != 0; }$/;"	f	class:PollEvent
quiesce	./kern/kernel_stats.hh	/^    void quiesce() { _quiesce++; }$/;"	f	class:Kernel::Statistics
quiesce	./sim/pseudo_inst.cc	/^quiesce(ThreadContext *tc)$/;"	f	namespace:PseudoInst
quiesceCycles	./cpu/minor/stats.hh	/^    Stats::Scalar quiesceCycles;$/;"	m	class:Minor::MinorStats
quiesceCycles	./cpu/o3/cpu.hh	/^    Stats::Scalar quiesceCycles;$/;"	m	class:FullO3CPU
quiesceCycles	./sim/pseudo_inst.cc	/^quiesceCycles(ThreadContext *tc, uint64_t cycles)$/;"	f	namespace:PseudoInst
quiesceEvent	./cpu/thread_state.hh	/^    EndQuiesceEvent *quiesceEvent;$/;"	m	struct:ThreadState
quiesceNs	./sim/pseudo_inst.cc	/^quiesceNs(ThreadContext *tc, uint64_t ns)$/;"	f	namespace:PseudoInst
quiesceSkip	./sim/pseudo_inst.cc	/^quiesceSkip(ThreadContext *tc)$/;"	f	namespace:PseudoInst
quiesceTime	./sim/pseudo_inst.cc	/^quiesceTime(ThreadContext *tc)$/;"	f	namespace:PseudoInst
quotactl	./kern/tru64/tru64_syscalls.hh	/^        quotactl = 148,$/;"	e	enum:SystemCalls::__anon102
quote	./base/str.hh	/^quote(const std::string &s)$/;"	f
r	./arch/alpha/remote_gdb.hh	/^        } r;$/;"	m	class:AlphaISA::RemoteGDB::AlphaGdbRegCache	typeref:struct:AlphaISA::RemoteGDB::AlphaGdbRegCache::__anon48
r	./arch/arm/remote_gdb.hh	/^        } r;$/;"	m	class:ArmISA::RemoteGDB::AArch32GdbRegCache	typeref:struct:ArmISA::RemoteGDB::AArch32GdbRegCache::__anon67
r	./arch/arm/remote_gdb.hh	/^        } r;$/;"	m	class:ArmISA::RemoteGDB::AArch64GdbRegCache	typeref:struct:ArmISA::RemoteGDB::AArch64GdbRegCache::__anon68
r	./arch/mips/pra_constants.hh	/^    Bitfield<1>      r;$/;"	m	namespace:MipsISA
r	./arch/mips/pra_constants.hh	/^    Bitfield<1>     r;$/;"	m	namespace:MipsISA
r	./arch/mips/pra_constants.hh	/^    Bitfield<63, 62> r;$/;"	m	namespace:MipsISA
r	./arch/mips/remote_gdb.hh	/^        } r;$/;"	m	class:MipsISA::RemoteGDB::MipsGdbRegCache	typeref:struct:MipsISA::RemoteGDB::MipsGdbRegCache::__anon83
r	./arch/power/remote_gdb.hh	/^        } r;$/;"	m	class:PowerISA::RemoteGDB::PowerGdbRegCache	typeref:struct:PowerISA::RemoteGDB::PowerGdbRegCache::__anon53
r	./arch/sparc/remote_gdb.hh	/^        } r;$/;"	m	class:SparcISA::RemoteGDB::SPARC64GdbRegCache	typeref:struct:SparcISA::RemoteGDB::SPARC64GdbRegCache::__anon43
r	./arch/sparc/remote_gdb.hh	/^        } r;$/;"	m	class:SparcISA::RemoteGDB::SPARCGdbRegCache	typeref:struct:SparcISA::RemoteGDB::SPARCGdbRegCache::__anon42
r	./arch/x86/regs/misc.hh	/^            Bitfield<41> r; \/\/ Readable$/;"	m	namespace:X86ISA
r	./arch/x86/remote_gdb.hh	/^        } r;$/;"	m	class:X86ISA::RemoteGDB::AMD64GdbRegCache	typeref:struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
r	./arch/x86/remote_gdb.hh	/^        } r;$/;"	m	class:X86ISA::RemoteGDB::X86GdbRegCache	typeref:struct:X86ISA::RemoteGDB::X86GdbRegCache::__anon57
r	./arch/x86/types.hh	/^            Bitfield<15> r;$/;"	m	namespace:X86ISA
r	./arch/x86/types.hh	/^        Bitfield<2> r;$/;"	m	namespace:X86ISA
r	./base/statistics.hh	/^    NodePtr r;$/;"	m	class:Stats::BinaryNode
r0	./arch/mips/pra_constants.hh	/^    Bitfield<3>      r0;$/;"	m	namespace:MipsISA
r10	./arch/x86/nativetrace.hh	/^        uint64_t r10;$/;"	m	struct:Trace::X86NativeTrace::ThreadState
r10	./arch/x86/remote_gdb.hh	/^          uint64_t r10;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
r11	./arch/x86/nativetrace.hh	/^        uint64_t r11;$/;"	m	struct:Trace::X86NativeTrace::ThreadState
r11	./arch/x86/remote_gdb.hh	/^          uint64_t r11;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
r12	./arch/x86/nativetrace.hh	/^        uint64_t r12;$/;"	m	struct:Trace::X86NativeTrace::ThreadState
r12	./arch/x86/remote_gdb.hh	/^          uint64_t r12;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
r13	./arch/x86/nativetrace.hh	/^        uint64_t r13;$/;"	m	struct:Trace::X86NativeTrace::ThreadState
r13	./arch/x86/remote_gdb.hh	/^          uint64_t r13;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
r14	./arch/x86/nativetrace.hh	/^        uint64_t r14;$/;"	m	struct:Trace::X86NativeTrace::ThreadState
r14	./arch/x86/remote_gdb.hh	/^          uint64_t r14;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
r15	./arch/x86/nativetrace.hh	/^        uint64_t r15;$/;"	m	struct:Trace::X86NativeTrace::ThreadState
r15	./arch/x86/remote_gdb.hh	/^          uint64_t r15;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
r8	./arch/x86/nativetrace.hh	/^        uint64_t r8;$/;"	m	struct:Trace::X86NativeTrace::ThreadState
r8	./arch/x86/remote_gdb.hh	/^          uint64_t r8;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
r9	./arch/x86/nativetrace.hh	/^        uint64_t r9;$/;"	m	struct:Trace::X86NativeTrace::ThreadState
r9	./arch/x86/remote_gdb.hh	/^          uint64_t r9;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
rInit	./arch/x86/regs/misc.hh	/^        Bitfield<1> rInit;$/;"	m	namespace:X86ISA
rMode	./arch/arm/miscregs.hh	/^        Bitfield<23, 22> rMode;$/;"	m	namespace:ArmISA
ra	./arch/power/types.hh	/^    Bitfield<20, 16> ra;$/;"	m	namespace:PowerISA
radv	./dev/net/i8254xGBe_defs.hh	/^    RADV radv;$/;"	m	struct:iGbReg::Regs
radvEvent	./dev/net/i8254xGBe.hh	/^    EventWrapper<IGbE, &IGbE::radvProcess> radvEvent;$/;"	m	class:IGbE
radvProcess	./dev/net/i8254xGBe.hh	/^    void radvProcess() {$/;"	f	class:IGbE
raise	./dev/x86/intdev.hh	/^    raise()$/;"	f	class:X86ISA::IntSourcePin
raiseFatalSignal	./sim/init_signals.cc	/^raiseFatalSignal(int signo)$/;"	f	file:
raiseInterrupt	./arch/arm/pmu.cc	/^PMU::raiseInterrupt()$/;"	f	class:ArmISA::PMU
raiseInterruptPin	./dev/x86/i82094aa.cc	/^X86ISA::I82094AA::raiseInterruptPin(int number)$/;"	f	class:X86ISA::I82094AA
raiseInterruptPin	./dev/x86/i8259.cc	/^X86ISA::I8259::raiseInterruptPin(int number)$/;"	f	class:X86ISA::I8259
raiseInterruptPin	./dev/x86/intdev.hh	/^    raiseInterruptPin(int number)$/;"	f	class:X86ISA::IntDevice
raiseInterrupts	./dev/arm/pl011.hh	/^    void raiseInterrupts(uint16_t ints) { setInterrupts(rawInt | ints, imsc); }$/;"	f	class:Pl011
random	./arch/mips/pra_constants.hh	/^    Bitfield<30, 0> random;$/;"	m	namespace:MipsISA
random	./base/random.hh	/^    random()$/;"	f	class:Random
random	./base/random.hh	/^    random(T min, T max)$/;"	f	class:Random
random_mt	./base/random.cc	/^Random random_mt;$/;"	v
random_time	./mem/ruby/network/MessageBuffer.cc	/^random_time()$/;"	f
randomization	./mem/ruby/network/MessageBuffer.py	/^    randomization = Param.Bool(False, "")$/;"	v	class:MessageBuffer
randomization	./mem/ruby/system/RubySystem.py	/^    randomization = Param.Bool(False,$/;"	v	class:RubySystem
range	./arch/sparc/pagetable.hh	/^    TlbRange range;$/;"	m	struct:SparcISA::TlbEntry
range	./mem/AbstractMemory.py	/^    range = Param.AddrRange('128MB', "Address range (potentially interleaved)")$/;"	v	class:AbstractMemory
range	./mem/abstract_mem.hh	/^    AddrRange range;$/;"	m	class:AbstractMemory
range	./mem/xbar.hh	/^        AddrRange range;$/;"	m	struct:BaseXBar::PortCache
rangeCache	./mem/physical.hh	/^    mutable AddrRangeMap<AbstractMemory*>::const_iterator rangeCache;$/;"	m	class:PhysicalMemory
rangeList	./arch/x86/bios/intelmp.hh	/^    uint32_t rangeList;$/;"	m	class:X86ISA::IntelMP::CompatAddrSpaceMod
rangeMRU	./arch/arm/tlb.hh	/^    int rangeMRU; \/\/On lookup, only move entries ahead when outside rangeMRU$/;"	m	class:ArmISA::TLB
range_list	./arch/x86/bios/IntelMP.py	/^    range_list = Param.X86IntelMPRangeList('ISACompatible',$/;"	v	class:X86IntelMPCompatAddrSpaceMod
range_t	./cpu/pc_event.hh	/^    typedef std::pair<iterator, iterator> range_t;$/;"	t	class:PCEventQueue
range_type	./arch/x86/bios/E820.py	/^    range_type = Param.UInt64('type of the region')$/;"	v	class:X86E820Entry
ranges	./mem/Bridge.py	/^    ranges = VectorParam.AddrRange([AllMemory],$/;"	v	class:Bridge
ranges	./mem/SerialLink.py	/^    ranges = VectorParam.AddrRange([AllMemory],$/;"	v	class:SerialLink
ranges	./mem/bridge.hh	/^        const AddrRangeList ranges;$/;"	m	class:Bridge::BridgeSlavePort
ranges	./mem/serial_link.hh	/^        const AddrRangeList ranges;$/;"	m	class:SerialLink::SerialLinkSlavePort
rank	./dev/net/dist_iface.hh	/^    unsigned rank;$/;"	m	class:DistIface
rank	./dev/net/tcp_iface.hh	/^        unsigned rank;$/;"	m	struct:TCPIface::NodeInfo
rank	./mem/dram_ctrl.hh	/^        const uint8_t rank;$/;"	m	class:DRAMCtrl::DRAMPacket
rank	./mem/dram_ctrl.hh	/^        uint8_t rank;$/;"	m	class:DRAMCtrl::Rank
rankBits	./cpu/testers/traffic_gen/generators.hh	/^    const unsigned int rankBits;$/;"	m	class:DramGen
rankParam	./dev/net/dist_iface.cc	/^DistIface::rankParam()$/;"	f	class:DistIface
rankRef	./mem/dram_ctrl.hh	/^        Rank& rankRef;$/;"	m	class:DRAMCtrl::DRAMPacket
rank_bit_0	./mem/ruby/structures/RubyMemoryControl.py	/^    rank_bit_0 = Param.Int(11, "");$/;"	v	class:RubyMemoryControl
rank_rank_delay	./mem/ruby/structures/RubyMemoryControl.py	/^    rank_rank_delay = Param.Int(1, "");$/;"	v	class:RubyMemoryControl
ranks	./mem/dram_ctrl.hh	/^    std::vector<Rank*> ranks;$/;"	m	class:DRAMCtrl
ranksPerChannel	./mem/dram_ctrl.hh	/^    const uint32_t ranksPerChannel;$/;"	m	class:DRAMCtrl
ranks_per_channel	./mem/DRAMCtrl.py	/^    ranks_per_channel = 1$/;"	v	class:GDDR5_4000_x64
ranks_per_channel	./mem/DRAMCtrl.py	/^    ranks_per_channel = 1$/;"	v	class:HBM_1000_4H_x128
ranks_per_channel	./mem/DRAMCtrl.py	/^    ranks_per_channel = 1$/;"	v	class:LPDDR2_S4_1066_x32
ranks_per_channel	./mem/DRAMCtrl.py	/^    ranks_per_channel = 1$/;"	v	class:LPDDR3_1600_x32
ranks_per_channel	./mem/DRAMCtrl.py	/^    ranks_per_channel = 1$/;"	v	class:WideIO_200_x128
ranks_per_channel	./mem/DRAMCtrl.py	/^    ranks_per_channel = 2$/;"	v	class:DDR3_1600_x64
ranks_per_channel	./mem/DRAMCtrl.py	/^    ranks_per_channel = 2$/;"	v	class:DDR4_2400_x64
ranks_per_channel	./mem/DRAMCtrl.py	/^    ranks_per_channel = 4$/;"	v	class:HMC_2500_x32
ranks_per_channel	./mem/DRAMCtrl.py	/^    ranks_per_channel = Param.Unsigned("Number of ranks per channel")$/;"	v	class:DRAMCtrl
ranks_per_dimm	./mem/ruby/structures/RubyMemoryControl.py	/^    ranks_per_dimm = Param.Int(2, "");$/;"	v	class:RubyMemoryControl
rao2	./arch/arm/miscregs.hh	/^        Bitfield<18>   rao2;    \/\/ Read as one$/;"	m	namespace:ArmISA
rao3	./arch/arm/miscregs.hh	/^        Bitfield<16>   rao3;    \/\/ Read as one$/;"	m	namespace:ArmISA
rao4	./arch/arm/miscregs.hh	/^        Bitfield<6, 3> rao4;    \/\/ Read as one$/;"	m	namespace:ArmISA
raw	./kern/tru64/tru64_events.hh	/^    bool raw;$/;"	m	class:DebugPrintfEvent
rawInt	./dev/arm/pl011.hh	/^    uint16_t rawInt;$/;"	m	class:Pl011
rawInt	./dev/arm/rtc_pl031.hh	/^    bool rawInt;$/;"	m	class:PL031
rawInt	./dev/arm/timer_sp804.hh	/^        bool rawInt;$/;"	m	class:Sp804::Timer
rawIntTimer	./dev/arm/timer_cpulocal.hh	/^        bool rawIntTimer;$/;"	m	class:CpuLocalTimer::Timer
rawIntWatchdog	./dev/arm/timer_cpulocal.hh	/^        bool rawIntWatchdog;$/;"	m	class:CpuLocalTimer::Timer
rawInterrupts	./dev/arm/kmi.hh	/^    InterruptReg rawInterrupts;$/;"	m	class:Pl050
rawResetWatchdog	./dev/arm/timer_cpulocal.hh	/^        bool rawResetWatchdog;$/;"	m	class:CpuLocalTimer::Timer
raw_stats_list	./python/m5/stats/__init__.py	/^raw_stats_list = []$/;"	v
rax	./arch/x86/cpuid.hh	/^        uint64_t rax;$/;"	m	struct:X86ISA::CpuidResult
rax	./arch/x86/nativetrace.hh	/^        uint64_t rax;$/;"	m	struct:Trace::X86NativeTrace::ThreadState
rax	./arch/x86/remote_gdb.hh	/^          uint64_t rax;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
raz	./arch/arm/miscregs.hh	/^        Bitfield<31, 28> raz;$/;"	m	namespace:ArmISA
raz_13_4	./arch/arm/miscregs.hh	/^      Bitfield<13,4>  raz_13_4;$/;"	m	namespace:ArmISA
raz_28	./arch/arm/miscregs.hh	/^      Bitfield<28>    raz_28;$/;"	m	namespace:ArmISA
rbp	./arch/x86/nativetrace.hh	/^        uint64_t rbp;$/;"	m	struct:Trace::X86NativeTrace::ThreadState
rbp	./arch/x86/remote_gdb.hh	/^          uint64_t rbp;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
rbx	./arch/x86/cpuid.hh	/^        uint64_t rbx;$/;"	m	struct:X86ISA::CpuidResult
rbx	./arch/x86/nativetrace.hh	/^        uint64_t rbx;$/;"	m	struct:Trace::X86NativeTrace::ThreadState
rbx	./arch/x86/remote_gdb.hh	/^          uint64_t rbx;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
rc31	./arch/power/types.hh	/^    Bitfield<0>      rc31;$/;"	m	namespace:PowerISA
rcSet	./arch/power/insts/floating.hh	/^    bool rcSet;$/;"	m	class:PowerISA::FloatOp
rcSet	./arch/power/insts/integer.hh	/^    bool rcSet;$/;"	m	class:PowerISA::IntOp
rctl	./dev/net/i8254xGBe_defs.hh	/^    RCTL rctl;$/;"	m	struct:iGbReg::Regs
rcvif	./kern/tru64/mbuf.hh	/^    Addr        rcvif;$/;"	m	struct:tru64::pkthdr
rcx	./arch/x86/cpuid.hh	/^        uint64_t rcx;$/;"	m	struct:X86ISA::CpuidResult
rcx	./arch/x86/nativetrace.hh	/^        uint64_t rcx;$/;"	m	struct:Trace::X86NativeTrace::ThreadState
rcx	./arch/x86/remote_gdb.hh	/^          uint64_t rcx;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
rd	./arch/arm/types.hh	/^        Bitfield<15, 12> rd;$/;"	m	namespace:ArmISA
rd	./arch/x86/regs/misc.hh	/^        Bitfield<4> rd; \/\/ RdMem Enable$/;"	m	namespace:X86ISA
rdPerTurnAround	./mem/dram_ctrl.hh	/^    Stats::Histogram rdPerTurnAround;$/;"	m	class:DRAMCtrl
rdQLenPdf	./mem/dram_ctrl.hh	/^    Stats::Vector rdQLenPdf;$/;"	m	class:DRAMCtrl
rdba	./dev/net/i8254xGBe_defs.hh	/^    RDBA rdba;$/;"	m	struct:iGbReg::Regs
rdh	./dev/net/i8254xGBe_defs.hh	/^    RDH rdh;$/;"	m	struct:iGbReg::Regs
rdi	./arch/x86/nativetrace.hh	/^        uint64_t rdi;$/;"	m	struct:Trace::X86NativeTrace::ThreadState
rdi	./arch/x86/remote_gdb.hh	/^          uint64_t rdi;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
rdlen	./dev/net/i8254xGBe_defs.hh	/^    RDLEN rdlen;$/;"	m	struct:iGbReg::Regs
rdmces	./arch/alpha/osfpal.hh	/^        rdmces = 0x10,$/;"	e	enum:PAL::__anon50
rdps	./arch/alpha/osfpal.hh	/^        rdps = 0x36,$/;"	e	enum:PAL::__anon50
rdt	./dev/net/i8254xGBe_defs.hh	/^    RDT rdt;$/;"	m	struct:iGbReg::Regs
rdtr	./dev/net/i8254xGBe_defs.hh	/^    RDTR rdtr;$/;"	m	struct:iGbReg::Regs
rdtrEvent	./dev/net/i8254xGBe.hh	/^    EventWrapper<IGbE, &IGbE::rdtrProcess> rdtrEvent;$/;"	m	class:IGbE
rdtrProcess	./dev/net/i8254xGBe.hh	/^    void rdtrProcess() {$/;"	f	class:IGbE
rdunique	./arch/alpha/osfpal.hh	/^        rdunique = 0x9e,$/;"	e	enum:PAL::__anon50
rdusp	./arch/alpha/osfpal.hh	/^        rdusp = 0x3a,$/;"	e	enum:PAL::__anon50
rdval	./arch/alpha/osfpal.hh	/^        rdval = 0x32,$/;"	e	enum:PAL::__anon50
rdx	./arch/x86/cpuid.hh	/^        uint64_t rdx;$/;"	m	struct:X86ISA::CpuidResult
rdx	./arch/x86/nativetrace.hh	/^        uint64_t rdx;$/;"	m	struct:Trace::X86NativeTrace::ThreadState
rdx	./arch/x86/remote_gdb.hh	/^          uint64_t rdx;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
re	./arch/mips/pra_constants.hh	/^    Bitfield<25>     re;$/;"	m	namespace:MipsISA
read	./arch/arm/kvm/gic.cc	/^KvmGic::read(PacketPtr pkt)$/;"	f	class:KvmGic
read	./arch/x86/interrupts.cc	/^X86ISA::Interrupts::read(PacketPtr pkt)$/;"	f	class:X86ISA::Interrupts
read	./arch/x86/pagetable_walker.hh	/^            PacketPtr read;$/;"	m	class:X86ISA::Walker::WalkerState
read	./base/circlebuf.hh	/^    void read(OutputIterator out, size_t len) { buf.read(out, len); }$/;"	f	class:Fifo
read	./base/circlebuf.hh	/^    void read(OutputIterator out, size_t len) {$/;"	f	class:CircleBuf
read	./base/remote_gdb.cc	/^BaseRemoteGDB::read(Addr vaddr, size_t size, char *data)$/;"	f	class:BaseRemoteGDB
read	./base/remote_gdb.hh	/^BaseRemoteGDB::read(Addr addr)$/;"	f	class:BaseRemoteGDB
read	./base/vnc/vncserver.cc	/^VncServer::read(T* val)$/;"	f	class:VncServer
read	./base/vnc/vncserver.cc	/^VncServer::read(uint8_t *buf, size_t len)$/;"	f	class:VncServer
read	./cpu/kvm/perfevent.cc	/^PerfKvmCounter::read() const$/;"	f	class:PerfKvmCounter
read	./cpu/kvm/perfevent.cc	/^PerfKvmCounter::read(void *buf, size_t size) const$/;"	f	class:PerfKvmCounter
read	./cpu/nativetrace.hh	/^    read(void *ptr, size_t size)$/;"	f	class:Trace::NativeTrace
read	./cpu/o3/cpu.hh	/^    Fault read(RequestPtr &req, RequestPtr &sreqLow, RequestPtr &sreqHigh,$/;"	f	class:FullO3CPU
read	./cpu/o3/lsq.hh	/^LSQ<Impl>::read(RequestPtr req, RequestPtr sreqLow, RequestPtr sreqHigh,$/;"	f	class:LSQ
read	./cpu/o3/lsq_unit.hh	/^LSQUnit<Impl>::read(Request *req, Request *sreqLow, Request *sreqHigh,$/;"	f	class:LSQUnit
read	./cpu/pred/sat_counter.hh	/^    uint8_t read() const$/;"	f	class:SatCounter
read	./cpu/testers/traffic_gen/generators.cc	/^TraceGen::InputStream::read(TraceElement& element)$/;"	f	class:TraceGen::InputStream
read	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::InputStream::read(GraphNode* element)$/;"	f	class:TraceCPU::ElasticDataGen::InputStream
read	./cpu/trace/trace_cpu.cc	/^TraceCPU::FixedRetryGen::InputStream::read(TraceElement* element)$/;"	f	class:TraceCPU::FixedRetryGen::InputStream
read	./dev/alpha/backdoor.cc	/^AlphaBackdoor::read(PacketPtr pkt)$/;"	f	class:AlphaBackdoor
read	./dev/alpha/tsunami_cchip.cc	/^TsunamiCChip::read(PacketPtr pkt)$/;"	f	class:TsunamiCChip
read	./dev/alpha/tsunami_io.cc	/^TsunamiIO::read(PacketPtr pkt)$/;"	f	class:TsunamiIO
read	./dev/alpha/tsunami_pchip.cc	/^TsunamiPChip::read(PacketPtr pkt)$/;"	f	class:TsunamiPChip
read	./dev/arm/a9scu.cc	/^A9SCU::read(PacketPtr pkt)$/;"	f	class:A9SCU
read	./dev/arm/amba_fake.cc	/^AmbaFake::read(PacketPtr pkt)$/;"	f	class:AmbaFake
read	./dev/arm/energy_ctrl.cc	/^EnergyCtrl::read(PacketPtr pkt)$/;"	f	class:EnergyCtrl
read	./dev/arm/generic_timer.cc	/^GenericTimerMem::read(PacketPtr pkt)$/;"	f	class:GenericTimerMem
read	./dev/arm/gic_pl390.cc	/^Pl390::read(PacketPtr pkt)$/;"	f	class:Pl390
read	./dev/arm/gic_v2m.cc	/^Gicv2m::read(PacketPtr pkt)$/;"	f	class:Gicv2m
read	./dev/arm/gpu_nomali.cc	/^NoMaliGpu::read(PacketPtr pkt)$/;"	f	class:NoMaliGpu
read	./dev/arm/hdlcd.cc	/^HDLcd::read(PacketPtr pkt)$/;"	f	class:HDLcd
read	./dev/arm/kmi.cc	/^Pl050::read(PacketPtr pkt)$/;"	f	class:Pl050
read	./dev/arm/pl011.cc	/^Pl011::read(PacketPtr pkt)$/;"	f	class:Pl011
read	./dev/arm/pl111.cc	/^Pl111::read(PacketPtr pkt)$/;"	f	class:Pl111
read	./dev/arm/rtc_pl031.cc	/^PL031::read(PacketPtr pkt)$/;"	f	class:PL031
read	./dev/arm/rv_ctrl.cc	/^RealViewCtrl::read(PacketPtr pkt)$/;"	f	class:RealViewCtrl
read	./dev/arm/rv_ctrl.cc	/^RealViewOsc::read() const$/;"	f	class:RealViewOsc
read	./dev/arm/timer_cpulocal.cc	/^CpuLocalTimer::Timer::read(PacketPtr pkt, Addr daddr)$/;"	f	class:CpuLocalTimer::Timer
read	./dev/arm/timer_cpulocal.cc	/^CpuLocalTimer::read(PacketPtr pkt)$/;"	f	class:CpuLocalTimer
read	./dev/arm/timer_sp804.cc	/^Sp804::Timer::read(PacketPtr pkt, Addr daddr)$/;"	f	class:Sp804::Timer
read	./dev/arm/timer_sp804.cc	/^Sp804::read(PacketPtr pkt)$/;"	f	class:Sp804
read	./dev/arm/ufs_device.cc	/^UFSHostDevice::read(PacketPtr pkt)$/;"	f	class:UFSHostDevice
read	./dev/arm/vgic.cc	/^VGic::read(PacketPtr pkt)$/;"	f	class:VGic
read	./dev/baddev.cc	/^BadDevice::read(PacketPtr pkt)$/;"	f	class:BadDevice
read	./dev/i2c/bus.cc	/^I2CBus::read(PacketPtr pkt)$/;"	f	class:I2CBus
read	./dev/intel_8254_timer.cc	/^Intel8254Timer::Counter::read()$/;"	f	class:Intel8254Timer::Counter
read	./dev/isa_fake.cc	/^IsaFake::read(PacketPtr pkt)$/;"	f	class:IsaFake
read	./dev/mips/malta_cchip.cc	/^MaltaCChip::read(PacketPtr pkt)$/;"	f	class:MaltaCChip
read	./dev/mips/malta_io.cc	/^MaltaIO::read(PacketPtr pkt)$/;"	f	class:MaltaIO
read	./dev/net/i8254xGBe.cc	/^IGbE::read(PacketPtr pkt)$/;"	f	class:IGbE
read	./dev/net/ns_gige.cc	/^NSGigE::read(PacketPtr pkt)$/;"	f	class:NSGigE
read	./dev/net/sinic.cc	/^Device::read(PacketPtr pkt)$/;"	f	class:Sinic::Device
read	./dev/net/sinicreg.hh	/^    bool read;$/;"	m	struct:Sinic::Regs::Info
read	./dev/pci/copy_engine.cc	/^CopyEngine::read(PacketPtr pkt)$/;"	f	class:CopyEngine
read	./dev/pci/copy_engine.hh	/^        virtual Tick read(PacketPtr pkt)$/;"	f	class:CopyEngine::CopyEngineChannel
read	./dev/pci/host.cc	/^GenericPciHost::read(PacketPtr pkt)$/;"	f	class:GenericPciHost
read	./dev/sparc/dtod.cc	/^DumbTOD::read(PacketPtr pkt)$/;"	f	class:DumbTOD
read	./dev/sparc/iob.cc	/^Iob::read(PacketPtr pkt)$/;"	f	class:Iob
read	./dev/sparc/mm_disk.cc	/^MmDisk::read(PacketPtr pkt)$/;"	f	class:MmDisk
read	./dev/storage/disk_image.cc	/^CowDiskImage::read(uint8_t *data, std::streampos offset) const$/;"	f	class:CowDiskImage
read	./dev/storage/disk_image.cc	/^RawDiskImage::read(uint8_t *data, std::streampos offset) const$/;"	f	class:RawDiskImage
read	./dev/storage/ide_ctrl.cc	/^IdeController::read(PacketPtr pkt)$/;"	f	class:IdeController
read	./dev/storage/simple_disk.cc	/^SimpleDisk::read(Addr addr, baddr_t block, int count) const$/;"	f	class:SimpleDisk
read	./dev/terminal.cc	/^Terminal::read(uint8_t *buf, size_t len)$/;"	f	class:Terminal
read	./dev/terminal.hh	/^    void read(uint8_t &c) { read(&c, 1); }$/;"	f	class:Terminal
read	./dev/uart8250.cc	/^Uart8250::read(PacketPtr pkt)$/;"	f	class:Uart8250
read	./dev/virtio/base.cc	/^VirtDescriptor::read(size_t offset, uint8_t *dst, size_t size) const$/;"	f	class:VirtDescriptor
read	./dev/virtio/base.hh	/^        void read() {$/;"	f	class:VirtQueue::VirtRing
read	./dev/virtio/block.cc	/^VirtIOBlock::read(const BlkRequest &req, VirtDescriptor *desc_chain,$/;"	f	class:VirtIOBlock
read	./dev/virtio/fs9p.cc	/^VirtIO9PDiod::read(uint8_t *data, size_t len)$/;"	f	class:VirtIO9PDiod
read	./dev/virtio/fs9p.cc	/^VirtIO9PSocket::read(uint8_t *data, size_t len)$/;"	f	class:VirtIO9PSocket
read	./dev/virtio/pci.cc	/^PciVirtIO::read(PacketPtr pkt)$/;"	f	class:PciVirtIO
read	./dev/x86/cmos.cc	/^X86ISA::Cmos::read(PacketPtr pkt)$/;"	f	class:X86ISA::Cmos
read	./dev/x86/i8042.cc	/^X86ISA::I8042::read(PacketPtr pkt)$/;"	f	class:X86ISA::I8042
read	./dev/x86/i82094aa.cc	/^X86ISA::I82094AA::read(PacketPtr pkt)$/;"	f	class:X86ISA::I82094AA
read	./dev/x86/i8237.cc	/^X86ISA::I8237::read(PacketPtr pkt)$/;"	f	class:X86ISA::I8237
read	./dev/x86/i8254.cc	/^X86ISA::I8254::read(PacketPtr pkt)$/;"	f	class:X86ISA::I8254
read	./dev/x86/i8259.cc	/^X86ISA::I8259::read(PacketPtr pkt)$/;"	f	class:X86ISA::I8259
read	./dev/x86/speaker.cc	/^X86ISA::Speaker::read(PacketPtr pkt)$/;"	f	class:X86ISA::Speaker
read	./kern/tru64/tru64_syscalls.hh	/^        read = 3,$/;"	e	enum:SystemCalls::__anon102
read	./mem/port_proxy.hh	/^PortProxy::read(Addr address) const$/;"	f	class:PortProxy
read	./proto/protoio.cc	/^ProtoInputStream::read(Message& msg)$/;"	f	class:ProtoInputStream
read1	./base/vnc/vncserver.cc	/^VncServer::read1(uint8_t *buf, size_t len)$/;"	f	class:VncServer
readAccess	./dev/arm/flash_device.hh	/^        Stats::Histogram readAccess;$/;"	m	struct:FlashDevice::FlashDeviceStats
readAccesses	./arch/arm/tlb.hh	/^    Stats::Formula readAccesses;$/;"	m	class:ArmISA::TLB
readAddrDist	./mem/comm_monitor.hh	/^        Stats::SparseHistogram readAddrDist;$/;"	m	struct:CommMonitor::MonitorStats
readAddrMask	./mem/comm_monitor.hh	/^    const Addr readAddrMask;$/;"	m	class:CommMonitor
readAll	./dev/virtio/fs9p.cc	/^VirtIO9PProxy::readAll(uint8_t *data, size_t len)$/;"	f	class:VirtIO9PProxy
readArchCCReg	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::readArchCCReg(int reg_idx, ThreadID tid)$/;"	f	class:FullO3CPU
readArchFloatReg	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::readArchFloatReg(int reg_idx, ThreadID tid)$/;"	f	class:FullO3CPU
readArchFloatRegInt	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::readArchFloatRegInt(int reg_idx, ThreadID tid)$/;"	f	class:FullO3CPU
readArchIntReg	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::readArchIntReg(int reg_idx, ThreadID tid)$/;"	f	class:FullO3CPU
readBandwidthHist	./mem/comm_monitor.hh	/^        Stats::Histogram readBandwidthHist;$/;"	m	struct:CommMonitor::MonitorStats
readBit	./mem/ruby/filters/BlockBloomFilter.cc	/^BlockBloomFilter::readBit(const int index)$/;"	f	class:BlockBloomFilter
readBit	./mem/ruby/filters/BulkBloomFilter.cc	/^BulkBloomFilter::readBit(const int index)$/;"	f	class:BulkBloomFilter
readBit	./mem/ruby/filters/H3BloomFilter.cc	/^H3BloomFilter::readBit(const int index)$/;"	f	class:H3BloomFilter
readBit	./mem/ruby/filters/LSB_CountingBloomFilter.cc	/^LSB_CountingBloomFilter::readBit(const int index)$/;"	f	class:LSB_CountingBloomFilter
readBit	./mem/ruby/filters/MultiBitSelBloomFilter.cc	/^MultiBitSelBloomFilter::readBit(const int index)$/;"	f	class:MultiBitSelBloomFilter
readBit	./mem/ruby/filters/MultiGrainBloomFilter.cc	/^MultiGrainBloomFilter::readBit(const int index)$/;"	f	class:MultiGrainBloomFilter
readBit	./mem/ruby/filters/NonCountingBloomFilter.cc	/^NonCountingBloomFilter::readBit(const int index)$/;"	f	class:NonCountingBloomFilter
readBlob	./mem/fs_translating_port_proxy.cc	/^FSTranslatingPortProxy::readBlob(Addr addr, uint8_t *p, int size) const$/;"	f	class:FSTranslatingPortProxy
readBlob	./mem/port_proxy.cc	/^PortProxy::readBlob(Addr addr, uint8_t *p, int size) const$/;"	f	class:PortProxy
readBlob	./mem/se_translating_port_proxy.cc	/^SETranslatingPortProxy::readBlob(Addr addr, uint8_t *p, int size) const$/;"	f	class:SETranslatingPortProxy
readBufferSize	./mem/dram_ctrl.hh	/^    const uint32_t readBufferSize;$/;"	m	class:DRAMCtrl
readBurstLengthHist	./mem/comm_monitor.hh	/^        Stats::Histogram readBurstLengthHist;$/;"	m	struct:CommMonitor::MonitorStats
readBursts	./mem/dram_ctrl.hh	/^    Stats::Scalar readBursts;$/;"	m	class:DRAMCtrl
readByte	./mem/ruby/common/SubBlock.hh	/^    uint8_t readByte() const { return getByte(0); }$/;"	f	class:SubBlock
readBytes	./mem/comm_monitor.hh	/^        unsigned int readBytes;$/;"	m	struct:CommMonitor::MonitorStats
readCCReg	./cpu/checker/thread_context.hh	/^    CCReg readCCReg(int reg_idx)$/;"	f	class:CheckerThreadContext
readCCReg	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::readCCReg(int reg_idx)$/;"	f	class:FullO3CPU
readCCReg	./cpu/o3/regfile.hh	/^    CCReg readCCReg(PhysRegIndex reg_idx)$/;"	f	class:PhysRegFile
readCCReg	./cpu/o3/thread_context.hh	/^    virtual CCReg readCCReg(int reg_idx) {$/;"	f	class:O3ThreadContext
readCCReg	./cpu/simple_thread.hh	/^    CCReg readCCReg(int reg_idx)$/;"	f	class:SimpleThread
readCCReg	./cpu/thread_context.hh	/^    CCReg readCCReg(int reg_idx)$/;"	f	class:ProxyThreadContext
readCCRegFlat	./cpu/checker/thread_context.hh	/^    CCReg readCCRegFlat(int idx)$/;"	f	class:CheckerThreadContext
readCCRegFlat	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::readCCRegFlat(int reg_idx)$/;"	f	class:O3ThreadContext
readCCRegFlat	./cpu/simple_thread.hh	/^    CCReg readCCRegFlat(int idx) { return ccRegs[idx]; }$/;"	f	class:SimpleThread
readCCRegFlat	./cpu/simple_thread.hh	/^    CCReg readCCRegFlat(int idx)$/;"	f	class:SimpleThread
readCCRegFlat	./cpu/thread_context.hh	/^    CCReg readCCRegFlat(int idx)$/;"	f	class:ProxyThreadContext
readCCRegOperand	./cpu/minor/exec_context.hh	/^    readCCRegOperand(const StaticInst *si, int idx)$/;"	f	class:Minor::ExecContext
readCCRegOperand	./cpu/o3/dyn_inst.hh	/^    CCReg readCCRegOperand(const StaticInst *si, int idx)$/;"	f	class:BaseO3DynInst
readCallback	./dev/arm/ufs_device.cc	/^UFSHostDevice::UFSSCSIDevice::readCallback()$/;"	f	class:UFSHostDevice::UFSSCSIDevice
readCallback	./dev/arm/ufs_device.cc	/^UFSHostDevice::readCallback()$/;"	f	class:UFSHostDevice
readCallback	./mem/ruby/system/Sequencer.cc	/^Sequencer::readCallback(Addr address, DataBlock& data,$/;"	f	class:Sequencer
readCommand	./dev/storage/ide_disk.cc	/^IdeDisk::readCommand(const Addr offset, int size, uint8_t *data)$/;"	f	class:IdeDisk
readCommand	./python/m5/util/__init__.py	/^def readCommand(cmd, **kwargs):$/;"	f
readComplete	./mem/dramsim2.cc	/^void DRAMSim2::readComplete(unsigned id, uint64_t addr, uint64_t cycle)$/;"	f	class:DRAMSim2
readCompleteEvent	./dev/pci/copy_engine.hh	/^            readCompleteEvent;$/;"	m	class:CopyEngine::CopyEngineChannel
readCompleted	./dev/arm/ufs_device.hh	/^        bool readCompleted;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
readCompressedTrace	./mem/ruby/system/RubySystem.cc	/^RubySystem::readCompressedTrace(string filename, uint8_t *&raw_data,$/;"	f	class:RubySystem
readConfig	./dev/pci/device.cc	/^PciDevice::readConfig(PacketPtr pkt)$/;"	f	class:PciDevice
readConfig	./dev/storage/ide_ctrl.cc	/^IdeController::readConfig(PacketPtr pkt)$/;"	f	class:IdeController
readConfig	./dev/virtio/base.cc	/^VirtIODeviceBase::readConfig(PacketPtr pkt, Addr cfgOffset)$/;"	f	class:VirtIODeviceBase
readConfig	./dev/virtio/block.cc	/^VirtIOBlock::readConfig(PacketPtr pkt, Addr cfgOffset)$/;"	f	class:VirtIOBlock
readConfig	./dev/virtio/console.cc	/^VirtIOConsole::readConfig(PacketPtr pkt, Addr cfgOffset)$/;"	f	class:VirtIOConsole
readConfig	./dev/virtio/fs9p.cc	/^VirtIO9PBase::readConfig(PacketPtr pkt, Addr cfgOffset)$/;"	f	class:VirtIO9PBase
readConfigBlob	./dev/virtio/base.cc	/^VirtIODeviceBase::readConfigBlob(PacketPtr pkt, Addr cfgOffset, const uint8_t *cfg)$/;"	f	class:VirtIODeviceBase
readControl	./dev/storage/ide_disk.cc	/^IdeDisk::readControl(const Addr offset, int size, uint8_t *data)$/;"	f	class:IdeDisk
readCopyBytes	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::readCopyBytes()$/;"	f	class:CopyEngine::CopyEngineChannel
readCopyBytesComplete	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::readCopyBytesComplete()$/;"	f	class:CopyEngine::CopyEngineChannel
readCounter	./dev/intel_8254_timer.hh	/^    readCounter(unsigned int num)$/;"	f	class:Intel8254Timer
readCounter	./dev/x86/i8254.hh	/^    readCounter(unsigned int num)$/;"	f	class:X86ISA::I8254
readCpu	./dev/arm/gic_pl390.cc	/^Pl390::readCpu(PacketPtr pkt)$/;"	f	class:Pl390
readCtrl	./dev/arm/vgic.cc	/^VGic::readCtrl(PacketPtr pkt)$/;"	f	class:VGic
readDSPControl	./arch/mips/dsp.cc	/^MipsISA::readDSPControl(uint32_t *dspctl, uint32_t mask)$/;"	f	class:MipsISA
readData	./dev/mc146818.cc	/^MC146818::readData(uint8_t addr)$/;"	f	class:MC146818
readDataOut	./dev/x86/i8042.cc	/^X86ISA::I8042::readDataOut()$/;"	f	class:X86ISA::I8042
readDataTimed	./arch/arm/stage2_mmu.cc	/^Stage2MMU::readDataTimed(ThreadContext *tc, Addr descAddr,$/;"	f	class:Stage2MMU
readDataUntimed	./arch/arm/stage2_mmu.cc	/^Stage2MMU::readDataUntimed(ThreadContext *tc, Addr oVAddr, Addr descAddr,$/;"	f	class:Stage2MMU
readDevice	./dev/arm/ufs_device.cc	/^UFSHostDevice::readDevice(bool lastTransfer, Addr start, uint32_t size,$/;"	f	class:UFSHostDevice
readDisk	./dev/storage/ide_disk.cc	/^IdeDisk::readDisk(uint32_t sector, uint8_t *data)$/;"	f	class:IdeDisk
readDistributor	./dev/arm/gic_pl390.cc	/^Pl390::readDistributor(PacketPtr pkt)$/;"	f	class:Pl390
readDone	./dev/arm/ufs_device.cc	/^UFSHostDevice::readDone()$/;"	f	class:UFSHostDevice
readDoneEvent	./dev/arm/ufs_device.hh	/^    readDoneEvent;$/;"	m	class:UFSHostDevice
readEnergy	./mem/dram_ctrl.hh	/^        Stats::Scalar readEnergy;$/;"	m	class:DRAMCtrl::Rank
readEvent	./dev/arm/pl111.hh	/^    EventWrapper<Pl111, &Pl111::readFramebuffer> readEvent;$/;"	m	class:Pl111
readFSReg	./arch/sparc/ua2005.cc	/^ISA::readFSReg(int miscReg, ThreadContext * tc)$/;"	f	class:ISA
readFillStart	./arch/sparc/process.hh	/^    Addr readFillStart() { return fillStart; }$/;"	f	class:SparcLiveProcess
readFlash	./dev/arm/ufs_device.cc	/^UFSHostDevice::UFSSCSIDevice::readFlash(uint8_t* readaddr, uint64_t offset,$/;"	f	class:UFSHostDevice::UFSSCSIDevice
readFloatReg	./cpu/checker/thread_context.hh	/^    FloatReg readFloatReg(int reg_idx)$/;"	f	class:CheckerThreadContext
readFloatReg	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::readFloatReg(int reg_idx)$/;"	f	class:FullO3CPU
readFloatReg	./cpu/o3/regfile.hh	/^    FloatReg readFloatReg(PhysRegIndex reg_idx) const$/;"	f	class:PhysRegFile
readFloatReg	./cpu/o3/thread_context.hh	/^    virtual FloatReg readFloatReg(int reg_idx) {$/;"	f	class:O3ThreadContext
readFloatReg	./cpu/simple_thread.hh	/^    FloatReg readFloatReg(int reg_idx)$/;"	f	class:SimpleThread
readFloatReg	./cpu/thread_context.hh	/^    FloatReg readFloatReg(int reg_idx)$/;"	f	class:ProxyThreadContext
readFloatRegBits	./cpu/checker/thread_context.hh	/^    FloatRegBits readFloatRegBits(int reg_idx)$/;"	f	class:CheckerThreadContext
readFloatRegBits	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::readFloatRegBits(int reg_idx)$/;"	f	class:FullO3CPU
readFloatRegBits	./cpu/o3/regfile.hh	/^    FloatRegBits readFloatRegBits(PhysRegIndex reg_idx) const$/;"	f	class:PhysRegFile
readFloatRegBits	./cpu/o3/thread_context.hh	/^    virtual FloatRegBits readFloatRegBits(int reg_idx) {$/;"	f	class:O3ThreadContext
readFloatRegBits	./cpu/simple_thread.hh	/^    FloatRegBits readFloatRegBits(int reg_idx)$/;"	f	class:SimpleThread
readFloatRegBits	./cpu/thread_context.hh	/^    FloatRegBits readFloatRegBits(int reg_idx)$/;"	f	class:ProxyThreadContext
readFloatRegBitsFlat	./cpu/checker/thread_context.hh	/^    FloatRegBits readFloatRegBitsFlat(int idx)$/;"	f	class:CheckerThreadContext
readFloatRegBitsFlat	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::readFloatRegBitsFlat(int reg_idx)$/;"	f	class:O3ThreadContext
readFloatRegBitsFlat	./cpu/simple_thread.hh	/^    FloatRegBits readFloatRegBitsFlat(int idx) { return floatRegs.i[idx]; }$/;"	f	class:SimpleThread
readFloatRegBitsFlat	./cpu/thread_context.hh	/^    FloatRegBits readFloatRegBitsFlat(int idx)$/;"	f	class:ProxyThreadContext
readFloatRegFlat	./cpu/checker/thread_context.hh	/^    FloatReg readFloatRegFlat(int idx)$/;"	f	class:CheckerThreadContext
readFloatRegFlat	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::readFloatRegFlat(int reg_idx)$/;"	f	class:O3ThreadContext
readFloatRegFlat	./cpu/simple_thread.hh	/^    FloatReg readFloatRegFlat(int idx) { return floatRegs.f[idx]; }$/;"	f	class:SimpleThread
readFloatRegFlat	./cpu/thread_context.hh	/^    FloatReg readFloatRegFlat(int idx)$/;"	f	class:ProxyThreadContext
readFloatRegOperand	./cpu/minor/exec_context.hh	/^    readFloatRegOperand(const StaticInst *si, int idx)$/;"	f	class:Minor::ExecContext
readFloatRegOperand	./cpu/o3/dyn_inst.hh	/^    FloatReg readFloatRegOperand(const StaticInst *si, int idx)$/;"	f	class:BaseO3DynInst
readFloatRegOperandBits	./cpu/minor/exec_context.hh	/^    readFloatRegOperandBits(const StaticInst *si, int idx)$/;"	f	class:Minor::ExecContext
readFloatRegOperandBits	./cpu/o3/dyn_inst.hh	/^    FloatRegBits readFloatRegOperandBits(const StaticInst *si, int idx)$/;"	f	class:BaseO3DynInst
readFramebuffer	./dev/arm/pl111.cc	/^Pl111::readFramebuffer()$/;"	f	class:Pl111
readFreeEntries	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::readFreeEntries(ThreadID tid)$/;"	f	class:DefaultRename
readFunc	./sim/syscall_emul.cc	/^readFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)$/;"	f
readFuncExeInst	./cpu/checker/thread_context.hh	/^    Counter readFuncExeInst() { return actualTC->readFuncExeInst(); }$/;"	f	class:CheckerThreadContext
readFuncExeInst	./cpu/o3/thread_context.hh	/^    virtual Counter readFuncExeInst() { return thread->funcExeInst; }$/;"	f	class:O3ThreadContext
readFuncExeInst	./cpu/thread_context.hh	/^    Counter readFuncExeInst() { return actualTC->readFuncExeInst(); }$/;"	f	class:ProxyThreadContext
readFuncExeInst	./cpu/thread_state.hh	/^    Counter readFuncExeInst() { return funcExeInst; }$/;"	f	struct:ThreadState
readGarbage	./dev/arm/ufs_device.cc	/^UFSHostDevice::readGarbage()$/;"	f	class:UFSHostDevice
readGarbageEventQueue	./dev/arm/ufs_device.hh	/^    readGarbageEventQueue;$/;"	m	class:UFSHostDevice
readGlobalHist	./cpu/pred/tournament.hh	/^    inline unsigned readGlobalHist() { return globalHistory; }$/;"	f	class:TournamentBP
readGtoH	./mem/port_proxy.hh	/^PortProxy::readGtoH(Addr address) const$/;"	f	class:PortProxy
readHeadInst	./cpu/o3/rob_impl.hh	/^ROB<Impl>::readHeadInst(ThreadID tid)$/;"	f	class:ROB
readHeader	./dev/virtio/base.hh	/^        void readHeader() {$/;"	f	class:VirtQueue::VirtRing
readHits	./arch/arm/tlb.hh	/^    mutable Stats::Scalar readHits;$/;"	m	class:ArmISA::TLB
readIRR	./dev/x86/i8259.hh	/^    bool readIRR;$/;"	m	class:X86ISA::I8259
readId	./dev/arm/amba_device.cc	/^AmbaDevice::readId(PacketPtr pkt, uint64_t amba_id, Addr pio_addr)$/;"	f	class:AmbaDevice
readIntReg	./cpu/checker/thread_context.hh	/^    uint64_t readIntReg(int reg_idx)$/;"	f	class:CheckerThreadContext
readIntReg	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::readIntReg(int reg_idx)$/;"	f	class:FullO3CPU
readIntReg	./cpu/o3/regfile.hh	/^    uint64_t readIntReg(PhysRegIndex reg_idx) const$/;"	f	class:PhysRegFile
readIntReg	./cpu/o3/thread_context.hh	/^    virtual uint64_t readIntReg(int reg_idx) {$/;"	f	class:O3ThreadContext
readIntReg	./cpu/simple_thread.hh	/^    uint64_t readIntReg(int reg_idx)$/;"	f	class:SimpleThread
readIntReg	./cpu/thread_context.hh	/^    uint64_t readIntReg(int reg_idx)$/;"	f	class:ProxyThreadContext
readIntRegFlat	./cpu/checker/thread_context.hh	/^    uint64_t readIntRegFlat(int idx)$/;"	f	class:CheckerThreadContext
readIntRegFlat	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::readIntRegFlat(int reg_idx)$/;"	f	class:O3ThreadContext
readIntRegFlat	./cpu/simple_thread.hh	/^    uint64_t readIntRegFlat(int idx) { return intRegs[idx]; }$/;"	f	class:SimpleThread
readIntRegFlat	./cpu/thread_context.hh	/^    uint64_t readIntRegFlat(int idx)$/;"	f	class:ProxyThreadContext
readIntRegOperand	./cpu/minor/exec_context.hh	/^    readIntRegOperand(const StaticInst *si, int idx)$/;"	f	class:Minor::ExecContext
readIntRegOperand	./cpu/o3/dyn_inst.hh	/^    IntReg readIntRegOperand(const StaticInst *si, int idx)$/;"	f	class:BaseO3DynInst
readIob	./dev/sparc/iob.cc	/^Iob::readIob(PacketPtr pkt)$/;"	f	class:Iob
readIpr	./arch/alpha/ev5.cc	/^ISA::readIpr(int idx, ThreadContext *tc)$/;"	f	class:AlphaISA::ISA
readJBus	./dev/sparc/iob.cc	/^Iob::readJBus(PacketPtr pkt)$/;"	f	class:Iob
readLastActivate	./cpu/checker/thread_context.hh	/^    Tick readLastActivate() { return actualTC->readLastActivate(); }$/;"	f	class:CheckerThreadContext
readLastActivate	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::readLastActivate()$/;"	f	class:O3ThreadContext
readLastActivate	./cpu/thread_context.hh	/^    Tick readLastActivate() { return actualTC->readLastActivate(); }$/;"	f	class:ProxyThreadContext
readLastActivate	./cpu/thread_state.hh	/^    Tick readLastActivate() const { return lastActivate; }$/;"	f	struct:ThreadState
readLastSuspend	./cpu/checker/thread_context.hh	/^    Tick readLastSuspend() { return actualTC->readLastSuspend(); }$/;"	f	class:CheckerThreadContext
readLastSuspend	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::readLastSuspend()$/;"	f	class:O3ThreadContext
readLastSuspend	./cpu/thread_context.hh	/^    Tick readLastSuspend() { return actualTC->readLastSuspend(); }$/;"	f	class:ProxyThreadContext
readLastSuspend	./cpu/thread_state.hh	/^    Tick readLastSuspend() const { return lastSuspend; }$/;"	f	struct:ThreadState
readLatency	./dev/arm/flash_device.hh	/^        Stats::Histogram readLatency;$/;"	m	struct:FlashDevice::FlashDeviceStats
readLatency	./dev/arm/flash_device.hh	/^    const Tick readLatency;$/;"	m	class:FlashDevice
readLatencyHist	./mem/comm_monitor.hh	/^        Stats::Histogram readLatencyHist;$/;"	m	struct:CommMonitor::MonitorStats
readLinearHist	./mem/probes/stack_dist.hh	/^    Stats::Histogram readLinearHist;$/;"	m	class:StackDistProbe
readLogHist	./mem/probes/stack_dist.hh	/^    Stats::SparseHistogram readLogHist;$/;"	m	class:StackDistProbe
readMem	./cpu/base_dyn_inst.hh	/^BaseDynInst<Impl>::readMem(Addr addr, uint8_t *data,$/;"	f	class:BaseDynInst
readMem	./cpu/checker/cpu.cc	/^CheckerCPU::readMem(Addr addr, uint8_t *data, unsigned size, unsigned flags)$/;"	f	class:CheckerCPU
readMem	./cpu/minor/exec_context.hh	/^    readMem(Addr addr, uint8_t *data, unsigned int size,$/;"	f	class:Minor::ExecContext
readMem	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::readMem(Addr addr, uint8_t * data,$/;"	f	class:AtomicSimpleCPU
readMem	./cpu/simple/timing.cc	/^TimingSimpleCPU::readMem(Addr addr, uint8_t *data,$/;"	f	class:TimingSimpleCPU
readMemAtomic	./arch/generic/memhelpers.hh	/^readMemAtomic(XC *xc, Trace::InstRecord *traceData, Addr addr, MemT &mem,$/;"	f
readMemAtomic	./arch/x86/memhelpers.hh	/^readMemAtomic(XC *xc, Trace::InstRecord *traceData, Addr addr, uint64_t &mem,$/;"	f	namespace:X86ISA
readMemTiming	./arch/generic/memhelpers.hh	/^readMemTiming(XC *xc, Trace::InstRecord *traceData, Addr addr,$/;"	f
readMemTiming	./arch/x86/memhelpers.hh	/^readMemTiming(XC *xc, Trace::InstRecord *traceData, Addr addr,$/;"	f	namespace:X86ISA
readMiscReg	./arch/alpha/isa.cc	/^ISA::readMiscReg(int misc_reg, ThreadContext *tc, ThreadID tid)$/;"	f	class:AlphaISA::ISA
readMiscReg	./arch/arm/isa.cc	/^ISA::readMiscReg(int misc_reg, ThreadContext *tc)$/;"	f	class:ArmISA::ISA
readMiscReg	./arch/arm/isa_device.cc	/^DummyISADevice::readMiscReg(int misc_reg)$/;"	f	class:ArmISA::DummyISADevice
readMiscReg	./arch/arm/pmu.cc	/^PMU::readMiscReg(int misc_reg)$/;"	f	class:ArmISA::PMU
readMiscReg	./arch/mips/isa.cc	/^ISA::readMiscReg(int misc_reg, ThreadContext *tc,  ThreadID tid)$/;"	f	class:MipsISA::ISA
readMiscReg	./arch/power/isa.hh	/^    readMiscReg(int misc_reg, ThreadContext *tc)$/;"	f	class:PowerISA::ISA
readMiscReg	./arch/sparc/isa.cc	/^ISA::readMiscReg(int miscReg, ThreadContext * tc)$/;"	f	class:SparcISA::ISA
readMiscReg	./arch/x86/isa.cc	/^ISA::readMiscReg(int miscReg, ThreadContext * tc)$/;"	f	class:X86ISA::ISA
readMiscReg	./cpu/checker/thread_context.hh	/^    MiscReg readMiscReg(int misc_reg)$/;"	f	class:CheckerThreadContext
readMiscReg	./cpu/minor/exec_context.hh	/^    readMiscReg(int misc_reg)$/;"	f	class:Minor::ExecContext
readMiscReg	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::readMiscReg(int misc_reg, ThreadID tid)$/;"	f	class:FullO3CPU
readMiscReg	./cpu/o3/dyn_inst.hh	/^    MiscReg readMiscReg(int misc_reg)$/;"	f	class:BaseO3DynInst
readMiscReg	./cpu/o3/thread_context.hh	/^    virtual MiscReg readMiscReg(int misc_reg)$/;"	f	class:O3ThreadContext
readMiscReg	./cpu/simple_thread.hh	/^    readMiscReg(int misc_reg, ThreadID tid = 0)$/;"	f	class:SimpleThread
readMiscReg	./cpu/thread_context.hh	/^    MiscReg readMiscReg(int misc_reg)$/;"	f	class:ProxyThreadContext
readMiscReg	./dev/arm/generic_timer.cc	/^GenericTimer::readMiscReg(int reg, unsigned cpu)$/;"	f	class:GenericTimer
readMiscRegInt	./arch/arm/pmu.cc	/^PMU::readMiscRegInt(int misc_reg)$/;"	f	class:ArmISA::PMU
readMiscRegNoEffect	./arch/alpha/isa.cc	/^ISA::readMiscRegNoEffect(int misc_reg, ThreadID tid) const$/;"	f	class:AlphaISA::ISA
readMiscRegNoEffect	./arch/arm/isa.cc	/^ISA::readMiscRegNoEffect(int misc_reg) const$/;"	f	class:ArmISA::ISA
readMiscRegNoEffect	./arch/mips/isa.cc	/^ISA::readMiscRegNoEffect(int misc_reg, ThreadID tid) const$/;"	f	class:MipsISA::ISA
readMiscRegNoEffect	./arch/power/isa.hh	/^    readMiscRegNoEffect(int misc_reg) const$/;"	f	class:PowerISA::ISA
readMiscRegNoEffect	./arch/sparc/isa.cc	/^ISA::readMiscRegNoEffect(int miscReg) const$/;"	f	class:SparcISA::ISA
readMiscRegNoEffect	./arch/x86/isa.cc	/^ISA::readMiscRegNoEffect(int miscReg) const$/;"	f	class:X86ISA::ISA
readMiscRegNoEffect	./cpu/checker/cpu.hh	/^    MiscReg readMiscRegNoEffect(int misc_reg) const$/;"	f	class:CheckerCPU
readMiscRegNoEffect	./cpu/checker/thread_context.hh	/^    MiscReg readMiscRegNoEffect(int misc_reg) const$/;"	f	class:CheckerThreadContext
readMiscRegNoEffect	./cpu/minor/exec_context.hh	/^    readMiscRegNoEffect(int misc_reg) const$/;"	f	class:Minor::ExecContext
readMiscRegNoEffect	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::readMiscRegNoEffect(int misc_reg, ThreadID tid) const$/;"	f	class:FullO3CPU
readMiscRegNoEffect	./cpu/o3/thread_context.hh	/^    virtual MiscReg readMiscRegNoEffect(int misc_reg) const$/;"	f	class:O3ThreadContext
readMiscRegNoEffect	./cpu/simple_thread.hh	/^    readMiscRegNoEffect(int misc_reg, ThreadID tid = 0) const$/;"	f	class:SimpleThread
readMiscRegNoEffect	./cpu/thread_context.hh	/^    MiscReg readMiscRegNoEffect(int misc_reg) const$/;"	f	class:ProxyThreadContext
readMiscRegOperand	./cpu/minor/exec_context.hh	/^    readMiscRegOperand(const StaticInst *si, int idx)$/;"	f	class:Minor::ExecContext
readMiscRegOperand	./cpu/o3/dyn_inst.hh	/^    TheISA::MiscReg readMiscRegOperand(const StaticInst *si, int idx)$/;"	f	class:BaseO3DynInst
readMisses	./arch/arm/tlb.hh	/^    mutable Stats::Scalar readMisses;$/;"	m	class:ArmISA::TLB
readNextWindow	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::readNextWindow()$/;"	f	class:TraceCPU::ElasticDataGen
readObservations	./mem/mem_checker.hh	/^        TransactionList readObservations;$/;"	m	class:MemChecker::ByteTracker
readPC	./arch/arm/insts/static_inst.hh	/^    readPC(XC *xc)$/;"	f	class:ArmISA::ArmStaticInst
readPendingNum	./dev/arm/ufs_device.hh	/^    int readPendingNum;$/;"	m	class:UFSHostDevice
readPercent	./cpu/testers/traffic_gen/generators.hh	/^    const uint8_t readPercent;$/;"	m	class:LinearGen
readPercent	./cpu/testers/traffic_gen/generators.hh	/^    const uint8_t readPercent;$/;"	m	class:RandomGen
readPipeSource	./sim/fd_entry.hh	/^    int readPipeSource;$/;"	m	class:FDEntry
readPktSize	./mem/dram_ctrl.hh	/^    Stats::Vector readPktSize;$/;"	m	class:DRAMCtrl
readPorts	./cpu/testers/rubytest/RubyTester.hh	/^    std::vector<MasterPort*> readPorts;$/;"	m	class:RubyTester
readPredTaken	./cpu/base_dyn_inst.hh	/^    bool readPredTaken()$/;"	f	class:BaseDynInst
readPredTarg	./cpu/base_dyn_inst.hh	/^    const TheISA::PCState &readPredTarg() { return predPC; }$/;"	f	class:BaseDynInst
readPredicate	./cpu/base_dyn_inst.hh	/^    bool readPredicate()$/;"	f	class:BaseDynInst
readPredicate	./cpu/minor/exec_context.hh	/^    readPredicate()$/;"	f	class:Minor::ExecContext
readPredicate	./cpu/simple_thread.hh	/^    bool readPredicate()$/;"	f	class:SimpleThread
readPredicate	./cpu/thread_context.hh	/^    bool readPredicate() { return actualTC->readPredicate(); }$/;"	f	class:ProxyThreadContext
readQueue	./mem/dram_ctrl.hh	/^    std::deque<DRAMPacket*> readQueue;$/;"	m	class:DRAMCtrl
readQueueFull	./mem/dram_ctrl.cc	/^DRAMCtrl::readQueueFull(unsigned int neededEntries) const$/;"	f	class:DRAMCtrl
readReg	./arch/x86/interrupts.cc	/^X86ISA::Interrupts::readReg(ApicRegIndex reg)$/;"	f	class:X86ISA::Interrupts
readReg	./dev/arm/gpu_nomali.cc	/^NoMaliGpu::readReg(nomali_addr_t reg)$/;"	f	class:NoMaliGpu
readReg	./dev/arm/hdlcd.cc	/^HDLcd::readReg(Addr offset)$/;"	f	class:HDLcd
readReg	./dev/x86/i82094aa.cc	/^X86ISA::I82094AA::readReg(uint8_t offset)$/;"	f	class:X86ISA::I82094AA
readRegOtherThread	./cpu/checker/cpu.hh	/^    MiscReg readRegOtherThread(int misc_reg, ThreadID tid)$/;"	f	class:CheckerCPU
readRegOtherThread	./cpu/minor/exec_context.hh	/^    readRegOtherThread(int idx, ThreadID tid = InvalidThreadID)$/;"	f	class:Minor::ExecContext
readRegOtherThread	./cpu/o3/dyn_inst.hh	/^    MiscReg readRegOtherThread(int misc_reg, ThreadID tid)$/;"	f	class:BaseO3DynInst
readRegOtherThread	./cpu/thread_context.hh	/^    readRegOtherThread(int misc_reg, ThreadID tid)$/;"	f	class:ThreadContext
readRegRaw	./dev/arm/gpu_nomali.cc	/^NoMaliGpu::readRegRaw(nomali_addr_t reg) const$/;"	f	class:NoMaliGpu
readRegister	./dev/x86/cmos.cc	/^X86ISA::Cmos::readRegister(uint8_t reg)$/;"	f	class:X86ISA::Cmos
readReqs	./mem/dram_ctrl.hh	/^    Stats::Scalar readReqs;$/;"	m	class:DRAMCtrl
readResult	./cpu/base_dyn_inst.hh	/^    void readResult(T& t)$/;"	f	class:BaseDynInst
readRowHitRate	./mem/dram_ctrl.hh	/^    Stats::Formula readRowHitRate;$/;"	m	class:DRAMCtrl
readRowHits	./mem/dram_ctrl.hh	/^    Stats::Scalar readRowHits;$/;"	m	class:DRAMCtrl
readSpillStart	./arch/sparc/process.hh	/^    Addr readSpillStart() { return spillStart; }$/;"	f	class:SparcLiveProcess
readStCondFailures	./cpu/base_dyn_inst.hh	/^    unsigned int readStCondFailures() const$/;"	f	class:BaseDynInst
readStCondFailures	./cpu/checker/thread_context.hh	/^    unsigned readStCondFailures()$/;"	f	class:CheckerThreadContext
readStCondFailures	./cpu/minor/exec_context.hh	/^    unsigned int readStCondFailures() const { return 0; }$/;"	f	class:Minor::ExecContext
readStCondFailures	./cpu/o3/thread_context.hh	/^    virtual unsigned readStCondFailures()$/;"	f	class:O3ThreadContext
readStCondFailures	./cpu/simple_thread.hh	/^    unsigned readStCondFailures() { return storeCondFailures; }$/;"	f	class:SimpleThread
readStCondFailures	./cpu/thread_context.hh	/^    unsigned readStCondFailures()$/;"	f	class:ProxyThreadContext
readStallSignals	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::readStallSignals(ThreadID tid)$/;"	f	class:DefaultDecode
readStallSignals	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::readStallSignals(ThreadID tid)$/;"	f	class:DefaultRename
readString	./arch/x86/bios/smbios.cc	/^X86ISA::SMBios::SMBiosStructure::readString(int n)$/;"	f	class:X86ISA::SMBios::SMBiosStructure
readString	./mem/se_translating_port_proxy.cc	/^SETranslatingPortProxy::readString(std::string &str, Addr addr) const$/;"	f	class:SETranslatingPortProxy
readTailInst	./cpu/o3/rob_impl.hh	/^ROB<Impl>::readTailInst(ThreadID tid)$/;"	f	class:ROB
readTrans	./mem/comm_monitor.hh	/^        unsigned int readTrans;$/;"	m	struct:CommMonitor::MonitorStats
readTransHist	./mem/comm_monitor.hh	/^        Stats::Histogram readTransHist;$/;"	m	struct:CommMonitor::MonitorStats
readVCpu	./dev/arm/vgic.cc	/^VGic::readVCpu(PacketPtr pkt)$/;"	f	class:VGic
readVecElem	./arch/arm/insts/neon64_mem.hh	/^readVecElem(VReg src, int index, int eSize)$/;"	f	namespace:ArmISA
readWord	./base/framebuffer.cc	/^PixelConverter::readWord(const uint8_t *p) const$/;"	f	class:PixelConverter
read_accesses	./arch/alpha/tlb.hh	/^    mutable Stats::Scalar read_accesses;$/;"	m	class:AlphaISA::TLB
read_accesses	./arch/mips/tlb.hh	/^    mutable Stats::Scalar read_accesses;$/;"	m	class:MipsISA::TLB
read_accesses	./arch/power/tlb.hh	/^    mutable Stats::Scalar read_accesses;$/;"	m	class:PowerISA::TLB
read_acv	./arch/alpha/tlb.hh	/^    mutable Stats::Scalar read_acv;$/;"	m	class:AlphaISA::TLB
read_acv	./arch/mips/tlb.hh	/^    mutable Stats::Scalar read_acv;$/;"	m	class:MipsISA::TLB
read_acv	./arch/power/tlb.hh	/^    mutable Stats::Scalar read_acv;$/;"	m	class:PowerISA::TLB
read_addr_mask	./mem/CommMonitor.py	/^    read_addr_mask = Param.Addr(MaxAddr, "Address mask for read address")$/;"	v	class:CommMonitor
read_and_flatten	./arch/isa_parser.py	/^    def read_and_flatten(self, filename):$/;"	m	class:ISAParser
read_buffer_size	./mem/DRAMCtrl.py	/^    read_buffer_size = 32$/;"	v	class:HMC_2500_x32
read_buffer_size	./mem/DRAMCtrl.py	/^    read_buffer_size = 64$/;"	v	class:DDR4_2400_x64
read_buffer_size	./mem/DRAMCtrl.py	/^    read_buffer_size = Param.Unsigned(32, "Number of read queue entries")$/;"	v	class:DRAMCtrl
read_byte	./dev/intel_8254_timer.hh	/^        uint8_t read_byte, write_byte;$/;"	m	class:Intel8254Timer::Counter
read_exec_only	./arch/x86/linux/process.cc	/^    Bitfield<3> read_exec_only;$/;"	v
read_hits	./arch/alpha/tlb.hh	/^    mutable Stats::Scalar read_hits;$/;"	m	class:AlphaISA::TLB
read_hits	./arch/mips/tlb.hh	/^    mutable Stats::Scalar read_hits;$/;"	m	class:MipsISA::TLB
read_hits	./arch/power/tlb.hh	/^    mutable Stats::Scalar read_hits;$/;"	m	class:PowerISA::TLB
read_lat	./dev/arm/FlashDevice.py	/^    read_lat = Param.Latency("25us", "Read Latency")$/;"	v	class:FlashDevice
read_misses	./arch/alpha/tlb.hh	/^    mutable Stats::Scalar read_misses;$/;"	m	class:AlphaISA::TLB
read_misses	./arch/mips/tlb.hh	/^    mutable Stats::Scalar read_misses;$/;"	m	class:MipsISA::TLB
read_misses	./arch/power/tlb.hh	/^    mutable Stats::Scalar read_misses;$/;"	m	class:PowerISA::TLB
read_only	./dev/storage/DiskImage.py	/^    read_only = Param.Bool(False, "read only image")$/;"	v	class:DiskImage
read_write_delay	./mem/ruby/structures/RubyMemoryControl.py	/^    read_write_delay = Param.Int(2, "");$/;"	v	class:RubyMemoryControl
readable	./arch/x86/regs/misc.hh	/^        Bitfield<13> readable;$/;"	m	namespace:X86ISA
readfile	./sim/System.py	/^    readfile = Param.String("", "file to read startup script from")$/;"	v
readfile	./sim/pseudo_inst.cc	/^readfile(ThreadContext *tc, Addr vaddr, uint64_t len, uint64_t offset)$/;"	f	namespace:PseudoInst
readlink	./kern/tru64/tru64_syscalls.hh	/^        readlink = 58,$/;"	e	enum:SystemCalls::__anon102
readlinkFunc	./sim/syscall_emul.cc	/^readlinkFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
readlinkFunc	./sim/syscall_emul.cc	/^readlinkFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc,$/;"	f
readlinkatFunc	./sim/syscall_emul.hh	/^readlinkatFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
readonly	./dev/storage/disk_image.hh	/^    bool readonly;$/;"	m	class:RawDiskImage
readsThisTime	./mem/dram_ctrl.hh	/^    uint32_t readsThisTime;$/;"	m	class:DRAMCtrl
readv	./kern/tru64/tru64_syscalls.hh	/^        readv = 120,$/;"	e	enum:SystemCalls::__anon102
readyInsts	./cpu/o3/inst_queue.hh	/^    ReadyInstQueue readyInsts[Num_OpClasses];$/;"	m	class:InstructionQueue
readyIt	./cpu/o3/inst_queue.hh	/^    ListOrderIt readyIt[Num_OpClasses];$/;"	m	class:InstructionQueue
readyIter	./mem/cache/mshr.hh	/^    Iterator readyIter;$/;"	m	class:MSHR
readyList	./cpu/trace/trace_cpu.hh	/^        std::list<ReadyNode> readyList;$/;"	m	class:TraceCPU::ElasticDataGen
readyList	./mem/cache/mshr_queue.hh	/^    MSHR::List readyList;$/;"	m	class:MSHRQueue
readyRegs	./cpu/base_dyn_inst.hh	/^    uint8_t readyRegs;$/;"	m	class:BaseDynInst
readyTime	./mem/cache/mshr.hh	/^        const Tick readyTime; \/\/!< Time when request is ready to be serviced$/;"	m	class:MSHR::Target
readyTime	./mem/cache/mshr.hh	/^    Tick readyTime;$/;"	m	class:MSHR
readyTime	./mem/dram_ctrl.hh	/^        Tick readyTime;$/;"	m	class:DRAMCtrl::DRAMPacket
readyToCkpt	./dev/net/dist_iface.cc	/^DistIface::readyToCkpt(Tick delay, Tick period)$/;"	f	class:DistIface
readyToCommit	./cpu/base_dyn_inst.hh	/^    bool readyToCommit() const { return status[CanCommit]; }$/;"	f	class:BaseDynInst
readyToExit	./dev/net/dist_iface.cc	/^DistIface::readyToExit(Tick delay)$/;"	f	class:DistIface
readyToIssue	./cpu/base_dyn_inst.hh	/^    bool readyToIssue() const { return status[CanIssue]; }$/;"	f	class:BaseDynInst
real	./arch/sparc/pagetable.hh	/^    bool real;$/;"	m	struct:SparcISA::TlbRange
realview_io	./dev/arm/RealView.py	/^    realview_io = RealViewCtrl($/;"	v	class:VExpress_EMM
realview_io	./dev/arm/RealView.py	/^    realview_io = RealViewCtrl(pio_addr=0x10000000)$/;"	v	class:RealViewPBX
realview_io	./dev/arm/RealView.py	/^    realview_io = RealViewCtrl(pio_addr=0x10000000, idreg=0x01400500)$/;"	v	class:RealViewEB
reanalyzeAllMessages	./mem/ruby/network/MessageBuffer.cc	/^MessageBuffer::reanalyzeAllMessages(Tick current_time)$/;"	f	class:MessageBuffer
reanalyzeList	./mem/ruby/network/MessageBuffer.cc	/^MessageBuffer::reanalyzeList(list<MsgPtr> &lt, Tick schdTick)$/;"	f	class:MessageBuffer
reanalyzeMessages	./mem/ruby/network/MessageBuffer.cc	/^MessageBuffer::reanalyzeMessages(Addr addr, Tick current_time)$/;"	f	class:MessageBuffer
reason	./cpu/minor/pipe_data.hh	/^    Reason reason;$/;"	m	class:Minor::BranchData
reboot	./kern/tru64/tru64_syscalls.hh	/^        reboot = 55,$/;"	e	enum:SystemCalls::__anon102
receiveDeviceInterrupt	./dev/sparc/iob.cc	/^Iob::receiveDeviceInterrupt(DeviceId devid)$/;"	f	class:Iob
receiveJBusInterrupt	./dev/sparc/iob.cc	/^Iob::receiveJBusInterrupt(int cpu_id, int source, uint64_t d0, uint64_t d1)$/;"	f	class:Iob
recent	./cpu/decode_cache.hh	/^    PageIt recent[2];$/;"	m	class:DecodeCache::AddrMap
recipEstimate	./arch/arm/insts/vfp.cc	/^recipEstimate(double a)$/;"	f	namespace:ArmISA
recipSqrtEstimate	./arch/arm/insts/vfp.cc	/^recipSqrtEstimate(double a)$/;"	f	namespace:ArmISA
recip_sqrt_estimate	./arch/arm/insts/fplib.cc	/^static const uint8_t recip_sqrt_estimate[256] = {$/;"	m	namespace:ArmISA	file:
recordCacheContents	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::recordCacheContents(int cntrl, CacheRecorder* tr) const$/;"	f	class:CacheMemory
recordExecTick	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::recordExecTick(const DynInstPtr &dyn_inst)$/;"	f	class:ElasticTrace
recordMissLatency	./mem/ruby/system/Sequencer.cc	/^Sequencer::recordMissLatency(const Cycles cycles, const RubyRequestType type,$/;"	f	class:Sequencer
recordPCChange	./cpu/checker/cpu.hh	/^    void recordPCChange(const TheISA::PCState &val)$/;"	f	class:CheckerCPU
recordProducer	./cpu/o3/inst_queue.hh	/^    void recordProducer(DynInstPtr &inst)$/;"	f	class:InstructionQueue
recordRequestType	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::recordRequestType(CacheRequestType requestType, Addr addr)$/;"	f	class:CacheMemory
recordRequestType	./mem/ruby/structures/DirectoryMemory.cc	/^DirectoryMemory::recordRequestType(DirectoryRequestType requestType) {$/;"	f	class:DirectoryMemory
recordRequestType	./mem/ruby/system/DMASequencer.cc	/^DMASequencer::recordRequestType(DMASequencerRequestType requestType)$/;"	f	class:DMASequencer
recordRequestType	./mem/ruby/system/Sequencer.cc	/^Sequencer::recordRequestType(SequencerRequestType requestType) {$/;"	f	class:Sequencer
recordResult	./cpu/base_dyn_inst.hh	/^    void recordResult(bool f) { instFlags[RecordResult] = f; }$/;"	f	class:BaseDynInst
recordToCommTick	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::recordToCommTick(const DynInstPtr &dyn_inst)$/;"	f	class:ElasticTrace
record_t	./cpu/pc_event.hh	/^    typedef PCEvent * record_t;$/;"	t	class:PCEventQueue
recover	./base/remote_gdb.hh	/^    label_t recover;$/;"	m	class:BaseRemoteGDB
recoveryPage	./dev/arm/ufs_device.cc	/^const unsigned int UFSHostDevice::UFSSCSIDevice::recoveryPage[3] =$/;"	m	class:UFSHostDevice::UFSSCSIDevice	file:
recoveryPage	./dev/arm/ufs_device.hh	/^        static const unsigned int recoveryPage[3];$/;"	m	class:UFSHostDevice::UFSSCSIDevice
recv	./base/remote_gdb.cc	/^BaseRemoteGDB::recv(char *bp, int maxlen)$/;"	f	class:BaseRemoteGDB
recvAtomic	./dev/io_device.cc	/^PioPort::recvAtomic(PacketPtr pkt)$/;"	f	class:PioPort
recvAtomic	./mem/addr_mapper.cc	/^AddrMapper::recvAtomic(PacketPtr pkt)$/;"	f	class:AddrMapper
recvAtomic	./mem/addr_mapper.hh	/^        Tick recvAtomic(PacketPtr pkt)$/;"	f	class:AddrMapper::MapperSlavePort
recvAtomic	./mem/bridge.cc	/^Bridge::BridgeSlavePort::recvAtomic(PacketPtr pkt)$/;"	f	class:Bridge::BridgeSlavePort
recvAtomic	./mem/cache/cache.cc	/^Cache::CpuSidePort::recvAtomic(PacketPtr pkt)$/;"	f	class:Cache::CpuSidePort
recvAtomic	./mem/cache/cache.cc	/^Cache::recvAtomic(PacketPtr pkt)$/;"	f	class:Cache
recvAtomic	./mem/coherent_xbar.cc	/^CoherentXBar::recvAtomic(PacketPtr pkt, PortID slave_port_id)$/;"	f	class:CoherentXBar
recvAtomic	./mem/coherent_xbar.hh	/^        virtual Tick recvAtomic(PacketPtr pkt)$/;"	f	class:CoherentXBar::CoherentXBarSlavePort
recvAtomic	./mem/comm_monitor.cc	/^CommMonitor::recvAtomic(PacketPtr pkt)$/;"	f	class:CommMonitor
recvAtomic	./mem/comm_monitor.hh	/^        Tick recvAtomic(PacketPtr pkt)$/;"	f	class:CommMonitor::MonitorSlavePort
recvAtomic	./mem/dram_ctrl.cc	/^DRAMCtrl::MemoryPort::recvAtomic(PacketPtr pkt)$/;"	f	class:DRAMCtrl::MemoryPort
recvAtomic	./mem/dram_ctrl.cc	/^DRAMCtrl::recvAtomic(PacketPtr pkt)$/;"	f	class:DRAMCtrl
recvAtomic	./mem/dramsim2.cc	/^DRAMSim2::MemoryPort::recvAtomic(PacketPtr pkt)$/;"	f	class:DRAMSim2::MemoryPort
recvAtomic	./mem/dramsim2.cc	/^DRAMSim2::recvAtomic(PacketPtr pkt)$/;"	f	class:DRAMSim2
recvAtomic	./mem/external_slave.cc	/^StubSlavePort::recvAtomic(PacketPtr packet)$/;"	f	class:StubSlavePort
recvAtomic	./mem/mem_checker_monitor.cc	/^MemCheckerMonitor::recvAtomic(PacketPtr pkt)$/;"	f	class:MemCheckerMonitor
recvAtomic	./mem/mem_checker_monitor.hh	/^        Tick recvAtomic(PacketPtr pkt)$/;"	f	class:MemCheckerMonitor::MonitorSlavePort
recvAtomic	./mem/mport.cc	/^MessageSlavePort::recvAtomic(PacketPtr pkt)$/;"	f	class:MessageSlavePort
recvAtomic	./mem/noncoherent_xbar.cc	/^NoncoherentXBar::recvAtomic(PacketPtr pkt, PortID slave_port_id)$/;"	f	class:NoncoherentXBar
recvAtomic	./mem/noncoherent_xbar.hh	/^        virtual Tick recvAtomic(PacketPtr pkt)$/;"	f	class:NoncoherentXBar::NoncoherentXBarSlavePort
recvAtomic	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::MemoryPort::recvAtomic(PacketPtr pkt)$/;"	f	class:RubyMemoryControl::MemoryPort
recvAtomic	./mem/ruby/system/DMASequencer.hh	/^        Tick recvAtomic(PacketPtr pkt)$/;"	f	class:DMASequencer::MemSlavePort
recvAtomic	./mem/ruby/system/RubyPort.hh	/^        Tick recvAtomic(PacketPtr pkt)$/;"	f	class:RubyPort::MemSlavePort
recvAtomic	./mem/ruby/system/RubyPort.hh	/^        Tick recvAtomic(PacketPtr pkt)$/;"	f	class:RubyPort::PioSlavePort
recvAtomic	./mem/serial_link.cc	/^SerialLink::SerialLinkSlavePort::recvAtomic(PacketPtr pkt)$/;"	f	class:SerialLink::SerialLinkSlavePort
recvAtomic	./mem/simple_mem.cc	/^SimpleMemory::MemoryPort::recvAtomic(PacketPtr pkt)$/;"	f	class:SimpleMemory::MemoryPort
recvAtomic	./mem/simple_mem.cc	/^SimpleMemory::recvAtomic(PacketPtr pkt)$/;"	f	class:SimpleMemory
recvAtomicSnoop	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::AtomicCPUDPort::recvAtomicSnoop(PacketPtr pkt)$/;"	f	class:AtomicSimpleCPU::AtomicCPUDPort
recvAtomicSnoop	./cpu/simple/atomic.hh	/^        virtual Tick recvAtomicSnoop(PacketPtr pkt) { return 0; }$/;"	f	class:AtomicSimpleCPU::AtomicCPUPort
recvAtomicSnoop	./cpu/testers/memtest/memtest.hh	/^        Tick recvAtomicSnoop(PacketPtr pkt) { return 0; }$/;"	f	class:MemTest::CpuPort
recvAtomicSnoop	./cpu/testers/traffic_gen/traffic_gen.hh	/^        Tick recvAtomicSnoop(PacketPtr pkt) { return 0; }$/;"	f	class:TrafficGen::TrafficGenPort
recvAtomicSnoop	./mem/addr_mapper.cc	/^AddrMapper::recvAtomicSnoop(PacketPtr pkt)$/;"	f	class:AddrMapper
recvAtomicSnoop	./mem/addr_mapper.hh	/^        Tick recvAtomicSnoop(PacketPtr pkt)$/;"	f	class:AddrMapper::MapperMasterPort
recvAtomicSnoop	./mem/cache/cache.cc	/^Cache::MemSidePort::recvAtomicSnoop(PacketPtr pkt)$/;"	f	class:Cache::MemSidePort
recvAtomicSnoop	./mem/cache/cache.cc	/^Cache::recvAtomicSnoop(PacketPtr pkt)$/;"	f	class:Cache
recvAtomicSnoop	./mem/coherent_xbar.cc	/^CoherentXBar::recvAtomicSnoop(PacketPtr pkt, PortID master_port_id)$/;"	f	class:CoherentXBar
recvAtomicSnoop	./mem/coherent_xbar.hh	/^        virtual Tick recvAtomicSnoop(PacketPtr pkt)$/;"	f	class:CoherentXBar::CoherentXBarMasterPort
recvAtomicSnoop	./mem/comm_monitor.cc	/^CommMonitor::recvAtomicSnoop(PacketPtr pkt)$/;"	f	class:CommMonitor
recvAtomicSnoop	./mem/comm_monitor.hh	/^        Tick recvAtomicSnoop(PacketPtr pkt)$/;"	f	class:CommMonitor::MonitorMasterPort
recvAtomicSnoop	./mem/mem_checker_monitor.cc	/^MemCheckerMonitor::recvAtomicSnoop(PacketPtr pkt)$/;"	f	class:MemCheckerMonitor
recvAtomicSnoop	./mem/mem_checker_monitor.hh	/^        Tick recvAtomicSnoop(PacketPtr pkt)$/;"	f	class:MemCheckerMonitor::MonitorMasterPort
recvAtomicSnoop	./mem/port.hh	/^    virtual Tick recvAtomicSnoop(PacketPtr pkt)$/;"	f	class:MasterPort
recvCommand	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::recvCommand()$/;"	f	class:CopyEngine::CopyEngineChannel
recvCutText	./base/vnc/vncserver.cc	/^VncServer::recvCutText()$/;"	f	class:VncServer
recvDone	./dev/net/dist_iface.hh	/^        Event *recvDone;$/;"	m	class:DistIface::RecvScheduler
recvDone	./dev/net/etherint.hh	/^    void recvDone() { peer->sendDone(); }$/;"	f	class:EtherInt
recvFunctional	./mem/addr_mapper.cc	/^AddrMapper::recvFunctional(PacketPtr pkt)$/;"	f	class:AddrMapper
recvFunctional	./mem/addr_mapper.hh	/^        void recvFunctional(PacketPtr pkt)$/;"	f	class:AddrMapper::MapperSlavePort
recvFunctional	./mem/bridge.cc	/^Bridge::BridgeSlavePort::recvFunctional(PacketPtr pkt)$/;"	f	class:Bridge::BridgeSlavePort
recvFunctional	./mem/cache/cache.cc	/^Cache::CpuSidePort::recvFunctional(PacketPtr pkt)$/;"	f	class:Cache::CpuSidePort
recvFunctional	./mem/coherent_xbar.cc	/^CoherentXBar::recvFunctional(PacketPtr pkt, PortID slave_port_id)$/;"	f	class:CoherentXBar
recvFunctional	./mem/coherent_xbar.hh	/^        virtual void recvFunctional(PacketPtr pkt)$/;"	f	class:CoherentXBar::CoherentXBarSlavePort
recvFunctional	./mem/comm_monitor.cc	/^CommMonitor::recvFunctional(PacketPtr pkt)$/;"	f	class:CommMonitor
recvFunctional	./mem/comm_monitor.hh	/^        void recvFunctional(PacketPtr pkt)$/;"	f	class:CommMonitor::MonitorSlavePort
recvFunctional	./mem/dram_ctrl.cc	/^DRAMCtrl::MemoryPort::recvFunctional(PacketPtr pkt)$/;"	f	class:DRAMCtrl::MemoryPort
recvFunctional	./mem/dram_ctrl.cc	/^DRAMCtrl::recvFunctional(PacketPtr pkt)$/;"	f	class:DRAMCtrl
recvFunctional	./mem/dramsim2.cc	/^DRAMSim2::MemoryPort::recvFunctional(PacketPtr pkt)$/;"	f	class:DRAMSim2::MemoryPort
recvFunctional	./mem/dramsim2.cc	/^DRAMSim2::recvFunctional(PacketPtr pkt)$/;"	f	class:DRAMSim2
recvFunctional	./mem/external_slave.cc	/^StubSlavePort::recvFunctional(PacketPtr packet)$/;"	f	class:StubSlavePort
recvFunctional	./mem/mem_checker_monitor.cc	/^MemCheckerMonitor::recvFunctional(PacketPtr pkt)$/;"	f	class:MemCheckerMonitor
recvFunctional	./mem/mem_checker_monitor.hh	/^        void recvFunctional(PacketPtr pkt)$/;"	f	class:MemCheckerMonitor::MonitorSlavePort
recvFunctional	./mem/noncoherent_xbar.cc	/^NoncoherentXBar::recvFunctional(PacketPtr pkt, PortID slave_port_id)$/;"	f	class:NoncoherentXBar
recvFunctional	./mem/noncoherent_xbar.hh	/^        virtual void recvFunctional(PacketPtr pkt)$/;"	f	class:NoncoherentXBar::NoncoherentXBarSlavePort
recvFunctional	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::MemoryPort::recvFunctional(PacketPtr pkt)$/;"	f	class:RubyMemoryControl::MemoryPort
recvFunctional	./mem/ruby/system/DMASequencer.hh	/^        void recvFunctional(PacketPtr pkt)$/;"	f	class:DMASequencer::MemSlavePort
recvFunctional	./mem/ruby/system/RubyPort.cc	/^RubyPort::MemSlavePort::recvFunctional(PacketPtr pkt)$/;"	f	class:RubyPort::MemSlavePort
recvFunctional	./mem/ruby/system/RubyPort.hh	/^        void recvFunctional(PacketPtr pkt)$/;"	f	class:RubyPort::PioSlavePort
recvFunctional	./mem/serial_link.cc	/^SerialLink::SerialLinkSlavePort::recvFunctional(PacketPtr pkt)$/;"	f	class:SerialLink::SerialLinkSlavePort
recvFunctional	./mem/simple_mem.cc	/^SimpleMemory::MemoryPort::recvFunctional(PacketPtr pkt)$/;"	f	class:SimpleMemory::MemoryPort
recvFunctional	./mem/simple_mem.cc	/^SimpleMemory::recvFunctional(PacketPtr pkt)$/;"	f	class:SimpleMemory
recvFunctional	./mem/tport.cc	/^SimpleTimingPort::recvFunctional(PacketPtr pkt)$/;"	f	class:SimpleTimingPort
recvFunctionalSnoop	./cpu/o3/cpu.hh	/^        virtual void recvFunctionalSnoop(PacketPtr pkt)$/;"	f	class:FullO3CPU::DcachePort
recvFunctionalSnoop	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::AtomicCPUDPort::recvFunctionalSnoop(PacketPtr pkt)$/;"	f	class:AtomicSimpleCPU::AtomicCPUDPort
recvFunctionalSnoop	./cpu/simple/timing.cc	/^TimingSimpleCPU::DcachePort::recvFunctionalSnoop(PacketPtr pkt)$/;"	f	class:TimingSimpleCPU::DcachePort
recvFunctionalSnoop	./cpu/testers/memtest/memtest.hh	/^        void recvFunctionalSnoop(PacketPtr pkt) { }$/;"	f	class:MemTest::CpuPort
recvFunctionalSnoop	./cpu/testers/traffic_gen/traffic_gen.hh	/^        void recvFunctionalSnoop(PacketPtr pkt) { }$/;"	f	class:TrafficGen::TrafficGenPort
recvFunctionalSnoop	./cpu/trace/trace_cpu.hh	/^        void recvFunctionalSnoop(PacketPtr pkt)$/;"	f	class:TraceCPU::DcachePort
recvFunctionalSnoop	./mem/addr_mapper.cc	/^AddrMapper::recvFunctionalSnoop(PacketPtr pkt)$/;"	f	class:AddrMapper
recvFunctionalSnoop	./mem/addr_mapper.hh	/^        void recvFunctionalSnoop(PacketPtr pkt)$/;"	f	class:AddrMapper::MapperMasterPort
recvFunctionalSnoop	./mem/cache/cache.cc	/^Cache::MemSidePort::recvFunctionalSnoop(PacketPtr pkt)$/;"	f	class:Cache::MemSidePort
recvFunctionalSnoop	./mem/coherent_xbar.cc	/^CoherentXBar::recvFunctionalSnoop(PacketPtr pkt, PortID master_port_id)$/;"	f	class:CoherentXBar
recvFunctionalSnoop	./mem/coherent_xbar.hh	/^        virtual void recvFunctionalSnoop(PacketPtr pkt)$/;"	f	class:CoherentXBar::CoherentXBarMasterPort
recvFunctionalSnoop	./mem/comm_monitor.cc	/^CommMonitor::recvFunctionalSnoop(PacketPtr pkt)$/;"	f	class:CommMonitor
recvFunctionalSnoop	./mem/comm_monitor.hh	/^        void recvFunctionalSnoop(PacketPtr pkt)$/;"	f	class:CommMonitor::MonitorMasterPort
recvFunctionalSnoop	./mem/external_slave.cc	/^StubSlavePort::recvFunctionalSnoop(PacketPtr packet)$/;"	f	class:StubSlavePort
recvFunctionalSnoop	./mem/mem_checker_monitor.cc	/^MemCheckerMonitor::recvFunctionalSnoop(PacketPtr pkt)$/;"	f	class:MemCheckerMonitor
recvFunctionalSnoop	./mem/mem_checker_monitor.hh	/^        void recvFunctionalSnoop(PacketPtr pkt)$/;"	f	class:MemCheckerMonitor::MonitorMasterPort
recvFunctionalSnoop	./mem/port.hh	/^    virtual void recvFunctionalSnoop(PacketPtr pkt)$/;"	f	class:MasterPort
recvHeader	./dev/net/tcp_iface.cc	/^TCPIface::recvHeader(Header &header)$/;"	f	class:TCPIface
recvKeyboardInput	./base/vnc/vncserver.cc	/^VncServer::recvKeyboardInput()$/;"	f	class:VncServer
recvMessage	./arch/x86/interrupts.cc	/^X86ISA::Interrupts::recvMessage(PacketPtr pkt)$/;"	f	class:X86ISA::Interrupts
recvMessage	./dev/x86/intdev.hh	/^        Tick recvMessage(PacketPtr pkt)$/;"	f	class:X86ISA::IntDevice::IntSlavePort
recvMessage	./dev/x86/intdev.hh	/^    recvMessage(PacketPtr pkt)$/;"	f	class:X86ISA::IntDevice
recvPacket	./arch/x86/pagetable_walker.cc	/^Walker::WalkerState::recvPacket(PacketPtr pkt)$/;"	f	class:X86ISA::Walker::WalkerState
recvPacket	./dev/net/dist_etherlink.hh	/^        bool recvPacket(EthPacketPtr pkt) { return txLink->transmit(pkt); }$/;"	f	class:DistEtherLink::LocalIface
recvPacket	./dev/net/etherlink.hh	/^        bool recvPacket(EthPacketPtr packet) { return txlink->transmit(packet); }$/;"	f	class:EtherLink::Interface
recvPacket	./dev/net/ethertap.cc	/^EtherTap::recvPacket(EthPacketPtr packet)$/;"	f	class:EtherTap
recvPacket	./dev/net/ethertap.hh	/^    virtual bool recvPacket(EthPacketPtr pkt) { return tap->recvPacket(pkt); }$/;"	f	class:EtherTapInt
recvPacket	./dev/net/i8254xGBe.hh	/^    virtual bool recvPacket(EthPacketPtr pkt) { return dev->ethRxPkt(pkt); }$/;"	f	class:IGbEInt
recvPacket	./dev/net/ns_gige.cc	/^NSGigE::recvPacket(EthPacketPtr packet)$/;"	f	class:NSGigE
recvPacket	./dev/net/ns_gige.hh	/^    virtual bool recvPacket(EthPacketPtr pkt) { return dev->recvPacket(pkt); }$/;"	f	class:NSGigEInt
recvPacket	./dev/net/sinic.cc	/^Device::recvPacket(EthPacketPtr packet)$/;"	f	class:Sinic::Device
recvPacket	./dev/net/sinic.hh	/^    virtual bool recvPacket(EthPacketPtr pkt) { return dev->recvPacket(pkt); }$/;"	f	class:Sinic::Interface
recvPacket	./dev/net/tcp_iface.cc	/^TCPIface::recvPacket(const Header &header, EthPacketPtr &packet)$/;"	f	class:TCPIface
recvPointerInput	./base/vnc/vncserver.cc	/^VncServer::recvPointerInput()$/;"	f	class:VncServer
recvRangeChange	./mem/addr_mapper.cc	/^AddrMapper::recvRangeChange()$/;"	f	class:AddrMapper
recvRangeChange	./mem/addr_mapper.hh	/^        void recvRangeChange()$/;"	f	class:AddrMapper::MapperMasterPort
recvRangeChange	./mem/coherent_xbar.hh	/^        virtual void recvRangeChange()$/;"	f	class:CoherentXBar::CoherentXBarMasterPort
recvRangeChange	./mem/comm_monitor.cc	/^CommMonitor::recvRangeChange()$/;"	f	class:CommMonitor
recvRangeChange	./mem/comm_monitor.hh	/^        void recvRangeChange()$/;"	f	class:CommMonitor::MonitorMasterPort
recvRangeChange	./mem/hmc_controller.cc	/^void HMCController::recvRangeChange(PortID master_port_id)$/;"	f	class:HMCController
recvRangeChange	./mem/mem_checker_monitor.cc	/^MemCheckerMonitor::recvRangeChange()$/;"	f	class:MemCheckerMonitor
recvRangeChange	./mem/mem_checker_monitor.hh	/^        void recvRangeChange()$/;"	f	class:MemCheckerMonitor::MonitorMasterPort
recvRangeChange	./mem/noncoherent_xbar.hh	/^        virtual void recvRangeChange()$/;"	f	class:NoncoherentXBar::NoncoherentXBarMasterPort
recvRangeChange	./mem/port.hh	/^    virtual void recvRangeChange() { }$/;"	f	class:MasterPort
recvRangeChange	./mem/ruby/system/RubyPort.cc	/^RubyPort::PioMasterPort::recvRangeChange()$/;"	f	class:RubyPort::PioMasterPort
recvRangeChange	./mem/ruby/system/RubyPort.hh	/^        void recvRangeChange() {}$/;"	f	class:RubyPort::MemMasterPort
recvRangeChange	./mem/xbar.cc	/^BaseXBar::recvRangeChange(PortID master_port_id)$/;"	f	class:BaseXBar
recvReqRetry	./arch/x86/pagetable_walker.cc	/^Walker::WalkerPort::recvReqRetry()$/;"	f	class:X86ISA::Walker::WalkerPort
recvReqRetry	./arch/x86/pagetable_walker.cc	/^Walker::recvReqRetry()$/;"	f	class:X86ISA::Walker
recvReqRetry	./cpu/kvm/base.hh	/^        void recvReqRetry()$/;"	f	class:BaseKvmCPU::KVMCpuPort
recvReqRetry	./cpu/minor/fetch1.cc	/^Fetch1::recvReqRetry()$/;"	f	class:Minor::Fetch1
recvReqRetry	./cpu/minor/fetch1.hh	/^        void recvReqRetry() { fetch.recvReqRetry(); }$/;"	f	class:Minor::Fetch1::IcachePort
recvReqRetry	./cpu/minor/lsq.cc	/^LSQ::recvReqRetry()$/;"	f	class:Minor::LSQ
recvReqRetry	./cpu/minor/lsq.hh	/^        void recvReqRetry() { lsq.recvReqRetry(); }$/;"	f	class:Minor::LSQ::DcachePort
recvReqRetry	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::DcachePort::recvReqRetry()$/;"	f	class:FullO3CPU::DcachePort
recvReqRetry	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::IcachePort::recvReqRetry()$/;"	f	class:FullO3CPU::IcachePort
recvReqRetry	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::recvReqRetry()$/;"	f	class:DefaultFetch
recvReqRetry	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::recvReqRetry()$/;"	f	class:LSQ
recvReqRetry	./cpu/simple/atomic.hh	/^        void recvReqRetry()$/;"	f	class:AtomicSimpleCPU::AtomicCPUPort
recvReqRetry	./cpu/simple/timing.cc	/^TimingSimpleCPU::DcachePort::recvReqRetry()$/;"	f	class:TimingSimpleCPU::DcachePort
recvReqRetry	./cpu/simple/timing.cc	/^TimingSimpleCPU::IcachePort::recvReqRetry()$/;"	f	class:TimingSimpleCPU::IcachePort
recvReqRetry	./cpu/testers/directedtest/RubyDirectedTester.hh	/^        virtual void recvReqRetry()$/;"	f	class:RubyDirectedTester::CpuPort
recvReqRetry	./cpu/testers/memtest/memtest.cc	/^MemTest::CpuPort::recvReqRetry()$/;"	f	class:MemTest::CpuPort
recvReqRetry	./cpu/testers/networktest/networktest.cc	/^NetworkTest::CpuPort::recvReqRetry()$/;"	f	class:NetworkTest::CpuPort
recvReqRetry	./cpu/testers/rubytest/RubyTester.hh	/^        virtual void recvReqRetry()$/;"	f	class:RubyTester::CpuPort
recvReqRetry	./cpu/testers/traffic_gen/traffic_gen.cc	/^TrafficGen::recvReqRetry()$/;"	f	class:TrafficGen
recvReqRetry	./cpu/testers/traffic_gen/traffic_gen.hh	/^        void recvReqRetry() { trafficGen.recvReqRetry(); }$/;"	f	class:TrafficGen::TrafficGenPort
recvReqRetry	./cpu/trace/trace_cpu.cc	/^TraceCPU::DcachePort::recvReqRetry()$/;"	f	class:TraceCPU::DcachePort
recvReqRetry	./cpu/trace/trace_cpu.cc	/^TraceCPU::IcachePort::recvReqRetry()$/;"	f	class:TraceCPU::IcachePort
recvReqRetry	./dev/dma_device.cc	/^DmaPort::recvReqRetry()$/;"	f	class:DmaPort
recvReqRetry	./mem/addr_mapper.cc	/^AddrMapper::recvReqRetry()$/;"	f	class:AddrMapper
recvReqRetry	./mem/addr_mapper.hh	/^        void recvReqRetry()$/;"	f	class:AddrMapper::MapperMasterPort
recvReqRetry	./mem/bridge.cc	/^Bridge::BridgeMasterPort::recvReqRetry()$/;"	f	class:Bridge::BridgeMasterPort
recvReqRetry	./mem/coherent_xbar.cc	/^CoherentXBar::recvReqRetry(PortID master_port_id)$/;"	f	class:CoherentXBar
recvReqRetry	./mem/coherent_xbar.hh	/^        virtual void recvReqRetry()$/;"	f	class:CoherentXBar::CoherentXBarMasterPort
recvReqRetry	./mem/coherent_xbar.hh	/^        void recvReqRetry() { panic("SnoopRespPort should never see retry\\n"); }$/;"	f	class:CoherentXBar::SnoopRespPort
recvReqRetry	./mem/comm_monitor.cc	/^CommMonitor::recvReqRetry()$/;"	f	class:CommMonitor
recvReqRetry	./mem/comm_monitor.hh	/^        void recvReqRetry()$/;"	f	class:CommMonitor::MonitorMasterPort
recvReqRetry	./mem/mem_checker_monitor.cc	/^MemCheckerMonitor::recvReqRetry()$/;"	f	class:MemCheckerMonitor
recvReqRetry	./mem/mem_checker_monitor.hh	/^        void recvReqRetry()$/;"	f	class:MemCheckerMonitor::MonitorMasterPort
recvReqRetry	./mem/noncoherent_xbar.cc	/^NoncoherentXBar::recvReqRetry(PortID master_port_id)$/;"	f	class:NoncoherentXBar
recvReqRetry	./mem/noncoherent_xbar.hh	/^        virtual void recvReqRetry()$/;"	f	class:NoncoherentXBar::NoncoherentXBarMasterPort
recvReqRetry	./mem/qport.hh	/^    void recvReqRetry() { reqQueue.retry(); }$/;"	f	class:QueuedMasterPort
recvReqRetry	./mem/serial_link.cc	/^SerialLink::SerialLinkMasterPort::recvReqRetry()$/;"	f	class:SerialLink::SerialLinkMasterPort
recvRespRetry	./mem/addr_mapper.cc	/^AddrMapper::recvRespRetry()$/;"	f	class:AddrMapper
recvRespRetry	./mem/addr_mapper.hh	/^        void recvRespRetry()$/;"	f	class:AddrMapper::MapperSlavePort
recvRespRetry	./mem/bridge.cc	/^Bridge::BridgeSlavePort::recvRespRetry()$/;"	f	class:Bridge::BridgeSlavePort
recvRespRetry	./mem/comm_monitor.cc	/^CommMonitor::recvRespRetry()$/;"	f	class:CommMonitor
recvRespRetry	./mem/comm_monitor.hh	/^        void recvRespRetry()$/;"	f	class:CommMonitor::MonitorSlavePort
recvRespRetry	./mem/dramsim2.cc	/^DRAMSim2::MemoryPort::recvRespRetry()$/;"	f	class:DRAMSim2::MemoryPort
recvRespRetry	./mem/dramsim2.cc	/^DRAMSim2::recvRespRetry()$/;"	f	class:DRAMSim2
recvRespRetry	./mem/external_slave.cc	/^StubSlavePort::recvRespRetry()$/;"	f	class:StubSlavePort
recvRespRetry	./mem/mem_checker_monitor.cc	/^MemCheckerMonitor::recvRespRetry()$/;"	f	class:MemCheckerMonitor
recvRespRetry	./mem/mem_checker_monitor.hh	/^        void recvRespRetry()$/;"	f	class:MemCheckerMonitor::MonitorSlavePort
recvRespRetry	./mem/qport.hh	/^    void recvRespRetry() { respQueue.retry(); }$/;"	f	class:QueuedSlavePort
recvRespRetry	./mem/serial_link.cc	/^SerialLink::SerialLinkSlavePort::recvRespRetry()$/;"	f	class:SerialLink::SerialLinkSlavePort
recvRespRetry	./mem/simple_mem.cc	/^SimpleMemory::MemoryPort::recvRespRetry()$/;"	f	class:SimpleMemory::MemoryPort
recvRespRetry	./mem/simple_mem.cc	/^SimpleMemory::recvRespRetry()$/;"	f	class:SimpleMemory
recvResponse	./arch/x86/interrupts.cc	/^X86ISA::Interrupts::recvResponse(PacketPtr pkt)$/;"	f	class:X86ISA::Interrupts
recvResponse	./dev/x86/i82094aa.cc	/^X86ISA::I82094AA::recvResponse(PacketPtr pkt)$/;"	f	class:X86ISA::I82094AA
recvResponse	./dev/x86/intdev.hh	/^        Tick recvResponse(PacketPtr pkt)$/;"	f	class:X86ISA::IntDevice::IntMasterPort
recvResponse	./dev/x86/intdev.hh	/^    recvResponse(PacketPtr pkt)$/;"	f	class:X86ISA::IntDevice
recvResponse	./mem/mport.hh	/^    virtual Tick recvResponse(PacketPtr pkt)$/;"	f	class:MessageMasterPort
recvRetry	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::recvRetry()$/;"	f	class:LSQUnit
recvRetry	./cpu/testers/memtest/memtest.cc	/^MemTest::recvRetry()$/;"	f	class:MemTest
recvRetry	./mem/xbar.cc	/^BaseXBar::Layer<SrcType,DstType>::recvRetry()$/;"	f	class:BaseXBar::Layer
recvRetrySnoopResp	./mem/comm_monitor.cc	/^CommMonitor::recvRetrySnoopResp()$/;"	f	class:CommMonitor
recvRetrySnoopResp	./mem/comm_monitor.hh	/^        void recvRetrySnoopResp()$/;"	f	class:CommMonitor::MonitorMasterPort
recvRetrySnoopResp	./mem/port.hh	/^    virtual void recvRetrySnoopResp()$/;"	f	class:MasterPort
recvRetrySnoopResp	./mem/qport.hh	/^    void recvRetrySnoopResp() { snoopRespQueue.retry(); }$/;"	f	class:QueuedMasterPort
recvScheduler	./dev/net/dist_iface.hh	/^    RecvScheduler recvScheduler;$/;"	m	class:DistIface
recvTCP	./dev/net/tcp_iface.cc	/^TCPIface::recvTCP(int sock, void *buf, unsigned length)$/;"	f	class:TCPIface
recvTMsg	./dev/virtio/fs9p.cc	/^VirtIO9PProxy::recvTMsg(const P9MsgHeader &header,$/;"	f	class:VirtIO9PProxy
recvThread	./dev/net/dist_iface.hh	/^    std::thread *recvThread;$/;"	m	class:DistIface
recvThreadFunc	./dev/net/dist_iface.cc	/^DistIface::recvThreadFunc(Event *recv_done, Tick link_delay)$/;"	f	class:DistIface
recvThreadsNum	./dev/net/dist_iface.cc	/^unsigned DistIface::recvThreadsNum = 0;$/;"	m	class:DistIface	file:
recvThreadsNum	./dev/net/dist_iface.hh	/^    static unsigned recvThreadsNum;$/;"	m	class:DistIface
recvTime	./mem/cache/mshr.hh	/^        const Tick recvTime;  \/\/!< Time when request was received (for stats)$/;"	m	class:MSHR::Target
recvTimingReq	./mem/addr_mapper.cc	/^AddrMapper::recvTimingReq(PacketPtr pkt)$/;"	f	class:AddrMapper
recvTimingReq	./mem/addr_mapper.hh	/^        bool recvTimingReq(PacketPtr pkt)$/;"	f	class:AddrMapper::MapperSlavePort
recvTimingReq	./mem/bridge.cc	/^Bridge::BridgeSlavePort::recvTimingReq(PacketPtr pkt)$/;"	f	class:Bridge::BridgeSlavePort
recvTimingReq	./mem/cache/cache.cc	/^Cache::CpuSidePort::recvTimingReq(PacketPtr pkt)$/;"	f	class:Cache::CpuSidePort
recvTimingReq	./mem/cache/cache.cc	/^Cache::recvTimingReq(PacketPtr pkt)$/;"	f	class:Cache
recvTimingReq	./mem/coherent_xbar.cc	/^CoherentXBar::recvTimingReq(PacketPtr pkt, PortID slave_port_id)$/;"	f	class:CoherentXBar
recvTimingReq	./mem/coherent_xbar.hh	/^        virtual bool recvTimingReq(PacketPtr pkt)$/;"	f	class:CoherentXBar::CoherentXBarSlavePort
recvTimingReq	./mem/comm_monitor.cc	/^CommMonitor::recvTimingReq(PacketPtr pkt)$/;"	f	class:CommMonitor
recvTimingReq	./mem/comm_monitor.hh	/^        bool recvTimingReq(PacketPtr pkt)$/;"	f	class:CommMonitor::MonitorSlavePort
recvTimingReq	./mem/dram_ctrl.cc	/^DRAMCtrl::MemoryPort::recvTimingReq(PacketPtr pkt)$/;"	f	class:DRAMCtrl::MemoryPort
recvTimingReq	./mem/dram_ctrl.cc	/^DRAMCtrl::recvTimingReq(PacketPtr pkt)$/;"	f	class:DRAMCtrl
recvTimingReq	./mem/dramsim2.cc	/^DRAMSim2::MemoryPort::recvTimingReq(PacketPtr pkt)$/;"	f	class:DRAMSim2::MemoryPort
recvTimingReq	./mem/dramsim2.cc	/^DRAMSim2::recvTimingReq(PacketPtr pkt)$/;"	f	class:DRAMSim2
recvTimingReq	./mem/external_slave.cc	/^StubSlavePort::recvTimingReq(PacketPtr packet)$/;"	f	class:StubSlavePort
recvTimingReq	./mem/hmc_controller.cc	/^bool HMCController::recvTimingReq(PacketPtr pkt, PortID slave_port_id)$/;"	f	class:HMCController
recvTimingReq	./mem/mem_checker_monitor.cc	/^MemCheckerMonitor::recvTimingReq(PacketPtr pkt)$/;"	f	class:MemCheckerMonitor
recvTimingReq	./mem/mem_checker_monitor.hh	/^        bool recvTimingReq(PacketPtr pkt)$/;"	f	class:MemCheckerMonitor::MonitorSlavePort
recvTimingReq	./mem/noncoherent_xbar.cc	/^NoncoherentXBar::recvTimingReq(PacketPtr pkt, PortID slave_port_id)$/;"	f	class:NoncoherentXBar
recvTimingReq	./mem/noncoherent_xbar.hh	/^        virtual bool recvTimingReq(PacketPtr pkt)$/;"	f	class:NoncoherentXBar::NoncoherentXBarSlavePort
recvTimingReq	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::MemoryPort::recvTimingReq(PacketPtr pkt)$/;"	f	class:RubyMemoryControl::MemoryPort
recvTimingReq	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::recvTimingReq(PacketPtr pkt)$/;"	f	class:RubyMemoryControl
recvTimingReq	./mem/ruby/system/DMASequencer.cc	/^DMASequencer::MemSlavePort::recvTimingReq(PacketPtr pkt)$/;"	f	class:DMASequencer::MemSlavePort
recvTimingReq	./mem/ruby/system/RubyPort.cc	/^RubyPort::MemSlavePort::recvTimingReq(PacketPtr pkt)$/;"	f	class:RubyPort::MemSlavePort
recvTimingReq	./mem/ruby/system/RubyPort.cc	/^RubyPort::PioSlavePort::recvTimingReq(PacketPtr pkt)$/;"	f	class:RubyPort::PioSlavePort
recvTimingReq	./mem/serial_link.cc	/^SerialLink::SerialLinkSlavePort::recvTimingReq(PacketPtr pkt)$/;"	f	class:SerialLink::SerialLinkSlavePort
recvTimingReq	./mem/simple_mem.cc	/^SimpleMemory::MemoryPort::recvTimingReq(PacketPtr pkt)$/;"	f	class:SimpleMemory::MemoryPort
recvTimingReq	./mem/simple_mem.cc	/^SimpleMemory::recvTimingReq(PacketPtr pkt)$/;"	f	class:SimpleMemory
recvTimingReq	./mem/tport.cc	/^SimpleTimingPort::recvTimingReq(PacketPtr pkt)$/;"	f	class:SimpleTimingPort
recvTimingResp	./arch/x86/pagetable_walker.cc	/^Walker::WalkerPort::recvTimingResp(PacketPtr pkt)$/;"	f	class:X86ISA::Walker::WalkerPort
recvTimingResp	./arch/x86/pagetable_walker.cc	/^Walker::recvTimingResp(PacketPtr pkt)$/;"	f	class:X86ISA::Walker
recvTimingResp	./cpu/kvm/base.hh	/^        bool recvTimingResp(PacketPtr pkt)$/;"	f	class:BaseKvmCPU::KVMCpuPort
recvTimingResp	./cpu/minor/fetch1.cc	/^Fetch1::recvTimingResp(PacketPtr response)$/;"	f	class:Minor::Fetch1
recvTimingResp	./cpu/minor/fetch1.hh	/^        bool recvTimingResp(PacketPtr pkt)$/;"	f	class:Minor::Fetch1::IcachePort
recvTimingResp	./cpu/minor/lsq.cc	/^LSQ::recvTimingResp(PacketPtr response)$/;"	f	class:Minor::LSQ
recvTimingResp	./cpu/minor/lsq.hh	/^        bool recvTimingResp(PacketPtr pkt)$/;"	f	class:Minor::LSQ::DcachePort
recvTimingResp	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::DcachePort::recvTimingResp(PacketPtr pkt)$/;"	f	class:FullO3CPU::DcachePort
recvTimingResp	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::IcachePort::recvTimingResp(PacketPtr pkt)$/;"	f	class:FullO3CPU::IcachePort
recvTimingResp	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::recvTimingResp(PacketPtr pkt)$/;"	f	class:LSQ
recvTimingResp	./cpu/simple/atomic.hh	/^        bool recvTimingResp(PacketPtr pkt)$/;"	f	class:AtomicSimpleCPU::AtomicCPUPort
recvTimingResp	./cpu/simple/timing.cc	/^TimingSimpleCPU::DcachePort::recvTimingResp(PacketPtr pkt)$/;"	f	class:TimingSimpleCPU::DcachePort
recvTimingResp	./cpu/simple/timing.cc	/^TimingSimpleCPU::IcachePort::recvTimingResp(PacketPtr pkt)$/;"	f	class:TimingSimpleCPU::IcachePort
recvTimingResp	./cpu/testers/directedtest/RubyDirectedTester.cc	/^RubyDirectedTester::CpuPort::recvTimingResp(PacketPtr pkt)$/;"	f	class:RubyDirectedTester::CpuPort
recvTimingResp	./cpu/testers/memtest/memtest.cc	/^MemTest::CpuPort::recvTimingResp(PacketPtr pkt)$/;"	f	class:MemTest::CpuPort
recvTimingResp	./cpu/testers/networktest/networktest.cc	/^NetworkTest::CpuPort::recvTimingResp(PacketPtr pkt)$/;"	f	class:NetworkTest::CpuPort
recvTimingResp	./cpu/testers/rubytest/RubyTester.cc	/^RubyTester::CpuPort::recvTimingResp(PacketPtr pkt)$/;"	f	class:RubyTester::CpuPort
recvTimingResp	./cpu/testers/traffic_gen/traffic_gen.cc	/^TrafficGen::TrafficGenPort::recvTimingResp(PacketPtr pkt)$/;"	f	class:TrafficGen::TrafficGenPort
recvTimingResp	./cpu/trace/trace_cpu.cc	/^TraceCPU::DcachePort::recvTimingResp(PacketPtr pkt)$/;"	f	class:TraceCPU::DcachePort
recvTimingResp	./cpu/trace/trace_cpu.cc	/^TraceCPU::IcachePort::recvTimingResp(PacketPtr pkt)$/;"	f	class:TraceCPU::IcachePort
recvTimingResp	./dev/dma_device.cc	/^DmaPort::recvTimingResp(PacketPtr pkt)$/;"	f	class:DmaPort
recvTimingResp	./mem/addr_mapper.cc	/^AddrMapper::recvTimingResp(PacketPtr pkt)$/;"	f	class:AddrMapper
recvTimingResp	./mem/addr_mapper.hh	/^        bool recvTimingResp(PacketPtr pkt)$/;"	f	class:AddrMapper::MapperMasterPort
recvTimingResp	./mem/bridge.cc	/^Bridge::BridgeMasterPort::recvTimingResp(PacketPtr pkt)$/;"	f	class:Bridge::BridgeMasterPort
recvTimingResp	./mem/cache/cache.cc	/^Cache::MemSidePort::recvTimingResp(PacketPtr pkt)$/;"	f	class:Cache::MemSidePort
recvTimingResp	./mem/cache/cache.cc	/^Cache::recvTimingResp(PacketPtr pkt)$/;"	f	class:Cache
recvTimingResp	./mem/coherent_xbar.cc	/^CoherentXBar::recvTimingResp(PacketPtr pkt, PortID master_port_id)$/;"	f	class:CoherentXBar
recvTimingResp	./mem/coherent_xbar.hh	/^        bool recvTimingResp(PacketPtr pkt)$/;"	f	class:CoherentXBar::SnoopRespPort
recvTimingResp	./mem/coherent_xbar.hh	/^        virtual bool recvTimingResp(PacketPtr pkt)$/;"	f	class:CoherentXBar::CoherentXBarMasterPort
recvTimingResp	./mem/comm_monitor.cc	/^CommMonitor::recvTimingResp(PacketPtr pkt)$/;"	f	class:CommMonitor
recvTimingResp	./mem/comm_monitor.hh	/^        bool recvTimingResp(PacketPtr pkt)$/;"	f	class:CommMonitor::MonitorMasterPort
recvTimingResp	./mem/mem_checker_monitor.cc	/^MemCheckerMonitor::recvTimingResp(PacketPtr pkt)$/;"	f	class:MemCheckerMonitor
recvTimingResp	./mem/mem_checker_monitor.hh	/^        bool recvTimingResp(PacketPtr pkt)$/;"	f	class:MemCheckerMonitor::MonitorMasterPort
recvTimingResp	./mem/mport.hh	/^    bool recvTimingResp(PacketPtr pkt) { recvResponse(pkt); return true; }$/;"	f	class:MessageMasterPort
recvTimingResp	./mem/noncoherent_xbar.cc	/^NoncoherentXBar::recvTimingResp(PacketPtr pkt, PortID master_port_id)$/;"	f	class:NoncoherentXBar
recvTimingResp	./mem/noncoherent_xbar.hh	/^        virtual bool recvTimingResp(PacketPtr pkt)$/;"	f	class:NoncoherentXBar::NoncoherentXBarMasterPort
recvTimingResp	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::MemoryPort::recvTimingResp(PacketPtr pkt)$/;"	f	class:AbstractController::MemoryPort
recvTimingResp	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::recvTimingResp(PacketPtr pkt)$/;"	f	class:AbstractController
recvTimingResp	./mem/ruby/system/RubyPort.cc	/^RubyPort::PioMasterPort::recvTimingResp(PacketPtr pkt)$/;"	f	class:RubyPort::PioMasterPort
recvTimingResp	./mem/ruby/system/RubyPort.cc	/^bool RubyPort::MemMasterPort::recvTimingResp(PacketPtr pkt)$/;"	f	class:RubyPort::MemMasterPort
recvTimingResp	./mem/serial_link.cc	/^SerialLink::SerialLinkMasterPort::recvTimingResp(PacketPtr pkt)$/;"	f	class:SerialLink::SerialLinkMasterPort
recvTimingSnoopReq	./cpu/minor/cpu.hh	/^        virtual void recvTimingSnoopReq(PacketPtr pkt) { }$/;"	f	class:MinorCPU::MinorCPUPort
recvTimingSnoopReq	./cpu/minor/lsq.cc	/^LSQ::recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:Minor::LSQ
recvTimingSnoopReq	./cpu/minor/lsq.hh	/^        void recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:Minor::LSQ::DcachePort
recvTimingSnoopReq	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::DcachePort::recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:FullO3CPU::DcachePort
recvTimingSnoopReq	./cpu/o3/cpu.hh	/^        virtual void recvTimingSnoopReq(PacketPtr pkt) { }$/;"	f	class:FullO3CPU::IcachePort
recvTimingSnoopReq	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:LSQ
recvTimingSnoopReq	./cpu/simple/timing.cc	/^TimingSimpleCPU::DcachePort::recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:TimingSimpleCPU::DcachePort
recvTimingSnoopReq	./cpu/simple/timing.hh	/^        virtual void recvTimingSnoopReq(PacketPtr pkt) {}$/;"	f	class:TimingSimpleCPU::TimingCPUPort
recvTimingSnoopReq	./cpu/testers/memtest/memtest.hh	/^        void recvTimingSnoopReq(PacketPtr pkt) { }$/;"	f	class:MemTest::CpuPort
recvTimingSnoopReq	./cpu/testers/traffic_gen/traffic_gen.hh	/^        void recvTimingSnoopReq(PacketPtr pkt) { }$/;"	f	class:TrafficGen::TrafficGenPort
recvTimingSnoopReq	./cpu/trace/trace_cpu.hh	/^        void recvTimingSnoopReq(PacketPtr pkt) { }$/;"	f	class:TraceCPU::IcachePort
recvTimingSnoopReq	./cpu/trace/trace_cpu.hh	/^        void recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:TraceCPU::DcachePort
recvTimingSnoopReq	./mem/addr_mapper.cc	/^AddrMapper::recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:AddrMapper
recvTimingSnoopReq	./mem/addr_mapper.hh	/^        void recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:AddrMapper::MapperMasterPort
recvTimingSnoopReq	./mem/cache/cache.cc	/^Cache::MemSidePort::recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:Cache::MemSidePort
recvTimingSnoopReq	./mem/cache/cache.cc	/^Cache::recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:Cache
recvTimingSnoopReq	./mem/coherent_xbar.cc	/^CoherentXBar::recvTimingSnoopReq(PacketPtr pkt, PortID master_port_id)$/;"	f	class:CoherentXBar
recvTimingSnoopReq	./mem/coherent_xbar.hh	/^        virtual void recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:CoherentXBar::CoherentXBarMasterPort
recvTimingSnoopReq	./mem/comm_monitor.cc	/^CommMonitor::recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:CommMonitor
recvTimingSnoopReq	./mem/comm_monitor.hh	/^        void recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:CommMonitor::MonitorMasterPort
recvTimingSnoopReq	./mem/mem_checker_monitor.cc	/^MemCheckerMonitor::recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:MemCheckerMonitor
recvTimingSnoopReq	./mem/mem_checker_monitor.hh	/^        void recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:MemCheckerMonitor::MonitorMasterPort
recvTimingSnoopReq	./mem/port.hh	/^    virtual void recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:MasterPort
recvTimingSnoopResp	./mem/addr_mapper.cc	/^AddrMapper::recvTimingSnoopResp(PacketPtr pkt)$/;"	f	class:AddrMapper
recvTimingSnoopResp	./mem/addr_mapper.hh	/^        bool recvTimingSnoopResp(PacketPtr pkt)$/;"	f	class:AddrMapper::MapperSlavePort
recvTimingSnoopResp	./mem/cache/cache.cc	/^Cache::CpuSidePort::recvTimingSnoopResp(PacketPtr pkt)$/;"	f	class:Cache::CpuSidePort
recvTimingSnoopResp	./mem/cache/cache.cc	/^Cache::recvTimingSnoopResp(PacketPtr pkt)$/;"	f	class:Cache
recvTimingSnoopResp	./mem/coherent_xbar.cc	/^CoherentXBar::recvTimingSnoopResp(PacketPtr pkt, PortID slave_port_id)$/;"	f	class:CoherentXBar
recvTimingSnoopResp	./mem/coherent_xbar.hh	/^        virtual bool recvTimingSnoopResp(PacketPtr pkt)$/;"	f	class:CoherentXBar::CoherentXBarSlavePort
recvTimingSnoopResp	./mem/comm_monitor.cc	/^CommMonitor::recvTimingSnoopResp(PacketPtr pkt)$/;"	f	class:CommMonitor
recvTimingSnoopResp	./mem/comm_monitor.hh	/^        bool recvTimingSnoopResp(PacketPtr pkt)$/;"	f	class:CommMonitor::MonitorSlavePort
recvTimingSnoopResp	./mem/external_slave.cc	/^StubSlavePort::recvTimingSnoopResp(PacketPtr packet)$/;"	f	class:StubSlavePort
recvTimingSnoopResp	./mem/mem_checker_monitor.cc	/^MemCheckerMonitor::recvTimingSnoopResp(PacketPtr pkt)$/;"	f	class:MemCheckerMonitor
recvTimingSnoopResp	./mem/mem_checker_monitor.hh	/^        bool recvTimingSnoopResp(PacketPtr pkt)$/;"	f	class:MemCheckerMonitor::MonitorSlavePort
recvTimingSnoopResp	./mem/port.hh	/^    virtual bool recvTimingSnoopResp(PacketPtr pkt)$/;"	f	class:SlavePort
recvfrom	./kern/tru64/tru64_syscalls.hh	/^        recvfrom = 29,$/;"	e	enum:SystemCalls::__anon102
recvmsg	./kern/tru64/tru64_syscalls.hh	/^        recvmsg = 27,$/;"	e	enum:SystemCalls::__anon102
recycle	./mem/ruby/network/MessageBuffer.cc	/^MessageBuffer::recycle(Tick current_time, Tick recycle_latency)$/;"	f	class:MessageBuffer
recycle	./mem/ruby/structures/WireBuffer.cc	/^WireBuffer::recycle(Tick current_time, Tick recycle_latency)$/;"	f	class:WireBuffer
recycle_latency	./mem/ruby/slicc_interface/Controller.py	/^    recycle_latency = Param.Cycles(10, "")$/;"	v	class:RubyController
red	./arch/sparc/miscregs.hh	/^    Bitfield<5> red;$/;"	m	namespace:SparcISA
red	./base/bitmap.hh	/^        uint8_t red;$/;"	m	struct:Bitmap::BmpPixel32
red	./base/framebuffer.hh	/^    uint8_t red;$/;"	m	struct:Pixel
red_select	./dev/arm/hdlcd.hh	/^    ColorSelectReg red_select;      \/**< Red color select register *\/$/;"	m	class:HDLcd
redirTable	./dev/x86/i82094aa.hh	/^    RedirTableEntry redirTable[TableSize];$/;"	m	class:X86ISA::I82094AA
redmax	./base/vnc/vncinput.hh	/^        uint16_t redmax;$/;"	m	struct:VncInput::PixelFormat
redshift	./base/vnc/vncinput.hh	/^        uint8_t redshift;$/;"	m	struct:VncInput::PixelFormat
refCount	./mem/cache/blk.hh	/^    unsigned refCount;$/;"	m	class:CacheBlk
refcount	./base/remote_gdb.hh	/^        int refcount;$/;"	m	class:BaseRemoteGDB::HardBreakpoint
referenceData	./cpu/testers/memtest/memtest.hh	/^    std::unordered_map<Addr, uint8_t> referenceData;$/;"	m	class:MemTest
referenced	./base/inifile.hh	/^        mutable bool    referenced;     \/\/\/< Has this entry been used?$/;"	m	class:IniFile::Entry
referenced	./base/inifile.hh	/^        mutable bool    referenced;     \/\/\/< Has this section been used?$/;"	m	class:IniFile::Section
refresh	./cpu/kvm/perfevent.cc	/^PerfKvmCounter::refresh(int refresh)$/;"	f	class:PerfKvmCounter
refresh	./sim/vptr.hh	/^    refresh()$/;"	f	class:VPtr
refreshDueAt	./mem/dram_ctrl.hh	/^        Tick refreshDueAt;$/;"	m	class:DRAMCtrl::Rank
refreshEnergy	./mem/dram_ctrl.hh	/^        Stats::Scalar refreshEnergy;$/;"	m	class:DRAMCtrl::Rank
refreshEvent	./mem/dram_ctrl.hh	/^        refreshEvent;$/;"	m	class:DRAMCtrl::Rank
refreshNext	./dev/pci/copy_engine.hh	/^        bool refreshNext;$/;"	m	class:CopyEngine::CopyEngineChannel
refreshState	./mem/dram_ctrl.hh	/^        RefreshState refreshState;$/;"	m	class:DRAMCtrl::Rank
refresh_period	./mem/ruby/structures/RubyMemoryControl.py	/^    refresh_period = Param.Cycles(1560, "");$/;"	v	class:RubyMemoryControl
reg	./arch/x86/emulenv.hh	/^        RegIndex reg;$/;"	m	struct:X86ISA::EmulEnv
reg	./arch/x86/types.hh	/^        Bitfield<5,3> reg;$/;"	m	namespace:X86ISA
reg	./cpu/TimingExpr.py	/^    reg = Param.TimingExpr("register raw index to read")$/;"	v	class:TimingExprReadIntReg
reg	./cpu/timing_expr.hh	/^    TimingExpr *reg;$/;"	m	class:TimingExprReadIntReg
reg0	./arch/arm/insts/mult.hh	/^    IntRegIndex reg0, reg1, reg2;$/;"	m	class:ArmISA::Mult3
reg1	./arch/arm/insts/mult.hh	/^    IntRegIndex reg0, reg1, reg2;$/;"	m	class:ArmISA::Mult3
reg2	./arch/arm/insts/mult.hh	/^    IntRegIndex reg0, reg1, reg2;$/;"	m	class:ArmISA::Mult3
reg3	./arch/arm/insts/mult.hh	/^    IntRegIndex reg3;$/;"	m	class:ArmISA::Mult4
regControllerCapabilities	./dev/arm/ufs_device.hh	/^        regControllerCapabilities = 0x00,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regControllerDEVID	./dev/arm/ufs_device.hh	/^        regControllerDEVID = 0x10,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regControllerEnable	./dev/arm/ufs_device.hh	/^        regControllerEnable = 0x34,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regControllerPRODID	./dev/arm/ufs_device.hh	/^        regControllerPRODID = 0x14,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regControllerStatus	./dev/arm/ufs_device.hh	/^        regControllerStatus = 0x30,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regData32	./dev/net/sinic.hh	/^    uint32_t &regData32(Addr daddr) { return *(uint32_t *)&regData8(daddr); }$/;"	f	class:Sinic::Device
regData64	./dev/net/sinic.hh	/^    uint64_t &regData64(Addr daddr) { return *(uint64_t *)&regData8(daddr); }$/;"	f	class:Sinic::Device
regData8	./dev/net/sinic.hh	/^    uint8_t  &regData8(Addr daddr) { return *((uint8_t *)&regs + daddr); }$/;"	f	class:Sinic::Device
regDataAvailCallback	./dev/terminal.cc	/^Terminal::regDataAvailCallback(Callback *c)$/;"	f	class:Terminal
regDep	./cpu/trace/trace_cpu.hh	/^            RegDepArray regDep;$/;"	m	class:TraceCPU::ElasticDataGen::GraphNode
regEtraceListeners	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::regEtraceListeners()$/;"	f	class:ElasticTrace
regEtraceListenersEvent	./cpu/o3/probe/elastic_trace.hh	/^                 &ElasticTrace::regEtraceListeners> regEtraceListenersEvent;$/;"	m	class:ElasticTrace
regFile	./cpu/o3/cpu.hh	/^    PhysRegFile regFile;$/;"	m	class:FullO3CPU
regFile	./cpu/o3/free_list.hh	/^    PhysRegFile *regFile;$/;"	m	class:UnifiedFreeList
regFile	./cpu/o3/rename_map.hh	/^    PhysRegFile *regFile;$/;"	m	class:UnifiedRenameMap
regIdxToClass	./cpu/reg_class.hh	/^RegClass regIdxToClass(TheISA::RegIndex reg_idx,$/;"	f
regInfo	./dev/net/sinicreg.hh	/^regInfo(Addr daddr)$/;"	f	namespace:Sinic
regInterruptEnable	./dev/arm/ufs_device.hh	/^        regInterruptEnable = 0x24,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regInterruptStatus	./dev/arm/ufs_device.hh	/^        regInterruptStatus = 0x20,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regList	./arch/arm/types.hh	/^        Bitfield<15, 0>  regList;$/;"	m	namespace:ArmISA
regMode	./arch/arm/insts/mem.hh	/^    uint32_t regMode;$/;"	m	class:ArmISA::SrsOp
regNames	./arch/arm/nativetrace.cc	/^static const char *regNames[] = {$/;"	m	namespace:Trace	file:
regProbeListeners	./arch/arm/ArmPMU.py	/^    def regProbeListeners(self):$/;"	f
regProbeListeners	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::regProbeListeners()$/;"	f	class:ElasticTrace
regProbeListeners	./cpu/o3/probe/simple_trace.cc	/^void SimpleTrace::regProbeListeners()$/;"	f	class:SimpleTrace
regProbeListeners	./cpu/simple/probes/simpoint.cc	/^SimPoint::regProbeListeners()$/;"	f	class:SimPoint
regProbeListeners	./mem/probes/base.cc	/^BaseMemProbe::regProbeListeners()$/;"	f	class:BaseMemProbe
regProbeListeners	./sim/sim_object.cc	/^SimObject::regProbeListeners()$/;"	f	class:SimObject
regProbePoints	./arch/arm/tlb.cc	/^TLB::regProbePoints()$/;"	f	class:TLB
regProbePoints	./cpu/base.cc	/^BaseCPU::regProbePoints()$/;"	f	class:BaseCPU
regProbePoints	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::regProbePoints()$/;"	f	class:DefaultCommit
regProbePoints	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::regProbePoints()$/;"	f	class:FullO3CPU
regProbePoints	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::regProbePoints()$/;"	f	class:DefaultFetch
regProbePoints	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::regProbePoints()$/;"	f	class:DefaultIEW
regProbePoints	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::regProbePoints()$/;"	f	class:DefaultRename
regProbePoints	./cpu/pred/bpred_unit.cc	/^BPredUnit::regProbePoints()$/;"	f	class:BPredUnit
regProbePoints	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::regProbePoints()$/;"	f	class:AtomicSimpleCPU
regProbePoints	./mem/comm_monitor.cc	/^CommMonitor::regProbePoints()$/;"	f	class:CommMonitor
regProbePoints	./sim/sim_object.cc	/^SimObject::regProbePoints()$/;"	f	class:SimObject
regScoreBoard	./cpu/o3/scoreboard.hh	/^    std::vector<bool> regScoreBoard;$/;"	m	class:Scoreboard
regScoreboard	./cpu/o3/inst_queue.hh	/^    std::vector<bool> regScoreboard;$/;"	m	class:InstructionQueue
regSel	./dev/x86/i82094aa.hh	/^    uint8_t regSel;$/;"	m	class:X86ISA::I82094AA
regStats	./arch/alpha/kernel_stats.cc	/^Statistics::regStats(const string &_name)$/;"	f	class:AlphaISA::Kernel::Statistics
regStats	./arch/alpha/tlb.cc	/^TLB::regStats()$/;"	f	class:AlphaISA::TLB
regStats	./arch/arm/table_walker.cc	/^TableWalker::regStats()$/;"	f	class:TableWalker
regStats	./arch/arm/tlb.cc	/^TLB::regStats()$/;"	f	class:TLB
regStats	./arch/mips/tlb.cc	/^TLB::regStats()$/;"	f	class:TLB
regStats	./arch/power/tlb.cc	/^TLB::regStats()$/;"	f	class:TLB
regStats	./cpu/base.cc	/^BaseCPU::regStats()$/;"	f	class:BaseCPU
regStats	./cpu/checker/thread_context.hh	/^    void regStats(const std::string &name)$/;"	f	class:CheckerThreadContext
regStats	./cpu/kvm/base.cc	/^BaseKvmCPU::regStats()$/;"	f	class:BaseKvmCPU
regStats	./cpu/minor/cpu.cc	/^MinorCPU::regStats()$/;"	f	class:MinorCPU
regStats	./cpu/minor/stats.cc	/^MinorStats::regStats(const std::string &name, BaseCPU &baseCpu)$/;"	f	class:Minor::MinorStats
regStats	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::regStats()$/;"	f	class:DefaultCommit
regStats	./cpu/o3/cpu.cc	/^BaseO3CPU::regStats()$/;"	f	class:BaseO3CPU
regStats	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::regStats()$/;"	f	class:FullO3CPU
regStats	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::regStats()$/;"	f	class:DefaultDecode
regStats	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::regStats()$/;"	f	class:DefaultFetch
regStats	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::regStats()$/;"	f	class:DefaultIEW
regStats	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::regStats()$/;"	f	class:InstructionQueue
regStats	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::regStats()$/;"	f	class:LSQ
regStats	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::regStats()$/;"	f	class:LSQUnit
regStats	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::regStats()$/;"	f	class:MemDepUnit
regStats	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::regStats() {$/;"	f	class:ElasticTrace
regStats	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::regStats()$/;"	f	class:DefaultRename
regStats	./cpu/o3/rob_impl.hh	/^ROB<Impl>::regStats()$/;"	f	class:ROB
regStats	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::regStats(const std::string &name)$/;"	f	class:O3ThreadContext
regStats	./cpu/pred/bpred_unit.cc	/^BPredUnit::regStats()$/;"	f	class:BPredUnit
regStats	./cpu/simple/base.cc	/^BaseSimpleCPU::regStats()$/;"	f	class:BaseSimpleCPU
regStats	./cpu/simple_thread.cc	/^SimpleThread::regStats(const string &name)$/;"	f	class:SimpleThread
regStats	./cpu/testers/memtest/memtest.cc	/^MemTest::regStats()$/;"	f	class:MemTest
regStats	./cpu/testers/traffic_gen/traffic_gen.cc	/^TrafficGen::regStats()$/;"	f	class:TrafficGen
regStats	./cpu/thread_context.hh	/^    void regStats(const std::string &name) { actualTC->regStats(name); }$/;"	f	class:ProxyThreadContext
regStats	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::regStats()$/;"	f	class:TraceCPU::ElasticDataGen
regStats	./cpu/trace/trace_cpu.cc	/^TraceCPU::FixedRetryGen::regStats()$/;"	f	class:TraceCPU::FixedRetryGen
regStats	./cpu/trace/trace_cpu.cc	/^TraceCPU::regStats()$/;"	f	class:TraceCPU
regStats	./dev/arm/flash_device.cc	/^FlashDevice::regStats()$/;"	f	class:FlashDevice
regStats	./dev/arm/hdlcd.cc	/^HDLcd::regStats()$/;"	f	class:HDLcd
regStats	./dev/arm/ufs_device.cc	/^UFSHostDevice::regStats()$/;"	f	class:UFSHostDevice
regStats	./dev/net/etherdevice.cc	/^EtherDevice::regStats()$/;"	f	class:EtherDevice
regStats	./dev/net/sinic.cc	/^Device::regStats()$/;"	f	class:Sinic::Device
regStats	./dev/pci/copy_engine.cc	/^CopyEngine::regStats()$/;"	f	class:CopyEngine
regStats	./dev/storage/ide_disk.cc	/^IdeDisk::regStats()$/;"	f	class:IdeDisk
regStats	./kern/kernel_stats.cc	/^Statistics::regStats(const string &_name)$/;"	f	class:Kernel::Statistics
regStats	./mem/abstract_mem.cc	/^AbstractMemory::regStats()$/;"	f	class:AbstractMemory
regStats	./mem/cache/base.cc	/^BaseCache::regStats()$/;"	f	class:BaseCache
regStats	./mem/cache/cache.cc	/^Cache::regStats()$/;"	f	class:Cache
regStats	./mem/cache/prefetch/base.cc	/^BasePrefetcher::regStats()$/;"	f	class:BasePrefetcher
regStats	./mem/cache/prefetch/queued.cc	/^QueuedPrefetcher::regStats()$/;"	f	class:QueuedPrefetcher
regStats	./mem/cache/tags/base.cc	/^BaseTags::regStats()$/;"	f	class:BaseTags
regStats	./mem/cache/tags/fa_lru.cc	/^FALRU::regStats()$/;"	f	class:FALRU
regStats	./mem/coherent_xbar.cc	/^CoherentXBar::regStats()$/;"	f	class:CoherentXBar
regStats	./mem/comm_monitor.cc	/^CommMonitor::regStats()$/;"	f	class:CommMonitor
regStats	./mem/dram_ctrl.cc	/^DRAMCtrl::Rank::regStats()$/;"	f	class:DRAMCtrl::Rank
regStats	./mem/dram_ctrl.cc	/^DRAMCtrl::regStats()$/;"	f	class:DRAMCtrl
regStats	./mem/noncoherent_xbar.cc	/^NoncoherentXBar::regStats()$/;"	f	class:NoncoherentXBar
regStats	./mem/probes/stack_dist.cc	/^StackDistProbe::regStats()$/;"	f	class:StackDistProbe
regStats	./mem/ruby/network/garnet/BaseGarnetNetwork.cc	/^BaseGarnetNetwork::regStats()$/;"	f	class:BaseGarnetNetwork
regStats	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.cc	/^GarnetNetwork_d::regStats()$/;"	f	class:GarnetNetwork_d
regStats	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^Router_d::regStats()$/;"	f	class:Router_d
regStats	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.cc	/^GarnetNetwork::regStats()$/;"	f	class:GarnetNetwork
regStats	./mem/ruby/network/simple/SimpleNetwork.cc	/^SimpleNetwork::regStats()$/;"	f	class:SimpleNetwork
regStats	./mem/ruby/network/simple/Switch.cc	/^Switch::regStats()$/;"	f	class:Switch
regStats	./mem/ruby/network/simple/Throttle.cc	/^Throttle::regStats(string parent)$/;"	f	class:Throttle
regStats	./mem/ruby/profiler/AddressProfiler.hh	/^    void regStats(const std::string &name) {}$/;"	f	class:AddressProfiler
regStats	./mem/ruby/profiler/MemCntrlProfiler.cc	/^MemCntrlProfiler::regStats()$/;"	f	class:MemCntrlProfiler
regStats	./mem/ruby/profiler/Profiler.cc	/^Profiler::regStats(const std::string &pName)$/;"	f	class:Profiler
regStats	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::regStats()$/;"	f	class:AbstractController
regStats	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::regStats()$/;"	f	class:CacheMemory
regStats	./mem/ruby/structures/Prefetcher.cc	/^Prefetcher::regStats()$/;"	f	class:Prefetcher
regStats	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::regStats()$/;"	f	class:RubyMemoryControl
regStats	./mem/ruby/system/Sequencer.cc	/^Sequencer::regStats()$/;"	f	class:Sequencer
regStats	./mem/snoop_filter.cc	/^SnoopFilter::regStats()$/;"	f	class:SnoopFilter
regStats	./mem/xbar.cc	/^BaseXBar::Layer<SrcType,DstType>::regStats()$/;"	f	class:BaseXBar::Layer
regStats	./mem/xbar.cc	/^BaseXBar::regStats()$/;"	f	class:BaseXBar
regStats	./sim/clock_domain.cc	/^ClockDomain::regStats()$/;"	f	class:ClockDomain
regStats	./sim/process.cc	/^Process::regStats()$/;"	f	class:Process
regStats	./sim/sim_object.cc	/^SimObject::regStats()$/;"	f	class:SimObject
regStats	./sim/system.cc	/^System::regStats()$/;"	f	class:System
regStats	./sim/ticked_object.cc	/^Ticked::regStats()$/;"	f	class:Ticked
regStats	./sim/ticked_object.cc	/^TickedObject::regStats()$/;"	f	class:TickedObject
regStats	./sim/voltage_domain.cc	/^VoltageDomain::regStats()$/;"	f	class:VoltageDomain
regUFSVersion	./dev/arm/ufs_device.hh	/^        regUFSVersion = 0x08,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUICCommand	./dev/arm/ufs_device.hh	/^        regUICCommand = 0x90,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUICCommandArg1	./dev/arm/ufs_device.hh	/^        regUICCommandArg1 = 0x94,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUICCommandArg2	./dev/arm/ufs_device.hh	/^        regUICCommandArg2 = 0x98,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUICCommandArg3	./dev/arm/ufs_device.hh	/^        regUICCommandArg3 = 0x9C$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUICErrorCodeDME	./dev/arm/ufs_device.hh	/^        regUICErrorCodeDME = 0x48,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUICErrorCodeDataLinkLayer	./dev/arm/ufs_device.hh	/^        regUICErrorCodeDataLinkLayer = 0x3C,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUICErrorCodeNetworkLayer	./dev/arm/ufs_device.hh	/^        regUICErrorCodeNetworkLayer = 0x40,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUICErrorCodePHYAdapterLayer	./dev/arm/ufs_device.hh	/^        regUICErrorCodePHYAdapterLayer = 0x38,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUICErrorCodeTransportLayer	./dev/arm/ufs_device.hh	/^        regUICErrorCodeTransportLayer = 0x44,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUTPTaskREQDoorbell	./dev/arm/ufs_device.hh	/^        regUTPTaskREQDoorbell = 0x78,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUTPTaskREQListBaseH	./dev/arm/ufs_device.hh	/^        regUTPTaskREQListBaseH = 0x74,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUTPTaskREQListBaseL	./dev/arm/ufs_device.hh	/^        regUTPTaskREQListBaseL = 0x70,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUTPTaskREQListClear	./dev/arm/ufs_device.hh	/^        regUTPTaskREQListClear = 0x7C,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUTPTaskREQListRunStop	./dev/arm/ufs_device.hh	/^        regUTPTaskREQListRunStop = 0x80,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUTPTransferREQDoorbell	./dev/arm/ufs_device.hh	/^        regUTPTransferREQDoorbell = 0x58,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUTPTransferREQINTAGGControl	./dev/arm/ufs_device.hh	/^        regUTPTransferREQINTAGGControl = 0x4C,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUTPTransferREQListBaseH	./dev/arm/ufs_device.hh	/^        regUTPTransferREQListBaseH = 0x54,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUTPTransferREQListBaseL	./dev/arm/ufs_device.hh	/^        regUTPTransferREQListBaseL = 0x50,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUTPTransferREQListClear	./dev/arm/ufs_device.hh	/^        regUTPTransferREQListClear = 0x5C,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regUTPTransferREQListRunStop	./dev/arm/ufs_device.hh	/^        regUTPTransferREQListRunStop = 0x60,$/;"	e	enum:UFSHostDevice::UFSHCIRegisters
regVal	./arch/x86/isa.hh	/^        MiscReg regVal[NUM_MISCREGS];$/;"	m	class:X86ISA::ISA
regValid	./dev/net/sinicreg.hh	/^regValid(Addr daddr)$/;"	f	namespace:Sinic
reg_frame	./base/loader/coff_sym.h	/^    unsigned reg_frame : 1;     \/* true if register frame procedure *\/$/;"	m	struct:pdr
reg_pmceid	./arch/arm/pmu.hh	/^    uint64_t reg_pmceid;$/;"	m	class:ArmISA::PMU
reg_pmcnten	./arch/arm/pmu.hh	/^    MiscReg reg_pmcnten;$/;"	m	class:ArmISA::PMU
reg_pmcr	./arch/arm/pmu.hh	/^    PMCR_t reg_pmcr;$/;"	m	class:ArmISA::PMU
reg_pmcr_conf	./arch/arm/pmu.hh	/^    PMCR_t reg_pmcr_conf;$/;"	m	class:ArmISA::PMU
reg_pmcr_wr_mask	./arch/arm/pmu.cc	/^const MiscReg PMU::reg_pmcr_wr_mask = 0x39;$/;"	m	class:ArmISA::PMU	file:
reg_pmcr_wr_mask	./arch/arm/pmu.hh	/^    static const MiscReg reg_pmcr_wr_mask;$/;"	m	class:ArmISA::PMU
reg_pminten	./arch/arm/pmu.hh	/^    MiscReg reg_pminten;$/;"	m	class:ArmISA::PMU
reg_pmovsr	./arch/arm/pmu.hh	/^    MiscReg reg_pmovsr;$/;"	m	class:ArmISA::PMU
reg_pmselr	./arch/arm/pmu.hh	/^    PMSELR_t reg_pmselr;$/;"	m	class:ArmISA::PMU
reg_redir	./arch/alpha/regredir.cc	/^const int reg_redir[NumIntRegs] = {$/;"	m	namespace:AlphaISA	file:
rega_dv_disabled	./dev/mc146818.cc	/^MC146818::rega_dv_disabled(const RtcRegA &reg)$/;"	f	class:MC146818
registerAbstractController	./mem/ruby/system/RubySystem.cc	/^RubySystem::registerAbstractController(AbstractController* cntrl)$/;"	f	class:RubySystem
registerDevice	./dev/arm/rv_ctrl.cc	/^RealViewCtrl::registerDevice(DeviceFunc func, uint8_t site, uint8_t pos,$/;"	f	class:RealViewCtrl
registerDevice	./dev/pci/host.cc	/^PciHost::registerDevice(PciDevice *device, PciBusAddr bus_addr, PciIntPin pin)$/;"	f	class:PciHost
registerDrainable	./sim/drain.cc	/^DrainManager::registerDrainable(Drainable *obj)$/;"	f	class:DrainManager
registerDumpCallback	./base/statistics.cc	/^registerDumpCallback(Callback *cb)$/;"	f	namespace:Stats
registerExitCallback	./sim/core.cc	/^registerExitCallback(Callback *callback)$/;"	f
registerGlobalSym	./mem/slicc/symbols/SymbolTable.py	/^    def registerGlobalSym(self, ident, symbol):$/;"	m	class:SymbolTable
registerHandler	./mem/external_master.cc	/^ExternalMaster::registerHandler(const std::string &handler_name,$/;"	f	class:ExternalMaster
registerHandler	./mem/external_slave.cc	/^ExternalSlave::registerHandler(const std::string &handler_name,$/;"	f	class:ExternalSlave
registerHandlers	./base/statistics.cc	/^registerHandlers(Handler reset_handler, Handler dump_handler)$/;"	f	namespace:Stats
registerKickCallback	./dev/virtio/base.hh	/^    void registerKickCallback(Callback *c) {$/;"	f	class:VirtIODeviceBase
registerNetwork	./mem/ruby/system/RubySystem.cc	/^RubySystem::registerNetwork(Network* network_ptr)$/;"	f	class:RubySystem
registerPythonStatsHandlers	./sim/stat_register.cc	/^void registerPythonStatsHandlers()$/;"	f	namespace:Stats
registerQueue	./dev/virtio/base.cc	/^VirtIODeviceBase::registerQueue(VirtQueue &queue)$/;"	f	class:VirtIODeviceBase
registerResetCallback	./base/statistics.cc	/^registerResetCallback(Callback *cb)$/;"	f	namespace:Stats
registerSrcClockDom	./sim/voltage_domain.hh	/^    void registerSrcClockDom(SrcClockDomain *src_clock_dom) {$/;"	f	class:VoltageDomain
registerSym	./mem/slicc/symbols/SymbolTable.py	/^    def registerSym(self, id, sym):$/;"	m	class:SymbolTable
registerThreadContext	./sim/system.cc	/^System::registerThreadContext(ThreadContext *tc, ContextID assigned)$/;"	f	class:System
registerThreadContexts	./cpu/base.cc	/^BaseCPU::registerThreadContexts()$/;"	f	class:BaseCPU
registerWithClockDomain	./sim/clock_domain.hh	/^    void registerWithClockDomain(Clocked *c)$/;"	f	class:ClockDomain
registers	./kern/tru64/tru64.hh	/^        } registers;$/;"	m	struct:Tru64::nxm_thread_attr	typeref:struct:Tru64::nxm_thread_attr::__anon106
registers	./mem/cache/mshr_queue.hh	/^    std::vector<MSHR> registers;$/;"	m	class:MSHRQueue
regm	./arch/x86/emulenv.hh	/^        RegIndex regm;$/;"	m	struct:X86ISA::EmulEnv
regmask	./base/loader/coff_sym.h	/^    coff_uint   regmask;        \/* save register mask *\/$/;"	m	struct:pdr
regoffset	./base/loader/coff_sym.h	/^    coff_int    regoffset;      \/* save register offset *\/$/;"	m	struct:pdr
regs	./arch/x86/interrupts.hh	/^    uint32_t regs[NUM_APIC_REGS];$/;"	m	class:X86ISA::Interrupts
regs	./dev/net/i8254xGBe.hh	/^    iGbReg::Regs regs;$/;"	m	class:IGbE
regs	./dev/net/ns_gige.hh	/^    dp_regs regs;$/;"	m	class:NSGigE
regs	./dev/net/sinic.hh	/^    } regs;$/;"	m	class:Sinic::Device	typeref:struct:Sinic::Device::__anon11
regs	./dev/pci/copy_engine.hh	/^    CopyEngineReg::Regs regs;$/;"	m	class:CopyEngine
regs	./dev/x86/cmos.hh	/^    uint8_t regs[numRegs];$/;"	m	class:X86ISA::Cmos
regsReady	./cpu/o3/mem_dep_unit.hh	/^        bool regsReady;$/;"	m	class:MemDepUnit::MemDepEntry
regsReady	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::regsReady(DynInstPtr &inst)$/;"	f	class:MemDepUnit
regsReset	./dev/net/ns_gige.cc	/^NSGigE::regsReset()$/;"	f	class:NSGigE
relativeTick	./dev/pixelpump.hh	/^        Tick relativeTick;$/;"	m	class:BasePixelPump::PixelEvent
release	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::HardwareResource::release(const GraphNode* done_node)$/;"	f	class:TraceCPU::ElasticDataGen::HardwareResource
release	./kern/linux/linux.hh	/^        char release[_SYS_NMLN];        \/\/!< OS release.$/;"	m	struct:Linux::utsname
release	./kern/operatingsystem.hh	/^        char release[_SYS_NMLN];        \/\/!< OS release.$/;"	m	struct:OperatingSystem::__anon92
release	./kern/solaris/solaris.hh	/^        char release[_SYS_NMLN];        \/\/!< OS release.$/;"	m	struct:Solaris::utsname
release	./kern/tru64/tru64.hh	/^        char release[_SYS_NMLN];        \/\/!< OS release.$/;"	m	struct:Tru64::utsname
release	./mem/simple_mem.cc	/^SimpleMemory::release()$/;"	f	class:SimpleMemory
releaseDate	./arch/x86/bios/smbios.hh	/^    uint8_t releaseDate;$/;"	m	class:X86ISA::SMBios::BiosInformation
releaseEvent	./mem/simple_mem.hh	/^    EventWrapper<SimpleMemory, &SimpleMemory::release> releaseEvent;$/;"	m	class:SimpleMemory
releaseEvent	./mem/xbar.hh	/^        EventWrapper<Layer, &Layer::releaseLayer> releaseEvent;$/;"	m	class:BaseXBar::Layer
releaseLayer	./mem/xbar.cc	/^BaseXBar::Layer<SrcType,DstType>::releaseLayer()$/;"	f	class:BaseXBar::Layer
releaseStoreBuffer	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::HardwareResource::releaseStoreBuffer()$/;"	f	class:TraceCPU::ElasticDataGen::HardwareResource
release_date	./arch/x86/bios/SMBios.py	/^    release_date = Param.String("06\/08\/2008", "release date")$/;"	v	class:X86SMBiosBiosInformation
release_vc	./mem/ruby/network/garnet/flexible-pipeline/FlexibleConsumer.hh	/^    virtual void release_vc(int out_port, int vc, Cycles release_time) {}$/;"	f	class:FlexibleConsumer
release_vc	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.cc	/^NetworkInterface::release_vc(int out_port, int vc, Cycles release_time)$/;"	f	class:NetworkInterface
release_vc	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::release_vc(int out_port, int vc, Cycles release_time)$/;"	f	class:Router
release_vc_link	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.cc	/^NetworkLink::release_vc_link(int vc, Cycles release_time)$/;"	f	class:NetworkLink
reloadRegMap	./arch/sparc/isa.cc	/^ISA::reloadRegMap()$/;"	f	class:SparcISA::ISA
remainingSpace	./cpu/minor/buffers.hh	/^    remainingSpace() const$/;"	f	class:Minor::Queue
remap	./dev/arm/flash_device.cc	/^FlashDevice::remap(uint64_t logic_page_addr)$/;"	f	class:FlashDevice
remap	./mem/multi_level_page_table_impl.hh	/^MultiLevelPageTable<ISAOps>::remap(Addr vaddr, int64_t size, Addr new_vaddr)$/;"	f	class:MultiLevelPageTable
remap	./mem/page_table.cc	/^FuncPageTable::remap(Addr vaddr, int64_t size, Addr new_vaddr)$/;"	f	class:FuncPageTable
remapAddr	./mem/addr_mapper.cc	/^RangeAddrMapper::remapAddr(Addr addr) const$/;"	f	class:RangeAddrMapper
remappedRanges	./mem/addr_mapper.hh	/^    std::vector<AddrRange> remappedRanges;$/;"	m	class:RangeAddrMapper
remapped_ranges	./mem/AddrMapper.py	/^    remapped_ranges = VectorParam.AddrRange($/;"	v	class:RangeAddrMapper
remote	./dev/x86/i8042.hh	/^        Bitfield<6> remote;$/;"	m	class:X86ISA::PS2Mouse
remoteGDB	./sim/system.hh	/^    std::vector<BaseRemoteGDB *> remoteGDB;$/;"	m	class:System
remoteIRR	./arch/x86/interrupts.hh	/^        Bitfield<14> remoteIRR;$/;"	m	class:X86ISA::Interrupts
remoteIRR	./dev/x86/i82094aa.hh	/^        Bitfield<14> remoteIRR;$/;"	m	class:X86ISA::I82094AA
remote_gdb_base_port	./sim/debug.cc	/^int remote_gdb_base_port = 7000;$/;"	v
remove	./base/output.cc	/^OutputDirectory::remove(const string &name, bool recursive)$/;"	f	class:OutputDirectory
remove	./base/pollevent.cc	/^PollQueue::remove(PollEvent *event)$/;"	f	class:PollQueue
remove	./base/trie.hh	/^    remove(Handle handle)$/;"	f	class:Trie
remove	./base/trie.hh	/^    remove(Key key)$/;"	f	class:Trie
remove	./cpu/o3/dep_graph.hh	/^DependencyGraph<DynInstPtr>::remove(PhysRegIndex idx,$/;"	f	class:DependencyGraph
remove	./cpu/pc_event.cc	/^PCEventQueue::remove(PCEvent *event)$/;"	f	class:PCEventQueue
remove	./cpu/pc_event.hh	/^    bool remove;$/;"	m	class:BreakPCEvent
remove	./cpu/pc_event.hh	/^PCEvent::remove()$/;"	f	class:PCEvent
remove	./dev/net/pktfifo.hh	/^    void remove(iterator i)$/;"	f	class:PacketFifo
remove	./mem/ruby/common/NetDest.cc	/^NetDest::remove(MachineID oldElement)$/;"	f	class:NetDest
remove	./mem/ruby/common/Set.hh	/^    remove(NodeID index)$/;"	f	class:Set
remove	./sim/eventq.cc	/^EventQueue::remove(Event *event)$/;"	f	class:EventQueue
removeDepOnInst	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::GraphNode::removeDepOnInst(NodeSeqNum done_seq_num)$/;"	f	class:TraceCPU::ElasticDataGen::GraphNode
removeEntries	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::removeEntries(ThreadID tid)$/;"	f	class:LSQ
removeFromHistory	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::removeFromHistory(InstSeqNum inst_seq_num, ThreadID tid)$/;"	f	class:DefaultRename
removeFrontInst	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::removeFrontInst(DynInstPtr &inst)$/;"	f	class:FullO3CPU
removeHardBreak	./base/remote_gdb.cc	/^BaseRemoteGDB::removeHardBreak(Addr addr, size_t len)$/;"	f	class:BaseRemoteGDB
removeInLSQ	./cpu/base_dyn_inst.hh	/^    void removeInLSQ() { status.reset(LsqEntry); }$/;"	f	class:BaseDynInst
removeInstsNotInROB	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::removeInstsNotInROB(ThreadID tid)$/;"	f	class:FullO3CPU
removeInstsThisCycle	./cpu/o3/cpu.hh	/^    bool removeInstsThisCycle;$/;"	m	class:FullO3CPU
removeInstsUntil	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::removeInstsUntil(const InstSeqNum &seq_num, ThreadID tid)$/;"	f	class:FullO3CPU
removeItem	./sim/eventq.cc	/^Event::removeItem(Event *event, Event *top)$/;"	f	class:Event
removeList	./cpu/o3/cpu.hh	/^    std::queue<ListIt> removeList;$/;"	m	class:FullO3CPU
removeListener	./sim/probe/probe.cc	/^ProbeManager::removeListener(std::string pointName, ProbeListener &listener)$/;"	f	class:ProbeManager
removeListener	./sim/probe/probe.hh	/^    void removeListener(ProbeListener *l)$/;"	f	class:ProbePointArg
removeNetDest	./mem/ruby/common/NetDest.cc	/^NetDest::removeNetDest(const NetDest& netDest)$/;"	f	class:NetDest
removeRegDep	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::GraphNode::removeRegDep(NodeSeqNum reg_dep)$/;"	f	class:TraceCPU::ElasticDataGen::GraphNode
removeRegDepMapEntry	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::removeRegDepMapEntry(const SeqNumRegPair &inst_reg_pair)$/;"	f	class:ElasticTrace
removeRobDep	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::GraphNode::removeRobDep(NodeSeqNum rob_dep)$/;"	f	class:TraceCPU::ElasticDataGen::GraphNode
removeSet	./mem/ruby/common/Set.hh	/^    removeSet(const Set& obj)$/;"	f	class:Set
removeSoftBreak	./base/remote_gdb.cc	/^BaseRemoteGDB::removeSoftBreak(Addr addr, size_t len)$/;"	f	class:BaseRemoteGDB
removeThread	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::removeThread(ThreadID tid)$/;"	f	class:FullO3CPU
rename	./cpu/o3/cpu.hh	/^    typename CPUPolicy::Rename rename;$/;"	m	class:FullO3CPU
rename	./cpu/o3/decode.hh	/^        bool rename;$/;"	m	struct:DefaultDecode::Stalls
rename	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::rename(bool &status_change, ThreadID tid)$/;"	f	class:DefaultRename
rename	./cpu/o3/rename_map.cc	/^SimpleRenameMap::rename(RegIndex arch_reg)$/;"	f	class:SimpleRenameMap
rename	./cpu/o3/rename_map.cc	/^UnifiedRenameMap::rename(RegIndex arch_reg)$/;"	f	class:UnifiedRenameMap
rename	./kern/tru64/tru64_syscalls.hh	/^        rename = 128,$/;"	e	enum:SystemCalls::__anon102
rename	./sim/cxx_manager.cc	/^CxxConfigManager::rename(const std::string &from_name)$/;"	f	class:CxxConfigManager
renameBlock	./cpu/o3/comm.hh	/^    bool renameBlock[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
renameBlockCycles	./cpu/o3/rename.hh	/^    Stats::Scalar renameBlockCycles;$/;"	m	class:DefaultRename
renameCC	./cpu/o3/rename_map.hh	/^    RenameInfo renameCC(RegIndex rel_arch_reg)$/;"	f	class:UnifiedRenameMap
renameComm	./cpu/o3/comm.hh	/^    struct renameComm {$/;"	s	struct:TimeBufStruct
renameCommittedMaps	./cpu/o3/rename.hh	/^    Stats::Scalar renameCommittedMaps;$/;"	m	class:DefaultRename
renameDestReg	./cpu/base_dyn_inst.hh	/^    void renameDestReg(int idx,$/;"	f	class:BaseDynInst
renameDestRegs	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::renameDestRegs(DynInstPtr &inst, ThreadID tid)$/;"	f	class:DefaultRename
renameFloat	./cpu/o3/rename_map.hh	/^    RenameInfo renameFloat(RegIndex rel_arch_reg)$/;"	f	class:UnifiedRenameMap
renameFullRegistersEvents	./cpu/o3/rename.hh	/^    Stats::Scalar renameFullRegistersEvents;$/;"	m	class:DefaultRename
renameFunc	./sim/syscall_emul.cc	/^renameFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)$/;"	f
renameIQFullEvents	./cpu/o3/rename.hh	/^    Stats::Scalar renameIQFullEvents;$/;"	m	class:DefaultRename
renameIdleCycles	./cpu/o3/rename.hh	/^    Stats::Scalar renameIdleCycles;$/;"	m	class:DefaultRename
renameInfo	./cpu/o3/comm.hh	/^    renameComm renameInfo[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
renameInsts	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::renameInsts(ThreadID tid)$/;"	f	class:DefaultRename
renameInt	./cpu/o3/rename_map.hh	/^    RenameInfo renameInt(RegIndex rel_arch_reg)$/;"	f	class:UnifiedRenameMap
renameLQFullEvents	./cpu/o3/rename.hh	/^    Stats::Scalar renameLQFullEvents;$/;"	m	class:DefaultRename
renameMap	./cpu/o3/commit.hh	/^    RenameMap *renameMap[Impl::MaxThreads];$/;"	m	class:DefaultCommit
renameMap	./cpu/o3/cpu.hh	/^    typename CPUPolicy::RenameMap renameMap[Impl::MaxThreads];$/;"	m	class:FullO3CPU
renameMap	./cpu/o3/rename.hh	/^    RenameMap *renameMap[Impl::MaxThreads];$/;"	m	class:DefaultRename
renameMisc	./cpu/o3/rename_map.hh	/^    RenameInfo renameMisc(RegIndex rel_arch_reg)$/;"	f	class:UnifiedRenameMap
renameQueue	./cpu/o3/commit.hh	/^    TimeBuffer<RenameStruct> *renameQueue;$/;"	m	class:DefaultCommit
renameQueue	./cpu/o3/cpu.hh	/^    TimeBuffer<RenameStruct> renameQueue;$/;"	m	class:FullO3CPU
renameQueue	./cpu/o3/iew.hh	/^    TimeBuffer<RenameStruct> *renameQueue;$/;"	m	class:DefaultIEW
renameQueue	./cpu/o3/rename.hh	/^    TimeBuffer<RenameStruct> *renameQueue;$/;"	m	class:DefaultRename
renameROBFullEvents	./cpu/o3/rename.hh	/^    Stats::Scalar renameROBFullEvents;$/;"	m	class:DefaultRename
renameRenameLookups	./cpu/o3/rename.hh	/^    Stats::Scalar renameRenameLookups;$/;"	m	class:DefaultRename
renameRenamedInsts	./cpu/o3/rename.hh	/^    Stats::Scalar renameRenamedInsts;$/;"	m	class:DefaultRename
renameRenamedOperands	./cpu/o3/rename.hh	/^    Stats::Scalar renameRenamedOperands;$/;"	m	class:DefaultRename
renameRunCycles	./cpu/o3/rename.hh	/^    Stats::Scalar renameRunCycles;$/;"	m	class:DefaultRename
renameSQFullEvents	./cpu/o3/rename.hh	/^    Stats::Scalar renameSQFullEvents;$/;"	m	class:DefaultRename
renameSerializeStallCycles	./cpu/o3/rename.hh	/^    Stats::Scalar renameSerializeStallCycles;$/;"	m	class:DefaultRename
renameSkidInsts	./cpu/o3/rename.hh	/^    Stats::Scalar renameSkidInsts;$/;"	m	class:DefaultRename
renameSquashCycles	./cpu/o3/rename.hh	/^    Stats::Scalar renameSquashCycles;$/;"	m	class:DefaultRename
renameSquashedInsts	./cpu/o3/rename.hh	/^    Stats::Scalar renameSquashedInsts;$/;"	m	class:DefaultRename
renameSrcReg	./cpu/base_dyn_inst.hh	/^    void renameSrcReg(int idx, PhysRegIndex renamed_src)$/;"	f	class:BaseDynInst
renameSrcRegs	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::renameSrcRegs(DynInstPtr &inst, ThreadID tid)$/;"	f	class:DefaultRename
renameStatus	./cpu/o3/rename.hh	/^    ThreadStatus renameStatus[Impl::MaxThreads];$/;"	m	class:DefaultRename
renameTick	./cpu/o3/dyn_inst.hh	/^    int32_t renameTick;  \/\/ instruction enters rename phase$/;"	m	class:BaseO3DynInst
renameToDecodeDelay	./cpu/o3/O3CPU.py	/^    renameToDecodeDelay = Param.Cycles(1, "Rename to decode delay")$/;"	v	class:DerivO3CPU
renameToDecodeDelay	./cpu/o3/decode.hh	/^    Cycles renameToDecodeDelay;$/;"	m	class:DefaultDecode
renameToFetchDelay	./cpu/o3/O3CPU.py	/^    renameToFetchDelay = Param.Cycles(1 ,"Rename to fetch delay")$/;"	v	class:DerivO3CPU
renameToFetchDelay	./cpu/o3/fetch.hh	/^    Cycles renameToFetchDelay;$/;"	m	class:DefaultFetch
renameToIEWDelay	./cpu/o3/O3CPU.py	/^    renameToIEWDelay = Param.Cycles(2, "Rename to "$/;"	v	class:DerivO3CPU
renameToIEWDelay	./cpu/o3/iew.hh	/^    Cycles renameToIEWDelay;$/;"	m	class:DefaultIEW
renameToROBDelay	./cpu/o3/O3CPU.py	/^    renameToROBDelay = Param.Cycles(1, "Rename to reorder buffer delay")$/;"	v	class:DerivO3CPU
renameToROBDelay	./cpu/o3/commit.hh	/^    const Cycles renameToROBDelay;$/;"	m	class:DefaultCommit
renameUnblock	./cpu/o3/comm.hh	/^    bool renameUnblock[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
renameUnblockCycles	./cpu/o3/rename.hh	/^    Stats::Scalar renameUnblockCycles;$/;"	m	class:DefaultRename
renameUndoneMaps	./cpu/o3/rename.hh	/^    Stats::Scalar renameUndoneMaps;$/;"	m	class:DefaultRename
renameWidth	./cpu/o3/O3CPU.py	/^    renameWidth = Param.Unsigned(8, "Rename width")$/;"	v	class:DerivO3CPU
renameWidth	./cpu/o3/commit.hh	/^    const unsigned renameWidth;$/;"	m	class:DefaultCommit
renameWidth	./cpu/o3/rename.hh	/^    unsigned renameWidth;$/;"	m	class:DefaultRename
renameatFunc	./sim/syscall_emul.hh	/^renameatFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
renamedDestRegIdx	./cpu/base_dyn_inst.hh	/^    PhysRegIndex renamedDestRegIdx(int idx) const$/;"	f	class:BaseDynInst
renamedSerializing	./cpu/o3/rename.hh	/^    Stats::Scalar renamedSerializing;$/;"	m	class:DefaultRename
renamedSrcRegIdx	./cpu/base_dyn_inst.hh	/^    PhysRegIndex renamedSrcRegIdx(int idx) const$/;"	f	class:BaseDynInst
renamedTempSerializing	./cpu/o3/rename.hh	/^    Stats::Scalar renamedTempSerializing;$/;"	m	class:DefaultRename
renamings	./sim/cxx_manager.hh	/^    std::list<Renaming> renamings;$/;"	m	class:CxxConfigManager
renderPixels	./dev/pixelpump.cc	/^BasePixelPump::renderPixels()$/;"	f	class:BasePixelPump
reorderQueue	./mem/dram_ctrl.cc	/^DRAMCtrl::reorderQueue(std::deque<DRAMPacket*>& queue, Tick extra_col_delay)$/;"	f	class:DRAMCtrl
rep	./arch/x86/types.hh	/^        Bitfield<6> rep;$/;"	m	namespace:X86ISA
repeat	./sim/global_event.hh	/^    Tick repeat;$/;"	m	class:GlobalSyncEvent
repeat	./sim/sim_events.hh	/^    Tick repeat;$/;"	m	class:GlobalSimLoopExitEvent
repeat	./sim/sim_events.hh	/^    Tick repeat;$/;"	m	class:LocalSimLoopExitEvent
repeat	./sim/stat_control.cc	/^    Tick repeat;$/;"	m	class:Stats::StatEvent	file:
repeatEvent	./cpu/base.hh	/^    void repeatEvent(bool repeat) { _repeatEvent = repeat; }$/;"	f	class:CPUProgressEvent
replace	./arch/isa_parser.py	/^        def replace(matchobj):$/;"	f	function:ISAParser.read_and_flatten
replaceBits	./base/bitfield.hh	/^replaceBits(T& val, int bit, B bit_val)$/;"	f
replaceBits	./base/bitfield.hh	/^replaceBits(T& val, int first, int last, B bit_val)$/;"	f
replaceHead	./sim/eventq.cc	/^EventQueue::replaceHead(Event* s)$/;"	f	class:EventQueue
replaceThreadContext	./arch/null/remote_gdb.hh	/^    void replaceThreadContext(ThreadContext *tc) {}$/;"	f	class:BaseRemoteGDB
replaceThreadContext	./base/remote_gdb.hh	/^    void replaceThreadContext(ThreadContext *tc) { context = tc; }$/;"	f	class:BaseRemoteGDB
replaceThreadContext	./cpu/cpuevent.cc	/^CpuEvent::replaceThreadContext(ThreadContext *oldTc, ThreadContext *newTc)$/;"	f	class:CpuEvent
replaceThreadContext	./sim/system.cc	/^System::replaceThreadContext(ThreadContext *tc, ContextID context_id)$/;"	f	class:System
replaceUpgrade	./mem/cache/mshr.cc	/^replaceUpgrade(PacketPtr pkt)$/;"	f	file:
replaceUpgrades	./mem/cache/mshr.cc	/^MSHR::TargetList::replaceUpgrades()$/;"	f	class:MSHR::TargetList
replace_include	./arch/isa_parser.py	/^    def replace_include(self, matchobj, dirname):$/;"	m	class:ISAParser
replacement_policy	./mem/ruby/structures/RubyCache.py	/^    replacement_policy = Param.ReplacementPolicy(PseudoLRUReplacementPolicy(),$/;"	v	class:RubyCache
replacements	./mem/cache/tags/base.hh	/^    Stats::Vector replacements;$/;"	m	class:BaseTags
replay	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::replay()$/;"	f	class:MemDepUnit
replayMemInst	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::replayMemInst(DynInstPtr &inst)$/;"	f	class:DefaultIEW
replayMemInst	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::replayMemInst(DynInstPtr &replay_inst)$/;"	f	class:InstructionQueue
replicate	./arch/arm/insts/macromem.hh	/^    bool replicate;$/;"	m	class:ArmISA::MicroNeonMixLaneOp64
replicate	./arch/arm/insts/macromem.hh	/^    bool wb, replicate;$/;"	m	class:ArmISA::VldSingleOp64
replicate	./arch/arm/insts/macromem.hh	/^    bool wb, replicate;$/;"	m	class:ArmISA::VstSingleOp64
repne	./arch/x86/types.hh	/^        Bitfield<7> repne;$/;"	m	namespace:X86ISA
reportData	./cpu/minor/buffers.hh	/^    reportData(std::ostream &os, const ElemType &elem)$/;"	f	class:Minor::ReportTraitsAdaptor
reportData	./cpu/minor/buffers.hh	/^    reportData(std::ostream &os, const PtrType &elem)$/;"	f	class:Minor::ReportTraitsPtrAdaptor
reportData	./cpu/minor/dyn_inst.cc	/^MinorDynInst::reportData(std::ostream &os) const$/;"	f	class:Minor::MinorDynInst
reportData	./cpu/minor/fetch1.cc	/^Fetch1::FetchRequest::reportData(std::ostream &os) const$/;"	f	class:Minor::Fetch1::FetchRequest
reportData	./cpu/minor/func_unit.cc	/^QueuedInst::reportData(std::ostream &os) const$/;"	f	class:Minor::QueuedInst
reportData	./cpu/minor/lsq.cc	/^LSQ::LSQRequest::reportData(std::ostream &os) const$/;"	f	class:Minor::LSQ::LSQRequest
reportData	./cpu/minor/pipe_data.cc	/^BranchData::reportData(std::ostream &os) const$/;"	f	class:Minor::BranchData
reportData	./cpu/minor/pipe_data.cc	/^ForwardInstData::reportData(std::ostream &os) const$/;"	f	class:Minor::ForwardInstData
reportData	./cpu/minor/pipe_data.cc	/^ForwardLineData::reportData(std::ostream &os) const$/;"	f	class:Minor::ForwardLineData
reportLeft	./cpu/minor/buffers.hh	/^    int reportLeft, reportRight;$/;"	m	class:Minor::MinorBuffer
reportRight	./cpu/minor/buffers.hh	/^    int reportLeft, reportRight;$/;"	m	class:Minor::MinorBuffer
req	./arch/arm/stage2_lookup.hh	/^    Request                 req;$/;"	m	class:ArmISA::Stage2LookUp
req	./arch/arm/stage2_mmu.hh	/^        Request   req;$/;"	m	class:ArmISA::Stage2MMU::Stage2Translation
req	./arch/arm/table_walker.hh	/^        RequestPtr req;$/;"	m	class:ArmISA::TableWalker::WalkerState
req	./arch/x86/pagetable_walker.hh	/^            RequestPtr req;$/;"	m	class:X86ISA::Walker::WalkerState
req	./cpu/o3/fetch.hh	/^        RequestPtr req;$/;"	m	class:DefaultFetch::FinishTranslationEvent
req	./cpu/o3/lsq_unit.hh	/^        RequestPtr req;$/;"	m	struct:LSQUnit::SQEntry
req	./mem/packet.hh	/^    const RequestPtr req;$/;"	m	class:Packet
reqFlags	./arch/alpha/faults.hh	/^    Request::Flags reqFlags;$/;"	m	class:AlphaISA::DtbFault
reqFlags	./cpu/o3/probe/elastic_trace.hh	/^        Request::FlagsType reqFlags;$/;"	m	struct:ElasticTrace::TraceInfo
reqFlags	./dev/dma_device.hh	/^    const Request::Flags reqFlags;$/;"	m	class:DmaReadFifo
reqIPI	./dev/alpha/tsunami_cchip.cc	/^TsunamiCChip::reqIPI(uint64_t ipreq)$/;"	f	class:TsunamiCChip
reqIPI	./dev/mips/malta_cchip.cc	/^MaltaCChip::reqIPI(uint64_t ipreq)$/;"	f	class:MaltaCChip
reqLayers	./mem/coherent_xbar.hh	/^    std::vector<ReqLayer*> reqLayers;$/;"	m	class:CoherentXBar
reqLayers	./mem/noncoherent_xbar.hh	/^    std::vector<ReqLayer*> reqLayers;$/;"	m	class:NoncoherentXBar
reqLookupResult	./mem/snoop_filter.hh	/^    SnoopFilterCache::iterator reqLookupResult;$/;"	m	class:SnoopFilter
reqPos	./dev/arm/ufs_device.hh	/^        int reqPos;$/;"	m	struct:UFSHostDevice::SCSIResumeInfo
reqPos	./dev/arm/ufs_device.hh	/^        uint32_t reqPos;$/;"	m	struct:UFSHostDevice::transferDoneInfo
reqQueue	./mem/mport.hh	/^    ReqPacketQueue reqQueue;$/;"	m	class:MessageMasterPort
reqQueue	./mem/qport.hh	/^    ReqPacketQueue &reqQueue;$/;"	m	class:QueuedMasterPort
reqQueue	./mem/ruby/slicc_interface/AbstractController.hh	/^        ReqPacketQueue reqQueue;$/;"	m	class:AbstractController::MemoryPort
reqQueue	./mem/ruby/system/RubyPort.hh	/^        ReqPacketQueue reqQueue;$/;"	m	class:RubyPort::MemMasterPort
reqQueue	./mem/ruby/system/RubyPort.hh	/^        ReqPacketQueue reqQueue;$/;"	m	class:RubyPort::PioMasterPort
reqQueueFull	./mem/bridge.cc	/^Bridge::BridgeMasterPort::reqQueueFull() const$/;"	f	class:Bridge::BridgeMasterPort
reqQueueFull	./mem/serial_link.cc	/^SerialLink::SerialLinkMasterPort::reqQueueFull() const$/;"	f	class:SerialLink::SerialLinkMasterPort
reqQueueLimit	./mem/bridge.hh	/^        const unsigned int reqQueueLimit;$/;"	m	class:Bridge::BridgeMasterPort
reqQueueLimit	./mem/serial_link.hh	/^        const unsigned int reqQueueLimit;$/;"	m	class:SerialLink::SerialLinkMasterPort
reqToVerify	./cpu/base_dyn_inst.hh	/^    RequestPtr reqToVerify;$/;"	m	class:BaseDynInst
req_size	./mem/Bridge.py	/^    req_size = Param.Unsigned(16, "The number of requests to buffer")$/;"	v	class:Bridge
req_size	./mem/SerialLink.py	/^    req_size = Param.Unsigned(16, "The number of requests to buffer")$/;"	v	class:SerialLink
request	./cpu/minor/fetch1.hh	/^        Request request;$/;"	m	class:Minor::Fetch1::FetchRequest
request	./cpu/minor/lsq.hh	/^        Request request;$/;"	m	class:Minor::LSQ::LSQRequest
requestCkpt	./dev/net/dist_iface.cc	/^DistIface::SyncNode::requestCkpt(ReqType req)$/;"	f	class:DistIface::SyncNode
requestCompleted	./mem/ruby/structures/Prefetcher.hh	/^        std::bitset<MAX_PF_INFLIGHT> requestCompleted;$/;"	m	class:PrefetchEntry
requestExit	./dev/net/dist_iface.cc	/^DistIface::SyncNode::requestExit(ReqType req)$/;"	f	class:DistIface::SyncNode
requestFbUpdate	./base/vnc/vncserver.cc	/^VncServer::requestFbUpdate()$/;"	f	class:VncServer
requestHandler	./dev/arm/ufs_device.cc	/^UFSHostDevice::requestHandler()$/;"	f	class:UFSHostDevice
requestInterrupt	./arch/x86/interrupts.cc	/^X86ISA::Interrupts::requestInterrupt(uint8_t vector,$/;"	f	class:X86ISA::Interrupts
requestInterrupt	./dev/x86/i8259.cc	/^X86ISA::I8259::requestInterrupt(int line)$/;"	f	class:X86ISA::I8259
requestIssued	./mem/ruby/structures/Prefetcher.hh	/^        std::bitset<MAX_PF_INFLIGHT> requestIssued;$/;"	m	class:PrefetchEntry
requestOut	./dev/arm/ufs_device.hh	/^        struct UTPUPIURSP requestOut;$/;"	m	struct:UFSHostDevice::transferDoneInfo	typeref:struct:UFSHostDevice::transferDoneInfo::UTPUPIURSP
requestSize	./dev/dma_device.hh	/^        size_t requestSize() const { return _requestSize; }$/;"	f	class:DmaReadFifo::DmaDoneEvent
request_out_datain	./dev/arm/ufs_device.hh	/^    struct SCSIReply request_out_datain;$/;"	m	class:UFSHostDevice	typeref:struct:UFSHostDevice::SCSIReply
request_vc	./mem/ruby/network/garnet/flexible-pipeline/FlexibleConsumer.hh	/^    virtual void request_vc(int vc, int in_port, NetDest destination,$/;"	f	class:FlexibleConsumer
request_vc	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.cc	/^NetworkInterface::request_vc(int in_vc, int in_port, NetDest destination,$/;"	f	class:NetworkInterface
request_vc	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::request_vc(int in_vc, int in_port, NetDest destination,$/;"	f	class:Router
request_vc_link	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.cc	/^NetworkLink::request_vc_link(int vc, NetDest destination, Cycles request_time)$/;"	f	class:NetworkLink
requested	./mem/snoop_filter.hh	/^        SnoopMask requested;$/;"	m	struct:SnoopFilter::SnoopItem
requests	./cpu/minor/fetch1.hh	/^    FetchQueue requests;$/;"	m	class:Minor::Fetch1
requests	./cpu/minor/lsq.hh	/^    LSQQueue requests;$/;"	m	class:Minor::LSQ
requests_to_complete	./cpu/testers/directedtest/RubyDirectedTester.py	/^    requests_to_complete = Param.Int("checks to complete")$/;"	v	class:RubyDirectedTester
require_caches	./cpu/BaseCPU.py	/^    def require_caches(cls):$/;"	f
require_caches	./cpu/kvm/BaseKvmCPU.py	/^    def require_caches(cls):$/;"	f
require_caches	./cpu/minor/MinorCPU.py	/^    def require_caches(cls):$/;"	m	class:MinorCPU
require_caches	./cpu/o3/O3CPU.py	/^    def require_caches(cls):$/;"	m	class:DerivO3CPU
require_caches	./cpu/trace/TraceCPU.py	/^    def require_caches(cls):$/;"	m	class:TraceCPU
res	./cpu/minor/lsq.hh	/^        uint64_t *res;$/;"	m	class:Minor::LSQ::LSQRequest
res	./cpu/translation.hh	/^    uint64_t *res;$/;"	m	class:WholeTranslationState
res0_23_22	./arch/arm/miscregs.hh	/^        Bitfield<23, 22> res0_23_22;$/;"	m	namespace:ArmISA
res1	./arch/mips/linux/hwrpb.hh	/^        uint64_ta res1, res2;$/;"	m	struct:Linux::pcb_struct
res1_13_12_el2	./arch/arm/miscregs.hh	/^        Bitfield<13, 12> res1_13_12_el2;$/;"	m	namespace:ArmISA
res1_9_0_el2	./arch/arm/miscregs.hh	/^        Bitfield<9, 0> res1_9_0_el2;$/;"	m	namespace:ArmISA
res2	./arch/mips/linux/hwrpb.hh	/^        uint64_ta res1, res2;$/;"	m	struct:Linux::pcb_struct
res_error_head	./arch/sparc/isa.hh	/^    uint64_t res_error_head;$/;"	m	class:SparcISA::ISA
res_error_tail	./arch/sparc/isa.hh	/^    uint64_t res_error_tail;$/;"	m	class:SparcISA::ISA
reschedule	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::reschedule(DynInstPtr &inst)$/;"	f	class:MemDepUnit
reschedule	./sim/eventq.hh	/^    reschedule(Event &event, Tick when, bool always = false)$/;"	f	class:EventManager
reschedule	./sim/eventq.hh	/^    reschedule(Event *event, Tick when, bool always = false)$/;"	f	class:EventManager
reschedule	./sim/eventq_impl.hh	/^EventQueue::reschedule(Event *event, Tick when, bool always)$/;"	f	class:EventQueue
reschedule	./sim/global_event.cc	/^void BaseGlobalEvent::reschedule(Tick when)$/;"	f	class:BaseGlobalEvent
rescheduleMemInst	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::rescheduleMemInst(DynInstPtr &inst)$/;"	f	class:DefaultIEW
rescheduleMemInst	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::rescheduleMemInst(DynInstPtr &resched_inst)$/;"	f	class:InstructionQueue
reserve	./cpu/minor/buffers.hh	/^    reserve()$/;"	f	class:Minor::Queue
reserve	./cpu/minor/buffers.hh	/^    void reserve() { queue.reserve(); }$/;"	f	class:Minor::InputBuffer
reserve	./dev/net/pktfifo.hh	/^    reserve(unsigned len = 0)$/;"	f	class:PacketFifo
reserve	./mem/ruby/structures/BankedArray.cc	/^BankedArray::reserve(int64_t idx)$/;"	f	class:BankedArray
reserved	./arch/isa_parser.py	/^    reserved = ($/;"	v	class:ISAParser
reserved	./arch/micro_asm.py	/^reserved = ('DEF', 'MACROOP', 'ROM', 'EXTERN')$/;"	v
reserved	./arch/x86/faults.hh	/^            Bitfield<3> reserved;$/;"	m	class:X86ISA::PageFault
reserved	./base/inet.hh	/^    uint32_t reserved;$/;"	m	struct:Net::ip6_opt_routing_type2
reserved	./base/loader/coff_sym.h	/^    unsigned reserved : 13;     \/* reserved: must be zero *\/$/;"	m	struct:pdr
reserved	./base/loader/coff_sym.h	/^    unsigned reserved : 1;      \/* reserved *\/$/;"	m	struct:ecoff_sym
reserved	./base/loader/coff_sym.h	/^    unsigned reserved : 22;  \/* reserved for future use *\/$/;"	m	struct:ecoff_fdr
reserved	./base/loader/coff_sym.h	/^    unsigned reserved:29;       \/* reserved for future use *\/$/;"	m	struct:ecoff_extsym
reserved	./cpu/kvm/x86_cpu.cc	/^    uint64_t reserved[12];$/;"	m	struct:FXSave	file:
reserved	./dev/arm/timer_cpulocal.hh	/^            Bitfield<7,3> reserved;$/;"	m	class:CpuLocalTimer::Timer
reserved	./dev/arm/timer_cpulocal.hh	/^            Bitfield<7,4> reserved;$/;"	m	class:CpuLocalTimer::Timer
reserved	./dev/arm/ufs_device.hh	/^        uint32_t reserved;$/;"	m	struct:UFSHostDevice::UFSHCDSGEntry
reserved	./dev/arm/ufs_device.hh	/^        uint32_t reserved[2];$/;"	m	struct:UFSHostDevice::UTPUPIUTaskReq
reserved	./dev/arm/ufs_device.hh	/^        uint32_t reserved[4];$/;"	m	struct:UFSHostDevice::UTPUPIURSP
reserved	./dev/net/pktfifo.hh	/^    unsigned reserved() const { return _reserved; }$/;"	f	class:PacketFifo
reserved	./dev/pci/pcireg.h	/^        uint8_t reserved[20];$/;"	m	struct:PXCAP::__anon31
reserved	./dev/pci/pcireg.h	/^        uint8_t reserved[7];$/;"	m	struct:PCIConfig::__anon26
reserved	./dev/virtio/block.hh	/^        uint32_t reserved;$/;"	m	struct:VirtIOBlock::BlkRequest
reserved	./kern/tru64/tru64.hh	/^        uint64_t reserved;      \/\/!< reserved$/;"	m	struct:Tru64::vm_stack
reserved	./mem/slicc/parser.py	/^    reserved = {$/;"	v	class:SLICC
reserved0	./dev/storage/ide_ctrl.hh	/^            uint8_t reserved0;$/;"	m	struct:IdeController::Channel::BMIRegs
reserved1	./base/bitmap.hh	/^        uint16_t reserved1;$/;"	m	struct:Bitmap::FileHeader
reserved1	./dev/pci/copy_engine_defs.hh	/^    uint64_t reserved1;$/;"	m	struct:CopyEngineReg::DmaDesc
reserved1	./dev/storage/ide_ctrl.hh	/^            uint8_t reserved1;$/;"	m	struct:IdeController::Channel::BMIRegs
reserved1	./kern/tru64/tru64.hh	/^        int             reserved1;      \/\/!< reserved1$/;"	m	struct:Tru64::ushared_state
reserved2	./base/bitmap.hh	/^        uint16_t reserved2;$/;"	m	struct:Bitmap::FileHeader
reserved2	./base/loader/coff_sym.h	/^    coff_uint   reserved2;$/;"	m	struct:ecoff_fdr
reserved2	./dev/pci/copy_engine_defs.hh	/^    uint64_t reserved2;$/;"	m	struct:CopyEngineReg::DmaDesc
reserved2	./kern/tru64/tru64.hh	/^        int64_t            reserved2;   \/\/!< reserved2$/;"	m	struct:Tru64::ushared_state
reservedSpace	./cpu/minor/buffers.hh	/^    unsigned int reservedSpace() const { return numReservedSlots; }$/;"	f	class:Minor::Queue
reserved_15_12	./dev/arm/hdlcd.hh	/^        Bitfield<15,12> reserved_15_12;$/;"	m	class:HDLcd
reserved_20_13	./arch/arm/miscregs.hh	/^      Bitfield<20,13> reserved_20_13;$/;"	m	namespace:ArmISA
reserved_22	./arch/arm/miscregs.hh	/^      Bitfield<22>    reserved_22;$/;"	m	namespace:ArmISA
reserved_2_0	./dev/arm/hdlcd.hh	/^        Bitfield<2,0>  reserved_2_0;$/;"	m	class:HDLcd
reserved_30_26	./arch/arm/miscregs.hh	/^      Bitfield<30,26> reserved_30_26;$/;"	m	namespace:ArmISA
reserved_30_5	./dev/arm/hdlcd.hh	/^        Bitfield<30,5> reserved_30_5;$/;"	m	class:HDLcd
reserved_31_1	./dev/arm/hdlcd.hh	/^        Bitfield<31,1> reserved_31_1;$/;"	m	class:HDLcd
reserved_31_12	./dev/arm/hdlcd.hh	/^        Bitfield<31,12> reserved_31_12;$/;"	m	class:HDLcd
reserved_31_24	./dev/arm/hdlcd.hh	/^        Bitfield<31,24> reserved_31_24;$/;"	m	class:HDLcd
reserved_31_5	./dev/arm/hdlcd.hh	/^        Bitfield<31,5> reserved_31_5;$/;"	m	class:HDLcd
reserved_4_3	./arch/arm/miscregs.hh	/^      Bitfield<4,3>   reserved_4_3;$/;"	m	namespace:ArmISA
reserved_7_5	./dev/arm/hdlcd.hh	/^        Bitfield<7,5>   reserved_7_5;$/;"	m	class:HDLcd
reserved_map	./arch/isa_parser.py	/^    reserved_map = { }$/;"	v	class:ISAParser
reserved_map	./arch/micro_asm.py	/^reserved_map = { }$/;"	v
reset	./arch/alpha/decoder.hh	/^    reset()$/;"	f	class:AlphaISA::Decoder
reset	./arch/arm/decoder.cc	/^Decoder::reset()$/;"	f	class:ArmISA::Decoder
reset	./arch/mips/decoder.hh	/^    reset()$/;"	f	class:MipsISA::Decoder
reset	./arch/power/decoder.hh	/^    reset()$/;"	f	class:PowerISA::Decoder
reset	./arch/sparc/decoder.hh	/^    reset()$/;"	f	class:SparcISA::Decoder
reset	./arch/sparc/system.hh	/^    ObjectFile *reset;$/;"	m	class:SparcSystem
reset	./arch/x86/decoder.hh	/^    void reset()$/;"	f	class:X86ISA::Decoder
reset	./base/statistics.cc	/^Formula::reset()$/;"	f	class:Stats::Formula
reset	./base/statistics.cc	/^reset()$/;"	f	namespace:Stats
reset	./base/statistics.hh	/^    reset()$/;"	f	class:Stats::DataWrapVec
reset	./base/statistics.hh	/^    reset()$/;"	f	class:Stats::DistBase
reset	./base/statistics.hh	/^    reset()$/;"	f	class:Stats::SparseHistBase
reset	./base/statistics.hh	/^    reset()$/;"	f	class:Stats::Vector2dBase
reset	./base/statistics.hh	/^    reset(Info *info)$/;"	f	class:Stats::AvgSampleStor
reset	./base/statistics.hh	/^    reset(Info *info)$/;"	f	class:Stats::AvgStor
reset	./base/statistics.hh	/^    reset(Info *info)$/;"	f	class:Stats::DistStor
reset	./base/statistics.hh	/^    reset(Info *info)$/;"	f	class:Stats::HistStor
reset	./base/statistics.hh	/^    reset(Info *info)$/;"	f	class:Stats::SampleStor
reset	./base/statistics.hh	/^    reset(Info *info)$/;"	f	class:Stats::SparseHistStor
reset	./base/statistics.hh	/^    void reset() { data()->reset(this->info()); }$/;"	f	class:Stats::ScalarBase
reset	./base/statistics.hh	/^    void reset() { s.reset(); }$/;"	f	class:Stats::InfoProxy
reset	./base/statistics.hh	/^    void reset() { }$/;"	f	class:Stats::DistProxy
reset	./base/statistics.hh	/^    void reset() { }$/;"	f	class:Stats::InfoAccess
reset	./base/statistics.hh	/^    void reset() { }$/;"	f	class:Stats::ProxyInfo
reset	./base/statistics.hh	/^    void reset() { }$/;"	f	class:Stats::ValueBase
reset	./base/statistics.hh	/^    void reset(Info *info) { data = Counter(); }$/;"	f	class:Stats::StatStor
reset	./cpu/activity.cc	/^ActivityRecorder::reset()$/;"	f	class:ActivityRecorder
reset	./cpu/o3/dep_graph.hh	/^DependencyGraph<DynInstPtr>::reset()$/;"	f	class:DependencyGraph
reset	./cpu/pred/2bit_local.cc	/^LocalBP::reset()$/;"	f	class:LocalBP
reset	./cpu/pred/btb.cc	/^DefaultBTB::reset()$/;"	f	class:DefaultBTB
reset	./cpu/pred/ras.cc	/^ReturnAddrStack::reset()$/;"	f	class:ReturnAddrStack
reset	./cpu/pred/sat_counter.hh	/^    void reset() { counter = initialVal; }$/;"	f	class:SatCounter
reset	./cpu/profile.hh	/^    Callback *reset;$/;"	m	class:FunctionProfile
reset	./cpu/testers/traffic_gen/generators.cc	/^TraceGen::InputStream::reset()$/;"	f	class:TraceGen::InputStream
reset	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::InputStream::reset()$/;"	f	class:TraceCPU::ElasticDataGen::InputStream
reset	./cpu/trace/trace_cpu.cc	/^TraceCPU::FixedRetryGen::InputStream::reset()$/;"	f	class:TraceCPU::FixedRetryGen::InputStream
reset	./dev/dma_device.cc	/^DmaReadFifo::DmaDoneEvent::reset(size_t size)$/;"	f	class:DmaReadFifo::DmaDoneEvent
reset	./dev/net/i8254xGBe.cc	/^IGbE::DescCache<T>::reset()$/;"	f	class:IGbE::DescCache
reset	./dev/net/sinic.cc	/^Device::reset()$/;"	f	class:Sinic::Device
reset	./dev/storage/ide_disk.cc	/^IdeDisk::reset(int id)$/;"	f	class:IdeDisk
reset	./dev/virtio/base.cc	/^VirtIODeviceBase::reset()$/;"	f	class:VirtIODeviceBase
reset	./mem/mem_checker.cc	/^MemChecker::reset(Addr addr, size_t size)$/;"	f	class:MemChecker
reset	./mem/mem_checker.hh	/^    void reset()$/;"	f	class:MemChecker
reset	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::reset()$/;"	f	class:RubyMemoryControl
reset	./proto/protoio.cc	/^ProtoInputStream::reset()$/;"	f	class:ProtoInputStream
reset	./python/m5/stats/__init__.py	/^def reset():$/;"	f
reset	./sim/fd_entry.cc	/^FDEntry::reset()$/;"	f	class:FDEntry
reset	./sim/stat_control.cc	/^    bool reset;$/;"	m	class:Stats::StatEvent	file:
reset	./unittest/unittest.cc	/^reset()$/;"	f	namespace:UnitTest
resetAddr64	./arch/arm/system.cc	/^ArmSystem::resetAddr64(ThreadContext *tc)$/;"	f	class:ArmSystem
resetAddr64	./arch/arm/system.hh	/^    Addr resetAddr64() const { return _resetAddr64; }$/;"	f	class:ArmSystem
resetClock	./sim/clocked_object.hh	/^    void resetClock() const$/;"	f	class:Clocked
resetEntries	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::resetEntries()$/;"	f	class:DefaultIEW
resetEntries	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::resetEntries()$/;"	f	class:InstructionQueue
resetEntries	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::resetEntries()$/;"	f	class:LSQ
resetEntries	./cpu/o3/rob_impl.hh	/^ROB<Impl>::resetEntries()$/;"	f	class:ROB
resetEventCounts	./arch/arm/pmu.cc	/^PMU::resetEventCounts()$/;"	f	class:ArmISA::PMU
resetFDEntry	./sim/process.cc	/^Process::resetFDEntry(int tgt_fd)$/;"	f	class:Process
resetFlags	./mem/cache/mshr.hh	/^        void resetFlags() { needsWritable = hasUpgrade = false; }$/;"	f	class:MSHR::TargetList
resetHandler	./base/statistics.cc	/^Handler resetHandler = NULL;$/;"	m	namespace:Stats	file:
resetLastStopped	./sim/ticked_object.hh	/^    resetLastStopped()$/;"	f	class:Ticked
resetQueue	./base/statistics.cc	/^CallbackQueue resetQueue;$/;"	m	namespace:Stats	file:
resetStage	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::resetStage()$/;"	f	class:DefaultDecode
resetStage	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::resetStage()$/;"	f	class:DefaultFetch
resetStage	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::resetStage()$/;"	f	class:DefaultRename
resetState	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::resetState()$/;"	f	class:InstructionQueue
resetState	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::resetState()$/;"	f	class:LSQUnit
resetState	./cpu/o3/rob_impl.hh	/^ROB<Impl>::resetState()$/;"	f	class:ROB
resetStats	./cpu/simple/base.cc	/^BaseSimpleCPU::resetStats()$/;"	f	class:BaseSimpleCPU
resetStats	./dev/net/sinic.cc	/^Device::resetStats()$/;"	f	class:Sinic::Device
resetStats	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.cc	/^InputUnit_d::resetStats()$/;"	f	class:InputUnit_d
resetStats	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^Router_d::resetStats()$/;"	f	class:Router_d
resetStats	./mem/ruby/network/simple/Switch.cc	/^Switch::resetStats()$/;"	f	class:Switch
resetStats	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::resetStats()$/;"	f	class:AbstractController
resetStats	./mem/ruby/system/RubySystem.cc	/^RubySystem::resetStats()$/;"	f	class:RubySystem
resetStats	./mem/ruby/system/Sequencer.cc	/^void Sequencer::resetStats()$/;"	f	class:Sequencer
resetStats	./sim/sim_object.cc	/^SimObject::resetStats()$/;"	f	class:SimObject
resetSymtab	./arch/sparc/system.hh	/^    SymbolTable *resetSymtab;$/;"	m	class:SparcSystem
reset_addr	./arch/sparc/SparcSystem.py	/^    reset_addr = Param.Addr(_rom_base, "Address to load ROM at")$/;"	v	class:SparcSystem
reset_addr_64	./arch/arm/ArmSystem.py	/^    reset_addr_64 = Param.Addr(0x0,$/;"	v	class:ArmSystem
reset_bin	./arch/sparc/SparcSystem.py	/^    reset_bin = Param.String("file that contains the reset code")$/;"	v	class:SparcSystem
resetstats	./sim/pseudo_inst.cc	/^resetstats(ThreadContext *tc, Tick delay, Tick period)$/;"	f	namespace:PseudoInst
residualTransferCount	./dev/arm/ufs_device.hh	/^        uint32_t residualTransferCount;$/;"	m	struct:UFSHostDevice::UTPUPIURSP
resize	./base/framebuffer.cc	/^FrameBuffer::resize(unsigned width, unsigned height)$/;"	f	class:FrameBuffer
resize	./cpu/minor/pipe_data.cc	/^ForwardInstData::resize(unsigned int width)$/;"	f	class:Minor::ForwardInstData
resize	./cpu/o3/dep_graph.hh	/^DependencyGraph<DynInstPtr>::resize(int num_entries)$/;"	f	class:DependencyGraph
resize	./mem/ruby/common/NetDest.cc	/^NetDest::resize()$/;"	f	class:NetDest
resize	./mem/ruby/common/SubBlock.hh	/^    void resize(int size) {  m_data.resize(size); }$/;"	f	class:SubBlock
resizeEntries	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::resizeEntries(unsigned size, ThreadID tid)$/;"	f	class:LSQ
resizeLQ	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::resizeLQ(unsigned size)$/;"	f	class:LSQUnit
resizeSQ	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::resizeSQ(unsigned size)$/;"	f	class:LSQUnit
resolution	./cpu/kvm/timer.hh	/^    Tick resolution() {$/;"	f	class:BaseKvmTimer
resolution	./dev/x86/i8042.hh	/^    uint8_t resolution;$/;"	m	class:X86ISA::PS2Mouse
resolve	./base/output.cc	/^OutputDirectory::resolve(const string &name) const$/;"	f	class:OutputDirectory
resolveSimObject	./python/m5/SimObject.py	/^def resolveSimObject(name):$/;"	f
resolveSimObject	./python/swig/pyobject.cc	/^PythonSimObjectResolver::resolveSimObject(const string &name)$/;"	f	class:PythonSimObjectResolver
resolveSimObject	./sim/cxx_manager.hh	/^        SimObject *resolveSimObject(const std::string &name)$/;"	f	class:CxxConfigManager::SimObjectResolver
resourceStalls	./mem/ruby/structures/RubyCache.py	/^    resourceStalls = Param.Bool(False, "stall if there is a resource failure")$/;"	v	class:RubyCache
respLayers	./mem/coherent_xbar.hh	/^    std::vector<RespLayer*> respLayers;$/;"	m	class:CoherentXBar
respLayers	./mem/noncoherent_xbar.hh	/^    std::vector<RespLayer*> respLayers;$/;"	m	class:NoncoherentXBar
respQueue	./mem/dram_ctrl.hh	/^    std::deque<DRAMPacket*> respQueue;$/;"	m	class:DRAMCtrl
respQueue	./mem/qport.hh	/^    RespPacketQueue &respQueue;$/;"	m	class:QueuedSlavePort
respQueueFull	./mem/bridge.cc	/^Bridge::BridgeSlavePort::respQueueFull() const$/;"	f	class:Bridge::BridgeSlavePort
respQueueFull	./mem/serial_link.cc	/^SerialLink::SerialLinkSlavePort::respQueueFull() const$/;"	f	class:SerialLink::SerialLinkSlavePort
respQueueLimit	./mem/bridge.hh	/^        unsigned int respQueueLimit;$/;"	m	class:Bridge::BridgeSlavePort
respQueueLimit	./mem/serial_link.hh	/^        unsigned int respQueueLimit;$/;"	m	class:SerialLink::SerialLinkSlavePort
resp_size	./mem/Bridge.py	/^    resp_size = Param.Unsigned(16, "The number of responses to buffer")$/;"	v	class:Bridge
resp_size	./mem/SerialLink.py	/^    resp_size = Param.Unsigned(16, "The number of responses to buffer")$/;"	v	class:SerialLink
respondEvent	./mem/dram_ctrl.hh	/^    EventWrapper<DRAMCtrl, &DRAMCtrl::processRespondEvent> respondEvent;$/;"	m	class:DRAMCtrl
responderHadWritable	./mem/packet.hh	/^    bool responderHadWritable() const$/;"	f	class:Packet
response	./mem/packet.hh	/^        const Command response;$/;"	m	struct:MemCmd::CommandInfo
responseCommand	./mem/packet.hh	/^    responseCommand() const$/;"	f	class:MemCmd
responseEvent	./mem/external_slave.cc	/^    ResponseEvent responseEvent;$/;"	m	class:StubSlavePort	file:
responseLatency	./mem/cache/base.hh	/^    const Cycles responseLatency;$/;"	m	class:BaseCache
responseLatency	./mem/xbar.hh	/^    const Cycles responseLatency;$/;"	m	class:BaseXBar
responsePacket	./mem/external_slave.cc	/^    PacketPtr responsePacket;$/;"	m	class:StubSlavePort	file:
responseQueue	./mem/dramsim2.hh	/^    std::deque<PacketPtr> responseQueue;$/;"	m	class:DRAMSim2
responseStartAddr	./dev/arm/ufs_device.hh	/^        Addr responseStartAddr;$/;"	m	struct:UFSHostDevice::transferDoneInfo
responseUPIU	./dev/arm/ufs_device.hh	/^        uint8_t responseUPIU[128];$/;"	m	struct:UFSHostDevice::UTPTransferCMDDesc
responseUPIULength	./dev/arm/ufs_device.hh	/^        uint16_t responseUPIULength;$/;"	m	struct:UFSHostDevice::UTPTransferReqDesc
responseUPIUOffset	./dev/arm/ufs_device.hh	/^        uint16_t responseUPIUOffset;$/;"	m	struct:UFSHostDevice::UTPTransferReqDesc
response_latency	./mem/XBar.py	/^    response_latency = 1$/;"	v	class:L2XBar
response_latency	./mem/XBar.py	/^    response_latency = 2$/;"	v	class:IOXBar
response_latency	./mem/XBar.py	/^    response_latency = 2$/;"	v	class:SystemXBar
response_latency	./mem/XBar.py	/^    response_latency = Param.Cycles("Response latency")$/;"	v	class:BaseXBar
response_latency	./mem/cache/Cache.py	/^    response_latency = Param.Cycles("Latency for the return path on a miss");$/;"	v	class:BaseCache
restartClock	./dev/net/i8254xGBe.cc	/^IGbE::restartClock()$/;"	f	class:IGbE
restartCounter	./dev/arm/timer_sp804.cc	/^Sp804::Timer::restartCounter(uint32_t val)$/;"	f	class:Sp804::Timer
restartStateMachine	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::restartStateMachine()$/;"	f	class:CopyEngine::CopyEngineChannel
restartTimerCounter	./dev/arm/timer_cpulocal.cc	/^CpuLocalTimer::Timer::restartTimerCounter(uint32_t val)$/;"	f	class:CpuLocalTimer::Timer
restartWatchdogCounter	./dev/arm/timer_cpulocal.cc	/^CpuLocalTimer::Timer::restartWatchdogCounter(uint32_t val)$/;"	f	class:CpuLocalTimer::Timer
restore	./cpu/pred/ras.cc	/^ReturnAddrStack::restore(unsigned top_entry_idx,$/;"	f	class:ReturnAddrStack
restoreThread	./arch/mips/mt.hh	/^restoreThread(TC *tc)$/;"	f	namespace:MipsISA
result	./arch/arm/insts/mem.hh	/^    IntRegIndex result;$/;"	m	class:ArmISA::MemoryExDImm
result	./arch/arm/insts/mem.hh	/^    IntRegIndex result;$/;"	m	class:ArmISA::MemoryExImm
result	./arch/arm/insts/mem64.hh	/^    IntRegIndex result;$/;"	m	class:ArmISA::MemoryDImmEx64
result	./arch/arm/insts/mem64.hh	/^    IntRegIndex result;$/;"	m	class:ArmISA::MemoryEx64
result	./base/statistics.cc	/^Formula::result(VResult &vec) const$/;"	f	class:Stats::Formula
result	./base/statistics.hh	/^    Result result() const { return (*functor)(); }$/;"	f	class:Stats::FunctorProxy
result	./base/statistics.hh	/^    Result result() const { return (Result)data; }$/;"	f	class:Stats::StatStor
result	./base/statistics.hh	/^    Result result() const { return (object->*method)(); }$/;"	f	class:Stats::MethodProxy
result	./base/statistics.hh	/^    Result result() const { return *scalar; }$/;"	f	class:Stats::ValueProxy
result	./base/statistics.hh	/^    Result result() const { return proxy->result(); }$/;"	f	class:Stats::ValueBase
result	./base/statistics.hh	/^    Result result() const { return stat.data(index)->result(); }$/;"	f	class:Stats::ScalarProxy
result	./base/statistics.hh	/^    Result result() const { return this->s.result(); }$/;"	f	class:Stats::ScalarInfoProxy
result	./base/statistics.hh	/^    Result result() { return data()->result(); }$/;"	f	class:Stats::ScalarBase
result	./base/statistics.hh	/^    const VResult &result() const { formula.result(vec); return vec; }$/;"	f	class:Stats::FormulaNode
result	./base/statistics.hh	/^    const VResult &result() const { return data->result(); }$/;"	f	class:Stats::VectorStatNode
result	./base/statistics.hh	/^    const VResult &result() const { return vresult; }$/;"	f	class:Stats::ConstNode
result	./base/statistics.hh	/^    const VResult &result() const { return vresult; }$/;"	f	class:Stats::ConstVectorNode
result	./base/statistics.hh	/^    result() const$/;"	f	class:Stats::AvgStor
result	./base/statistics.hh	/^    result() const$/;"	f	class:Stats::BinaryNode
result	./base/statistics.hh	/^    result() const$/;"	f	class:Stats::FormulaInfoProxy
result	./base/statistics.hh	/^    result() const$/;"	f	class:Stats::ScalarProxyNode
result	./base/statistics.hh	/^    result() const$/;"	f	class:Stats::ScalarStatNode
result	./base/statistics.hh	/^    result() const$/;"	f	class:Stats::SumNode
result	./base/statistics.hh	/^    result() const$/;"	f	class:Stats::UnaryNode
result	./base/statistics.hh	/^    result() const$/;"	f	class:Stats::VectorInfoProxy
result	./base/statistics.hh	/^    result() const$/;"	f	class:Stats::VectorProxy
result	./base/statistics.hh	/^    result(VResult &vec) const$/;"	f	class:Stats::VectorBase
result	./cpu/checker/cpu.hh	/^    std::queue<Result> result;$/;"	m	class:CheckerCPU
resultAvailable	./cpu/timing_expr.hh	/^    std::vector<bool > resultAvailable;$/;"	m	class:TimingExprEvalContext
results	./cpu/timing_expr.hh	/^    std::vector<uint64_t> results;$/;"	m	class:TimingExprEvalContext
resume	./dev/pixelpump.cc	/^BasePixelPump::PixelEvent::resume()$/;"	f	class:BasePixelPump::PixelEvent
resume	./sim/drain.cc	/^DrainManager::resume()$/;"	f	class:DrainManager
resumeFill	./dev/dma_device.cc	/^DmaReadFifo::resumeFill()$/;"	f	class:DmaReadFifo
resumeRecvTicks	./dev/net/dist_iface.cc	/^DistIface::RecvScheduler::resumeRecvTicks()$/;"	f	class:DistIface::RecvScheduler
resumeSerialize	./cpu/o3/rename.hh	/^    bool resumeSerialize;$/;"	m	class:DefaultRename
resumeUnblocking	./cpu/o3/rename.hh	/^    bool resumeUnblocking;$/;"	m	class:DefaultRename
resyncMatch	./dev/arm/rtc_pl031.cc	/^PL031::resyncMatch()$/;"	f	class:PL031
retData16	./dev/isa_fake.hh	/^    uint16_t retData16;$/;"	m	class:IsaFake
retData32	./dev/isa_fake.hh	/^    uint32_t retData32;$/;"	m	class:IsaFake
retData64	./dev/isa_fake.hh	/^    uint64_t retData64;$/;"	m	class:IsaFake
retData8	./dev/isa_fake.hh	/^    uint8_t retData8;$/;"	m	class:IsaFake
ret_bad_addr	./dev/Device.py	/^    ret_bad_addr = Param.Bool(False, "Return pkt status bad address on access")$/;"	v	class:IsaFake
ret_bad_addr	./dev/Device.py	/^    ret_bad_addr = Param.Bool(True, "Return pkt status bad address on access")$/;"	v	class:BadAddr
ret_data16	./dev/Device.py	/^    ret_data16 = Param.UInt16(0xFFFF, "Default data to return")$/;"	v	class:IsaFake
ret_data32	./dev/Device.py	/^    ret_data32 = Param.UInt32(0xFFFFFFFF, "Default data to return")$/;"	v	class:IsaFake
ret_data64	./dev/Device.py	/^    ret_data64 = Param.UInt64(0xFFFFFFFFFFFFFFFF, "Default data to return")$/;"	v	class:IsaFake
ret_data8	./dev/Device.py	/^    ret_data8 = Param.UInt8(0xFF, "Default data to return")$/;"	v	class:IsaFake
retireHead	./cpu/o3/rob_impl.hh	/^ROB<Impl>::retireHead(ThreadID tid)$/;"	f	class:ROB
retireResponse	./cpu/minor/lsq.cc	/^LSQ::SingleDataRequest::retireResponse(PacketPtr packet_)$/;"	f	class:Minor::LSQ::SingleDataRequest
retireResponse	./cpu/minor/lsq.cc	/^LSQ::SplitDataRequest::retireResponse(PacketPtr response)$/;"	f	class:Minor::LSQ::SplitDataRequest
retireResponse	./cpu/minor/lsq.hh	/^        void retireResponse(PacketPtr packet_) { }$/;"	f	class:Minor::LSQ::SpecialDataRequest
retireSquashed	./cpu/pred/2bit_local.hh	/^    void retireSquashed(void *bp_history)$/;"	f	class:LocalBP
retireSquashed	./cpu/pred/bi_mode.cc	/^BiModeBP::retireSquashed(void *bp_history)$/;"	f	class:BiModeBP
retireSquashed	./cpu/pred/tournament.cc	/^TournamentBP::retireSquashed(void *bp_history)$/;"	f	class:TournamentBP
retransmit	./dev/net/ethertap.cc	/^EtherTap::retransmit()$/;"	f	class:EtherTap
retry	./arch/x86/pagetable_walker.cc	/^Walker::WalkerState::retry()$/;"	f	class:X86ISA::Walker::WalkerState
retry	./mem/packet_queue.cc	/^PacketQueue::retry()$/;"	f	class:PacketQueue
retry	./mem/ruby/system/DMASequencer.hh	/^    bool retry;$/;"	m	class:DMASequencer
retry	./sim/syscallreturn.hh	/^    static SyscallReturn retry()$/;"	f	class:SyscallReturn
retryFlag	./sim/syscallreturn.hh	/^    bool retryFlag;$/;"	m	class:SyscallReturn
retryItem	./mem/snoop_filter.hh	/^    SnoopItem retryItem;$/;"	m	class:SnoopFilter
retryList	./mem/ruby/system/RubyPort.hh	/^    std::vector<MemSlavePort *> retryList;$/;"	m	class:RubyPort
retryMemInsts	./cpu/o3/inst_queue.hh	/^    std::list<DynInstPtr> retryMemInsts;$/;"	m	class:InstructionQueue
retryPkt	./cpu/o3/fetch.hh	/^    PacketPtr retryPkt;$/;"	m	class:DefaultFetch
retryPkt	./cpu/o3/lsq_unit.hh	/^    PacketPtr retryPkt;$/;"	m	class:LSQUnit
retryPkt	./cpu/testers/memtest/memtest.hh	/^    PacketPtr retryPkt;$/;"	m	class:MemTest
retryPkt	./cpu/testers/networktest/networktest.hh	/^    PacketPtr retryPkt;$/;"	m	class:NetworkTest
retryPkt	./cpu/testers/traffic_gen/traffic_gen.hh	/^    PacketPtr retryPkt;$/;"	m	class:TrafficGen
retryPkt	./cpu/trace/trace_cpu.hh	/^        PacketPtr retryPkt;$/;"	m	class:TraceCPU::ElasticDataGen
retryPkt	./cpu/trace/trace_cpu.hh	/^        PacketPtr retryPkt;$/;"	m	class:TraceCPU::FixedRetryGen
retryPktTick	./cpu/testers/traffic_gen/traffic_gen.hh	/^    Tick retryPktTick;$/;"	m	class:TrafficGen
retryRdReq	./mem/dram_ctrl.hh	/^    bool retryRdReq;$/;"	m	class:DRAMCtrl
retryReq	./mem/bridge.hh	/^        bool retryReq;$/;"	m	class:Bridge::BridgeSlavePort
retryReq	./mem/dramsim2.hh	/^    bool retryReq;$/;"	m	class:DRAMSim2
retryReq	./mem/serial_link.hh	/^        bool retryReq;$/;"	m	class:SerialLink::SerialLinkSlavePort
retryReq	./mem/simple_mem.hh	/^    bool retryReq;$/;"	m	class:SimpleMemory
retryRequest	./cpu/minor/lsq.hh	/^    LSQRequestPtr retryRequest;$/;"	m	class:Minor::LSQ
retryResp	./mem/dramsim2.hh	/^    bool retryResp;$/;"	m	class:DRAMSim2
retryResp	./mem/simple_mem.hh	/^    bool retryResp;$/;"	m	class:SimpleMemory
retryRespEvent	./cpu/simple/timing.hh	/^        EventWrapper<MasterPort, &MasterPort::sendRetryResp> retryRespEvent;$/;"	m	class:TimingSimpleCPU::TimingCPUPort
retryStalledReq	./mem/bridge.cc	/^Bridge::BridgeSlavePort::retryStalledReq()$/;"	f	class:Bridge::BridgeSlavePort
retryStalledReq	./mem/serial_link.cc	/^SerialLink::SerialLinkSlavePort::retryStalledReq()$/;"	f	class:SerialLink::SerialLinkSlavePort
retryTicks	./cpu/testers/traffic_gen/traffic_gen.hh	/^    Stats::Scalar retryTicks;$/;"	m	class:TrafficGen
retryTid	./cpu/o3/fetch.hh	/^    ThreadID retryTid;$/;"	m	class:DefaultFetch
retryTime	./sim/core.hh	/^const Tick retryTime = 1000;$/;"	v
retryWaiting	./mem/xbar.cc	/^BaseXBar::Layer<SrcType,DstType>::retryWaiting()$/;"	f	class:BaseXBar::Layer
retryWrReq	./mem/dram_ctrl.hh	/^    bool retryWrReq;$/;"	m	class:DRAMCtrl
retrying	./arch/x86/pagetable_walker.hh	/^            bool retrying;$/;"	m	class:X86ISA::Walker::WalkerState
retsys	./arch/alpha/osfpal.hh	/^        retsys = 0x3d,$/;"	e	enum:PAL::__anon50
returnCycle	./cpu/minor/scoreboard.hh	/^    std::vector<Cycles> returnCycle;$/;"	m	class:Minor::Scoreboard
returnValue	./sim/syscallreturn.hh	/^    int64_t returnValue() const$/;"	f	class:SyscallReturn
rev	./arch/arm/linux/atag.hh	/^    void rev(uint32_t i) { storage[2] = i; }$/;"	f	class:AtagRev
rev	./arch/mips/pra_constants.hh	/^    Bitfield<7,  0>  rev;$/;"	m	namespace:MipsISA
revision	./arch/x86/bios/ACPI.py	/^    revision = Param.UInt8(2, 'revision of ACPI being used, zero indexed')$/;"	v	class:X86ACPIRSDP
revision	./arch/x86/bios/acpi.hh	/^    uint8_t revision;$/;"	m	class:X86ISA::ACPI::RSDP
revision	./arch/x86/bios/acpi.hh	/^    uint8_t revision;$/;"	m	class:X86ISA::ACPI::SysDescTable
revision	./dev/pci/pcireg.h	/^        uint8_t revision;$/;"	m	struct:PCIConfig::__anon26
revoke	./kern/tru64/tru64_syscalls.hh	/^        revoke = 56,$/;"	e	enum:SystemCalls::__anon102
rex	./arch/x86/types.hh	/^        Rex rex;$/;"	m	struct:X86ISA::ExtMachInst
rf	./arch/x86/regs/misc.hh	/^        Bitfield<16> rf; \/\/ Resume Flag$/;"	m	namespace:X86ISA
rfcr	./dev/net/ns_gige.hh	/^    uint32_t    rfcr;$/;"	m	struct:dp_regs
rfctl	./dev/net/i8254xGBe_defs.hh	/^    RFCTL rfctl;$/;"	m	struct:iGbReg::Regs
rfd	./base/loader/coff_sym.h	/^    coff_uint   rfd;    \/* index into the file table *\/$/;"	m	struct:__anon114
rfd	./base/loader/coff_sym.h	/^    unsigned    rfd : 12;    \/* index into the file indirect table *\/$/;"	m	struct:__anon113
rfdBase	./base/loader/coff_sym.h	/^    coff_int    rfdBase;        \/* index into the file indirect table *\/$/;"	m	struct:ecoff_fdr
rfdNil	./base/loader/coff_sym.h	425;"	d
rfdNil	./base/loader/coff_sym.h	449;"	d
rfdr	./dev/net/ns_gige.hh	/^    uint32_t    rfdr;$/;"	m	struct:dp_regs
rfr	./arch/arm/miscregs.hh	/^        Bitfield<19> rfr;$/;"	m	namespace:ArmISA
rgb565_be	./base/framebuffer.hh	/^    static const PixelConverter rgb565_be;$/;"	m	class:PixelConverter
rgb565_le	./base/framebuffer.hh	/^    static const PixelConverter rgb565_le;$/;"	m	class:PixelConverter
rgba8888_be	./base/framebuffer.hh	/^    static const PixelConverter rgba8888_be;$/;"	m	class:PixelConverter
rgba8888_le	./base/framebuffer.hh	/^    static const PixelConverter rgba8888_le;$/;"	m	class:PixelConverter
rgdb_wait	./sim/system.cc	/^int rgdb_wait = -1;$/;"	v
right	./cpu/TimingExpr.py	/^    right = Param.TimingExpr("RHS expression")$/;"	v	class:TimingExprBin
right	./cpu/timing_expr.hh	/^    TimingExpr *right;$/;"	m	class:TimingExprBin
rightButton	./dev/ps2.hh	/^    Bitfield<1> rightButton;$/;"	m	namespace:Ps2
rightButton	./dev/x86/i8042.hh	/^        Bitfield<0> rightButton;$/;"	m	class:X86ISA::PS2Mouse
ring	./dev/virtio/base.hh	/^        std::vector<T> ring;$/;"	m	class:VirtQueue::VirtRing
ring	./dev/virtio/virtio_ring.h	/^    struct vring_used_elem ring[];$/;"	m	struct:vring_used	typeref:struct:vring_used::vring_used_elem
ring	./dev/virtio/virtio_ring.h	/^    uint16_t ring[];$/;"	m	struct:vring_avail
ring0	./arch/x86/kernel_stats.hh	/^    ring0,$/;"	e	enum:X86ISA::Kernel::cpu_mode
ring1	./arch/x86/kernel_stats.hh	/^    ring1,$/;"	e	enum:X86ISA::Kernel::cpu_mode
ring2	./arch/x86/kernel_stats.hh	/^    ring2,$/;"	e	enum:X86ISA::Kernel::cpu_mode
ring3	./arch/x86/kernel_stats.hh	/^    ring3,$/;"	e	enum:X86ISA::Kernel::cpu_mode
ringBuffer	./cpu/kvm/perfevent.hh	/^    struct perf_event_mmap_page *ringBuffer;$/;"	m	class:PerfKvmCounter	typeref:struct:PerfKvmCounter::perf_event_mmap_page
ringNumPages	./cpu/kvm/perfevent.hh	/^    int ringNumPages;$/;"	m	class:PerfKvmCounter
rip	./arch/x86/nativetrace.hh	/^        uint64_t rip;$/;"	m	struct:Trace::X86NativeTrace::ThreadState
rip	./arch/x86/remote_gdb.hh	/^          uint64_t rip;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
ripl	./arch/mips/pra_constants.hh	/^    Bitfield<15, 10> ripl;$/;"	m	namespace:MipsISA
ripv	./arch/x86/regs/misc.hh	/^        Bitfield<0> ripv; \/\/ Restart-IP valid$/;"	m	namespace:X86ISA
rlim_cur	./arch/arm/freebsd/freebsd.hh	/^        uint32_t  rlim_cur;     \/\/!< soft limit$/;"	m	struct:ArmFreebsd32::rlimit
rlim_cur	./arch/arm/freebsd/freebsd.hh	/^        uint64_t  rlim_cur;     \/\/!< soft limit$/;"	m	struct:ArmFreebsd64::rlimit
rlim_cur	./arch/arm/linux/linux.hh	/^        uint32_t  rlim_cur;     \/\/!< soft limit$/;"	m	struct:ArmLinux32::rlimit
rlim_cur	./arch/arm/linux/linux.hh	/^        uint64_t  rlim_cur;     \/\/!< soft limit$/;"	m	struct:ArmLinux64::rlimit
rlim_cur	./kern/linux/linux.hh	/^        uint64_t  rlim_cur;     \/\/!< soft limit$/;"	m	struct:Linux::rlimit
rlim_cur	./kern/operatingsystem.hh	/^        uint64_t  rlim_cur;     \/\/!< soft limit$/;"	m	struct:OperatingSystem::__anon93
rlim_cur	./kern/tru64/tru64.hh	/^        uint64_t  rlim_cur;     \/\/!< soft limit$/;"	m	struct:Tru64::rlimit
rlim_max	./arch/arm/freebsd/freebsd.hh	/^        uint32_t  rlim_max;     \/\/!< hard limit$/;"	m	struct:ArmFreebsd32::rlimit
rlim_max	./arch/arm/freebsd/freebsd.hh	/^        uint64_t  rlim_max;     \/\/!< hard limit$/;"	m	struct:ArmFreebsd64::rlimit
rlim_max	./arch/arm/linux/linux.hh	/^        uint32_t  rlim_max;     \/\/!< hard limit$/;"	m	struct:ArmLinux32::rlimit
rlim_max	./arch/arm/linux/linux.hh	/^        uint64_t  rlim_max;     \/\/!< hard limit$/;"	m	struct:ArmLinux64::rlimit
rlim_max	./kern/linux/linux.hh	/^        uint64_t  rlim_max;     \/\/!< hard limit$/;"	m	struct:Linux::rlimit
rlim_max	./kern/operatingsystem.hh	/^        uint64_t  rlim_max;     \/\/!< hard limit$/;"	m	struct:OperatingSystem::__anon93
rlim_max	./kern/tru64/tru64.hh	/^        uint64_t  rlim_max;     \/\/!< hard limit$/;"	m	struct:Tru64::rlimit
rlim_t	./kern/solaris/solaris.hh	/^    typedef uint64_t rlim_t;$/;"	t	class:Solaris
rlimit	./arch/arm/freebsd/freebsd.hh	/^    struct rlimit {$/;"	s	class:ArmFreebsd32
rlimit	./arch/arm/freebsd/freebsd.hh	/^    struct rlimit {$/;"	s	class:ArmFreebsd64
rlimit	./arch/arm/linux/linux.hh	/^    struct rlimit {$/;"	s	class:ArmLinux32
rlimit	./arch/arm/linux/linux.hh	/^    struct rlimit {$/;"	s	class:ArmLinux64
rlimit	./kern/linux/linux.hh	/^    struct rlimit {$/;"	s	class:Linux
rlimit	./kern/operatingsystem.hh	/^    } rlimit;$/;"	t	class:OperatingSystem	typeref:struct:OperatingSystem::__anon93
rlimit	./kern/tru64/tru64.hh	/^    struct rlimit {$/;"	s	class:Tru64
rlimit_resources	./arch/alpha/tru64/tru64.hh	/^    enum rlimit_resources {$/;"	g	class:AlphaTru64
rlimit_resources	./arch/arm/freebsd/freebsd.hh	/^    enum rlimit_resources {$/;"	g	class:ArmFreebsd64
rlimit_resources	./arch/arm/linux/linux.hh	/^    enum rlimit_resources {$/;"	g	class:ArmLinux64
rlpml	./dev/net/i8254xGBe_defs.hh	/^    uint32_t rlpml; \/\/ 0x5004 RLPML probably maximum accepted packet size$/;"	m	struct:iGbReg::Regs
rm	./arch/arm/types.hh	/^        Bitfield<3,  0>  rm;$/;"	m	namespace:ArmISA
rm	./arch/x86/types.hh	/^        Bitfield<2,0> rm;$/;"	m	namespace:X86ISA
rmdir	./kern/tru64/tru64_syscalls.hh	/^        rmdir = 137,$/;"	e	enum:SystemCalls::__anon102
rn	./arch/arm/types.hh	/^        Bitfield<19, 16> rn;$/;"	m	namespace:ArmISA
rn	./arch/power/miscregs.hh	/^    Bitfield<2,1> rn;$/;"	m	namespace:PowerISA
rndx	./base/loader/coff_sym.h	/^    RNDXR       rndx;           \/* points to a symbol or opt entry *\/$/;"	m	struct:__anon116
rndx	./base/loader/coff_sym.h	/^    RNDXR       rndx;           \/* relative index into symbol table *\/$/;"	m	union:__anon115
rndxNil	./base/loader/coff_sym.h	338;"	d
rnst	./arch/mips/mt_constants.hh	/^    Bitfield<24, 23> rnst;$/;"	m	namespace:MipsISA
rob	./cpu/o3/commit.hh	/^    ROB *rob;$/;"	m	class:DefaultCommit
rob	./cpu/o3/cpu.hh	/^    typename CPUPolicy::ROB rob;$/;"	m	class:FullO3CPU
robDep	./cpu/trace/trace_cpu.hh	/^            RobDepArray robDep;$/;"	m	class:TraceCPU::ElasticDataGen::GraphNode
robDepList	./cpu/o3/probe/elastic_trace.hh	/^        std::list<InstSeqNum> robDepList;$/;"	m	struct:ElasticTrace::TraceInfo
robEntries	./cpu/o3/rename.hh	/^        unsigned robEntries;$/;"	m	struct:DefaultRename::FreeEntries
robInfoFromIEW	./cpu/o3/commit.hh	/^    typename TimeBuffer<TimeStruct>::wire robInfoFromIEW;$/;"	m	class:DefaultCommit
robNum	./cpu/trace/trace_cpu.hh	/^            NodeRobNum robNum;$/;"	m	class:TraceCPU::ElasticDataGen::GraphNode
robPolicy	./cpu/o3/rob.hh	/^    ROBPolicy robPolicy;$/;"	m	class:ROB
robReads	./cpu/o3/rob.hh	/^    Stats::Scalar robReads;$/;"	m	class:ROB
robSquashing	./cpu/o3/comm.hh	/^        bool robSquashing; \/\/ *F, D, R, I$/;"	m	struct:TimeBufStruct::commitComm
robStatus	./cpu/o3/rob.hh	/^    Status robStatus[Impl::MaxThreads];$/;"	m	class:ROB
robWrites	./cpu/o3/rob.hh	/^    Stats::Scalar robWrites;$/;"	m	class:ROB
rom	./arch/sparc/SparcSystem.py	/^    rom = Param.SimpleMemory($/;"	v	class:SparcSystem
rom	./dev/net/ns_gige.hh	/^    dp_rom rom;$/;"	m	class:NSGigE
romMicroPC	./base/types.hh	/^romMicroPC(MicroPC upc)$/;"	f
romSize	./arch/x86/bios/smbios.hh	/^    uint8_t romSize;$/;"	m	class:X86ISA::SMBios::BiosInformation
rom_size	./arch/x86/bios/SMBios.py	/^    rom_size = Param.UInt8(0, "rom size")$/;"	v	class:X86SMBiosBiosInformation
root	./base/statistics.hh	/^    NodePtr root;$/;"	m	class:Stats::Formula
root	./dev/virtio/VirtIO9P.py	/^    root = Param.String("\/tmp", "Path to export through diod")$/;"	v	class:VirtIO9PDiod
root	./sim/root.hh	/^    root()$/;"	f	class:Root
rootdev	./arch/arm/linux/atag.hh	/^    void rootdev(uint32_t i) { storage[4] = i; }$/;"	f	class:AtagCore
rotC	./arch/arm/insts/pred_inst.hh	/^    bool rotC;$/;"	m	class:ArmISA::DataImmOp
rotate	./arch/arm/insts/pred_inst.hh	/^    uint32_t rotate;$/;"	m	class:ArmISA::PredImmOp
rotate	./arch/arm/types.hh	/^        Bitfield<11, 8>  rotate;$/;"	m	namespace:ArmISA
rotateValue	./arch/power/insts/integer.hh	/^    rotateValue(uint32_t rs, uint32_t shift) const$/;"	f	class:PowerISA::IntRotateOp
rotate_counter	./mem/hmc_controller.cc	/^int HMCController::rotate_counter()$/;"	f	class:HMCController
rotate_imm	./arch/arm/insts/pred_inst.hh	/^rotate_imm(uint32_t immValue, uint32_t rotateValue)$/;"	f	namespace:ArmISA
rotated_carry	./arch/arm/insts/pred_inst.hh	/^    uint32_t rotated_carry;$/;"	m	class:ArmISA::PredImmOp
rotated_imm	./arch/arm/insts/pred_inst.hh	/^    uint32_t rotated_imm;$/;"	m	class:ArmISA::PredImmOp
roundDown	./base/intmath.hh	/^roundDown(const T& val, const U& align)$/;"	f
roundFP	./arch/mips/utility.cc	/^roundFP(double val, int digits)$/;"	f	namespace:MipsISA
roundNEven	./arch/arm/insts/vfp.hh	/^roundNEven(T a) {$/;"	f	namespace:ArmISA
roundPage	./arch/arm/utility.cc	/^roundPage(Addr addr)$/;"	f	namespace:ArmISA
roundRobin	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::roundRobin()$/;"	f	class:DefaultCommit
roundRobin	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::roundRobin()$/;"	f	class:DefaultFetch
roundUp	./base/intmath.hh	/^roundUp(const T& val, const U& align)$/;"	f
roundingModes	./arch/arm/miscregs.hh	/^        Bitfield<31, 28> roundingModes;$/;"	m	namespace:ArmISA
route	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    int route;$/;"	m	class:VirtualChannel_d
routeCompute	./mem/ruby/network/garnet/fixed-pipeline/RoutingUnit_d.cc	/^RoutingUnit_d::routeCompute(flit_d *t_flit)$/;"	f	class:RoutingUnit_d
routeCompute	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::routeCompute(flit *m_flit, int inport)$/;"	f	class:Router
routeTo	./mem/xbar.hh	/^    std::unordered_map<RequestPtr, PortID> routeTo;$/;"	m	class:BaseXBar
routeToHyp	./arch/arm/faults.cc	/^DataAbort::routeToHyp(ThreadContext *tc) const$/;"	f	class:ArmISA::DataAbort
routeToHyp	./arch/arm/faults.cc	/^FastInterrupt::routeToHyp(ThreadContext *tc) const$/;"	f	class:ArmISA::FastInterrupt
routeToHyp	./arch/arm/faults.cc	/^Interrupt::routeToHyp(ThreadContext *tc) const$/;"	f	class:ArmISA::Interrupt
routeToHyp	./arch/arm/faults.cc	/^PrefetchAbort::routeToHyp(ThreadContext *tc) const$/;"	f	class:ArmISA::PrefetchAbort
routeToHyp	./arch/arm/faults.cc	/^SupervisorCall::routeToHyp(ThreadContext *tc) const$/;"	f	class:ArmISA::SupervisorCall
routeToHyp	./arch/arm/faults.cc	/^SystemError::routeToHyp(ThreadContext *tc) const$/;"	f	class:ArmISA::SystemError
routeToHyp	./arch/arm/faults.cc	/^UndefinedInstruction::routeToHyp(ThreadContext *tc) const$/;"	f	class:ArmISA::UndefinedInstruction
routeToHyp	./arch/arm/faults.hh	/^    virtual bool routeToHyp(ThreadContext *tc) const { return false; }$/;"	f	class:ArmISA::ArmFault
routeToMonitor	./arch/arm/faults.cc	/^DataAbort::routeToMonitor(ThreadContext *tc) const$/;"	f	class:ArmISA::DataAbort
routeToMonitor	./arch/arm/faults.cc	/^FastInterrupt::routeToMonitor(ThreadContext *tc) const$/;"	f	class:ArmISA::FastInterrupt
routeToMonitor	./arch/arm/faults.cc	/^Interrupt::routeToMonitor(ThreadContext *tc) const$/;"	f	class:ArmISA::Interrupt
routeToMonitor	./arch/arm/faults.cc	/^PrefetchAbort::routeToMonitor(ThreadContext *tc) const$/;"	f	class:ArmISA::PrefetchAbort
routeToMonitor	./arch/arm/faults.cc	/^SystemError::routeToMonitor(ThreadContext *tc) const$/;"	f	class:ArmISA::SystemError
routeToMonitor	./arch/arm/faults.hh	/^    virtual bool routeToMonitor(ThreadContext *tc) const { return false; }$/;"	f	class:ArmISA::ArmFaultVals
route_req	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^Router_d::route_req(flit_d *t_flit, InputUnit_d *in_unit, int invc)$/;"	f	class:Router_d
router_id	./mem/ruby/network/BasicRouter.py	/^    router_id = Param.Int("ID in relation to other routers")$/;"	v	class:BasicRouter
routers	./mem/ruby/network/Network.py	/^    routers = VectorParam.BasicRouter("Network routers")$/;"	v	class:RubyNetwork
routers	./mem/ruby/network/fault_model/FaultModel.hh	/^    std::vector <system_conf> routers;$/;"	m	class:FaultModel
row	./mem/dram_ctrl.hh	/^        const uint32_t row;$/;"	m	class:DRAMCtrl::DRAMPacket
rowAccesses	./mem/dram_ctrl.hh	/^        uint32_t rowAccesses;$/;"	m	class:DRAMCtrl::Bank
rowBufferSize	./mem/dram_ctrl.hh	/^    const uint32_t rowBufferSize;$/;"	m	class:DRAMCtrl
rows	./dev/virtio/console.hh	/^        uint16_t rows;$/;"	m	struct:VirtIOConsole::Config
rowsPerBank	./mem/dram_ctrl.hh	/^    uint32_t rowsPerBank;$/;"	m	class:DRAMCtrl
rp	./arch/mips/pra_constants.hh	/^    Bitfield<27>     rp;$/;"	m	namespace:MipsISA
rpb_cc	./arch/mips/linux/hwrpb.hh	/^        uint32_t rpb_cc;$/;"	m	struct:Linux::pcb_struct
rpb_fen	./arch/mips/linux/hwrpb.hh	/^        uint64_ta rpb_fen;$/;"	m	struct:Linux::pcb_struct
rpb_ksp	./arch/mips/linux/hwrpb.hh	/^        uint64_ta rpb_ksp;$/;"	m	struct:Linux::pcb_struct
rpb_psn	./arch/mips/linux/hwrpb.hh	/^        uint32_t rpb_psn;$/;"	m	struct:Linux::pcb_struct
rpb_ptbr	./arch/mips/linux/hwrpb.hh	/^        uint64_ta rpb_ptbr;$/;"	m	struct:Linux::pcb_struct
rpb_unique	./arch/mips/linux/hwrpb.hh	/^        uint64_ta rpb_unique;$/;"	m	struct:Linux::pcb_struct
rpb_usp	./arch/mips/linux/hwrpb.hh	/^        uint64_ta rpb_usp;$/;"	m	struct:Linux::pcb_struct
rpl	./arch/x86/regs/misc.hh	/^        Bitfield<1, 0> rpl; \/\/ Requestor Privilege Level$/;"	m	namespace:X86ISA
rpns	./sim/pseudo_inst.cc	/^rpns(ThreadContext *tc)$/;"	f	namespace:PseudoInst
rr	./arch/arm/miscregs.hh	/^        Bitfield<14>   rr;      \/\/ Round Robin select (ARMv7 only)$/;"	m	namespace:ArmISA
rr_counter	./mem/hmc_controller.hh	/^    int rr_counter;$/;"	m	class:HMCController
rs	./arch/arm/miscregs.hh	/^        Bitfield<9, 8> rs;      \/\/ Deprecated protection bits (dropped in ARMv7)$/;"	m	namespace:ArmISA
rs	./arch/arm/types.hh	/^        Bitfield<11, 8>  rs;$/;"	m	namespace:ArmISA
rs	./arch/power/types.hh	/^    Bitfield<25, 21> rs;$/;"	m	namespace:PowerISA
rs	./dev/mc146818.hh	/^        Bitfield<3, 0> rs;$/;"	m	class:MC146818
rs	./dev/net/i8254xGBe_defs.hh	/^inline bool rs(TxDesc *d)   { return bits(d->d2, 27,27); }$/;"	f	namespace:iGbReg::TxdOp
rsdp	./arch/x86/system.hh	/^    X86ISA::ACPI::RSDP * rsdp;$/;"	m	class:X86System
rsdt	./arch/x86/bios/ACPI.py	/^    rsdt = Param.X86ACPIRSDT(NULL, 'root system description table')$/;"	v	class:X86ACPIRSDP
rsdt	./arch/x86/bios/acpi.hh	/^    RSDT * rsdt;$/;"	m	class:X86ISA::ACPI::RSDP
rsi	./arch/x86/nativetrace.hh	/^        uint64_t rsi;$/;"	m	struct:Trace::X86NativeTrace::ThreadState
rsi	./arch/x86/remote_gdb.hh	/^          uint64_t rsi;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
rsize	./kern/tru64/tru64.hh	/^        size_t  rsize;          \/\/!< red zone size$/;"	m	struct:Tru64::vm_stack
rsmCycle	./arch/x86/regs/misc.hh	/^        Bitfield<4> rsmCycle;$/;"	m	namespace:X86ISA
rsp	./arch/x86/nativetrace.hh	/^        uint64_t rsp;$/;"	m	struct:Trace::X86NativeTrace::ThreadState
rsp	./arch/x86/remote_gdb.hh	/^          uint64_t rsp;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
rsrpd	./dev/net/i8254xGBe_defs.hh	/^    RSRPD rsrpd;$/;"	m	struct:iGbReg::Regs
rss	./base/loader/coff_sym.h	/^    coff_int    rss;            \/* file name (of source, if known) *\/$/;"	m	struct:ecoff_fdr
rss	./dev/net/Ethernet.py	/^    rss = Param.Bool(False, "Receive Side Scaling")$/;"	v	class:EtherDevBase
rss_hash	./dev/net/i8254xGBe_defs.hh	/^                uint32_t rss_hash;$/;"	m	union:iGbReg::RxDesc::__anon5::__anon8::__anon9
rss_type	./dev/net/i8254xGBe_defs.hh	/^            uint16_t rss_type:4;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon8
rsvd	./arch/arm/miscregs.hh	/^        Bitfield<29, 28> rsvd;$/;"	m	namespace:ArmISA
rt	./arch/arm/types.hh	/^        Bitfield<15, 12> rt;$/;"	m	namespace:ArmISA
rtType2	./base/inet.hh	/^        struct ip6_opt_routing_type2 rtType2;$/;"	m	union:Net::ip6_opt_hdr::__anon120	typeref:struct:Net::ip6_opt_hdr::__anon120::ip6_opt_routing_type2
rtType2Addr	./base/inet.hh	/^    const uint8_t* rtType2Addr() const { return ext_data.rtType2.addr.data; }$/;"	f	struct:Net::Ip6Opt
rtType2SegLft	./base/inet.hh	/^    uint8_t  rtType2SegLft() const { return ext_data.rtType2.segleft; }$/;"	f	struct:Net::Ip6Opt
rtType2Type	./base/inet.hh	/^    uint8_t  rtType2Type() const { return ext_data.rtType2.type; }$/;"	f	struct:Net::Ip6Opt
rtTypeExt	./base/inet.hh	/^    const Ip6Opt* rtTypeExt() const { return getExt(IP_PROTO_ROUTING); }$/;"	f	struct:Net::Ip6Hdr
rtc	./dev/alpha/tsunami_io.hh	/^    RTC rtc;$/;"	m	class:TsunamiIO
rtc	./dev/arm/RealView.py	/^    rtc            = PL031(pio_addr=0x1C170000, int_num=36)$/;"	v	class:VExpress_EMM
rtc	./dev/arm/RealView.py	/^    rtc           = PL031(pio_addr=0x10017000, int_num=42)$/;"	v	class:RealViewPBX
rtc	./dev/mips/malta_io.hh	/^    RTC rtc;$/;"	m	class:MaltaIO
rtc	./dev/x86/cmos.hh	/^    } rtc;$/;"	m	class:X86ISA::Cmos	typeref:class:X86ISA::Cmos::X86RTC
rtcAddr	./dev/alpha/tsunami_io.hh	/^    uint8_t rtcAddr;$/;"	m	class:TsunamiIO
rtc_fake	./dev/arm/RealView.py	/^    rtc_fake      = AmbaFake(pio_addr=0x10017000, amba_id=0x41031)$/;"	v	class:RealViewEB
rti	./arch/alpha/osfpal.hh	/^        rti = 0x3f,$/;"	e	enum:PAL::__anon50
rtralt	./base/inet.hh	/^    uint16_t rtralt() const { return ntohs(opt_data.rtralt); }$/;"	f	struct:Net::IpOpt
ru_idrss	./arch/arm/freebsd/freebsd.hh	/^        int32_t ru_idrss;               \/\/!< integral unshared data "$/;"	m	struct:ArmFreebsd32::rusage
ru_idrss	./arch/arm/freebsd/freebsd.hh	/^        int64_t ru_idrss;               \/\/!< integral unshared data "$/;"	m	struct:ArmFreebsd64::rusage
ru_idrss	./arch/arm/linux/linux.hh	/^        int32_t ru_idrss;               \/\/!< integral unshared data "$/;"	m	struct:ArmLinux32::rusage
ru_idrss	./arch/arm/linux/linux.hh	/^        int64_t ru_idrss;               \/\/!< integral unshared data "$/;"	m	struct:ArmLinux64::rusage
ru_idrss	./kern/linux/linux.hh	/^        int64_t ru_idrss;               \/\/!< integral unshared data "$/;"	m	struct:Linux::rusage
ru_idrss	./kern/operatingsystem.hh	/^        int64_t ru_idrss;               \/\/!< integral unshared data "$/;"	m	struct:OperatingSystem::__anon96
ru_idrss	./kern/tru64/tru64.hh	/^        uint64_t ru_idrss;              \/\/!< integral unshared data "$/;"	m	struct:Tru64::rusage
ru_inblock	./arch/arm/freebsd/freebsd.hh	/^        int32_t ru_inblock;             \/\/!< block input operations$/;"	m	struct:ArmFreebsd32::rusage
ru_inblock	./arch/arm/freebsd/freebsd.hh	/^        int64_t ru_inblock;             \/\/!< block input operations$/;"	m	struct:ArmFreebsd64::rusage
ru_inblock	./arch/arm/linux/linux.hh	/^        int32_t ru_inblock;             \/\/!< block input operations$/;"	m	struct:ArmLinux32::rusage
ru_inblock	./arch/arm/linux/linux.hh	/^        int64_t ru_inblock;             \/\/!< block input operations$/;"	m	struct:ArmLinux64::rusage
ru_inblock	./kern/linux/linux.hh	/^        int64_t ru_inblock;             \/\/!< block input operations$/;"	m	struct:Linux::rusage
ru_inblock	./kern/operatingsystem.hh	/^        int64_t ru_inblock;             \/\/!< block input operations$/;"	m	struct:OperatingSystem::__anon96
ru_inblock	./kern/tru64/tru64.hh	/^        uint64_t ru_inblock;            \/\/!< block input operations$/;"	m	struct:Tru64::rusage
ru_isrss	./arch/arm/freebsd/freebsd.hh	/^        int32_t ru_isrss;               \/\/!< integral unshared stack "$/;"	m	struct:ArmFreebsd32::rusage
ru_isrss	./arch/arm/freebsd/freebsd.hh	/^        int64_t ru_isrss;               \/\/!< integral unshared stack "$/;"	m	struct:ArmFreebsd64::rusage
ru_isrss	./arch/arm/linux/linux.hh	/^        int32_t ru_isrss;               \/\/!< integral unshared stack "$/;"	m	struct:ArmLinux32::rusage
ru_isrss	./arch/arm/linux/linux.hh	/^        int64_t ru_isrss;               \/\/!< integral unshared stack "$/;"	m	struct:ArmLinux64::rusage
ru_isrss	./kern/linux/linux.hh	/^        int64_t ru_isrss;               \/\/!< integral unshared stack "$/;"	m	struct:Linux::rusage
ru_isrss	./kern/operatingsystem.hh	/^        int64_t ru_isrss;               \/\/!< integral unshared stack "$/;"	m	struct:OperatingSystem::__anon96
ru_isrss	./kern/tru64/tru64.hh	/^        uint64_t ru_isrss;              \/\/!< integral unshared stack "$/;"	m	struct:Tru64::rusage
ru_ixrss	./arch/arm/freebsd/freebsd.hh	/^        int32_t ru_ixrss;               \/\/!< integral shared memory size$/;"	m	struct:ArmFreebsd32::rusage
ru_ixrss	./arch/arm/freebsd/freebsd.hh	/^        int64_t ru_ixrss;               \/\/!< integral shared memory size$/;"	m	struct:ArmFreebsd64::rusage
ru_ixrss	./arch/arm/linux/linux.hh	/^        int32_t ru_ixrss;               \/\/!< integral shared memory size$/;"	m	struct:ArmLinux32::rusage
ru_ixrss	./arch/arm/linux/linux.hh	/^        int64_t ru_ixrss;               \/\/!< integral shared memory size$/;"	m	struct:ArmLinux64::rusage
ru_ixrss	./kern/linux/linux.hh	/^        int64_t ru_ixrss;               \/\/!< integral shared memory size$/;"	m	struct:Linux::rusage
ru_ixrss	./kern/operatingsystem.hh	/^        int64_t ru_ixrss;               \/\/!< integral shared memory size$/;"	m	struct:OperatingSystem::__anon96
ru_ixrss	./kern/tru64/tru64.hh	/^        uint64_t ru_ixrss;              \/\/!< integral shared memory size$/;"	m	struct:Tru64::rusage
ru_majflt	./arch/arm/freebsd/freebsd.hh	/^        int32_t ru_majflt;              \/\/!< page faults$/;"	m	struct:ArmFreebsd32::rusage
ru_majflt	./arch/arm/freebsd/freebsd.hh	/^        int64_t ru_majflt;              \/\/!< page faults$/;"	m	struct:ArmFreebsd64::rusage
ru_majflt	./arch/arm/linux/linux.hh	/^        int32_t ru_majflt;              \/\/!< page faults$/;"	m	struct:ArmLinux32::rusage
ru_majflt	./arch/arm/linux/linux.hh	/^        int64_t ru_majflt;              \/\/!< page faults$/;"	m	struct:ArmLinux64::rusage
ru_majflt	./kern/linux/linux.hh	/^        int64_t ru_majflt;              \/\/!< page faults$/;"	m	struct:Linux::rusage
ru_majflt	./kern/operatingsystem.hh	/^        int64_t ru_majflt;              \/\/!< page faults$/;"	m	struct:OperatingSystem::__anon96
ru_majflt	./kern/tru64/tru64.hh	/^        uint64_t ru_majflt;             \/\/!< page faults$/;"	m	struct:Tru64::rusage
ru_maxrss	./arch/arm/freebsd/freebsd.hh	/^        int32_t ru_maxrss;              \/\/!< max rss$/;"	m	struct:ArmFreebsd32::rusage
ru_maxrss	./arch/arm/freebsd/freebsd.hh	/^        int64_t ru_maxrss;              \/\/!< max rss$/;"	m	struct:ArmFreebsd64::rusage
ru_maxrss	./arch/arm/linux/linux.hh	/^        int32_t ru_maxrss;              \/\/!< max rss$/;"	m	struct:ArmLinux32::rusage
ru_maxrss	./arch/arm/linux/linux.hh	/^        int64_t ru_maxrss;              \/\/!< max rss$/;"	m	struct:ArmLinux64::rusage
ru_maxrss	./kern/linux/linux.hh	/^        int64_t ru_maxrss;              \/\/!< max rss$/;"	m	struct:Linux::rusage
ru_maxrss	./kern/operatingsystem.hh	/^        int64_t ru_maxrss;              \/\/!< max rss$/;"	m	struct:OperatingSystem::__anon96
ru_maxrss	./kern/tru64/tru64.hh	/^        uint64_t ru_maxrss;             \/\/!< ru_maxrss$/;"	m	struct:Tru64::rusage
ru_minflt	./arch/arm/freebsd/freebsd.hh	/^        int32_t ru_minflt;              \/\/!< page reclaims - total vmfaults$/;"	m	struct:ArmFreebsd32::rusage
ru_minflt	./arch/arm/freebsd/freebsd.hh	/^        int64_t ru_minflt;              \/\/!< page reclaims - total vmfaults$/;"	m	struct:ArmFreebsd64::rusage
ru_minflt	./arch/arm/linux/linux.hh	/^        int32_t ru_minflt;              \/\/!< page reclaims - total vmfaults$/;"	m	struct:ArmLinux32::rusage
ru_minflt	./arch/arm/linux/linux.hh	/^        int64_t ru_minflt;              \/\/!< page reclaims - total vmfaults$/;"	m	struct:ArmLinux64::rusage
ru_minflt	./kern/linux/linux.hh	/^        int64_t ru_minflt;              \/\/!< page reclaims - total vmfaults$/;"	m	struct:Linux::rusage
ru_minflt	./kern/operatingsystem.hh	/^        int64_t ru_minflt;              \/\/!< page reclaims - total vmfaults$/;"	m	struct:OperatingSystem::__anon96
ru_minflt	./kern/tru64/tru64.hh	/^        uint64_t ru_minflt;             \/\/!< page reclaims - total vmfaults$/;"	m	struct:Tru64::rusage
ru_msgrcv	./arch/arm/freebsd/freebsd.hh	/^        int32_t ru_msgrcv;              \/\/!< messages received$/;"	m	struct:ArmFreebsd32::rusage
ru_msgrcv	./arch/arm/freebsd/freebsd.hh	/^        int64_t ru_msgrcv;              \/\/!< messages received$/;"	m	struct:ArmFreebsd64::rusage
ru_msgrcv	./arch/arm/linux/linux.hh	/^        int32_t ru_msgrcv;              \/\/!< messages received$/;"	m	struct:ArmLinux32::rusage
ru_msgrcv	./arch/arm/linux/linux.hh	/^        int64_t ru_msgrcv;              \/\/!< messages received$/;"	m	struct:ArmLinux64::rusage
ru_msgrcv	./kern/linux/linux.hh	/^        int64_t ru_msgrcv;              \/\/!< messages received$/;"	m	struct:Linux::rusage
ru_msgrcv	./kern/operatingsystem.hh	/^        int64_t ru_msgrcv;              \/\/!< messages received$/;"	m	struct:OperatingSystem::__anon96
ru_msgrcv	./kern/tru64/tru64.hh	/^        uint64_t ru_msgrcv;             \/\/!< messages received$/;"	m	struct:Tru64::rusage
ru_msgsnd	./arch/arm/freebsd/freebsd.hh	/^        int32_t ru_msgsnd;              \/\/!< messages sent$/;"	m	struct:ArmFreebsd32::rusage
ru_msgsnd	./arch/arm/freebsd/freebsd.hh	/^        int64_t ru_msgsnd;              \/\/!< messages sent$/;"	m	struct:ArmFreebsd64::rusage
ru_msgsnd	./arch/arm/linux/linux.hh	/^        int32_t ru_msgsnd;              \/\/!< messages sent$/;"	m	struct:ArmLinux32::rusage
ru_msgsnd	./arch/arm/linux/linux.hh	/^        int64_t ru_msgsnd;              \/\/!< messages sent$/;"	m	struct:ArmLinux64::rusage
ru_msgsnd	./kern/linux/linux.hh	/^        int64_t ru_msgsnd;              \/\/!< messages sent$/;"	m	struct:Linux::rusage
ru_msgsnd	./kern/operatingsystem.hh	/^        int64_t ru_msgsnd;              \/\/!< messages sent$/;"	m	struct:OperatingSystem::__anon96
ru_msgsnd	./kern/tru64/tru64.hh	/^        uint64_t ru_msgsnd;             \/\/!< messages sent$/;"	m	struct:Tru64::rusage
ru_nivcsw	./arch/arm/freebsd/freebsd.hh	/^        int32_t ru_nivcsw;              \/\/!< involuntary "$/;"	m	struct:ArmFreebsd32::rusage
ru_nivcsw	./arch/arm/freebsd/freebsd.hh	/^        int64_t ru_nivcsw;              \/\/!< involuntary "$/;"	m	struct:ArmFreebsd64::rusage
ru_nivcsw	./arch/arm/linux/linux.hh	/^        int32_t ru_nivcsw;              \/\/!< involuntary "$/;"	m	struct:ArmLinux32::rusage
ru_nivcsw	./arch/arm/linux/linux.hh	/^        int64_t ru_nivcsw;              \/\/!< involuntary "$/;"	m	struct:ArmLinux64::rusage
ru_nivcsw	./kern/linux/linux.hh	/^        int64_t ru_nivcsw;              \/\/!< involuntary "$/;"	m	struct:Linux::rusage
ru_nivcsw	./kern/operatingsystem.hh	/^        int64_t ru_nivcsw;              \/\/!< involuntary "$/;"	m	struct:OperatingSystem::__anon96
ru_nivcsw	./kern/tru64/tru64.hh	/^        uint64_t ru_nivcsw;             \/\/!< involuntary "$/;"	m	struct:Tru64::rusage
ru_nsignals	./arch/arm/freebsd/freebsd.hh	/^        int32_t ru_nsignals;            \/\/!< signals received$/;"	m	struct:ArmFreebsd32::rusage
ru_nsignals	./arch/arm/freebsd/freebsd.hh	/^        int64_t ru_nsignals;            \/\/!< signals received$/;"	m	struct:ArmFreebsd64::rusage
ru_nsignals	./arch/arm/linux/linux.hh	/^        int32_t ru_nsignals;            \/\/!< signals received$/;"	m	struct:ArmLinux32::rusage
ru_nsignals	./arch/arm/linux/linux.hh	/^        int64_t ru_nsignals;            \/\/!< signals received$/;"	m	struct:ArmLinux64::rusage
ru_nsignals	./kern/linux/linux.hh	/^        int64_t ru_nsignals;            \/\/!< signals received$/;"	m	struct:Linux::rusage
ru_nsignals	./kern/operatingsystem.hh	/^        int64_t ru_nsignals;            \/\/!< signals received$/;"	m	struct:OperatingSystem::__anon96
ru_nsignals	./kern/tru64/tru64.hh	/^        uint64_t ru_nsignals;           \/\/!< signals received$/;"	m	struct:Tru64::rusage
ru_nswap	./arch/arm/freebsd/freebsd.hh	/^        int32_t ru_nswap;               \/\/!< swaps$/;"	m	struct:ArmFreebsd32::rusage
ru_nswap	./arch/arm/freebsd/freebsd.hh	/^        int64_t ru_nswap;               \/\/!< swaps$/;"	m	struct:ArmFreebsd64::rusage
ru_nswap	./arch/arm/linux/linux.hh	/^        int32_t ru_nswap;               \/\/!< swaps$/;"	m	struct:ArmLinux32::rusage
ru_nswap	./arch/arm/linux/linux.hh	/^        int64_t ru_nswap;               \/\/!< swaps$/;"	m	struct:ArmLinux64::rusage
ru_nswap	./kern/linux/linux.hh	/^        int64_t ru_nswap;               \/\/!< swaps$/;"	m	struct:Linux::rusage
ru_nswap	./kern/operatingsystem.hh	/^        int64_t ru_nswap;               \/\/!< swaps$/;"	m	struct:OperatingSystem::__anon96
ru_nswap	./kern/tru64/tru64.hh	/^        uint64_t ru_nswap;              \/\/!< swaps$/;"	m	struct:Tru64::rusage
ru_nvcsw	./arch/arm/freebsd/freebsd.hh	/^        int32_t ru_nvcsw;               \/\/!< voluntary context switches$/;"	m	struct:ArmFreebsd32::rusage
ru_nvcsw	./arch/arm/freebsd/freebsd.hh	/^        int64_t ru_nvcsw;               \/\/!< voluntary context switches$/;"	m	struct:ArmFreebsd64::rusage
ru_nvcsw	./arch/arm/linux/linux.hh	/^        int32_t ru_nvcsw;               \/\/!< voluntary context switches$/;"	m	struct:ArmLinux32::rusage
ru_nvcsw	./arch/arm/linux/linux.hh	/^        int64_t ru_nvcsw;               \/\/!< voluntary context switches$/;"	m	struct:ArmLinux64::rusage
ru_nvcsw	./kern/linux/linux.hh	/^        int64_t ru_nvcsw;               \/\/!< voluntary context switches$/;"	m	struct:Linux::rusage
ru_nvcsw	./kern/operatingsystem.hh	/^        int64_t ru_nvcsw;               \/\/!< voluntary context switches$/;"	m	struct:OperatingSystem::__anon96
ru_nvcsw	./kern/tru64/tru64.hh	/^        uint64_t ru_nvcsw;              \/\/!< voluntary context switches$/;"	m	struct:Tru64::rusage
ru_oublock	./arch/arm/freebsd/freebsd.hh	/^        int32_t ru_oublock;             \/\/!< block output operations$/;"	m	struct:ArmFreebsd32::rusage
ru_oublock	./arch/arm/freebsd/freebsd.hh	/^        int64_t ru_oublock;             \/\/!< block output operations$/;"	m	struct:ArmFreebsd64::rusage
ru_oublock	./arch/arm/linux/linux.hh	/^        int32_t ru_oublock;             \/\/!< block output operations$/;"	m	struct:ArmLinux32::rusage
ru_oublock	./arch/arm/linux/linux.hh	/^        int64_t ru_oublock;             \/\/!< block output operations$/;"	m	struct:ArmLinux64::rusage
ru_oublock	./kern/linux/linux.hh	/^        int64_t ru_oublock;             \/\/!< block output operations$/;"	m	struct:Linux::rusage
ru_oublock	./kern/operatingsystem.hh	/^        int64_t ru_oublock;             \/\/!< block output operations$/;"	m	struct:OperatingSystem::__anon96
ru_oublock	./kern/tru64/tru64.hh	/^        uint64_t ru_oublock;            \/\/!< block output operations$/;"	m	struct:Tru64::rusage
ru_stime	./arch/arm/freebsd/freebsd.hh	/^        struct timeval ru_stime;        \/\/!< system time used$/;"	m	struct:ArmFreebsd32::rusage	typeref:struct:ArmFreebsd32::rusage::timeval
ru_stime	./arch/arm/freebsd/freebsd.hh	/^        struct timeval ru_stime;        \/\/!< system time used$/;"	m	struct:ArmFreebsd64::rusage	typeref:struct:ArmFreebsd64::rusage::timeval
ru_stime	./arch/arm/linux/linux.hh	/^        struct timeval ru_stime;        \/\/!< system time used$/;"	m	struct:ArmLinux32::rusage	typeref:struct:ArmLinux32::rusage::timeval
ru_stime	./arch/arm/linux/linux.hh	/^        struct timeval ru_stime;        \/\/!< system time used$/;"	m	struct:ArmLinux64::rusage	typeref:struct:ArmLinux64::rusage::timeval
ru_stime	./kern/linux/linux.hh	/^        struct timeval ru_stime;        \/\/!< system time used$/;"	m	struct:Linux::rusage	typeref:struct:Linux::rusage::timeval
ru_stime	./kern/operatingsystem.hh	/^        timeval ru_stime;       \/\/!< system time used$/;"	m	struct:OperatingSystem::__anon96
ru_stime	./kern/tru64/tru64.hh	/^        struct timeval ru_stime;        \/\/!< system time used$/;"	m	struct:Tru64::rusage	typeref:struct:Tru64::rusage::timeval
ru_utime	./arch/arm/freebsd/freebsd.hh	/^        struct timeval ru_utime;        \/\/!< user time used$/;"	m	struct:ArmFreebsd32::rusage	typeref:struct:ArmFreebsd32::rusage::timeval
ru_utime	./arch/arm/freebsd/freebsd.hh	/^        struct timeval ru_utime;        \/\/!< user time used$/;"	m	struct:ArmFreebsd64::rusage	typeref:struct:ArmFreebsd64::rusage::timeval
ru_utime	./arch/arm/linux/linux.hh	/^        struct timeval ru_utime;        \/\/!< user time used$/;"	m	struct:ArmLinux32::rusage	typeref:struct:ArmLinux32::rusage::timeval
ru_utime	./arch/arm/linux/linux.hh	/^        struct timeval ru_utime;        \/\/!< user time used$/;"	m	struct:ArmLinux64::rusage	typeref:struct:ArmLinux64::rusage::timeval
ru_utime	./kern/linux/linux.hh	/^        struct timeval ru_utime;        \/\/!< user time used$/;"	m	struct:Linux::rusage	typeref:struct:Linux::rusage::timeval
ru_utime	./kern/operatingsystem.hh	/^        timeval ru_utime;       \/\/!< user time used$/;"	m	struct:OperatingSystem::__anon96
ru_utime	./kern/tru64/tru64.hh	/^        struct timeval ru_utime;        \/\/!< user time used$/;"	m	struct:Tru64::rusage	typeref:struct:Tru64::rusage::timeval
ruby_eviction_callback	./mem/ruby/system/RubyPort.cc	/^RubyPort::ruby_eviction_callback(Addr address)$/;"	f	class:RubyPort
ruby_hit_callback	./mem/ruby/system/DMASequencer.cc	/^DMASequencer::ruby_hit_callback(PacketPtr pkt)$/;"	f	class:DMASequencer
ruby_hit_callback	./mem/ruby/system/RubyPort.cc	/^RubyPort::ruby_hit_callback(PacketPtr pkt)$/;"	f	class:RubyPort
ruby_system	./mem/ruby/network/Network.py	/^    ruby_system = Param.RubySystem("")$/;"	v	class:RubyNetwork
ruby_system	./mem/ruby/slicc_interface/Controller.py	/^    ruby_system = Param.RubySystem("")$/;"	v	class:RubyController
ruby_system	./mem/ruby/structures/RubyCache.py	/^    ruby_system = Param.RubySystem(Parent.any, "")$/;"	v	class:RubyCache
ruby_system	./mem/ruby/structures/WireBuffer.py	/^    ruby_system = Param.RubySystem(Parent.any, "")$/;"	v	class:RubyWireBuffer
ruby_system	./mem/ruby/system/Sequencer.py	/^    ruby_system = Param.RubySystem(Parent.any, "")$/;"	v	class:DMASequencer
ruby_system	./mem/ruby/system/Sequencer.py	/^    ruby_system = Param.RubySystem(Parent.any, "")$/;"	v	class:RubyPort
run	./dev/net/dist_iface.cc	/^DistIface::SyncNode::run(bool same_tick)$/;"	f	class:DistIface::SyncNode
run	./dev/net/dist_iface.cc	/^DistIface::SyncSwitch::run(bool same_tick)$/;"	f	class:DistIface::SyncSwitch
run	./unittest/stattest.cc	/^StatTest::run()$/;"	f	class:StatTest
runTimer	./cpu/kvm/base.hh	/^    std::unique_ptr<BaseKvmTimer> runTimer;$/;"	m	class:BaseKvmCPU
running	./dev/intel_8254_timer.hh	/^        bool running;$/;"	m	class:Intel8254Timer::Counter
running	./sim/ticked_object.hh	/^    bool running;$/;"	m	class:Ticked
rusage	./arch/arm/freebsd/freebsd.hh	/^    struct rusage {$/;"	s	class:ArmFreebsd32
rusage	./arch/arm/freebsd/freebsd.hh	/^    struct rusage {$/;"	s	class:ArmFreebsd64
rusage	./arch/arm/linux/linux.hh	/^    struct rusage {$/;"	s	class:ArmLinux32
rusage	./arch/arm/linux/linux.hh	/^    struct rusage {$/;"	s	class:ArmLinux64
rusage	./kern/linux/linux.hh	/^    struct rusage {$/;"	s	class:Linux
rusage	./kern/operatingsystem.hh	/^    } rusage;$/;"	t	class:OperatingSystem	typeref:struct:OperatingSystem::__anon96
rusage	./kern/tru64/tru64.hh	/^    struct rusage {$/;"	s	class:Tru64
rvec	./base/statistics.hh	/^    mutable VResult rvec;$/;"	m	class:Stats::VectorInfoProxy
rvec	./base/stats/info.hh	/^    mutable VResult rvec;$/;"	m	class:Stats::VectorDistInfo
rw	./arch/arm/miscregs.hh	/^        Bitfield<10> rw;  \/\/ AArch64$/;"	m	namespace:ArmISA
rw	./arch/arm/miscregs.hh	/^        Bitfield<31>     rw;    \/\/ AArch64$/;"	m	namespace:ArmISA
rw	./arch/arm/table_walker.hh	/^        bool rw() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
rw	./dev/intel_8254_timer.hh	/^        Bitfield<5, 4> rw;$/;"	m	class:Intel8254Timer
rw	./dev/storage/ide_ctrl.hh	/^        Bitfield<3> rw;$/;"	m	class:IdeController
rw0	./arch/x86/regs/misc.hh	/^        Bitfield<17, 16> rw0;$/;"	m	namespace:X86ISA
rw1	./arch/x86/regs/misc.hh	/^        Bitfield<21, 20> rw1;$/;"	m	namespace:X86ISA
rw2	./arch/x86/regs/misc.hh	/^        Bitfield<25, 24> rw2;$/;"	m	namespace:X86ISA
rw3	./arch/x86/regs/misc.hh	/^        Bitfield<29, 28> rw3;$/;"	m	namespace:X86ISA
rwTable	./arch/arm/table_walker.hh	/^        bool rwTable;$/;"	m	class:ArmISA::TableWalker::WalkerState
rwTable	./arch/arm/table_walker.hh	/^        uint8_t rwTable() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
rx	./dev/arm/kmi.hh	/^        Bitfield<0> rx;$/;"	m	class:Pl050
rxActive	./dev/net/sinic.hh	/^    int rxActive;$/;"	m	class:Sinic::Device
rxAdvance	./dev/net/ns_gige.hh	/^        rxAdvance$/;"	e	enum:NSGigE::RxState
rxBandwidth	./dev/net/etherdevice.hh	/^    Stats::Formula rxBandwidth;$/;"	m	class:EtherDevice
rxBeginCopy	./dev/net/sinic.hh	/^        rxBeginCopy,$/;"	e	enum:Sinic::Device::RxState
rxBusy	./dev/net/sinic.hh	/^    VirtualList rxBusy;$/;"	m	class:Sinic::Device
rxBusyCount	./dev/net/sinic.hh	/^    int rxBusyCount;$/;"	m	class:Sinic::Device
rxBytes	./dev/net/etherdevice.hh	/^    Stats::Scalar rxBytes;$/;"	m	class:EtherDevice
rxCopy	./dev/net/sinic.hh	/^        rxCopy,$/;"	e	enum:Sinic::Device::RxState
rxCopyDone	./dev/net/sinic.hh	/^        rxCopyDone$/;"	e	enum:Sinic::Device::RxState
rxDelay	./dev/net/ns_gige.hh	/^    Tick rxDelay;$/;"	m	class:NSGigE
rxDesc32	./dev/net/ns_gige.hh	/^    ns_desc32 rxDesc32;$/;"	m	class:NSGigE
rxDesc64	./dev/net/ns_gige.hh	/^    ns_desc64 rxDesc64;$/;"	m	class:NSGigE
rxDescCache	./dev/net/i8254xGBe.hh	/^    RxDescCache rxDescCache;$/;"	m	class:IGbE
rxDescCnt	./dev/net/ns_gige.hh	/^    uint32_t rxDescCnt;$/;"	m	class:NSGigE
rxDescRead	./dev/net/ns_gige.hh	/^        rxDescRead,$/;"	e	enum:NSGigE::RxState
rxDescRefr	./dev/net/ns_gige.hh	/^        rxDescRefr,$/;"	e	enum:NSGigE::RxState
rxDescWrite	./dev/net/ns_gige.hh	/^        rxDescWrite,$/;"	e	enum:NSGigE::RxState
rxDirtyCount	./dev/net/sinic.hh	/^    int rxDirtyCount;$/;"	m	class:Sinic::Device
rxDmaAddr	./dev/net/ns_gige.hh	/^    Addr  rxDmaAddr;$/;"	m	class:NSGigE
rxDmaAddr	./dev/net/sinic.hh	/^    Addr rxDmaAddr;$/;"	m	class:Sinic::Device
rxDmaData	./dev/net/ns_gige.hh	/^    void *rxDmaData;$/;"	m	class:NSGigE
rxDmaData	./dev/net/sinic.hh	/^    uint8_t *rxDmaData;$/;"	m	class:Sinic::Device
rxDmaDone	./dev/net/sinic.cc	/^Device::rxDmaDone()$/;"	f	class:Sinic::Device
rxDmaEvent	./dev/net/sinic.hh	/^    EventWrapper<Device, &Device::rxDmaDone> rxDmaEvent;$/;"	m	class:Sinic::Device
rxDmaFree	./dev/net/ns_gige.hh	/^    bool rxDmaFree;$/;"	m	class:NSGigE
rxDmaLen	./dev/net/ns_gige.hh	/^    int   rxDmaLen;$/;"	m	class:NSGigE
rxDmaLen	./dev/net/sinic.hh	/^    unsigned rxDmaLen;$/;"	m	class:Sinic::Device
rxDmaPacket	./dev/net/i8254xGBe.hh	/^    bool rxDmaPacket;$/;"	m	class:IGbE
rxDmaReadDone	./dev/net/ns_gige.cc	/^NSGigE::rxDmaReadDone()$/;"	f	class:NSGigE
rxDmaReadEvent	./dev/net/ns_gige.hh	/^    EventWrapper<NSGigE, &NSGigE::rxDmaReadDone> rxDmaReadEvent;$/;"	m	class:NSGigE
rxDmaState	./dev/net/ns_gige.hh	/^    DmaState rxDmaState;$/;"	m	class:NSGigE
rxDmaWriteDone	./dev/net/ns_gige.cc	/^NSGigE::rxDmaWriteDone()$/;"	f	class:NSGigE
rxDmaWriteEvent	./dev/net/ns_gige.hh	/^    EventWrapper<NSGigE, &NSGigE::rxDmaWriteDone> rxDmaWriteEvent;$/;"	m	class:NSGigE
rxDone	./dev/net/dist_etherlink.cc	/^DistEtherLink::RxLink::rxDone()$/;"	f	class:DistEtherLink::RxLink
rxDoneData	./dev/net/sinic.hh	/^        uint64_t rxDoneData;$/;"	m	struct:Sinic::Device::VirtualReg
rxEmpty	./dev/net/sinic.hh	/^    bool rxEmpty;$/;"	m	class:Sinic::Device
rxEnable	./dev/net/ns_gige.hh	/^    bool rxEnable;$/;"	m	class:NSGigE
rxEnable	./dev/net/sinic.hh	/^    bool rxEnable;$/;"	m	class:Sinic::Base
rxFifo	./dev/net/i8254xGBe.hh	/^    PacketFifo rxFifo;$/;"	m	class:IGbE
rxFifo	./dev/net/ns_gige.hh	/^    PacketFifo rxFifo;$/;"	m	class:NSGigE
rxFifo	./dev/net/sinic.hh	/^    PacketFifo rxFifo;$/;"	m	class:Sinic::Device
rxFifoBlock	./dev/net/ns_gige.hh	/^        rxFifoBlock,$/;"	e	enum:NSGigE::RxState
rxFifoBlock	./dev/net/sinic.hh	/^        rxFifoBlock,$/;"	e	enum:Sinic::Device::RxState
rxFifoPtr	./dev/net/sinic.hh	/^    PacketFifo::iterator rxFifoPtr;$/;"	m	class:Sinic::Device
rxFilter	./dev/net/ns_gige.cc	/^NSGigE::rxFilter(const EthPacketPtr &packet)$/;"	f	class:NSGigE
rxFilter	./dev/net/sinic.cc	/^Device::rxFilter(const EthPacketPtr &packet)$/;"	f	class:Sinic::Device
rxFilterEnable	./dev/net/ns_gige.hh	/^    bool rxFilterEnable;$/;"	m	class:NSGigE
rxFragPtr	./dev/net/ns_gige.hh	/^    Addr rxFragPtr;$/;"	m	class:NSGigE
rxFragWrite	./dev/net/ns_gige.hh	/^        rxFragWrite,$/;"	e	enum:NSGigE::RxState
rxHalt	./dev/net/ns_gige.hh	/^    bool rxHalt;$/;"	m	class:NSGigE
rxIdle	./dev/net/ns_gige.hh	/^        rxIdle,$/;"	e	enum:NSGigE::RxState
rxIdle	./dev/net/sinic.hh	/^        rxIdle,$/;"	e	enum:Sinic::Device::RxState
rxIndex	./dev/net/sinic.hh	/^        PacketFifo::iterator rxIndex;$/;"	m	struct:Sinic::Device::VirtualReg
rxIntrEvent	./dev/uart8250.hh	/^    IntrEvent rxIntrEvent;$/;"	m	class:Uart8250
rxIpChecksums	./dev/net/etherdevice.hh	/^    Stats::Scalar rxIpChecksums;$/;"	m	class:EtherDevice
rxKick	./dev/net/ns_gige.cc	/^NSGigE::rxKick()$/;"	f	class:NSGigE
rxKick	./dev/net/sinic.cc	/^Device::rxKick()$/;"	f	class:Sinic::Device
rxKickEvent	./dev/net/ns_gige.hh	/^    RxKickEvent rxKickEvent;$/;"	m	class:NSGigE
rxKickTick	./dev/net/ns_gige.hh	/^    Tick rxKickTick;$/;"	m	class:NSGigE
rxKickTick	./dev/net/sinic.hh	/^    Tick rxKickTick;$/;"	m	class:Sinic::Device
rxLink	./dev/net/dist_etherlink.hh	/^    RxLink *rxLink;$/;"	m	class:DistEtherLink
rxList	./dev/net/sinic.hh	/^    VirtualList rxList;$/;"	m	class:Sinic::Device
rxLow	./dev/net/sinic.hh	/^    bool rxLow;$/;"	m	class:Sinic::Device
rxMappedCount	./dev/net/sinic.hh	/^    int rxMappedCount;$/;"	m	class:Sinic::Device
rxPacket	./dev/net/ns_gige.hh	/^    EthPacketPtr rxPacket;$/;"	m	class:NSGigE
rxPacketBufPtr	./dev/net/ns_gige.hh	/^    uint8_t *rxPacketBufPtr;$/;"	m	class:NSGigE
rxPacketBytes	./dev/net/sinic.hh	/^        unsigned rxPacketBytes;$/;"	m	struct:Sinic::Device::VirtualReg
rxPacketOffset	./dev/net/sinic.hh	/^        unsigned rxPacketOffset;$/;"	m	struct:Sinic::Device::VirtualReg
rxPacketRate	./dev/net/etherdevice.hh	/^    Stats::Formula rxPacketRate;$/;"	m	class:EtherDevice
rxPackets	./dev/net/etherdevice.hh	/^    Stats::Scalar rxPackets;$/;"	m	class:EtherDevice
rxPktBytes	./dev/net/ns_gige.hh	/^    uint32_t rxPktBytes;$/;"	m	class:NSGigE
rxQueue	./dev/arm/kmi.hh	/^    std::list<uint8_t> rxQueue;$/;"	m	class:Pl050
rxReset	./dev/net/ns_gige.cc	/^NSGigE::rxReset()$/;"	f	class:NSGigE
rxState	./dev/net/ns_gige.hh	/^    RxState rxState;$/;"	m	class:NSGigE
rxState	./dev/net/sinic.hh	/^    RxState rxState;$/;"	m	class:Sinic::Device
rxStateMachine	./dev/net/i8254xGBe.cc	/^IGbE::rxStateMachine()$/;"	f	class:IGbE
rxTcpChecksums	./dev/net/etherdevice.hh	/^    Stats::Scalar rxTcpChecksums;$/;"	m	class:EtherDevice
rxTick	./dev/net/i8254xGBe.hh	/^    bool rxTick;$/;"	m	class:IGbE
rxUdpChecksums	./dev/net/etherdevice.hh	/^    Stats::Scalar rxUdpChecksums;$/;"	m	class:EtherDevice
rxUnique	./dev/net/sinic.hh	/^        Counter rxUnique;$/;"	m	struct:Sinic::Device::VirtualReg
rxUnique	./dev/net/sinic.hh	/^    Counter rxUnique;$/;"	m	class:Sinic::Device
rxWriteDelay	./dev/net/i8254xGBe.hh	/^    Tick rxWriteDelay, txReadDelay;$/;"	m	class:IGbE
rxXferLen	./dev/net/ns_gige.hh	/^    uint32_t rxXferLen;$/;"	m	class:NSGigE
rx_delay	./dev/net/Ethernet.py	/^    rx_delay = Param.Latency('1us', "Receive Delay")$/;"	v	class:EtherDevBase
rx_desc_cache_size	./dev/net/Ethernet.py	/^    rx_desc_cache_size = Param.Int(64,$/;"	v	class:IGbE
rx_fifo_low_mark	./dev/net/Ethernet.py	/^    rx_fifo_low_mark = Param.MemorySize('128kB', "rx fifo low threshold")$/;"	v	class:Sinic
rx_fifo_size	./dev/net/Ethernet.py	/^    rx_fifo_size = Param.MemorySize('384kB', "Size of the rx FIFO")$/;"	v	class:IGbE
rx_fifo_size	./dev/net/Ethernet.py	/^    rx_fifo_size = Param.MemorySize('512kB', "max size of rx fifo")$/;"	v	class:EtherDevBase
rx_fifo_threshold	./dev/net/Ethernet.py	/^    rx_fifo_threshold = Param.MemorySize('384kB', "rx fifo high threshold")$/;"	v	class:Sinic
rx_filter	./dev/net/Ethernet.py	/^    rx_filter = Param.Bool(True, "Enable Receive Filter")$/;"	v	class:EtherDevBase
rx_max_copy	./dev/net/Ethernet.py	/^    rx_max_copy = Param.MemorySize('1514B', "rx max copy")$/;"	v	class:Sinic
rx_max_intr	./dev/net/Ethernet.py	/^    rx_max_intr = Param.UInt32(10, "max rx packets per interrupt")$/;"	v	class:Sinic
rx_thread	./dev/net/Ethernet.py	/^    rx_thread = Param.Bool(False, "dedicated kernel thread for transmit")$/;"	v	class:EtherDevBase
rx_write_delay	./dev/net/Ethernet.py	/^    rx_write_delay = Param.Latency('0ns', "delay after rx dma read")$/;"	v	class:IGbE
rxbuf	./dev/terminal.hh	/^    CircleBuf<char> rxbuf;$/;"	m	class:Terminal
rxbusy	./dev/arm/kmi.hh	/^        Bitfield<3> rxbusy;$/;"	m	class:Pl050
rxcfg	./dev/net/ns_gige.hh	/^    uint32_t    rxcfg;$/;"	m	struct:dp_regs
rxcsum	./dev/net/i8254xGBe_defs.hh	/^    RXCSUM rxcsum;$/;"	m	struct:iGbReg::Regs
rxdctl	./dev/net/i8254xGBe_defs.hh	/^    RXDCTL rxdctl;$/;"	m	struct:iGbReg::Regs
rxdp	./dev/net/ns_gige.hh	/^    uint32_t    rxdp;$/;"	m	struct:dp_regs
rxdp_hi	./dev/net/ns_gige.hh	/^    uint32_t    rxdp_hi;$/;"	m	struct:dp_regs
rxfull	./dev/arm/kmi.hh	/^        Bitfield<4> rxfull;$/;"	m	class:Pl050
rxint	./dev/net/etherlink.hh	/^        Interface *rxint;$/;"	m	class:EtherLink::Link
rxint_enable	./dev/arm/kmi.hh	/^        Bitfield<4> rxint_enable;$/;"	m	class:Pl050
rxparity	./dev/arm/kmi.hh	/^        Bitfield<2> rxparity;$/;"	m	class:Pl050
s	./arch/arm/kvm/armv8_cpu.cc	/^    } s[4];$/;"	m	union:KvmFPReg	typeref:union:KvmFPReg::__anon80	file:
s	./arch/arm/miscregs.hh	/^        Bitfield<4> s;$/;"	m	namespace:ArmISA
s	./arch/mips/dt_constants.hh	/^    Bitfield<22>     s;$/;"	m	namespace:MipsISA
s	./arch/mips/pra_constants.hh	/^    Bitfield<2>     s;$/;"	m	namespace:MipsISA
s	./arch/x86/regs/misc.hh	/^        Bitfield<44> s; \/\/ System$/;"	m	namespace:X86ISA
s	./base/statistics.hh	/^    Stat &s;$/;"	m	class:Stats::InfoProxy
s	./sim/core.cc	/^Tick s;$/;"	m	namespace:SimClock::Int	file:
s	./sim/core.cc	/^double s;$/;"	m	namespace:SimClock::Float	file:
s1	./unittest/stattest.cc	/^    Scalar s1;$/;"	m	struct:StatTest	file:
s10	./unittest/stattest.cc	/^    AverageDeviation s10;$/;"	m	struct:StatTest	file:
s11	./unittest/stattest.cc	/^    Scalar s11;$/;"	m	struct:StatTest	file:
s12	./unittest/stattest.cc	/^    Distribution s12;$/;"	m	struct:StatTest	file:
s13	./unittest/stattest.cc	/^    VectorDistribution s13;$/;"	m	struct:StatTest	file:
s14	./unittest/stattest.cc	/^    VectorStandardDeviation s14;$/;"	m	struct:StatTest	file:
s15	./unittest/stattest.cc	/^    VectorAverageDeviation s15;$/;"	m	struct:StatTest	file:
s16	./unittest/stattest.cc	/^    Vector2d s16;$/;"	m	struct:StatTest	file:
s17	./unittest/stattest.cc	/^    Value s17;$/;"	m	struct:StatTest	file:
s18	./unittest/stattest.cc	/^    Value s18;$/;"	m	struct:StatTest	file:
s19	./unittest/stattest.cc	/^    Vector s19;$/;"	m	struct:StatTest	file:
s1Req	./arch/arm/stage2_lookup.hh	/^    RequestPtr              s1Req;$/;"	m	class:ArmISA::Stage2LookUp
s1ptw	./arch/arm/faults.hh	/^    bool s1ptw;$/;"	m	class:ArmISA::AbortFault
s2	./unittest/stattest.cc	/^    Scalar s2;$/;"	m	struct:StatTest	file:
s20	./unittest/stattest.cc	/^    Vector s20;$/;"	m	struct:StatTest	file:
s3	./unittest/stattest.cc	/^    Average s3;$/;"	m	struct:StatTest	file:
s4	./unittest/stattest.cc	/^    Scalar s4;$/;"	m	struct:StatTest	file:
s5	./unittest/stattest.cc	/^    Vector s5;$/;"	m	struct:StatTest	file:
s6	./unittest/stattest.cc	/^    Distribution s6;$/;"	m	struct:StatTest	file:
s7	./unittest/stattest.cc	/^    Vector s7;$/;"	m	struct:StatTest	file:
s8	./unittest/stattest.cc	/^    AverageVector s8;$/;"	m	struct:StatTest	file:
s9	./unittest/stattest.cc	/^    StandardDeviation s9;$/;"	m	struct:StatTest	file:
sField	./arch/arm/types.hh	/^        Bitfield<20>     sField;$/;"	m	namespace:ArmISA
sTickCompare	./arch/sparc/isa.hh	/^    STickCompareEvent *sTickCompare;$/;"	m	class:SparcISA::ISA
s_flags	./base/loader/exec_ecoff.h	/^        coff_uint   s_flags;	\/* flags *\/$/;"	m	struct:ecoff_scnhdr
s_init	./mem/ruby/profiler/StoreTrace.hh	/^    static bool s_init;$/;"	m	class:StoreTrace
s_lnnoptr	./base/loader/exec_ecoff.h	/^        coff_ulong  s_lnnoptr;	\/* file offset of line data *\/$/;"	m	struct:ecoff_scnhdr
s_name	./base/loader/exec_ecoff.h	/^        char	s_name[8];	\/* name *\/$/;"	m	struct:ecoff_scnhdr
s_nlnno	./base/loader/exec_ecoff.h	/^        coff_ushort s_nlnno;	\/* # of line entries *\/$/;"	m	struct:ecoff_scnhdr
s_nreloc	./base/loader/exec_ecoff.h	/^        coff_ushort s_nreloc;	\/* # of relocation entries *\/$/;"	m	struct:ecoff_scnhdr
s_paddr	./base/loader/exec_ecoff.h	/^        coff_ulong  s_paddr;	\/* physical addr? for ROMing?*\/$/;"	m	struct:ecoff_scnhdr
s_relptr	./base/loader/exec_ecoff.h	/^        coff_ulong  s_relptr;	\/* file offset of reloc data *\/$/;"	m	struct:ecoff_scnhdr
s_scnptr	./base/loader/exec_ecoff.h	/^        coff_ulong  s_scnptr;	\/* file offset of raw data *\/$/;"	m	struct:ecoff_scnhdr
s_size	./base/loader/exec_ecoff.h	/^        coff_ulong  s_size;		\/* size *\/$/;"	m	struct:ecoff_scnhdr
s_store_count_ptr	./mem/ruby/profiler/StoreTrace.cc	/^Histogram* StoreTrace::s_store_count_ptr = NULL;$/;"	m	class:StoreTrace	file:
s_store_count_ptr	./mem/ruby/profiler/StoreTrace.hh	/^    static Histogram* s_store_count_ptr;$/;"	m	class:StoreTrace
s_store_first_to_last_ptr	./mem/ruby/profiler/StoreTrace.cc	/^Histogram* StoreTrace::s_store_first_to_last_ptr = NULL;$/;"	m	class:StoreTrace	file:
s_store_first_to_last_ptr	./mem/ruby/profiler/StoreTrace.hh	/^    static Histogram* s_store_first_to_last_ptr;$/;"	m	class:StoreTrace
s_store_first_to_stolen_ptr	./mem/ruby/profiler/StoreTrace.cc	/^Histogram* StoreTrace::s_store_first_to_stolen_ptr = NULL;$/;"	m	class:StoreTrace	file:
s_store_first_to_stolen_ptr	./mem/ruby/profiler/StoreTrace.hh	/^    static Histogram* s_store_first_to_stolen_ptr;$/;"	m	class:StoreTrace
s_store_last_to_stolen_ptr	./mem/ruby/profiler/StoreTrace.cc	/^Histogram* StoreTrace::s_store_last_to_stolen_ptr = NULL;$/;"	m	class:StoreTrace	file:
s_store_last_to_stolen_ptr	./mem/ruby/profiler/StoreTrace.hh	/^    static Histogram* s_store_last_to_stolen_ptr;$/;"	m	class:StoreTrace
s_total_samples	./mem/ruby/profiler/StoreTrace.cc	/^int64_t StoreTrace::s_total_samples = 0; \/\/ Total number of store$/;"	m	class:StoreTrace	file:
s_total_samples	./mem/ruby/profiler/StoreTrace.hh	/^    static int64_t s_total_samples; \/\/ Total number of store lifetimes$/;"	m	class:StoreTrace
s_vaddr	./base/loader/exec_ecoff.h	/^        coff_ulong  s_vaddr;	\/* virtual addr? *\/$/;"	m	struct:ecoff_scnhdr
sa	./arch/arm/miscregs.hh	/^        Bitfield<3>    sa;      \/\/ Stack Alignment Check Enable (AArch64 only)$/;"	m	namespace:ArmISA
sa	./arch/mips/pra_constants.hh	/^    Bitfield<3,  0>  sa;$/;"	m	namespace:MipsISA
sa0	./arch/arm/miscregs.hh	/^        Bitfield<4>    sa0;     \/\/ Stack Alignment Check Enable for EL0$/;"	m	namespace:ArmISA
safe_cast	./base/cast.hh	/^safe_cast(U ptr)$/;"	f
samePage	./mem/cache/prefetch/base.cc	/^BasePrefetcher::samePage(Addr a, Addr b) const$/;"	f	class:BasePrefetcher
sample	./base/statistics.hh	/^    sample(Counter val, int number)$/;"	f	class:Stats::AvgSampleStor
sample	./base/statistics.hh	/^    sample(Counter val, int number)$/;"	f	class:Stats::DistStor
sample	./base/statistics.hh	/^    sample(Counter val, int number)$/;"	f	class:Stats::HistStor
sample	./base/statistics.hh	/^    sample(Counter val, int number)$/;"	f	class:Stats::SampleStor
sample	./base/statistics.hh	/^    sample(Counter val, int number)$/;"	f	class:Stats::SparseHistStor
sample	./base/statistics.hh	/^    sample(const U &v, int n = 1)$/;"	f	class:Stats::DistProxy
sample	./base/statistics.hh	/^    void sample(const U &v, int n = 1) { data()->sample(v, n); }$/;"	f	class:Stats::DistBase
sample	./base/statistics.hh	/^    void sample(const U &v, int n = 1) { data()->sample(v, n); }$/;"	f	class:Stats::SparseHistBase
sample	./cpu/profile.cc	/^FunctionProfile::sample(ProfileNode *node, Addr pc)$/;"	f	class:FunctionProfile
samplePeriod	./cpu/kvm/perfevent.hh	/^    PerfKvmCounterConfig &samplePeriod(uint64_t period) {$/;"	f	class:PerfKvmCounterConfig
samplePeriod	./mem/comm_monitor.hh	/^    const double samplePeriod;$/;"	m	class:CommMonitor
samplePeriodTicks	./mem/comm_monitor.hh	/^    const Tick samplePeriodTicks;$/;"	m	class:CommMonitor
samplePeriodic	./mem/comm_monitor.cc	/^CommMonitor::samplePeriodic()$/;"	f	class:CommMonitor
samplePeriodicEvent	./mem/comm_monitor.hh	/^    EventWrapper<CommMonitor, &CommMonitor::samplePeriodic> samplePeriodicEvent;$/;"	m	class:CommMonitor
sampleRate	./dev/x86/i8042.hh	/^    uint8_t sampleRate;$/;"	m	class:X86ISA::PS2Mouse
sample_period	./mem/CommMonitor.py	/^    sample_period = Param.Clock("1ms", "Sample period for histograms")$/;"	v	class:CommMonitor
sampledRefs	./mem/cache/tags/base.hh	/^    Stats::Scalar sampledRefs;$/;"	m	class:BaseTags
samples	./base/statistics.hh	/^    Counter samples;$/;"	m	class:Stats::DistStor
samples	./base/statistics.hh	/^    Counter samples;$/;"	m	class:Stats::HistStor
samples	./base/statistics.hh	/^    Counter samples;$/;"	m	class:Stats::SampleStor
samples	./base/statistics.hh	/^    Counter samples;$/;"	m	class:Stats::SparseHistStor
samples	./base/stats/info.hh	/^    Counter samples;$/;"	m	struct:Stats::DistData
samples	./base/stats/info.hh	/^    Counter samples;$/;"	m	struct:Stats::SparseHistData
sanitiseVoltages	./sim/voltage_domain.cc	/^VoltageDomain::sanitiseVoltages()$/;"	f	class:VoltageDomain
sanityCheckTree	./mem/stack_dist_calc.cc	/^StackDistCalc::sanityCheckTree(const Node* node, uint64_t level) const$/;"	f	class:StackDistCalc
sas	./arch/arm/faults.hh	/^    uint8_t sas;$/;"	m	class:ArmISA::DataAbort
satInt	./arch/arm/insts/static_inst.hh	/^    satInt(int32_t &res, int64_t op, int width)$/;"	f	class:ArmISA::ArmStaticInst
sataRAMLatency	./arch/arm/miscregs.hh	/^      Bitfield<2,0>   sataRAMLatency;$/;"	m	namespace:ArmISA
satid	./base/inet.hh	/^    uint16_t satid() const { return ntohs(opt_data.satid); }$/;"	f	struct:Net::IpOpt
satisfyCpuSideRequest	./mem/cache/cache.cc	/^Cache::satisfyCpuSideRequest(PacketPtr pkt, CacheBlk *blk,$/;"	f	class:Cache
saturateOp	./arch/arm/insts/static_inst.hh	/^    saturateOp(int32_t &res, int64_t op1, int64_t op2, bool sub=false)$/;"	f	class:ArmISA::ArmStaticInst
save	./dev/storage/disk_image.cc	/^CowDiskImage::save() const$/;"	f	class:CowDiskImage
save	./dev/storage/disk_image.cc	/^CowDiskImage::save(const string &file) const$/;"	f	class:CowDiskImage
savedReq	./cpu/base_dyn_inst.hh	/^    RequestPtr savedReq;$/;"	m	class:BaseDynInst
savedSreqHigh	./cpu/base_dyn_inst.hh	/^    RequestPtr savedSreqHigh;$/;"	m	class:BaseDynInst
savedSreqLow	./cpu/base_dyn_inst.hh	/^    RequestPtr savedSreqLow;$/;"	m	class:BaseDynInst
saved_fill	./base/cprintf.hh	/^    char saved_fill;$/;"	m	struct:cp::Print
saved_flags	./base/cprintf.hh	/^    std::ios::fmtflags saved_flags;$/;"	m	struct:cp::Print
saved_precision	./base/cprintf.hh	/^    int saved_precision;$/;"	m	struct:cp::Print
sbrk	./kern/tru64/tru64_syscalls.hh	/^        sbrk = 69,$/;"	e	enum:SystemCalls::__anon102
sc	./base/loader/coff_sym.h	/^    unsigned sc  : 5;   \/* storage class - text, data, etc *\/$/;"	m	struct:ecoff_sym
scAbs	./base/loader/coff_symconst.h	98;"	d
scBasedVar	./base/loader/coff_symconst.h	117;"	d
scBits	./base/loader/coff_symconst.h	101;"	d
scBss	./base/loader/coff_symconst.h	96;"	d
scCdbLocal	./base/loader/coff_symconst.h	100;"	d
scCdbSystem	./base/loader/coff_symconst.h	102;"	d
scCommon	./base/loader/coff_symconst.h	111;"	d
scData	./base/loader/coff_symconst.h	95;"	d
scData	./dev/arm/rv_ctrl.hh	/^    uint32_t scData;$/;"	m	class:RealViewCtrl
scDbx	./base/loader/coff_symconst.h	103;"	d
scFini	./base/loader/coff_symconst.h	120;"	d
scInfo	./base/loader/coff_symconst.h	105;"	d
scInit	./base/loader/coff_symconst.h	116;"	d
scLinks	./base/cp_annotate.hh	/^    ScCache scLinks;$/;"	m	class:CPA
scMax	./base/loader/coff_symconst.h	122;"	d
scNil	./base/loader/coff_symconst.h	93;"	d
scPData	./base/loader/coff_symconst.h	119;"	d
scRConst	./base/loader/coff_symconst.h	121;"	d
scRData	./base/loader/coff_symconst.h	109;"	d
scRegImage	./base/loader/coff_symconst.h	104;"	d
scRegister	./base/loader/coff_symconst.h	97;"	d
scSBss	./base/loader/coff_symconst.h	108;"	d
scSCommon	./base/loader/coff_symconst.h	112;"	d
scSData	./base/loader/coff_symconst.h	107;"	d
scSUndefined	./base/loader/coff_symconst.h	115;"	d
scText	./base/loader/coff_symconst.h	94;"	d
scUndefined	./base/loader/coff_symconst.h	99;"	d
scUserStruct	./base/loader/coff_symconst.h	106;"	d
scVar	./base/loader/coff_symconst.h	110;"	d
scVarRegister	./base/loader/coff_symconst.h	113;"	d
scVariant	./base/loader/coff_symconst.h	114;"	d
scXData	./base/loader/coff_symconst.h	118;"	d
sc_fp_control	./kern/tru64/tru64.hh	/^        uint64_t sc_fp_control;         \/\/!< software fpcr$/;"	m	struct:Tru64::sigcontext
sc_fp_trap_pc	./kern/tru64/tru64.hh	/^        uint64_t sc_fp_trap_pc;         \/\/!< imprecise pc$/;"	m	struct:Tru64::sigcontext
sc_fp_trigger_inst	./kern/tru64/tru64.hh	/^        uint64_t sc_fp_trigger_inst;    \/\/!< Instruction at trigger pc$/;"	m	struct:Tru64::sigcontext
sc_fp_trigger_sum	./kern/tru64/tru64.hh	/^        uint64_t sc_fp_trigger_sum;     \/\/!< Exception summary at trigg$/;"	m	struct:Tru64::sigcontext
sc_fpcr	./kern/tru64/tru64.hh	/^        uint64_t sc_fpcr;               \/\/!< floating point control reg$/;"	m	struct:Tru64::sigcontext
sc_fpregs	./kern/tru64/tru64.hh	/^        int64_t sc_fpregs[32];          \/\/!< fp regs 0 to 31$/;"	m	struct:Tru64::sigcontext
sc_kreserved1	./kern/tru64/tru64.hh	/^        uint32_t sc_kreserved1;         \/\/!< reserved for kernel$/;"	m	struct:Tru64::sigcontext
sc_kreserved2	./kern/tru64/tru64.hh	/^        uint32_t sc_kreserved2;         \/\/!< reserved for kernel$/;"	m	struct:Tru64::sigcontext
sc_mask	./kern/tru64/tru64.hh	/^        int64_t sc_mask;                \/\/!< signal mask to restore$/;"	m	struct:Tru64::sigcontext
sc_onstack	./kern/tru64/tru64.hh	/^        int64_t sc_onstack;             \/\/!< sigstack state to restore$/;"	m	struct:Tru64::sigcontext
sc_ownedfp	./kern/tru64/tru64.hh	/^        int64_t sc_ownedfp;             \/\/!< fp has been used$/;"	m	struct:Tru64::sigcontext
sc_pc	./kern/tru64/tru64.hh	/^        int64_t sc_pc;                  \/\/!< pc at time of signal$/;"	m	struct:Tru64::sigcontext
sc_ps	./kern/tru64/tru64.hh	/^        int64_t sc_ps;                  \/\/!< psl to retore$/;"	m	struct:Tru64::sigcontext
sc_regs	./kern/tru64/tru64.hh	/^        int64_t sc_regs[32];            \/\/!< processor regs 0 to 31$/;"	m	struct:Tru64::sigcontext
sc_reserved1	./kern/tru64/tru64.hh	/^        int64_t sc_reserved1;           \/\/!< reserved for kernel$/;"	m	struct:Tru64::sigcontext
sc_sbase	./kern/tru64/tru64.hh	/^        caddr_t sc_sbase;               \/\/!< stack start$/;"	m	struct:Tru64::sigcontext
sc_ssize	./kern/tru64/tru64.hh	/^        size_t  sc_ssize;               \/\/!< stack size$/;"	m	struct:Tru64::sigcontext
sc_traparg_a0	./kern/tru64/tru64.hh	/^        uint64_t sc_traparg_a0;         \/\/!< a0 argument to trap on exc$/;"	m	struct:Tru64::sigcontext
sc_traparg_a1	./kern/tru64/tru64.hh	/^        uint64_t sc_traparg_a1;         \/\/!< a1 argument to trap on exc$/;"	m	struct:Tru64::sigcontext
sc_traparg_a2	./kern/tru64/tru64.hh	/^        uint64_t sc_traparg_a2;         \/\/!< a2 argument to trap on exc$/;"	m	struct:Tru64::sigcontext
scalar	./base/statistics.hh	/^    T *scalar;$/;"	m	class:Stats::ValueProxy
scalar	./base/statistics.hh	/^    scalar(T &value)$/;"	f	class:Stats::ValueBase
scalarOp	./arch/x86/insts/micromediaop.hh	/^        scalarOp() const$/;"	f	class:X86ISA::MediaOpBase
scale	./arch/x86/emulenv.hh	/^        uint8_t scale;$/;"	m	struct:X86ISA::EmulEnv
scale	./arch/x86/insts/microldstop.hh	/^        const uint8_t scale;$/;"	m	class:X86ISA::LdStOp
scale	./arch/x86/types.hh	/^        Bitfield<7,6> scale;$/;"	m	namespace:X86ISA
scd	./arch/arm/miscregs.hh	/^        Bitfield<7> scd;$/;"	m	namespace:ArmISA
sce	./arch/x86/regs/misc.hh	/^        Bitfield<0> sce; \/\/ System call extensions$/;"	m	namespace:X86ISA
schedBreak	./sim/debug.cc	/^schedBreak(Tick when)$/;"	f
schedDcacheNext	./cpu/trace/trace_cpu.cc	/^TraceCPU::schedDcacheNext()$/;"	f	class:TraceCPU
schedDcacheNextEvent	./cpu/trace/trace_cpu.cc	/^TraceCPU::schedDcacheNextEvent(Tick when)$/;"	f	class:TraceCPU
schedIcacheNext	./cpu/trace/trace_cpu.cc	/^TraceCPU::schedIcacheNext()$/;"	f	class:TraceCPU
schedMemSideSendEvent	./mem/cache/base.hh	/^    void schedMemSideSendEvent(Tick time)$/;"	f	class:BaseCache
schedRelBreak	./sim/debug.cc	/^schedRelBreak(Tick delta)$/;"	f
schedSendEvent	./mem/cache/base.hh	/^        void schedSendEvent(Tick time)$/;"	f	class:BaseCache::CacheMasterPort
schedSendEvent	./mem/packet_queue.cc	/^PacketQueue::schedSendEvent(Tick when)$/;"	f	class:PacketQueue
schedSendTiming	./mem/packet_queue.cc	/^PacketQueue::schedSendTiming(PacketPtr pkt, Tick when, bool force_order)$/;"	f	class:PacketQueue
schedStatEvent	./sim/stat_control.cc	/^schedStatEvent(bool dump, bool reset, Tick when, Tick repeat)$/;"	f	namespace:Stats
schedTimingReq	./mem/bridge.cc	/^Bridge::BridgeMasterPort::schedTimingReq(PacketPtr pkt, Tick when)$/;"	f	class:Bridge::BridgeMasterPort
schedTimingReq	./mem/qport.hh	/^    void schedTimingReq(PacketPtr pkt, Tick when)$/;"	f	class:QueuedMasterPort
schedTimingReq	./mem/serial_link.cc	/^SerialLink::SerialLinkMasterPort::schedTimingReq(PacketPtr pkt, Tick when)$/;"	f	class:SerialLink::SerialLinkMasterPort
schedTimingResp	./mem/bridge.cc	/^Bridge::BridgeSlavePort::schedTimingResp(PacketPtr pkt, Tick when)$/;"	f	class:Bridge::BridgeSlavePort
schedTimingResp	./mem/qport.hh	/^    void schedTimingResp(PacketPtr pkt, Tick when, bool force_order = false)$/;"	f	class:QueuedSlavePort
schedTimingResp	./mem/serial_link.cc	/^SerialLink::SerialLinkSlavePort::schedTimingResp(PacketPtr pkt, Tick when)$/;"	f	class:SerialLink::SerialLinkSlavePort
schedTimingSnoopResp	./mem/qport.hh	/^    void schedTimingSnoopResp(PacketPtr pkt, Tick when, bool force_order =$/;"	f	class:QueuedMasterPort
sched_break_pc	./cpu/pc_event.cc	/^sched_break_pc(Addr addr)$/;"	f
sched_break_pc_sys	./cpu/pc_event.cc	/^sched_break_pc_sys(System *sys, Addr addr)$/;"	f
schedule	./base/pollevent.cc	/^PollQueue::schedule(PollEvent *event)$/;"	f	class:PollQueue
schedule	./cpu/pc_event.cc	/^PCEventQueue::schedule(PCEvent *event)$/;"	f	class:PCEventQueue
schedule	./cpu/simple/timing.cc	/^TimingSimpleCPU::TimingCPUPort::TickEvent::schedule(PacketPtr _pkt, Tick t)$/;"	f	class:TimingSimpleCPU::TimingCPUPort::TickEvent
schedule	./sim/eventq.hh	/^    schedule(Event &event, Tick when)$/;"	f	class:EventManager
schedule	./sim/eventq.hh	/^    schedule(Event *event, Tick when)$/;"	f	class:EventManager
schedule	./sim/eventq_impl.hh	/^EventQueue::schedule(Event *event, Tick when, bool global)$/;"	f	class:EventQueue
schedule	./sim/global_event.cc	/^void BaseGlobalEvent::schedule(Tick when)$/;"	f	class:BaseGlobalEvent
scheduleCP0Update	./arch/mips/isa.cc	/^ISA::scheduleCP0Update(BaseCPU *cpu, Cycles delay)$/;"	f	class:MipsISA::ISA
scheduleEvent	./arch/mips/isa.cc	/^ISA::CP0Event::scheduleEvent(Cycles delay)$/;"	f	class:MipsISA::ISA::CP0Event
scheduleEvent	./mem/ruby/common/Consumer.cc	/^Consumer::scheduleEvent(Cycles timeDelta)$/;"	f	class:Consumer
scheduleEventAbsolute	./mem/ruby/common/Consumer.cc	/^Consumer::scheduleEventAbsolute(Tick evt_time)$/;"	f	class:Consumer
scheduleInstCommitEvent	./base/remote_gdb.cc	/^BaseRemoteGDB::scheduleInstCommitEvent(Event *ev, int delta)$/;"	f	class:BaseRemoteGDB
scheduleInstStop	./cpu/base.cc	/^BaseCPU::scheduleInstStop(ThreadID tid, Counter insts, const char *cause)$/;"	f	class:BaseCPU
scheduleIntr	./dev/mc146818.cc	/^MC146818::RTCEvent::scheduleIntr()$/;"	f	class:MC146818::RTCEvent
scheduleIntr	./dev/uart8250.cc	/^Uart8250::IntrEvent::scheduleIntr()$/;"	f	class:Uart8250::IntrEvent
scheduleLoadStop	./cpu/base.cc	/^BaseCPU::scheduleLoadStop(ThreadID tid, Counter loads, const char *cause)$/;"	f	class:BaseCPU
scheduleNonSpec	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::scheduleNonSpec(const InstSeqNum &inst)$/;"	f	class:InstructionQueue
scheduleOutputLink	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.cc	/^NetworkInterface_d::scheduleOutputLink()$/;"	f	class:NetworkInterface_d
scheduleOutputLink	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.cc	/^NetworkInterface::scheduleOutputLink()$/;"	f	class:NetworkInterface
scheduleOutputLinks	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::scheduleOutputLinks()$/;"	f	class:Router
schedulePowerEvent	./mem/dram_ctrl.cc	/^DRAMCtrl::Rank::schedulePowerEvent(PowerState pwr_state, Tick tick)$/;"	f	class:DRAMCtrl::Rank
scheduleReadyInsts	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::scheduleReadyInsts()$/;"	f	class:InstructionQueue
scheduleTickEvent	./cpu/o3/cpu.hh	/^    void scheduleTickEvent(Cycles delay)$/;"	f	class:FullO3CPU
scheduled	./sim/eventq.hh	/^    bool scheduled() const { return flags.isSet(Scheduled); }$/;"	f	class:Event
scheduled	./sim/global_event.hh	/^    bool scheduled() const$/;"	f	class:BaseGlobalEvent
sci_fake	./dev/arm/RealView.py	/^    sci_fake      = AmbaFake(pio_addr=0x1000e000)$/;"	v	class:RealViewEB
sci_fake	./dev/arm/RealView.py	/^    sci_fake      = AmbaFake(pio_addr=0x1000e000)$/;"	v	class:RealViewPBX
scientific	./base/cprintf_formats.hh	/^    enum { best, fixed, scientific } float_format;$/;"	e	enum:cp::Format::__anon119
scl	./dev/i2c/bus.hh	/^    uint8_t scl;$/;"	m	class:I2CBus
scoreboard	./cpu/minor/execute.hh	/^    Scoreboard scoreboard;$/;"	m	class:Minor::Execute
scoreboard	./cpu/o3/cpu.hh	/^    Scoreboard scoreboard;$/;"	m	class:FullO3CPU
scoreboard	./cpu/o3/iew.hh	/^    Scoreboard* scoreboard;$/;"	m	class:DefaultIEW
scoreboard	./cpu/o3/rename.hh	/^    Scoreboard *scoreboard;$/;"	m	class:DefaultRename
scr	./arch/arm/table_walker.hh	/^        SCR scr;$/;"	m	class:ArmISA::TableWalker::WalkerState
scr	./arch/arm/tlb.hh	/^    SCR scr;$/;"	m	class:ArmISA::TLB
scratchPad	./arch/sparc/isa.hh	/^    uint64_t scratchPad[8];$/;"	m	class:SparcISA::ISA
scs	./arch/mips/mt_constants.hh	/^    Bitfield<18>     scs;$/;"	m	namespace:MipsISA
sctlr	./arch/arm/table_walker.hh	/^        SCTLR sctlr;$/;"	m	class:ArmISA::TableWalker::WalkerState
sctlr	./arch/arm/table_walker.hh	/^    SCTLR sctlr;$/;"	m	class:ArmISA::TableWalker
sctlr	./arch/arm/tlb.hh	/^    SCTLR sctlr;$/;"	m	class:ArmISA::TLB
sda	./dev/i2c/bus.hh	/^    uint8_t sda;$/;"	m	class:I2CBus
sec	./base/time.hh	/^    time_t sec() const { return _time.tv_sec; }$/;"	f	class:Time
sec	./base/time.hh	/^    void sec(time_t sec) { _time.tv_sec = sec; }$/;"	f	class:Time
sec	./dev/mc146818.hh	/^            uint8_t sec;$/;"	m	struct:MC146818::__anon17::__anon18
secContext	./arch/sparc/isa.hh	/^    uint16_t secContext;$/;"	m	class:SparcISA::ISA
secDataAddr	./arch/arm/freebsd/system.hh	/^    Addr secDataAddr;$/;"	m	class:FreebsdArmSystem
secDataPtrAddr	./arch/arm/freebsd/system.hh	/^    Addr secDataPtrAddr;$/;"	m	class:FreebsdArmSystem
sec_alrm	./dev/mc146818.hh	/^            uint8_t sec_alrm;$/;"	m	struct:MC146818::__anon17::__anon18
sec_count	./dev/storage/ide_disk.hh	/^    uint8_t sec_count;$/;"	m	struct:CommandReg
sec_num	./dev/storage/ide_disk.hh	/^    uint8_t sec_num;$/;"	m	struct:CommandReg
secondary	./dev/storage/ide_ctrl.hh	/^    Channel secondary;$/;"	m	class:IdeController
secondaryTiming	./dev/storage/ide_ctrl.hh	/^    uint16_t primaryTiming, secondaryTiming;$/;"	m	class:IdeController
seconds	./dev/net/etherdump.cc	/^    uint32_t seconds;$/;"	m	struct:pcap_pkthdr	file:
seconds_since_epoch	./sim/syscall_emul.hh	/^const unsigned seconds_since_epoch = 1000000000;$/;"	v
sectionExists	./base/inifile.cc	/^IniFile::sectionExists(const string &sectionName) const$/;"	f	class:IniFile
sectionExists	./base/loader/elf_object.cc	/^ElfObject::sectionExists(string sec)$/;"	f	class:ElfObject
sectionExists	./sim/serialize.cc	/^CheckpointIn::sectionExists(const string &section)$/;"	f	class:CheckpointIn
sectionNames	./base/loader/elf_object.hh	/^    std::set<std::string> sectionNames;$/;"	m	class:ElfObject
sector	./dev/virtio/block.hh	/^        uint64_t sector;$/;"	m	struct:VirtIOBlock::BlkRequest
secure	./arch/arm/table_walker.hh	/^        bool secure(bool have_security, WalkerState *currState) const$/;"	f	class:ArmISA::TableWalker::L1Descriptor
secure	./arch/arm/table_walker.hh	/^        bool secure(bool have_security, WalkerState *currState) const$/;"	f	class:ArmISA::TableWalker::L2Descriptor
secure	./arch/arm/table_walker.hh	/^        bool secure(bool have_security, WalkerState *currState) const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
secureLookup	./arch/arm/table_walker.hh	/^        bool secureLookup;$/;"	m	class:ArmISA::TableWalker::WalkerState
secureTable	./arch/arm/table_walker.hh	/^        bool secureTable() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
security	./kern/tru64/tru64_syscalls.hh	/^        security = 222,$/;"	e	enum:SystemCalls::__anon102
sed	./arch/arm/miscregs.hh	/^        Bitfield<8>    sed;     \/\/ SETEND disable$/;"	m	namespace:ArmISA
seg	./arch/x86/emulenv.hh	/^        SegmentRegIndex seg;$/;"	m	struct:X86ISA::EmulEnv
seg	./arch/x86/types.hh	/^        Bitfield<2,0> seg;$/;"	m	namespace:X86ISA
seg_32bit	./arch/x86/linux/process.cc	/^    Bitfield<0> seg_32bit;$/;"	v
seg_not_present	./arch/x86/linux/process.cc	/^    Bitfield<5> seg_not_present;$/;"	v
segleft	./base/inet.hh	/^    uint8_t segleft;$/;"	m	struct:Net::ip6_opt_routing_type2
segment	./arch/x86/insts/microldstop.hh	/^        const uint8_t segment;$/;"	m	class:X86ISA::LdStOp
segvHandler	./sim/init_signals.cc	/^segvHandler(int sigtype)$/;"	f	file:
sel	./arch/arm/miscregs.hh	/^      Bitfield<4, 0> sel;$/;"	m	namespace:ArmISA
sel	./arch/arm/pmu.hh	/^        Bitfield<4, 0> sel;$/;"	m	class:ArmISA::PMU
sel	./dev/intel_8254_timer.hh	/^        Bitfield<7, 6> sel;$/;"	m	class:Intel8254Timer
select	./dev/storage/ide_ctrl.hh	/^        select(bool selSlave)$/;"	f	struct:IdeController::Channel
select	./kern/tru64/tru64_syscalls.hh	/^        select = 93,$/;"	e	enum:SystemCalls::__anon102
selectBit	./dev/storage/ide_ctrl.hh	/^        bool selectBit;$/;"	m	struct:IdeController::Channel
select_outvc	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.cc	/^VCallocator_d::select_outvc(int inport_iter, int invc_iter)$/;"	f	class:VCallocator_d
selected	./dev/storage/ide_ctrl.hh	/^        IdeDisk *selected;$/;"	m	struct:IdeController::Channel
selector	./arch/x86/regs/misc.hh	/^        Bitfield<31, 16> selector; \/\/ Target Code-Segment Selector$/;"	m	namespace:X86ISA
self	./base/statistics.hh	/^    Derived &self() { return *static_cast<Derived *>(this); }$/;"	f	class:Stats::DataWrap
selfDelete	./arch/arm/stage2_lookup.hh	/^    bool                    selfDelete;$/;"	m	class:ArmISA::Stage2LookUp
semctl	./kern/tru64/tru64_syscalls.hh	/^        semctl = 204,$/;"	e	enum:SystemCalls::__anon102
semget	./kern/tru64/tru64_syscalls.hh	/^        semget = 205,$/;"	e	enum:SystemCalls::__anon102
semop	./kern/tru64/tru64_syscalls.hh	/^        semop = 206,$/;"	e	enum:SystemCalls::__anon102
semop_fast	./kern/tru64/tru64_syscalls.hh	/^        semop_fast = 62,$/;"	e	enum:SystemCalls::__anon103
send	./base/remote_gdb.cc	/^BaseRemoteGDB::send(const char *bp)$/;"	f	class:BaseRemoteGDB
send	./cpu/trace/trace_cpu.cc	/^TraceCPU::FixedRetryGen::send(Addr addr, unsigned size, const MemCmd& cmd,$/;"	f	class:TraceCPU::FixedRetryGen
send	./dev/arm/generic_timer.cc	/^ArchTimer::Interrupt::send()$/;"	f	class:ArchTimer::Interrupt
send	./dev/net/etherbus.cc	/^EtherBus::send(EtherInt *sndr, EthPacketPtr &pkt)$/;"	f	class:EtherBus
sendAtomic	./mem/port.cc	/^MasterPort::sendAtomic(PacketPtr pkt)$/;"	f	class:MasterPort
sendAtomicSnoop	./mem/port.cc	/^SlavePort::sendAtomicSnoop(PacketPtr pkt)$/;"	f	class:SlavePort
sendCmd	./dev/net/tcp_iface.cc	/^TCPIface::sendCmd(const Header &header)$/;"	f	class:TCPIface
sendData	./cpu/simple/timing.cc	/^TimingSimpleCPU::sendData(RequestPtr req, uint8_t *data, uint64_t *res,$/;"	f	class:TimingSimpleCPU
sendDeferredPacket	./mem/cache/cache.cc	/^Cache::CacheReqPacketQueue::sendDeferredPacket()$/;"	f	class:Cache::CacheReqPacketQueue
sendDeferredPacket	./mem/packet_queue.cc	/^PacketQueue::sendDeferredPacket()$/;"	f	class:PacketQueue
sendDelay	./dev/net/dist_iface.hh	/^            Tick sendDelay;$/;"	m	struct:DistIface::RecvScheduler::Desc
sendDelay	./dev/net/dist_packet.hh	/^            Tick sendDelay;$/;"	m	union:DistHeaderPkt::Header::__anon12
sendDma	./dev/dma_device.cc	/^DmaPort::sendDma()$/;"	f	class:DmaPort
sendDone	./dev/net/dist_etherlink.hh	/^        void sendDone() { peer->sendDone(); }$/;"	f	class:DistEtherLink::LocalIface
sendDone	./dev/net/etherlink.hh	/^        void sendDone() { peer->sendDone(); }$/;"	f	class:EtherLink::Interface
sendDone	./dev/net/ethertap.cc	/^EtherTap::sendDone()$/;"	f	class:EtherTap
sendDone	./dev/net/ethertap.hh	/^    virtual void sendDone() { tap->sendDone(); }$/;"	f	class:EtherTapInt
sendDone	./dev/net/i8254xGBe.hh	/^    virtual void sendDone() { dev->ethTxDone(); }$/;"	f	class:IGbEInt
sendDone	./dev/net/ns_gige.hh	/^    virtual void sendDone() { dev->transferDone(); }$/;"	f	class:NSGigEInt
sendDone	./dev/net/sinic.hh	/^    virtual void sendDone() { dev->transferDone(); }$/;"	f	class:Sinic::Interface
sendError	./base/vnc/vncserver.cc	/^VncServer::sendError(const char* error_msg)$/;"	f	class:VncServer
sendEvent	./dev/dma_device.hh	/^    EventWrapper<DmaPort, &DmaPort::sendDma> sendEvent;$/;"	m	class:DmaPort
sendEvent	./mem/bridge.hh	/^                     &BridgeMasterPort::trySendTiming> sendEvent;$/;"	m	class:Bridge::BridgeMasterPort
sendEvent	./mem/bridge.hh	/^                     &BridgeSlavePort::trySendTiming> sendEvent;$/;"	m	class:Bridge::BridgeSlavePort
sendEvent	./mem/packet_queue.hh	/^    EventWrapper<PacketQueue, &PacketQueue::processSendEvent> sendEvent;$/;"	m	class:PacketQueue
sendEvent	./mem/serial_link.hh	/^                     &SerialLinkMasterPort::trySendTiming> sendEvent;$/;"	m	class:SerialLink::SerialLinkMasterPort
sendEvent	./mem/serial_link.hh	/^                     &SerialLinkSlavePort::trySendTiming> sendEvent;$/;"	m	class:SerialLink::SerialLinkSlavePort
sendFetch	./cpu/simple/timing.cc	/^TimingSimpleCPU::sendFetch(const Fault &fault, RequestPtr req,$/;"	f	class:TimingSimpleCPU
sendFrameBufferResized	./base/vnc/vncserver.cc	/^VncServer::sendFrameBufferResized()$/;"	f	class:VncServer
sendFrameBufferUpdate	./base/vnc/vncserver.cc	/^VncServer::sendFrameBufferUpdate()$/;"	f	class:VncServer
sendFunctional	./mem/port.cc	/^MasterPort::sendFunctional(PacketPtr pkt)$/;"	f	class:MasterPort
sendFunctionalSnoop	./mem/port.cc	/^SlavePort::sendFunctionalSnoop(PacketPtr pkt)$/;"	f	class:SlavePort
sendInt	./arch/arm/kvm/gic.cc	/^KvmGic::sendInt(uint32_t num)$/;"	f	class:KvmGic
sendInt	./dev/arm/gic_pl390.cc	/^Pl390::sendInt(uint32_t num)$/;"	f	class:Pl390
sendMessage	./dev/x86/intdev.cc	/^X86ISA::IntDevice::IntMasterPort::sendMessage(ApicList apics,$/;"	f	class:X86ISA::IntDevice::IntMasterPort
sendNextFragmentToTranslation	./cpu/minor/lsq.cc	/^LSQ::SplitDataRequest::sendNextFragmentToTranslation()$/;"	f	class:Minor::LSQ::SplitDataRequest
sendPPInt	./arch/arm/kvm/gic.cc	/^KvmGic::sendPPInt(uint32_t num, uint32_t cpu)$/;"	f	class:KvmGic
sendPPInt	./dev/arm/gic_pl390.cc	/^Pl390::sendPPInt(uint32_t num, uint32_t cpu)$/;"	f	class:Pl390
sendPacket	./dev/net/etherint.hh	/^    bool sendPacket(EthPacketPtr packet)$/;"	f	class:EtherInt
sendPacket	./dev/net/tcp_iface.cc	/^TCPIface::sendPacket(const Header &header, const EthPacketPtr &packet)$/;"	f	class:TCPIface
sendPackets	./arch/x86/pagetable_walker.cc	/^Walker::WalkerState::sendPackets()$/;"	f	class:X86ISA::Walker::WalkerState
sendPkt	./cpu/testers/memtest/memtest.cc	/^MemTest::sendPkt(PacketPtr pkt) {$/;"	f	class:MemTest
sendPkt	./cpu/testers/networktest/networktest.cc	/^NetworkTest::sendPkt(PacketPtr pkt)$/;"	f	class:NetworkTest
sendRMsg	./dev/virtio/fs9p.cc	/^VirtIO9PBase::sendRMsg(const P9MsgHeader &header, const uint8_t *data, size_t size)$/;"	f	class:VirtIO9PBase
sendRangeChange	./mem/port.hh	/^    void sendRangeChange() const {$/;"	f	class:SlavePort
sendResponse	./mem/dramsim2.cc	/^DRAMSim2::sendResponse()$/;"	f	class:DRAMSim2
sendResponseEvent	./mem/dramsim2.hh	/^    EventWrapper<DRAMSim2, &DRAMSim2::sendResponse> sendResponseEvent;$/;"	m	class:DRAMSim2
sendRetry	./mem/xbar.hh	/^        void sendRetry(MasterPort* retry_port)$/;"	f	class:BaseXBar::RespLayer
sendRetry	./mem/xbar.hh	/^        void sendRetry(SlavePort* retry_port)$/;"	f	class:BaseXBar::ReqLayer
sendRetry	./mem/xbar.hh	/^        void sendRetry(SlavePort* retry_port)$/;"	f	class:BaseXBar::SnoopRespLayer
sendRetryEvent	./mem/cache/base.hh	/^                     &CacheSlavePort::processSendRetry> sendRetryEvent;$/;"	m	class:BaseCache::CacheSlavePort
sendRetryReq	./mem/port.cc	/^SlavePort::sendRetryReq()$/;"	f	class:SlavePort
sendRetryResp	./mem/coherent_xbar.hh	/^        void sendRetryResp() {$/;"	f	class:CoherentXBar::SnoopRespPort
sendRetryResp	./mem/port.cc	/^MasterPort::sendRetryResp()$/;"	f	class:MasterPort
sendRetrySnoopResp	./mem/port.cc	/^SlavePort::sendRetrySnoopResp()$/;"	f	class:SlavePort
sendServerInit	./base/vnc/vncserver.cc	/^VncServer::sendServerInit()$/;"	f	class:VncServer
sendSplitData	./cpu/simple/timing.cc	/^TimingSimpleCPU::sendSplitData(RequestPtr req1, RequestPtr req2,$/;"	f	class:TimingSimpleCPU
sendStore	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::sendStore(PacketPtr data_pkt)$/;"	f	class:LSQUnit
sendStoreToStoreBuffer	./cpu/minor/lsq.cc	/^LSQ::sendStoreToStoreBuffer(LSQRequestPtr request)$/;"	f	class:Minor::LSQ
sendTCP	./dev/net/tcp_iface.cc	/^TCPIface::sendTCP(int sock, const void *buf, unsigned length)$/;"	f	class:TCPIface
sendTick	./dev/net/dist_iface.hh	/^            Tick sendTick;$/;"	m	struct:DistIface::RecvScheduler::Desc
sendTick	./dev/net/dist_packet.hh	/^        Tick sendTick;$/;"	m	struct:DistHeaderPkt::Header
sendTiming	./arch/x86/pagetable_walker.cc	/^bool Walker::sendTiming(WalkerState* sendingState, PacketPtr pkt)$/;"	f	class:X86ISA::Walker
sendTiming	./mem/packet_queue.cc	/^ReqPacketQueue::sendTiming(PacketPtr pkt)$/;"	f	class:ReqPacketQueue
sendTiming	./mem/packet_queue.cc	/^RespPacketQueue::sendTiming(PacketPtr pkt)$/;"	f	class:RespPacketQueue
sendTiming	./mem/packet_queue.cc	/^SnoopRespPacketQueue::sendTiming(PacketPtr pkt)$/;"	f	class:SnoopRespPacketQueue
sendTimingReq	./mem/port.cc	/^MasterPort::sendTimingReq(PacketPtr pkt)$/;"	f	class:MasterPort
sendTimingResp	./mem/port.cc	/^SlavePort::sendTimingResp(PacketPtr pkt)$/;"	f	class:SlavePort
sendTimingSnoopReq	./mem/port.cc	/^SlavePort::sendTimingSnoopReq(PacketPtr pkt)$/;"	f	class:SlavePort
sendTimingSnoopResp	./mem/port.cc	/^MasterPort::sendTimingSnoopResp(PacketPtr pkt)$/;"	f	class:MasterPort
sendUpdate	./base/vnc/vncserver.hh	/^    bool sendUpdate;$/;"	m	class:VncServer
sender	./dev/net/etherbus.hh	/^    EtherInt *sender;$/;"	m	class:EtherBus
senderState	./mem/packet.hh	/^    SenderState *senderState;$/;"	m	class:Packet
senderWalk	./arch/x86/pagetable_walker.hh	/^            WalkerState * senderWalk;$/;"	m	struct:X86ISA::Walker::WalkerSenderState
sendfile	./kern/tru64/tru64_syscalls.hh	/^        sendfile = 266,$/;"	e	enum:SystemCalls::__anon102
sendmsg	./kern/tru64/tru64_syscalls.hh	/^        sendmsg = 28,$/;"	e	enum:SystemCalls::__anon102
sendto	./kern/tru64/tru64_syscalls.hh	/^        sendto = 133,$/;"	e	enum:SystemCalls::__anon102
senseCode	./dev/arm/ufs_device.hh	/^        uint8_t senseCode[19];$/;"	m	struct:UFSHostDevice::SCSIReply
senseData	./dev/arm/ufs_device.hh	/^        uint8_t senseData[18];$/;"	m	struct:UFSHostDevice::UTPUPIURSP
senseDataLen	./dev/arm/ufs_device.hh	/^        uint16_t senseDataLen;$/;"	m	struct:UFSHostDevice::UTPUPIURSP
senseSize	./dev/arm/ufs_device.hh	/^        uint8_t senseSize;$/;"	m	struct:UFSHostDevice::SCSIReply
sentAllPackets	./cpu/minor/lsq.hh	/^        bool sentAllPackets() { return numIssuedFragments == numFragments; }$/;"	f	class:Minor::LSQ::SplitDataRequest
sentAllPackets	./cpu/minor/lsq.hh	/^        bool sentAllPackets() { return packetSent; }$/;"	f	class:Minor::LSQ::SingleDataRequest
sentAllPackets	./cpu/minor/lsq.hh	/^        bool sentAllPackets() { return true; }$/;"	f	class:Minor::LSQ::SpecialDataRequest
separatorString	./base/statistics.cc	/^std::string Info::separatorString = "::";$/;"	m	class:Stats::Info	file:
separatorString	./base/stats/info.hh	/^    static std::string separatorString;$/;"	m	class:Stats::Info
separatorString	./base/stats/text.cc	/^    string separatorString;$/;"	m	struct:Stats::DistPrint	file:
separatorString	./base/stats/text.cc	/^    string separatorString;$/;"	m	struct:Stats::SparseHistPrint	file:
separatorString	./base/stats/text.cc	/^    string separatorString;$/;"	m	struct:Stats::VectorPrint	file:
seq	./base/inet.hh	/^    uint32_t seq() const { return ntohl(th_seq); }$/;"	f	struct:Net::TcpHdr
seq	./base/inet.hh	/^    void seq(uint32_t _seq) { th_seq = htonl(_seq); }$/;"	f	struct:Net::TcpHdr
seqNum	./cpu/base_dyn_inst.hh	/^    InstSeqNum seqNum;$/;"	m	class:BaseDynInst
seqNum	./cpu/pred/bpred_unit.hh	/^        InstSeqNum seqNum;$/;"	m	struct:BPredUnit::PredictorHistory
seqNum	./cpu/trace/trace_cpu.hh	/^            NodeSeqNum seqNum;$/;"	m	class:TraceCPU::ElasticDataGen::GraphNode
seqNum	./cpu/trace/trace_cpu.hh	/^            NodeSeqNum seqNum;$/;"	m	struct:TraceCPU::ElasticDataGen::ReadyNode
sequentialAccess	./mem/cache/tags/base_set_assoc.hh	/^    const bool sequentialAccess;$/;"	m	class:BaseSetAssoc
sequential_access	./mem/cache/Cache.py	/^    sequential_access = Param.Bool(False,$/;"	v	class:BaseCache
sequential_access	./mem/cache/tags/Tags.py	/^    sequential_access = Param.Bool(Parent.sequential_access,$/;"	v	class:BaseSetAssoc
serial	./mem/mem_checker.hh	/^        Serial serial; \/\/!< Unique identifying serial$/;"	m	class:MemChecker::Transaction
serial	./mem/mem_checker_monitor.hh	/^        MemChecker::Serial serial;$/;"	m	struct:MemCheckerMonitor::MemCheckerMonitorSenderState
serial_link	./mem/serial_link.hh	/^        SerialLink& serial_link;$/;"	m	class:SerialLink::SerialLinkMasterPort
serial_link	./mem/serial_link.hh	/^        SerialLink& serial_link;$/;"	m	class:SerialLink::SerialLinkSlavePort
serialize	./arch/alpha/interrupts.hh	/^    serialize(CheckpointOut &cp) const$/;"	f	class:AlphaISA::Interrupts
serialize	./arch/alpha/isa.cc	/^ISA::serialize(CheckpointOut &cp) const$/;"	f	class:AlphaISA::ISA
serialize	./arch/alpha/kernel_stats.cc	/^Statistics::serialize(CheckpointOut &cp) const$/;"	f	class:AlphaISA::Kernel::Statistics
serialize	./arch/alpha/pagetable.cc	/^TlbEntry::serialize(CheckpointOut &cp) const$/;"	f	class:AlphaISA::TlbEntry
serialize	./arch/alpha/tlb.cc	/^TLB::serialize(CheckpointOut &cp) const$/;"	f	class:AlphaISA::TLB
serialize	./arch/arm/interrupts.hh	/^    serialize(CheckpointOut &cp) const$/;"	f	class:ArmISA::Interrupts
serialize	./arch/arm/isa.hh	/^        void serialize(CheckpointOut &cp) const$/;"	f	class:ArmISA::ISA
serialize	./arch/arm/kvm/gic.cc	/^KvmGic::serialize(CheckpointOut &cp) const$/;"	f	class:KvmGic
serialize	./arch/arm/pagetable.hh	/^    void serialize(CheckpointOut &cp) const$/;"	f	struct:ArmISA::PTE
serialize	./arch/arm/pmu.cc	/^PMU::CounterState::serialize(CheckpointOut &cp) const$/;"	f	class:ArmISA::PMU::CounterState
serialize	./arch/arm/pmu.cc	/^PMU::serialize(CheckpointOut &cp) const$/;"	f	class:ArmISA::PMU
serialize	./arch/arm/tlb.cc	/^TLB::serialize(CheckpointOut &cp) const$/;"	f	class:TLB
serialize	./arch/mips/pagetable.cc	/^PTE::serialize(CheckpointOut &cp) const$/;"	f	class:MipsISA::PTE
serialize	./arch/mips/pagetable.hh	/^    void serialize(CheckpointOut &cp) const$/;"	f	struct:MipsISA::TlbEntry
serialize	./arch/mips/tlb.cc	/^TLB::serialize(CheckpointOut &cp) const$/;"	f	class:TLB
serialize	./arch/power/pagetable.cc	/^PTE::serialize(CheckpointOut &cp) const$/;"	f	class:PowerISA::PTE
serialize	./arch/power/tlb.cc	/^TLB::serialize(CheckpointOut &cp) const$/;"	f	class:TLB
serialize	./arch/power/tlb.hh	/^    serialize(CheckpointOut &cp) const$/;"	f	struct:PowerISA::TlbEntry
serialize	./arch/sparc/isa.cc	/^ISA::serialize(CheckpointOut &cp) const$/;"	f	class:SparcISA::ISA
serialize	./arch/sparc/pagetable.cc	/^TlbEntry::serialize(CheckpointOut &cp) const$/;"	f	class:SparcISA::TlbEntry
serialize	./arch/sparc/tlb.cc	/^TLB::serialize(CheckpointOut &cp) const$/;"	f	class:SparcISA::TLB
serialize	./arch/x86/interrupts.cc	/^X86ISA::Interrupts::serialize(CheckpointOut &cp) const$/;"	f	class:X86ISA::Interrupts
serialize	./arch/x86/isa.cc	/^ISA::serialize(CheckpointOut &cp) const$/;"	f	class:X86ISA::ISA
serialize	./arch/x86/pagetable.cc	/^TlbEntry::serialize(CheckpointOut &cp) const$/;"	f	class:X86ISA::TlbEntry
serialize	./arch/x86/tlb.cc	/^TLB::serialize(CheckpointOut &cp) const$/;"	f	class:X86ISA::TLB
serialize	./arch/x86/types.hh	/^        serialize(CheckpointOut &cp) const$/;"	f	class:X86ISA::PCState
serialize	./base/cp_annotate.cc	/^CPA::AnnotateData::serialize(CheckpointOut &cp) const$/;"	f	class:CPA::AnnotateData
serialize	./base/cp_annotate.cc	/^CPA::serialize(CheckpointOut &cp) const$/;"	f	class:CPA
serialize	./base/framebuffer.cc	/^FrameBuffer::serialize(CheckpointOut &cp) const$/;"	f	class:FrameBuffer
serialize	./base/loader/symtab.cc	/^SymbolTable::serialize(const string &base, CheckpointOut &cp) const$/;"	f	class:SymbolTable
serialize	./base/pollevent.cc	/^PollEvent::serialize(CheckpointOut &cp) const$/;"	f	class:PollEvent
serialize	./base/random.cc	/^Random::serialize(CheckpointOut &cp) const$/;"	f	class:Random
serialize	./base/time.cc	/^Time::serialize(const std::string &base, CheckpointOut &cp) const$/;"	f	class:Time
serialize	./cpu/base.cc	/^BaseCPU::serialize(CheckpointOut &cp) const$/;"	f	class:BaseCPU
serialize	./cpu/checker/cpu.cc	/^CheckerCPU::serialize(ostream &os) const$/;"	f	class:CheckerCPU
serialize	./cpu/minor/cpu.cc	/^MinorCPU::serialize(CheckpointOut &cp) const$/;"	f	class:MinorCPU
serialize	./cpu/simple_thread.cc	/^SimpleThread::serialize(CheckpointOut &cp) const$/;"	f	class:SimpleThread
serialize	./cpu/testers/traffic_gen/traffic_gen.cc	/^TrafficGen::serialize(CheckpointOut &cp) const$/;"	f	class:TrafficGen
serialize	./cpu/thread_context.cc	/^serialize(ThreadContext &tc, CheckpointOut &cp)$/;"	f
serialize	./cpu/thread_state.cc	/^ThreadState::serialize(CheckpointOut &cp) const$/;"	f	class:ThreadState
serialize	./dev/alpha/backdoor.cc	/^AlphaBackdoor::Access::serialize(CheckpointOut &cp) const$/;"	f	class:AlphaBackdoor::Access
serialize	./dev/alpha/backdoor.cc	/^AlphaBackdoor::serialize(CheckpointOut &cp) const$/;"	f	class:AlphaBackdoor
serialize	./dev/alpha/tsunami.cc	/^Tsunami::serialize(CheckpointOut &cp) const$/;"	f	class:Tsunami
serialize	./dev/alpha/tsunami_cchip.cc	/^TsunamiCChip::serialize(CheckpointOut &cp) const$/;"	f	class:TsunamiCChip
serialize	./dev/alpha/tsunami_io.cc	/^TsunamiIO::serialize(CheckpointOut &cp) const$/;"	f	class:TsunamiIO
serialize	./dev/alpha/tsunami_pchip.cc	/^TsunamiPChip::serialize(CheckpointOut &cp) const$/;"	f	class:TsunamiPChip
serialize	./dev/arm/energy_ctrl.cc	/^EnergyCtrl::serialize(CheckpointOut &cp) const$/;"	f	class:EnergyCtrl
serialize	./dev/arm/flash_device.cc	/^FlashDevice::serialize(CheckpointOut &cp) const$/;"	f	class:FlashDevice
serialize	./dev/arm/generic_timer.cc	/^ArchTimer::serialize(CheckpointOut &cp) const$/;"	f	class:ArchTimer
serialize	./dev/arm/generic_timer.cc	/^GenericTimer::serialize(CheckpointOut &cp) const$/;"	f	class:GenericTimer
serialize	./dev/arm/generic_timer.cc	/^GenericTimerMem::serialize(CheckpointOut &cp) const$/;"	f	class:GenericTimerMem
serialize	./dev/arm/generic_timer.cc	/^SystemCounter::serialize(CheckpointOut &cp) const$/;"	f	class:SystemCounter
serialize	./dev/arm/gic_pl390.cc	/^Pl390::serialize(CheckpointOut &cp) const$/;"	f	class:Pl390
serialize	./dev/arm/gpu_nomali.cc	/^NoMaliGpu::serialize(CheckpointOut &cp) const$/;"	f	class:NoMaliGpu
serialize	./dev/arm/hdlcd.cc	/^HDLcd::DmaEngine::serialize(CheckpointOut &cp) const$/;"	f	class:HDLcd::DmaEngine
serialize	./dev/arm/hdlcd.cc	/^HDLcd::serialize(CheckpointOut &cp) const$/;"	f	class:HDLcd
serialize	./dev/arm/kmi.cc	/^Pl050::serialize(CheckpointOut &cp) const$/;"	f	class:Pl050
serialize	./dev/arm/pl011.cc	/^Pl011::serialize(CheckpointOut &cp) const$/;"	f	class:Pl011
serialize	./dev/arm/pl111.cc	/^Pl111::serialize(CheckpointOut &cp) const$/;"	f	class:Pl111
serialize	./dev/arm/rtc_pl031.cc	/^PL031::serialize(CheckpointOut &cp) const$/;"	f	class:PL031
serialize	./dev/arm/rv_ctrl.cc	/^RealViewCtrl::serialize(CheckpointOut &cp) const$/;"	f	class:RealViewCtrl
serialize	./dev/arm/rv_ctrl.cc	/^RealViewOsc::serialize(CheckpointOut &cp) const$/;"	f	class:RealViewOsc
serialize	./dev/arm/timer_cpulocal.cc	/^CpuLocalTimer::Timer::serialize(CheckpointOut &cp) const$/;"	f	class:CpuLocalTimer::Timer
serialize	./dev/arm/timer_cpulocal.cc	/^CpuLocalTimer::serialize(CheckpointOut &cp) const$/;"	f	class:CpuLocalTimer
serialize	./dev/arm/timer_sp804.cc	/^Sp804::Timer::serialize(CheckpointOut &cp) const$/;"	f	class:Sp804::Timer
serialize	./dev/arm/timer_sp804.cc	/^Sp804::serialize(CheckpointOut &cp) const$/;"	f	class:Sp804
serialize	./dev/arm/ufs_device.cc	/^UFSHostDevice::serialize(CheckpointOut &cp) const$/;"	f	class:UFSHostDevice
serialize	./dev/arm/vgic.cc	/^VGic::serialize(CheckpointOut &cp) const$/;"	f	class:VGic
serialize	./dev/arm/vgic.cc	/^VGic::vcpuIntData::serialize(CheckpointOut &cp) const$/;"	f	class:VGic::vcpuIntData
serialize	./dev/dma_device.cc	/^DmaReadFifo::serialize(CheckpointOut &cp) const$/;"	f	class:DmaReadFifo
serialize	./dev/i2c/bus.cc	/^I2CBus::serialize(CheckpointOut &cp) const$/;"	f	class:I2CBus
serialize	./dev/intel_8254_timer.cc	/^Intel8254Timer::Counter::serialize(const string &base, CheckpointOut &cp) const$/;"	f	class:Intel8254Timer::Counter
serialize	./dev/intel_8254_timer.cc	/^Intel8254Timer::serialize(const string &base, CheckpointOut &cp) const$/;"	f	class:Intel8254Timer
serialize	./dev/mc146818.cc	/^MC146818::serialize(const string &base, CheckpointOut &cp) const$/;"	f	class:MC146818
serialize	./dev/mips/malta.cc	/^Malta::serialize(CheckpointOut &cp) const$/;"	f	class:Malta
serialize	./dev/mips/malta_cchip.cc	/^MaltaCChip::serialize(CheckpointOut &cp) const$/;"	f	class:MaltaCChip
serialize	./dev/mips/malta_io.cc	/^MaltaIO::serialize(CheckpointOut &cp) const$/;"	f	class:MaltaIO
serialize	./dev/net/dist_etherlink.cc	/^DistEtherLink::Link::serialize(CheckpointOut &cp) const$/;"	f	class:DistEtherLink::Link
serialize	./dev/net/dist_etherlink.cc	/^DistEtherLink::serialize(CheckpointOut &cp) const$/;"	f	class:DistEtherLink
serialize	./dev/net/dist_iface.cc	/^DistIface::RecvScheduler::Desc::serialize(CheckpointOut &cp) const$/;"	f	class:DistIface::RecvScheduler::Desc
serialize	./dev/net/dist_iface.cc	/^DistIface::RecvScheduler::serialize(CheckpointOut &cp) const$/;"	f	class:DistIface::RecvScheduler
serialize	./dev/net/dist_iface.cc	/^DistIface::SyncNode::serialize(CheckpointOut &cp) const$/;"	f	class:DistIface::SyncNode
serialize	./dev/net/dist_iface.cc	/^DistIface::SyncSwitch::serialize(CheckpointOut &cp) const$/;"	f	class:DistIface::SyncSwitch
serialize	./dev/net/dist_iface.cc	/^DistIface::serialize(CheckpointOut &cp) const$/;"	f	class:DistIface
serialize	./dev/net/etherlink.cc	/^EtherLink::Link::serialize(const string &base, CheckpointOut &cp) const$/;"	f	class:EtherLink::Link
serialize	./dev/net/etherlink.cc	/^EtherLink::serialize(CheckpointOut &cp) const$/;"	f	class:EtherLink
serialize	./dev/net/etherpkt.cc	/^EthPacketData::serialize(const string &base, CheckpointOut &cp) const$/;"	f	class:EthPacketData
serialize	./dev/net/ethertap.cc	/^EtherTap::serialize(CheckpointOut &cp) const$/;"	f	class:EtherTap
serialize	./dev/net/i8254xGBe.cc	/^IGbE::DescCache<T>::serialize(CheckpointOut &cp) const$/;"	f	class:IGbE::DescCache
serialize	./dev/net/i8254xGBe.cc	/^IGbE::RxDescCache::serialize(CheckpointOut &cp) const$/;"	f	class:IGbE::RxDescCache
serialize	./dev/net/i8254xGBe.cc	/^IGbE::TxDescCache::serialize(CheckpointOut &cp) const$/;"	f	class:IGbE::TxDescCache
serialize	./dev/net/i8254xGBe.cc	/^IGbE::serialize(CheckpointOut &cp) const$/;"	f	class:IGbE
serialize	./dev/net/i8254xGBe_defs.hh	/^        void serialize(CheckpointOut &cp) const$/;"	f	struct:iGbReg::Regs::Reg
serialize	./dev/net/ns_gige.cc	/^NSGigE::serialize(CheckpointOut &cp) const$/;"	f	class:NSGigE
serialize	./dev/net/pktfifo.cc	/^PacketFifo::serialize(const string &base, CheckpointOut &cp) const$/;"	f	class:PacketFifo
serialize	./dev/net/pktfifo.cc	/^PacketFifoEntry::serialize(const string &base, CheckpointOut &cp) const$/;"	f	class:PacketFifoEntry
serialize	./dev/net/sinic.cc	/^Base::serialize(CheckpointOut &cp) const$/;"	f	class:Sinic::Base
serialize	./dev/net/sinic.cc	/^Device::serialize(CheckpointOut &cp) const$/;"	f	class:Sinic::Device
serialize	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::serialize(CheckpointOut &cp) const$/;"	f	class:CopyEngine::CopyEngineChannel
serialize	./dev/pci/copy_engine.cc	/^CopyEngine::serialize(CheckpointOut &cp) const$/;"	f	class:CopyEngine
serialize	./dev/pci/copy_engine_defs.hh	/^    void serialize(CheckpointOut &cp) const$/;"	f	struct:CopyEngineReg::Reg
serialize	./dev/pci/device.cc	/^PciDevice::serialize(CheckpointOut &cp) const$/;"	f	class:PciDevice
serialize	./dev/pixelpump.cc	/^BasePixelPump::PixelEvent::serialize(CheckpointOut &cp) const$/;"	f	class:BasePixelPump::PixelEvent
serialize	./dev/pixelpump.cc	/^BasePixelPump::serialize(CheckpointOut &cp) const$/;"	f	class:BasePixelPump
serialize	./dev/pixelpump.cc	/^DisplayTimings::serialize(CheckpointOut &cp) const$/;"	f	class:DisplayTimings
serialize	./dev/sparc/dtod.cc	/^DumbTOD::serialize(CheckpointOut &cp) const$/;"	f	class:DumbTOD
serialize	./dev/sparc/iob.cc	/^Iob::serialize(CheckpointOut &cp) const$/;"	f	class:Iob
serialize	./dev/sparc/mm_disk.cc	/^MmDisk::serialize(CheckpointOut &cp) const$/;"	f	class:MmDisk
serialize	./dev/storage/disk_image.cc	/^CowDiskImage::serialize(CheckpointOut &cp) const$/;"	f	class:CowDiskImage
serialize	./dev/storage/ide_ctrl.cc	/^IdeController::Channel::serialize(const std::string &base,$/;"	f	class:IdeController::Channel
serialize	./dev/storage/ide_ctrl.cc	/^IdeController::serialize(CheckpointOut &cp) const$/;"	f	class:IdeController
serialize	./dev/storage/ide_disk.cc	/^IdeDisk::serialize(CheckpointOut &cp) const$/;"	f	class:IdeDisk
serialize	./dev/uart8250.cc	/^Uart8250::serialize(CheckpointOut &cp) const$/;"	f	class:Uart8250
serialize	./dev/virtio/base.cc	/^VirtIODeviceBase::serialize(CheckpointOut &cp) const$/;"	f	class:VirtIODeviceBase
serialize	./dev/virtio/base.cc	/^VirtQueue::serialize(CheckpointOut &cp) const$/;"	f	class:VirtQueue
serialize	./dev/virtio/fs9p.cc	/^VirtIO9PProxy::serialize(CheckpointOut &cp) const$/;"	f	class:VirtIO9PProxy
serialize	./dev/x86/cmos.cc	/^X86ISA::Cmos::serialize(CheckpointOut &cp) const$/;"	f	class:X86ISA::Cmos
serialize	./dev/x86/i8042.cc	/^X86ISA::I8042::serialize(CheckpointOut &cp) const$/;"	f	class:X86ISA::I8042
serialize	./dev/x86/i8042.cc	/^X86ISA::PS2Device::serialize(const std::string &base, CheckpointOut &cp) const$/;"	f	class:X86ISA::PS2Device
serialize	./dev/x86/i8042.cc	/^X86ISA::PS2Mouse::serialize(const std::string &base, CheckpointOut &cp) const$/;"	f	class:X86ISA::PS2Mouse
serialize	./dev/x86/i82094aa.cc	/^X86ISA::I82094AA::serialize(CheckpointOut &cp) const$/;"	f	class:X86ISA::I82094AA
serialize	./dev/x86/i8237.cc	/^X86ISA::I8237::serialize(CheckpointOut &cp) const$/;"	f	class:X86ISA::I8237
serialize	./dev/x86/i8254.cc	/^X86ISA::I8254::serialize(CheckpointOut &cp) const$/;"	f	class:X86ISA::I8254
serialize	./dev/x86/i8259.cc	/^X86ISA::I8259::serialize(CheckpointOut &cp) const$/;"	f	class:X86ISA::I8259
serialize	./dev/x86/speaker.cc	/^X86ISA::Speaker::serialize(CheckpointOut &cp) const$/;"	f	class:X86ISA::Speaker
serialize	./kern/kernel_stats.cc	/^Statistics::serialize(CheckpointOut &cp) const$/;"	f	class:Kernel::Statistics
serialize	./mem/cache/cache.cc	/^Cache::serialize(CheckpointOut &cp) const$/;"	f	class:Cache
serialize	./mem/multi_level_page_table_impl.hh	/^MultiLevelPageTable<ISAOps>::serialize(CheckpointOut &cp) const$/;"	f	class:MultiLevelPageTable
serialize	./mem/page_table.cc	/^FuncPageTable::serialize(CheckpointOut &cp) const$/;"	f	class:FuncPageTable
serialize	./mem/physical.cc	/^PhysicalMemory::serialize(CheckpointOut &cp) const$/;"	f	class:PhysicalMemory
serialize	./mem/ruby/system/RubySystem.cc	/^RubySystem::serialize(CheckpointOut &cp) const$/;"	f	class:RubySystem
serialize	./sim/clock_domain.cc	/^SrcClockDomain::serialize(CheckpointOut &cp) const$/;"	f	class:SrcClockDomain
serialize	./sim/cxx_manager.cc	/^CxxConfigManager::serialize(std::ostream &os)$/;"	f	class:CxxConfigManager
serialize	./sim/dvfs_handler.cc	/^DVFSHandler::serialize(CheckpointOut &cp) const$/;"	f	class:DVFSHandler
serialize	./sim/eventq.cc	/^Event::serialize(CheckpointOut &cp) const$/;"	f	class:Event
serialize	./sim/fd_entry.cc	/^FDEntry::serialize(CheckpointOut &cp) const$/;"	f	class:FDEntry
serialize	./sim/process.cc	/^Process::serialize(CheckpointOut &cp) const$/;"	f	class:Process
serialize	./sim/root.cc	/^Root::serialize(CheckpointOut &cp) const$/;"	f	class:Root
serialize	./sim/serialize.cc	/^Globals::serialize(CheckpointOut &cp) const$/;"	f	class:Globals
serialize	./sim/sim_events.cc	/^LocalSimLoopExitEvent::serialize(CheckpointOut &cp) const$/;"	f	class:LocalSimLoopExitEvent
serialize	./sim/system.cc	/^System::serialize(CheckpointOut &cp) const$/;"	f	class:System
serialize	./sim/ticked_object.cc	/^Ticked::serialize(CheckpointOut &cp) const$/;"	f	class:Ticked
serialize	./sim/ticked_object.cc	/^TickedObject::serialize(CheckpointOut &cp) const$/;"	f	class:TickedObject
serialize	./sim/voltage_domain.cc	/^VoltageDomain::serialize(CheckpointOut &cp) const$/;"	f	class:VoltageDomain
serializeAfter	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::serializeAfter(InstQueue &inst_list, ThreadID tid)$/;"	f	class:DefaultRename
serializeAll	./python/swig/pyobject.hh	/^serializeAll(const std::string &cpt_dir)$/;"	f
serializeAll	./sim/serialize.cc	/^Serializable::serializeAll(const string &cpt_dir)$/;"	f	class:Serializable
serializeAll	./sim/sim_object.cc	/^SimObject::serializeAll(CheckpointOut &cp)$/;"	f	class:SimObject
serializeInst	./cpu/o3/rename.hh	/^    DynInstPtr serializeInst[Impl::MaxThreads];$/;"	m	class:DefaultRename
serializeOnNextInst	./cpu/o3/rename.hh	/^    bool serializeOnNextInst[Impl::MaxThreads];$/;"	m	class:DefaultRename
serializeSection	./sim/serialize.cc	/^Serializable::serializeSection(CheckpointOut &cp, const char *name) const$/;"	f	class:Serializable
serializeSection	./sim/serialize.hh	/^    void serializeSection(CheckpointOut &cp, const std::string &name) const {$/;"	f	class:Serializable
serializeStore	./mem/physical.cc	/^PhysicalMemory::serializeStore(CheckpointOut &cp, unsigned int store_id,$/;"	f	class:PhysicalMemory
serializeSymtab	./arch/alpha/system.cc	/^AlphaSystem::serializeSymtab(CheckpointOut &cp) const$/;"	f	class:AlphaSystem
serializeSymtab	./arch/sparc/system.cc	/^SparcSystem::serializeSymtab(CheckpointOut &cp) const$/;"	f	class:SparcSystem
serializeSymtab	./sim/system.hh	/^    virtual void serializeSymtab(CheckpointOut &os) const {}$/;"	f	class:System
serializeThread	./cpu/base.hh	/^    virtual void serializeThread(CheckpointOut &cp, ThreadID tid) const {};$/;"	f	class:BaseCPU
serializeThread	./cpu/kvm/base.cc	/^BaseKvmCPU::serializeThread(CheckpointOut &cp, ThreadID tid) const$/;"	f	class:BaseKvmCPU
serializeThread	./cpu/minor/cpu.cc	/^MinorCPU::serializeThread(CheckpointOut &cp, ThreadID thread_id) const$/;"	f	class:MinorCPU
serializeThread	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::serializeThread(CheckpointOut &cp, ThreadID tid) const$/;"	f	class:FullO3CPU
serializeThread	./cpu/simple/base.cc	/^BaseSimpleCPU::serializeThread(CheckpointOut &cp, ThreadID tid) const$/;"	f	class:BaseSimpleCPU
server	./dev/virtio/VirtIO9P.py	/^    server = Param.String("127.0.0.1", "9P server address or host name")$/;"	v	class:VirtIO9PSocket
serverDataReady	./dev/virtio/fs9p.cc	/^VirtIO9PProxy::serverDataReady()$/;"	f	class:VirtIO9PProxy
serverName	./dev/net/tcp_iface.hh	/^    std::string serverName;$/;"	m	class:TCPIface
serverPort	./dev/net/tcp_iface.hh	/^    int serverPort;$/;"	m	class:TCPIface
server_name	./dev/net/Ethernet.py	/^    server_name = Param.String('localhost', "Message server name")$/;"	v	class:DistEtherLink
server_port	./dev/net/Ethernet.py	/^    server_port = Param.UInt32('2200', "Message server port")$/;"	v	class:DistEtherLink
service	./base/pollevent.cc	/^PollQueue::service()$/;"	f	class:PollQueue
service	./cpu/pc_event.hh	/^    bool service(ThreadContext *tc)$/;"	f	class:PCEventQueue
serviceEvents	./sim/eventq.hh	/^    serviceEvents(Tick when)$/;"	f	class:EventQueue
serviceOne	./sim/eventq.cc	/^EventQueue::serviceOne()$/;"	f	class:EventQueue
service_mutex	./sim/eventq.hh	/^    std::mutex service_mutex;$/;"	m	class:EventQueue
servicedByWrQ	./mem/dram_ctrl.hh	/^    Stats::Scalar servicedByWrQ;$/;"	m	class:DRAMCtrl
set	./arch/arm/types.hh	/^        set(Addr val)$/;"	f	class:ArmISA::PCState
set	./arch/generic/types.hh	/^    set(Addr val)$/;"	f	class:GenericISA::DelaySlotPCState
set	./arch/generic/types.hh	/^    set(Addr val)$/;"	f	class:GenericISA::DelaySlotUPCState
set	./arch/generic/types.hh	/^    set(Addr val)$/;"	f	class:GenericISA::SimplePCState
set	./arch/generic/types.hh	/^    set(Addr val)$/;"	f	class:GenericISA::UPCState
set	./arch/x86/types.hh	/^        set(Addr val)$/;"	f	class:X86ISA::PCState
set	./base/flags.hh	/^    void set(Type f, bool val) { _flags = (_flags & ~f) | (val ? f : 0); }$/;"	f	class:Flags
set	./base/flags.hh	/^    void set(Type flags) { _flags |= flags; }$/;"	f	class:Flags
set	./base/inet.hh	/^    void set(const EthPacketPtr &ptr)$/;"	f	class:Net::Ip6Ptr
set	./base/inet.hh	/^    void set(const EthPacketPtr &ptr)$/;"	f	class:Net::IpPtr
set	./base/inet.hh	/^    void set(const EthPacketPtr &ptr, int offset) { p = ptr; _off = offset; }$/;"	f	class:Net::TcpPtr
set	./base/inet.hh	/^    void set(const EthPacketPtr &ptr, int offset) { p = ptr; _off = offset; }$/;"	f	class:Net::UdpPtr
set	./base/inet.hh	/^    void set(const Ip6Ptr &ptr)$/;"	f	class:Net::TcpPtr
set	./base/inet.hh	/^    void set(const Ip6Ptr &ptr)$/;"	f	class:Net::UdpPtr
set	./base/inet.hh	/^    void set(const IpPtr &ptr)$/;"	f	class:Net::TcpPtr
set	./base/inet.hh	/^    void set(const IpPtr &ptr)$/;"	f	class:Net::UdpPtr
set	./base/refcnt.hh	/^    set(T *d)$/;"	f	class:RefCountingPtr
set	./base/statistics.hh	/^    set(Counter val)$/;"	f	class:Stats::AvgStor
set	./base/statistics.hh	/^    void set(Counter val) { data = val; }$/;"	f	class:Stats::StatStor
set	./base/time.hh	/^    void set(time_t _sec, long _nsec) { sec(_sec); nsec(_nsec); }$/;"	f	class:Time
set	./cpu/base_dyn_inst.hh	/^        void set(double d) { dbl = d; }$/;"	f	union:BaseDynInst::Result
set	./cpu/base_dyn_inst.hh	/^        void set(uint64_t i) { integer = i; }$/;"	f	union:BaseDynInst::Result
set	./cpu/checker/cpu.hh	/^        void set(double d) { dbl = d; }$/;"	f	union:CheckerCPU::Result
set	./cpu/checker/cpu.hh	/^        void set(uint64_t i) { integer = i; }$/;"	f	union:CheckerCPU::Result
set	./cpu/timebuf.hh	/^        void set(int idx)$/;"	f	class:TimeBuffer::wire
set	./dev/mc146818.hh	/^        Bitfield<7> set;       \/\/\/ stop clock updates$/;"	m	class:MC146818
set	./mem/cache/blk.hh	/^    int set, way;$/;"	m	class:CacheBlk
set	./mem/packet_access.hh	/^Packet::set(T v)$/;"	f	class:Packet
set	./mem/packet_access.hh	/^Packet::set(T v, ByteOrder endian)$/;"	f	class:Packet
set	./mem/ruby/filters/BlockBloomFilter.cc	/^BlockBloomFilter::set(Addr addr)$/;"	f	class:BlockBloomFilter
set	./mem/ruby/filters/BulkBloomFilter.cc	/^BulkBloomFilter::set(Addr addr)$/;"	f	class:BulkBloomFilter
set	./mem/ruby/filters/H3BloomFilter.cc	/^H3BloomFilter::set(Addr addr)$/;"	f	class:H3BloomFilter
set	./mem/ruby/filters/LSB_CountingBloomFilter.cc	/^LSB_CountingBloomFilter::set(Addr addr)$/;"	f	class:LSB_CountingBloomFilter
set	./mem/ruby/filters/MultiBitSelBloomFilter.cc	/^MultiBitSelBloomFilter::set(Addr addr)$/;"	f	class:MultiBitSelBloomFilter
set	./mem/ruby/filters/MultiGrainBloomFilter.cc	/^MultiGrainBloomFilter::set(Addr addr)$/;"	f	class:MultiGrainBloomFilter
set	./mem/ruby/filters/NonCountingBloomFilter.cc	/^NonCountingBloomFilter::set(Addr addr)$/;"	f	class:NonCountingBloomFilter
set	./mem/ruby/structures/TimerTable.cc	/^TimerTable::set(Addr address, Tick ready_time)$/;"	f	class:TimerTable
set	./sim/fd_entry.cc	/^FDEntry::set(int sim_fd, const string name, int flags, int mode, bool pipe)$/;"	f	class:FDEntry
setAIWNextPC	./arch/arm/insts/static_inst.hh	/^    setAIWNextPC(XC *xc, Addr val)$/;"	f	class:ArmISA::ArmStaticInst
setASID	./cpu/base_dyn_inst.hh	/^    void setASID(short addr_space_id) { asid = addr_space_id; }$/;"	f	class:BaseDynInst
setAccessLatency	./mem/request.hh	/^    void setAccessLatency() { accessDelta = curTick() - _time - translateDelta; }$/;"	f	class:Request
setActiveThreads	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::setActiveThreads(list<ThreadID> *at_ptr)$/;"	f	class:DefaultCommit
setActiveThreads	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::setActiveThreads(std::list<ThreadID> *at_ptr)$/;"	f	class:DefaultDecode
setActiveThreads	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::setActiveThreads(std::list<ThreadID> *at_ptr)$/;"	f	class:DefaultFetch
setActiveThreads	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::setActiveThreads(list<ThreadID> *at_ptr)$/;"	f	class:DefaultIEW
setActiveThreads	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::setActiveThreads(list<ThreadID> *at_ptr)$/;"	f	class:InstructionQueue
setActiveThreads	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::setActiveThreads(list<ThreadID> *at_ptr)$/;"	f	class:LSQ
setActiveThreads	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::setActiveThreads(list<ThreadID> *at_ptr)$/;"	f	class:DefaultRename
setActiveThreads	./cpu/o3/rob_impl.hh	/^ROB<Impl>::setActiveThreads(list<ThreadID> *at_ptr)$/;"	f	class:ROB
setActivityCount	./cpu/activity.hh	/^    void setActivityCount(int count)$/;"	f	class:ActivityRecorder
setAddr	./mem/packet.hh	/^    void setAddr(Addr _addr) { assert(flags.isSet(VALID_ADDR)); addr = _addr; }$/;"	f	class:Packet
setAddress	./dev/virtio/base.cc	/^VirtQueue::setAddress(Addr address)$/;"	f	class:VirtQueue
setAddress	./dev/virtio/base.hh	/^        void setAddress(Addr addr) { _base = addr; }$/;"	f	class:VirtQueue::VirtRing
setAddress	./mem/ruby/common/SubBlock.hh	/^    void setAddress(Addr addr) { m_address = addr; }$/;"	f	class:SubBlock
setAddress	./mem/ruby/profiler/AccessTraceForAddress.hh	/^    void setAddress(Addr addr) { m_addr = addr; }$/;"	f	class:AccessTraceForAddress
setAf	./arch/arm/table_walker.hh	/^        void setAf()$/;"	f	class:ArmISA::TableWalker::LongDescriptor
setAllInstructions	./mem/ruby/profiler/AddressProfiler.cc	/^AddressProfiler::setAllInstructions(bool all_instructions)$/;"	f	class:AddressProfiler
setAlphaAccess	./arch/alpha/system.cc	/^AlphaSystem::setAlphaAccess(Addr access)$/;"	f	class:AlphaSystem
setAp0	./arch/arm/table_walker.hh	/^        void setAp0()$/;"	f	class:ArmISA::TableWalker::L1Descriptor
setAp0	./arch/arm/table_walker.hh	/^        void setAp0()$/;"	f	class:ArmISA::TableWalker::L2Descriptor
setArchCCReg	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::setArchCCReg(int reg_idx, CCReg val, ThreadID tid)$/;"	f	class:FullO3CPU
setArchFloatReg	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::setArchFloatReg(int reg_idx, float val, ThreadID tid)$/;"	f	class:FullO3CPU
setArchFloatRegInt	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::setArchFloatRegInt(int reg_idx, uint64_t val, ThreadID tid)$/;"	f	class:FullO3CPU
setArchIntReg	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::setArchIntReg(int reg_idx, uint64_t val, ThreadID tid)$/;"	f	class:FullO3CPU
setAsid	./mem/request.hh	/^    setAsid(int asid)$/;"	f	class:Request
setAtCommit	./cpu/base_dyn_inst.hh	/^    void setAtCommit() { status.set(AtCommit); }$/;"	f	class:BaseDynInst
setAttr	./arch/arm/tlb.hh	/^    setAttr(uint64_t attr)$/;"	f	class:ArmISA::TLB
setAttr	./cpu/kvm/device.hh	/^    void setAttr(uint32_t group, uint64_t attr, const T &data) const {$/;"	f	class:KvmDevice
setAttrPtr	./cpu/kvm/device.cc	/^KvmDevice::setAttrPtr(uint32_t group, uint64_t attr, const void *data) const$/;"	f	class:KvmDevice
setAttributes	./arch/arm/pagetable.hh	/^    setAttributes(bool lpae)$/;"	f	struct:ArmISA::TlbEntry
setBCD	./dev/intel_8254_timer.cc	/^Intel8254Timer::Counter::setBCD(int bcd_val)$/;"	f	class:Intel8254Timer::Counter
setBE	./mem/packet_access.hh	/^Packet::setBE(T v)$/;"	f	class:Packet
setBackingStore	./mem/abstract_mem.cc	/^AbstractMemory::setBackingStore(uint8_t* pmem_addr)$/;"	f	class:AbstractMemory
setBadAddress	./mem/packet.hh	/^    setBadAddress()$/;"	f	class:Packet
setBits	./base/bitunion.hh	/^        setBits(int first, int last, uint64_t val)$/;"	f	class:BitfieldBackend::BitfieldBase
setBits	./cpu/pred/sat_counter.hh	/^    void setBits(unsigned bits) { maxVal = (1 << bits) - 1; }$/;"	f	class:SatCounter
setBlockCached	./mem/packet.hh	/^    void setBlockCached()          { flags.set(BLOCK_CACHED); }$/;"	f	class:Packet
setBlocked	./mem/cache/base.cc	/^BaseCache::CacheSlavePort::setBlocked()$/;"	f	class:BaseCache::CacheSlavePort
setBlocked	./mem/cache/base.hh	/^    void setBlocked(BlockedCause cause)$/;"	f	class:BaseCache
setByte	./mem/ruby/common/DataBlock.hh	/^DataBlock::setByte(int whichByte, uint8_t data)$/;"	f	class:DataBlock
setByte	./mem/ruby/common/SubBlock.hh	/^    void setByte(int offset, uint8_t data) { m_data[offset] = data; }$/;"	f	class:SubBlock
setCCEntry	./cpu/o3/rename_map.hh	/^    void setCCEntry(RegIndex arch_reg, PhysRegIndex phys_reg)$/;"	f	class:UnifiedRenameMap
setCCReg	./cpu/checker/thread_context.hh	/^    void setCCReg(int reg_idx, CCReg val)$/;"	f	class:CheckerThreadContext
setCCReg	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::setCCReg(int reg_idx, CCReg val)$/;"	f	class:FullO3CPU
setCCReg	./cpu/o3/regfile.hh	/^    void setCCReg(PhysRegIndex reg_idx, CCReg val)$/;"	f	class:PhysRegFile
setCCReg	./cpu/o3/thread_context.hh	/^    virtual void setCCReg(int reg_idx, CCReg val) {$/;"	f	class:O3ThreadContext
setCCReg	./cpu/simple_thread.hh	/^    void setCCReg(int reg_idx, CCReg val)$/;"	f	class:SimpleThread
setCCReg	./cpu/thread_context.hh	/^    void setCCReg(int reg_idx, CCReg val)$/;"	f	class:ProxyThreadContext
setCCRegFlat	./cpu/checker/thread_context.hh	/^    void setCCRegFlat(int idx, CCReg val)$/;"	f	class:CheckerThreadContext
setCCRegFlat	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::setCCRegFlat(int reg_idx, TheISA::CCReg val)$/;"	f	class:O3ThreadContext
setCCRegFlat	./cpu/simple_thread.hh	/^    void setCCRegFlat(int idx, CCReg val) { ccRegs[idx] = val; }$/;"	f	class:SimpleThread
setCCRegFlat	./cpu/simple_thread.hh	/^    void setCCRegFlat(int idx, CCReg val)$/;"	f	class:SimpleThread
setCCRegFlat	./cpu/thread_context.hh	/^    void setCCRegFlat(int idx, CCReg val)$/;"	f	class:ProxyThreadContext
setCCRegOperand	./cpu/base_dyn_inst.hh	/^    void setCCRegOperand(const StaticInst *si, int idx, CCReg val)$/;"	f	class:BaseDynInst
setCCRegOperand	./cpu/minor/exec_context.hh	/^    setCCRegOperand(const StaticInst *si, int idx, TheISA::CCReg val)$/;"	f	class:Minor::ExecContext
setCCRegOperand	./cpu/o3/dyn_inst.hh	/^    void setCCRegOperand(const StaticInst *si, int idx, CCReg val)$/;"	f	class:BaseO3DynInst
setCPSeq	./sim/insttracer.hh	/^    void setCPSeq(InstSeqNum seq)$/;"	f	class:Trace::InstRecord
setCPU	./arch/alpha/interrupts.hh	/^    setCPU(BaseCPU * _cpu)$/;"	f	class:AlphaISA::Interrupts
setCPU	./arch/arm/interrupts.hh	/^    setCPU(BaseCPU * _cpu)$/;"	f	class:ArmISA::Interrupts
setCPU	./arch/mips/interrupts.hh	/^    setCPU(BaseCPU *_cpu)$/;"	f	class:MipsISA::Interrupts
setCPU	./arch/power/interrupts.hh	/^    setCPU(BaseCPU * _cpu)$/;"	f	class:PowerISA::Interrupts
setCPU	./arch/sparc/interrupts.hh	/^    setCPU(BaseCPU * _cpu)$/;"	f	class:SparcISA::Interrupts
setCPU	./arch/x86/interrupts.cc	/^X86ISA::Interrupts::setCPU(BaseCPU * newCPU)$/;"	f	class:X86ISA::Interrupts
setCPUID	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::setCPUID(const Kvm::CPUIDVector &cpuid)$/;"	f	class:X86KvmCPU
setCPUID	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::setCPUID(const struct kvm_cpuid2 &cpuid)$/;"	f	class:X86KvmCPU
setCache	./mem/cache/prefetch/base.cc	/^BasePrefetcher::setCache(BaseCache *_cache)$/;"	f	class:BasePrefetcher
setCache	./mem/cache/tags/base.cc	/^BaseTags::setCache(BaseCache *_cache)$/;"	f	class:BaseTags
setCache	./mem/ruby/structures/AbstractReplacementPolicy.hh	/^    void setCache(CacheMemory * pCache) {m_cache = pCache;}$/;"	f	class:AbstractReplacementPolicy
setCacheResponding	./mem/packet.hh	/^    void setCacheResponding()$/;"	f	class:Packet
setCallbacks	./mem/dramsim2_wrapper.cc	/^DRAMSim2Wrapper::setCallbacks(DRAMSim::TransactionCompleteCB* read_callback,$/;"	f	class:DRAMSim2Wrapper
setCanCommit	./cpu/base_dyn_inst.hh	/^    void setCanCommit() { status.set(CanCommit); }$/;"	f	class:BaseDynInst
setCanIssue	./cpu/base_dyn_inst.hh	/^    void setCanIssue() { status.set(CanIssue); }$/;"	f	class:BaseDynInst
setCase	./unittest/unittest.cc	/^setCase(const char *newCase)$/;"	f	namespace:UnitTest
setCauseIP	./arch/mips/interrupts.cc	/^setCauseIP(ThreadContext *tc, uint8_t val) {$/;"	f	namespace:MipsISA
setClockFrequency	./sim/core.cc	/^setClockFrequency(Tick ticksPerSecond)$/;"	f
setCommitStage	./cpu/o3/rename.hh	/^    void setCommitStage(Commit *commit_stage)$/;"	f	class:DefaultRename
setCommitted	./cpu/base_dyn_inst.hh	/^    void setCommitted() { status.set(Committed); }$/;"	f	class:BaseDynInst
setCompareValue	./dev/arm/generic_timer.cc	/^ArchTimer::setCompareValue(uint64_t val)$/;"	f	class:ArchTimer
setComplete	./dev/storage/ide_disk.hh	/^    void setComplete()$/;"	f	class:IdeDisk
setCompleted	./cpu/base_dyn_inst.hh	/^    void setCompleted() { status.set(Completed); }$/;"	f	class:BaseDynInst
setConfigAddress	./arch/x86/tlb.cc	/^TLB::setConfigAddress(uint32_t addr)$/;"	f	class:X86ISA::TLB
setConsumer	./mem/ruby/network/MessageBuffer.hh	/^    void setConsumer(Consumer* consumer)$/;"	f	class:MessageBuffer
setConsumer	./mem/ruby/structures/TimerTable.hh	/^    setConsumer(Consumer* consumer_ptr)$/;"	f	class:TimerTable
setConsumer	./mem/ruby/structures/WireBuffer.hh	/^    void setConsumer(Consumer* consumer_ptr)$/;"	f	class:WireBuffer
setContext	./arch/arm/decoder.hh	/^    void setContext(FPSCR fpscr)$/;"	f	class:ArmISA::Decoder
setContext	./arch/sparc/decoder.hh	/^    setContext(MiscReg _asi)$/;"	f	class:SparcISA::Decoder
setContextId	./cpu/checker/thread_context.hh	/^    void setContextId(ContextID id)$/;"	f	class:CheckerThreadContext
setContextId	./cpu/o3/thread_context.hh	/^    virtual void setContextId(int id) { thread->setContextId(id); }$/;"	f	class:O3ThreadContext
setContextId	./cpu/thread_context.hh	/^    void setContextId(int id) { actualTC->setContextId(id); }$/;"	f	class:ProxyThreadContext
setContextId	./cpu/thread_state.hh	/^    void setContextId(ContextID id) { _contextId = id; }$/;"	f	struct:ThreadState
setContextSegment	./cpu/kvm/x86_cpu.cc	/^setContextSegment(ThreadContext *tc, const struct kvm_dtable &kvm_dtable,$/;"	f
setContextSegment	./cpu/kvm/x86_cpu.cc	/^setContextSegment(ThreadContext *tc, const struct kvm_segment &kvm_seg,$/;"	f
setControl	./dev/arm/generic_timer.cc	/^ArchTimer::setControl(uint32_t val)$/;"	f	class:ArchTimer
setControlReg	./arch/arm/pmu.cc	/^PMU::setControlReg(PMCR_t val)$/;"	f	class:ArmISA::PMU
setController	./dev/storage/ide_disk.hh	/^    void setController(IdeController *c) {$/;"	f	class:IdeDisk
setController	./mem/ruby/structures/Prefetcher.hh	/^        void setController(AbstractController *_ctrl)$/;"	f	class:Prefetcher
setController	./mem/ruby/system/DMASequencer.hh	/^    void setController(AbstractController* _cntrl) { m_controller = _cntrl; }$/;"	f	class:DMASequencer
setController	./mem/ruby/system/RubyPort.hh	/^    void setController(AbstractController* _cntrl) { m_controller = _cntrl; }$/;"	f	class:RubyPort
setCount	./sim/sim_events.hh	/^    void setCount(int _count) { count = _count; }$/;"	f	class:CountedDrainEvent
setCounterTypeRegister	./arch/arm/pmu.cc	/^PMU::setCounterTypeRegister(CounterId id, PMEVTYPER_t val)$/;"	f	class:ArmISA::PMU
setCounterValue	./arch/arm/pmu.cc	/^PMU::setCounterValue(CounterId id, uint64_t val)$/;"	f	class:ArmISA::PMU
setCurTick	./sim/eventq.hh	/^    void setCurTick(Tick newVal) { _curTick = newVal; }$/;"	f	class:EventQueue
setCurTick	./sim/eventq.hh	/^    void setCurTick(Tick newVal) { eventq->setCurTick(newVal); }$/;"	f	class:EventManager
setData	./mem/packet.hh	/^    setData(const uint8_t *p)$/;"	f	class:Packet
setData	./mem/ruby/common/DataBlock.cc	/^DataBlock::setData(const uint8_t *data, int offset, int len)$/;"	f	class:DataBlock
setData	./sim/insttracer.hh	/^    void setData(Twin32_t d) { data.as_int = d.a; data_status = DataInt32; }$/;"	f	class:Trace::InstRecord
setData	./sim/insttracer.hh	/^    void setData(Twin64_t d) { data.as_int = d.a; data_status = DataInt64; }$/;"	f	class:Trace::InstRecord
setData	./sim/insttracer.hh	/^    void setData(double d) { data.as_double = d; data_status = DataDouble; }$/;"	f	class:Trace::InstRecord
setData	./sim/insttracer.hh	/^    void setData(int16_t d) { setData((uint16_t)d); }$/;"	f	class:Trace::InstRecord
setData	./sim/insttracer.hh	/^    void setData(int32_t d) { setData((uint32_t)d); }$/;"	f	class:Trace::InstRecord
setData	./sim/insttracer.hh	/^    void setData(int64_t d) { setData((uint64_t)d); }$/;"	f	class:Trace::InstRecord
setData	./sim/insttracer.hh	/^    void setData(int8_t d)  { setData((uint8_t)d); }$/;"	f	class:Trace::InstRecord
setData	./sim/insttracer.hh	/^    void setData(uint16_t d) { data.as_int = d; data_status = DataInt16; }$/;"	f	class:Trace::InstRecord
setData	./sim/insttracer.hh	/^    void setData(uint32_t d) { data.as_int = d; data_status = DataInt32; }$/;"	f	class:Trace::InstRecord
setData	./sim/insttracer.hh	/^    void setData(uint64_t d) { data.as_int = d; data_status = DataInt64; }$/;"	f	class:Trace::InstRecord
setData	./sim/insttracer.hh	/^    void setData(uint8_t d) { data.as_int = d; data_status = DataInt8; }$/;"	f	class:Trace::InstRecord
setDataFromBlock	./mem/packet.hh	/^    setDataFromBlock(const uint8_t *blk_data, int blkSize)$/;"	f	class:Packet
setDcachePort	./cpu/checker/cpu.cc	/^CheckerCPU::setDcachePort(MasterPort *dcache_port)$/;"	f	class:CheckerCPU
setDcachePort	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::setDcachePort(MasterPort *dcache_port)$/;"	f	class:LSQUnit
setDd	./dev/net/i8254xGBe_defs.hh	/^inline void setDd(TxDesc *d) { replaceBits(d->d2, 35, 32, ULL(1)); }$/;"	f	namespace:iGbReg::TxdOp
setDebugFlag	./base/debug.cc	/^setDebugFlag(const char *string)$/;"	f
setDebugLogger	./base/trace.cc	/^setDebugLogger(Logger *logger)$/;"	f	namespace:Trace
setDebugRegisters	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::setDebugRegisters(const struct kvm_debugregs &regs)$/;"	f	class:X86KvmCPU
setDecodeQueue	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::setDecodeQueue(TimeBuffer<DecodeStruct> *dq_ptr)$/;"	f	class:DefaultDecode
setDecodeQueue	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::setDecodeQueue(TimeBuffer<DecodeStruct> *dq_ptr)$/;"	f	class:DefaultRename
setDelayLoop	./arch/alpha/linux/system.cc	/^LinuxAlphaSystem::setDelayLoop(ThreadContext *tc)$/;"	f	class:LinuxAlphaSystem
setDelayLoop	./arch/mips/linux/system.cc	/^LinuxMipsSystem::setDelayLoop(ThreadContext *tc)$/;"	f	class:LinuxMipsSystem
setDelayedCommit	./cpu/static_inst.hh	/^    void setDelayedCommit() { flags[IsDelayedCommit] = true; }$/;"	f	class:StaticInst
setDescription	./mem/ruby/structures/RubyMemoryControl.hh	/^    void setDescription(const std::string& name) { m_description = name; };$/;"	f	class:RubyMemoryControl
setDescription	./mem/ruby/structures/TimerTable.hh	/^    setDescription(const std::string& name)$/;"	f	class:TimerTable
setDescription	./mem/ruby/structures/WireBuffer.hh	/^    void setDescription(const std::string& name) { m_description = name; };$/;"	f	class:WireBuffer
setDeviceStatus	./dev/virtio/base.cc	/^VirtIODeviceBase::setDeviceStatus(DeviceStatus status)$/;"	f	class:VirtIODeviceBase
setDir	./sim/serialize.cc	/^CheckpointIn::setDir(const string &name)$/;"	f	class:CheckpointIn
setDirectedTester	./cpu/testers/directedtest/DirectedGenerator.cc	/^DirectedGenerator::setDirectedTester(RubyDirectedTester* directed_tester)$/;"	f	class:DirectedGenerator
setDirectory	./base/output.cc	/^OutputDirectory::setDirectory(const string &d)$/;"	f	class:OutputDirectory
setDirty	./base/vnc/vncinput.cc	/^VncInput::setDirty()$/;"	f	class:VncInput
setDirty	./base/vnc/vncserver.cc	/^VncServer::setDirty()$/;"	f	class:VncServer
setDistInt	./dev/net/dist_etherlink.cc	/^DistEtherLink::RxLink::setDistInt(DistIface *m)$/;"	f	class:DistEtherLink::RxLink
setDistInt	./dev/net/dist_etherlink.hh	/^        void setDistInt(DistIface *m) { assert(!distIface); distIface=m; }$/;"	f	class:DistEtherLink::TxLink
setDmaComplete	./dev/storage/ide_ctrl.cc	/^IdeController::setDmaComplete(IdeDisk *disk)$/;"	f	class:IdeController
setDrainState	./cpu/minor/execute.cc	/^Execute::setDrainState(DrainState state)$/;"	f	class:Minor::Execute
setEA	./cpu/base_dyn_inst.hh	/^    void setEA(Addr ea) { instEffAddr = ea; instFlags[EACalcDone] = true; }$/;"	f	class:BaseDynInst
setEA	./cpu/minor/exec_context.hh	/^    void setEA(Addr ea)$/;"	f	class:Minor::ExecContext
setEncodings	./base/vnc/vncserver.cc	/^VncServer::setEncodings()$/;"	f	class:VncServer
setEntry	./cpu/o3/rename_map.cc	/^UnifiedRenameMap::setEntry(RegIndex arch_reg, PhysRegIndex phys_reg)$/;"	f	class:UnifiedRenameMap
setEntry	./cpu/o3/rename_map.hh	/^    void setEntry(RegIndex arch_reg, PhysRegIndex phys_reg)$/;"	f	class:SimpleRenameMap
setEventQueue	./python/m5/event.py	/^def setEventQueue(eventq):$/;"	f
setExcAcRel	./arch/arm/insts/mem64.cc	/^Memory64::setExcAcRel(bool exclusive, bool acrel)$/;"	f	class:ArmISA::Memory64
setExceptionState	./arch/mips/faults.cc	/^MipsFaultBase::setExceptionState(ThreadContext *tc, uint8_t excCode)$/;"	f	class:MipsISA::MipsFaultBase
setExecuted	./cpu/base_dyn_inst.hh	/^    void setExecuted() { status.set(Executed); }$/;"	f	class:BaseDynInst
setExpressSnoop	./mem/packet.hh	/^    void setExpressSnoop()      { flags.set(EXPRESS_SNOOP); }$/;"	f	class:Packet
setExpression	./base/match.cc	/^ObjectMatch::setExpression(const string &expr)$/;"	f	class:ObjectMatch
setExpression	./base/match.cc	/^ObjectMatch::setExpression(const vector<string> &expr)$/;"	f	class:ObjectMatch
setExtraData	./mem/request.hh	/^    setExtraData(uint64_t extraData)$/;"	f	class:Request
setFPExceptions	./arch/arm/insts/vfp.hh	/^setFPExceptions(int exceptions) {$/;"	f	namespace:ArmISA
setFPUState	./cpu/kvm/base.cc	/^BaseKvmCPU::setFPUState(const struct kvm_fpu &state)$/;"	f	class:BaseKvmCPU
setFSReg	./arch/sparc/ua2005.cc	/^ISA::setFSReg(int miscReg, const MiscReg &val, ThreadContext *tc)$/;"	f	class:ISA
setFault	./cpu/minor/pipe_data.cc	/^ForwardLineData::setFault(Fault fault_)$/;"	f	class:Minor::ForwardLineData
setFault	./cpu/o3/fetch.hh	/^        void setFault(Fault _fault)$/;"	f	class:DefaultFetch::FinishTranslationEvent
setFetchQueue	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::setFetchQueue(TimeBuffer<FetchStruct> *fq_ptr)$/;"	f	class:DefaultCommit
setFetchQueue	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::setFetchQueue(TimeBuffer<FetchStruct> *fq_ptr)$/;"	f	class:DefaultDecode
setFetchQueue	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::setFetchQueue(TimeBuffer<FetchStruct> *ftb_ptr)$/;"	f	class:DefaultFetch
setFetchSeq	./sim/insttracer.hh	/^    void setFetchSeq(InstSeqNum seq)$/;"	f	class:Trace::InstRecord
setFirstMicroop	./cpu/static_inst.hh	/^    void setFirstMicroop() { flags[IsFirstMicroop] = true; }$/;"	f	class:StaticInst
setFlag	./cpu/static_inst.hh	/^    void setFlag(Flags f) { flags[f] = true; }$/;"	f	class:StaticInst
setFlags	./mem/request.hh	/^    setFlags(Flags flags)$/;"	f	class:Request
setFlags	./sim/eventq.hh	/^    setFlags(Flags _flags)$/;"	f	class:Event
setFloatEntry	./cpu/o3/rename_map.hh	/^    void setFloatEntry(RegIndex arch_reg, PhysRegIndex phys_reg)$/;"	f	class:UnifiedRenameMap
setFloatReg	./cpu/checker/thread_context.hh	/^    void setFloatReg(int reg_idx, FloatReg val)$/;"	f	class:CheckerThreadContext
setFloatReg	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::setFloatReg(int reg_idx, FloatReg val)$/;"	f	class:FullO3CPU
setFloatReg	./cpu/o3/regfile.hh	/^    void setFloatReg(PhysRegIndex reg_idx, FloatReg val)$/;"	f	class:PhysRegFile
setFloatReg	./cpu/o3/thread_context.hh	/^    virtual void setFloatReg(int reg_idx, FloatReg val) {$/;"	f	class:O3ThreadContext
setFloatReg	./cpu/simple_thread.hh	/^    void setFloatReg(int reg_idx, FloatReg val)$/;"	f	class:SimpleThread
setFloatReg	./cpu/thread_context.hh	/^    void setFloatReg(int reg_idx, FloatReg val)$/;"	f	class:ProxyThreadContext
setFloatRegBits	./cpu/checker/thread_context.hh	/^    void setFloatRegBits(int reg_idx, FloatRegBits val)$/;"	f	class:CheckerThreadContext
setFloatRegBits	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::setFloatRegBits(int reg_idx, FloatRegBits val)$/;"	f	class:FullO3CPU
setFloatRegBits	./cpu/o3/regfile.hh	/^    void setFloatRegBits(PhysRegIndex reg_idx, FloatRegBits val)$/;"	f	class:PhysRegFile
setFloatRegBits	./cpu/o3/thread_context.hh	/^    virtual void setFloatRegBits(int reg_idx, FloatRegBits val) {$/;"	f	class:O3ThreadContext
setFloatRegBits	./cpu/simple_thread.hh	/^    void setFloatRegBits(int reg_idx, FloatRegBits val)$/;"	f	class:SimpleThread
setFloatRegBits	./cpu/thread_context.hh	/^    void setFloatRegBits(int reg_idx, FloatRegBits val)$/;"	f	class:ProxyThreadContext
setFloatRegBitsFlat	./cpu/checker/thread_context.hh	/^    void setFloatRegBitsFlat(int idx, FloatRegBits val)$/;"	f	class:CheckerThreadContext
setFloatRegBitsFlat	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::setFloatRegBitsFlat(int reg_idx, FloatRegBits val)$/;"	f	class:O3ThreadContext
setFloatRegBitsFlat	./cpu/simple_thread.hh	/^    void setFloatRegBitsFlat(int idx, FloatRegBits val) {$/;"	f	class:SimpleThread
setFloatRegBitsFlat	./cpu/thread_context.hh	/^    void setFloatRegBitsFlat(int idx, FloatRegBits val)$/;"	f	class:ProxyThreadContext
setFloatRegFlat	./cpu/checker/thread_context.hh	/^    void setFloatRegFlat(int idx, FloatReg val)$/;"	f	class:CheckerThreadContext
setFloatRegFlat	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::setFloatRegFlat(int reg_idx, FloatReg val)$/;"	f	class:O3ThreadContext
setFloatRegFlat	./cpu/simple_thread.hh	/^    void setFloatRegFlat(int idx, FloatReg val) { floatRegs.f[idx] = val; }$/;"	f	class:SimpleThread
setFloatRegFlat	./cpu/thread_context.hh	/^    void setFloatRegFlat(int idx, FloatReg val)$/;"	f	class:ProxyThreadContext
setFloatRegOperand	./cpu/base_dyn_inst.hh	/^    void setFloatRegOperand(const StaticInst *si, int idx, FloatReg val)$/;"	f	class:BaseDynInst
setFloatRegOperand	./cpu/minor/exec_context.hh	/^    setFloatRegOperand(const StaticInst *si, int idx,$/;"	f	class:Minor::ExecContext
setFloatRegOperand	./cpu/o3/dyn_inst.hh	/^    void setFloatRegOperand(const StaticInst *si, int idx, FloatReg val)$/;"	f	class:BaseO3DynInst
setFloatRegOperandBits	./cpu/base_dyn_inst.hh	/^    void setFloatRegOperandBits(const StaticInst *si, int idx, FloatRegBits val)$/;"	f	class:BaseDynInst
setFloatRegOperandBits	./cpu/minor/exec_context.hh	/^    setFloatRegOperandBits(const StaticInst *si, int idx,$/;"	f	class:Minor::ExecContext
setFloatRegOperandBits	./cpu/o3/dyn_inst.hh	/^    void setFloatRegOperandBits(const StaticInst *si, int idx,$/;"	f	class:BaseO3DynInst
setFrameBuffer	./base/vnc/vncinput.cc	/^VncInput::setFrameBuffer(const FrameBuffer *rfb)$/;"	f	class:VncInput
setFreeFU	./cpu/o3/inst_queue.hh	/^        void setFreeFU() { freeFU = true; }$/;"	f	class:InstructionQueue::FUCompletion
setFreeList	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::setFreeList(FreeList *fl_ptr)$/;"	f	class:DefaultRename
setFreq	./dev/arm/generic_timer.cc	/^SystemCounter::setFreq(uint32_t freq)$/;"	f	class:SystemCounter
setFromNetQueue	./mem/ruby/network/Network.cc	/^Network::setFromNetQueue(NodeID id, bool ordered, int network_num,$/;"	f	class:Network
setFuncExeInst	./cpu/thread_state.hh	/^    void setFuncExeInst(Counter new_val) { funcExeInst = new_val; }$/;"	f	struct:ThreadState
setFunctionalResponseStatus	./mem/packet.hh	/^    setFunctionalResponseStatus(bool success)$/;"	f	class:Packet
setGenericTimer	./arch/arm/system.hh	/^    void setGenericTimer(GenericTimer *generic_timer)$/;"	f	class:ArmSystem
setGic	./dev/arm/realview.hh	/^    void setGic(BaseGic *_gic) { gic = _gic; }$/;"	f	class:RealView
setGlobalFrequency	./python/m5/ticks.py	/^def setGlobalFrequency(ticksPerSecond):$/;"	f
setGlobalPointer	./base/loader/object_file.hh	/^    void setGlobalPointer(Addr global_ptr) { globalPtr = global_ptr; }$/;"	f	class:ObjectFile
setGuestFeatures	./dev/virtio/base.cc	/^VirtIODeviceBase::setGuestFeatures(FeatureBits features)$/;"	f	class:VirtIODeviceBase
setHasSharers	./mem/packet.hh	/^    void setHasSharers()    { flags.set(HAS_SHARERS); }$/;"	f	class:Packet
setHotLines	./mem/ruby/profiler/AddressProfiler.cc	/^AddressProfiler::setHotLines(bool hot_lines)$/;"	f	class:AddressProfiler
setIEWQueue	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::setIEWQueue(TimeBuffer<IEWStruct> *iq_ptr)$/;"	f	class:DefaultCommit
setIEWQueue	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::setIEWQueue(TimeBuffer<IEWStruct> *iq_ptr)$/;"	f	class:DefaultIEW
setIEWStage	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::setIEWStage(IEW *iew_stage)$/;"	f	class:DefaultCommit
setIEWStage	./cpu/o3/rename.hh	/^    void setIEWStage(IEW *iew_stage)$/;"	f	class:DefaultRename
setIQ	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::setIQ(InstructionQueue<Impl> *iq_ptr)$/;"	f	class:MemDepUnit
setIRQLine	./cpu/kvm/vm.cc	/^KvmVM::setIRQLine(uint32_t irq, bool high)$/;"	f	class:KvmVM
setISA	./arch/arm/isa_device.cc	/^BaseISADevice::setISA(ISA *_isa)$/;"	f	class:ArmISA::BaseISADevice
setIWNextPC	./arch/arm/insts/static_inst.hh	/^    setIWNextPC(XC *xc, Addr val)$/;"	f	class:ArmISA::ArmStaticInst
setIcachePort	./cpu/checker/cpu.cc	/^CheckerCPU::setIcachePort(MasterPort *icache_port)$/;"	f	class:CheckerCPU
setIdleProcess	./arch/alpha/kernel_stats.cc	/^Statistics::setIdleProcess(Addr idlepcbb, ThreadContext *tc)$/;"	f	class:AlphaISA::Kernel::Statistics
setIgnore	./base/trace.hh	/^    void setIgnore(ObjectMatch &ignore_) { ignore = ignore_; }$/;"	f	class:Trace::Logger
setInIQ	./cpu/base_dyn_inst.hh	/^    void setInIQ() { status.set(IqEntry); }$/;"	f	class:BaseDynInst
setInLSQ	./cpu/base_dyn_inst.hh	/^    void setInLSQ() { status.set(LsqEntry); }$/;"	f	class:BaseDynInst
setInPort	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.cc	/^NetworkLink::setInPort(int port)$/;"	f	class:NetworkLink
setInROB	./cpu/base_dyn_inst.hh	/^    void setInROB() { status.set(RobEntry); }$/;"	f	class:BaseDynInst
setIncomingLink	./mem/ruby/network/MessageBuffer.hh	/^    void setIncomingLink(int link_id) { m_input_link_id = link_id; }$/;"	f	class:MessageBuffer
setIncomingLink	./mem/ruby/slicc_interface/Message.hh	/^    void setIncomingLink(int link) { incoming_link = link; }$/;"	f	class:Message
setInfo	./base/statistics.cc	/^InfoAccess::setInfo(Info *info)$/;"	f	class:Stats::InfoAccess
setInit	./base/statistics.cc	/^InfoAccess::setInit()$/;"	f	class:Stats::InfoAccess
setInst	./cpu/o3/dep_graph.hh	/^    void setInst(PhysRegIndex idx, DynInstPtr &new_inst)$/;"	f	class:DependencyGraph
setInstListIt	./cpu/base_dyn_inst.hh	/^    void setInstListIt(ListIt _instListIt) { instListIt = _instListIt; }$/;"	f	class:BaseDynInst
setIntEntry	./cpu/o3/rename_map.hh	/^    void setIntEntry(RegIndex arch_reg, PhysRegIndex phys_reg)$/;"	f	class:UnifiedRenameMap
setIntReg	./cpu/checker/thread_context.hh	/^    void setIntReg(int reg_idx, uint64_t val)$/;"	f	class:CheckerThreadContext
setIntReg	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::setIntReg(int reg_idx, uint64_t val)$/;"	f	class:FullO3CPU
setIntReg	./cpu/o3/regfile.hh	/^    void setIntReg(PhysRegIndex reg_idx, uint64_t val)$/;"	f	class:PhysRegFile
setIntReg	./cpu/o3/thread_context.hh	/^    virtual void setIntReg(int reg_idx, uint64_t val) {$/;"	f	class:O3ThreadContext
setIntReg	./cpu/simple_thread.hh	/^    void setIntReg(int reg_idx, uint64_t val)$/;"	f	class:SimpleThread
setIntReg	./cpu/thread_context.hh	/^    void setIntReg(int reg_idx, uint64_t val)$/;"	f	class:ProxyThreadContext
setIntRegFlat	./cpu/checker/thread_context.hh	/^    void setIntRegFlat(int idx, uint64_t val)$/;"	f	class:CheckerThreadContext
setIntRegFlat	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::setIntRegFlat(int reg_idx, uint64_t val)$/;"	f	class:O3ThreadContext
setIntRegFlat	./cpu/simple_thread.hh	/^    void setIntRegFlat(int idx, uint64_t val) { intRegs[idx] = val; }$/;"	f	class:SimpleThread
setIntRegFlat	./cpu/thread_context.hh	/^    void setIntRegFlat(int idx, uint64_t val)$/;"	f	class:ProxyThreadContext
setIntRegOperand	./cpu/base_dyn_inst.hh	/^    void setIntRegOperand(const StaticInst *si, int idx, IntReg val)$/;"	f	class:BaseDynInst
setIntRegOperand	./cpu/minor/exec_context.hh	/^    setIntRegOperand(const StaticInst *si, int idx, IntReg val)$/;"	f	class:Minor::ExecContext
setIntRegOperand	./cpu/o3/dyn_inst.hh	/^    void setIntRegOperand(const StaticInst *si, int idx, IntReg val)$/;"	f	class:BaseO3DynInst
setIntState	./arch/arm/kvm/gic.cc	/^KvmGic::setIntState(uint8_t type, uint8_t vcpu, uint16_t irq, bool high)$/;"	f	class:KvmGic
setInterruptMask	./dev/arm/pl011.hh	/^    void setInterruptMask(uint16_t mask) { setInterrupts(rawInt, mask); }$/;"	f	class:Pl011
setInterrupts	./dev/arm/hdlcd.cc	/^HDLcd::setInterrupts(uint32_t ints, uint32_t mask)$/;"	f	class:HDLcd
setInterrupts	./dev/arm/pl011.cc	/^Pl011::setInterrupts(uint16_t ints, uint16_t mask)$/;"	f	class:Pl011
setIntrFreq	./arch/alpha/system.hh	/^    void setIntrFreq(Tick freq) { intrFreq = freq; }$/;"	f	class:AlphaSystem
setIpr	./arch/alpha/ev5.cc	/^ISA::setIpr(int idx, uint64_t val, ThreadContext *tc)$/;"	f	class:AlphaISA::ISA
setIssueToExecuteQueue	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::setIssueToExecuteQueue(TimeBuffer<IssueStruct> *i2e_ptr)$/;"	f	class:InstructionQueue
setIssued	./cpu/base_dyn_inst.hh	/^    void setIssued() { status.set(Issued); }$/;"	f	class:BaseDynInst
setKernelControl	./dev/arm/generic_timer.hh	/^    void setKernelControl(uint32_t val) { _regCntkctl = val; }$/;"	f	class:SystemCounter
setKeyboard	./base/vnc/vncinput.hh	/^    void setKeyboard(VncKeyboard *_keyboard) { keyboard = _keyboard; }$/;"	f	class:VncInput
setKvmDTableReg	./cpu/kvm/x86_cpu.cc	/^setKvmDTableReg(ThreadContext *tc, struct kvm_dtable &kvm_dtable,$/;"	f	file:
setKvmSegmentReg	./cpu/kvm/x86_cpu.cc	/^setKvmSegmentReg(ThreadContext *tc, struct kvm_segment &kvm_seg,$/;"	f	file:
setLE	./mem/packet_access.hh	/^Packet::setLE(T v)$/;"	f	class:Packet
setLastEnqueueTime	./mem/ruby/slicc_interface/Message.hh	/^    void setLastEnqueueTime(const Tick& time) { m_LastEnqueueTime = time; }$/;"	f	class:Message
setLastMicroop	./cpu/static_inst.hh	/^    void setLastMicroop() { flags[IsLastMicroop] = true; }$/;"	f	class:StaticInst
setLinkConsumer	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.cc	/^NetworkLink_d::setLinkConsumer(Consumer *consumer)$/;"	f	class:NetworkLink_d
setLinkConsumer	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.cc	/^NetworkLink::setLinkConsumer(FlexibleConsumer *consumer)$/;"	f	class:NetworkLink
setLocalInt	./dev/net/dist_etherlink.hh	/^        void setLocalInt(LocalIface *i) { assert(!localIface); localIface=i; }$/;"	f	class:DistEtherLink::Link
setLocked	./mem/ruby/slicc_interface/AbstractCacheEntry.cc	/^AbstractCacheEntry::setLocked(int context)$/;"	f	class:AbstractCacheEntry
setLocked	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::setLocked(Addr address, int context)$/;"	f	class:CacheMemory
setM5Reg	./arch/x86/decoder.hh	/^    void setM5Reg(HandyM5Reg m5Reg)$/;"	f	class:X86ISA::Decoder
setMMU	./arch/arm/table_walker.cc	/^TableWalker::setMMU(Stage2MMU *m, MasterID master_id)$/;"	f	class:TableWalker
setMMU	./arch/arm/tlb.cc	/^TLB::setMMU(Stage2MMU *m, MasterID master_id)$/;"	f	class:TLB
setMRU	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::setMRU(Addr address)$/;"	f	class:CacheMemory
setMRU	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::setMRU(const AbstractCacheEntry *e)$/;"	f	class:CacheMemory
setMSR	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::setMSR(uint32_t index, uint64_t value)$/;"	f	class:X86KvmCPU
setMSRs	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::setMSRs(const KvmMSRVector &msrs)$/;"	f	class:X86KvmCPU
setMSRs	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::setMSRs(const struct kvm_msrs &msrs)$/;"	f	class:X86KvmCPU
setMask	./mem/cache/tags/base_set_assoc.hh	/^    unsigned setMask;$/;"	m	class:BaseSetAssoc
setMaxSize	./mem/ruby/network/garnet/fixed-pipeline/flitBuffer_d.cc	/^flitBuffer_d::setMaxSize(int maximum)$/;"	f	class:flitBuffer_d
setMaxSize	./mem/ruby/network/garnet/flexible-pipeline/flitBuffer.cc	/^flitBuffer::setMaxSize(int maximum)$/;"	f	class:flitBuffer
setMem	./sim/insttracer.hh	/^    void setMem(Addr a, Addr s, unsigned f)$/;"	f	class:Trace::InstRecord
setMemoryMode	./sim/system.cc	/^System::setMemoryMode(Enums::MemoryMode mode)$/;"	f	class:System
setMipsAccess	./arch/mips/system.cc	/^MipsSystem::setMipsAccess(Addr access)$/;"	f	class:MipsSystem
setMiscReg	./arch/alpha/isa.cc	/^ISA::setMiscReg(int misc_reg, const MiscReg &val, ThreadContext *tc,$/;"	f	class:AlphaISA::ISA
setMiscReg	./arch/arm/isa.cc	/^ISA::setMiscReg(int misc_reg, const MiscReg &val, ThreadContext *tc)$/;"	f	class:ArmISA::ISA
setMiscReg	./arch/arm/isa_device.cc	/^DummyISADevice::setMiscReg(int misc_reg, MiscReg val)$/;"	f	class:ArmISA::DummyISADevice
setMiscReg	./arch/arm/pmu.cc	/^PMU::setMiscReg(int misc_reg, MiscReg val)$/;"	f	class:ArmISA::PMU
setMiscReg	./arch/mips/isa.cc	/^ISA::setMiscReg(int misc_reg, const MiscReg &val,$/;"	f	class:MipsISA::ISA
setMiscReg	./arch/power/isa.hh	/^    setMiscReg(int misc_reg, const MiscReg &val, ThreadContext *tc)$/;"	f	class:PowerISA::ISA
setMiscReg	./arch/sparc/isa.cc	/^ISA::setMiscReg(int miscReg, MiscReg val, ThreadContext * tc)$/;"	f	class:SparcISA::ISA
setMiscReg	./arch/x86/isa.cc	/^ISA::setMiscReg(int miscReg, MiscReg val, ThreadContext * tc)$/;"	f	class:X86ISA::ISA
setMiscReg	./cpu/checker/thread_context.hh	/^    void setMiscReg(int misc_reg, const MiscReg &val)$/;"	f	class:CheckerThreadContext
setMiscReg	./cpu/minor/exec_context.hh	/^    setMiscReg(int misc_reg, const TheISA::MiscReg &val)$/;"	f	class:Minor::ExecContext
setMiscReg	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::setMiscReg(int misc_reg,$/;"	f	class:FullO3CPU
setMiscReg	./cpu/o3/dyn_inst.hh	/^    void setMiscReg(int misc_reg, const MiscReg &val)$/;"	f	class:BaseO3DynInst
setMiscReg	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::setMiscReg(int misc_reg, const MiscReg &val)$/;"	f	class:O3ThreadContext
setMiscReg	./cpu/simple_thread.hh	/^    setMiscReg(int misc_reg, const MiscReg &val, ThreadID tid = 0)$/;"	f	class:SimpleThread
setMiscReg	./cpu/thread_context.hh	/^    void setMiscReg(int misc_reg, const MiscReg &val)$/;"	f	class:ProxyThreadContext
setMiscReg	./dev/arm/generic_timer.cc	/^GenericTimer::setMiscReg(int reg, unsigned cpu, MiscReg val)$/;"	f	class:GenericTimer
setMiscRegNoEffect	./arch/alpha/isa.cc	/^ISA::setMiscRegNoEffect(int misc_reg, const MiscReg &val, ThreadID tid)$/;"	f	class:AlphaISA::ISA
setMiscRegNoEffect	./arch/arm/isa.cc	/^ISA::setMiscRegNoEffect(int misc_reg, const MiscReg &val)$/;"	f	class:ArmISA::ISA
setMiscRegNoEffect	./arch/mips/isa.cc	/^ISA::setMiscRegNoEffect(int misc_reg, const MiscReg &val, ThreadID tid)$/;"	f	class:MipsISA::ISA
setMiscRegNoEffect	./arch/power/isa.hh	/^    setMiscRegNoEffect(int misc_reg, const MiscReg &val)$/;"	f	class:PowerISA::ISA
setMiscRegNoEffect	./arch/sparc/isa.cc	/^ISA::setMiscRegNoEffect(int miscReg, MiscReg val)$/;"	f	class:SparcISA::ISA
setMiscRegNoEffect	./arch/x86/isa.cc	/^ISA::setMiscRegNoEffect(int miscReg, MiscReg val)$/;"	f	class:X86ISA::ISA
setMiscRegNoEffect	./cpu/checker/cpu.hh	/^    void setMiscRegNoEffect(int misc_reg, const MiscReg &val)$/;"	f	class:CheckerCPU
setMiscRegNoEffect	./cpu/checker/thread_context.hh	/^    void setMiscRegNoEffect(int misc_reg, const MiscReg &val)$/;"	f	class:CheckerThreadContext
setMiscRegNoEffect	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::setMiscRegNoEffect(int misc_reg,$/;"	f	class:FullO3CPU
setMiscRegNoEffect	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::setMiscRegNoEffect(int misc_reg, const MiscReg &val)$/;"	f	class:O3ThreadContext
setMiscRegNoEffect	./cpu/simple_thread.hh	/^    setMiscRegNoEffect(int misc_reg, const MiscReg &val, ThreadID tid = 0)$/;"	f	class:SimpleThread
setMiscRegNoEffect	./cpu/thread_context.hh	/^    void setMiscRegNoEffect(int misc_reg, const MiscReg &val)$/;"	f	class:ProxyThreadContext
setMiscRegOperand	./cpu/minor/exec_context.hh	/^    setMiscRegOperand(const StaticInst *si, int idx,$/;"	f	class:Minor::ExecContext
setMiscRegOperand	./cpu/o3/dyn_inst.hh	/^    void setMiscRegOperand(const StaticInst *si, int idx,$/;"	f	class:BaseO3DynInst
setMode	./dev/intel_8254_timer.cc	/^Intel8254Timer::Counter::setMode(int mode_val)$/;"	f	class:Intel8254Timer::Counter
setMouse	./base/vnc/vncinput.hh	/^    void setMouse(VncMouse *_mouse) { mouse = _mouse; }$/;"	f	class:VncInput
setMsgCounter	./mem/ruby/slicc_interface/Message.hh	/^    void setMsgCounter(uint64_t c) { m_msg_counter = c; }$/;"	f	class:Message
setName	./base/statistics.cc	/^Info::setName(const string &name)$/;"	f	class:Stats::Info
setName	./sim/cxx_config.hh	/^    virtual void setName(const std::string &name_) { }$/;"	f	class:CxxConfigParams
setNetDest	./mem/ruby/common/NetDest.cc	/^NetDest::setNetDest(MachineType machine, const Set& set)$/;"	f	class:NetDest
setNextPC	./arch/arm/insts/static_inst.hh	/^    setNextPC(XC *xc, Addr val)$/;"	f	class:ArmISA::ArmStaticInst
setNoFault	./cpu/translation.hh	/^    setNoFault()$/;"	f	class:WholeTranslationState
setOffset	./dev/arm/generic_timer.cc	/^ArchTimer::setOffset(uint64_t val)$/;"	f	class:ArchTimer
setOneReg	./cpu/kvm/base.cc	/^BaseKvmCPU::setOneReg(uint64_t id, const void *addr)$/;"	f	class:BaseKvmCPU
setOneReg	./cpu/kvm/base.hh	/^    void setOneReg(uint64_t id, uint32_t value) { setOneReg(id, &value); }$/;"	f	class:BaseKvmCPU
setOneReg	./cpu/kvm/base.hh	/^    void setOneReg(uint64_t id, uint64_t value) { setOneReg(id, &value); }$/;"	f	class:BaseKvmCPU
setOutPort	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.cc	/^NetworkLink::setOutPort(int port)$/;"	f	class:NetworkLink
setOutputDir	./python/m5/core.py	/^def setOutputDir(dir):$/;"	f
setOutputDir	./sim/core.cc	/^setOutputDir(const string &dir)$/;"	f
setPC	./mem/request.hh	/^    setPC(Addr pc)$/;"	f	class:Request
setPTEFields	./arch/x86/pagetable.hh	/^        void setPTEFields(PageTableEntry& PTE, uint64_t flags = 0)$/;"	f	class:X86ISA::PageTableOps
setPaddr	./mem/request.hh	/^    setPaddr(Addr paddr)$/;"	f	class:Request
setParam	./sim/cxx_config.hh	/^    virtual bool setParam(const std::string &name,$/;"	f	class:CxxConfigParams
setParam	./sim/cxx_manager.cc	/^CxxConfigManager::setParam(const std::string &object_name,$/;"	f	class:CxxConfigManager
setParamVector	./sim/cxx_config.hh	/^    virtual bool setParamVector(const std::string &name,$/;"	f	class:CxxConfigParams
setParamVector	./sim/cxx_manager.cc	/^CxxConfigManager::setParamVector(const std::string &object_name,$/;"	f	class:CxxConfigManager
setParams	./base/statistics.cc	/^InfoAccess::setParams(const StorageParams *params)$/;"	f	class:Stats::InfoAccess
setPeer	./dev/net/etherint.cc	/^EtherInt::setPeer(EtherInt *p)$/;"	f	class:EtherInt
setPhys	./mem/request.hh	/^    setPhys(Addr paddr, unsigned size, Flags flags, MasterID mid, Tick time)$/;"	f	class:Request
setPid	./cpu/base.hh	/^    void setPid(uint32_t pid) { _pid = pid; }$/;"	f	class:BaseCPU
setPixelFormat	./base/vnc/vncserver.cc	/^VncServer::setPixelFormat()$/;"	f	class:VncServer
setPnum	./arch/x86/pagetable.hh	/^        void setPnum(PageTableEntry& PTE, Addr paddr)$/;"	f	class:X86ISA::PageTableOps
setPortConnectionCount	./sim/cxx_config.hh	/^    virtual bool setPortConnectionCount(const std::string &name,$/;"	f	class:CxxConfigParams
setPredTaken	./cpu/base_dyn_inst.hh	/^    void setPredTaken(bool predicted_taken)$/;"	f	class:BaseDynInst
setPredTarg	./cpu/base_dyn_inst.hh	/^    void setPredTarg(const TheISA::PCState &_predPC)$/;"	f	class:BaseDynInst
setPredicate	./cpu/base_dyn_inst.hh	/^    void setPredicate(bool val)$/;"	f	class:BaseDynInst
setPredicate	./cpu/minor/exec_context.hh	/^    setPredicate(bool val)$/;"	f	class:Minor::ExecContext
setPredicate	./cpu/simple_thread.hh	/^    void setPredicate(bool val)$/;"	f	class:SimpleThread
setPredicate	./cpu/thread_context.hh	/^    void setPredicate(bool val)$/;"	f	class:ProxyThreadContext
setPredicate	./sim/insttracer.hh	/^    void setPredicate(bool val) { predicate = val; }$/;"	f	class:Trace::InstRecord
setPriority	./mem/ruby/network/MessageBuffer.hh	/^    void setPriority(int rank) { m_priority_rank = rank; }$/;"	f	class:MessageBuffer
setQueueAddress	./dev/virtio/base.cc	/^VirtIODeviceBase::setQueueAddress(uint32_t address)$/;"	f	class:VirtIODeviceBase
setQueueSelect	./dev/virtio/base.hh	/^    void setQueueSelect(QueueID idx) { _queueSelect = idx; }$/;"	f	class:VirtIODeviceBase
setRFlags	./arch/x86/utility.cc	/^setRFlags(ThreadContext *tc, uint64_t val)$/;"	f	namespace:X86ISA
setROB	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::setROB(ROB *rob_ptr)$/;"	f	class:DefaultCommit
setRW	./dev/intel_8254_timer.cc	/^Intel8254Timer::Counter::setRW(int rw_val)$/;"	f	class:Intel8254Timer::Counter
setRaw	./mem/packet_access.hh	/^Packet::setRaw(T v)$/;"	f	class:Packet
setReadPipeSource	./sim/process.cc	/^Process::setReadPipeSource(int read_pipe_fd, int source_fd)$/;"	f	class:Process
setReadSignal	./dev/arm/ufs_device.hh	/^        void setReadSignal() {readCompleted = true;};$/;"	f	class:UFSHostDevice::UFSSCSIDevice
setReg	./arch/x86/interrupts.cc	/^X86ISA::Interrupts::setReg(ApicRegIndex reg, uint32_t val)$/;"	f	class:X86ISA::Interrupts
setReg	./cpu/o3/scoreboard.hh	/^    void setReg(PhysRegIndex reg_idx)$/;"	f	class:Scoreboard
setRegArrayBit	./arch/x86/interrupts.hh	/^    setRegArrayBit(ApicRegIndex base, uint8_t vector)$/;"	f	class:X86ISA::Interrupts
setRegMask	./arch/mips/isa.cc	/^ISA::setRegMask(int misc_reg, const MiscReg &val, ThreadID tid)$/;"	f	class:MipsISA::ISA
setRegNoEffect	./arch/x86/interrupts.hh	/^    setRegNoEffect(ApicRegIndex reg, uint32_t val)$/;"	f	class:X86ISA::Interrupts
setRegOtherThread	./cpu/checker/cpu.hh	/^    void setRegOtherThread(int misc_reg, MiscReg val, ThreadID tid)$/;"	f	class:CheckerCPU
setRegOtherThread	./cpu/minor/exec_context.hh	/^    setRegOtherThread(int idx, const TheISA::MiscReg &val,$/;"	f	class:Minor::ExecContext
setRegOtherThread	./cpu/o3/dyn_inst.hh	/^    void setRegOtherThread(int misc_reg, MiscReg val, ThreadID tid)$/;"	f	class:BaseO3DynInst
setRegOtherThread	./cpu/thread_context.hh	/^    setRegOtherThread(int misc_reg, const MiscReg &val, ThreadID tid)$/;"	f	class:ThreadContext
setRegisters	./cpu/kvm/base.cc	/^BaseKvmCPU::setRegisters(const struct kvm_regs &regs)$/;"	f	class:BaseKvmCPU
setRegs	./arch/alpha/remote_gdb.cc	/^RemoteGDB::AlphaGdbRegCache::setRegs(ThreadContext *context) const$/;"	f	class:RemoteGDB::AlphaGdbRegCache
setRegs	./arch/arm/remote_gdb.cc	/^RemoteGDB::AArch32GdbRegCache::setRegs(ThreadContext *context) const$/;"	f	class:RemoteGDB::AArch32GdbRegCache
setRegs	./arch/arm/remote_gdb.cc	/^RemoteGDB::AArch64GdbRegCache::setRegs(ThreadContext *context) const$/;"	f	class:RemoteGDB::AArch64GdbRegCache
setRegs	./arch/mips/remote_gdb.cc	/^RemoteGDB::MipsGdbRegCache::setRegs(ThreadContext *context) const$/;"	f	class:RemoteGDB::MipsGdbRegCache
setRegs	./arch/power/remote_gdb.cc	/^RemoteGDB::PowerGdbRegCache::setRegs(ThreadContext *context) const$/;"	f	class:RemoteGDB::PowerGdbRegCache
setRegs	./arch/sparc/remote_gdb.cc	/^RemoteGDB::SPARC64GdbRegCache::setRegs(ThreadContext *context) const$/;"	f	class:RemoteGDB::SPARC64GdbRegCache
setRegs	./arch/sparc/remote_gdb.cc	/^RemoteGDB::SPARCGdbRegCache::setRegs(ThreadContext *context) const$/;"	f	class:RemoteGDB::SPARCGdbRegCache
setRegs	./arch/x86/remote_gdb.cc	/^RemoteGDB::AMD64GdbRegCache::setRegs(ThreadContext *context) const$/;"	f	class:RemoteGDB::AMD64GdbRegCache
setRegs	./arch/x86/remote_gdb.cc	/^RemoteGDB::X86GdbRegCache::setRegs(ThreadContext *context) const$/;"	f	class:RemoteGDB::X86GdbRegCache
setRemoteGDBPort	./sim/debug.cc	/^setRemoteGDBPort(int port)$/;"	f
setRenameMap	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::setRenameMap(RenameMap rm_ptr[])$/;"	f	class:DefaultCommit
setRenameMap	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::setRenameMap(RenameMap rm_ptr[])$/;"	f	class:DefaultRename
setRenameQueue	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::setRenameQueue(TimeBuffer<RenameStruct> *rq_ptr)$/;"	f	class:DefaultCommit
setRenameQueue	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::setRenameQueue(TimeBuffer<RenameStruct> *rq_ptr)$/;"	f	class:DefaultIEW
setRenameQueue	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::setRenameQueue(TimeBuffer<RenameStruct> *rq_ptr)$/;"	f	class:DefaultRename
setReq	./cpu/o3/fetch.hh	/^        void setReq(RequestPtr _req)$/;"	f	class:DefaultFetch::FinishTranslationEvent
setReqInstSeqNum	./mem/request.hh	/^    setReqInstSeqNum(const InstSeqNum seq_num)$/;"	f	class:Request
setResponderHadWritable	./mem/packet.hh	/^    void setResponderHadWritable()$/;"	f	class:Packet
setRestartAddress	./arch/alpha/faults.hh	/^    bool setRestartAddress() {return false;}$/;"	f	class:AlphaISA::InterruptFault
setRestartAddress	./arch/alpha/faults.hh	/^    virtual bool setRestartAddress() {return true;}$/;"	f	class:AlphaISA::AlphaFault
setResult	./cpu/base_dyn_inst.hh	/^    void setResult(T t)$/;"	f	class:BaseDynInst
setResult	./cpu/checker/cpu.hh	/^    void setResult(T t)$/;"	f	class:CheckerCPU
setResultReady	./cpu/base_dyn_inst.hh	/^    void setResultReady() { status.set(ResultReady); }$/;"	f	class:BaseDynInst
setRoute	./mem/ruby/network/garnet/flexible-pipeline/InVcState.cc	/^InVcState::setRoute(int route)$/;"	f	class:InVcState
setRxInt	./dev/net/etherlink.hh	/^        void setRxInt(Interface *i) { assert(!rxint); rxint = i; }$/;"	f	class:EtherLink::Link
setScoreboard	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::setScoreboard(Scoreboard *sb_ptr)$/;"	f	class:DefaultIEW
setScoreboard	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::setScoreboard(Scoreboard *_scoreboard)$/;"	f	class:DefaultRename
setSeg	./arch/x86/emulenv.cc	/^void EmulEnv::setSeg(const ExtMachInst & machInst)$/;"	f	class:EmulEnv
setSelfDelete	./arch/arm/stage2_lookup.hh	/^    void setSelfDelete() { selfDelete = true; }$/;"	f	class:ArmISA::Stage2LookUp
setSeparator	./base/statistics.hh	/^    const std::string &setSeparator() const$/;"	f	class:Stats::DataWrap
setSeparator	./base/statistics.hh	/^    setSeparator(const std::string &_sep)$/;"	f	class:Stats::DataWrap
setSeparator	./base/stats/info.hh	/^    void setSeparator(std::string _sep) { separatorString = _sep;}$/;"	f	class:Stats::Info
setSerializeAfter	./cpu/base_dyn_inst.hh	/^    void setSerializeAfter() { status.set(SerializeAfter); }$/;"	f	class:BaseDynInst
setSerializeBefore	./cpu/base_dyn_inst.hh	/^    void setSerializeBefore() { status.set(SerializeBefore); }$/;"	f	class:BaseDynInst
setSerializeHandled	./cpu/base_dyn_inst.hh	/^    void setSerializeHandled() { status.set(SerializeHandled); }$/;"	f	class:BaseDynInst
setSetIndex	./mem/ruby/slicc_interface/AbstractCacheEntry.hh	/^    void setSetIndex(uint32_t s) { m_set_index = s; }$/;"	f	class:AbstractCacheEntry
setShift	./mem/cache/tags/base_set_assoc.hh	/^    int setShift;$/;"	m	class:BaseSetAssoc
setSignal	./dev/arm/ufs_device.hh	/^        void setSignal() {transferCompleted = true;};$/;"	f	class:UFSHostDevice::UFSSCSIDevice
setSignalMask	./cpu/kvm/base.cc	/^BaseKvmCPU::setSignalMask(const sigset_t *mask)$/;"	f	class:BaseKvmCPU
setSimObject	./sim/cxx_config.hh	/^    virtual bool setSimObject(const std::string &name,$/;"	f	class:CxxConfigParams
setSimObjectVector	./sim/cxx_config.hh	/^    virtual bool setSimObjectVector(const std::string &name,$/;"	f	class:CxxConfigParams
setSingleStep	./base/remote_gdb.cc	/^BaseRemoteGDB::setSingleStep()$/;"	f	class:BaseRemoteGDB
setSize	./mem/packet.hh	/^    setSize(unsigned size)$/;"	f	class:Packet
setSize	./mem/ruby/common/Set.hh	/^    setSize(int size)$/;"	f	class:Set
setSkipped	./cpu/minor/lsq.hh	/^        void setSkipped() { skipped = true; }$/;"	f	class:Minor::LSQ::LSQRequest
setSlavePorts	./mem/snoop_filter.hh	/^    void setSlavePorts(const SnoopList& slave_ports) {$/;"	f	class:SnoopFilter
setSource	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.cc	/^NetworkLink::setSource(FlexibleConsumer *source)$/;"	f	class:NetworkLink
setSourceQueue	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.cc	/^NetworkLink_d::setSourceQueue(flitBuffer_d *srcQueue)$/;"	f	class:NetworkLink_d
setSourceQueue	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.cc	/^NetworkLink::setSourceQueue(flitBuffer *srcQueue)$/;"	f	class:NetworkLink
setSpecialRegisters	./cpu/kvm/base.cc	/^BaseKvmCPU::setSpecialRegisters(const struct kvm_sregs &regs)$/;"	f	class:BaseKvmCPU
setSquashed	./cpu/base_dyn_inst.hh	/^    void setSquashed() { status.set(Squashed); }$/;"	f	class:BaseDynInst
setSquashedInIQ	./cpu/base_dyn_inst.hh	/^    void setSquashedInIQ() { status.set(SquashedInIQ); status.set(Squashed);}$/;"	f	class:BaseDynInst
setSquashedInLSQ	./cpu/base_dyn_inst.hh	/^    void setSquashedInLSQ() { status.set(SquashedInLSQ);}$/;"	f	class:BaseDynInst
setSquashedInROB	./cpu/base_dyn_inst.hh	/^    void setSquashedInROB() { status.set(SquashedInROB); }$/;"	f	class:BaseDynInst
setStCondFailures	./cpu/base_dyn_inst.hh	/^    void setStCondFailures(unsigned int sc_failures)$/;"	f	class:BaseDynInst
setStCondFailures	./cpu/checker/thread_context.hh	/^    void setStCondFailures(unsigned sc_failures)$/;"	f	class:CheckerThreadContext
setStCondFailures	./cpu/minor/exec_context.hh	/^    void setStCondFailures(unsigned int st_cond_failures) {}$/;"	f	class:Minor::ExecContext
setStCondFailures	./cpu/o3/thread_context.hh	/^    virtual void setStCondFailures(unsigned sc_failures)$/;"	f	class:O3ThreadContext
setStCondFailures	./cpu/simple_thread.hh	/^    void setStCondFailures(unsigned sc_failures)$/;"	f	class:SimpleThread
setStCondFailures	./cpu/thread_context.hh	/^    void setStCondFailures(unsigned sc_failures)$/;"	f	class:ProxyThreadContext
setState	./cpu/minor/lsq.cc	/^LSQ::LSQRequest::setState(LSQRequestState new_state)$/;"	f	class:Minor::LSQ::LSQRequest
setState	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.hh	/^    setState(VC_state_type state, Cycles time)$/;"	f	class:OutVcState_d
setState	./mem/ruby/network/garnet/flexible-pipeline/InVcState.cc	/^InVcState::setState(VC_state_type state, Cycles time)$/;"	f	class:InVcState
setState	./mem/ruby/network/garnet/flexible-pipeline/OutVcState.cc	/^OutVcState::setState(VC_state_type state, Cycles time)$/;"	f	class:OutVcState
setStatus	./cpu/checker/thread_context.hh	/^    void setStatus(Status new_status)$/;"	f	class:CheckerThreadContext
setStatus	./cpu/o3/thread_context.hh	/^    virtual void setStatus(Status new_status)$/;"	f	class:O3ThreadContext
setStatus	./cpu/simple_thread.hh	/^    void setStatus(Status newStatus) { _status = newStatus; }$/;"	f	class:SimpleThread
setStatus	./cpu/thread_context.hh	/^    void setStatus(Status new_status) { actualTC->setStatus(new_status); }$/;"	f	class:ProxyThreadContext
setStatus	./cpu/thread_state.hh	/^    void setStatus(Status new_status) { _status = new_status; }$/;"	f	struct:ThreadState
setString	./arch/x86/bios/smbios.cc	/^X86ISA::SMBios::SMBiosStructure::setString(int n, std::string & newString)$/;"	f	class:X86ISA::SMBios::SMBiosStructure
setSuppressFuncError	./mem/packet.hh	/^    void setSuppressFuncError()     { flags.set(SUPPRESS_FUNC_ERROR); }$/;"	f	class:Packet
setSyndrome	./arch/arm/faults.cc	/^ArmFault::setSyndrome(ThreadContext *tc, MiscRegIndex syndrome_reg)$/;"	f	class:ArmISA::ArmFault
setSyscallArg	./arch/alpha/process.cc	/^AlphaLiveProcess::setSyscallArg(ThreadContext *tc,$/;"	f	class:AlphaLiveProcess
setSyscallArg	./arch/arm/process.cc	/^ArmLiveProcess32::setSyscallArg(ThreadContext *tc, int i, ArmISA::IntReg val)$/;"	f	class:ArmLiveProcess32
setSyscallArg	./arch/arm/process.cc	/^ArmLiveProcess64::setSyscallArg(ThreadContext *tc,$/;"	f	class:ArmLiveProcess64
setSyscallArg	./arch/mips/process.cc	/^MipsLiveProcess::setSyscallArg(ThreadContext *tc,$/;"	f	class:MipsLiveProcess
setSyscallArg	./arch/power/linux/process.cc	/^PowerLinuxProcess::setSyscallArg(ThreadContext *tc, int i, PowerISA::IntReg val)$/;"	f	class:PowerLinuxProcess
setSyscallArg	./arch/power/process.cc	/^PowerLiveProcess::setSyscallArg(ThreadContext *tc,$/;"	f	class:PowerLiveProcess
setSyscallArg	./arch/sparc/process.cc	/^Sparc32LiveProcess::setSyscallArg(ThreadContext *tc, int i, IntReg val)$/;"	f	class:Sparc32LiveProcess
setSyscallArg	./arch/sparc/process.cc	/^Sparc64LiveProcess::setSyscallArg(ThreadContext *tc, int i, IntReg val)$/;"	f	class:Sparc64LiveProcess
setSyscallArg	./arch/x86/process.cc	/^I386LiveProcess::setSyscallArg(ThreadContext *tc, int i, X86ISA::IntReg val)$/;"	f	class:I386LiveProcess
setSyscallArg	./arch/x86/process.cc	/^X86_64LiveProcess::setSyscallArg(ThreadContext *tc, int i, X86ISA::IntReg val)$/;"	f	class:X86_64LiveProcess
setSyscallReturn	./arch/alpha/process.cc	/^AlphaLiveProcess::setSyscallReturn(ThreadContext *tc, SyscallReturn sysret)$/;"	f	class:AlphaLiveProcess
setSyscallReturn	./arch/arm/process.cc	/^ArmLiveProcess32::setSyscallReturn(ThreadContext *tc, SyscallReturn sysret)$/;"	f	class:ArmLiveProcess32
setSyscallReturn	./arch/arm/process.cc	/^ArmLiveProcess64::setSyscallReturn(ThreadContext *tc, SyscallReturn sysret)$/;"	f	class:ArmLiveProcess64
setSyscallReturn	./arch/mips/process.cc	/^MipsLiveProcess::setSyscallReturn(ThreadContext *tc, SyscallReturn sysret)$/;"	f	class:MipsLiveProcess
setSyscallReturn	./arch/power/process.cc	/^PowerLiveProcess::setSyscallReturn(ThreadContext *tc, SyscallReturn sysret)$/;"	f	class:PowerLiveProcess
setSyscallReturn	./arch/sparc/process.cc	/^SparcLiveProcess::setSyscallReturn(ThreadContext *tc, SyscallReturn sysret)$/;"	f	class:SparcLiveProcess
setSyscallReturn	./arch/x86/process.cc	/^X86LiveProcess::setSyscallReturn(ThreadContext *tc, SyscallReturn retval)$/;"	f	class:X86LiveProcess
setSystem	./cpu/checker/cpu.cc	/^CheckerCPU::setSystem(System *system)$/;"	f	class:CheckerCPU
setTLB	./arch/x86/pagetable_walker.hh	/^        void setTLB(TLB * _tlb)$/;"	f	class:X86ISA::Walker
setTLSFunc32	./arch/arm/linux/process.cc	/^setTLSFunc32(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
setTLSFunc64	./arch/arm/linux/process.cc	/^setTLSFunc64(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
setTSSAddress	./cpu/kvm/vm.cc	/^KvmVM::setTSSAddress(Addr tss_address)$/;"	f	class:KvmVM
setTableAddr	./arch/x86/bios/intelmp.hh	/^    void setTableAddr(Addr addr)$/;"	f	class:X86ISA::IntelMP::FloatingPointer
setTableAddr	./arch/x86/bios/smbios.hh	/^    void setTableAddr(Addr addr)$/;"	f	class:X86ISA::SMBios::SMBiosTable
setTail	./cpu/minor/buffers.hh	/^    setTail(ElemType &new_element)$/;"	f	class:Minor::InputBuffer
setTempBreakpoint	./base/remote_gdb.cc	/^BaseRemoteGDB::setTempBreakpoint(Addr bkpt)$/;"	f	class:BaseRemoteGDB
setTextBase	./base/loader/object_file.hh	/^    void setTextBase(Addr a) { text.baseAddr = a; }$/;"	f	class:ObjectFile
setThreadArea32Func	./arch/x86/linux/process.cc	/^setThreadArea32Func(SyscallDesc *desc, int callnum,$/;"	f	file:
setThreadAreaFunc	./arch/mips/linux/process.cc	/^setThreadAreaFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
setThreadContext	./mem/request.hh	/^    setThreadContext(ContextID context_id, ThreadID tid)$/;"	f	class:Request
setThreadId	./cpu/checker/thread_context.hh	/^    void setThreadId(int id)$/;"	f	class:CheckerThreadContext
setThreadId	./cpu/o3/thread_context.hh	/^    virtual void setThreadId(int id) { return thread->setThreadId(id); }$/;"	f	class:O3ThreadContext
setThreadId	./cpu/thread_context.hh	/^    void setThreadId(int id) { actualTC->setThreadId(id); }$/;"	f	class:ProxyThreadContext
setThreadId	./cpu/thread_state.hh	/^    void setThreadId(ThreadID id) { _threadId = id; }$/;"	f	struct:ThreadState
setThreadState	./cpu/base_dyn_inst.hh	/^    void setThreadState(ImplState *state) { thread = state; }$/;"	f	class:BaseDynInst
setThreads	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::setThreads(std::vector<Thread *> &threads)$/;"	f	class:DefaultCommit
setTick	./base/time.cc	/^Time::setTick(Tick ticks)$/;"	f	class:Time
setTid	./cpu/base_dyn_inst.hh	/^    void setTid(ThreadID tid) { threadNumber = tid; }$/;"	f	class:BaseDynInst
setTime	./dev/mc146818.cc	/^MC146818::setTime(const struct tm time)$/;"	f	class:MC146818
setTimeBuffer	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::setTimeBuffer(TimeBuffer<TimeStruct> *tb_ptr)$/;"	f	class:DefaultCommit
setTimeBuffer	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::setTimeBuffer(TimeBuffer<TimeStruct> *tb_ptr)$/;"	f	class:DefaultDecode
setTimeBuffer	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::setTimeBuffer(TimeBuffer<TimeStruct> *time_buffer)$/;"	f	class:DefaultFetch
setTimeBuffer	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::setTimeBuffer(TimeBuffer<TimeStruct> *tb_ptr)$/;"	f	class:DefaultIEW
setTimeBuffer	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::setTimeBuffer(TimeBuffer<TimeStruct> *tb_ptr)$/;"	f	class:InstructionQueue
setTimeBuffer	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::setTimeBuffer(TimeBuffer<TimeStruct> *tb_ptr)$/;"	f	class:DefaultRename
setTimer	./base/time.hh	/^    void setTimer() { _set(true); }$/;"	f	class:Time
setTimerValue	./dev/arm/generic_timer.cc	/^ArchTimer::setTimerValue(uint32_t val)$/;"	f	class:ArchTimer
setTlb	./arch/arm/table_walker.hh	/^    void setTlb(TLB *_tlb) { tlb = _tlb; }$/;"	f	class:ArmISA::TableWalker
setTlbExceptionState	./arch/mips/faults.hh	/^    setTlbExceptionState(ThreadContext *tc, uint8_t excCode)$/;"	f	class:MipsISA::TlbFault
setTo	./dev/intel_8254_timer.cc	/^Intel8254Timer::Counter::CounterEvent::setTo(int clocks)$/;"	f	class:Intel8254Timer::Counter::CounterEvent
setToNetQueue	./mem/ruby/network/Network.cc	/^Network::setToNetQueue(NodeID id, bool ordered, int network_num,$/;"	f	class:Network
setTotalWrite	./dev/arm/ufs_device.hh	/^        void setTotalWrite(uint32_t total_write) {totalWrite = total_write;};$/;"	f	class:UFSHostDevice::UFSSCSIDevice
setTraceTimeOnCommit	./cpu/minor/execute.hh	/^    bool setTraceTimeOnCommit;$/;"	m	class:Minor::Execute
setTraceTimeOnIssue	./cpu/minor/execute.hh	/^    bool setTraceTimeOnIssue;$/;"	m	class:Minor::Execute
setTranslateLatency	./mem/request.hh	/^    void setTranslateLatency() { translateDelta = curTick() - _time; }$/;"	f	class:Request
setTxInt	./dev/net/etherlink.hh	/^        void setTxInt(Interface *i) { assert(!txint); txint = i; }$/;"	f	class:EtherLink::Link
setUserMemoryRegion	./cpu/kvm/vm.cc	/^KvmVM::setUserMemoryRegion(uint32_t slot,$/;"	f	class:KvmVM
setVCpuEvents	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::setVCpuEvents(const struct kvm_vcpu_events &events)$/;"	f	class:X86KvmCPU
setValue	./base/inifile.hh	/^        void setValue(const std::string &v) { value = v; }$/;"	f	class:IniFile::Entry
setValues	./dev/arm/ufs_device.cc	/^void UFSHostDevice::setValues()$/;"	f	class:UFSHostDevice
setVfpMicroFlags	./arch/arm/insts/vfp.hh	/^setVfpMicroFlags(VfpMicroMode mode, T &flags)$/;"	f	namespace:ArmISA
setVirt	./arch/arm/stage2_mmu.hh	/^        void setVirt(Addr vaddr, int size, Request::Flags flags, int masterId)$/;"	f	class:ArmISA::Stage2MMU::Stage2Translation
setVirt	./mem/request.hh	/^    setVirt(int asid, Addr vaddr, unsigned size, Flags flags, MasterID mid,$/;"	f	class:Request
setVnet	./mem/ruby/network/MessageBuffer.hh	/^    void setVnet(int net) { m_vnet_id = net; }$/;"	f	class:MessageBuffer
setVnet	./mem/ruby/slicc_interface/Message.hh	/^    void setVnet(int net) { vnet = net; }$/;"	f	class:Message
setWallclock	./base/time.hh	/^    void setWallclock() { _set(false); }$/;"	f	class:Time
setWayAllocationMax	./mem/cache/tags/base.hh	/^    virtual void setWayAllocationMax(int ways)$/;"	f	class:BaseTags
setWayIndex	./mem/ruby/slicc_interface/AbstractCacheEntry.hh	/^    void setWayIndex(uint32_t s) { m_way_index = s; }$/;"	f	class:AbstractCacheEntry
setWhen	./sim/eventq.hh	/^    setWhen(Tick when, EventQueue *q)$/;"	f	class:Event
setWhen	./sim/insttracer.hh	/^    void setWhen(Tick new_when) { when = new_when; }$/;"	f	class:Trace::InstRecord
setXCRs	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::setXCRs(const struct kvm_xcrs &regs)$/;"	f	class:X86KvmCPU
setXSave	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::setXSave(const struct kvm_xsave &xsave)$/;"	f	class:X86KvmCPU
set_credit_link	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    set_credit_link(CreditLink_d *credit_link)$/;"	f	class:InputUnit_d
set_credit_link	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.cc	/^OutputUnit_d::set_credit_link(CreditLink_d *credit_link)$/;"	f	class:OutputUnit_d
set_defaults	./python/m5/options.py	/^    def set_defaults(self, *args, **kwargs):$/;"	m	class:OptionParser
set_delay	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    void set_delay(Cycles delay) { src_delay = delay; }$/;"	f	class:flit_d
set_delay	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    void set_delay(Cycles delay) { src_delay = delay; }$/;"	f	class:flit
set_enqueue_time	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    set_enqueue_time(int invc, Cycles time)$/;"	f	class:InputUnit_d
set_enqueue_time	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    inline void set_enqueue_time(Cycles time) { m_enqueue_time = time; }$/;"	f	class:VirtualChannel_d
set_fpscr	./arch/arm/insts/fplib.cc	/^set_fpscr(FPSCR &fpscr, int flags)$/;"	f	namespace:ArmISA
set_fpscr0	./arch/arm/insts/fplib.cc	/^set_fpscr0(FPSCR &fpscr, int flags)$/;"	f	namespace:ArmISA
set_group	./python/m5/options.py	/^    def set_group(self, *args, **kwargs):$/;"	m	class:OptionParser
set_in_link	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    set_in_link(NetworkLink_d *link)$/;"	f	class:InputUnit_d
set_inport	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.hh	/^    void set_inport(int port)       { m_in_port = port; }$/;"	f	class:OutVcState_d
set_invc	./mem/ruby/network/garnet/fixed-pipeline/OutVcState_d.hh	/^    void set_invc(int vc)           { m_in_vc = vc; }$/;"	f	class:OutVcState_d
set_out_link	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.cc	/^OutputUnit_d::set_out_link(NetworkLink_d *link)$/;"	f	class:OutputUnit_d
set_outport	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.cc	/^VirtualChannel_d::set_outport(int outport)$/;"	f	class:VirtualChannel_d
set_outport	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    void set_outport(int port) { m_outport = port; }$/;"	f	class:flit_d
set_param_desc	./python/m5/proxy.py	/^    def set_param_desc(self, pdesc):$/;"	m	class:BaseProxy
set_params	./cpu/TimingExpr.py	/^    def set_params(self, cond, trueExpr, falseExpr):$/;"	m	class:TimingExprIf
set_params	./cpu/TimingExpr.py	/^    def set_params(self, defns, expr):$/;"	m	class:TimingExprLet
set_params	./cpu/TimingExpr.py	/^    def set_params(self, index):$/;"	m	class:TimingExprRef
set_params	./cpu/TimingExpr.py	/^    def set_params(self, index):$/;"	m	class:TimingExprSrcReg
set_params	./cpu/TimingExpr.py	/^    def set_params(self, op, arg):$/;"	m	class:TimingExprUn
set_params	./cpu/TimingExpr.py	/^    def set_params(self, op, left, right):$/;"	m	class:TimingExprBin
set_params	./cpu/TimingExpr.py	/^    def set_params(self, reg):$/;"	m	class:TimingExprReadIntReg
set_params	./cpu/TimingExpr.py	/^    def set_params(self, value):$/;"	m	class:TimingExprLiteral
set_parent	./python/m5/SimObject.py	/^    def set_parent(self, parent, name):$/;"	f
set_parent	./python/m5/params.py	/^    def set_parent(self, parent, name):$/;"	m	class:SimObjectVector
set_path	./python/m5/params.py	/^    def set_path(self, parent, name):$/;"	m	class:NullSimObject
set_program_attributes	./kern/tru64/tru64_syscalls.hh	/^        set_program_attributes = 43,$/;"	e	enum:SystemCalls::__anon102
set_speculative	./kern/tru64/tru64_syscalls.hh	/^        set_speculative = 239,$/;"	e	enum:SystemCalls::__anon102
set_state	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    set_state(VC_state_type m_state, Cycles curTime)$/;"	f	class:VirtualChannel_d
set_time	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    void set_time(Cycles time) { m_time = time; }$/;"	f	class:flit_d
set_time	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    void set_time(Cycles time) { m_time = time; }$/;"	f	class:flit
set_vc	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    void set_vc(int vc) { m_vc = vc; }$/;"	f	class:flit_d
set_vc	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    void set_vc(int vc) { m_vc = vc; }$/;"	f	class:flit
set_vc_state	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    set_vc_state(VC_state_type state, int vc, Cycles curTime)$/;"	f	class:InputUnit_d
set_vc_state	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.hh	/^    set_vc_state(VC_state_type state, int vc, Cycles curTime)$/;"	f	class:OutputUnit_d
setdefault	./python/m5/util/multidict.py	/^    def setdefault(self, key, default):$/;"	m	class:multidict
setdefault	./python/m5/util/smartdict.py	/^    def setdefault(self, key, default='False'):$/;"	m	class:SmartDict
setdefault	./python/m5/util/sorteddict.py	/^    def setdefault(self, key, _failobj=None):$/;"	m	class:SortedDict
setdomainname	./kern/tru64/tru64_syscalls.hh	/^        setdomainname = 166,$/;"	e	enum:SystemCalls::__anon102
setgid	./kern/tru64/tru64_syscalls.hh	/^        setgid = 132,$/;"	e	enum:SystemCalls::__anon102
setgroups	./kern/tru64/tru64_syscalls.hh	/^        setgroups = 80,$/;"	e	enum:SystemCalls::__anon102
sethostid	./kern/tru64/tru64_syscalls.hh	/^        sethostid = 143,$/;"	e	enum:SystemCalls::__anon102
sethostname	./kern/tru64/tru64_syscalls.hh	/^        sethostname = 88,$/;"	e	enum:SystemCalls::__anon102
setitimer	./kern/tru64/tru64_syscalls.hh	/^        setitimer = 83,$/;"	e	enum:SystemCalls::__anon102
setlogin	./kern/tru64/tru64_syscalls.hh	/^        setlogin = 50,$/;"	e	enum:SystemCalls::__anon102
setpgid	./kern/tru64/tru64_syscalls.hh	/^        setpgid = 39,$/;"	e	enum:SystemCalls::__anon102
setpgrp	./kern/tru64/tru64_syscalls.hh	/^        setpgrp = 82,$/;"	e	enum:SystemCalls::__anon102
setpriority	./kern/tru64/tru64_syscalls.hh	/^        setpriority = 96,$/;"	e	enum:SystemCalls::__anon102
setregid	./kern/tru64/tru64_syscalls.hh	/^        setregid = 127,$/;"	e	enum:SystemCalls::__anon102
setreuid	./kern/tru64/tru64_syscalls.hh	/^        setreuid = 126,$/;"	e	enum:SystemCalls::__anon102
setrlimit	./kern/tru64/tru64_syscalls.hh	/^        setrlimit = 145,$/;"	e	enum:SystemCalls::__anon102
sets	./mem/cache/tags/base_set_assoc.hh	/^    SetType *sets;$/;"	m	class:BaseSetAssoc
setsid	./kern/tru64/tru64_syscalls.hh	/^        setsid = 147,$/;"	e	enum:SystemCalls::__anon102
setsockopt	./kern/tru64/tru64_syscalls.hh	/^        setsockopt = 105,$/;"	e	enum:SystemCalls::__anon102
setsysinfo	./kern/tru64/tru64_syscalls.hh	/^        setsysinfo = 257,$/;"	e	enum:SystemCalls::__anon102
setsysinfoFunc	./arch/alpha/tru64/process.cc	/^setsysinfoFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
settimeofday	./kern/tru64/tru64_syscalls.hh	/^        settimeofday = 122,$/;"	e	enum:SystemCalls::__anon102
settimeofday64	./kern/tru64/tru64_syscalls.hh	/^        settimeofday64 = 231,$/;"	e	enum:SystemCalls::__anon102
setuid	./kern/tru64/tru64_syscalls.hh	/^        setuid = 23,$/;"	e	enum:SystemCalls::__anon102
setuidFunc	./sim/syscall_emul.cc	/^setuidFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
setupASNReg	./arch/alpha/process.cc	/^AlphaLiveProcess::setupASNReg()$/;"	f	class:AlphaLiveProcess
setupAltStack	./sim/init_signals.cc	/^setupAltStack()$/;"	f	file:
setupAsyncIO	./base/pollevent.cc	/^PollQueue::setupAsyncIO(int fd, bool set)$/;"	f	class:PollQueue
setupBootLoader	./dev/arm/RealView.py	/^    def setupBootLoader(self, mem_bus, cur_sys, loc):$/;"	m	class:RealView
setupBootLoader	./dev/arm/RealView.py	/^    def setupBootLoader(self, mem_bus, cur_sys, loc):$/;"	m	class:VExpress_EMM
setupBootLoader	./dev/arm/RealView.py	/^    def setupBootLoader(self, mem_bus, cur_sys, loc):$/;"	m	class:VExpress_EMM64
setupCounters	./cpu/kvm/base.cc	/^BaseKvmCPU::setupCounters()$/;"	f	class:BaseKvmCPU
setupFetchRequest	./cpu/simple/base.cc	/^BaseSimpleCPU::setupFetchRequest(Request *req)$/;"	f	class:BaseSimpleCPU
setupFuncEvents	./arch/alpha/linux/system.cc	/^LinuxAlphaSystem::setupFuncEvents()$/;"	f	class:LinuxAlphaSystem
setupFuncEvents	./arch/alpha/system.cc	/^AlphaSystem::setupFuncEvents()$/;"	f	class:AlphaSystem
setupInstCounter	./cpu/kvm/base.cc	/^BaseKvmCPU::setupInstCounter(uint64_t period)$/;"	f	class:BaseKvmCPU
setupInstStop	./cpu/kvm/base.cc	/^BaseKvmCPU::setupInstStop()$/;"	f	class:BaseKvmCPU
setupLexerFactory	./python/m5/util/grammar.py	/^    def setupLexerFactory(self, **kwargs):$/;"	m	class:Grammar
setupMemSlot	./cpu/kvm/vm.cc	/^KvmVM::setupMemSlot(const KvmVM::MemSlot num, void *host_addr, Addr guest,$/;"	f	class:KvmVM
setupParserFactory	./python/m5/util/grammar.py	/^    def setupParserFactory(self, **kwargs):$/;"	m	class:Grammar
setupSignalHandler	./cpu/kvm/base.cc	/^BaseKvmCPU::setupSignalHandler()$/;"	f	class:BaseKvmCPU
setupWalk	./arch/x86/pagetable_walker.cc	/^Walker::WalkerState::setupWalk(Addr vaddr)$/;"	f	class:X86ISA::Walker::WalkerState
setup_buffers	./mem/ruby/network/simple/SimpleNetwork.py	/^    def setup_buffers(self):$/;"	m	class:SimpleNetwork
sevenAndFour	./arch/arm/types.hh	/^        Bitfield<33>     sevenAndFour;$/;"	m	namespace:ArmISA
sext	./base/bitfield.hh	/^sext(uint64_t val)$/;"	f
sf	./arch/arm/faults.hh	/^    bool sf;$/;"	m	class:ArmISA::DataAbort
sf	./arch/x86/regs/misc.hh	/^        Bitfield<7> sf; \/\/ Sign Flag$/;"	m	namespace:X86ISA
sf	./arch/x86/regs/misc.hh	/^        Bitfield<7> sf;$/;"	m	namespace:X86ISA
sfar	./arch/sparc/tlb.hh	/^    uint64_t sfar;$/;"	m	class:SparcISA::TLB
sfsr	./arch/sparc/tlb.hh	/^    uint64_t sfsr;$/;"	m	class:SparcISA::TLB
sgi_id	./dev/arm/gic_pl390.hh	/^        Bitfield<3,0> sgi_id;$/;"	m	class:Pl390
sh	./arch/arm/miscregs.hh	/^        Bitfield<8, 7>   sh;$/;"	m	namespace:ArmISA
sh	./arch/arm/table_walker.hh	/^        uint8_t sh() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
sh	./arch/power/insts/integer.hh	/^    uint32_t sh;$/;"	m	class:PowerISA::IntOp
sh	./arch/power/insts/integer.hh	/^    uint32_t sh;$/;"	m	class:PowerISA::IntShiftOp
sh	./arch/power/types.hh	/^    Bitfield<15, 11> sh;$/;"	m	namespace:PowerISA
sh0	./arch/arm/miscregs.hh	/^        Bitfield<13, 12> sh0;$/;"	m	namespace:ArmISA
sh1	./arch/arm/miscregs.hh	/^        Bitfield<29, 28> sh1; \/\/ EL1$/;"	m	namespace:ArmISA
sh1	./arch/arm/miscregs.hh	/^        Bitfield<29, 28> sh1;$/;"	m	namespace:ArmISA
sh1	./unittest/stattest.cc	/^    SparseHistogram sh1;$/;"	m	struct:StatTest	file:
shareable	./arch/arm/pagetable.hh	/^    bool shareable;$/;"	m	struct:ArmISA::TlbEntry
shareable	./arch/arm/table_walker.hh	/^        bool shareable() const$/;"	f	class:ArmISA::TableWalker::L1Descriptor
shareable	./arch/arm/table_walker.hh	/^        bool shareable() const$/;"	f	class:ArmISA::TableWalker::L2Descriptor
shareable	./arch/arm/table_walker.hh	/^        virtual bool shareable() const$/;"	f	class:ArmISA::TableWalker::DescriptorBase
sharedram	./arch/alpha/linux/linux.hh	/^       uint64_t sharedram; \/* Amount of shared memory *\/$/;"	m	struct:AlphaLinux::__anon51
sharedram	./arch/arm/linux/linux.hh	/^        uint32_t sharedram; \/* Amount of shared memory *\/$/;"	m	struct:ArmLinux32::__anon76
sharedram	./arch/arm/linux/linux.hh	/^        uint64_t sharedram; \/* Amount of shared memory *\/$/;"	m	struct:ArmLinux64::__anon79
sharedram	./arch/mips/linux/linux.hh	/^       uint32_t sharedram; \/* Amount of shared memory *\/$/;"	m	struct:MipsLinux::__anon84
sharedram	./arch/sparc/linux/linux.hh	/^        uint32_t sharedram; \/* Amount of shared memory *\/$/;"	m	struct:Sparc32Linux::__anon47
sharedram	./arch/sparc/linux/linux.hh	/^        uint64_t sharedram; \/* Amount of shared memory *\/$/;"	m	struct:SparcLinux::__anon45
sharedram	./arch/x86/linux/linux.hh	/^        uint64_t sharedram; \/* Amount of shared memory *\/$/;"	m	struct:X86Linux64::__anon61
sharedram	./arch/x86/linux/linux.hh	/^       uint32_t sharedram; \/* Amount of shared memory *\/$/;"	m	struct:X86Linux32::__anon63
shft_fsm0	./arch/sparc/miscregs.hh	/^    const static int shft_fsm0   = 31;$/;"	m	struct:SparcISA::STS
shft_fsm1	./arch/sparc/miscregs.hh	/^    const static int shft_fsm1   = 26;$/;"	m	struct:SparcISA::STS
shft_fsm2	./arch/sparc/miscregs.hh	/^    const static int shft_fsm2   = 21;$/;"	m	struct:SparcISA::STS
shft_fsm3	./arch/sparc/miscregs.hh	/^    const static int shft_fsm3   = 16;$/;"	m	struct:SparcISA::STS
shft_id	./arch/sparc/miscregs.hh	/^    const static int shft_id     = 8;$/;"	m	struct:SparcISA::STS
shift	./arch/arm/insts/pred_inst.hh	/^    IntRegIndex dest, op1, op2, shift;$/;"	m	class:ArmISA::DataRegRegOp
shift	./arch/arm/insts/pred_inst.hh	/^    uint32_t shift;$/;"	m	class:ArmISA::PredIntOp
shift	./arch/arm/types.hh	/^        Bitfield<6,  5>  shift;$/;"	m	namespace:ArmISA
shiftAmt	./arch/arm/insts/data64.hh	/^    int32_t shiftAmt;$/;"	m	class:ArmISA::DataXERegOp
shiftAmt	./arch/arm/insts/data64.hh	/^    int32_t shiftAmt;$/;"	m	class:ArmISA::DataXSRegOp
shiftAmt	./arch/arm/insts/macromem.hh	/^    int32_t shiftAmt;$/;"	m	class:ArmISA::MicroIntRegOp
shiftAmt	./arch/arm/insts/macromem.hh	/^    uint32_t shiftAmt;$/;"	m	class:ArmISA::MicroIntRegXOp
shiftAmt	./arch/arm/insts/mem.hh	/^    int32_t shiftAmt;$/;"	m	class:ArmISA::MemoryReg
shiftAmt	./arch/arm/insts/mem64.hh	/^    uint64_t shiftAmt;$/;"	m	class:ArmISA::MemoryReg64
shiftAmt	./arch/arm/insts/misc.hh	/^    int32_t shiftAmt;$/;"	m	class:RegImmRegShiftOp
shiftAmt	./arch/arm/insts/pred_inst.hh	/^    int32_t shiftAmt;$/;"	m	class:ArmISA::DataRegOp
shiftDown	./dev/arm/kmi.hh	/^    bool shiftDown;$/;"	m	class:Pl050
shiftLowOrderBits	./mem/ruby/common/Address.cc	/^shiftLowOrderBits(Addr addr, unsigned int number)$/;"	f
shiftReg64	./arch/arm/insts/static_inst.cc	/^ArmStaticInst::shiftReg64(uint64_t base, uint64_t shiftAmt,$/;"	f	class:ArmISA::ArmStaticInst
shiftSize	./arch/arm/types.hh	/^        Bitfield<11, 7>  shiftSize;$/;"	m	namespace:ArmISA
shiftType	./arch/arm/insts/data64.hh	/^    ArmShiftType shiftType;$/;"	m	class:ArmISA::DataXSRegOp
shiftType	./arch/arm/insts/macromem.hh	/^    ArmShiftType shiftType;$/;"	m	class:ArmISA::MicroIntRegOp
shiftType	./arch/arm/insts/mem.hh	/^    ArmShiftType shiftType;$/;"	m	class:ArmISA::MemoryReg
shiftType	./arch/arm/insts/misc.hh	/^    ArmShiftType shiftType;$/;"	m	class:RegImmRegShiftOp
shiftType	./arch/arm/insts/pred_inst.hh	/^    ArmShiftType shiftType;$/;"	m	class:ArmISA::DataRegOp
shiftType	./arch/arm/insts/pred_inst.hh	/^    ArmShiftType shiftType;$/;"	m	class:ArmISA::DataRegRegOp
shift_carry_imm	./arch/arm/insts/static_inst.cc	/^ArmStaticInst::shift_carry_imm(uint32_t base, uint32_t shamt,$/;"	f	class:ArmISA::ArmStaticInst
shift_carry_rs	./arch/arm/insts/static_inst.cc	/^ArmStaticInst::shift_carry_rs(uint32_t base, uint32_t shamt,$/;"	f	class:ArmISA::ArmStaticInst
shift_rm_imm	./arch/arm/insts/static_inst.cc	/^ArmStaticInst::shift_rm_imm(uint32_t base, uint32_t shamt,$/;"	f	class:ArmISA::ArmStaticInst
shift_rm_rs	./arch/arm/insts/static_inst.cc	/^ArmStaticInst::shift_rm_rs(uint32_t base, uint32_t shamt,$/;"	f	class:ArmISA::ArmStaticInst
shift_size	./arch/arm/insts/pred_inst.hh	/^    uint32_t shift_size;$/;"	m	class:ArmISA::PredIntOp
shmat	./kern/tru64/tru64_syscalls.hh	/^        shmat = 209,$/;"	e	enum:SystemCalls::__anon102
shmctl	./kern/tru64/tru64_syscalls.hh	/^        shmctl = 210,$/;"	e	enum:SystemCalls::__anon102
shmdt	./kern/tru64/tru64_syscalls.hh	/^        shmdt = 211,$/;"	e	enum:SystemCalls::__anon102
shmget	./kern/tru64/tru64_syscalls.hh	/^        shmget = 212,$/;"	e	enum:SystemCalls::__anon102
short	./mem/slicc/symbols/Symbol.py	/^    def short(self):$/;"	m	class:Symbol
shortDescFaultSources	./arch/arm/faults.cc	/^uint8_t ArmFault::shortDescFaultSources[] = {$/;"	m	class:ArmISA::ArmFault	file:
shortDescFaultSources	./arch/arm/faults.hh	/^    static uint8_t shortDescFaultSources[NumFaultSources];$/;"	m	class:ArmISA::ArmFault
shortVectors	./arch/arm/miscregs.hh	/^        Bitfield<27, 24> shortVectors;$/;"	m	namespace:ArmISA
shortest_path	./mem/ruby/network/Topology.cc	/^Topology::shortest_path(const Matrix &weights, Matrix &latencies,$/;"	f	class:Topology
shortest_path_to_node	./mem/ruby/network/Topology.cc	/^Topology::shortest_path_to_node(SwitchID src, SwitchID next,$/;"	f	class:Topology
showParam	./sim/serialize.cc	/^showParam(CheckpointOut &os, const T &value)$/;"	f
showParam	./sim/serialize.cc	/^showParam(CheckpointOut &os, const bool &value)$/;"	f
showParam	./sim/serialize.cc	/^showParam(CheckpointOut &os, const char &value)$/;"	f
showParam	./sim/serialize.cc	/^showParam(CheckpointOut &os, const signed char &value)$/;"	f
showParam	./sim/serialize.cc	/^showParam(CheckpointOut &os, const unsigned char &value)$/;"	f
shutdown	./kern/tru64/tru64_syscalls.hh	/^        shutdown = 134,$/;"	e	enum:SystemCalls::__anon102
si	./arch/power/types.hh	/^    Bitfield<15,  0> si;$/;"	m	namespace:PowerISA
si	./arch/x86/decoder.hh	/^        StaticInstPtr si;$/;"	m	struct:X86ISA::Decoder::InstBytes
si	./arch/x86/regs/misc.hh	/^        Bitfield<15, 3> si; \/\/ Selector Index$/;"	m	namespace:X86ISA
si_boottime	./kern/tru64/tru64.hh	/^        uint64_t si_boottime;   \/\/!< Boot time in seconds$/;"	m	struct:Tru64::tbl_sysinfo
si_hz	./kern/tru64/tru64.hh	/^        uint64_t si_hz;         \/\/!< hz$/;"	m	struct:Tru64::tbl_sysinfo
si_idle	./kern/tru64/tru64.hh	/^        uint64_t si_idle;       \/\/!< Idle time$/;"	m	struct:Tru64::tbl_sysinfo
si_max_procs	./kern/tru64/tru64.hh	/^        uint32_t  si_max_procs; \/\/!< rpb->rpb_numprocs$/;"	m	struct:Tru64::tbl_sysinfo
si_nice	./kern/tru64/tru64.hh	/^        uint64_t si_nice;       \/\/!< Nice time$/;"	m	struct:Tru64::tbl_sysinfo
si_phz	./kern/tru64/tru64.hh	/^        uint64_t si_phz;        \/\/!< phz$/;"	m	struct:Tru64::tbl_sysinfo
si_sys	./kern/tru64/tru64.hh	/^        uint64_t si_sys;        \/\/!< System time$/;"	m	struct:Tru64::tbl_sysinfo
si_user	./kern/tru64/tru64.hh	/^        uint64_t si_user;       \/\/!< User time$/;"	m	struct:Tru64::tbl_sysinfo
sib	./arch/x86/types.hh	/^        Sib sib;$/;"	m	struct:X86ISA::ExtMachInst
sideffect	./arch/sparc/pagetable.hh	/^    bool sideffect() const { assert(populated); return bits(entry4u,3,3); }$/;"	f	class:SparcISA::PageTableEntry
sif	./arch/arm/miscregs.hh	/^        Bitfield<9> sif;$/;"	m	namespace:ArmISA
sig	./kern/tru64/tru64.hh	/^        sigset_t        sig;            \/\/!< thread pending mask$/;"	m	struct:Tru64::ushared_state
sigaction	./kern/tru64/tru64_syscalls.hh	/^        sigaction = 156,$/;"	e	enum:SystemCalls::__anon102
sigaltstack	./kern/tru64/tru64_syscalls.hh	/^        sigaltstack = 235,$/;"	e	enum:SystemCalls::__anon102
sigcontext	./kern/tru64/tru64.hh	/^    struct sigcontext {$/;"	s	class:Tru64
sigev_notify_thread_id	./cpu/kvm/timer.cc	58;"	d	file:
sigfigs	./dev/net/etherdump.cc	/^    uint32_t sigfigs;           \/\/ accuracy of timestamps$/;"	m	struct:pcap_file_header	file:
sigmask	./kern/tru64/tru64.hh	/^        sigset_t        sigmask;        \/\/!< thread signal mask$/;"	m	struct:Tru64::ushared_state
sigmask	./kern/tru64/tru64.hh	/^        sigset_t sigmask;       \/\/!< sigmask$/;"	m	struct:Tru64::nxm_thread_attr
signExtend	./arch/mips/dsp.cc	/^MipsISA::signExtend(uint64_t value, int32_t fmt)$/;"	f	class:MipsISA
signal	./kern/tru64/tru64_syscalls.hh	/^        signal = 218,$/;"	e	enum:SystemCalls::__anon102
signalDone	./dev/arm/ufs_device.hh	/^        Callback* signalDone;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
signalDrainDone	./cpu/minor/cpu.cc	/^MinorCPU::signalDrainDone()$/;"	f	class:MinorCPU
signalDrainDone	./sim/drain.cc	/^DrainManager::signalDrainDone()$/;"	f	class:DrainManager
signalDrainDone	./sim/drain.hh	/^    void signalDrainDone() const {$/;"	f	class:Drainable
signalInterrupt	./dev/x86/i82094aa.cc	/^X86ISA::I82094AA::signalInterrupt(int line)$/;"	f	class:X86ISA::I82094AA
signalInterrupt	./dev/x86/i8259.cc	/^X86ISA::I8259::signalInterrupt(int line)$/;"	f	class:X86ISA::I8259
signalInterrupt	./dev/x86/intdev.hh	/^    signalInterrupt(int line)$/;"	f	class:X86ISA::IntDevice
signal_type	./kern/tru64/tru64.hh	/^        int signal_type;        \/\/!< signal_type$/;"	m	struct:Tru64::nxm_thread_attr
signal_urti	./kern/tru64/tru64_syscalls.hh	/^        signal_urti = 155,$/;"	e	enum:SystemCalls::__anon102
signature	./arch/x86/bios/acpi.cc	/^const char X86ISA::ACPI::RSDP::signature[] = "RSD PTR ";$/;"	m	class:X86ISA::ACPI::RSDP	file:
signature	./arch/x86/bios/acpi.hh	/^    const char * signature;$/;"	m	class:X86ISA::ACPI::SysDescTable
signature	./arch/x86/bios/acpi.hh	/^    static const char signature[];$/;"	m	class:X86ISA::ACPI::RSDP
signature	./arch/x86/bios/intelmp.cc	/^const char X86ISA::IntelMP::ConfigTable::signature[] = "PCMP";$/;"	m	class:X86ISA::IntelMP::ConfigTable	file:
signature	./arch/x86/bios/intelmp.cc	/^const char X86ISA::IntelMP::FloatingPointer::signature[] = "_MP_";$/;"	m	class:X86ISA::IntelMP::FloatingPointer	file:
signature	./arch/x86/bios/intelmp.hh	/^    static const char signature[];$/;"	m	class:X86ISA::IntelMP::ConfigTable
signature	./arch/x86/bios/intelmp.hh	/^    static const char signature[];$/;"	m	class:X86ISA::IntelMP::FloatingPointer
signedOp	./arch/x86/insts/micromediaop.hh	/^        signedOp() const$/;"	f	class:X86ISA::MediaOpBase
signedPick	./arch/x86/insts/static_inst.hh	/^        inline int64_t signedPick(uint64_t from, int idx, int size) const$/;"	f	class:X86ISA::X86StaticInst
signo	./cpu/kvm/timer.hh	/^    int signo;$/;"	m	class:BaseKvmTimer
sigpending	./kern/tru64/tru64_syscalls.hh	/^        sigpending = 52,$/;"	e	enum:SystemCalls::__anon102
sigprocmask	./kern/tru64/tru64_syscalls.hh	/^        sigprocmask = 48,$/;"	e	enum:SystemCalls::__anon102
sigreturn	./kern/tru64/tru64_syscalls.hh	/^        sigreturn = 103,$/;"	e	enum:SystemCalls::__anon102
sigreturnFunc	./kern/tru64/tru64.hh	/^    sigreturnFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	class:Tru64
sigsendset	./kern/tru64/tru64_syscalls.hh	/^        sigsendset = 238,$/;"	e	enum:SystemCalls::__anon102
sigset_t	./kern/tru64/tru64.hh	/^    typedef uint64_t   sigset_t;$/;"	t	class:Tru64
sigstack	./kern/tru64/tru64_syscalls.hh	/^        sigstack = 112,$/;"	e	enum:SystemCalls::__anon102
sigsuspend	./kern/tru64/tru64_syscalls.hh	/^        sigsuspend = 111,$/;"	e	enum:SystemCalls::__anon102
sigwaitprim	./kern/tru64/tru64_syscalls.hh	/^        sigwaitprim = 157,$/;"	e	enum:SystemCalls::__anon102
simCycles	./cpu/testers/networktest/networktest.hh	/^    Tick simCycles;$/;"	m	class:NetworkTest
simFreq	./sim/stat_control.cc	/^Stats::Value simFreq;$/;"	v
simInsts	./sim/stat_control.cc	/^    Stats::Value simInsts;$/;"	m	struct:Stats::Global	file:
simObjectCreate	./sim/cxx_config.hh	/^    virtual SimObject *simObjectCreate() { return NULL; }$/;"	f	class:CxxConfigParams
simObjectList	./sim/sim_object.hh	/^    static SimObjectList simObjectList;$/;"	m	class:SimObject
simObjectResolver	./sim/cxx_manager.hh	/^    SimObjectResolver simObjectResolver;$/;"	m	class:CxxConfigManager
simOps	./sim/stat_control.cc	/^    Stats::Value simOps;$/;"	m	struct:Stats::Global	file:
simPalCheck	./arch/alpha/ev5.cc	/^SimpleThread::simPalCheck(int palFunc)$/;"	f	class:SimpleThread
simPalCheck	./cpu/minor/exec_context.hh	/^    simPalCheck(int palFunc)$/;"	f	class:Minor::ExecContext
simPalCheck	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::simPalCheck(int palFunc, ThreadID tid)$/;"	f	class:FullO3CPU
simPalCheck	./cpu/o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::simPalCheck(int palFunc)$/;"	f	class:BaseO3DynInst
simPalCheck	./cpu/simple_thread.cc	/^SimpleThread::simPalCheck(int palFunc)$/;"	f	class:SimpleThread
simTicks	./sim/stat_control.cc	/^Stats::Value simTicks;$/;"	v
simTicksReset	./sim/stat_control.cc	/^SimTicksReset simTicksReset;$/;"	m	namespace:Stats	file:
sim_cycles	./cpu/testers/networktest/NetworkTest.py	/^    sim_cycles = Param.Int(1000, "Number of simulation cycles")$/;"	v	class:NetworkTest
sim_quantum	./sim/Root.py	/^    sim_quantum = Param.Tick(0, "simulation quantum")$/;"	v	class:Root
simdPack	./arch/mips/dsp.cc	/^MipsISA::simdPack(uint64_t *values_ptr, int32_t *reg, int32_t fmt)$/;"	f	class:MipsISA
simdUnpack	./arch/mips/dsp.cc	/^MipsISA::simdUnpack(int32_t reg, uint64_t *values_ptr, int32_t fmt, int32_t sign)$/;"	f	class:MipsISA
simd_modified_imm	./arch/arm/insts/pred_inst.hh	/^simd_modified_imm(bool op, uint8_t cmode, uint8_t data, bool &immValid,$/;"	f	namespace:ArmISA
simpoint	./sim/Process.py	/^    simpoint = Param.UInt64(0, 'simulation point at which to start simulation')$/;"	v	class:LiveProcess
simpointStream	./cpu/simple/probes/simpoint.hh	/^    std::ostream *simpointStream;$/;"	m	class:SimPoint
simpoint_start_insts	./cpu/BaseCPU.py	/^    simpoint_start_insts = VectorParam.Counter([],$/;"	v
simulate	./python/m5/simulate.py	/^def simulate(*args, **kwargs):$/;"	f
simulate	./sim/simulate.cc	/^simulate(Tick num_cycles)$/;"	f
simulate_data_stalls	./cpu/simple/AtomicSimpleCPU.py	/^    simulate_data_stalls = Param.Bool(False, "Simulate dcache stall cycles")$/;"	v	class:AtomicSimpleCPU
simulate_data_stalls	./cpu/simple/atomic.hh	/^    const bool simulate_data_stalls;$/;"	m	class:AtomicSimpleCPU
simulate_inst_stalls	./cpu/simple/AtomicSimpleCPU.py	/^    simulate_inst_stalls = Param.Bool(False, "Simulate icache stall cycles")$/;"	v	class:AtomicSimpleCPU
simulate_inst_stalls	./cpu/simple/atomic.hh	/^    const bool simulate_inst_stalls;$/;"	m	class:AtomicSimpleCPU
simulate_limit_event	./sim/simulate.cc	/^GlobalSimLoopExitEvent *simulate_limit_event = nullptr;$/;"	v
singlePrecision	./arch/arm/miscregs.hh	/^        Bitfield<7, 4> singlePrecision;$/;"	m	namespace:ArmISA
singleStepEvent	./base/remote_gdb.hh	/^    SingleStepEvent singleStepEvent;$/;"	m	class:BaseRemoteGDB
sink	./dev/x86/X86IntPin.py	/^    sink = Param.X86IntSinkPin("Pin driven by this line")$/;"	v	class:X86IntLine
sink	./dev/x86/intdev.hh	/^    IntSinkPin *sink;$/;"	m	class:X86ISA::IntLine
sinks	./dev/x86/intdev.hh	/^    std::vector<IntSinkPin *> sinks;$/;"	m	class:X86ISA::IntSourcePin
site	./dev/arm/RealView.py	/^    site = Param.UInt8("Board Site")$/;"	v	class:RealViewOsc
site	./dev/arm/rv_ctrl.hh	/^        Bitfield<17, 16> site;$/;"	m	class:RealViewCtrl
size	./arch/alpha/AlphaTLB.py	/^    size = 48$/;"	v	class:AlphaITB
size	./arch/alpha/AlphaTLB.py	/^    size = 64$/;"	v	class:AlphaDTB
size	./arch/alpha/AlphaTLB.py	/^    size = Param.Int("TLB size")$/;"	v	class:AlphaTLB
size	./arch/alpha/remote_gdb.hh	/^        size_t size() const { return sizeof(r); }$/;"	f	class:AlphaISA::RemoteGDB::AlphaGdbRegCache
size	./arch/arm/ArmTLB.py	/^    size = 32$/;"	v	class:ArmStage2TLB
size	./arch/arm/ArmTLB.py	/^    size = Param.Int(64, "TLB size")$/;"	v	class:ArmTLB
size	./arch/arm/freebsd/process.hh	/^        int size;$/;"	m	struct:ArmFreebsdProcessBits::SyscallTable
size	./arch/arm/linux/atag.hh	/^    uint32_t size() const { return _size; }$/;"	f	class:AtagHeader
size	./arch/arm/linux/process.hh	/^        int size;$/;"	m	struct:ArmLinuxProcessBits::SyscallTable
size	./arch/arm/pagetable.hh	/^    Addr size;              \/\/ Size of this entry, == Type of TLB Rec$/;"	m	struct:ArmISA::TlbEntry
size	./arch/arm/remote_gdb.hh	/^        size_t size() const { return sizeof(r); }$/;"	f	class:ArmISA::RemoteGDB::AArch32GdbRegCache
size	./arch/arm/remote_gdb.hh	/^        size_t size() const { return sizeof(r); }$/;"	f	class:ArmISA::RemoteGDB::AArch64GdbRegCache
size	./arch/arm/tlb.hh	/^    int size;            \/\/ TLB Size$/;"	m	class:ArmISA::TLB
size	./arch/arm/types.hh	/^        uint8_t size() const { return _size; }$/;"	f	class:ArmISA::PCState
size	./arch/arm/types.hh	/^        void size(uint8_t s) { _size = s; }$/;"	f	class:ArmISA::PCState
size	./arch/mips/MipsTLB.py	/^    size = Param.Int(64, "TLB size")$/;"	v	class:MipsTLB
size	./arch/mips/remote_gdb.hh	/^        size_t size() const { return sizeof(r); }$/;"	f	class:MipsISA::RemoteGDB::MipsGdbRegCache
size	./arch/mips/tlb.hh	/^    int size;                   \/\/ TLB Size$/;"	m	class:MipsISA::TLB
size	./arch/power/PowerTLB.py	/^    size = Param.Int(64, "TLB size")$/;"	v	class:PowerTLB
size	./arch/power/remote_gdb.hh	/^        size_t size() const { return sizeof(r); }$/;"	f	class:PowerISA::RemoteGDB::PowerGdbRegCache
size	./arch/power/tlb.hh	/^    int size;                   \/\/ TLB Size$/;"	m	class:PowerISA::TLB
size	./arch/sparc/SparcTLB.py	/^    size = Param.Int(64, "TLB size")$/;"	v	class:SparcTLB
size	./arch/sparc/pagetable.hh	/^    Addr size()     const { assert(_size() < 6); return pageSizes[_size()]; }$/;"	f	class:SparcISA::PageTableEntry
size	./arch/sparc/pagetable.hh	/^    Addr size;$/;"	m	struct:SparcISA::TlbRange
size	./arch/sparc/remote_gdb.hh	/^        size_t size() const { return sizeof(r); }$/;"	f	class:SparcISA::RemoteGDB::SPARC64GdbRegCache
size	./arch/sparc/remote_gdb.hh	/^        size_t size() const { return sizeof(r); }$/;"	f	class:SparcISA::RemoteGDB::SPARCGdbRegCache
size	./arch/sparc/tlb.hh	/^    int size;$/;"	m	class:SparcISA::TLB
size	./arch/sparc/tlb_map.hh	/^    size()$/;"	f	class:SparcISA::TlbMap
size	./arch/x86/X86TLB.py	/^    size = Param.Unsigned(64, "TLB size")$/;"	v	class:X86TLB
size	./arch/x86/bios/E820.py	/^    size = Param.MemorySize('0B', 'size of the region')$/;"	v	class:X86E820Entry
size	./arch/x86/bios/e820.hh	/^        Addr size;$/;"	m	class:X86ISA::E820Entry
size	./arch/x86/pagetable.hh	/^        int size()$/;"	f	struct:X86ISA::TlbEntry
size	./arch/x86/process.hh	/^            Addr size;$/;"	m	class:X86ISA::I386LiveProcess::VSyscallPage
size	./arch/x86/process.hh	/^            Addr size;$/;"	m	class:X86ISA::X86_64LiveProcess::VSyscallPage
size	./arch/x86/remote_gdb.hh	/^        size_t size() const { return sizeof(r); }$/;"	f	class:X86ISA::RemoteGDB::AMD64GdbRegCache
size	./arch/x86/remote_gdb.hh	/^        size_t size() const { return sizeof(r); }$/;"	f	class:X86ISA::RemoteGDB::X86GdbRegCache
size	./arch/x86/tlb.hh	/^        uint32_t size;$/;"	m	class:X86ISA::TLB
size	./arch/x86/types.hh	/^        uint8_t size() const { return _size; }$/;"	f	class:X86ISA::PCState
size	./arch/x86/types.hh	/^        void size(uint8_t newSize) { _size = newSize; }$/;"	f	class:X86ISA::PCState
size	./base/addr_range.hh	/^    Addr size() const$/;"	f	class:AddrRange
size	./base/addr_range_map.hh	/^    size() const$/;"	f	class:AddrRangeMap
size	./base/bitmap.hh	/^        uint32_t size;$/;"	m	struct:Bitmap::FileHeader
size	./base/chunk_generator.hh	/^    unsigned size() const { return curSize; }$/;"	f	class:ChunkGenerator
size	./base/circlebuf.hh	/^    size_t size() const { return _stop - _start; }$/;"	f	class:CircleBuf
size	./base/circlebuf.hh	/^    size_t size() const { return buf.size(); }$/;"	f	class:Fifo
size	./base/inet.hh	/^    int size() const { return IP6_HDR_LEN + extensionLength(); }$/;"	f	struct:Net::Ip6Hdr
size	./base/inet.hh	/^    int size() const { return hlen(); }$/;"	f	struct:Net::IpHdr
size	./base/inet.hh	/^    int size() const { return len(); }$/;"	f	struct:Net::TcpOpt
size	./base/inet.hh	/^    int size() const { return off(); }$/;"	f	struct:Net::TcpHdr
size	./base/inet.hh	/^    int size() const { return sizeof(eth_addr); }$/;"	f	struct:Net::EthAddr
size	./base/inet.hh	/^    int size() const { return sizeof(udp_hdr); }$/;"	f	struct:Net::UdpHdr
size	./base/inet.hh	/^    int size() const {$/;"	f	struct:Net::EthHdr
size	./base/loader/object_file.hh	/^        size_t   size;$/;"	m	struct:ObjectFile::Section
size	./base/statistics.cc	/^Formula::size() const$/;"	f	class:Stats::Formula
size	./base/statistics.hh	/^    size() const$/;"	f	class:Stats::BinaryNode
size	./base/statistics.hh	/^    size() const$/;"	f	class:Stats::DistProxy
size	./base/statistics.hh	/^    size() const$/;"	f	class:Stats::ScalarProxyNode
size	./base/statistics.hh	/^    size() const$/;"	f	class:Stats::Vector2dBase
size	./base/statistics.hh	/^    size() const$/;"	f	class:Stats::VectorDistBase
size	./base/statistics.hh	/^    size_type size() const { return 1; }$/;"	f	class:Stats::AvgSampleStor
size	./base/statistics.hh	/^    size_type size() const { return 1; }$/;"	f	class:Stats::ConstNode
size	./base/statistics.hh	/^    size_type size() const { return 1; }$/;"	f	class:Stats::ProxyInfo
size	./base/statistics.hh	/^    size_type size() const { return 1; }$/;"	f	class:Stats::SampleStor
size	./base/statistics.hh	/^    size_type size() const { return 1; }$/;"	f	class:Stats::ScalarBase
size	./base/statistics.hh	/^    size_type size() const { return 1; }$/;"	f	class:Stats::ScalarProxy
size	./base/statistics.hh	/^    size_type size() const { return 1; }$/;"	f	class:Stats::ScalarStatNode
size	./base/statistics.hh	/^    size_type size() const { return 1; }$/;"	f	class:Stats::SumNode
size	./base/statistics.hh	/^    size_type size() const { return _size; }$/;"	f	class:Stats::VectorBase
size	./base/statistics.hh	/^    size_type size() const { return cmap.size(); }$/;"	f	class:Stats::SparseHistStor
size	./base/statistics.hh	/^    size_type size() const { return cvec.size(); }$/;"	f	class:Stats::DistStor
size	./base/statistics.hh	/^    size_type size() const { return cvec.size(); }$/;"	f	class:Stats::HistStor
size	./base/statistics.hh	/^    size_type size() const { return data()->size(); }$/;"	f	class:Stats::DistBase
size	./base/statistics.hh	/^    size_type size() const { return data()->size(); }$/;"	f	class:Stats::SparseHistBase
size	./base/statistics.hh	/^    size_type size() const { return data->size(); }$/;"	f	class:Stats::VectorStatNode
size	./base/statistics.hh	/^    size_type size() const { return formula.size(); }$/;"	f	class:Stats::FormulaNode
size	./base/statistics.hh	/^    size_type size() const { return l->size(); }$/;"	f	class:Stats::UnaryNode
size	./base/statistics.hh	/^    size_type size() const { return len; }$/;"	f	class:Stats::VectorProxy
size	./base/statistics.hh	/^    size_type size() const { return proxy->size(); }$/;"	f	class:Stats::ValueBase
size	./base/statistics.hh	/^    size_type size() const { return this->s.size(); }$/;"	f	class:Stats::FormulaInfoProxy
size	./base/statistics.hh	/^    size_type size() const { return this->s.size(); }$/;"	f	class:Stats::VectorDistInfoProxy
size	./base/statistics.hh	/^    size_type size() const { return this->s.size(); }$/;"	f	class:Stats::VectorInfoProxy
size	./base/statistics.hh	/^    size_type size() const { return vresult.size(); }$/;"	f	class:Stats::ConstVectorNode
size	./cpu/kvm/vm.hh	/^        uint64_t size;$/;"	m	class:KvmVM::MemorySlot
size	./cpu/o3/comm.hh	/^    int size;$/;"	m	struct:DefaultDecodeDefaultRename
size	./cpu/o3/comm.hh	/^    int size;$/;"	m	struct:DefaultFetchDefaultDecode
size	./cpu/o3/comm.hh	/^    int size;$/;"	m	struct:DefaultIEWDefaultCommit
size	./cpu/o3/comm.hh	/^    int size;$/;"	m	struct:DefaultRenameDefaultIEW
size	./cpu/o3/comm.hh	/^    int size;$/;"	m	struct:IssueStruct
size	./cpu/o3/fu_pool.hh	/^        int size;$/;"	m	class:FUPool::FUIdxQueue
size	./cpu/o3/fu_pool.hh	/^    int size() { return numFU; }$/;"	f	class:FUPool
size	./cpu/o3/lsq_unit.hh	/^        uint8_t size;$/;"	m	struct:LSQUnit::SQEntry
size	./cpu/o3/probe/elastic_trace.hh	/^        unsigned size;$/;"	m	struct:ElasticTrace::TraceInfo
size	./cpu/testers/memtest/MemTest.py	/^    size = Param.Unsigned(65536, "Size of memory region to use (bytes)")$/;"	v	class:MemTest
size	./cpu/testers/memtest/memtest.hh	/^    const unsigned size;$/;"	m	class:MemTest
size	./cpu/testers/networktest/networktest.hh	/^    unsigned size;$/;"	m	class:NetworkTest
size	./cpu/timebuf.hh	/^    unsigned size;$/;"	m	class:TimeBuffer
size	./cpu/trace/trace_cpu.hh	/^            uint32_t size;$/;"	m	class:TraceCPU::ElasticDataGen::GraphNode
size	./dev/arm/hdlcd.hh	/^        Bitfield<11,8>  size;$/;"	m	class:HDLcd
size	./dev/arm/ufs_device.hh	/^        uint32_t size;$/;"	m	struct:UFSHostDevice::UFSHCDSGEntry
size	./dev/arm/ufs_device.hh	/^        uint32_t size;$/;"	m	struct:UFSHostDevice::taskStart
size	./dev/arm/ufs_device.hh	/^        uint32_t size;$/;"	m	struct:UFSHostDevice::transferDoneInfo
size	./dev/arm/ufs_device.hh	/^        uint32_t size;$/;"	m	struct:UFSHostDevice::transferInfo
size	./dev/arm/ufs_device.hh	/^        uint32_t size;$/;"	m	struct:UFSHostDevice::transferStart
size	./dev/arm/ufs_device.hh	/^        uint32_t size;$/;"	m	struct:UFSHostDevice::writeToDiskBurst
size	./dev/dma_device.hh	/^    size_t size() const { return buffer.size(); }$/;"	f	class:DmaReadFifo
size	./dev/net/dist_iface.hh	/^    unsigned size;$/;"	m	class:DistIface
size	./dev/net/etherpkt.hh	/^    unsigned size() const { return length; }$/;"	f	class:EthPacketData
size	./dev/net/i8254xGBe.hh	/^        int size;$/;"	m	class:IGbE::DescCache
size	./dev/net/pktfifo.hh	/^    unsigned size() const { return _size; }$/;"	f	class:PacketFifo
size	./dev/net/sinicreg.hh	/^    uint8_t size;$/;"	m	struct:Sinic::Regs::Info
size	./dev/storage/disk_image.cc	/^CowDiskImage::size() const$/;"	f	class:CowDiskImage
size	./dev/storage/disk_image.cc	/^RawDiskImage::size() const$/;"	f	class:RawDiskImage
size	./dev/virtio/base.hh	/^    size_t size() const { return desc.len; }$/;"	f	class:VirtDescriptor
size	./mem/abstract_mem.hh	/^    uint64_t size() const { return range.size(); }$/;"	f	class:AbstractMemory
size	./mem/cache/Cache.py	/^    size = Param.MemorySize("Capacity")$/;"	v	class:BaseCache
size	./mem/cache/blk.hh	/^    unsigned size;$/;"	m	class:CacheBlk
size	./mem/cache/tags/Tags.py	/^    size = Param.MemorySize(Parent.size, "capacity in bytes")$/;"	v	class:BaseTags
size	./mem/cache/tags/base.hh	/^    const unsigned size;$/;"	m	class:BaseTags
size	./mem/dram_ctrl.hh	/^        unsigned int size;$/;"	m	class:DRAMCtrl::DRAMPacket
size	./mem/packet.hh	/^    unsigned size;$/;"	m	class:Packet
size	./mem/packet_queue.hh	/^    size_t size() const { return transmitList.size(); }$/;"	f	class:PacketQueue
size	./mem/physical.hh	/^    uint64_t size;$/;"	m	class:PhysicalMemory
size	./mem/ruby/common/Histogram.hh	/^    uint64_t size() const { return m_count; }$/;"	f	class:Histogram
size	./mem/ruby/structures/DirectoryMemory.py	/^    size = Param.MemorySize("1GB", "capacity in bytes")$/;"	v	class:RubyDirectoryMemory
size	./mem/ruby/structures/ReplacementPolicy.py	/^    size = Param.MemorySize(Parent.size, "capacity in bytes")$/;"	v	class:ReplacementPolicy
size	./mem/ruby/structures/RubyCache.py	/^    size = Param.MemorySize("capacity in bytes");$/;"	v	class:RubyCache
size	./python/m5/params.py	/^    def size(self):$/;"	m	class:AddrRange
size	./python/m5/params.py	/^    size = 32$/;"	v	class:MemorySize32
size	./python/m5/params.py	/^    size = 64$/;"	v	class:Addr
size	./python/m5/params.py	/^    size = 64$/;"	v	class:Cycles
size	./python/m5/params.py	/^    size = 64$/;"	v	class:MemorySize
size	./sim/insttracer.hh	/^    Addr size; \/\/\/< The size of the memory request$/;"	m	class:Trace::InstRecord
size	./sim/probe/mem.hh	/^    uint32_t size;$/;"	m	struct:ProbePoints::PacketInfo
size	./sim/syscall_emul_buf.hh	/^    const int size;         \/\/\/< buffer size$/;"	m	class:BaseBufferArg
sizeLeft	./base/chunk_generator.hh	/^    unsigned  sizeLeft;$/;"	m	class:ChunkGenerator
sizeLoadBuffer	./cpu/trace/TraceCPU.py	/^    sizeLoadBuffer = Param.Unsigned(16, "Number of entries in the load buffer")$/;"	v	class:TraceCPU
sizeLoadBuffer	./cpu/trace/trace_cpu.hh	/^            const uint16_t sizeLoadBuffer;$/;"	m	class:TraceCPU::ElasticDataGen::HardwareResource
sizeMask	./arch/sparc/pagetable.hh	/^    Addr sizeMask() const { return size() - 1; }$/;"	f	class:SparcISA::PageTableEntry
sizeParam	./dev/net/dist_iface.cc	/^DistIface::sizeParam()$/;"	f	class:DistIface
sizeROB	./cpu/trace/TraceCPU.py	/^    sizeROB =  Param.Unsigned(40, "Number of entries in the re-order buffer")$/;"	v	class:TraceCPU
sizeROB	./cpu/trace/trace_cpu.hh	/^            const uint16_t sizeROB;$/;"	m	class:TraceCPU::ElasticDataGen::HardwareResource
sizeStoreBuffer	./cpu/trace/TraceCPU.py	/^        "buffer")$/;"	v	class:TraceCPU
sizeStoreBuffer	./cpu/trace/trace_cpu.hh	/^            const uint16_t sizeStoreBuffer;$/;"	m	class:TraceCPU::ElasticDataGen::HardwareResource
size_t	./arch/arm/freebsd/freebsd.hh	/^    typedef uint32_t size_t;$/;"	t	class:ArmFreebsd32
size_t	./arch/arm/freebsd/freebsd.hh	/^    typedef uint64_t size_t;$/;"	t	class:ArmFreebsd64
size_t	./arch/arm/linux/linux.hh	/^    typedef uint32_t size_t;$/;"	t	class:ArmLinux32
size_t	./arch/arm/linux/linux.hh	/^    typedef uint64_t size_t;$/;"	t	class:ArmLinux64
size_t	./kern/freebsd/freebsd.hh	/^    typedef uint64_t size_t;$/;"	t	class:FreeBSD
size_t	./kern/linux/linux.hh	/^    typedef uint64_t size_t;$/;"	t	class:Linux
size_t	./kern/solaris/solaris.hh	/^    typedef uint64_t size_t;$/;"	t	class:Solaris
size_t	./kern/tru64/tru64.hh	/^    typedef uint64_t size_t;$/;"	t	class:Tru64
size_type	./base/stats/types.hh	/^typedef unsigned int size_type;$/;"	t	namespace:Stats
skidBuffer	./cpu/o3/decode.hh	/^    std::queue<DynInstPtr> skidBuffer[Impl::MaxThreads];$/;"	m	class:DefaultDecode
skidBuffer	./cpu/o3/iew.hh	/^    std::queue<DynInstPtr> skidBuffer[Impl::MaxThreads];$/;"	m	class:DefaultIEW
skidBuffer	./cpu/o3/rename.hh	/^    InstQueue skidBuffer[Impl::MaxThreads];$/;"	m	class:DefaultRename
skidBufferMax	./cpu/o3/decode.hh	/^    unsigned skidBufferMax;$/;"	m	class:DefaultDecode
skidBufferMax	./cpu/o3/iew.hh	/^    unsigned skidBufferMax;$/;"	m	class:DefaultIEW
skidBufferMax	./cpu/o3/rename.hh	/^    unsigned skidBufferMax;$/;"	m	class:DefaultRename
skidCount	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::skidCount()$/;"	f	class:DefaultIEW
skidInsert	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::skidInsert(ThreadID tid)$/;"	f	class:DefaultDecode
skidInsert	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::skidInsert(ThreadID tid)$/;"	f	class:DefaultIEW
skidInsert	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::skidInsert(ThreadID tid)$/;"	f	class:DefaultRename
skidsEmpty	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::skidsEmpty()$/;"	f	class:DefaultDecode
skidsEmpty	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::skidsEmpty()$/;"	f	class:DefaultIEW
skidsEmpty	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::skidsEmpty()$/;"	f	class:DefaultRename
skipCacheProbeEvent	./arch/alpha/linux/system.hh	/^    SkipFuncEvent *skipCacheProbeEvent;$/;"	m	class:LinuxAlphaSystem
skipCalibrateClocks	./arch/alpha/freebsd/system.hh	/^    SkipCalibrateClocksEvent *skipCalibrateClocks;$/;"	m	class:FreebsdAlphaSystem
skipDelayEvent	./arch/alpha/freebsd/system.hh	/^    SkipFuncEvent *skipDelayEvent;$/;"	m	class:FreebsdAlphaSystem
skipDelayLoopEvent	./arch/alpha/linux/system.hh	/^    SkipDelayLoopEvent *skipDelayLoopEvent;$/;"	m	class:LinuxAlphaSystem
skipFaultingInstruction	./arch/alpha/faults.hh	/^    bool skipFaultingInstruction() {return true;}$/;"	f	class:AlphaISA::ArithmeticFault
skipFaultingInstruction	./arch/alpha/faults.hh	/^    bool skipFaultingInstruction() {return true;}$/;"	f	class:AlphaISA::PalFault
skipFaultingInstruction	./arch/alpha/faults.hh	/^    virtual bool skipFaultingInstruction() {return false;}$/;"	f	class:AlphaISA::AlphaFault
skipFunction	./arch/alpha/utility.cc	/^skipFunction(ThreadContext *tc)$/;"	f	namespace:AlphaISA
skipFunction	./arch/arm/utility.cc	/^skipFunction(ThreadContext *tc)$/;"	f	namespace:ArmISA
skipFunction	./arch/mips/utility.cc	/^skipFunction(ThreadContext *tc)$/;"	f	namespace:MipsISA
skipFunction	./arch/power/utility.cc	/^skipFunction(ThreadContext *tc)$/;"	f	namespace:PowerISA
skipFunction	./arch/sparc/utility.cc	/^skipFunction(ThreadContext *tc)$/;"	f	namespace:SparcISA
skipFunction	./arch/x86/utility.cc	/^skipFunction(ThreadContext *tc)$/;"	f	namespace:X86ISA
skipIdeDelay50msEvent	./arch/alpha/linux/system.hh	/^    SkipFuncEvent *skipIdeDelay50msEvent;$/;"	m	class:LinuxAlphaSystem
skipPowerStateEvent	./arch/alpha/tru64/system.hh	/^    SkipFuncEvent *skipPowerStateEvent;$/;"	m	class:Tru64AlphaSystem
skipScavengeBootEvent	./arch/alpha/tru64/system.hh	/^    SkipFuncEvent *skipScavengeBootEvent;$/;"	m	class:Tru64AlphaSystem
skipped	./cpu/minor/lsq.hh	/^        bool skipped;$/;"	m	class:Minor::LSQ::LSQRequest
skippedMemAccess	./cpu/minor/lsq.hh	/^        bool skippedMemAccess() { return skipped; }$/;"	f	class:Minor::LSQ::LSQRequest
sl	./arch/mips/pra_constants.hh	/^    Bitfield<7,  4>  sl;$/;"	m	namespace:MipsISA
sl0	./arch/arm/miscregs.hh	/^        Bitfield<7, 6> sl0;$/;"	m	namespace:ArmISA
slack	./dev/net/pktfifo.hh	/^    unsigned slack;$/;"	m	struct:PacketFifoEntry
slave	./dev/storage/ide_ctrl.hh	/^        IdeDisk *master, *slave;$/;"	m	struct:IdeController::Channel
slave	./dev/x86/I8259.py	/^    slave = Param.I8259(NULL, 'Slave I8259, if any')$/;"	v	class:I8259
slave	./dev/x86/i8259.hh	/^    I8259 * slave;$/;"	m	class:X86ISA::I8259
slave	./mem/AddrMapper.py	/^    slave = SlavePort("Slave port")$/;"	v	class:AddrMapper
slave	./mem/Bridge.py	/^    slave = SlavePort('Slave port')$/;"	v	class:Bridge
slave	./mem/CommMonitor.py	/^    slave = SlavePort("Slave port")$/;"	v	class:CommMonitor
slave	./mem/MemChecker.py	/^    slave = SlavePort("Slave port")$/;"	v	class:MemCheckerMonitor
slave	./mem/SerialLink.py	/^    slave = SlavePort('Slave port')$/;"	v	class:SerialLink
slave	./mem/XBar.py	/^    slave = VectorSlavePort("Vector port for connecting masters")$/;"	v	class:BaseXBar
slave	./mem/ruby/network/MessageBuffer.py	/^    slave = SlavePort("Slave port from MessageBuffer sender")$/;"	v	class:MessageBuffer
slave	./mem/ruby/network/Network.py	/^    slave = VectorSlavePort("CPU slave port")$/;"	v	class:RubyNetwork
slave	./mem/ruby/system/Sequencer.py	/^    slave = SlavePort("Device slave port")$/;"	v	class:DMASequencer
slave	./mem/ruby/system/Sequencer.py	/^    slave = VectorSlavePort("CPU slave port")$/;"	v	class:RubyPort
slavePort	./mem/addr_mapper.hh	/^    MapperSlavePort slavePort;$/;"	m	class:AddrMapper
slavePort	./mem/bridge.hh	/^        BridgeSlavePort& slavePort;$/;"	m	class:Bridge::BridgeMasterPort
slavePort	./mem/bridge.hh	/^    BridgeSlavePort slavePort;$/;"	m	class:Bridge
slavePort	./mem/coherent_xbar.hh	/^        QueuedSlavePort& slavePort;$/;"	m	class:CoherentXBar::SnoopRespPort
slavePort	./mem/comm_monitor.hh	/^    MonitorSlavePort slavePort;$/;"	m	class:CommMonitor
slavePort	./mem/mem_checker_monitor.hh	/^    MonitorSlavePort slavePort;$/;"	m	class:MemCheckerMonitor
slavePort	./mem/packet_queue.hh	/^    SlavePort& slavePort;$/;"	m	class:RespPacketQueue
slavePort	./mem/serial_link.hh	/^        SerialLinkSlavePort& slavePort;$/;"	m	class:SerialLink::SerialLinkMasterPort
slavePort	./mem/serial_link.hh	/^    SerialLinkSlavePort slavePort;$/;"	m	class:SerialLink
slavePorts	./mem/snoop_filter.hh	/^    SnoopList slavePorts;$/;"	m	class:SnoopFilter
slavePorts	./mem/xbar.hh	/^    std::vector<QueuedSlavePort*> slavePorts;$/;"	m	class:BaseXBar
slave_port	./mem/ruby/system/DMASequencer.hh	/^    MemSlavePort slave_port;$/;"	m	class:DMASequencer
slave_ports	./mem/ruby/system/RubyPort.hh	/^    std::vector<MemSlavePort *> slave_ports;$/;"	m	class:RubyPort
sleep	./base/time.cc	/^sleep(const Time &time)$/;"	f
slot	./cpu/kvm/vm.hh	/^        uint32_t slot;$/;"	m	class:KvmVM::MemorySlot
slots	./cpu/minor/lsq.hh	/^        std::deque<LSQRequestPtr> slots;$/;"	m	class:Minor::LSQ::StoreBuffer
sm	./arch/mips/pra_constants.hh	/^    Bitfield<1>  sm;$/;"	m	namespace:MipsISA
sm	./base/cp_annotate.hh	/^        uint16_t sm;$/;"	m	struct:CPA::AnnotateData
smCache	./base/cp_annotate.hh	/^    IdCache qCache, smCache;$/;"	m	class:CPA
smMap	./base/cp_annotate.hh	/^    IdMap smMap, qMap;$/;"	m	class:CPA
smStack	./base/cp_annotate.hh	/^    SmStack smStack;$/;"	m	class:CPA
smallPages	./arch/mips/tlb.hh	/^    int smallPages;$/;"	m	class:MipsISA::TLB
smallPages	./arch/power/tlb.hh	/^    int smallPages;$/;"	m	class:PowerISA::TLB
smallestElement	./mem/ruby/common/NetDest.cc	/^NetDest::smallestElement() const$/;"	f	class:NetDest
smallestElement	./mem/ruby/common/NetDest.cc	/^NetDest::smallestElement(MachineType machine) const$/;"	f	class:NetDest
smallestElement	./mem/ruby/common/Set.hh	/^    NodeID smallestElement() const$/;"	f	class:Set
smbiosBCDRevision	./arch/x86/bios/smbios.hh	/^            uint8_t smbiosBCDRevision;$/;"	m	struct:X86ISA::SMBios::SMBiosTable::SMBiosHeader::IntermediateHeader
smbiosHeader	./arch/x86/bios/smbios.hh	/^    } smbiosHeader;$/;"	m	class:X86ISA::SMBios::SMBiosTable	typeref:struct:X86ISA::SMBios::SMBiosTable::SMBiosHeader
smbiosTable	./arch/x86/system.hh	/^    X86ISA::SMBios::SMBiosTable * smbiosTable;$/;"	m	class:X86System
smbios_table	./arch/x86/X86System.py	/^    smbios_table = Param.X86SMBiosSMBiosTable($/;"	v	class:X86System
smc_fake	./dev/arm/RealView.py	/^    smc_fake      = AmbaFake(pio_addr=0x100e1000)$/;"	v	class:RealViewEB
smc_fake	./dev/arm/RealView.py	/^    smc_fake      = AmbaFake(pio_addr=0x100e1000)$/;"	v	class:RealViewPBX
smcreg_fake	./dev/arm/RealView.py	/^    smcreg_fake   = IsaFake(pio_addr=0x10080000, pio_size=0x10000-1)$/;"	v	class:RealViewEB
smd	./arch/arm/miscregs.hh	/^        Bitfield<7> smd;  \/\/ AArch64$/;"	m	namespace:ArmISA
smiCycle	./arch/x86/regs/misc.hh	/^        Bitfield<2> smiCycle;$/;"	m	namespace:X86ISA
smiVector	./arch/x86/interrupts.hh	/^    uint8_t smiVector;$/;"	m	class:X86ISA::Interrupts
smtCache	./base/cp_annotate.hh	/^    SCache smtCache;$/;"	m	class:CPA
smtCommitPolicy	./cpu/o3/O3CPU.py	/^    smtCommitPolicy = Param.String('RoundRobin', "SMT Commit Policy")$/;"	v	class:DerivO3CPU
smtFetchPolicy	./cpu/o3/O3CPU.py	/^    smtFetchPolicy = Param.String('SingleThread', "SMT Fetch policy")$/;"	v	class:DerivO3CPU
smtIQPolicy	./cpu/o3/O3CPU.py	/^    smtIQPolicy    = Param.String('Partitioned', "SMT IQ Sharing Policy")$/;"	v	class:DerivO3CPU
smtIQThreshold	./cpu/o3/O3CPU.py	/^    smtIQThreshold = Param.Int(100, "SMT IQ Threshold Sharing Parameter")$/;"	v	class:DerivO3CPU
smtLSQPolicy	./cpu/o3/O3CPU.py	/^    smtLSQPolicy    = Param.String('Partitioned', "SMT LSQ Sharing Policy")$/;"	v	class:DerivO3CPU
smtLSQThreshold	./cpu/o3/O3CPU.py	/^    smtLSQThreshold = Param.Int(100, "SMT LSQ Threshold Sharing Parameter")$/;"	v	class:DerivO3CPU
smtNumFetchingThreads	./cpu/o3/O3CPU.py	/^    smtNumFetchingThreads = Param.Unsigned(1, "SMT Number of Fetching Threads")$/;"	v	class:DerivO3CPU
smtROBPolicy	./cpu/o3/O3CPU.py	/^    smtROBPolicy   = Param.String('Partitioned', "SMT ROB Sharing Policy")$/;"	v	class:DerivO3CPU
smtROBThreshold	./cpu/o3/O3CPU.py	/^    smtROBThreshold = Param.Int(100, "SMT ROB Threshold Sharing Parameter")$/;"	v	class:DerivO3CPU
sn	./arch/arm/linux/atag.hh	/^    void sn(uint64_t i) { storage[2] = (uint32_t)i; storage[3] = i >> 32; }$/;"	f	class:AtagSerial
snList	./cpu/o3/cpu.hh	/^    std::set<InstSeqNum> snList;$/;"	m	class:FullO3CPU
snaplen	./dev/net/etherdump.cc	/^    uint32_t snaplen;           \/\/ max length saved portion of each pkt$/;"	m	struct:pcap_file_header	file:
snoopAll	./mem/snoop_filter.hh	/^    std::pair<SnoopList, Cycles> snoopAll(Cycles latency) const$/;"	f	class:SnoopFilter
snoopDelay	./mem/packet.hh	/^    uint32_t snoopDelay;$/;"	m	class:Packet
snoopDown	./mem/snoop_filter.hh	/^    std::pair<SnoopList, Cycles> snoopDown(Cycles latency) const$/;"	f	class:SnoopFilter
snoopFanout	./mem/coherent_xbar.hh	/^    Stats::Distribution snoopFanout;$/;"	m	class:CoherentXBar
snoopFilter	./mem/coherent_xbar.hh	/^    SnoopFilter *snoopFilter;$/;"	m	class:CoherentXBar
snoopLayers	./mem/coherent_xbar.hh	/^    std::vector<SnoopRespLayer*> snoopLayers;$/;"	m	class:CoherentXBar
snoopPorts	./mem/coherent_xbar.hh	/^    std::vector<QueuedSlavePort*> snoopPorts;$/;"	m	class:CoherentXBar
snoopRespPorts	./mem/coherent_xbar.hh	/^    std::vector<SnoopRespPort*> snoopRespPorts;$/;"	m	class:CoherentXBar
snoopRespQueue	./mem/cache/cache.hh	/^        SnoopRespPacketQueue &snoopRespQueue;$/;"	m	class:Cache::CacheReqPacketQueue
snoopRespQueue	./mem/mport.hh	/^    SnoopRespPacketQueue snoopRespQueue;$/;"	m	class:MessageMasterPort
snoopRespQueue	./mem/qport.hh	/^    SnoopRespPacketQueue &snoopRespQueue;$/;"	m	class:QueuedMasterPort
snoopRespQueue	./mem/ruby/slicc_interface/AbstractController.hh	/^        SnoopRespPacketQueue snoopRespQueue;$/;"	m	class:AbstractController::MemoryPort
snoopRespQueue	./mem/ruby/system/RubyPort.hh	/^        SnoopRespPacketQueue snoopRespQueue;$/;"	m	class:RubyPort::MemMasterPort
snoopRespQueue	./mem/ruby/system/RubyPort.hh	/^        SnoopRespPacketQueue snoopRespQueue;$/;"	m	class:RubyPort::PioMasterPort
snoopResponseLatency	./mem/coherent_xbar.hh	/^    const Cycles snoopResponseLatency;$/;"	m	class:CoherentXBar
snoopSelected	./mem/snoop_filter.hh	/^    std::pair<SnoopList, Cycles> snoopSelected(const SnoopList& slave_ports,$/;"	f	class:SnoopFilter
snoop_filter	./mem/XBar.py	/^    snoop_filter = Param.SnoopFilter(NULL, "Selected snoop filter")$/;"	v	class:CoherentXBar
snoop_filter	./mem/XBar.py	/^    snoop_filter = SnoopFilter(lookup_latency = 0)$/;"	v	class:L2XBar
snoop_response_latency	./mem/XBar.py	/^    snoop_response_latency = 1$/;"	v	class:L2XBar
snoop_response_latency	./mem/XBar.py	/^    snoop_response_latency = 4$/;"	v	class:SystemXBar
snoop_response_latency	./mem/XBar.py	/^    snoop_response_latency = Param.Cycles("Snoop response latency")$/;"	v	class:CoherentXBar
snoops	./mem/coherent_xbar.hh	/^    Stats::Scalar snoops;$/;"	m	class:CoherentXBar
so	./arch/power/miscregs.hh	/^        Bitfield<28> so;$/;"	m	namespace:PowerISA
so	./arch/power/miscregs.hh	/^    Bitfield<31> so;$/;"	m	namespace:PowerISA
sock	./dev/net/tcp_iface.hh	/^    int sock;$/;"	m	class:TCPIface
sockRegistry	./dev/net/tcp_iface.cc	/^vector<int> TCPIface::sockRegistry;$/;"	m	class:TCPIface	file:
sockRegistry	./dev/net/tcp_iface.hh	/^    static std::vector<int> sockRegistry;$/;"	m	class:TCPIface
socket	./dev/net/ethertap.hh	/^    int socket;$/;"	m	class:EtherTap
socket	./kern/tru64/tru64_syscalls.hh	/^        socket = 97,$/;"	e	enum:SystemCalls::__anon102
socketDisconnect	./dev/virtio/fs9p.cc	/^VirtIO9PSocket::socketDisconnect()$/;"	f	class:VirtIO9PSocket
socketId	./cpu/base.hh	/^    uint32_t socketId() const { return _socketId; }$/;"	f	class:BaseCPU
socketId	./cpu/base_dyn_inst.hh	/^    uint32_t socketId() const { return cpu->socketId(); }$/;"	f	class:BaseDynInst
socketId	./cpu/checker/thread_context.hh	/^    uint32_t socketId() const { return actualTC->socketId(); }$/;"	f	class:CheckerThreadContext
socketId	./cpu/o3/thread_context.hh	/^    virtual uint32_t socketId() const { return cpu->socketId(); }$/;"	f	class:O3ThreadContext
socketId	./cpu/thread_context.hh	/^    uint32_t socketId() const { return actualTC->socketId(); }$/;"	f	class:ProxyThreadContext
socketId	./cpu/thread_state.hh	/^    uint32_t socketId() const { return baseCpu->socketId(); }$/;"	f	struct:ThreadState
socket_id	./cpu/BaseCPU.py	/^    socket_id = Param.Unsigned(0, "Physical Socket identifier")$/;"	v
socketpair	./kern/tru64/tru64_syscalls.hh	/^        socketpair = 135,$/;"	e	enum:SystemCalls::__anon102
softInt	./dev/arm/gic_pl390.cc	/^Pl390::softInt(ContextID ctx_id, SWI swi)$/;"	f	class:Pl390
soft_prefetch_mshr_full	./mem/cache/base.hh	/^    Stats::Vector soft_prefetch_mshr_full;$/;"	m	class:BaseCache
softint	./arch/sparc/isa.hh	/^    uint64_t softint;$/;"	m	class:SparcISA::ISA
sort	./arch/isa_parser.py	/^    def sort(self):$/;"	m	class:OperandList
sortInsts	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::sortInsts()$/;"	f	class:DefaultDecode
sortInsts	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::sortInsts()$/;"	f	class:DefaultIEW
sortInsts	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::sortInsts()$/;"	f	class:DefaultRename
sortTime	./mem/dram_ctrl.hh	/^    static bool sortTime(const Data::MemCommand& m1,$/;"	f	class:DRAMCtrl
sortValue	./dev/pci/types.hh	/^    constexpr uint32_t sortValue() const {$/;"	f	struct:PciBusAddr
sorted	./python/m5/util/sorteddict.py	/^    sorted = property(_get_sorted, _set_sorted)$/;"	v	class:SortedDict
sortgroups	./python/m5/util/jobfile.py	/^    def sortgroups(self, groups):$/;"	m	class:Configuration
source	./arch/arm/faults.hh	/^    uint8_t source;$/;"	m	class:ArmISA::AbortFault
source	./dev/sparc/iob.hh	/^        int source;$/;"	m	struct:Iob::IntBusy
source	./dev/x86/X86IntPin.py	/^    source = Param.X86IntSourcePin("Pin driving this line")$/;"	v	class:X86IntLine
source	./dev/x86/intdev.hh	/^    IntSourcePin *source;$/;"	m	class:X86ISA::IntLine
source	./mem/cache/mshr.hh	/^        const Source source;  \/\/!< Request from cpu, memory, or prefetcher?$/;"	m	class:MSHR::Target
sourceBusID	./arch/x86/bios/intelmp.hh	/^    uint8_t sourceBusID;$/;"	m	class:X86ISA::IntelMP::IntAssignment
sourceBusIRQ	./arch/x86/bios/intelmp.hh	/^    uint8_t sourceBusIRQ;$/;"	m	class:X86ISA::IntelMP::IntAssignment
source_bus_id	./arch/x86/bios/IntelMP.py	/^    source_bus_id = Param.UInt8(0,$/;"	v	class:X86IntelMPIOIntAssignment
source_bus_id	./arch/x86/bios/IntelMP.py	/^    source_bus_id = Param.UInt8(0,$/;"	v	class:X86IntelMPLocalIntAssignment
source_bus_irq	./arch/x86/bios/IntelMP.py	/^    source_bus_irq = Param.UInt8(0,$/;"	v	class:X86IntelMPIOIntAssignment
source_bus_irq	./arch/x86/bios/IntelMP.py	/^    source_bus_irq = Param.UInt8(0,$/;"	v	class:X86IntelMPLocalIntAssignment
southBridge	./dev/x86/pc.hh	/^    SouthBridge *southBridge;$/;"	m	class:Pc
south_bridge	./dev/x86/Pc.py	/^    south_bridge = SouthBridge()$/;"	v	class:Pc
sp	./arch/arm/miscregs.hh	/^        Bitfield<0> sp;         \/\/ AArch64$/;"	m	namespace:ArmISA
sp	./arch/mips/pra_constants.hh	/^    Bitfield<4>  sp;$/;"	m	namespace:MipsISA
sp	./kern/tru64/tru64.hh	/^            uint64_t sp;        \/\/!< sp$/;"	m	struct:Tru64::nxm_thread_attr::__anon106
sp810_fake	./dev/arm/RealView.py	/^    sp810_fake     = AmbaFake(pio_addr=0x1C020000, ignore_access=True)$/;"	v	class:VExpress_EMM
sp810_fake	./dev/arm/RealView.py	/^    sp810_fake    = AmbaFake(pio_addr=0x10001000, ignore_access=True)$/;"	v	class:RealViewEB
sp810_fake	./dev/arm/RealView.py	/^    sp810_fake    = AmbaFake(pio_addr=0x10001000, ignore_access=True)$/;"	v	class:RealViewPBX
spX	./arch/arm/types.hh	/^        Bitfield<0> spX;$/;"	m	namespace:ArmISA
space	./kern/tru64/tru64.hh	/^        int64_t space[2];                  \/\/!< future growth$/;"	m	struct:Tru64::nxm_shared
spawnRecvThread	./dev/net/dist_iface.cc	/^DistIface::spawnRecvThread(const Event *recv_done, Tick link_delay)$/;"	f	class:DistIface
speaker	./dev/x86/SouthBridge.py	/^    speaker = Param.PcSpeaker(_speaker, "PC speaker")$/;"	v	class:SouthBridge
speaker	./dev/x86/south_bridge.hh	/^    X86ISA::Speaker * speaker;$/;"	m	class:SouthBridge
speaker	./dev/x86/speaker.hh	/^        Bitfield<1> speaker;$/;"	m	class:X86ISA::Speaker
specRev	./arch/x86/bios/intelmp.hh	/^    uint8_t specRev;$/;"	m	class:X86ISA::IntelMP::ConfigTable
specRev	./arch/x86/bios/intelmp.hh	/^    uint8_t specRev;$/;"	m	class:X86ISA::IntelMP::FloatingPointer
spec_rev	./arch/x86/bios/IntelMP.py	/^    spec_rev = Param.UInt8(4, 'minor revision of the MP spec supported')$/;"	v	class:X86IntelMPConfigTable
spec_rev	./arch/x86/bios/IntelMP.py	/^    spec_rev = Param.UInt8(4, 'minor revision of the MP spec supported')$/;"	v	class:X86IntelMPFloatingPointer
speculative	./arch/sparc/miscregs.hh	/^    const static int speculative = 0x04;$/;"	m	struct:SparcISA::STS
speed	./dev/net/Ethernet.py	/^    speed = Param.NetworkBandwidth('100Mbps', "bus speed in bits per second")$/;"	v	class:EtherBus
speed	./dev/net/Ethernet.py	/^    speed = Param.NetworkBandwidth('1Gbps', "link speed")$/;"	v	class:DistEtherLink
speed	./dev/net/Ethernet.py	/^    speed = Param.NetworkBandwidth('1Gbps', "link speed")$/;"	v	class:EtherLink
sph	./dev/net/i8254xGBe_defs.hh	/^            uint16_t sph:1;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon8
spi_base	./dev/arm/Gic.py	/^    spi_base = Param.UInt32(0x0, "Frame SPI base number");$/;"	v	class:Gicv2mFrame
spi_base	./dev/arm/gic_v2m.hh	/^    const unsigned int  spi_base;$/;"	m	class:Gicv2mFrame
spi_len	./dev/arm/Gic.py	/^    spi_len = Param.UInt32(0x0, "Frame SPI total number");$/;"	v	class:Gicv2mFrame
spi_len	./dev/arm/gic_v2m.hh	/^    const unsigned int  spi_len;$/;"	m	class:Gicv2mFrame
spillHandler32	./arch/sparc/handlers.hh	/^const MachInst spillHandler32[numSpillInsts] =$/;"	m	namespace:SparcISA
spillHandler64	./arch/sparc/handlers.hh	/^const MachInst spillHandler64[numSpillInsts] =$/;"	m	namespace:SparcISA
spillStart	./arch/sparc/process.hh	/^    Addr fillStart, spillStart;$/;"	m	class:SparcLiveProcess
splice	./python/m5/params.py	/^    def splice(self, new_master_peer, new_slave_peer):$/;"	m	class:PortRef
split	./arch/isa_parser.py	/^    def split(self, sec, write=False):$/;"	m	class:ISAParser
splitCount	./dev/net/i8254xGBe.hh	/^        int splitCount;$/;"	m	class:IGbE::RxDescCache
splitOnVaddr	./mem/request.hh	/^    void splitOnVaddr(Addr split_addr, RequestPtr &req1, RequestPtr &req2)$/;"	f	class:Request
splitRequest	./cpu/base_dyn_inst.hh	/^BaseDynInst<Impl>::splitRequest(RequestPtr req, RequestPtr &sreqLow,$/;"	f	class:BaseDynInst
split_first	./base/str.cc	/^split_first(const string &s, string &lhs, string &rhs, char c)$/;"	f
split_last	./base/str.cc	/^split_last(const string &s, string &lhs, string &rhs, char c)$/;"	f
splitter	./python/m5/options.py	/^class splitter(object):$/;"	c
spm	./arch/x86/insts/microfpop.hh	/^        const int8_t spm;$/;"	m	class:X86ISA::FpOp
sport	./base/inet.hh	/^    uint16_t sport() const { return ntohs(th_sport); }$/;"	f	struct:Net::TcpHdr
sport	./base/inet.hh	/^    uint16_t sport() const { return ntohs(uh_sport); }$/;"	f	struct:Net::UdpHdr
spr	./arch/power/types.hh	/^    Bitfield<20, 11> spr;$/;"	m	namespace:PowerISA
spsrWriteByInstr	./arch/arm/insts/static_inst.hh	/^    spsrWriteByInstr(uint32_t spsr, uint32_t val,$/;"	f	class:ArmISA::ArmStaticInst
spx	./arch/arm/remote_gdb.hh	/^          uint64_t spx;$/;"	m	struct:ArmISA::RemoteGDB::AArch64GdbRegCache::__anon68
sqEmpty	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::sqEmpty() const$/;"	f	class:LSQ
sqEmpty	./cpu/o3/lsq_unit.hh	/^    bool sqEmpty() const { return stores == 0; }$/;"	f	class:LSQUnit
sqEntries	./cpu/o3/rename.hh	/^        unsigned sqEntries;$/;"	m	struct:DefaultRename::FreeEntries
sqFull	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::sqFull()$/;"	f	class:LSQ
sqFull	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::sqFull(ThreadID tid)$/;"	f	class:LSQ
sqFull	./cpu/o3/lsq_unit.hh	/^    bool sqFull() { return stores >= (SQEntries - 1); }$/;"	f	class:LSQUnit
sqIdx	./cpu/base_dyn_inst.hh	/^    int16_t sqIdx;$/;"	m	class:BaseDynInst
squareRoot	./arch/arm/miscregs.hh	/^        Bitfield<23, 20> squareRoot;$/;"	m	namespace:ArmISA
squares	./base/statistics.hh	/^    Counter squares;$/;"	m	class:Stats::AvgSampleStor
squares	./base/statistics.hh	/^    Counter squares;$/;"	m	class:Stats::DistStor
squares	./base/statistics.hh	/^    Counter squares;$/;"	m	class:Stats::HistStor
squares	./base/statistics.hh	/^    Counter squares;$/;"	m	class:Stats::SampleStor
squares	./base/stats/info.hh	/^    Counter squares;$/;"	m	struct:Stats::DistData
squash	./cpu/o3/comm.hh	/^        bool squash; \/\/ *F, D, R, I$/;"	m	struct:TimeBufStruct::commitComm
squash	./cpu/o3/comm.hh	/^        bool squash;$/;"	m	struct:TimeBufStruct::decodeComm
squash	./cpu/o3/comm.hh	/^    bool squash[Impl::MaxThreads];$/;"	m	struct:DefaultIEWDefaultCommit
squash	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::squash(DynInstPtr &inst, ThreadID tid)$/;"	f	class:DefaultDecode
squash	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::squash(ThreadID tid)$/;"	f	class:DefaultDecode
squash	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::squash(const TheISA::PCState &newPC,$/;"	f	class:DefaultFetch
squash	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::squash(ThreadID tid)$/;"	f	class:DefaultIEW
squash	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::squash(ThreadID tid)$/;"	f	class:InstructionQueue
squash	./cpu/o3/lsq.hh	/^    void squash(const InstSeqNum &squashed_num, ThreadID tid)$/;"	f	class:LSQ
squash	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::squash(const InstSeqNum &squashed_num)$/;"	f	class:LSQUnit
squash	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::squash(const InstSeqNum &squashed_num,$/;"	f	class:MemDepUnit
squash	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::squash(const InstSeqNum &squash_seq_num, ThreadID tid)$/;"	f	class:DefaultRename
squash	./cpu/o3/rob_impl.hh	/^ROB<Impl>::squash(InstSeqNum squash_num, ThreadID tid)$/;"	f	class:ROB
squash	./cpu/o3/store_set.cc	/^StoreSet::squash(InstSeqNum squashed_num, ThreadID tid)$/;"	f	class:StoreSet
squash	./cpu/pred/2bit_local.hh	/^    void squash(void *bp_history)$/;"	f	class:LocalBP
squash	./cpu/pred/bi_mode.cc	/^BiModeBP::squash(void *bpHistory)$/;"	f	class:BiModeBP
squash	./cpu/pred/bpred_unit.cc	/^BPredUnit::squash(const InstSeqNum &squashed_sn, ThreadID tid)$/;"	f	class:BPredUnit
squash	./cpu/pred/bpred_unit.cc	/^BPredUnit::squash(const InstSeqNum &squashed_sn,$/;"	f	class:BPredUnit
squash	./cpu/pred/tournament.cc	/^TournamentBP::squash(void *bp_history)$/;"	f	class:TournamentBP
squash	./sim/eventq.hh	/^    void squash() { flags.set(Squashed); }$/;"	f	class:Event
squashAfter	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::squashAfter(ThreadID tid, DynInstPtr &head_inst)$/;"	f	class:DefaultCommit
squashAfterDelaySlot	./cpu/o3/decode.hh	/^    bool squashAfterDelaySlot[Impl::MaxThreads];$/;"	m	class:DefaultDecode
squashAfterInst	./cpu/o3/commit.hh	/^    DynInstPtr squashAfterInst[Impl::MaxThreads];$/;"	m	class:DefaultCommit
squashAll	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::squashAll(ThreadID tid)$/;"	f	class:DefaultCommit
squashDueToBranch	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::squashDueToBranch(DynInstPtr &inst, ThreadID tid)$/;"	f	class:DefaultIEW
squashDueToMemOrder	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::squashDueToMemOrder(DynInstPtr &inst, ThreadID tid)$/;"	f	class:DefaultIEW
squashFromDecode	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::squashFromDecode(const TheISA::PCState &newPC,$/;"	f	class:DefaultFetch
squashFromSquashAfter	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::squashFromSquashAfter(ThreadID tid)$/;"	f	class:DefaultCommit
squashFromTC	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::squashFromTC(ThreadID tid)$/;"	f	class:DefaultCommit
squashFromTC	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::squashFromTC(ThreadID tid)$/;"	f	class:FullO3CPU
squashFromTrap	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::squashFromTrap(ThreadID tid)$/;"	f	class:DefaultCommit
squashInst	./cpu/o3/comm.hh	/^        DynInstPtr squashInst; \/\/ *F$/;"	m	struct:TimeBufStruct::commitComm
squashInst	./cpu/o3/comm.hh	/^        DynInstPtr squashInst;$/;"	m	struct:TimeBufStruct::decodeComm
squashInst	./cpu/o3/decode.hh	/^    DynInstPtr squashInst[Impl::MaxThreads];$/;"	m	class:DefaultDecode
squashInstIt	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::squashInstIt(const ListIt &instIt, ThreadID tid)$/;"	f	class:FullO3CPU
squashIt	./cpu/o3/rob.hh	/^    InstIt squashIt[Impl::MaxThreads];$/;"	m	class:ROB
squashWidth	./cpu/o3/O3CPU.py	/^    squashWidth = Param.Unsigned(8, "Squash width")$/;"	v	class:DerivO3CPU
squashWidth	./cpu/o3/rob.hh	/^    unsigned squashWidth;$/;"	m	class:ROB
squashed	./arch/generic/tlb.hh	/^        virtual bool squashed() const { return false; }$/;"	f	class:BaseTLB::Translation
squashed	./cpu/o3/mem_dep_unit.hh	/^        bool squashed;$/;"	m	class:MemDepUnit::MemDepEntry
squashed	./cpu/translation.hh	/^    squashed() const$/;"	f	class:DataTranslation
squashed	./sim/eventq.hh	/^    bool squashed() const { return flags.isSet(Squashed); }$/;"	f	class:Event
squashedSeqNum	./cpu/o3/comm.hh	/^    InstSeqNum squashedSeqNum[Impl::MaxThreads];$/;"	m	struct:DefaultIEWDefaultCommit
squashedSeqNum	./cpu/o3/inst_queue.hh	/^    InstSeqNum squashedSeqNum[Impl::MaxThreads];$/;"	m	class:InstructionQueue
squashedSeqNum	./cpu/o3/rob.hh	/^    InstSeqNum squashedSeqNum[Impl::MaxThreads];$/;"	m	class:ROB
sqwe	./dev/mc146818.hh	/^        Bitfield<3> sqwe;      \/\/\/ 1 = output sqare wave at SQW pin$/;"	m	class:MC146818
sr	./arch/mips/pra_constants.hh	/^    Bitfield<20>     sr;$/;"	m	namespace:MipsISA
sr	./arch/mips/remote_gdb.hh	/^            uint32_t sr;$/;"	m	struct:MipsISA::RemoteGDB::MipsGdbRegCache::__anon83
src	./base/inet.hh	/^    const EthAddr &src() const { return *(EthAddr *)&eth_src; }$/;"	f	struct:Net::EthHdr
src	./base/inet.hh	/^    const uint8_t* src() const { return ip6_src.data; }$/;"	f	struct:Net::Ip6Hdr
src	./base/inet.hh	/^    uint32_t src() const { return ntohl(ip_src); }$/;"	f	struct:Net::IpHdr
src	./dev/pci/copy_engine_defs.hh	/^    Addr src;$/;"	m	struct:CopyEngineReg::DmaDesc
src1	./arch/x86/insts/microfpop.hh	/^        const RegIndex src1;$/;"	m	class:X86ISA::FpOp
src1	./arch/x86/insts/micromediaop.hh	/^        const RegIndex src1;$/;"	m	class:X86ISA::MediaOpBase
src1	./arch/x86/insts/microregop.hh	/^        const RegIndex src1;$/;"	m	class:X86ISA::RegOpBase
src2	./arch/x86/insts/microfpop.hh	/^        const RegIndex src2;$/;"	m	class:X86ISA::FpOp
src2	./arch/x86/insts/micromediaop.hh	/^        const RegIndex src2;$/;"	m	class:X86ISA::MediaOpReg
src2	./arch/x86/insts/microregop.hh	/^        const RegIndex src2;$/;"	m	class:X86ISA::RegOp
srcClockChildren	./sim/voltage_domain.hh	/^    SrcClockChildren srcClockChildren;$/;"	m	class:VoltageDomain
srcEncoded	./arch/arm/faults.hh	/^    uint8_t srcEncoded;$/;"	m	class:ArmISA::AbortFault
srcMasterId	./mem/cache/blk.hh	/^    int srcMasterId;$/;"	m	class:CacheBlk
srcRegIdx	./cpu/base_dyn_inst.hh	/^    RegIndex srcRegIdx(int i) const { return staticInst->srcRegIdx(i); }$/;"	f	class:BaseDynInst
srcRegIdx	./cpu/static_inst.hh	/^    RegIndex srcRegIdx(int i)  const { return _srcRegIdx[i]; }$/;"	f	class:StaticInst
srcRegsRelativeLats	./cpu/minor/MinorCPU.py	/^        srcRegsRelativeLats=[0])]$/;"	v	class:MinorDefaultIntMulFU
srcRegsRelativeLats	./cpu/minor/MinorCPU.py	/^        srcRegsRelativeLats=[2])]$/;"	v	class:MinorDefaultFloatSimdFU
srcRegsRelativeLats	./cpu/minor/MinorCPU.py	/^        srcRegsRelativeLats=[2])]$/;"	v	class:MinorDefaultIntFU
srcRegsRelativeLats	./cpu/minor/MinorCPU.py	/^    srcRegsRelativeLats = VectorParam.Cycles("the maximum number of cycles"$/;"	v	class:MinorFUTiming
srcRegsRelativeLats	./cpu/minor/func_unit.hh	/^    std::vector<Cycles> srcRegsRelativeLats;$/;"	m	class:MinorFUTiming
srcSize	./arch/x86/insts/micromediaop.hh	/^        const uint8_t srcSize;$/;"	m	class:X86ISA::MediaOpBase
src_delay	./mem/ruby/network/garnet/fixed-pipeline/flit_d.hh	/^    Cycles src_delay;$/;"	m	class:flit_d
src_delay	./mem/ruby/network/garnet/flexible-pipeline/flit.hh	/^    Cycles src_delay;$/;"	m	class:flit
sreqHigh	./cpu/o3/lsq_unit.hh	/^        RequestPtr sreqHigh;$/;"	m	struct:LSQUnit::SQEntry
sreqHigh	./cpu/translation.hh	/^    RequestPtr sreqHigh;$/;"	m	class:WholeTranslationState
sreqLow	./cpu/o3/lsq_unit.hh	/^        RequestPtr sreqLow;$/;"	m	struct:LSQUnit::SQEntry
sreqLow	./cpu/translation.hh	/^    RequestPtr sreqLow;$/;"	m	class:WholeTranslationState
srr	./dev/net/ns_gige.hh	/^    uint32_t    srr;$/;"	m	struct:dp_regs
srrctl	./dev/net/i8254xGBe_defs.hh	/^    SRRCTL srrctl;$/;"	m	struct:iGbReg::Regs
srt	./arch/arm/faults.hh	/^    uint8_t srt;$/;"	m	class:ArmISA::DataAbort
ss	./arch/arm/miscregs.hh	/^        Bitfield<21> ss;        \/\/ AArch64$/;"	m	namespace:ArmISA
ss	./arch/mips/pra_constants.hh	/^    Bitfield<11, 8>  ss;$/;"	m	namespace:MipsISA
ss	./arch/x86/remote_gdb.hh	/^          uint32_t ss;$/;"	m	struct:X86ISA::RemoteGDB::AMD64GdbRegCache::__anon58
ss	./arch/x86/remote_gdb.hh	/^          uint32_t ss;$/;"	m	struct:X86ISA::RemoteGDB::X86GdbRegCache::__anon57
sse	./arch/arm/faults.hh	/^    uint8_t sse;$/;"	m	class:ArmISA::DataAbort
ssp_fake	./dev/arm/RealView.py	/^    ssp_fake      = AmbaFake(pio_addr=0x1000d000)$/;"	v	class:RealViewEB
ssp_fake	./dev/arm/RealView.py	/^    ssp_fake      = AmbaFake(pio_addr=0x1000d000)$/;"	v	class:RealViewPBX
sst	./arch/mips/dt_constants.hh	/^    Bitfield<8>      sst;$/;"	m	namespace:MipsISA
sstk	./kern/tru64/tru64_syscalls.hh	/^        sstk = 70,$/;"	e	enum:SystemCalls::__anon102
ssv0	./arch/mips/pra_constants.hh	/^    Bitfield<3,  0>  ssv0;$/;"	m	namespace:MipsISA
ssv1	./arch/mips/pra_constants.hh	/^    Bitfield<7,  4>  ssv1;$/;"	m	namespace:MipsISA
ssv2	./arch/mips/pra_constants.hh	/^    Bitfield<11, 8>  ssv2;$/;"	m	namespace:MipsISA
ssv3	./arch/mips/pra_constants.hh	/^    Bitfield<15, 12> ssv3;$/;"	m	namespace:MipsISA
ssv4	./arch/mips/pra_constants.hh	/^    Bitfield<19, 16> ssv4;$/;"	m	namespace:MipsISA
ssv5	./arch/mips/pra_constants.hh	/^    Bitfield<23, 20> ssv5;$/;"	m	namespace:MipsISA
ssv6	./arch/mips/pra_constants.hh	/^    Bitfield<27, 24> ssv6;$/;"	m	namespace:MipsISA
ssv7	./arch/mips/pra_constants.hh	/^    Bitfield<31, 28> ssv7;$/;"	m	namespace:MipsISA
st	./arch/arm/miscregs.hh	/^        Bitfield<11> st;  \/\/ AArch64$/;"	m	namespace:ArmISA
st	./base/loader/coff_sym.h	/^    unsigned st : 6;    \/* symbol type *\/$/;"	m	struct:ecoff_sym
stBlock	./base/loader/coff_symconst.h	136;"	d
stCache	./base/cp_annotate.hh	/^    StCache stCache;$/;"	m	class:CPA
stConstant	./base/loader/coff_symconst.h	144;"	d
stEnd	./base/loader/coff_symconst.h	137;"	d
stEnum	./base/loader/coff_symconst.h	149;"	d
stExpr	./base/loader/coff_symconst.h	154;"	d
stFile	./base/loader/coff_symconst.h	140;"	d
stForward	./base/loader/coff_symconst.h	142;"	d
stGlobal	./base/loader/coff_symconst.h	130;"	d
stIndirect	./base/loader/coff_symconst.h	150;"	d
stLabel	./base/loader/coff_symconst.h	134;"	d
stLocal	./base/loader/coff_symconst.h	133;"	d
stMax	./base/loader/coff_symconst.h	156;"	d
stMember	./base/loader/coff_symconst.h	138;"	d
stNil	./base/loader/coff_symconst.h	129;"	d
stNumber	./base/loader/coff_symconst.h	153;"	d
stParam	./base/loader/coff_symconst.h	132;"	d
stProc	./base/loader/coff_symconst.h	135;"	d
stRegReloc	./base/loader/coff_symconst.h	141;"	d
stStaParam	./base/loader/coff_symconst.h	145;"	d
stStatic	./base/loader/coff_symconst.h	131;"	d
stStaticProc	./base/loader/coff_symconst.h	143;"	d
stStr	./base/loader/coff_symconst.h	152;"	d
stStruct	./base/loader/coff_symconst.h	147;"	d
stType	./base/loader/coff_symconst.h	155;"	d
stTypedef	./base/loader/coff_symconst.h	139;"	d
stUnion	./base/loader/coff_symconst.h	148;"	d
st_atimeX	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_atimeX;$/;"	m	struct:ArmFreebsd32::__anon69
st_atimeX	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_atimeX;$/;"	m	struct:ArmFreebsd32::__anon70
st_atimeX	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_atimeX;$/;"	m	struct:ArmFreebsd64::__anon71
st_atimeX	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_atimeX;$/;"	m	struct:ArmFreebsd64::__anon72
st_atimeX	./arch/arm/linux/linux.hh	/^        uint32_t  st_atimeX;$/;"	m	struct:ArmLinux32::__anon75
st_atimeX	./arch/arm/linux/linux.hh	/^        uint32_t st_atimeX;$/;"	m	struct:ArmLinux32::__anon74
st_atimeX	./arch/arm/linux/linux.hh	/^        uint64_t st_atimeX;$/;"	m	struct:ArmLinux64::__anon77
st_atimeX	./arch/arm/linux/linux.hh	/^        uint64_t st_atimeX;$/;"	m	struct:ArmLinux64::__anon78
st_atimeX	./arch/power/linux/linux.hh	/^        uint32_t st_atimeX;$/;"	m	struct:PowerLinux::__anon54
st_atimeX	./arch/power/linux/linux.hh	/^        uint32_t st_atimeX;$/;"	m	struct:PowerLinux::__anon55
st_atimeX	./arch/sparc/linux/linux.hh	/^        int64_t st_atimeX;$/;"	m	struct:SparcLinux::__anon44
st_atimeX	./arch/sparc/linux/linux.hh	/^        uint64_t st_atimeX;$/;"	m	struct:Sparc32Linux::__anon46
st_atimeX	./arch/x86/linux/linux.hh	/^        uint32_t st_atimeX;$/;"	m	struct:X86Linux32::__anon62
st_atimeX	./arch/x86/linux/linux.hh	/^        uint64_t st_atimeX;$/;"	m	struct:X86Linux64::__anon59
st_atimeX	./kern/linux/linux.hh	/^        uint64_t        st_atimeX;      \/\/!< time of last access$/;"	m	struct:Linux::__anon97
st_atimeX	./kern/linux/linux.hh	/^        uint64_t        st_atimeX;$/;"	m	struct:Linux::__anon98
st_atimeX	./kern/solaris/solaris.hh	/^        int64_t st_atimeX, st_mtimeX, st_ctimeX;$/;"	m	struct:Solaris::__anon108
st_atimeX	./kern/solaris/solaris.hh	/^        int64_t st_atimeX, st_mtimeX, st_ctimeX;$/;"	m	struct:Solaris::__anon109
st_atimeX	./kern/tru64/tru64.hh	/^        time_t  st_atimeX;              \/\/!< st_atime$/;"	m	struct:Tru64_F64::F64_stat
st_atimeX	./kern/tru64/tru64.hh	/^        time_t  st_atimeX;$/;"	m	struct:Tru64_PreF64::pre_F64_stat
st_atime_nsec	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_atime_nsec;$/;"	m	struct:ArmFreebsd32::__anon69
st_atime_nsec	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_atime_nsec;$/;"	m	struct:ArmFreebsd32::__anon70
st_atime_nsec	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_atime_nsec;$/;"	m	struct:ArmFreebsd64::__anon71
st_atime_nsec	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_atime_nsec;$/;"	m	struct:ArmFreebsd64::__anon72
st_atime_nsec	./arch/arm/linux/linux.hh	/^        uint32_t  st_atime_nsec;$/;"	m	struct:ArmLinux32::__anon75
st_atime_nsec	./arch/arm/linux/linux.hh	/^        uint32_t st_atime_nsec;$/;"	m	struct:ArmLinux32::__anon74
st_atime_nsec	./arch/arm/linux/linux.hh	/^        uint64_t st_atime_nsec;$/;"	m	struct:ArmLinux64::__anon77
st_atime_nsec	./arch/arm/linux/linux.hh	/^        uint64_t st_atime_nsec;$/;"	m	struct:ArmLinux64::__anon78
st_atime_nsec	./arch/power/linux/linux.hh	/^        uint32_t st_atime_nsec;$/;"	m	struct:PowerLinux::__anon54
st_atime_nsec	./arch/power/linux/linux.hh	/^        uint32_t st_atime_nsec;$/;"	m	struct:PowerLinux::__anon55
st_atime_nsec	./arch/sparc/linux/linux.hh	/^        uint64_t st_atime_nsec;$/;"	m	struct:Sparc32Linux::__anon46
st_atime_nsec	./arch/x86/linux/linux.hh	/^        uint32_t st_atime_nsec;$/;"	m	struct:X86Linux32::__anon62
st_atime_nsec	./arch/x86/linux/linux.hh	/^        uint64_t st_atime_nsec;$/;"	m	struct:X86Linux64::__anon59
st_atime_nsec	./kern/linux/linux.hh	/^        uint64_t        st_atime_nsec;$/;"	m	struct:Linux::__anon98
st_atime_reserved	./kern/tru64/tru64.hh	/^        int32_t st_atime_reserved;      \/\/!< st_atime_reserved$/;"	m	struct:Tru64_F64::F64_stat
st_birthtim	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_birthtim;$/;"	m	struct:ArmFreebsd32::__anon69
st_birthtim	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_birthtim;$/;"	m	struct:ArmFreebsd32::__anon70
st_birthtim	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_birthtim;$/;"	m	struct:ArmFreebsd64::__anon71
st_birthtim	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_birthtim;$/;"	m	struct:ArmFreebsd64::__anon72
st_birthtimX	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_birthtimX;$/;"	m	struct:ArmFreebsd32::__anon69
st_birthtimX	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_birthtimX;$/;"	m	struct:ArmFreebsd32::__anon70
st_birthtimX	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_birthtimX;$/;"	m	struct:ArmFreebsd64::__anon71
st_birthtimX	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_birthtimX;$/;"	m	struct:ArmFreebsd64::__anon72
st_blksize	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_blksize;$/;"	m	struct:ArmFreebsd32::__anon69
st_blksize	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_blksize;$/;"	m	struct:ArmFreebsd32::__anon70
st_blksize	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_blksize;$/;"	m	struct:ArmFreebsd64::__anon71
st_blksize	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_blksize;$/;"	m	struct:ArmFreebsd64::__anon72
st_blksize	./arch/arm/linux/linux.hh	/^        uint32_t  st_blksize;$/;"	m	struct:ArmLinux32::__anon75
st_blksize	./arch/arm/linux/linux.hh	/^        uint32_t st_blksize;$/;"	m	struct:ArmLinux32::__anon74
st_blksize	./arch/arm/linux/linux.hh	/^        uint64_t st_blksize;$/;"	m	struct:ArmLinux64::__anon77
st_blksize	./arch/arm/linux/linux.hh	/^        uint64_t st_blksize;$/;"	m	struct:ArmLinux64::__anon78
st_blksize	./arch/power/linux/linux.hh	/^        uint32_t st_blksize;$/;"	m	struct:PowerLinux::__anon54
st_blksize	./arch/power/linux/linux.hh	/^        uint32_t st_blksize;$/;"	m	struct:PowerLinux::__anon55
st_blksize	./arch/sparc/linux/linux.hh	/^        int32_t st_blksize;$/;"	m	struct:Sparc32Linux::__anon46
st_blksize	./arch/sparc/linux/linux.hh	/^        int64_t st_blksize;$/;"	m	struct:SparcLinux::__anon44
st_blksize	./arch/x86/linux/linux.hh	/^        int64_t st_blksize;$/;"	m	struct:X86Linux64::__anon59
st_blksize	./arch/x86/linux/linux.hh	/^        uint32_t st_blksize;$/;"	m	struct:X86Linux32::__anon62
st_blksize	./kern/linux/linux.hh	/^        uint32_t        st_blksize;     \/\/!< optimal I\/O block size$/;"	m	struct:Linux::__anon97
st_blksize	./kern/linux/linux.hh	/^        uint32_t        st_blksize;$/;"	m	struct:Linux::__anon98
st_blksize	./kern/solaris/solaris.hh	/^        int32_t         st_blksize;     \/\/!< optimal I\/O block size$/;"	m	struct:Solaris::__anon108
st_blksize	./kern/solaris/solaris.hh	/^        int32_t         st_blksize;     \/\/!< optimal I\/O block size$/;"	m	struct:Solaris::__anon109
st_blksize	./kern/tru64/tru64.hh	/^        uint32_t st_blksize;$/;"	m	struct:Tru64_PreF64::pre_F64_stat
st_blksize	./kern/tru64/tru64.hh	/^        uint64_t        st_blksize;     \/\/!< st_blksize$/;"	m	struct:Tru64_F64::F64_stat
st_blocks	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_blocks;$/;"	m	struct:ArmFreebsd32::__anon69
st_blocks	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_blocks;$/;"	m	struct:ArmFreebsd32::__anon70
st_blocks	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_blocks;$/;"	m	struct:ArmFreebsd64::__anon71
st_blocks	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_blocks;$/;"	m	struct:ArmFreebsd64::__anon72
st_blocks	./arch/arm/linux/linux.hh	/^        uint32_t st_blocks;$/;"	m	struct:ArmLinux32::__anon74
st_blocks	./arch/arm/linux/linux.hh	/^        uint64_t  __attribute__ ((aligned (8))) st_blocks;$/;"	m	struct:ArmLinux32::__anon75
st_blocks	./arch/arm/linux/linux.hh	/^        uint64_t st_blocks;$/;"	m	struct:ArmLinux64::__anon77
st_blocks	./arch/arm/linux/linux.hh	/^        uint64_t st_blocks;$/;"	m	struct:ArmLinux64::__anon78
st_blocks	./arch/power/linux/linux.hh	/^        uint32_t st_blocks;$/;"	m	struct:PowerLinux::__anon54
st_blocks	./arch/power/linux/linux.hh	/^        uint64_t st_blocks;$/;"	m	struct:PowerLinux::__anon55
st_blocks	./arch/sparc/linux/linux.hh	/^        int64_t st_blocks;$/;"	m	struct:Sparc32Linux::__anon46
st_blocks	./arch/sparc/linux/linux.hh	/^        int64_t st_blocks;$/;"	m	struct:SparcLinux::__anon44
st_blocks	./arch/x86/linux/linux.hh	/^        int64_t st_blocks;$/;"	m	struct:X86Linux64::__anon59
st_blocks	./arch/x86/linux/linux.hh	/^        uint64_t st_blocks;$/;"	m	struct:X86Linux32::__anon62
st_blocks	./kern/linux/linux.hh	/^        int32_t         st_blocks;      \/\/!< number of blocks allocated$/;"	m	struct:Linux::__anon97
st_blocks	./kern/linux/linux.hh	/^        uint64_t        st_blocks;$/;"	m	struct:Linux::__anon98
st_blocks	./kern/solaris/solaris.hh	/^        int64_t         st_blocks;      \/\/!< number of blocks allocated$/;"	m	struct:Solaris::__anon108
st_blocks	./kern/solaris/solaris.hh	/^        int64_t         st_blocks;      \/\/!< number of blocks allocated$/;"	m	struct:Solaris::__anon109
st_blocks	./kern/tru64/tru64.hh	/^        int32_t st_blocks;$/;"	m	struct:Tru64_PreF64::pre_F64_stat
st_blocks	./kern/tru64/tru64.hh	/^        uint64_t        st_blocks;      \/\/!< st_blocks$/;"	m	struct:Tru64_F64::F64_stat
st_ctimeX	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_ctimeX;$/;"	m	struct:ArmFreebsd32::__anon69
st_ctimeX	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_ctimeX;$/;"	m	struct:ArmFreebsd32::__anon70
st_ctimeX	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_ctimeX;$/;"	m	struct:ArmFreebsd64::__anon71
st_ctimeX	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_ctimeX;$/;"	m	struct:ArmFreebsd64::__anon72
st_ctimeX	./arch/arm/linux/linux.hh	/^        uint32_t  st_ctimeX;$/;"	m	struct:ArmLinux32::__anon75
st_ctimeX	./arch/arm/linux/linux.hh	/^        uint32_t st_ctimeX;$/;"	m	struct:ArmLinux32::__anon74
st_ctimeX	./arch/arm/linux/linux.hh	/^        uint64_t st_ctimeX;$/;"	m	struct:ArmLinux64::__anon77
st_ctimeX	./arch/arm/linux/linux.hh	/^        uint64_t st_ctimeX;$/;"	m	struct:ArmLinux64::__anon78
st_ctimeX	./arch/power/linux/linux.hh	/^        uint32_t st_ctimeX;$/;"	m	struct:PowerLinux::__anon54
st_ctimeX	./arch/power/linux/linux.hh	/^        uint32_t st_ctimeX;$/;"	m	struct:PowerLinux::__anon55
st_ctimeX	./arch/sparc/linux/linux.hh	/^        int64_t st_ctimeX;$/;"	m	struct:SparcLinux::__anon44
st_ctimeX	./arch/sparc/linux/linux.hh	/^        uint64_t st_ctimeX;$/;"	m	struct:Sparc32Linux::__anon46
st_ctimeX	./arch/x86/linux/linux.hh	/^        uint32_t st_ctimeX;$/;"	m	struct:X86Linux32::__anon62
st_ctimeX	./arch/x86/linux/linux.hh	/^        uint64_t st_ctimeX;$/;"	m	struct:X86Linux64::__anon59
st_ctimeX	./kern/linux/linux.hh	/^        uint64_t        st_ctimeX;      \/\/!< time of last status change$/;"	m	struct:Linux::__anon97
st_ctimeX	./kern/linux/linux.hh	/^        uint64_t        st_ctimeX;$/;"	m	struct:Linux::__anon98
st_ctimeX	./kern/solaris/solaris.hh	/^        int64_t st_atimeX, st_mtimeX, st_ctimeX;$/;"	m	struct:Solaris::__anon108
st_ctimeX	./kern/solaris/solaris.hh	/^        int64_t st_atimeX, st_mtimeX, st_ctimeX;$/;"	m	struct:Solaris::__anon109
st_ctimeX	./kern/tru64/tru64.hh	/^        time_t  st_ctimeX;              \/\/!< st_ctime$/;"	m	struct:Tru64_F64::F64_stat
st_ctimeX	./kern/tru64/tru64.hh	/^        time_t  st_ctimeX;$/;"	m	struct:Tru64_PreF64::pre_F64_stat
st_ctime_nsec	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_ctime_nsec;$/;"	m	struct:ArmFreebsd32::__anon69
st_ctime_nsec	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_ctime_nsec;$/;"	m	struct:ArmFreebsd32::__anon70
st_ctime_nsec	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_ctime_nsec;$/;"	m	struct:ArmFreebsd64::__anon71
st_ctime_nsec	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_ctime_nsec;$/;"	m	struct:ArmFreebsd64::__anon72
st_ctime_nsec	./arch/arm/linux/linux.hh	/^        uint32_t  st_ctime_nsec;$/;"	m	struct:ArmLinux32::__anon75
st_ctime_nsec	./arch/arm/linux/linux.hh	/^        uint32_t st_ctime_nsec;$/;"	m	struct:ArmLinux32::__anon74
st_ctime_nsec	./arch/arm/linux/linux.hh	/^        uint64_t st_ctime_nsec;$/;"	m	struct:ArmLinux64::__anon77
st_ctime_nsec	./arch/arm/linux/linux.hh	/^        uint64_t st_ctime_nsec;$/;"	m	struct:ArmLinux64::__anon78
st_ctime_nsec	./arch/power/linux/linux.hh	/^        uint32_t st_ctime_nsec;$/;"	m	struct:PowerLinux::__anon54
st_ctime_nsec	./arch/power/linux/linux.hh	/^        uint32_t st_ctime_nsec;$/;"	m	struct:PowerLinux::__anon55
st_ctime_nsec	./arch/sparc/linux/linux.hh	/^        uint64_t st_ctime_nsec;$/;"	m	struct:Sparc32Linux::__anon46
st_ctime_nsec	./arch/x86/linux/linux.hh	/^        uint32_t st_ctime_nsec;$/;"	m	struct:X86Linux32::__anon62
st_ctime_nsec	./arch/x86/linux/linux.hh	/^        uint64_t st_ctime_nsec;$/;"	m	struct:X86Linux64::__anon59
st_ctime_nsec	./kern/linux/linux.hh	/^        uint64_t        st_ctime_nsec;$/;"	m	struct:Linux::__anon98
st_ctime_reserved	./kern/tru64/tru64.hh	/^        int32_t st_ctime_reserved;      \/\/!< st_ctime_reserved$/;"	m	struct:Tru64_F64::F64_stat
st_dev	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_dev;$/;"	m	struct:ArmFreebsd32::__anon69
st_dev	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_dev;$/;"	m	struct:ArmFreebsd32::__anon70
st_dev	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_dev;$/;"	m	struct:ArmFreebsd64::__anon71
st_dev	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_dev;$/;"	m	struct:ArmFreebsd64::__anon72
st_dev	./arch/arm/linux/linux.hh	/^        uint32_t st_dev;$/;"	m	struct:ArmLinux32::__anon74
st_dev	./arch/arm/linux/linux.hh	/^        uint64_t  st_dev;$/;"	m	struct:ArmLinux32::__anon75
st_dev	./arch/arm/linux/linux.hh	/^        uint64_t st_dev;$/;"	m	struct:ArmLinux64::__anon77
st_dev	./arch/arm/linux/linux.hh	/^        uint64_t st_dev;$/;"	m	struct:ArmLinux64::__anon78
st_dev	./arch/power/linux/linux.hh	/^        uint64_t st_dev;$/;"	m	struct:PowerLinux::__anon54
st_dev	./arch/power/linux/linux.hh	/^        uint64_t st_dev;$/;"	m	struct:PowerLinux::__anon55
st_dev	./arch/sparc/linux/linux.hh	/^        uint32_t st_dev;$/;"	m	struct:SparcLinux::__anon44
st_dev	./arch/sparc/linux/linux.hh	/^        uint64_t st_dev;$/;"	m	struct:Sparc32Linux::__anon46
st_dev	./arch/x86/linux/linux.hh	/^        uint64_t st_dev;$/;"	m	struct:X86Linux32::__anon62
st_dev	./arch/x86/linux/linux.hh	/^        uint64_t st_dev;$/;"	m	struct:X86Linux64::__anon59
st_dev	./kern/linux/linux.hh	/^        uint32_t        st_dev;         \/\/!< device$/;"	m	struct:Linux::__anon97
st_dev	./kern/linux/linux.hh	/^        uint64_t        st_dev;$/;"	m	struct:Linux::__anon98
st_dev	./kern/solaris/solaris.hh	/^        uint64_t        st_dev;         \/\/!< device$/;"	m	struct:Solaris::__anon108
st_dev	./kern/solaris/solaris.hh	/^        uint64_t        st_dev;         \/\/!< device$/;"	m	struct:Solaris::__anon109
st_dev	./kern/tru64/tru64.hh	/^        dev_t   st_dev;                 \/\/!< st_dev$/;"	m	struct:Tru64_F64::F64_stat
st_dev	./kern/tru64/tru64.hh	/^        dev_t   st_dev;$/;"	m	struct:Tru64_PreF64::pre_F64_stat
st_flags	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_flags;$/;"	m	struct:ArmFreebsd32::__anon69
st_flags	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_flags;$/;"	m	struct:ArmFreebsd32::__anon70
st_flags	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_flags;$/;"	m	struct:ArmFreebsd64::__anon71
st_flags	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_flags;$/;"	m	struct:ArmFreebsd64::__anon72
st_flags	./kern/linux/linux.hh	/^        uint32_t        st_flags;       \/\/!< flags$/;"	m	struct:Linux::__anon97
st_flags	./kern/tru64/tru64.hh	/^        uint32_t        st_flags;       \/\/!< st_flags$/;"	m	struct:Tru64_F64::F64_stat
st_flags	./kern/tru64/tru64.hh	/^        uint32_t st_flags;$/;"	m	struct:Tru64_PreF64::pre_F64_stat
st_fstype	./kern/solaris/solaris.hh	/^        char            st_fstype[16];$/;"	m	struct:Solaris::__anon108
st_fstype	./kern/solaris/solaris.hh	/^        char            st_fstype[16];$/;"	m	struct:Solaris::__anon109
st_gen	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_gen;$/;"	m	struct:ArmFreebsd32::__anon69
st_gen	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_gen;$/;"	m	struct:ArmFreebsd32::__anon70
st_gen	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_gen;$/;"	m	struct:ArmFreebsd64::__anon71
st_gen	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_gen;$/;"	m	struct:ArmFreebsd64::__anon72
st_gen	./kern/linux/linux.hh	/^        uint32_t        st_gen;         \/\/!< unknown$/;"	m	struct:Linux::__anon97
st_gen	./kern/tru64/tru64.hh	/^        uint32_t        st_gen;         \/\/!< st_gen$/;"	m	struct:Tru64_F64::F64_stat
st_gen	./kern/tru64/tru64.hh	/^        uint32_t st_gen;$/;"	m	struct:Tru64_PreF64::pre_F64_stat
st_gid	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_gid;$/;"	m	struct:ArmFreebsd32::__anon69
st_gid	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_gid;$/;"	m	struct:ArmFreebsd32::__anon70
st_gid	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_gid;$/;"	m	struct:ArmFreebsd64::__anon71
st_gid	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_gid;$/;"	m	struct:ArmFreebsd64::__anon72
st_gid	./arch/arm/linux/linux.hh	/^        uint16_t st_gid;$/;"	m	struct:ArmLinux32::__anon74
st_gid	./arch/arm/linux/linux.hh	/^        uint32_t  st_gid;$/;"	m	struct:ArmLinux32::__anon75
st_gid	./arch/arm/linux/linux.hh	/^        uint32_t st_gid;$/;"	m	struct:ArmLinux64::__anon77
st_gid	./arch/arm/linux/linux.hh	/^        uint32_t st_gid;$/;"	m	struct:ArmLinux64::__anon78
st_gid	./arch/power/linux/linux.hh	/^        uint32_t st_gid;$/;"	m	struct:PowerLinux::__anon54
st_gid	./arch/power/linux/linux.hh	/^        uint32_t st_gid;$/;"	m	struct:PowerLinux::__anon55
st_gid	./arch/sparc/linux/linux.hh	/^        uint32_t st_gid;$/;"	m	struct:Sparc32Linux::__anon46
st_gid	./arch/sparc/linux/linux.hh	/^        uint32_t st_gid;$/;"	m	struct:SparcLinux::__anon44
st_gid	./arch/x86/linux/linux.hh	/^        uint32_t st_gid;$/;"	m	struct:X86Linux32::__anon62
st_gid	./arch/x86/linux/linux.hh	/^        uint32_t st_gid;$/;"	m	struct:X86Linux64::__anon59
st_gid	./kern/linux/linux.hh	/^        uint32_t        st_gid;         \/\/!< owner's group ID$/;"	m	struct:Linux::__anon97
st_gid	./kern/linux/linux.hh	/^        uint32_t        st_gid;$/;"	m	struct:Linux::__anon98
st_gid	./kern/solaris/solaris.hh	/^        int32_t         st_gid;         \/\/!< owner's group ID$/;"	m	struct:Solaris::__anon108
st_gid	./kern/solaris/solaris.hh	/^        int32_t         st_gid;         \/\/!< owner's group ID$/;"	m	struct:Solaris::__anon109
st_gid	./kern/tru64/tru64.hh	/^        gid_t   st_gid;                 \/\/!< st_gid$/;"	m	struct:Tru64_F64::F64_stat
st_gid	./kern/tru64/tru64.hh	/^        gid_t   st_gid;$/;"	m	struct:Tru64_PreF64::pre_F64_stat
st_halt	./arch/sparc/miscregs.hh	/^    const static int st_halt     = 0x02;$/;"	m	struct:SparcISA::STS
st_idle	./arch/sparc/miscregs.hh	/^    const static int st_idle     = 0x00;$/;"	m	struct:SparcISA::STS
st_ino	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_ino;$/;"	m	struct:ArmFreebsd32::__anon69
st_ino	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_ino;$/;"	m	struct:ArmFreebsd32::__anon70
st_ino	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_ino;$/;"	m	struct:ArmFreebsd64::__anon71
st_ino	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_ino;$/;"	m	struct:ArmFreebsd64::__anon72
st_ino	./arch/arm/linux/linux.hh	/^        uint32_t st_ino;$/;"	m	struct:ArmLinux32::__anon74
st_ino	./arch/arm/linux/linux.hh	/^        uint64_t  st_ino;$/;"	m	struct:ArmLinux32::__anon75
st_ino	./arch/arm/linux/linux.hh	/^        uint64_t st_ino;$/;"	m	struct:ArmLinux64::__anon77
st_ino	./arch/arm/linux/linux.hh	/^        uint64_t st_ino;$/;"	m	struct:ArmLinux64::__anon78
st_ino	./arch/power/linux/linux.hh	/^        uint32_t st_ino;$/;"	m	struct:PowerLinux::__anon54
st_ino	./arch/power/linux/linux.hh	/^        uint64_t st_ino;$/;"	m	struct:PowerLinux::__anon55
st_ino	./arch/sparc/linux/linux.hh	/^        uint64_t st_ino;$/;"	m	struct:Sparc32Linux::__anon46
st_ino	./arch/sparc/linux/linux.hh	/^        uint64_t st_ino;$/;"	m	struct:SparcLinux::__anon44
st_ino	./arch/x86/linux/linux.hh	/^        uint64_t st_ino;$/;"	m	struct:X86Linux32::__anon62
st_ino	./arch/x86/linux/linux.hh	/^        uint64_t st_ino;$/;"	m	struct:X86Linux64::__anon59
st_ino	./kern/linux/linux.hh	/^        uint32_t        st_ino;         \/\/!< inode$/;"	m	struct:Linux::__anon97
st_ino	./kern/linux/linux.hh	/^        uint64_t        st_ino;$/;"	m	struct:Linux::__anon98
st_ino	./kern/solaris/solaris.hh	/^        uint64_t        st_ino;         \/\/!< inode$/;"	m	struct:Solaris::__anon108
st_ino	./kern/solaris/solaris.hh	/^        uint64_t        st_ino;         \/\/!< inode$/;"	m	struct:Solaris::__anon109
st_ino	./kern/tru64/tru64.hh	/^        ino_t   st_ino;                 \/\/!< st_ino$/;"	m	struct:Tru64_F64::F64_stat
st_ino	./kern/tru64/tru64.hh	/^        ino_t   st_ino;$/;"	m	struct:Tru64_PreF64::pre_F64_stat
st_ino_reserved	./kern/tru64/tru64.hh	/^        int32_t st_ino_reserved;        \/\/!< st_ino_reserved$/;"	m	struct:Tru64_F64::F64_stat
st_ldev	./kern/tru64/tru64.hh	/^        dev_t   st_ldev;                \/\/!< st_ldev$/;"	m	struct:Tru64_F64::F64_stat
st_lspare	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_lspare;$/;"	m	struct:ArmFreebsd32::__anon69
st_lspare	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_lspare;$/;"	m	struct:ArmFreebsd32::__anon70
st_lspare	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_lspare;$/;"	m	struct:ArmFreebsd64::__anon71
st_lspare	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_lspare;$/;"	m	struct:ArmFreebsd64::__anon72
st_mode	./arch/arm/freebsd/freebsd.hh	/^        uint16_t   st_mode;$/;"	m	struct:ArmFreebsd32::__anon69
st_mode	./arch/arm/freebsd/freebsd.hh	/^        uint16_t   st_mode;$/;"	m	struct:ArmFreebsd32::__anon70
st_mode	./arch/arm/freebsd/freebsd.hh	/^        uint16_t   st_mode;$/;"	m	struct:ArmFreebsd64::__anon71
st_mode	./arch/arm/freebsd/freebsd.hh	/^        uint16_t   st_mode;$/;"	m	struct:ArmFreebsd64::__anon72
st_mode	./arch/arm/linux/linux.hh	/^        uint16_t st_mode;$/;"	m	struct:ArmLinux32::__anon74
st_mode	./arch/arm/linux/linux.hh	/^        uint32_t  st_mode;$/;"	m	struct:ArmLinux32::__anon75
st_mode	./arch/arm/linux/linux.hh	/^        uint32_t st_mode;$/;"	m	struct:ArmLinux64::__anon77
st_mode	./arch/arm/linux/linux.hh	/^        uint32_t st_mode;$/;"	m	struct:ArmLinux64::__anon78
st_mode	./arch/power/linux/linux.hh	/^        uint32_t st_mode;$/;"	m	struct:PowerLinux::__anon54
st_mode	./arch/power/linux/linux.hh	/^        uint32_t st_mode;$/;"	m	struct:PowerLinux::__anon55
st_mode	./arch/sparc/linux/linux.hh	/^        uint32_t st_mode;$/;"	m	struct:Sparc32Linux::__anon46
st_mode	./arch/sparc/linux/linux.hh	/^        uint32_t st_mode;$/;"	m	struct:SparcLinux::__anon44
st_mode	./arch/x86/linux/linux.hh	/^        uint32_t st_mode;$/;"	m	struct:X86Linux32::__anon62
st_mode	./arch/x86/linux/linux.hh	/^        uint32_t st_mode;$/;"	m	struct:X86Linux64::__anon59
st_mode	./kern/linux/linux.hh	/^        uint32_t        st_mode;        \/\/!< mode$/;"	m	struct:Linux::__anon97
st_mode	./kern/linux/linux.hh	/^        uint32_t        st_mode;$/;"	m	struct:Linux::__anon98
st_mode	./kern/solaris/solaris.hh	/^        uint32_t        st_mode;        \/\/!< mode$/;"	m	struct:Solaris::__anon108
st_mode	./kern/solaris/solaris.hh	/^        uint32_t        st_mode;        \/\/!< mode$/;"	m	struct:Solaris::__anon109
st_mode	./kern/tru64/tru64.hh	/^        mode_t  st_mode;                \/\/!< st_mode$/;"	m	struct:Tru64_F64::F64_stat
st_mode	./kern/tru64/tru64.hh	/^        mode_t  st_mode;$/;"	m	struct:Tru64_PreF64::pre_F64_stat
st_mtimeX	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_mtimeX;$/;"	m	struct:ArmFreebsd32::__anon69
st_mtimeX	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_mtimeX;$/;"	m	struct:ArmFreebsd32::__anon70
st_mtimeX	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_mtimeX;$/;"	m	struct:ArmFreebsd64::__anon71
st_mtimeX	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_mtimeX;$/;"	m	struct:ArmFreebsd64::__anon72
st_mtimeX	./arch/arm/linux/linux.hh	/^        uint32_t  st_mtimeX;$/;"	m	struct:ArmLinux32::__anon75
st_mtimeX	./arch/arm/linux/linux.hh	/^        uint32_t st_mtimeX;$/;"	m	struct:ArmLinux32::__anon74
st_mtimeX	./arch/arm/linux/linux.hh	/^        uint64_t st_mtimeX;$/;"	m	struct:ArmLinux64::__anon77
st_mtimeX	./arch/arm/linux/linux.hh	/^        uint64_t st_mtimeX;$/;"	m	struct:ArmLinux64::__anon78
st_mtimeX	./arch/power/linux/linux.hh	/^        uint32_t st_mtimeX;$/;"	m	struct:PowerLinux::__anon54
st_mtimeX	./arch/power/linux/linux.hh	/^        uint32_t st_mtimeX;$/;"	m	struct:PowerLinux::__anon55
st_mtimeX	./arch/sparc/linux/linux.hh	/^        int64_t st_mtimeX;$/;"	m	struct:SparcLinux::__anon44
st_mtimeX	./arch/sparc/linux/linux.hh	/^        uint64_t st_mtimeX;$/;"	m	struct:Sparc32Linux::__anon46
st_mtimeX	./arch/x86/linux/linux.hh	/^        uint32_t st_mtimeX;$/;"	m	struct:X86Linux32::__anon62
st_mtimeX	./arch/x86/linux/linux.hh	/^        uint64_t st_mtimeX;$/;"	m	struct:X86Linux64::__anon59
st_mtimeX	./kern/linux/linux.hh	/^        uint64_t        st_mtimeX;      \/\/!< time of last modification$/;"	m	struct:Linux::__anon97
st_mtimeX	./kern/linux/linux.hh	/^        uint64_t        st_mtimeX;$/;"	m	struct:Linux::__anon98
st_mtimeX	./kern/solaris/solaris.hh	/^        int64_t st_atimeX, st_mtimeX, st_ctimeX;$/;"	m	struct:Solaris::__anon108
st_mtimeX	./kern/solaris/solaris.hh	/^        int64_t st_atimeX, st_mtimeX, st_ctimeX;$/;"	m	struct:Solaris::__anon109
st_mtimeX	./kern/tru64/tru64.hh	/^        time_t  st_mtimeX;              \/\/!< st_mtime$/;"	m	struct:Tru64_F64::F64_stat
st_mtimeX	./kern/tru64/tru64.hh	/^        time_t  st_mtimeX;$/;"	m	struct:Tru64_PreF64::pre_F64_stat
st_mtime_nsec	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_mtime_nsec;$/;"	m	struct:ArmFreebsd32::__anon69
st_mtime_nsec	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_mtime_nsec;$/;"	m	struct:ArmFreebsd32::__anon70
st_mtime_nsec	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_mtime_nsec;$/;"	m	struct:ArmFreebsd64::__anon71
st_mtime_nsec	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_mtime_nsec;$/;"	m	struct:ArmFreebsd64::__anon72
st_mtime_nsec	./arch/arm/linux/linux.hh	/^        uint32_t  st_mtime_nsec;$/;"	m	struct:ArmLinux32::__anon75
st_mtime_nsec	./arch/arm/linux/linux.hh	/^        uint32_t st_mtime_nsec;$/;"	m	struct:ArmLinux32::__anon74
st_mtime_nsec	./arch/arm/linux/linux.hh	/^        uint64_t st_mtime_nsec;$/;"	m	struct:ArmLinux64::__anon77
st_mtime_nsec	./arch/arm/linux/linux.hh	/^        uint64_t st_mtime_nsec;$/;"	m	struct:ArmLinux64::__anon78
st_mtime_nsec	./arch/power/linux/linux.hh	/^        uint32_t st_mtime_nsec;$/;"	m	struct:PowerLinux::__anon54
st_mtime_nsec	./arch/power/linux/linux.hh	/^        uint32_t st_mtime_nsec;$/;"	m	struct:PowerLinux::__anon55
st_mtime_nsec	./arch/sparc/linux/linux.hh	/^        uint64_t st_mtime_nsec;$/;"	m	struct:Sparc32Linux::__anon46
st_mtime_nsec	./arch/x86/linux/linux.hh	/^        uint32_t st_mtime_nsec;$/;"	m	struct:X86Linux32::__anon62
st_mtime_nsec	./arch/x86/linux/linux.hh	/^        uint64_t st_mtime_nsec;$/;"	m	struct:X86Linux64::__anon59
st_mtime_nsec	./kern/linux/linux.hh	/^        uint64_t        st_mtime_nsec;$/;"	m	struct:Linux::__anon98
st_mtime_reserved	./kern/tru64/tru64.hh	/^        int32_t st_mtime_reserved;      \/\/!< st_mtime_reserved$/;"	m	struct:Tru64_F64::F64_stat
st_nlink	./arch/arm/freebsd/freebsd.hh	/^        uint16_t   st_nlink;$/;"	m	struct:ArmFreebsd32::__anon69
st_nlink	./arch/arm/freebsd/freebsd.hh	/^        uint16_t   st_nlink;$/;"	m	struct:ArmFreebsd32::__anon70
st_nlink	./arch/arm/freebsd/freebsd.hh	/^        uint16_t   st_nlink;$/;"	m	struct:ArmFreebsd64::__anon71
st_nlink	./arch/arm/freebsd/freebsd.hh	/^        uint16_t   st_nlink;$/;"	m	struct:ArmFreebsd64::__anon72
st_nlink	./arch/arm/linux/linux.hh	/^        uint16_t st_nlink;$/;"	m	struct:ArmLinux32::__anon74
st_nlink	./arch/arm/linux/linux.hh	/^        uint32_t  st_nlink;$/;"	m	struct:ArmLinux32::__anon75
st_nlink	./arch/arm/linux/linux.hh	/^        uint32_t st_nlink;$/;"	m	struct:ArmLinux64::__anon78
st_nlink	./arch/arm/linux/linux.hh	/^        uint64_t st_nlink;$/;"	m	struct:ArmLinux64::__anon77
st_nlink	./arch/power/linux/linux.hh	/^        uint32_t st_nlink;$/;"	m	struct:PowerLinux::__anon54
st_nlink	./arch/power/linux/linux.hh	/^        uint32_t st_nlink;$/;"	m	struct:PowerLinux::__anon55
st_nlink	./arch/sparc/linux/linux.hh	/^        uint16_t st_nlink;$/;"	m	struct:SparcLinux::__anon44
st_nlink	./arch/sparc/linux/linux.hh	/^        uint32_t st_nlink;$/;"	m	struct:Sparc32Linux::__anon46
st_nlink	./arch/x86/linux/linux.hh	/^        uint32_t st_nlink;$/;"	m	struct:X86Linux32::__anon62
st_nlink	./arch/x86/linux/linux.hh	/^        uint64_t st_nlink;$/;"	m	struct:X86Linux64::__anon59
st_nlink	./kern/linux/linux.hh	/^        uint32_t        st_nlink;       \/\/!< link count$/;"	m	struct:Linux::__anon97
st_nlink	./kern/linux/linux.hh	/^        uint32_t        st_nlink;$/;"	m	struct:Linux::__anon98
st_nlink	./kern/solaris/solaris.hh	/^        uint32_t        st_nlink;       \/\/!< link count$/;"	m	struct:Solaris::__anon108
st_nlink	./kern/solaris/solaris.hh	/^        uint32_t        st_nlink;       \/\/!< link count$/;"	m	struct:Solaris::__anon109
st_nlink	./kern/tru64/tru64.hh	/^        nlink_t st_nlink;               \/\/!< st_nlink$/;"	m	struct:Tru64_F64::F64_stat
st_nlink	./kern/tru64/tru64.hh	/^        nlink_t st_nlink;$/;"	m	struct:Tru64_PreF64::pre_F64_stat
st_nlink_reserved	./kern/tru64/tru64.hh	/^        uint16_t st_nlink_reserved;     \/\/!< st_nlink_reserved$/;"	m	struct:Tru64_F64::F64_stat
st_rdev	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_rdev;$/;"	m	struct:ArmFreebsd32::__anon69
st_rdev	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_rdev;$/;"	m	struct:ArmFreebsd32::__anon70
st_rdev	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_rdev;$/;"	m	struct:ArmFreebsd64::__anon71
st_rdev	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_rdev;$/;"	m	struct:ArmFreebsd64::__anon72
st_rdev	./arch/arm/linux/linux.hh	/^        uint32_t st_rdev;$/;"	m	struct:ArmLinux32::__anon74
st_rdev	./arch/arm/linux/linux.hh	/^        uint64_t  st_rdev;$/;"	m	struct:ArmLinux32::__anon75
st_rdev	./arch/arm/linux/linux.hh	/^        uint64_t st_rdev;$/;"	m	struct:ArmLinux64::__anon77
st_rdev	./arch/arm/linux/linux.hh	/^        uint64_t st_rdev;$/;"	m	struct:ArmLinux64::__anon78
st_rdev	./arch/power/linux/linux.hh	/^        uint64_t st_rdev;$/;"	m	struct:PowerLinux::__anon54
st_rdev	./arch/power/linux/linux.hh	/^        uint64_t st_rdev;$/;"	m	struct:PowerLinux::__anon55
st_rdev	./arch/sparc/linux/linux.hh	/^        uint32_t st_rdev;$/;"	m	struct:SparcLinux::__anon44
st_rdev	./arch/sparc/linux/linux.hh	/^        uint64_t st_rdev;$/;"	m	struct:Sparc32Linux::__anon46
st_rdev	./arch/x86/linux/linux.hh	/^        uint64_t st_rdev;$/;"	m	struct:X86Linux32::__anon62
st_rdev	./arch/x86/linux/linux.hh	/^        uint64_t st_rdev;$/;"	m	struct:X86Linux64::__anon59
st_rdev	./kern/linux/linux.hh	/^        uint32_t        st_rdev;        \/\/!< device number$/;"	m	struct:Linux::__anon97
st_rdev	./kern/linux/linux.hh	/^        uint64_t        st_rdev;$/;"	m	struct:Linux::__anon98
st_rdev	./kern/solaris/solaris.hh	/^        uint64_t        st_rdev;        \/\/!< device number$/;"	m	struct:Solaris::__anon108
st_rdev	./kern/solaris/solaris.hh	/^        uint64_t        st_rdev;        \/\/!< device number$/;"	m	struct:Solaris::__anon109
st_rdev	./kern/tru64/tru64.hh	/^        dev_t   st_rdev;                \/\/!< st_rdev$/;"	m	struct:Tru64_F64::F64_stat
st_rdev	./kern/tru64/tru64.hh	/^        dev_t   st_rdev;$/;"	m	struct:Tru64_PreF64::pre_F64_stat
st_ready	./arch/sparc/miscregs.hh	/^    const static int st_ready    = 0x19;$/;"	m	struct:SparcISA::STS
st_retired1	./kern/tru64/tru64.hh	/^        int32_t st_retired1;            \/\/!< st_retired1$/;"	m	struct:Tru64_F64::F64_stat
st_retired2	./kern/tru64/tru64.hh	/^        time_t  st_retired2;            \/\/!< st_retired2$/;"	m	struct:Tru64_F64::F64_stat
st_retired3	./kern/tru64/tru64.hh	/^        time_t  st_retired3;            \/\/!< st_retired3$/;"	m	struct:Tru64_F64::F64_stat
st_retired4	./kern/tru64/tru64.hh	/^        time_t  st_retired4;            \/\/!< st_retired4$/;"	m	struct:Tru64_F64::F64_stat
st_retired5	./kern/tru64/tru64.hh	/^        int32_t st_retired5;            \/\/!< st_retired5$/;"	m	struct:Tru64_F64::F64_stat
st_retired6	./kern/tru64/tru64.hh	/^        int32_t st_retired6;            \/\/!< st_retired6$/;"	m	struct:Tru64_F64::F64_stat
st_run	./arch/sparc/miscregs.hh	/^    const static int st_run      = 0x05;$/;"	m	struct:SparcISA::STS
st_size	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_size;$/;"	m	struct:ArmFreebsd32::__anon69
st_size	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_size;$/;"	m	struct:ArmFreebsd32::__anon70
st_size	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_size;$/;"	m	struct:ArmFreebsd64::__anon71
st_size	./arch/arm/freebsd/freebsd.hh	/^        uint64_t   st_size;$/;"	m	struct:ArmFreebsd64::__anon72
st_size	./arch/arm/linux/linux.hh	/^        int64_t   __attribute__ ((aligned (8))) st_size;$/;"	m	struct:ArmLinux32::__anon75
st_size	./arch/arm/linux/linux.hh	/^        uint32_t st_size;$/;"	m	struct:ArmLinux32::__anon74
st_size	./arch/arm/linux/linux.hh	/^        uint64_t st_size;$/;"	m	struct:ArmLinux64::__anon77
st_size	./arch/arm/linux/linux.hh	/^        uint64_t st_size;$/;"	m	struct:ArmLinux64::__anon78
st_size	./arch/power/linux/linux.hh	/^        uint32_t st_size;$/;"	m	struct:PowerLinux::__anon54
st_size	./arch/power/linux/linux.hh	/^        uint64_t st_size;$/;"	m	struct:PowerLinux::__anon55
st_size	./arch/sparc/linux/linux.hh	/^        int64_t st_size;$/;"	m	struct:Sparc32Linux::__anon46
st_size	./arch/sparc/linux/linux.hh	/^        int64_t st_size;$/;"	m	struct:SparcLinux::__anon44
st_size	./arch/x86/linux/linux.hh	/^        int64_t st_size;$/;"	m	struct:X86Linux32::__anon62
st_size	./arch/x86/linux/linux.hh	/^        int64_t st_size;$/;"	m	struct:X86Linux64::__anon59
st_size	./kern/linux/linux.hh	/^        int64_t         st_size;        \/\/!< file size in bytes$/;"	m	struct:Linux::__anon97
st_size	./kern/linux/linux.hh	/^        int64_t         st_size;$/;"	m	struct:Linux::__anon98
st_size	./kern/solaris/solaris.hh	/^        int64_t         st_size;        \/\/!< file size in bytes$/;"	m	struct:Solaris::__anon108
st_size	./kern/solaris/solaris.hh	/^        int64_t         st_size;        \/\/!< file size in bytes$/;"	m	struct:Solaris::__anon109
st_size	./kern/tru64/tru64.hh	/^        off_t   st_size __attribute__ ((aligned(sizeof(off_t))));$/;"	m	struct:Tru64_PreF64::pre_F64_stat
st_size	./kern/tru64/tru64.hh	/^        off_t   st_size;                \/\/!< st_size$/;"	m	struct:Tru64_F64::F64_stat
st_spare	./kern/tru64/tru64.hh	/^        uint64_t        st_spare[4];    \/\/!< st_spare[4]$/;"	m	struct:Tru64_F64::F64_stat
st_spec_rdy	./arch/sparc/miscregs.hh	/^    const static int st_spec_rdy = 0x13;$/;"	m	struct:SparcISA::STS
st_spec_run	./arch/sparc/miscregs.hh	/^    const static int st_spec_run = 0x07;$/;"	m	struct:SparcISA::STS
st_uatime	./kern/tru64/tru64.hh	/^        int32_t st_uatime;              \/\/!< st_uatime$/;"	m	struct:Tru64_F64::F64_stat
st_uatime	./kern/tru64/tru64.hh	/^        int32_t st_uatime;$/;"	m	struct:Tru64_PreF64::pre_F64_stat
st_uctime	./kern/tru64/tru64.hh	/^        int32_t st_uctime;              \/\/!< st_uctime$/;"	m	struct:Tru64_F64::F64_stat
st_uctime	./kern/tru64/tru64.hh	/^        int32_t st_uctime;$/;"	m	struct:Tru64_PreF64::pre_F64_stat
st_uid	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_uid;$/;"	m	struct:ArmFreebsd32::__anon69
st_uid	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_uid;$/;"	m	struct:ArmFreebsd32::__anon70
st_uid	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_uid;$/;"	m	struct:ArmFreebsd64::__anon71
st_uid	./arch/arm/freebsd/freebsd.hh	/^        uint32_t   st_uid;$/;"	m	struct:ArmFreebsd64::__anon72
st_uid	./arch/arm/linux/linux.hh	/^        uint16_t st_uid;$/;"	m	struct:ArmLinux32::__anon74
st_uid	./arch/arm/linux/linux.hh	/^        uint32_t  st_uid;$/;"	m	struct:ArmLinux32::__anon75
st_uid	./arch/arm/linux/linux.hh	/^        uint32_t st_uid;$/;"	m	struct:ArmLinux64::__anon77
st_uid	./arch/arm/linux/linux.hh	/^        uint32_t st_uid;$/;"	m	struct:ArmLinux64::__anon78
st_uid	./arch/power/linux/linux.hh	/^        uint32_t st_uid;$/;"	m	struct:PowerLinux::__anon54
st_uid	./arch/power/linux/linux.hh	/^        uint32_t st_uid;$/;"	m	struct:PowerLinux::__anon55
st_uid	./arch/sparc/linux/linux.hh	/^        uint32_t st_uid;$/;"	m	struct:Sparc32Linux::__anon46
st_uid	./arch/sparc/linux/linux.hh	/^        uint32_t st_uid;$/;"	m	struct:SparcLinux::__anon44
st_uid	./arch/x86/linux/linux.hh	/^        uint32_t st_uid;$/;"	m	struct:X86Linux32::__anon62
st_uid	./arch/x86/linux/linux.hh	/^        uint32_t st_uid;$/;"	m	struct:X86Linux64::__anon59
st_uid	./kern/linux/linux.hh	/^        uint32_t        st_uid;         \/\/!< owner's user ID$/;"	m	struct:Linux::__anon97
st_uid	./kern/linux/linux.hh	/^        uint32_t        st_uid;$/;"	m	struct:Linux::__anon98
st_uid	./kern/solaris/solaris.hh	/^        int32_t         st_uid;         \/\/!< owner's user ID$/;"	m	struct:Solaris::__anon108
st_uid	./kern/solaris/solaris.hh	/^        int32_t         st_uid;         \/\/!< owner's user ID$/;"	m	struct:Solaris::__anon109
st_uid	./kern/tru64/tru64.hh	/^        uid_t   st_uid __attribute__ ((aligned(sizeof(uid_t))));$/;"	m	struct:Tru64_PreF64::pre_F64_stat
st_uid	./kern/tru64/tru64.hh	/^        uid_t   st_uid;                 \/\/!< st_uid$/;"	m	struct:Tru64_F64::F64_stat
st_umtime	./kern/tru64/tru64.hh	/^        int32_t st_umtime;              \/\/!< st_umtime$/;"	m	struct:Tru64_F64::F64_stat
st_umtime	./kern/tru64/tru64.hh	/^        int32_t st_umtime;$/;"	m	struct:Tru64_PreF64::pre_F64_stat
st_wait	./arch/sparc/miscregs.hh	/^    const static int st_wait     = 0x01;$/;"	m	struct:SparcISA::STS
stack	./arch/alpha/stacktrace.hh	/^    std::vector<Addr> stack;$/;"	m	class:AlphaISA::StackTrace
stack	./arch/arm/stacktrace.hh	/^    std::vector<Addr> stack;$/;"	m	class:ArmISA::StackTrace
stack	./arch/mips/stacktrace.hh	/^    std::vector<Addr> stack;$/;"	m	class:MipsISA::StackTrace
stack	./arch/power/stacktrace.hh	/^    std::vector<Addr> stack;$/;"	m	class:PowerISA::StackTrace
stack	./arch/sparc/stacktrace.hh	/^    std::vector<Addr> stack;$/;"	m	class:SparcISA::StackTrace
stack	./arch/x86/decoder.hh	/^    uint8_t stack;$/;"	m	class:X86ISA::Decoder
stack	./arch/x86/regs/misc.hh	/^        Bitfield<17, 16> stack;$/;"	m	namespace:X86ISA
stack	./arch/x86/stacktrace.hh	/^        std::vector<Addr> stack;$/;"	m	class:X86ISA::StackTrace
stack	./mem/stack_dist_calc.hh	/^    std::vector<uint64_t> stack;$/;"	m	class:StackDistCalc
stackSize	./arch/x86/emulenv.hh	/^        int stackSize;$/;"	m	struct:X86ISA::EmulEnv
stackSize	./arch/x86/types.hh	/^        uint8_t stackSize;$/;"	m	struct:X86ISA::ExtMachInst
stack_base	./sim/process.hh	/^    Addr stack_base;            \/\/ stack segment base (highest address)$/;"	m	class:Process
stack_create	./kern/tru64/tru64_syscalls.hh	/^        stack_create = 47,$/;"	e	enum:SystemCalls::__anon103
stack_createFunc	./kern/tru64/tru64.hh	/^    stack_createFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	class:Tru64
stack_min	./sim/process.hh	/^    Addr stack_min;             \/\/ lowest address accessed on the stack$/;"	m	class:Process
stack_size	./sim/process.hh	/^    unsigned stack_size;        \/\/ initial stack size$/;"	m	class:Process
stage1Te	./arch/arm/stage2_lookup.hh	/^    TlbEntry                stage1Te;$/;"	m	class:ArmISA::Stage2LookUp
stage1Tlb	./arch/arm/stage2_lookup.hh	/^    TLB                     *stage1Tlb;$/;"	m	class:ArmISA::Stage2LookUp
stage1Tlb	./arch/arm/stage2_mmu.hh	/^    TLB* stage1Tlb() const { return _stage1Tlb; }$/;"	f	class:ArmISA::Stage2MMU
stage2	./arch/arm/faults.hh	/^    bool stage2;$/;"	m	class:ArmISA::AbortFault
stage2Mmu	./arch/arm/table_walker.hh	/^    Stage2MMU *stage2Mmu;$/;"	m	class:ArmISA::TableWalker
stage2Mmu	./arch/arm/tlb.hh	/^    Stage2MMU *stage2Mmu;$/;"	m	class:ArmISA::TLB
stage2Req	./arch/arm/table_walker.hh	/^        bool stage2Req;$/;"	m	class:ArmISA::TableWalker::WalkerState
stage2Req	./arch/arm/tlb.hh	/^    bool stage2Req;      \/\/ Indicates whether a stage 2 lookup is also required$/;"	m	class:ArmISA::TLB
stage2Te	./arch/arm/stage2_lookup.hh	/^    TlbEntry                *stage2Te;$/;"	m	class:ArmISA::Stage2LookUp
stage2Tlb	./arch/arm/stage2_lookup.hh	/^    TLB               *stage2Tlb;$/;"	m	class:ArmISA::Stage2LookUp
stage2Tlb	./arch/arm/stage2_mmu.hh	/^    TLB* stage2Tlb() const { return _stage2Tlb; }$/;"	f	class:ArmISA::Stage2MMU
stage2Tlb	./arch/arm/tlb.hh	/^    TLB *stage2Tlb;$/;"	m	class:ArmISA::TLB
stage2Tran	./arch/arm/table_walker.hh	/^        TLB::Translation *stage2Tran;$/;"	m	class:ArmISA::TableWalker::WalkerState
stage2_tlb	./arch/arm/ArmTLB.py	/^    stage2_tlb = ArmStage2TLB()$/;"	v	class:ArmStage2DMMU
stage2_tlb	./arch/arm/ArmTLB.py	/^    stage2_tlb = ArmStage2TLB()$/;"	v	class:ArmStage2IMMU
stage2_tlb	./arch/arm/ArmTLB.py	/^    stage2_tlb = Param.ArmTLB("Stage 2 TLB")$/;"	v	class:ArmStage2MMU
stageActive	./cpu/activity.hh	/^    bool *stageActive;$/;"	m	class:ActivityRecorder
stallBuffer	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::stallBuffer(MessageBuffer* buf, Addr addr)$/;"	f	class:AbstractController
stallMessage	./mem/ruby/network/MessageBuffer.cc	/^MessageBuffer::stallMessage(Addr addr, Tick current_time)$/;"	f	class:MessageBuffer
stalled	./cpu/minor/buffers.hh	/^    bool stalled;$/;"	m	class:Minor::SelfStallingPipeline
stalled	./cpu/o3/lsq_unit.hh	/^    bool stalled;$/;"	m	class:LSQUnit
stallingLoadIdx	./cpu/o3/lsq_unit.hh	/^    int stallingLoadIdx;$/;"	m	class:LSQUnit
stallingStoreIsn	./cpu/o3/lsq_unit.hh	/^    InstSeqNum stallingStoreIsn;$/;"	m	class:LSQUnit
stalls	./cpu/o3/decode.hh	/^    Stalls stalls[Impl::MaxThreads];$/;"	m	class:DefaultDecode
stalls	./cpu/o3/fetch.hh	/^    Stalls stalls[Impl::MaxThreads];$/;"	m	class:DefaultFetch
stalls	./cpu/o3/rename.hh	/^    Stalls stalls[Impl::MaxThreads];$/;"	m	class:DefaultRename
standard_strings	./kern/tru64/tru64_syscalls.cc	/^    standard_strings[SystemCalls<Tru64>::StandardNumber] = {$/;"	m	namespace:__anon107	file:
start	./arch/x86/pagetable_walker.cc	/^Walker::start(ThreadContext * _tc, BaseTLB::Translation *_translation,$/;"	f	class:X86ISA::Walker
start	./base/addr_range.hh	/^    Addr start() const { return _start; }$/;"	f	class:AddrRange
start	./cpu/kvm/perfevent.cc	/^PerfKvmCounter::start()$/;"	f	class:PerfKvmCounter
start	./dev/arm/rv_ctrl.hh	/^        Bitfield<31> start;$/;"	m	class:RealViewCtrl
start	./dev/arm/ufs_device.hh	/^        Addr start;$/;"	m	struct:UFSHostDevice::writeToDiskBurst
start	./dev/net/dist_iface.cc	/^DistIface::SyncEvent::start()$/;"	f	class:DistIface::SyncEvent
start	./dev/pixelpump.cc	/^BasePixelPump::start(const DisplayTimings &timings)$/;"	f	class:BasePixelPump
start	./mem/abstract_mem.hh	/^    Addr start() const { return range.start(); }$/;"	f	class:AbstractMemory
start	./mem/mem_checker.hh	/^        Tick start;     \/\/!< Start of earliest write in cluster$/;"	m	class:MemChecker::WriteCluster
start	./mem/mem_checker.hh	/^        Tick start;    \/\/!< Start tick$/;"	m	class:MemChecker::Transaction
start	./python/m5/util/region.py	/^    def start(self):$/;"	m	class:Region
start	./sim/ticked_object.hh	/^    start()$/;"	f	class:Ticked
startAccess	./mem/ruby/structures/BankedArray.hh	/^        Tick startAccess;$/;"	m	class:BankedArray::AccessRecord
startAddr	./base/chunk_generator.hh	/^    const Addr startAddr;$/;"	m	class:ChunkGenerator
startAddr	./cpu/testers/traffic_gen/generators.hh	/^    const Addr startAddr;$/;"	m	class:LinearGen
startAddr	./cpu/testers/traffic_gen/generators.hh	/^    const Addr startAddr;$/;"	m	class:RandomGen
startAddr	./dev/arm/pl111.hh	/^    Addr startAddr;$/;"	m	class:Pl111
startAddrTranslation	./cpu/minor/lsq.cc	/^LSQ::SingleDataRequest::startAddrTranslation()$/;"	f	class:Minor::LSQ::SingleDataRequest
startAddrTranslation	./cpu/minor/lsq.cc	/^LSQ::SplitDataRequest::startAddrTranslation()$/;"	f	class:Minor::LSQ::SplitDataRequest
startAddrTranslation	./cpu/minor/lsq.hh	/^        void startAddrTranslation() { }$/;"	f	class:Minor::LSQ::SpecialDataRequest
startCommand	./dev/storage/ide_disk.cc	/^IdeDisk::startCommand()$/;"	f	class:IdeDisk
startConf	./mem/cache/prefetch/stride.hh	/^    const int startConf;$/;"	m	class:StridePrefetcher
startDiod	./dev/virtio/fs9p.cc	/^VirtIO9PDiod::startDiod()$/;"	f	class:VirtIO9PDiod
startDisassembly	./arch/arm/insts/mem64.cc	/^Memory64::startDisassembly(std::ostream &os) const$/;"	f	class:ArmISA::Memory64
startDma	./dev/arm/pl111.cc	/^Pl111::startDma()$/;"	f	class:Pl111
startDma	./dev/storage/ide_disk.cc	/^IdeDisk::startDma(const uint32_t &prdTableBase)$/;"	f	class:IdeDisk
startFill	./dev/dma_device.cc	/^DmaReadFifo::startFill(Addr start, size_t size)$/;"	f	class:DmaReadFifo
startFrame	./dev/arm/hdlcd.cc	/^HDLcd::DmaEngine::startFrame(Addr fb_base)$/;"	f	class:HDLcd::DmaEngine
startFunctional	./arch/x86/pagetable_walker.cc	/^Walker::WalkerState::startFunctional(Addr &addr, unsigned &logBytes)$/;"	f	class:X86ISA::Walker::WalkerState
startFunctional	./arch/x86/pagetable_walker.cc	/^Walker::startFunctional(ThreadContext * _tc, Addr &addr, unsigned &logBytes,$/;"	f	class:X86ISA::Walker
startIndexBit	./mem/ruby/structures/BankedArray.hh	/^    unsigned int startIndexBit;$/;"	m	class:BankedArray
startNumInst	./cpu/checker/cpu.hh	/^    Counter startNumInst;$/;"	m	class:CheckerCPU
startNumLoad	./cpu/checker/cpu.hh	/^    Counter startNumLoad;$/;"	m	class:CheckerCPU
startNumLoad	./cpu/thread_state.hh	/^    Counter startNumLoad;$/;"	m	struct:ThreadState
startRead	./mem/mem_checker.cc	/^MemChecker::ByteTracker::startRead(MemChecker::Serial serial, Tick start)$/;"	f	class:MemChecker::ByteTracker
startRead	./mem/mem_checker.hh	/^MemChecker::startRead(Tick start, Addr addr, size_t size)$/;"	f	class:MemChecker
startStop	./dev/storage/ide_ctrl.hh	/^        Bitfield<0> startStop;$/;"	m	class:IdeController
startTick	./mem/dramsim2.hh	/^    Tick startTick;$/;"	m	class:DRAMSim2
startTick	./sim/stat_control.cc	/^Tick startTick;$/;"	m	namespace:Stats	file:
startTime	./arch/arm/table_walker.hh	/^        Tick startTime;$/;"	m	class:ArmISA::TableWalker::WalkerState
startTime	./dev/arm/pl111.hh	/^    Tick startTime;$/;"	m	class:Pl111
startTraceInst	./cpu/o3/probe/ElasticTrace.py	/^                                    "committed instruction.")$/;"	v	class:ElasticTrace
startTraceInst	./cpu/o3/probe/elastic_trace.hh	/^    const InstSeqNum startTraceInst;$/;"	m	class:ElasticTrace
startWalk	./arch/x86/pagetable_walker.cc	/^Walker::WalkerState::startWalk()$/;"	f	class:X86ISA::Walker::WalkerState
startWalkWrapper	./arch/x86/pagetable_walker.cc	/^Walker::startWalkWrapper()$/;"	f	class:X86ISA::Walker
startWalkWrapperEvent	./arch/x86/pagetable_walker.hh	/^        EventWrapper<Walker, &Walker::startWalkWrapper> startWalkWrapperEvent;$/;"	m	class:X86ISA::Walker
startWrite	./mem/mem_checker.cc	/^MemChecker::ByteTracker::startWrite(MemChecker::Serial serial, Tick start,$/;"	f	class:MemChecker::ByteTracker
startWrite	./mem/mem_checker.cc	/^MemChecker::WriteCluster::startWrite(MemChecker::Serial serial, Tick _start,$/;"	f	class:MemChecker::WriteCluster
startWrite	./mem/mem_checker.hh	/^MemChecker::startWrite(Tick start, Addr addr, size_t size, const uint8_t *data)$/;"	f	class:MemChecker
start_conf	./mem/cache/prefetch/Prefetcher.py	/^    start_conf = Param.Int(4, "Starting confidence for new entries")$/;"	v	class:StridePrefetcher
start_index_bit	./mem/ruby/structures/RubyCache.py	/^    start_index_bit = Param.Int(6, "index start, default 6 for 64-byte line");$/;"	v	class:RubyCache
start_paddr	./mem/ruby/system/DMASequencer.hh	/^    uint64_t start_paddr;$/;"	m	struct:DMARequest
started	./arch/x86/pagetable_walker.hh	/^            bool started;$/;"	m	class:X86ISA::Walker::WalkerState
started	./cpu/kvm/vm.hh	/^    bool started;$/;"	m	class:KvmVM
startedUp	./arch/x86/interrupts.hh	/^    bool startedUp;$/;"	m	class:X86ISA::Interrupts
startingAddrSegment	./arch/x86/bios/smbios.hh	/^    uint16_t startingAddrSegment;$/;"	m	class:X86ISA::SMBios::BiosInformation
starting_addr_segment	./arch/x86/bios/SMBios.py	/^        Param.UInt16(0, "segment location of bios starting address")$/;"	v	class:X86SMBiosBiosInformation
startswith	./base/str.hh	/^startswith(const char *s, const char *prefix)$/;"	f
startswith	./base/str.hh	/^startswith(const std::string &s, const char *prefix)$/;"	f
startswith	./base/str.hh	/^startswith(const std::string &s, const std::string &prefix)$/;"	f
startup	./arch/alpha/isa.hh	/^        void startup(ThreadContext *tc) {}$/;"	f	class:AlphaISA::ISA
startup	./arch/alpha/system.cc	/^AlphaSystem::startup()$/;"	f	class:AlphaSystem
startup	./arch/arm/freebsd/system.cc	/^FreebsdArmSystem::startup()$/;"	f	class:FreebsdArmSystem
startup	./arch/arm/isa.hh	/^        void startup(ThreadContext *tc) {}$/;"	f	class:ArmISA::ISA
startup	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::startup()$/;"	f	class:ArmKvmCPU
startup	./arch/arm/kvm/base_cpu.cc	/^BaseArmKvmCPU::startup()$/;"	f	class:BaseArmKvmCPU
startup	./arch/arm/linux/system.cc	/^LinuxArmSystem::startup()$/;"	f	class:LinuxArmSystem
startup	./arch/mips/isa.hh	/^        void startup(ThreadContext *tc) {}$/;"	f	class:MipsISA::ISA
startup	./arch/power/isa.hh	/^    void startup(ThreadContext *tc) {}$/;"	f	class:PowerISA::ISA
startup	./arch/sparc/isa.hh	/^    void startup(ThreadContext *tc) {}$/;"	f	class:SparcISA::ISA
startup	./arch/x86/isa.cc	/^ISA::startup(ThreadContext *tc)$/;"	f	class:X86ISA::ISA
startup	./base/cp_annotate.cc	/^CPA::startup()$/;"	f	class:CPA
startup	./cpu/base.cc	/^BaseCPU::startup()$/;"	f	class:BaseCPU
startup	./cpu/kvm/base.cc	/^BaseKvmCPU::startup()$/;"	f	class:BaseKvmCPU
startup	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::startup()$/;"	f	class:X86KvmCPU
startup	./cpu/minor/cpu.cc	/^MinorCPU::startup()$/;"	f	class:MinorCPU
startup	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::startup()$/;"	f	class:FullO3CPU
startup	./cpu/simple/base.cc	/^BaseSimpleCPU::startup()$/;"	f	class:BaseSimpleCPU
startup	./cpu/simple_thread.cc	/^SimpleThread::startup()$/;"	f	class:SimpleThread
startup	./dev/alpha/backdoor.cc	/^AlphaBackdoor::startup()$/;"	f	class:AlphaBackdoor
startup	./dev/alpha/tsunami_io.cc	/^TsunamiIO::startup()$/;"	f	class:TsunamiIO
startup	./dev/arm/energy_ctrl.cc	/^EnergyCtrl::startup()$/;"	f	class:EnergyCtrl
startup	./dev/arm/rv_ctrl.cc	/^RealViewOsc::startup()$/;"	f	class:RealViewOsc
startup	./dev/intel_8254_timer.cc	/^Intel8254Timer::Counter::startup()$/;"	f	class:Intel8254Timer::Counter
startup	./dev/intel_8254_timer.cc	/^Intel8254Timer::startup()$/;"	f	class:Intel8254Timer
startup	./dev/mc146818.cc	/^MC146818::startup()$/;"	f	class:MC146818
startup	./dev/mips/malta_io.cc	/^MaltaIO::startup()$/;"	f	class:MaltaIO
startup	./dev/net/dist_etherlink.cc	/^DistEtherLink::startup()$/;"	f	class:DistEtherLink
startup	./dev/net/dist_iface.cc	/^DistIface::startup()$/;"	f	class:DistIface
startup	./dev/virtio/fs9p.cc	/^VirtIO9PDiod::startup()$/;"	f	class:VirtIO9PDiod
startup	./dev/virtio/fs9p.cc	/^VirtIO9PSocket::startup()$/;"	f	class:VirtIO9PSocket
startup	./dev/x86/cmos.cc	/^X86ISA::Cmos::startup()$/;"	f	class:X86ISA::Cmos
startup	./dev/x86/i8254.cc	/^X86ISA::I8254::startup()$/;"	f	class:X86ISA::I8254
startup	./mem/comm_monitor.cc	/^CommMonitor::startup()$/;"	f	class:CommMonitor
startup	./mem/dram_ctrl.cc	/^DRAMCtrl::Rank::startup(Tick ref_tick)$/;"	f	class:DRAMCtrl::Rank
startup	./mem/dram_ctrl.cc	/^DRAMCtrl::startup()$/;"	f	class:DRAMCtrl
startup	./mem/dramsim2.cc	/^DRAMSim2::startup()$/;"	f	class:DRAMSim2
startup	./mem/ruby/system/RubySystem.cc	/^RubySystem::startup()$/;"	f	class:RubySystem
startup	./sim/clock_domain.cc	/^SrcClockDomain::startup()$/;"	f	class:SrcClockDomain
startup	./sim/cxx_manager.cc	/^CxxConfigManager::startup()$/;"	f	class:CxxConfigManager
startup	./sim/sim_object.cc	/^SimObject::startup()$/;"	f	class:SimObject
startup	./sim/voltage_domain.cc	/^VoltageDomain::startup() {$/;"	f	class:VoltageDomain
startupCPU	./arch/alpha/utility.hh	/^inline void startupCPU(ThreadContext *tc, int cpuId)$/;"	f	namespace:AlphaISA
startupCPU	./arch/arm/utility.hh	/^inline void startupCPU(ThreadContext *tc, int cpuId)$/;"	f	namespace:ArmISA
startupCPU	./arch/mips/utility.cc	/^startupCPU(ThreadContext *tc, int cpuId)$/;"	f	namespace:MipsISA
startupCPU	./arch/null/utility.hh	/^inline void startupCPU(ThreadContext *tc, int cpuId) {}$/;"	f	namespace:NullISA
startupCPU	./arch/power/utility.hh	/^startupCPU(ThreadContext *tc, int cpuId)$/;"	f	namespace:PowerISA
startupCPU	./arch/sparc/utility.hh	/^startupCPU(ThreadContext *tc, int cpuId)$/;"	f	namespace:SparcISA
startupCPU	./arch/x86/utility.cc	/^void startupCPU(ThreadContext *tc, int cpuId)$/;"	f	namespace:X86ISA
startupStage	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::startupStage()$/;"	f	class:DefaultCommit
startupStage	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::startupStage()$/;"	f	class:DefaultDecode
startupStage	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::startupStage()$/;"	f	class:DefaultFetch
startupStage	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::startupStage()$/;"	f	class:DefaultIEW
startupStage	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::startupStage()$/;"	f	class:DefaultRename
startupThread	./cpu/kvm/base.cc	/^BaseKvmCPU::startupThread()$/;"	f	class:BaseKvmCPU
startupVector	./arch/x86/interrupts.hh	/^    uint8_t startupVector;$/;"	m	class:X86ISA::Interrupts
stat	./base/statistics.hh	/^    Stat &stat;$/;"	m	class:Stats::DistProxy
stat	./base/statistics.hh	/^    Stat &stat;$/;"	m	class:Stats::ScalarProxy
stat	./base/statistics.hh	/^    Stat &stat;$/;"	m	class:Stats::VectorProxy
stat	./kern/tru64/tru64_syscalls.hh	/^        stat = 224,$/;"	e	enum:SystemCalls::__anon102
stat64Func	./sim/syscall_emul.hh	/^stat64Func(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
statComBranches	./cpu/o3/commit.hh	/^    Stats::Vector statComBranches;$/;"	m	class:DefaultCommit
statComFloating	./cpu/o3/commit.hh	/^    Stats::Vector statComFloating;$/;"	m	class:DefaultCommit
statComFunctionCalls	./cpu/o3/commit.hh	/^    Stats::Vector statComFunctionCalls;$/;"	m	class:DefaultCommit
statComInteger	./cpu/o3/commit.hh	/^    Stats::Vector statComInteger;$/;"	m	class:DefaultCommit
statComLoads	./cpu/o3/commit.hh	/^    Stats::Vector statComLoads;$/;"	m	class:DefaultCommit
statComMembars	./cpu/o3/commit.hh	/^    Stats::Vector statComMembars;$/;"	m	class:DefaultCommit
statComRefs	./cpu/o3/commit.hh	/^    Stats::Vector statComRefs;$/;"	m	class:DefaultCommit
statComSwp	./cpu/o3/commit.hh	/^    Stats::Vector statComSwp;$/;"	m	class:DefaultCommit
statCommittedInstType	./cpu/o3/commit.hh	/^    Stats::Vector2d statCommittedInstType;$/;"	m	class:DefaultCommit
statElapsedTicks	./sim/stat_control.cc	/^statElapsedTicks()$/;"	f	namespace:Stats
statElapsedTime	./sim/stat_control.cc	/^statElapsedTime()$/;"	f	namespace:Stats
statExecutedInstType	./cpu/simple/exec_context.hh	/^   Stats::Vector statExecutedInstType;$/;"	m	class:SimpleExecContext
statFinalTick	./sim/stat_control.cc	/^statFinalTick()$/;"	f	namespace:Stats
statFuBusy	./cpu/o3/inst_queue.hh	/^    Stats::Vector statFuBusy;$/;"	m	class:InstructionQueue
statFunc	./sim/syscall_emul.hh	/^statFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
statIssuedInstType	./cpu/o3/inst_queue.hh	/^    Stats::Vector2d statIssuedInstType;$/;"	m	class:InstructionQueue
statPageSizes	./arch/arm/table_walker.hh	/^    Stats::Vector statPageSizes;$/;"	m	class:ArmISA::TableWalker
statPendingWalks	./arch/arm/table_walker.hh	/^    Stats::Histogram statPendingWalks; \/\/ essentially "L" of queueing theory$/;"	m	class:ArmISA::TableWalker
statRequestOrigin	./arch/arm/table_walker.hh	/^    Stats::Vector2d statRequestOrigin;$/;"	m	class:ArmISA::TableWalker
statSquashedAfter	./arch/arm/table_walker.hh	/^    Stats::Scalar statSquashedAfter;$/;"	m	class:ArmISA::TableWalker
statSquashedBefore	./arch/arm/table_walker.hh	/^    Stats::Scalar statSquashedBefore;$/;"	m	class:ArmISA::TableWalker
statWalkServiceTime	./arch/arm/table_walker.hh	/^    Stats::Histogram statWalkServiceTime;$/;"	m	class:ArmISA::TableWalker
statWalkWaitTime	./arch/arm/table_walker.hh	/^    Stats::Histogram statWalkWaitTime;$/;"	m	class:ArmISA::TableWalker
statWalks	./arch/arm/table_walker.hh	/^    Stats::Scalar statWalks;$/;"	m	class:ArmISA::TableWalker
statWalksLongDescriptor	./arch/arm/table_walker.hh	/^    Stats::Scalar statWalksLongDescriptor;$/;"	m	class:ArmISA::TableWalker
statWalksLongTerminatedAtLevel	./arch/arm/table_walker.hh	/^    Stats::Vector statWalksLongTerminatedAtLevel;$/;"	m	class:ArmISA::TableWalker
statWalksShortDescriptor	./arch/arm/table_walker.hh	/^    Stats::Scalar statWalksShortDescriptor;$/;"	m	class:ArmISA::TableWalker
statWalksShortTerminatedAtLevel	./arch/arm/table_walker.hh	/^    Stats::Vector statWalksShortTerminatedAtLevel;$/;"	m	class:ArmISA::TableWalker
stat_regA	./dev/mc146818.hh	/^    RtcRegA stat_regA;$/;"	m	class:MC146818
stat_regB	./dev/mc146818.hh	/^    RtcRegB stat_regB;$/;"	m	class:MC146818
state	./arch/arm/nativetrace.hh	/^        uint64_t state[2][STATE_NUMVALS];$/;"	m	struct:Trace::ArmNativeTrace::ThreadState
state	./arch/sparc/remote_gdb.hh	/^            uint64_t state;$/;"	m	struct:SparcISA::RemoteGDB::SPARC64GdbRegCache::__anon43
state	./arch/x86/decoder.hh	/^    State state;$/;"	m	class:X86ISA::Decoder
state	./arch/x86/pagetable_walker.hh	/^            State state;$/;"	m	class:X86ISA::Walker::WalkerState
state	./cpu/minor/fetch1.hh	/^        FetchRequestState state;$/;"	m	class:Minor::Fetch1::FetchRequest
state	./cpu/minor/fetch1.hh	/^    FetchState state;$/;"	m	class:Minor::Fetch1
state	./cpu/minor/lsq.hh	/^        LSQRequestState state;$/;"	m	class:Minor::LSQ::LSQRequest
state	./cpu/minor/lsq.hh	/^    MemoryState state;$/;"	m	class:Minor::LSQ
state	./cpu/translation.hh	/^    WholeTranslationState *state;$/;"	m	class:DataTranslation
state	./dev/i2c/bus.hh	/^    enum I2CState state;$/;"	m	class:I2CBus	typeref:enum:I2CBus::I2CState
state	./mem/xbar.hh	/^        State state;$/;"	m	class:BaseXBar::Layer
state	./sim/drain.hh	/^    DrainState state() const { return _state; }$/;"	f	class:DrainManager
statePermPairAdd	./mem/slicc/symbols/Type.py	/^    def statePermPairAdd(self, state_name, perm_name):$/;"	m	class:Type
stateQueues	./arch/arm/table_walker.hh	/^    std::list<WalkerState *> stateQueues[MAX_LOOKUP_LEVELS];$/;"	m	class:ArmISA::TableWalker
state_machine	./mem/slicc/ast/AST.py	/^    def state_machine(self):$/;"	m	class:AST
state_machine	./mem/slicc/symbols/SymbolTable.py	/^    def state_machine(self):$/;"	m	class:SymbolTable
state_str	./mem/slicc/generate/tex.py	/^        state_str = state.short$/;"	v
states	./arch/micro_asm.py	/^states = ($/;"	v
states	./cpu/testers/traffic_gen/traffic_gen.hh	/^    std::unordered_map<uint32_t, BaseGen*> states;$/;"	m	class:TrafficGen
statfs	./kern/tru64/tru64_syscalls.hh	/^        statfs = 227,$/;"	e	enum:SystemCalls::__anon102
statfsFunc	./sim/syscall_emul.hh	/^statfsFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
staticInst	./cpu/base_dyn_inst.hh	/^    const StaticInstPtr staticInst;$/;"	m	class:BaseDynInst
staticInst	./cpu/minor/dyn_inst.hh	/^    StaticInstPtr staticInst;$/;"	m	class:Minor::MinorDynInst
staticInst	./sim/insttracer.hh	/^    StaticInstPtr staticInst;$/;"	m	class:Trace::InstRecord
static_backend_latency	./mem/DRAMCtrl.py	/^    static_backend_latency = Param.Latency("10ns", "Static backend latency")$/;"	v	class:DRAMCtrl
static_backend_latency	./mem/DRAMCtrl.py	/^    static_backend_latency='4ns'$/;"	v	class:HMC_2500_x32
static_frontend_latency	./mem/DRAMCtrl.py	/^    static_frontend_latency = Param.Latency("10ns", "Static frontend latency")$/;"	v	class:DRAMCtrl
static_frontend_latency	./mem/DRAMCtrl.py	/^    static_frontend_latency='4ns'$/;"	v	class:HMC_2500_x32
stats	./cpu/minor/cpu.hh	/^    Minor::MinorStats stats;$/;"	m	class:MinorCPU
stats	./dev/arm/flash_device.hh	/^    struct FlashDeviceStats stats;$/;"	m	class:FlashDevice	typeref:struct:FlashDevice::FlashDeviceStats
stats	./dev/arm/hdlcd.hh	/^    } stats;$/;"	m	class:HDLcd	typeref:struct:HDLcd::__anon23
stats	./dev/arm/ufs_device.hh	/^    struct UFSHostDeviceStats stats;$/;"	m	class:UFSHostDevice	typeref:struct:UFSHostDevice::UFSHostDeviceStats
stats	./mem/comm_monitor.hh	/^    MonitorStats stats;$/;"	m	class:CommMonitor
statsList	./base/statistics.cc	/^statsList()$/;"	f	namespace:Stats
statsMap	./base/statistics.cc	/^statsMap()$/;"	f	namespace:Stats
stats_dict	./python/m5/stats/__init__.py	/^stats_dict = {}$/;"	v
stats_list	./python/m5/stats/__init__.py	/^stats_list = []$/;"	v
stattest_init	./unittest/stattest.cc	/^stattest_init()$/;"	f
stattest_run	./unittest/stattest.cc	/^stattest_run()$/;"	f
status	./arch/arm/miscregs.hh	/^        Bitfield<5, 0> status;  \/\/ LPAE$/;"	m	namespace:ArmISA
status	./arch/x86/interrupts.hh	/^        Bitfield<12> status;$/;"	m	class:X86ISA::Interrupts
status	./base/debug.hh	/^    bool status() const { return _tracing; }$/;"	f	class:Debug::SimpleFlag
status	./cpu/base_dyn_inst.hh	/^    std::bitset<NumStatus> status;$/;"	m	class:BaseDynInst
status	./cpu/checker/thread_context.hh	/^    Status status() const { return actualTC->status(); }$/;"	f	class:CheckerThreadContext
status	./cpu/o3/thread_context.hh	/^    virtual Status status() const { return thread->status(); }$/;"	f	class:O3ThreadContext
status	./cpu/simple_thread.hh	/^    Status status() const { return _status; }$/;"	f	class:SimpleThread
status	./cpu/thread_context.hh	/^    Status status() const { return actualTC->status(); }$/;"	f	class:ProxyThreadContext
status	./cpu/thread_state.hh	/^    Status status() const { return _status; }$/;"	f	struct:ThreadState
status	./dev/arm/kmi.hh	/^    StatusReg status;$/;"	m	class:Pl050
status	./dev/arm/ufs_device.hh	/^        uint8_t status;$/;"	m	struct:UFSHostDevice::SCSIReply
status	./dev/net/i8254xGBe_defs.hh	/^            uint32_t status:20;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon8
status	./dev/net/i8254xGBe_defs.hh	/^            uint8_t status;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon6
status	./dev/pci/copy_engine_defs.hh	/^    CHANSTS status;$/;"	m	struct:CopyEngineReg::ChanRegs
status	./dev/pci/pcireg.h	/^        uint16_t status;$/;"	m	struct:PCIConfig::__anon26
status	./dev/storage/ide_ctrl.hh	/^            BMIStatusReg status;$/;"	m	struct:IdeController::Channel::BMIRegs
status	./dev/storage/ide_disk.hh	/^    uint8_t status;$/;"	m	class:IdeDisk
status	./dev/uart.hh	/^    int status;$/;"	m	class:Uart
status	./dev/x86/i8042.hh	/^    Status status;$/;"	m	class:X86ISA::PS2Mouse
status	./mem/cache/blk.hh	/^    State status;$/;"	m	class:CacheBlk
statusCheck	./dev/arm/ufs_device.cc	/^UFSHostDevice::UFSSCSIDevice::statusCheck(uint8_t status,$/;"	f	class:UFSHostDevice::UFSSCSIDevice
statusCompleteEvent	./dev/pci/copy_engine.hh	/^            statusCompleteEvent;$/;"	m	class:CopyEngine::CopyEngineChannel
statusReg	./dev/x86/i8042.hh	/^    StatusReg statusReg;$/;"	m	class:X86ISA::I8042
stayAtPC	./cpu/simple/exec_context.hh	/^    bool stayAtPC;$/;"	m	class:SimpleExecContext
std	./arch/arm/types.hh	/^namespace std {$/;"	n
std	./arch/power/types.hh	/^namespace std {$/;"	n
std	./arch/x86/types.hh	/^namespace std {$/;"	n
std	./base/cp_annotate.hh	/^namespace std {$/;"	n
std	./cpu/simple/probes/simpoint.hh	/^namespace std {$/;"	n
std	./doxygen/stl.hh	/^namespace std {$/;"	n
step	./arch/arm/insts/macromem.hh	/^    uint32_t step;$/;"	m	class:ArmISA::MicroNeonMixOp
step	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, lane, step;$/;"	m	class:ArmISA::MicroNeonMixLaneOp64
step	./arch/arm/insts/macromem.hh	/^    uint8_t eSize, dataSize, numStructElems, numRegs, step;$/;"	m	class:ArmISA::MicroNeonMixOp64
step	./cpu/minor/lsq.cc	/^LSQ::StoreBuffer::step()$/;"	f	class:Minor::LSQ::StoreBuffer
step	./cpu/minor/lsq.cc	/^LSQ::step()$/;"	f	class:Minor::LSQ
stepQueues	./cpu/minor/fetch1.cc	/^Fetch1::stepQueues()$/;"	f	class:Minor::Fetch1
stepToNextPacket	./cpu/minor/lsq.cc	/^LSQ::SplitDataRequest::stepToNextPacket()$/;"	f	class:Minor::LSQ::SplitDataRequest
stepToNextPacket	./cpu/minor/lsq.hh	/^        void stepToNextPacket() { packetInFlight = true; packetSent = true; }$/;"	f	class:Minor::LSQ::SingleDataRequest
stepToNextPacket	./cpu/minor/lsq.hh	/^        void stepToNextPacket() { }$/;"	f	class:Minor::LSQ::SpecialDataRequest
stepWalk	./arch/x86/pagetable_walker.cc	/^Walker::WalkerState::stepWalk(PacketPtr &write)$/;"	f	class:X86ISA::Walker::WalkerState
stepping	./arch/x86/bios/IntelMP.py	/^    stepping = Param.UInt8(0, 'Processor stepping')$/;"	v	class:X86IntelMPProcessor
stick	./arch/sparc/isa.hh	/^    uint64_t stick;         \/\/ Hardware clock-tick counter$/;"	m	class:SparcISA::ISA
stick_cmpr	./arch/sparc/isa.hh	/^    uint64_t stick_cmpr;    \/\/ Hardware tick compare registers$/;"	m	class:SparcISA::ISA
stl_helpers	./base/stl_helpers.hh	/^namespace stl_helpers {$/;"	n	namespace:m5
stlb	./arch/mips/mt_constants.hh	/^    Bitfield<2> stlb;$/;"	m	namespace:MipsISA
stop	./cpu/kvm/perfevent.cc	/^PerfKvmCounter::stop()$/;"	f	class:PerfKvmCounter
stop	./dev/pixelpump.cc	/^BasePixelPump::stop()$/;"	f	class:BasePixelPump
stop	./sim/ticked_object.hh	/^    stop()$/;"	f	class:Ticked
stop	./unittest/cprintftime.cc	/^volatile int stop = false;$/;"	v
stopFill	./dev/dma_device.cc	/^DmaReadFifo::stopFill()$/;"	f	class:DmaReadFifo
stopOnPCError	./arch/arm/nativetrace.hh	/^    bool stopOnPCError;$/;"	m	class:Trace::ArmNativeTrace
stop_on_pc_error	./arch/arm/ArmNativeTrace.py	/^    stop_on_pc_error = Param.Bool(True,$/;"	v	class:ArmNativeTrace
storage	./arch/arm/linux/atag.hh	/^    uint32_t *storage;$/;"	m	class:AtagHeader
storage	./base/statistics.hh	/^    Storage *storage;$/;"	m	class:Stats::Vector2dBase
storage	./base/statistics.hh	/^    Storage *storage;$/;"	m	class:Stats::VectorBase
storage	./base/statistics.hh	/^    Storage *storage;$/;"	m	class:Stats::VectorDistBase
storage	./base/statistics.hh	/^    char storage[sizeof(Storage)] __attribute__ ((aligned (8)));$/;"	m	class:Stats::DistBase
storage	./base/statistics.hh	/^    char storage[sizeof(Storage)] __attribute__ ((aligned (8)));$/;"	m	class:Stats::ScalarBase
storage	./base/statistics.hh	/^    char storage[sizeof(Storage)];$/;"	m	class:Stats::SparseHistBase
storageParams	./base/stats/info.hh	/^    const StorageParams *storageParams;$/;"	m	class:Stats::Info
store	./arch/mips/faults.hh	/^    bool store;$/;"	m	class:MipsISA::AddressFault
store	./mem/ruby/profiler/StoreTrace.cc	/^StoreTrace::store(NodeID node)$/;"	f	class:StoreTrace
storeAllDataRegs	./arch/x86/isa/insts/simd128/integer/save_and_restore_state/save_and_restore_state.py	/^    "".join([storeX87RegTemplate % { "idx" : i, "mode" : "%(mode)s" }$/;"	v
storeBarrier	./cpu/o3/mem_dep_unit.hh	/^    bool storeBarrier;$/;"	m	class:MemDepUnit
storeBarrierSN	./cpu/o3/mem_dep_unit.hh	/^    InstSeqNum storeBarrierSN;$/;"	m	class:MemDepUnit
storeBuffer	./cpu/minor/lsq.hh	/^    StoreBuffer storeBuffer;$/;"	m	class:Minor::LSQ
storeCondFailures	./cpu/thread_state.hh	/^    unsigned storeCondFailures;$/;"	m	struct:ThreadState
storeEventInfo	./mem/ruby/common/Consumer.hh	/^    virtual void storeEventInfo(int info) {}$/;"	f	class:Consumer
storeEventInfo	./mem/ruby/network/simple/PerfectSwitch.cc	/^PerfectSwitch::storeEventInfo(int info)$/;"	f	class:PerfectSwitch
storeFloat80	./arch/x86/utility.cc	/^storeFloat80(void *_mem, double value)$/;"	f	namespace:X86ISA
storeHead	./cpu/o3/lsq_unit.hh	/^    int storeHead;$/;"	m	class:LSQUnit
storeInFlight	./cpu/o3/lsq_unit.hh	/^    bool storeInFlight;$/;"	m	class:LSQUnit
storeLimitPerCycle	./cpu/minor/lsq.hh	/^        const unsigned int storeLimitPerCycle;$/;"	m	class:Minor::LSQ::StoreBuffer
storeList	./cpu/o3/store_set.hh	/^    std::map<InstSeqNum, int, ltseqnum> storeList;$/;"	m	class:StoreSet
storePostSend	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::storePostSend(PacketPtr pkt)$/;"	f	class:LSQUnit
storeQueue	./cpu/o3/lsq_unit.hh	/^    std::vector<SQEntry> storeQueue;$/;"	m	class:LSQUnit
storeTail	./cpu/o3/lsq_unit.hh	/^    int storeTail;$/;"	m	class:LSQUnit
storeTick	./cpu/o3/dyn_inst.hh	/^    int32_t storeTick;$/;"	m	class:BaseO3DynInst
storeWBIdx	./cpu/o3/lsq_unit.hh	/^    int storeWBIdx;$/;"	m	class:LSQUnit
store_set_clear_period	./cpu/o3/O3CPU.py	/^    store_set_clear_period = Param.Unsigned(250000,$/;"	v	class:DerivO3CPU
stores	./cpu/o3/lsq_unit.hh	/^    int stores;$/;"	m	class:LSQUnit
storesInProgress	./cpu/o3/rename.hh	/^    int storesInProgress[Impl::MaxThreads];$/;"	m	class:DefaultRename
storesToWB	./cpu/o3/lsq_unit.hh	/^    int storesToWB;$/;"	m	class:LSQUnit
stq	./base/cp_annotate.hh	/^        uint16_t stq;$/;"	m	struct:CPA::AnnotateData
str	./base/statistics.cc	/^Formula::str() const$/;"	f	class:Stats::Formula
str	./base/statistics.hh	/^    static std::string str() { return "%"; }$/;"	f	struct:Stats::OpString
str	./base/statistics.hh	/^    static std::string str() { return "*"; }$/;"	f	struct:Stats::OpString
str	./base/statistics.hh	/^    static std::string str() { return "+"; }$/;"	f	struct:Stats::OpString
str	./base/statistics.hh	/^    static std::string str() { return "-"; }$/;"	f	struct:Stats::OpString
str	./base/statistics.hh	/^    static std::string str() { return "\/"; }$/;"	f	struct:Stats::OpString
str	./base/statistics.hh	/^    std::string str() const { return data->name; }$/;"	f	class:Stats::ScalarStatNode
str	./base/statistics.hh	/^    std::string str() const { return data->name; }$/;"	f	class:Stats::VectorStatNode
str	./base/statistics.hh	/^    std::string str() const { return formula.str(); }$/;"	f	class:Stats::FormulaNode
str	./base/statistics.hh	/^    std::string str() const { return proxy->str(); }$/;"	f	class:Stats::ValueBase
str	./base/statistics.hh	/^    std::string str() const { return std::to_string(value()); }$/;"	f	class:Stats::ProxyInfo
str	./base/statistics.hh	/^    std::string str() const { return std::to_string(vresult[0]); }$/;"	f	class:Stats::ConstNode
str	./base/statistics.hh	/^    std::string str() const { return this->s.str(); }$/;"	f	class:Stats::FormulaInfoProxy
str	./base/statistics.hh	/^    str() const$/;"	f	class:Stats::BinaryNode
str	./base/statistics.hh	/^    str() const$/;"	f	class:Stats::ConstVectorNode
str	./base/statistics.hh	/^    str() const$/;"	f	class:Stats::ScalarProxy
str	./base/statistics.hh	/^    str() const$/;"	f	class:Stats::ScalarProxyNode
str	./base/statistics.hh	/^    str() const$/;"	f	class:Stats::SumNode
str	./base/statistics.hh	/^    str() const$/;"	f	class:Stats::UnaryNode
str	./base/trace.hh	/^    std::string str;$/;"	m	struct:StringWrap
str	./mem/packet.hh	/^        const std::string str;$/;"	m	struct:MemCmd::CommandInfo
strandStatusReg	./arch/sparc/isa.hh	/^    uint64_t strandStatusReg;\/\/ Per strand status register$/;"	m	class:SparcISA::ISA
stream	./base/cprintf.hh	/^    std::ostream &stream;$/;"	m	struct:cp::Print
stream	./base/stats/text.hh	/^    std::ostream *stream;$/;"	m	class:Stats::Text
stream	./base/trace.hh	/^    std::ostream &stream;$/;"	m	class:Trace::OstreamLogger
stream	./dev/net/etherdump.hh	/^    std::ostream *stream;$/;"	m	class:EtherDump
stream	./dev/storage/disk_image.hh	/^    mutable std::fstream stream;$/;"	m	class:RawDiskImage
streamSeqNum	./cpu/minor/dyn_inst.hh	/^    InstSeqNum streamSeqNum;$/;"	m	class:Minor::InstId
streamSeqNum	./cpu/minor/execute.hh	/^    InstSeqNum streamSeqNum;$/;"	m	class:Minor::Execute
streamSeqNum	./cpu/minor/fetch1.hh	/^    InstSeqNum streamSeqNum;$/;"	m	class:Minor::Fetch1
strictlyOrdered	./cpu/base_dyn_inst.hh	/^    bool strictlyOrdered() const { return instFlags[IsStrictlyOrdered]; }$/;"	f	class:BaseDynInst
strictlyOrdered	./cpu/o3/comm.hh	/^        bool strictlyOrdered; \/\/ *I$/;"	m	struct:TimeBufStruct::commitComm
strictlyOrderedLoad	./cpu/o3/comm.hh	/^        DynInstPtr strictlyOrderedLoad; \/\/ *I$/;"	m	struct:TimeBufStruct::commitComm
stride	./arch/arm/miscregs.hh	/^        Bitfield<21, 20> stride;$/;"	m	namespace:ArmISA
stride	./mem/cache/prefetch/stride.hh	/^        int stride;$/;"	m	struct:StridePrefetcher::StrideEntry
string	./base/cprintf_formats.hh	/^    enum { none, string, integer, character, floating } format;$/;"	e	enum:cp::Format::__anon118
string	./base/inet.cc	/^EthAddr::string() const$/;"	f	class:Net::EthAddr
string	./base/inet.cc	/^IpAddress::string() const$/;"	f	class:Net::IpAddress
string	./base/inet.cc	/^IpNetmask::string() const$/;"	f	class:Net::IpNetmask
string	./base/inet.cc	/^IpWithPort::string() const$/;"	f	class:Net::IpWithPort
stringFields	./arch/x86/bios/smbios.hh	/^    bool stringFields;$/;"	m	class:X86ISA::SMBios::SMBiosStructure
stringRE	./arch/isa_parser.py	/^stringRE = re.compile(r'"([^"\\\\]|\\\\.)*"')$/;"	v
stringToRegister	./arch/x86/cpuid.cc	/^    stringToRegister(const char *str)$/;"	f	namespace:X86ISA
strings	./arch/x86/bios/smbios.hh	/^    std::vector<std::string> strings;$/;"	m	class:X86ISA::SMBios::SMBiosStructure
stripes	./base/addr_range.hh	/^    uint32_t stripes() const { return ULL(1) << intlvBits; }$/;"	f	class:AddrRange
structures	./arch/x86/bios/SMBios.py	/^    structures = VectorParam.X86SMBiosSMBiosStructure([], "smbios structures")$/;"	v	class:X86SMBiosSMBiosTable
structures	./arch/x86/bios/smbios.hh	/^    std::vector<SMBiosStructure *> structures;$/;"	m	class:X86ISA::SMBios::SMBiosTable
sts	./dev/net/i8254xGBe_defs.hh	/^    STATUS sts;$/;"	m	struct:iGbReg::Regs
su	./arch/mips/pra_constants.hh	/^    Bitfield<15, 12> su;$/;"	m	namespace:MipsISA
sub128	./arch/arm/insts/fplib.cc	/^sub128(uint64_t *x0, uint64_t *x1, uint64_t a0, uint64_t a1, uint64_t b0,$/;"	f	namespace:ArmISA
subArchDefined	./arch/arm/miscregs.hh	/^        Bitfield<29, 0> subArchDefined;$/;"	m	namespace:ArmISA
subBlock	./cpu/testers/rubytest/RubyTester.hh	/^        SubBlock subBlock;$/;"	m	struct:RubyTester::SenderState
subClassCode	./dev/pci/pcireg.h	/^        uint8_t subClassCode;$/;"	m	struct:PCIConfig::__anon26
subdesc	./base/statistics.hh	/^    subdesc(off_type index, const std::string &desc)$/;"	f	class:Stats::DataWrapVec
subdescs	./base/stats/info.hh	/^    std::vector<std::string> subdescs;$/;"	m	class:Stats::Vector2dInfo
subdescs	./base/stats/info.hh	/^    std::vector<std::string> subdescs;$/;"	m	class:Stats::VectorDistInfo
subdescs	./base/stats/info.hh	/^    std::vector<std::string> subdescs;$/;"	m	class:Stats::VectorInfo
subdescs	./base/stats/text.cc	/^    vector<string> subdescs;$/;"	m	struct:Stats::VectorPrint	file:
submode	./arch/x86/decoder.hh	/^    X86SubMode submode;$/;"	m	class:X86ISA::Decoder
submode	./arch/x86/regs/misc.hh	/^        Bitfield<3, 1> submode;$/;"	m	namespace:X86ISA
submode	./arch/x86/types.hh	/^        Bitfield<2,0> submode;$/;"	m	namespace:X86ISA
subname	./base/statistics.hh	/^    subname(off_type index, const std::string &name)$/;"	f	class:Stats::DataWrapVec
subnames	./base/stats/info.hh	/^    std::vector<std::string> subnames;$/;"	m	class:Stats::Vector2dInfo
subnames	./base/stats/info.hh	/^    std::vector<std::string> subnames;$/;"	m	class:Stats::VectorDistInfo
subnames	./base/stats/info.hh	/^    std::vector<std::string> subnames;$/;"	m	class:Stats::VectorInfo
subnames	./base/stats/text.cc	/^    vector<string> subnames;$/;"	m	struct:Stats::VectorPrint	file:
suboption	./python/m5/util/jobfile.py	/^    def suboption(self, name, desc, **kwargs):$/;"	m	class:Option
subopts	./python/m5/util/jobfile.py	/^    def subopts(self):$/;"	m	class:Group
subopts	./python/m5/util/jobfile.py	/^    def subopts(self):$/;"	m	class:Option
subst	./arch/isa_parser.py	/^    def subst(self, d):$/;"	m	class:Template
substBitOps	./arch/isa_parser.py	/^def substBitOps(code):$/;"	f
substMungedOpNames	./arch/isa_parser.py	/^    def substMungedOpNames(self, code):$/;"	m	class:ISAParser
subsys_info	./kern/tru64/tru64_syscalls.hh	/^        subsys_info = 255,$/;"	e	enum:SystemCalls::__anon102
subsystem	./dev/virtio/VirtIO.py	/^    subsystem = Param.UInt8(0x00, "VirtIO subsystem ID")$/;"	v	class:VirtIODeviceBase
subsystemID	./dev/pci/pcireg.h	/^        uint16_t subsystemID;$/;"	m	struct:PCIConfig::__anon26
subsystemVendorID	./dev/pci/pcireg.h	/^        uint16_t subsystemVendorID;$/;"	m	struct:PCIConfig::__anon26
subtractive_decode	./arch/x86/bios/IntelMP.py	/^    subtractive_decode = Param.Bool(False,$/;"	v	class:X86IntelMPBusHierarchy
succeededTiming	./mem/xbar.cc	/^BaseXBar::Layer<SrcType,DstType>::succeededTiming(Tick busy_time)$/;"	f	class:BaseXBar::Layer
successful	./sim/syscallreturn.hh	/^    bool successful() const$/;"	f	class:SyscallReturn
suffixize	./arch/isa_parser.py	/^    def suffixize(self, s, sec):$/;"	m	class:ISAParser
sum	./base/inet.hh	/^    uint16_t sum() const { return ip_sum; }$/;"	f	struct:Net::IpHdr
sum	./base/inet.hh	/^    uint16_t sum() const { return th_sum; }$/;"	f	struct:Net::TcpHdr
sum	./base/inet.hh	/^    uint16_t sum() const { return uh_sum; }$/;"	f	struct:Net::UdpHdr
sum	./base/inet.hh	/^    void sum(uint16_t sum) { ip_sum = sum; }$/;"	f	struct:Net::IpHdr
sum	./base/inet.hh	/^    void sum(uint16_t sum) { th_sum = sum; }$/;"	f	struct:Net::TcpHdr
sum	./base/inet.hh	/^    void sum(uint16_t sum) { uh_sum = sum; }$/;"	f	struct:Net::UdpHdr
sum	./base/statistics.hh	/^    Counter sum;$/;"	m	class:Stats::AvgSampleStor
sum	./base/statistics.hh	/^    Counter sum;$/;"	m	class:Stats::DistStor
sum	./base/statistics.hh	/^    Counter sum;$/;"	m	class:Stats::HistStor
sum	./base/statistics.hh	/^    Counter sum;$/;"	m	class:Stats::SampleStor
sum	./base/statistics.hh	/^sum(Temp val)$/;"	f	namespace:Stats
sum	./base/stats/info.hh	/^    Counter sum;$/;"	m	struct:Stats::DistData
sumLeft	./mem/stack_dist_calc.hh	/^        uint64_t sumLeft;$/;"	m	struct:StackDistCalc::Node
sumRight	./mem/stack_dist_calc.hh	/^        uint64_t sumRight;$/;"	m	struct:StackDistCalc::Node
sun4u	./arch/sparc/pagetable.hh	/^      sun4u,$/;"	e	enum:SparcISA::PageTableEntry::EntryType
sun4v	./arch/sparc/pagetable.hh	/^      sun4v,$/;"	e	enum:SparcISA::PageTableEntry::EntryType
supersection	./arch/arm/table_walker.hh	/^        bool supersection() const$/;"	f	class:ArmISA::TableWalker::L1Descriptor
support_data_reqs	./mem/ruby/system/Sequencer.py	/^    support_data_reqs = Param.Bool(True, "data cache requests supported")$/;"	v	class:RubyPort
support_inst_reqs	./mem/ruby/system/Sequencer.py	/^    support_inst_reqs = Param.Bool(True, "inst cache requests supported")$/;"	v	class:RubyPort
support_take_over	./cpu/BaseCPU.py	/^    def support_take_over(cls):$/;"	f
support_take_over	./cpu/kvm/BaseKvmCPU.py	/^    def support_take_over(cls):$/;"	f
support_take_over	./cpu/minor/MinorCPU.py	/^    def support_take_over(cls):$/;"	m	class:MinorCPU
support_take_over	./cpu/o3/O3CPU.py	/^    def support_take_over(cls):$/;"	m	class:DerivO3CPU
support_take_over	./cpu/simple/AtomicSimpleCPU.py	/^    def support_take_over(cls):$/;"	m	class:AtomicSimpleCPU
support_take_over	./cpu/simple/TimingSimpleCPU.py	/^    def support_take_over(cls):$/;"	m	class:TimingSimpleCPU
support_take_over	./cpu/trace/TraceCPU.py	/^    def support_take_over(cls):$/;"	m	class:TraceCPU
supportedCPUIDCache	./cpu/kvm/vm.hh	/^    mutable CPUIDVector supportedCPUIDCache;$/;"	m	class:Kvm
supportedMSRCache	./cpu/kvm/vm.hh	/^    mutable MSRIndexVector supportedMSRCache;$/;"	m	class:Kvm
supportsRawEnc	./base/vnc/vncserver.hh	/^    bool supportsRawEnc;$/;"	m	class:VncServer
supportsResizeEnc	./base/vnc/vncserver.hh	/^    bool supportsResizeEnc;$/;"	m	class:VncServer
suppress	./cpu/minor/MinorCPU.py	/^    suppress = Param.Bool(False, "if true, this inst. is not executed by"$/;"	v	class:MinorFUTiming
suppress	./cpu/minor/func_unit.hh	/^    bool suppress;$/;"	m	class:MinorFUTiming
suppressFuncError	./mem/packet.hh	/^    bool suppressFuncError() const  { return flags.isSet(SUPPRESS_FUNC_ERROR); }$/;"	f	class:Packet
suppressFuncWarnings	./cpu/testers/memtest/memtest.hh	/^    const bool suppressFuncWarnings;$/;"	m	class:MemTest
suppress_func_warnings	./cpu/testers/memtest/MemTest.py	/^                                            "functional accesses fail.")$/;"	v	class:MemTest
suspend	./cpu/checker/thread_context.hh	/^    void suspend() { actualTC->suspend(); }$/;"	f	class:CheckerThreadContext
suspend	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::suspend()$/;"	f	class:O3ThreadContext
suspend	./cpu/simple_thread.cc	/^SimpleThread::suspend()$/;"	f	class:SimpleThread
suspend	./cpu/thread_context.hh	/^    void suspend() { actualTC->suspend(); }$/;"	f	class:ProxyThreadContext
suspend	./dev/pixelpump.cc	/^BasePixelPump::PixelEvent::suspend()$/;"	f	class:BasePixelPump::PixelEvent
suspend	./mem/dram_ctrl.cc	/^DRAMCtrl::Rank::suspend()$/;"	f	class:DRAMCtrl::Rank
suspendContext	./cpu/base.hh	/^    virtual void suspendContext(ThreadID thread_num) {}$/;"	f	class:BaseCPU
suspendContext	./cpu/kvm/base.cc	/^BaseKvmCPU::suspendContext(ThreadID thread_num)$/;"	f	class:BaseKvmCPU
suspendContext	./cpu/minor/cpu.cc	/^MinorCPU::suspendContext(ThreadID thread_id)$/;"	f	class:MinorCPU
suspendContext	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::suspendContext(ThreadID tid)$/;"	f	class:FullO3CPU
suspendContext	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::suspendContext(ThreadID thread_num)$/;"	f	class:AtomicSimpleCPU
suspendContext	./cpu/simple/timing.cc	/^TimingSimpleCPU::suspendContext(ThreadID thread_num)$/;"	f	class:TimingSimpleCPU
suspended	./dev/pixelpump.hh	/^        bool suspended;$/;"	m	class:BasePixelPump::PixelEvent
svme	./arch/x86/regs/misc.hh	/^        Bitfield<12> svme; \/\/ Secure virtual machine enable$/;"	m	namespace:X86ISA
sw	./arch/arm/miscregs.hh	/^        Bitfield<10>   sw;      \/\/ SWP\/SWPB enable (ARMv7 only)$/;"	m	namespace:ArmISA
swAq	./base/cp_annotate.cc	/^CPA::swAq(ThreadContext *tc)$/;"	f	class:CPA
swAq	./base/cp_annotate.hh	/^    void swAq(ThreadContext *tc)                                  { return; }$/;"	f	class:CPA
swAutoBegin	./base/cp_annotate.cc	/^CPA::swAutoBegin(ThreadContext *tc, Addr next_pc)$/;"	f	class:CPA
swAutoBegin	./base/cp_annotate.hh	/^    void swAutoBegin(ThreadContext *tc, Addr next_pc)             { return; }$/;"	f	class:CPA
swBegin	./base/cp_annotate.cc	/^CPA::swBegin(System *sys, int cpuid, std::string st, uint64_t frame, bool expl,$/;"	f	class:CPA
swDq	./base/cp_annotate.cc	/^CPA::swDq(ThreadContext *tc)$/;"	f	class:CPA
swDq	./base/cp_annotate.hh	/^    void swDq(ThreadContext *tc)                                  { return; }$/;"	f	class:CPA
swEnd	./base/cp_annotate.cc	/^CPA::swEnd(ThreadContext *tc)$/;"	f	class:CPA
swEnd	./base/cp_annotate.hh	/^    void swEnd(ThreadContext *tc)                                 { return; }$/;"	f	class:CPA
swExpl	./base/cp_annotate.hh	/^    SwExpl swExpl;$/;"	m	class:CPA
swExplictBegin	./base/cp_annotate.cc	/^CPA::swExplictBegin(ThreadContext *tc)$/;"	f	class:CPA
swExplictBegin	./base/cp_annotate.hh	/^    void swExplictBegin(ThreadContext *tc)                        { return; }$/;"	f	class:CPA
swGetId	./base/cp_annotate.cc	/^CPA::swGetId(ThreadContext *tc)$/;"	f	class:CPA
swGetId	./base/cp_annotate.hh	/^    uint64_t swGetId(ThreadContext *tc)                         { return 0; }$/;"	f	class:CPA
swIdentify	./base/cp_annotate.cc	/^CPA::swIdentify(ThreadContext *tc)$/;"	f	class:CPA
swIdentify	./base/cp_annotate.hh	/^    void swIdentify(ThreadContext *tc)                            { return; }$/;"	f	class:CPA
swLink	./base/cp_annotate.cc	/^CPA::swLink(ThreadContext *tc)$/;"	f	class:CPA
swLink	./base/cp_annotate.hh	/^    void swLink(ThreadContext *tc)                                { return; }$/;"	f	class:CPA
swPq	./base/cp_annotate.cc	/^CPA::swPq(ThreadContext *tc)$/;"	f	class:CPA
swPq	./base/cp_annotate.hh	/^    void swPq(ThreadContext *tc)                                  { return; }$/;"	f	class:CPA
swQ	./base/cp_annotate.cc	/^CPA::swQ(ThreadContext *tc)$/;"	f	class:CPA
swQ	./base/cp_annotate.hh	/^    void swQ(ThreadContext *tc)                                   { return; }$/;"	f	class:CPA
swRq	./base/cp_annotate.cc	/^CPA::swRq(ThreadContext *tc)$/;"	f	class:CPA
swRq	./base/cp_annotate.hh	/^    void swRq(ThreadContext *tc)                                  { return; }$/;"	f	class:CPA
swSmBegin	./base/cp_annotate.cc	/^CPA::swSmBegin(ThreadContext *tc)$/;"	f	class:CPA
swSmBegin	./base/cp_annotate.hh	/^    void swSmBegin(ThreadContext *tc)                             { return; }$/;"	f	class:CPA
swSmEnd	./base/cp_annotate.cc	/^CPA::swSmEnd(ThreadContext *tc)$/;"	f	class:CPA
swSmEnd	./base/cp_annotate.hh	/^    void swSmEnd(ThreadContext *tc)                               { return; }$/;"	f	class:CPA
swSq	./base/cp_annotate.cc	/^CPA::swSq(ThreadContext *tc)$/;"	f	class:CPA
swSq	./base/cp_annotate.hh	/^    void swSq(ThreadContext *tc)                                  { return; }$/;"	f	class:CPA
swSyscallLink	./base/cp_annotate.cc	/^CPA::swSyscallLink(ThreadContext  *tc)$/;"	f	class:CPA
swSyscallLink	./base/cp_annotate.hh	/^    void swSyscallLink(ThreadContext *tc)                         { return; }$/;"	f	class:CPA
swWe	./base/cp_annotate.cc	/^CPA::swWe(ThreadContext *tc)$/;"	f	class:CPA
swWe	./base/cp_annotate.hh	/^    void swWe(ThreadContext *tc)                                  { return; }$/;"	f	class:CPA
swWf	./base/cp_annotate.cc	/^CPA::swWf(ThreadContext *tc)$/;"	f	class:CPA
swWf	./base/cp_annotate.hh	/^    void swWf(ThreadContext *tc)                                  { return; }$/;"	f	class:CPA
sw_fw_sync	./dev/net/i8254xGBe_defs.hh	/^    uint32_t sw_fw_sync;$/;"	m	struct:iGbReg::Regs
swap	./kern/tru64/tru64.hh	/^        size_t  swap;           \/\/!< amount of swap to reserve$/;"	m	struct:Tru64::vm_stack
swapActiveThread	./cpu/simple/base.cc	/^BaseSimpleCPU::swapActiveThread()$/;"	f	class:BaseSimpleCPU
swap_byte	./sim/byteswap.hh	/^inline T swap_byte(T x) {$/;"	f
swap_byte	./sim/byteswap.hh	/^inline Twin32_t swap_byte<Twin32_t>(Twin32_t x)$/;"	f
swap_byte	./sim/byteswap.hh	/^inline Twin64_t swap_byte<Twin64_t>(Twin64_t x)$/;"	f
swap_byte16	./sim/byteswap.hh	/^swap_byte16(uint16_t x)$/;"	f
swap_byte32	./sim/byteswap.hh	/^swap_byte32(uint32_t x)$/;"	f
swap_byte64	./sim/byteswap.hh	/^swap_byte64(uint64_t x)$/;"	f
swapctl	./kern/tru64/tru64_syscalls.hh	/^        swapctl = 259,$/;"	e	enum:SystemCalls::__anon102
swapon	./kern/tru64/tru64_syscalls.hh	/^        swapon = 199,$/;"	e	enum:SystemCalls::__anon102
swarb_req	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^Router_d::swarb_req()$/;"	f	class:Router_d
swig_decl	./python/m5/SimObject.py	/^    def swig_decl(cls, code):$/;"	m	class:MetaSimObject
swig_decl	./python/m5/params.py	/^    def swig_decl(cls, code):$/;"	m	class:MetaEnum
swig_decl	./python/m5/params.py	/^    def swig_decl(self, code):$/;"	m	class:VectorParamDesc
swig_module_name	./python/m5/params.py	/^    def swig_module_name(self):$/;"	m	class:VectorParamDesc
swig_predecls	./python/m5/SimObject.py	/^    def swig_predecls(cls, code):$/;"	m	class:MetaSimObject
swig_predecls	./python/m5/params.py	/^    def swig_predecls(cls, code):$/;"	m	class:AddrRange
swig_predecls	./python/m5/params.py	/^    def swig_predecls(cls, code):$/;"	m	class:CheckedInt
swig_predecls	./python/m5/params.py	/^    def swig_predecls(cls, code):$/;"	m	class:Enum
swig_predecls	./python/m5/params.py	/^    def swig_predecls(cls, code):$/;"	m	class:EthernetAddr
swig_predecls	./python/m5/params.py	/^    def swig_predecls(cls, code):$/;"	m	class:IpAddress
swig_predecls	./python/m5/params.py	/^    def swig_predecls(cls, code):$/;"	m	class:IpNetmask
swig_predecls	./python/m5/params.py	/^    def swig_predecls(cls, code):$/;"	m	class:IpWithPort
swig_predecls	./python/m5/params.py	/^    def swig_predecls(cls, code):$/;"	m	class:ParamValue
swig_predecls	./python/m5/params.py	/^    def swig_predecls(cls, code):$/;"	m	class:String
swig_predecls	./python/m5/params.py	/^    def swig_predecls(cls, code):$/;"	m	class:TickParamValue
swig_predecls	./python/m5/params.py	/^    def swig_predecls(cls, code):$/;"	m	class:Time
swig_predecls	./python/m5/params.py	/^    def swig_predecls(self, code):$/;"	m	class:ParamDesc
swig_predecls	./python/m5/params.py	/^    def swig_predecls(self, code):$/;"	m	class:VectorParamDesc
swio	./arch/arm/miscregs.hh	/^        Bitfield<1>      swio;$/;"	m	namespace:ArmISA
switchCpus	./python/m5/simulate.py	/^def switchCpus(system, cpuList, verbose=True):$/;"	f
switchOut	./cpu/base.cc	/^BaseCPU::switchOut()$/;"	f	class:BaseCPU
switchOut	./cpu/checker/cpu_impl.hh	/^Checker<Impl>::switchOut()$/;"	f	class:Checker
switchOut	./cpu/kvm/base.cc	/^BaseKvmCPU::switchOut()$/;"	f	class:BaseKvmCPU
switchOut	./cpu/minor/cpu.cc	/^MinorCPU::switchOut()$/;"	f	class:MinorCPU
switchOut	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::switchOut()$/;"	f	class:FullO3CPU
switchOut	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::switchOut()$/;"	f	class:AtomicSimpleCPU
switchOut	./cpu/simple/timing.cc	/^TimingSimpleCPU::switchOut()$/;"	f	class:TimingSimpleCPU
switchToActive	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::switchToActive()$/;"	f	class:DefaultFetch
switchToInactive	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::switchToInactive()$/;"	f	class:DefaultFetch
switchcpu	./sim/pseudo_inst.cc	/^switchcpu(ThreadContext *tc)$/;"	f	namespace:PseudoInst
switchedOut	./cpu/base.hh	/^    bool switchedOut() const { return _switchedOut; }$/;"	f	class:BaseCPU
switched_out	./cpu/BaseCPU.py	/^    switched_out = Param.Bool(False,$/;"	v
swpctx	./arch/alpha/osfpal.hh	/^        swpctx = 0x30,$/;"	e	enum:PAL::__anon50
swpipl	./arch/alpha/osfpal.hh	/^        swpipl = 0x35,$/;"	e	enum:PAL::__anon50
swpipl	./kern/kernel_stats.cc	/^Statistics::swpipl(int ipl)$/;"	f	class:Kernel::Statistics
swppal	./arch/alpha/osfpal.hh	/^        swppal = 0x0a,$/;"	e	enum:PAL::__anon50
swsm	./dev/net/i8254xGBe_defs.hh	/^    SWSM swsm;$/;"	m	struct:iGbReg::Regs
swtch	./kern/tru64/tru64_syscalls.hh	/^        swtch = 60,$/;"	e	enum:SystemCalls::__anon103
swtch_pri	./kern/tru64/tru64_syscalls.hh	/^        swtch_pri = 59,$/;"	e	enum:SystemCalls::__anon103
swtch_priFunc	./kern/tru64/tru64.hh	/^    swtch_priFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	class:Tru64
sx	./arch/mips/pra_constants.hh	/^    Bitfield<6>      sx;$/;"	m	namespace:MipsISA
symNil	./base/loader/coff_sym.h	275;"	d
symbol	./base/cp_annotate.cc	/^    const char *symbol;$/;"	m	struct:CPAIgnoreSymbol	file:
symbolTable	./base/loader/symtab.hh	/^    STable symbolTable;$/;"	m	class:SymbolTable
symbolfile	./sim/System.py	/^    symbolfile = Param.String("", "file to get the symbols from")$/;"	v
symlink	./kern/tru64/tru64_syscalls.hh	/^        symlink = 57,$/;"	e	enum:SystemCalls::__anon102
symtab	./cpu/profile.hh	/^    const SymbolTable *symtab;$/;"	m	class:FunctionProfile
symtab	./mem/slicc/ast/AST.py	/^    def symtab(self):$/;"	m	class:AST
sync	./base/debug.hh	/^    virtual void sync() {}$/;"	f	class:Debug::Flag
sync	./base/debug.hh	/^    void sync() { _tracing = _active && _status; }$/;"	f	class:Debug::SimpleFlag
sync	./dev/net/dist_iface.hh	/^    static Sync *sync;$/;"	m	class:DistIface
sync	./kern/tru64/tru64_syscalls.hh	/^        sync = 36,$/;"	e	enum:SystemCalls::__anon102
sync2	./kern/tru64/tru64_syscalls.hh	/^        sync2 = 249,$/;"	e	enum:SystemCalls::__anon102
syncEvent	./dev/net/dist_iface.cc	/^DistIface::SyncEvent *DistIface::syncEvent = nullptr;$/;"	m	class:DistIface	file:
syncEvent	./dev/net/dist_iface.hh	/^    static SyncEvent *syncEvent;$/;"	m	class:DistIface
syncEvent	./sim/root.hh	/^    EventWrapper<Root, &Root::timeSync> syncEvent;$/;"	m	class:Root
syncKvmState	./cpu/kvm/base.cc	/^BaseKvmCPU::syncKvmState()$/;"	f	class:BaseKvmCPU
syncRepeat	./dev/net/dist_iface.hh	/^    Tick syncRepeat;$/;"	m	class:DistIface
syncRepeat	./dev/net/dist_packet.hh	/^            Tick syncRepeat;$/;"	m	union:DistHeaderPkt::Header::__anon12
syncStart	./dev/net/dist_iface.hh	/^    Tick syncStart;$/;"	m	class:DistIface
syncThreadContext	./cpu/kvm/base.cc	/^BaseKvmCPU::syncThreadContext()$/;"	f	class:BaseKvmCPU
sync_repeat	./dev/net/Ethernet.py	/^    sync_repeat = Param.Latency('10us', "dist sync barrier repeat")$/;"	v	class:DistEtherLink
sync_start	./dev/net/Ethernet.py	/^    sync_start = Param.Latency('5200000000000t', "first dist sync barrier")$/;"	v	class:DistEtherLink
syp	./arch/mips/dt_constants.hh	/^    Bitfield<2,  0>  syp;$/;"	m	namespace:MipsISA
sys	./arch/arm/ArmTLB.py	/^    sys = Param.System(Parent.any, "system object parameter")$/;"	v	class:ArmStage2MMU
sys	./arch/arm/ArmTLB.py	/^    sys = Param.System(Parent.any, "system object parameter")$/;"	v	class:ArmTableWalker
sys	./arch/generic/freebsd/threadinfo.hh	/^    System *sys;$/;"	m	class:FreeBSD::ThreadInfo
sys	./arch/generic/linux/threadinfo.hh	/^    System *sys;$/;"	m	class:Linux::ThreadInfo
sys	./arch/x86/pagetable_walker.hh	/^        System * sys;$/;"	m	class:X86ISA::Walker
sys	./cpu/IntrControl.py	/^    sys = Param.System(Parent.any, "the system we are part of")$/;"	v	class:IntrControl
sys	./cpu/intr_control.hh	/^    System *sys;$/;"	m	class:IntrControl
sys	./dev/dma_device.hh	/^    System *const sys;$/;"	m	class:DmaPort
sys	./dev/io_device.hh	/^    System *sys;$/;"	m	class:PioDevice
sys	./mem/cache/prefetch/Prefetcher.py	/^    sys = Param.System(Parent.any, "System this prefetcher belongs to")$/;"	v	class:BasePrefetcher
sys	./mem/ruby/structures/RubyPrefetcher.py	/^    sys = Param.System(Parent.any, "System this prefetcher belongs to")$/;"	v	class:Prefetcher
sysClkDomain	./sim/dvfs_handler.hh	/^    SrcClockDomain* sysClkDomain;$/;"	m	class:DVFSHandler
sysLock	./dev/arm/rv_ctrl.hh	/^    SysLockReg sysLock;$/;"	m	class:RealViewCtrl
sysRegMap	./arch/arm/kvm/armv8_cpu.hh	/^    mutable std::vector<ArmV8KvmCPU::MiscRegInfo> sysRegMap;$/;"	m	class:ArmV8KvmCPU
sysTick	./arch/sparc/system.hh	/^    Tick sysTick;$/;"	m	class:SparcSystem
sys_clk_domain	./sim/DVFSHandler.py	/^    sys_clk_domain = Param.SrcClockDomain(Parent.clk_domain,$/;"	v	class:DVFSHandler
sys_getsysinfoFunc	./arch/mips/linux/process.cc	/^sys_getsysinfoFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
sys_setsysinfoFunc	./arch/mips/linux/process.cc	/^sys_setsysinfoFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
syscall	./arch/x86/process.cc	/^I386LiveProcess::syscall(int64_t callnum, ThreadContext *tc)$/;"	f	class:I386LiveProcess
syscall	./cpu/checker/thread_context.hh	/^    void syscall(int64_t callnum)$/;"	f	class:CheckerThreadContext
syscall	./cpu/minor/exec_context.hh	/^    syscall(int64_t callnum)$/;"	f	class:Minor::ExecContext
syscall	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::syscall(int64_t callnum, ThreadID tid)$/;"	f	class:FullO3CPU
syscall	./cpu/o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::syscall(int64_t callnum)$/;"	f	class:BaseO3DynInst
syscall	./cpu/o3/thread_context.hh	/^    virtual void syscall(int64_t callnum)$/;"	f	class:O3ThreadContext
syscall	./cpu/o3/thread_state.hh	/^    void syscall(int64_t callnum) { process->syscall(callnum, tc); }$/;"	f	struct:O3ThreadState
syscall	./cpu/simple_thread.hh	/^    void syscall(int64_t callnum)$/;"	f	class:SimpleThread
syscall	./cpu/thread_context.hh	/^    void syscall(int64_t callnum)$/;"	f	class:ProxyThreadContext
syscall	./kern/tru64/tru64_syscalls.hh	/^        syscall = 0,$/;"	e	enum:SystemCalls::__anon102
syscall	./sim/process.cc	/^LiveProcess::syscall(int64_t callnum, ThreadContext *tc)$/;"	f	class:LiveProcess
syscall32Descs	./arch/sparc/linux/process.hh	/^    static SyscallDesc syscall32Descs[];$/;"	m	class:SparcISA::SparcLinuxProcess
syscall32Descs	./arch/sparc/linux/syscalls.cc	/^SyscallDesc SparcLinuxProcess::syscall32Descs[] = {$/;"	m	class:SparcISA::SparcLinuxProcess	file:
syscallCodePhysAddr	./arch/x86/system.hh	/^    const uint64_t syscallCodePhysAddr = 0x60000;$/;"	m	namespace:X86ISA
syscallCodeVirtAddr	./arch/x86/system.hh	/^    const uint64_t syscallCodeVirtAddr = 0xffff800000000000;$/;"	m	namespace:X86ISA
syscallCsAndSs	./arch/x86/regs/misc.hh	/^        Bitfield<47,32> syscallCsAndSs;$/;"	m	namespace:X86ISA
syscallDescs	./arch/alpha/linux/process.cc	/^SyscallDesc AlphaLinuxProcess::syscallDescs[] = {$/;"	m	class:AlphaLinuxProcess	file:
syscallDescs	./arch/alpha/linux/process.hh	/^    static SyscallDesc syscallDescs[];$/;"	m	class:AlphaISA::AlphaLinuxProcess
syscallDescs	./arch/alpha/tru64/process.cc	/^SyscallDesc AlphaTru64Process::syscallDescs[] = {$/;"	m	class:AlphaTru64Process	file:
syscallDescs	./arch/alpha/tru64/process.hh	/^    static SyscallDesc syscallDescs[];$/;"	m	class:AlphaISA::AlphaTru64Process
syscallDescs	./arch/mips/linux/process.cc	/^SyscallDesc MipsLinuxProcess::syscallDescs[] = {$/;"	m	class:MipsLinuxProcess	file:
syscallDescs	./arch/mips/linux/process.hh	/^    static SyscallDesc syscallDescs[];$/;"	m	class:MipsLinuxProcess
syscallDescs	./arch/power/linux/process.cc	/^SyscallDesc PowerLinuxProcess::syscallDescs[] = {$/;"	m	class:PowerLinuxProcess	file:
syscallDescs	./arch/power/linux/process.hh	/^    static SyscallDesc syscallDescs[];$/;"	m	class:PowerLinuxProcess
syscallDescs	./arch/sparc/linux/process.hh	/^    static SyscallDesc syscallDescs[];$/;"	m	class:SparcISA::SparcLinuxProcess
syscallDescs	./arch/sparc/linux/syscalls.cc	/^SyscallDesc SparcLinuxProcess::syscallDescs[] = {$/;"	m	class:SparcISA::SparcLinuxProcess	file:
syscallDescs	./arch/sparc/solaris/process.cc	/^SyscallDesc SparcSolarisProcess::syscallDescs[] = {$/;"	m	class:SparcSolarisProcess	file:
syscallDescs	./arch/sparc/solaris/process.hh	/^    static SyscallDesc syscallDescs[];$/;"	m	class:SparcISA::SparcSolarisProcess
syscallDescs	./arch/x86/process.hh	/^        SyscallDesc *syscallDescs;$/;"	m	class:X86ISA::X86LiveProcess
syscallDescs32	./arch/arm/freebsd/process.cc	/^static SyscallDesc syscallDescs32[] = {$/;"	v	file:
syscallDescs32	./arch/arm/linux/process.cc	/^static SyscallDesc syscallDescs32[] = {$/;"	v	file:
syscallDescs32	./arch/x86/linux/process.cc	/^static SyscallDesc syscallDescs32[] = {$/;"	v	file:
syscallDescs64	./arch/arm/freebsd/process.cc	/^static SyscallDesc syscallDescs64[] = {$/;"	v	file:
syscallDescs64	./arch/arm/linux/process.cc	/^static SyscallDesc syscallDescs64[] = {$/;"	v	file:
syscallDescs64	./arch/x86/linux/process.cc	/^static SyscallDesc syscallDescs64[] = {$/;"	v	file:
syscallTables	./arch/arm/freebsd/process.hh	/^    std::vector<SyscallTable> syscallTables;$/;"	m	class:ArmFreebsdProcessBits
syscallTables	./arch/arm/linux/process.hh	/^    std::vector<SyscallTable> syscallTables;$/;"	m	class:ArmLinuxProcessBits
sysctlFunc	./arch/arm/freebsd/process.cc	/^sysctlFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
sysfs	./kern/tru64/tru64_syscalls.hh	/^        sysfs = 254,$/;"	e	enum:SystemCalls::__anon102
sysinfo	./kern/tru64/tru64_syscalls.hh	/^        sysinfo = 241,$/;"	e	enum:SystemCalls::__anon102
sysinfoFunc	./sim/syscall_emul.hh	/^sysinfoFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
sysname	./kern/linux/linux.hh	/^        char sysname[_SYS_NMLN];        \/\/!< System name.$/;"	m	struct:Linux::utsname
sysname	./kern/operatingsystem.hh	/^        char sysname[_SYS_NMLN];        \/\/!< System name.$/;"	m	struct:OperatingSystem::__anon92
sysname	./kern/solaris/solaris.hh	/^        char sysname[_SYS_NMLN];        \/\/!< System name.$/;"	m	struct:Solaris::utsname
sysname	./kern/tru64/tru64.hh	/^        char sysname[_SYS_NMLN];        \/\/!< System name.$/;"	m	struct:Tru64::utsname
sysretCsAndSs	./arch/x86/regs/misc.hh	/^        Bitfield<63,48> sysretCsAndSs;$/;"	m	namespace:X86ISA
system	./arch/alpha/AlphaISA.py	/^    system = Param.System(Parent.any, "System this ISA object belongs to")$/;"	v	class:AlphaISA
system	./arch/alpha/isa.hh	/^        System *system;$/;"	m	class:AlphaISA::ISA
system	./arch/arm/ArmISA.py	/^    system = Param.System(Parent.any, "System this ISA object belongs to")$/;"	v	class:ArmISA
system	./arch/arm/isa.hh	/^        ArmSystem *system;$/;"	m	class:ArmISA::ISA
system	./arch/arm/kvm/KvmGic.py	/^    system = Param.System(Parent.any,$/;"	v	class:KvmGic
system	./arch/arm/kvm/gic.hh	/^    System &system;$/;"	m	class:KvmGic
system	./arch/mips/MipsISA.py	/^    system = Param.System(Parent.any, "System this ISA object belongs to")$/;"	v	class:MipsISA
system	./arch/x86/X86TLB.py	/^    system = Param.System(Parent.any, "system object")$/;"	v	class:X86PagetableWalker
system	./arch/x86/regs/misc.hh	/^        Bitfield<15> system;$/;"	m	namespace:X86ISA
system	./base/remote_gdb.hh	/^    System *system;$/;"	m	class:BaseRemoteGDB
system	./cpu/BaseCPU.py	/^    system = Param.System(Parent.any, "system object")$/;"	v
system	./cpu/base.hh	/^    System *system;$/;"	m	class:BaseCPU
system	./cpu/kvm/KvmVM.py	/^    system = Param.System(Parent.any, "system object")$/;"	v	class:KvmVM
system	./cpu/kvm/vm.hh	/^    System *system;$/;"	m	class:KvmVM
system	./cpu/o3/cpu.hh	/^    System *system;$/;"	m	class:FullO3CPU
system	./cpu/simple_thread.hh	/^    System *system;$/;"	m	class:SimpleThread
system	./cpu/testers/directedtest/RubyDirectedTester.py	/^    system = Param.System(Parent.any, "System we belong to")$/;"	v	class:DirectedGenerator
system	./cpu/testers/memtest/MemTest.py	/^    system = Param.System(Parent.any, "System this tester is part of")$/;"	v	class:MemTest
system	./cpu/testers/networktest/NetworkTest.py	/^    system = Param.System(Parent.any, "System we belong to")$/;"	v	class:NetworkTest
system	./cpu/testers/rubytest/RubyTester.py	/^    system = Param.System(Parent.any, "System we belong to")$/;"	v	class:RubyTester
system	./cpu/testers/traffic_gen/TrafficGen.py	/^    system = Param.System(Parent.any, "System this generator is part of")$/;"	v	class:TrafficGen
system	./cpu/testers/traffic_gen/traffic_gen.hh	/^    System* system;$/;"	m	class:TrafficGen
system	./dev/Device.py	/^    system = Param.System(Parent.any, "System this device is part of")$/;"	v	class:PioDevice
system	./dev/alpha/AlphaBackdoor.py	/^    system = Param.AlphaSystem(Parent.any, "system object")$/;"	v	class:AlphaBackdoor
system	./dev/alpha/Tsunami.py	/^    system = Param.System(Parent.any, "system")$/;"	v	class:Tsunami
system	./dev/alpha/backdoor.hh	/^    AlphaSystem *system;$/;"	m	class:AlphaBackdoor
system	./dev/alpha/tsunami.hh	/^    System *system;$/;"	m	class:Tsunami
system	./dev/arm/RealView.py	/^    system = Param.System(Parent.any, "system")$/;"	v	class:GenericTimer
system	./dev/arm/RealView.py	/^    system = Param.System(Parent.any, "system")$/;"	v	class:RealView
system	./dev/arm/realview.hh	/^    System *system;$/;"	m	class:RealView
system	./dev/mips/Malta.py	/^    system = Param.System(Parent.any, "system")$/;"	v	class:Malta
system	./dev/mips/malta.hh	/^    System *system;$/;"	m	class:Malta
system	./dev/sparc/T1000.py	/^    system = Param.System(Parent.any, "system")$/;"	v	class:T1000
system	./dev/sparc/t1000.hh	/^    System *system;$/;"	m	class:T1000
system	./dev/storage/SimpleDisk.py	/^    system = Param.System(Parent.any, "System Pointer")$/;"	v	class:SimpleDisk
system	./dev/storage/simple_disk.hh	/^    System  *system;$/;"	m	class:SimpleDisk
system	./dev/virtio/VirtIO.py	/^    system = Param.System(Parent.any, "system object")$/;"	v	class:VirtIODeviceBase
system	./dev/x86/Pc.py	/^    system = Param.System(Parent.any, "system")$/;"	v	class:Pc
system	./dev/x86/pc.hh	/^    System *system;$/;"	m	class:Pc
system	./mem/CommMonitor.py	/^    system = Param.System(Parent.any, "System that the monitor belongs to.")$/;"	v	class:CommMonitor
system	./mem/XBar.py	/^    system = Param.System(Parent.any, "System that the crossbar belongs to.")$/;"	v	class:CoherentXBar
system	./mem/XBar.py	/^    system = Param.System(Parent.any, "System that the crossbar belongs to.")$/;"	v	class:SnoopFilter
system	./mem/abstract_mem.hh	/^    System* system() const { return _system; }$/;"	f	class:AbstractMemory
system	./mem/abstract_mem.hh	/^    void system(System *sys) { _system = sys; }$/;"	f	class:AbstractMemory
system	./mem/cache/Cache.py	/^    system = Param.System(Parent.any, "System we belong to")$/;"	v	class:BaseCache
system	./mem/cache/base.hh	/^    System *system;$/;"	m	class:BaseCache
system	./mem/cache/prefetch/base.hh	/^    System* system;$/;"	m	class:BasePrefetcher
system	./mem/coherent_xbar.hh	/^    System *system;$/;"	m	class:CoherentXBar
system	./mem/multi_level_page_table.hh	/^    System *system;$/;"	m	class:MultiLevelPageTable
system	./mem/probes/StackDistProbe.py	/^    system = Param.System(Parent.any,$/;"	v	class:StackDistProbe
system	./mem/ruby/slicc_interface/Controller.py	/^    system = Param.System(Parent.any, "system object parameter")$/;"	v	class:RubyController
system	./mem/ruby/system/DMASequencer.hh	/^    System* system;$/;"	m	class:DMASequencer
system	./mem/ruby/system/RubyPort.hh	/^    System* system;$/;"	m	class:RubyPort
system	./mem/ruby/system/Sequencer.py	/^    system = Param.System(Parent.any, "system object")$/;"	v	class:DMASequencer
system	./mem/ruby/system/Sequencer.py	/^    system = Param.System(Parent.any, "system object")$/;"	v	class:RubyPort
system	./sim/Process.py	/^    system = Param.System(Parent.any, "system process will run on")$/;"	v	class:Process
system	./sim/process.hh	/^    System *system;$/;"	m	class:Process
systemConfigFile	./mem/DRAMSim2.py	/^    systemConfigFile = Param.String("system.ini.example",$/;"	v	class:DRAMSim2
systemCounter	./dev/arm/generic_timer.hh	/^    SystemCounter systemCounter;$/;"	m	class:GenericTimer
systemCounter	./dev/arm/generic_timer.hh	/^    SystemCounter systemCounter;$/;"	m	class:GenericTimerMem
systemList	./sim/system.hh	/^    static std::vector<System *> systemList;$/;"	m	class:System
systemPtr	./cpu/checker/cpu.hh	/^    System *systemPtr;$/;"	m	class:CheckerCPU
system_conf	./mem/ruby/network/fault_model/FaultModel.hh	/^    struct system_conf$/;"	s	class:FaultModel
system_port	./sim/System.py	/^    system_port = MasterPort("System port")$/;"	v	class:System
system_rev	./arch/alpha/AlphaSystem.py	/^    system_rev = 1 << 10$/;"	v	class:FreebsdAlphaSystem
system_rev	./arch/alpha/AlphaSystem.py	/^    system_rev = 1 << 10$/;"	v	class:LinuxAlphaSystem
system_rev	./arch/alpha/AlphaSystem.py	/^    system_rev = 2<<1$/;"	v	class:Tru64AlphaSystem
system_rev	./arch/alpha/AlphaSystem.py	/^    system_rev = Param.UInt64("Revision of system we are emulating")$/;"	v	class:AlphaSystem
system_rev	./arch/mips/MipsSystem.py	/^    system_rev = 1 << 10$/;"	v	class:BareIronMipsSystem
system_rev	./arch/mips/MipsSystem.py	/^    system_rev = 1 << 10$/;"	v	class:LinuxMipsSystem
system_rev	./arch/mips/MipsSystem.py	/^    system_rev = Param.UInt64("Revision of system we are emulating")$/;"	v	class:MipsSystem
system_type	./arch/alpha/AlphaSystem.py	/^    system_type = 12$/;"	v	class:Tru64AlphaSystem
system_type	./arch/alpha/AlphaSystem.py	/^    system_type = 34$/;"	v	class:FreebsdAlphaSystem
system_type	./arch/alpha/AlphaSystem.py	/^    system_type = 34$/;"	v	class:LinuxAlphaSystem
system_type	./arch/alpha/AlphaSystem.py	/^    system_type = Param.UInt64("Type of system we are emulating")$/;"	v	class:AlphaSystem
system_type	./arch/mips/MipsSystem.py	/^    system_type = 34$/;"	v	class:BareIronMipsSystem
system_type	./arch/mips/MipsSystem.py	/^    system_type = 34$/;"	v	class:LinuxMipsSystem
system_type	./arch/mips/MipsSystem.py	/^    system_type = Param.UInt64("Type of system we are emulating")$/;"	v	class:MipsSystem
t	./arch/arm/miscregs.hh	/^        Bitfield<5> t;$/;"	m	namespace:ArmISA
t0	./arch/arm/miscregs.hh	/^        Bitfield<0>  t0;$/;"	m	namespace:ArmISA
t0sz	./arch/arm/miscregs.hh	/^        Bitfield<2, 0> t0sz;$/;"	m	namespace:ArmISA
t0sz	./arch/arm/miscregs.hh	/^        Bitfield<3, 0> t0sz;$/;"	m	namespace:ArmISA
t0sz	./arch/arm/miscregs.hh	/^        Bitfield<5, 0> t0sz;$/;"	m	namespace:ArmISA
t1	./arch/arm/miscregs.hh	/^        Bitfield<1>  t1;$/;"	m	namespace:ArmISA
t10	./arch/arm/miscregs.hh	/^        Bitfield<10> t10;$/;"	m	namespace:ArmISA
t11	./arch/arm/miscregs.hh	/^        Bitfield<11> t11;$/;"	m	namespace:ArmISA
t12	./arch/arm/miscregs.hh	/^        Bitfield<12> t12;$/;"	m	namespace:ArmISA
t13	./arch/arm/miscregs.hh	/^        Bitfield<13> t13;$/;"	m	namespace:ArmISA
t15	./arch/arm/miscregs.hh	/^        Bitfield<15> t15;$/;"	m	namespace:ArmISA
t1sz	./arch/arm/miscregs.hh	/^        Bitfield<21, 16> t1sz; \/\/ EL1$/;"	m	namespace:ArmISA
t1sz	./arch/arm/miscregs.hh	/^        Bitfield<21, 16> t1sz;$/;"	m	namespace:ArmISA
t2	./arch/arm/miscregs.hh	/^        Bitfield<2>  t2;$/;"	m	namespace:ArmISA
t3	./arch/arm/miscregs.hh	/^        Bitfield<3>  t3;$/;"	m	namespace:ArmISA
t4	./arch/arm/miscregs.hh	/^        Bitfield<4>  t4;$/;"	m	namespace:ArmISA
t5	./arch/arm/miscregs.hh	/^        Bitfield<5>  t5;$/;"	m	namespace:ArmISA
t6	./arch/arm/miscregs.hh	/^        Bitfield<6>  t6;$/;"	m	namespace:ArmISA
t7	./arch/arm/miscregs.hh	/^        Bitfield<7>  t7;$/;"	m	namespace:ArmISA
t8	./arch/arm/miscregs.hh	/^        Bitfield<8>  t8;$/;"	m	namespace:ArmISA
t9	./arch/arm/miscregs.hh	/^        Bitfield<9>  t9;$/;"	m	namespace:ArmISA
tBURST	./mem/DRAMCtrl.py	/^    tBURST = '20ns'$/;"	v	class:WideIO_200_x128
tBURST	./mem/DRAMCtrl.py	/^    tBURST = '2ns'$/;"	v	class:GDDR5_4000_x64
tBURST	./mem/DRAMCtrl.py	/^    tBURST = '3.2ns'$/;"	v	class:HMC_2500_x32
tBURST	./mem/DRAMCtrl.py	/^    tBURST = '3.333ns'$/;"	v	class:DDR4_2400_x64
tBURST	./mem/DRAMCtrl.py	/^    tBURST = '3.752ns'$/;"	v	class:DDR3_2133_x64
tBURST	./mem/DRAMCtrl.py	/^    tBURST = '4ns'$/;"	v	class:HBM_1000_4H_x128
tBURST	./mem/DRAMCtrl.py	/^    tBURST = '5ns'$/;"	v	class:DDR3_1600_x64
tBURST	./mem/DRAMCtrl.py	/^    tBURST = '5ns'$/;"	v	class:LPDDR3_1600_x32
tBURST	./mem/DRAMCtrl.py	/^    tBURST = '7.5ns'$/;"	v	class:LPDDR2_S4_1066_x32
tBURST	./mem/DRAMCtrl.py	/^    tBURST = Param.Latency("Burst duration (for DDR burst length \/ 2 cycles)")$/;"	v	class:DRAMCtrl
tBURST	./mem/dram_ctrl.hh	/^    const Tick tBURST;$/;"	m	class:DRAMCtrl
tCCD_L	./mem/DRAMCtrl.py	/^    tCCD_L = '3ns';$/;"	v	class:GDDR5_4000_x64
tCCD_L	./mem/DRAMCtrl.py	/^    tCCD_L = '5ns';$/;"	v	class:DDR4_2400_x64
tCCD_L	./mem/DRAMCtrl.py	/^    tCCD_L = Param.Latency("0ns", "Same bank group CAS to CAS delay")$/;"	v	class:DRAMCtrl
tCCD_L	./mem/dram_ctrl.hh	/^    const Tick tCCD_L;$/;"	m	class:DRAMCtrl
tCK	./mem/DRAMCtrl.py	/^    tCK = '0.833ns'$/;"	v	class:DDR4_2400_x64
tCK	./mem/DRAMCtrl.py	/^    tCK = '0.8ns'$/;"	v	class:HMC_2500_x32
tCK	./mem/DRAMCtrl.py	/^    tCK = '0.938ns'$/;"	v	class:DDR3_2133_x64
tCK	./mem/DRAMCtrl.py	/^    tCK = '1.25ns'$/;"	v	class:DDR3_1600_x64
tCK	./mem/DRAMCtrl.py	/^    tCK = '1.25ns'$/;"	v	class:LPDDR3_1600_x32
tCK	./mem/DRAMCtrl.py	/^    tCK = '1.876ns'$/;"	v	class:LPDDR2_S4_1066_x32
tCK	./mem/DRAMCtrl.py	/^    tCK = '1ns'$/;"	v	class:GDDR5_4000_x64
tCK	./mem/DRAMCtrl.py	/^    tCK = '2ns'$/;"	v	class:HBM_1000_4H_x128
tCK	./mem/DRAMCtrl.py	/^    tCK = '5ns'$/;"	v	class:WideIO_200_x128
tCK	./mem/DRAMCtrl.py	/^    tCK = Param.Latency("Clock period")$/;"	v	class:DRAMCtrl
tCK	./mem/dram_ctrl.hh	/^    const Tick M5_CLASS_VAR_USED tCK;$/;"	m	class:DRAMCtrl
tCL	./mem/DRAMCtrl.py	/^    tCL = '12ns'$/;"	v	class:GDDR5_4000_x64
tCL	./mem/DRAMCtrl.py	/^    tCL = '13.09ns'$/;"	v	class:DDR3_2133_x64
tCL	./mem/DRAMCtrl.py	/^    tCL = '13.75ns'$/;"	v	class:DDR3_1600_x64
tCL	./mem/DRAMCtrl.py	/^    tCL = '14.16ns'$/;"	v	class:DDR4_2400_x64
tCL	./mem/DRAMCtrl.py	/^    tCL = '15ns'$/;"	v	class:HBM_1000_4H_x128
tCL	./mem/DRAMCtrl.py	/^    tCL = '15ns'$/;"	v	class:LPDDR2_S4_1066_x32
tCL	./mem/DRAMCtrl.py	/^    tCL = '15ns'$/;"	v	class:LPDDR3_1600_x32
tCL	./mem/DRAMCtrl.py	/^    tCL = '18ns'$/;"	v	class:WideIO_200_x128
tCL	./mem/DRAMCtrl.py	/^    tCL = '9.9ns'$/;"	v	class:HMC_2500_x32
tCL	./mem/DRAMCtrl.py	/^    tCL = Param.Latency("CAS latency")$/;"	v	class:DRAMCtrl
tCL	./mem/dram_ctrl.hh	/^    const Tick tCL;$/;"	m	class:DRAMCtrl
tCS	./mem/DRAMCtrl.py	/^    tCS = '0.8ns'$/;"	v	class:HMC_2500_x32
tCS	./mem/DRAMCtrl.py	/^    tCS = '0ns'$/;"	v	class:HBM_1000_4H_x128
tCS	./mem/DRAMCtrl.py	/^    tCS = '1.666ns'$/;"	v	class:DDR4_2400_x64
tCS	./mem/DRAMCtrl.py	/^    tCS = '10ns'$/;"	v	class:WideIO_200_x128
tCS	./mem/DRAMCtrl.py	/^    tCS = '2.5ns'$/;"	v	class:DDR3_1600_x64
tCS	./mem/DRAMCtrl.py	/^    tCS = '2.5ns'$/;"	v	class:LPDDR3_1600_x32
tCS	./mem/DRAMCtrl.py	/^    tCS = '2ns'$/;"	v	class:HBM_1000_4H_x64
tCS	./mem/DRAMCtrl.py	/^    tCS = '3.75ns'$/;"	v	class:LPDDR2_S4_1066_x32
tCS	./mem/DRAMCtrl.py	/^    tCS = Param.Latency("Rank to rank switching time")$/;"	v	class:DRAMCtrl
tCS	./mem/dram_ctrl.hh	/^    const Tick tCS;$/;"	m	class:DRAMCtrl
tFaw	./mem/ruby/structures/RubyMemoryControl.py	/^    tFaw = Param.Int(0, "");$/;"	v	class:RubyMemoryControl
tRAS	./mem/DRAMCtrl.py	/^    tRAS = '21.6ns'$/;"	v	class:HMC_2500_x32
tRAS	./mem/DRAMCtrl.py	/^    tRAS = '28ns'$/;"	v	class:GDDR5_4000_x64
tRAS	./mem/DRAMCtrl.py	/^    tRAS = '32ns'$/;"	v	class:DDR4_2400_x64
tRAS	./mem/DRAMCtrl.py	/^    tRAS = '33ns'$/;"	v	class:DDR3_2133_x64
tRAS	./mem/DRAMCtrl.py	/^    tRAS = '33ns'$/;"	v	class:HBM_1000_4H_x128
tRAS	./mem/DRAMCtrl.py	/^    tRAS = '35ns'$/;"	v	class:DDR3_1600_x64
tRAS	./mem/DRAMCtrl.py	/^    tRAS = '42ns'$/;"	v	class:LPDDR2_S4_1066_x32
tRAS	./mem/DRAMCtrl.py	/^    tRAS = '42ns'$/;"	v	class:LPDDR3_1600_x32
tRAS	./mem/DRAMCtrl.py	/^    tRAS = '42ns'$/;"	v	class:WideIO_200_x128
tRAS	./mem/DRAMCtrl.py	/^    tRAS = Param.Latency("ACT to PRE delay")$/;"	v	class:DRAMCtrl
tRAS	./mem/dram_ctrl.hh	/^    const Tick tRAS;$/;"	m	class:DRAMCtrl
tRCD	./mem/DRAMCtrl.py	/^    tRCD = '10.2ns'$/;"	v	class:HMC_2500_x32
tRCD	./mem/DRAMCtrl.py	/^    tRCD = '12ns'$/;"	v	class:GDDR5_4000_x64
tRCD	./mem/DRAMCtrl.py	/^    tRCD = '13.09ns'$/;"	v	class:DDR3_2133_x64
tRCD	./mem/DRAMCtrl.py	/^    tRCD = '13.75ns'$/;"	v	class:DDR3_1600_x64
tRCD	./mem/DRAMCtrl.py	/^    tRCD = '14.16ns'$/;"	v	class:DDR4_2400_x64
tRCD	./mem/DRAMCtrl.py	/^    tRCD = '15ns'$/;"	v	class:HBM_1000_4H_x128
tRCD	./mem/DRAMCtrl.py	/^    tRCD = '15ns'$/;"	v	class:LPDDR2_S4_1066_x32
tRCD	./mem/DRAMCtrl.py	/^    tRCD = '18ns'$/;"	v	class:LPDDR3_1600_x32
tRCD	./mem/DRAMCtrl.py	/^    tRCD = '18ns'$/;"	v	class:WideIO_200_x128
tRCD	./mem/DRAMCtrl.py	/^    tRCD = Param.Latency("RAS to CAS delay")$/;"	v	class:DRAMCtrl
tRCD	./mem/dram_ctrl.hh	/^    const Tick tRCD;$/;"	m	class:DRAMCtrl
tREFI	./mem/DRAMCtrl.py	/^    tREFI = '3.9us'$/;"	v	class:HBM_1000_4H_x128
tREFI	./mem/DRAMCtrl.py	/^    tREFI = '3.9us'$/;"	v	class:HBM_1000_4H_x64
tREFI	./mem/DRAMCtrl.py	/^    tREFI = '3.9us'$/;"	v	class:HMC_2500_x32
tREFI	./mem/DRAMCtrl.py	/^    tREFI = '3.9us'$/;"	v	class:LPDDR2_S4_1066_x32
tREFI	./mem/DRAMCtrl.py	/^    tREFI = '3.9us'$/;"	v	class:LPDDR3_1600_x32
tREFI	./mem/DRAMCtrl.py	/^    tREFI = '3.9us'$/;"	v	class:WideIO_200_x128
tREFI	./mem/DRAMCtrl.py	/^    tREFI = '7.8us'$/;"	v	class:DDR3_1600_x64
tREFI	./mem/DRAMCtrl.py	/^    tREFI = '7.8us'$/;"	v	class:DDR4_2400_x64
tREFI	./mem/DRAMCtrl.py	/^    tREFI = Param.Latency("Refresh command interval")$/;"	v	class:DRAMCtrl
tREFI	./mem/dram_ctrl.hh	/^    const Tick tREFI;$/;"	m	class:DRAMCtrl
tRFC	./mem/DRAMCtrl.py	/^    tRFC = '130ns'$/;"	v	class:LPDDR2_S4_1066_x32
tRFC	./mem/DRAMCtrl.py	/^    tRFC = '130ns'$/;"	v	class:LPDDR3_1600_x32
tRFC	./mem/DRAMCtrl.py	/^    tRFC = '160ns'$/;"	v	class:HBM_1000_4H_x128
tRFC	./mem/DRAMCtrl.py	/^    tRFC = '210ns'$/;"	v	class:WideIO_200_x128
tRFC	./mem/DRAMCtrl.py	/^    tRFC = '260ns'$/;"	v	class:DDR3_1600_x64
tRFC	./mem/DRAMCtrl.py	/^    tRFC = '260ns'$/;"	v	class:HBM_1000_4H_x64
tRFC	./mem/DRAMCtrl.py	/^    tRFC = '350ns'$/;"	v	class:DDR4_2400_x64
tRFC	./mem/DRAMCtrl.py	/^    tRFC = '59ns'$/;"	v	class:HMC_2500_x32
tRFC	./mem/DRAMCtrl.py	/^    tRFC = '65ns'$/;"	v	class:GDDR5_4000_x64
tRFC	./mem/DRAMCtrl.py	/^    tRFC = Param.Latency("Refresh cycle time")$/;"	v	class:DRAMCtrl
tRFC	./mem/dram_ctrl.hh	/^    const Tick tRFC;$/;"	m	class:DRAMCtrl
tRP	./mem/DRAMCtrl.py	/^    tRP = '12ns'$/;"	v	class:GDDR5_4000_x64
tRP	./mem/DRAMCtrl.py	/^    tRP = '13.09ns'$/;"	v	class:DDR3_2133_x64
tRP	./mem/DRAMCtrl.py	/^    tRP = '13.75ns'$/;"	v	class:DDR3_1600_x64
tRP	./mem/DRAMCtrl.py	/^    tRP = '14.16ns'$/;"	v	class:DDR4_2400_x64
tRP	./mem/DRAMCtrl.py	/^    tRP = '15ns'$/;"	v	class:HBM_1000_4H_x128
tRP	./mem/DRAMCtrl.py	/^    tRP = '15ns'$/;"	v	class:LPDDR2_S4_1066_x32
tRP	./mem/DRAMCtrl.py	/^    tRP = '18ns'$/;"	v	class:LPDDR3_1600_x32
tRP	./mem/DRAMCtrl.py	/^    tRP = '18ns'$/;"	v	class:WideIO_200_x128
tRP	./mem/DRAMCtrl.py	/^    tRP = '7.7ns'$/;"	v	class:HMC_2500_x32
tRP	./mem/DRAMCtrl.py	/^    tRP = Param.Latency("Row precharge time")$/;"	v	class:DRAMCtrl
tRP	./mem/dram_ctrl.hh	/^    const Tick tRP;$/;"	m	class:DRAMCtrl
tRRD	./mem/DRAMCtrl.py	/^    tRRD = '10.0ns'$/;"	v	class:LPDDR2_S4_1066_x32
tRRD	./mem/DRAMCtrl.py	/^    tRRD = '10.0ns'$/;"	v	class:LPDDR3_1600_x32
tRRD	./mem/DRAMCtrl.py	/^    tRRD = '10.0ns'$/;"	v	class:WideIO_200_x128
tRRD	./mem/DRAMCtrl.py	/^    tRRD = '3.2ns'$/;"	v	class:HMC_2500_x32
tRRD	./mem/DRAMCtrl.py	/^    tRRD = '3.3ns'$/;"	v	class:DDR4_2400_x64
tRRD	./mem/DRAMCtrl.py	/^    tRRD = '4ns'$/;"	v	class:HBM_1000_4H_x128
tRRD	./mem/DRAMCtrl.py	/^    tRRD = '5ns'$/;"	v	class:DDR3_2133_x64
tRRD	./mem/DRAMCtrl.py	/^    tRRD = '6ns'$/;"	v	class:DDR3_1600_x64
tRRD	./mem/DRAMCtrl.py	/^    tRRD = '6ns'$/;"	v	class:GDDR5_4000_x64
tRRD	./mem/DRAMCtrl.py	/^    tRRD = Param.Latency("ACT to ACT delay")$/;"	v	class:DRAMCtrl
tRRD	./mem/dram_ctrl.hh	/^    const Tick tRRD;$/;"	m	class:DRAMCtrl
tRRD_L	./mem/DRAMCtrl.py	/^    tRRD_L = '4.9ns';$/;"	v	class:DDR4_2400_x64
tRRD_L	./mem/DRAMCtrl.py	/^    tRRD_L = '6ns'$/;"	v	class:GDDR5_4000_x64
tRRD_L	./mem/DRAMCtrl.py	/^    tRRD_L = Param.Latency("0ns", "Same bank group ACT to ACT delay")$/;"	v	class:DRAMCtrl
tRRD_L	./mem/dram_ctrl.hh	/^    const Tick tRRD_L;$/;"	m	class:DRAMCtrl
tRTP	./mem/DRAMCtrl.py	/^    tRTP = '20ns'$/;"	v	class:WideIO_200_x128
tRTP	./mem/DRAMCtrl.py	/^    tRTP = '2ns'$/;"	v	class:GDDR5_4000_x64
tRTP	./mem/DRAMCtrl.py	/^    tRTP = '4.9ns'$/;"	v	class:HMC_2500_x32
tRTP	./mem/DRAMCtrl.py	/^    tRTP = '7.5ns'$/;"	v	class:DDR3_1600_x64
tRTP	./mem/DRAMCtrl.py	/^    tRTP = '7.5ns'$/;"	v	class:DDR4_2400_x64
tRTP	./mem/DRAMCtrl.py	/^    tRTP = '7.5ns'$/;"	v	class:HBM_1000_4H_x128
tRTP	./mem/DRAMCtrl.py	/^    tRTP = '7.5ns'$/;"	v	class:LPDDR2_S4_1066_x32
tRTP	./mem/DRAMCtrl.py	/^    tRTP = '7.5ns'$/;"	v	class:LPDDR3_1600_x32
tRTP	./mem/DRAMCtrl.py	/^    tRTP = Param.Latency("Read to precharge")$/;"	v	class:DRAMCtrl
tRTP	./mem/dram_ctrl.hh	/^    const Tick tRTP;$/;"	m	class:DRAMCtrl
tRTW	./mem/DRAMCtrl.py	/^    tRTW = '1.666ns'$/;"	v	class:DDR4_2400_x64
tRTW	./mem/DRAMCtrl.py	/^    tRTW = '10ns'$/;"	v	class:WideIO_200_x128
tRTW	./mem/DRAMCtrl.py	/^    tRTW = '2.5ns'$/;"	v	class:DDR3_1600_x64
tRTW	./mem/DRAMCtrl.py	/^    tRTW = '2.5ns'$/;"	v	class:LPDDR3_1600_x32
tRTW	./mem/DRAMCtrl.py	/^    tRTW = '2ns'$/;"	v	class:GDDR5_4000_x64
tRTW	./mem/DRAMCtrl.py	/^    tRTW = '3.75ns'$/;"	v	class:LPDDR2_S4_1066_x32
tRTW	./mem/DRAMCtrl.py	/^    tRTW = '4ns'$/;"	v	class:HBM_1000_4H_x128
tRTW	./mem/DRAMCtrl.py	/^    tRTW = Param.Latency("Read to write, same rank switching time")$/;"	v	class:DRAMCtrl
tRTW	./mem/dram_ctrl.hh	/^    const Tick tRTW;$/;"	m	class:DRAMCtrl
tWR	./mem/DRAMCtrl.py	/^    tWR = '12ns'$/;"	v	class:GDDR5_4000_x64
tWR	./mem/DRAMCtrl.py	/^    tWR = '15ns'$/;"	v	class:DDR3_1600_x64
tWR	./mem/DRAMCtrl.py	/^    tWR = '15ns'$/;"	v	class:DDR4_2400_x64
tWR	./mem/DRAMCtrl.py	/^    tWR = '15ns'$/;"	v	class:LPDDR2_S4_1066_x32
tWR	./mem/DRAMCtrl.py	/^    tWR = '15ns'$/;"	v	class:LPDDR3_1600_x32
tWR	./mem/DRAMCtrl.py	/^    tWR = '15ns'$/;"	v	class:WideIO_200_x128
tWR	./mem/DRAMCtrl.py	/^    tWR = '18ns'$/;"	v	class:HBM_1000_4H_x128
tWR	./mem/DRAMCtrl.py	/^    tWR = '8ns'$/;"	v	class:HMC_2500_x32
tWR	./mem/DRAMCtrl.py	/^    tWR = Param.Latency("Write recovery time")$/;"	v	class:DRAMCtrl
tWR	./mem/dram_ctrl.hh	/^    const Tick tWR;$/;"	m	class:DRAMCtrl
tWTR	./mem/DRAMCtrl.py	/^    tWTR = '10ns'$/;"	v	class:HBM_1000_4H_x128
tWTR	./mem/DRAMCtrl.py	/^    tWTR = '15ns'$/;"	v	class:WideIO_200_x128
tWTR	./mem/DRAMCtrl.py	/^    tWTR = '5ns'$/;"	v	class:DDR4_2400_x64
tWTR	./mem/DRAMCtrl.py	/^    tWTR = '5ns'$/;"	v	class:GDDR5_4000_x64
tWTR	./mem/DRAMCtrl.py	/^    tWTR = '7.5ns'$/;"	v	class:DDR3_1600_x64
tWTR	./mem/DRAMCtrl.py	/^    tWTR = '7.5ns'$/;"	v	class:LPDDR2_S4_1066_x32
tWTR	./mem/DRAMCtrl.py	/^    tWTR = '7.5ns'$/;"	v	class:LPDDR3_1600_x32
tWTR	./mem/DRAMCtrl.py	/^    tWTR = Param.Latency("Write to read, same rank switching time")$/;"	v	class:DRAMCtrl
tWTR	./mem/dram_ctrl.hh	/^    const Tick tWTR;$/;"	m	class:DRAMCtrl
tXAW	./mem/DRAMCtrl.py	/^    tXAW = '21ns'$/;"	v	class:DDR4_2400_x64
tXAW	./mem/DRAMCtrl.py	/^    tXAW = '23ns'$/;"	v	class:GDDR5_4000_x64
tXAW	./mem/DRAMCtrl.py	/^    tXAW = '25ns'$/;"	v	class:DDR3_2133_x64
tXAW	./mem/DRAMCtrl.py	/^    tXAW = '30ns'$/;"	v	class:DDR3_1600_x64
tXAW	./mem/DRAMCtrl.py	/^    tXAW = '30ns'$/;"	v	class:HBM_1000_4H_x128
tXAW	./mem/DRAMCtrl.py	/^    tXAW = '50ns'$/;"	v	class:LPDDR2_S4_1066_x32
tXAW	./mem/DRAMCtrl.py	/^    tXAW = '50ns'$/;"	v	class:LPDDR3_1600_x32
tXAW	./mem/DRAMCtrl.py	/^    tXAW = '50ns'$/;"	v	class:WideIO_200_x128
tXAW	./mem/DRAMCtrl.py	/^    tXAW = Param.Latency("X activation window")$/;"	v	class:DRAMCtrl
tXAW	./mem/dram_ctrl.hh	/^    const Tick tXAW;$/;"	m	class:DRAMCtrl
tXP	./mem/DRAMCtrl.py	/^    tXP = '8ns'$/;"	v	class:HBM_1000_4H_x128
tXP	./mem/DRAMCtrl.py	/^    tXP = Param.Latency("0ns", "Power-up Delay")$/;"	v	class:DRAMCtrl
tXPDLL	./mem/DRAMCtrl.py	/^    tXPDLL = Param.Latency("0ns", "Power-up Delay with locked DLL")$/;"	v	class:DRAMCtrl
tXS	./mem/DRAMCtrl.py	/^    tXS = '168ns'$/;"	v	class:HBM_1000_4H_x128
tXS	./mem/DRAMCtrl.py	/^    tXS = '268ns'$/;"	v	class:HBM_1000_4H_x64
tXS	./mem/DRAMCtrl.py	/^    tXS = Param.Latency("0ns", "Self-refresh exit latency")$/;"	v	class:DRAMCtrl
tXSDLL	./mem/DRAMCtrl.py	/^    tXSDLL = Param.Latency("0ns", "Self-refresh exit latency DLL")$/;"	v	class:DRAMCtrl
t_AND	./mem/slicc/parser.py	/^    t_AND = r'&&'$/;"	v	class:SLICC
t_ANY_COMMENT	./arch/micro_asm.py	/^def t_ANY_COMMENT(t):$/;"	f
t_ANY_DOT	./arch/micro_asm.py	/^t_ANY_DOT    = r'\\.'$/;"	v
t_ANY_ID	./arch/micro_asm.py	/^def t_ANY_ID(t):$/;"	f
t_ANY_LPAREN	./arch/micro_asm.py	/^t_ANY_LPAREN = r'\\('$/;"	v
t_ANY_MULTILINECOMMENT	./arch/micro_asm.py	/^def t_ANY_MULTILINECOMMENT(t):$/;"	f
t_ANY_RPAREN	./arch/micro_asm.py	/^t_ANY_RPAREN = r'\\)'$/;"	v
t_ANY_SEMI	./arch/micro_asm.py	/^t_ANY_SEMI   = r';'$/;"	v
t_ANY_error	./arch/micro_asm.py	/^def t_ANY_error(t):$/;"	f
t_ANY_ignore	./arch/micro_asm.py	/^t_ANY_ignore = ' \\t\\x0c'$/;"	v
t_ASTERISK	./arch/isa_parser.py	/^    t_ASTERISK         = r'\\*'$/;"	v	class:ISAParser
t_CODELIT	./arch/isa_parser.py	/^    def t_CODELIT(self, t):$/;"	m	class:ISAParser
t_COLON	./arch/isa_parser.py	/^    t_COLON            = r':'$/;"	v	class:ISAParser
t_COMMA	./arch/isa_parser.py	/^    t_COMMA            = r','$/;"	v	class:ISAParser
t_CPPDIRECTIVE	./arch/isa_parser.py	/^    def t_CPPDIRECTIVE(self, t):$/;"	m	class:ISAParser
t_DASH	./mem/slicc/parser.py	/^    t_DASH = r'-'$/;"	v	class:SLICC
t_DBLCOLON	./arch/isa_parser.py	/^    t_DBLCOLON         = r'::'$/;"	v	class:ISAParser
t_DECR	./mem/slicc/parser.py	/^    t_DECR = r'--'$/;"	v	class:SLICC
t_DOT	./arch/isa_parser.py	/^    t_DOT              = r'\\.'$/;"	v	class:ISAParser
t_DOT	./mem/slicc/parser.py	/^    t_DOT = r'\\.'$/;"	v	class:SLICC
t_DOUBLE_COLON	./mem/slicc/parser.py	/^    t_DOUBLE_COLON = r'::'$/;"	v	class:SLICC
t_ENDFILE	./arch/isa_parser.py	/^    def t_ENDFILE(self, t):$/;"	m	class:ISAParser
t_FLOATNUMBER	./mem/slicc/parser.py	/^    def t_FLOATNUMBER(self, t):$/;"	m	class:SLICC
t_GREATER	./arch/isa_parser.py	/^    t_GREATER          = r'\\>'$/;"	v	class:ISAParser
t_GT	./mem/slicc/parser.py	/^    t_GT = r'>'$/;"	v	class:SLICC
t_ID	./arch/isa_parser.py	/^    def t_ID(self, t):$/;"	m	class:ISAParser
t_IDENT	./mem/slicc/parser.py	/^    def t_IDENT(self, t):$/;"	m	class:SLICC
t_INCR	./mem/slicc/parser.py	/^    t_INCR = r'\\+\\+'$/;"	v	class:SLICC
t_INITIAL_LBRACE	./arch/micro_asm.py	/^def t_INITIAL_LBRACE(t):$/;"	f
t_INITIAL_NEWLINE	./arch/micro_asm.py	/^def t_INITIAL_NEWLINE(t):$/;"	f
t_INTLIT	./arch/isa_parser.py	/^    def t_INTLIT(self, t):$/;"	m	class:ISAParser
t_LBRACE	./arch/isa_parser.py	/^    t_LBRACE           = r'\\{'$/;"	v	class:ISAParser
t_LBRACKET	./arch/isa_parser.py	/^    t_LBRACKET         = r'\\['$/;"	v	class:ISAParser
t_LEFTSHIFT	./mem/slicc/parser.py	/^    t_LEFTSHIFT = r'<<'$/;"	v	class:SLICC
t_LESS	./arch/isa_parser.py	/^    t_LESS             = r'\\<'$/;"	v	class:ISAParser
t_LPAREN	./arch/isa_parser.py	/^    t_LPAREN           = r'\\('$/;"	v	class:ISAParser
t_LT	./mem/slicc/parser.py	/^    t_LT = r'<'$/;"	v	class:SLICC
t_NEWFILE	./arch/isa_parser.py	/^    def t_NEWFILE(self, t):$/;"	m	class:ISAParser
t_NEWLINE	./arch/isa_parser.py	/^    def t_NEWLINE(self, t):$/;"	m	class:ISAParser
t_NOT	./mem/slicc/parser.py	/^    t_NOT = r'!'$/;"	v	class:SLICC
t_NUMBER	./mem/slicc/parser.py	/^    def t_NUMBER(self, t):$/;"	m	class:SLICC
t_OR	./mem/slicc/parser.py	/^    t_OR = r'\\|\\|'$/;"	v	class:SLICC
t_PLUS	./mem/slicc/parser.py	/^    t_PLUS = r'\\+'$/;"	v	class:SLICC
t_RBRACE	./arch/isa_parser.py	/^    t_RBRACE           = r'\\}'$/;"	v	class:ISAParser
t_RBRACKET	./arch/isa_parser.py	/^    t_RBRACKET         = r'\\]'$/;"	v	class:ISAParser
t_RIGHTSHIFT	./mem/slicc/parser.py	/^    t_RIGHTSHIFT = r'>>'$/;"	v	class:SLICC
t_RPAREN	./arch/isa_parser.py	/^    t_RPAREN           = r'\\)'$/;"	v	class:ISAParser
t_SEMI	./arch/isa_parser.py	/^    t_SEMI             = r';'$/;"	v	class:ISAParser
t_SEMI	./mem/slicc/parser.py	/^    t_SEMI = r';'$/;"	v	class:SLICC
t_SLASH	./mem/slicc/parser.py	/^    t_SLASH = r'\/'$/;"	v	class:SLICC
t_STAR	./mem/slicc/parser.py	/^    t_STAR = r'\\*'$/;"	v	class:SLICC
t_STRING1	./mem/slicc/parser.py	/^    def t_STRING1(self, t):$/;"	m	class:SLICC
t_STRING2	./mem/slicc/parser.py	/^    def t_STRING2(self, t):$/;"	m	class:SLICC
t_STRLIT	./arch/isa_parser.py	/^    def t_STRLIT(self, t):$/;"	m	class:ISAParser
t_asm_ID	./arch/micro_asm.py	/^def t_asm_ID(t):$/;"	f
t_asm_NEWLINE	./arch/micro_asm.py	/^def t_asm_NEWLINE(t):$/;"	f
t_asm_RBRACE	./arch/micro_asm.py	/^def t_asm_RBRACE(t):$/;"	f
t_c_comment	./mem/slicc/parser.py	/^    def t_c_comment(self, t):$/;"	m	class:SLICC
t_comment	./arch/isa_parser.py	/^    def t_comment(self, t):$/;"	m	class:ISAParser
t_cpp_comment	./mem/slicc/parser.py	/^    def t_cpp_comment(self, t):$/;"	m	class:SLICC
t_error	./arch/isa_parser.py	/^    def t_error(self, t):$/;"	m	class:ISAParser
t_error	./python/m5/util/grammar.py	/^    def t_error(self, t):$/;"	m	class:Grammar
t_ignore	./arch/isa_parser.py	/^    t_ignore = ' \\t\\x0c'$/;"	v	class:ISAParser
t_ignore	./mem/slicc/parser.py	/^    t_ignore = '\\t '$/;"	v	class:SLICC
t_newline	./mem/slicc/parser.py	/^    def t_newline(self, t):$/;"	m	class:SLICC
t_params_COLON	./arch/micro_asm.py	/^def t_params_COLON(t):$/;"	f
t_params_NEWLINE	./arch/micro_asm.py	/^def t_params_NEWLINE(t):$/;"	f
t_params_PARAMS	./arch/micro_asm.py	/^def t_params_PARAMS(t):$/;"	f
t_params_SEMI	./arch/micro_asm.py	/^def t_params_SEMI(t):$/;"	f
ta	./arch/mips/pra_constants.hh	/^    Bitfield<19, 16> ta;$/;"	m	namespace:MipsISA
table	./arch/alpha/tlb.hh	/^    std::vector<TlbEntry> table; \/\/ the Page Table$/;"	m	class:AlphaISA::TLB
table	./arch/arm/tlb.hh	/^    TlbEntry* table;     \/\/ the Page Table$/;"	m	class:ArmISA::TLB
table	./arch/mips/tlb.hh	/^    MipsISA::PTE *table;        \/\/ the Page Table$/;"	m	class:MipsISA::TLB
table	./arch/power/tlb.hh	/^    PowerISA::PTE *table;       \/\/ the Page Table$/;"	m	class:PowerISA::TLB
table	./base/inifile.hh	/^        EntryTable      table;          \/\/\/< Table of entries.$/;"	m	class:IniFile::Section
table	./base/inifile.hh	/^    SectionTable table;$/;"	m	class:IniFile
table	./dev/storage/disk_image.hh	/^    SectorTable *table;$/;"	m	class:CowDiskImage
table	./kern/tru64/tru64_syscalls.hh	/^        table = 85,$/;"	e	enum:SystemCalls::__anon102
tableAddr	./arch/x86/bios/intelmp.hh	/^    uint32_t tableAddr;$/;"	m	class:X86ISA::IntelMP::FloatingPointer
tableAddr	./arch/x86/bios/smbios.hh	/^            uint32_t tableAddr;$/;"	m	struct:X86ISA::SMBios::SMBiosTable::SMBiosHeader::IntermediateHeader
tableFunc	./arch/alpha/tru64/process.cc	/^tableFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
tableWalker	./arch/arm/table_walker.hh	/^        TableWalker *tableWalker;$/;"	m	class:ArmISA::TableWalker::WalkerState
tableWalker	./arch/arm/tlb.hh	/^    TableWalker *tableWalker;$/;"	m	class:ArmISA::TLB
table_assoc	./mem/cache/prefetch/Prefetcher.py	/^    table_assoc = Param.Int(4, "Associativity of PC lookup table")$/;"	v	class:StridePrefetcher
table_sets	./mem/cache/prefetch/Prefetcher.py	/^    table_sets = Param.Int(16, "Number of sets in PC lookup table")$/;"	v	class:StridePrefetcher
table_size	./dev/storage/DiskImage.py	/^    table_size = Param.Int(65536, "initial table size")$/;"	v	class:CowDiskImage
tac	./arch/arm/miscregs.hh	/^        Bitfield<21>     tac;$/;"	m	namespace:ArmISA
tacr	./arch/arm/miscregs.hh	/^        Bitfield<21>     tacr;  \/\/ AArch64$/;"	m	namespace:ArmISA
tadv	./dev/net/i8254xGBe_defs.hh	/^    TADV tadv;$/;"	m	struct:iGbReg::Regs
tadvEvent	./dev/net/i8254xGBe.hh	/^    EventWrapper<IGbE, &IGbE::tadvProcess> tadvEvent;$/;"	m	class:IGbE
tadvProcess	./dev/net/i8254xGBe.hh	/^    void tadvProcess() {$/;"	f	class:IGbE
tag	./arch/alpha/pagetable.hh	/^    Addr tag;               \/\/ virtual page number tag$/;"	m	struct:AlphaISA::TlbEntry
tag	./arch/arm/linux/atag.hh	/^    uint32_t tag() { return CmdTag; }$/;"	f	class:AtagCmdline
tag	./arch/arm/linux/atag.hh	/^    uint32_t tag() { return CoreTag; }$/;"	f	class:AtagCore
tag	./arch/arm/linux/atag.hh	/^    uint32_t tag() { return MemTag; }$/;"	f	class:AtagMem
tag	./arch/arm/linux/atag.hh	/^    uint32_t tag() { return NoneTag; }$/;"	f	class:AtagNone
tag	./arch/arm/linux/atag.hh	/^    uint32_t tag() { return RevTag; }$/;"	f	class:AtagRev
tag	./arch/arm/linux/atag.hh	/^    uint32_t tag() { return SerialTag; }$/;"	f	class:AtagSerial
tag	./cpu/pred/btb.hh	/^        Addr tag;$/;"	m	struct:DefaultBTB::BTBEntry
tag	./dev/virtio/VirtIO9P.py	/^    tag = Param.String("gem5", "Mount tag")$/;"	v	class:VirtIO9PBase
tag	./dev/virtio/fs9p.hh	/^        char tag[];$/;"	m	struct:VirtIO9PBase::Config
tag	./dev/virtio/fs9p.hh	/^    P9Tag tag;$/;"	m	struct:P9MsgHeader
tag	./mem/cache/blk.hh	/^    Addr tag;$/;"	m	class:CacheBlk
tag	./unittest/refcnttest.cc	/^    tag()$/;"	f	class:__anon3::TestRC
tagAccessLatency	./mem/ruby/structures/RubyCache.py	/^    tagAccessLatency = Param.Cycles(1, "cycles for a tag array access")$/;"	v	class:RubyCache
tagAccesses	./mem/cache/tags/base.hh	/^    Stats::Scalar tagAccesses;$/;"	m	class:BaseTags
tagArray	./mem/ruby/structures/CacheMemory.hh	/^    BankedArray tagArray;$/;"	m	class:CacheMemory
tagArrayBanks	./mem/ruby/structures/RubyCache.py	/^    tagArrayBanks = Param.Int(1, "Number of banks for the tag array")$/;"	v	class:RubyCache
tagBits	./cpu/pred/btb.hh	/^    unsigned tagBits;$/;"	m	class:DefaultBTB
tagHash	./mem/cache/tags/fa_lru.hh	/^    hash_t tagHash;$/;"	m	class:FALRU
tagIterator	./mem/cache/tags/fa_lru.hh	/^    typedef hash_t::const_iterator tagIterator;$/;"	t	class:FALRU
tagMask	./cpu/pred/btb.hh	/^    unsigned tagMask;$/;"	m	class:DefaultBTB
tagPrefetch	./mem/cache/prefetch/queued.hh	/^    const bool tagPrefetch;$/;"	m	class:QueuedPrefetcher
tagRAMLatency	./arch/arm/miscregs.hh	/^      Bitfield<8,6>   tagRAMLatency;$/;"	m	namespace:ArmISA
tagRAMSetup	./arch/arm/miscregs.hh	/^      Bitfield<9>     tagRAMSetup;$/;"	m	namespace:ArmISA
tagRAMSlice	./arch/arm/miscregs.hh	/^      Bitfield<12>    tagRAMSlice;$/;"	m	namespace:ArmISA
tagShift	./mem/cache/tags/base_set_assoc.hh	/^    int tagShift;$/;"	m	class:BaseSetAssoc
tagShiftAmt	./cpu/pred/btb.hh	/^    unsigned tagShiftAmt;$/;"	m	class:DefaultBTB
tag_access	./arch/sparc/tlb.hh	/^    uint64_t tag_access;$/;"	m	class:SparcISA::TLB
tag_prefetch	./mem/cache/prefetch/Prefetcher.py	/^    tag_prefetch = Param.Bool(True, "Tag prefetch with PC of generating access")$/;"	v	class:QueuedPrefetcher
tags	./mem/cache/Cache.py	/^    tags = Param.BaseTags(LRU(), "Tag store (replacement policy)")$/;"	v	class:BaseCache
tags	./mem/cache/cache.hh	/^    BaseTags *tags;$/;"	m	class:Cache
tags	./mem/cache/tags/base.hh	/^    BaseTags *tags;$/;"	m	class:BaseTagsCallback
tags	./mem/cache/tags/base.hh	/^    BaseTags *tags;$/;"	m	class:BaseTagsDumpCallback
tagsInUse	./mem/cache/tags/base.hh	/^    Stats::Average tagsInUse;$/;"	m	class:BaseTags
tail	./cpu/o3/rob.hh	/^    InstIt tail;$/;"	m	class:ROB
tail	./mem/cache/tags/fa_lru.hh	/^    FALRUBlk *tail;$/;"	m	class:FALRU
takeCheckpoint	./sim/debug.cc	/^takeCheckpoint(Tick when)$/;"	f
takeInt	./arch/arm/interrupts.cc	/^ArmISA::Interrupts::takeInt(ThreadContext *tc, InterruptTypes int_type) const$/;"	f	class:ArmISA::Interrupts
takeInterrupt	./cpu/minor/execute.cc	/^Execute::takeInterrupt(ThreadID thread_id, BranchData &branch)$/;"	f	class:Minor::Execute
takeOverFrom	./arch/alpha/decoder.hh	/^    void takeOverFrom(Decoder * old) {}$/;"	f	class:AlphaISA::Decoder
takeOverFrom	./arch/arm/decoder.hh	/^    void takeOverFrom(Decoder *old) {}$/;"	f	class:ArmISA::Decoder
takeOverFrom	./arch/arm/tlb.cc	/^TLB::takeOverFrom(BaseTLB *_otlb)$/;"	f	class:TLB
takeOverFrom	./arch/mips/decoder.hh	/^    void takeOverFrom(Decoder *old) {}$/;"	f	class:MipsISA::Decoder
takeOverFrom	./arch/mips/tlb.hh	/^    void takeOverFrom(BaseTLB *otlb) {}$/;"	f	class:MipsISA::TLB
takeOverFrom	./arch/power/decoder.hh	/^    void takeOverFrom(Decoder *old) {}$/;"	f	class:PowerISA::Decoder
takeOverFrom	./arch/power/tlb.hh	/^    void takeOverFrom(BaseTLB *otlb) {}$/;"	f	class:PowerISA::TLB
takeOverFrom	./arch/sparc/decoder.hh	/^    void takeOverFrom(Decoder *old) {}$/;"	f	class:SparcISA::Decoder
takeOverFrom	./arch/sparc/tlb.hh	/^    void takeOverFrom(BaseTLB *otlb) {}$/;"	f	class:SparcISA::TLB
takeOverFrom	./arch/x86/decoder.hh	/^    void takeOverFrom(Decoder *old)$/;"	f	class:X86ISA::Decoder
takeOverFrom	./cpu/BaseCPU.py	/^    def takeOverFrom(self, old_cpu):$/;"	f
takeOverFrom	./cpu/base.cc	/^BaseCPU::takeOverFrom(BaseCPU *oldCPU)$/;"	f	class:BaseCPU
takeOverFrom	./cpu/checker/cpu_impl.hh	/^Checker<Impl>::takeOverFrom(BaseCPU *oldCPU)$/;"	f	class:Checker
takeOverFrom	./cpu/checker/thread_context.hh	/^    void takeOverFrom(ThreadContext *oldContext)$/;"	f	class:CheckerThreadContext
takeOverFrom	./cpu/kvm/base.cc	/^BaseKvmCPU::takeOverFrom(BaseCPU *cpu)$/;"	f	class:BaseKvmCPU
takeOverFrom	./cpu/minor/cpu.cc	/^MinorCPU::takeOverFrom(BaseCPU *old_cpu)$/;"	f	class:MinorCPU
takeOverFrom	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::takeOverFrom()$/;"	f	class:DefaultCommit
takeOverFrom	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::takeOverFrom(BaseCPU *oldCPU)$/;"	f	class:FullO3CPU
takeOverFrom	./cpu/o3/decode.hh	/^    void takeOverFrom() { resetStage(); }$/;"	f	class:DefaultDecode
takeOverFrom	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::takeOverFrom()$/;"	f	class:DefaultFetch
takeOverFrom	./cpu/o3/fu_pool.hh	/^    void takeOverFrom() {};$/;"	f	class:FUPool
takeOverFrom	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::takeOverFrom()$/;"	f	class:DefaultIEW
takeOverFrom	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::takeOverFrom()$/;"	f	class:InstructionQueue
takeOverFrom	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::takeOverFrom()$/;"	f	class:LSQ
takeOverFrom	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::takeOverFrom()$/;"	f	class:LSQUnit
takeOverFrom	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::takeOverFrom()$/;"	f	class:MemDepUnit
takeOverFrom	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::takeOverFrom()$/;"	f	class:DefaultRename
takeOverFrom	./cpu/o3/rob_impl.hh	/^ROB<Impl>::takeOverFrom()$/;"	f	class:ROB
takeOverFrom	./cpu/o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::takeOverFrom(ThreadContext *old_context)$/;"	f	class:O3ThreadContext
takeOverFrom	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::takeOverFrom(BaseCPU *oldCPU)$/;"	f	class:AtomicSimpleCPU
takeOverFrom	./cpu/simple/timing.cc	/^TimingSimpleCPU::takeOverFrom(BaseCPU *oldCPU)$/;"	f	class:TimingSimpleCPU
takeOverFrom	./cpu/simple_thread.cc	/^SimpleThread::takeOverFrom(ThreadContext *oldContext)$/;"	f	class:SimpleThread
takeOverFrom	./cpu/thread_context.cc	/^takeOverFrom(ThreadContext &ntc, ThreadContext &otc)$/;"	f
takeOverFrom	./cpu/thread_context.hh	/^    void takeOverFrom(ThreadContext *oldContext)$/;"	f	class:ProxyThreadContext
takeOverFrom	./cpu/trace/trace_cpu.cc	/^TraceCPU::takeOverFrom(BaseCPU *oldCPU)$/;"	f	class:TraceCPU
takenCounters	./cpu/pred/bi_mode.hh	/^    std::vector<SatCounter> takenCounters;$/;"	m	class:BiModeBP
takenPred	./cpu/pred/bi_mode.hh	/^        bool takenPred;$/;"	m	struct:BiModeBP::BPHistory
takenThreshold	./cpu/pred/bi_mode.hh	/^    unsigned takenThreshold;$/;"	m	class:BiModeBP
takenUsed	./cpu/pred/bi_mode.hh	/^        bool takenUsed;$/;"	m	struct:BiModeBP::BPHistory
tanar	./dev/net/ns_gige.hh	/^    uint32_t    tanar;$/;"	m	struct:dp_regs
taner	./dev/net/ns_gige.hh	/^    uint32_t    taner;$/;"	m	struct:dp_regs
tanlpar	./dev/net/ns_gige.hh	/^    uint32_t    tanlpar;$/;"	m	struct:dp_regs
tap	./dev/net/ethertap.cc	/^    EtherTap *tap;$/;"	m	class:TapEvent	file:
tap	./dev/net/ethertap.cc	/^    EtherTap *tap;$/;"	m	class:TapListener	file:
tap	./dev/net/ethertap.hh	/^        EtherTap *tap;$/;"	m	class:EtherTap::TxEvent
tap	./dev/net/ethertap.hh	/^    EtherTap *tap;$/;"	m	class:EtherTapInt
targTC	./arch/mips/mt_constants.hh	/^    Bitfield<7,  0>  targTC;$/;"	m	namespace:MipsISA
target	./cpu/minor/pipe_data.hh	/^    TheISA::PCState target;$/;"	m	class:Minor::BranchData
target	./cpu/pred/btb.hh	/^        TheISA::PCState target;$/;"	m	struct:DefaultBTB::BTBEntry
targetAddr	./arch/power/insts/branch.hh	/^    uint32_t targetAddr;$/;"	m	class:PowerISA::BranchNonPCRel
targetAddr	./arch/power/insts/branch.hh	/^    uint32_t targetAddr;$/;"	m	class:PowerISA::BranchNonPCRelCond
targetCS	./arch/x86/regs/misc.hh	/^        Bitfield<15, 0> targetCS;$/;"	m	namespace:X86ISA
targetEIP	./arch/x86/regs/misc.hh	/^        Bitfield<31, 0> targetEIP;$/;"	m	namespace:X86ISA
targetESP	./arch/x86/regs/misc.hh	/^        Bitfield<31, 0> targetESP;$/;"	m	namespace:X86ISA
targetEip	./arch/x86/regs/misc.hh	/^        Bitfield<31,0> targetEip;$/;"	m	namespace:X86ISA
targets	./mem/cache/mshr.hh	/^    TargetList targets;$/;"	m	class:MSHR
tase	./arch/arm/miscregs.hh	/^        Bitfield<15> tase;$/;"	m	namespace:ArmISA
task	./arch/alpha/stacktrace.cc	/^ProcessInfo::task(Addr ksp) const$/;"	f	class:AlphaISA::ProcessInfo
task	./arch/arm/stacktrace.cc	/^    ProcessInfo::task(Addr ksp) const$/;"	f	class:ArmISA::ProcessInfo
task	./arch/mips/linux/thread_info.hh	/^        Addr_a                  task;$/;"	m	struct:Linux::thread_info
task	./arch/mips/stacktrace.cc	/^ProcessInfo::task(Addr ksp) const$/;"	f	class:ProcessInfo
task	./arch/power/stacktrace.cc	/^ProcessInfo::task(Addr ksp) const$/;"	f	class:PowerISA::ProcessInfo
task	./arch/x86/stacktrace.cc	/^    ProcessInfo::task(Addr ksp) const$/;"	f	class:X86ISA::ProcessInfo
taskCommandTrack	./dev/arm/ufs_device.hh	/^    uint32_t taskCommandTrack;$/;"	m	class:UFSHostDevice
taskEventQueue	./dev/arm/ufs_device.hh	/^    taskEventQueue;$/;"	m	class:UFSHostDevice
taskFile	./arch/arm/freebsd/system.hh	/^    std::ostream* taskFile;$/;"	m	class:FreebsdArmSystem
taskFile	./arch/arm/linux/system.hh	/^    std::ostream* taskFile;$/;"	m	class:LinuxArmSystem
taskHandler	./dev/arm/ufs_device.cc	/^UFSHostDevice::taskHandler(struct UTPUPIUTaskReq* request_in,$/;"	f	class:UFSHostDevice
taskId	./cpu/base.hh	/^    uint32_t taskId() const { return _taskId; }$/;"	f	class:BaseCPU
taskId	./cpu/base.hh	/^    void taskId(uint32_t id) { _taskId = id; }$/;"	f	class:BaseCPU
taskId	./mem/request.hh	/^    taskId() const$/;"	f	class:Request
taskId	./mem/request.hh	/^    taskId(uint32_t id) {$/;"	f	class:Request
taskInfo	./dev/arm/ufs_device.hh	/^    std::deque<struct taskStart> taskInfo;$/;"	m	class:UFSHostDevice
taskMap	./arch/arm/freebsd/system.hh	/^    std::map<uint32_t, uint32_t> taskMap;$/;"	m	class:FreebsdArmSystem
taskMap	./arch/arm/linux/system.hh	/^    std::map<uint32_t, uint32_t> taskMap;$/;"	m	class:LinuxArmSystem
taskStart	./dev/arm/ufs_device.cc	/^UFSHostDevice::taskStart()$/;"	f	class:UFSHostDevice
taskStart	./dev/arm/ufs_device.hh	/^    struct taskStart {$/;"	s	class:UFSHostDevice
task_id	./mem/cache/blk.hh	/^    uint32_t task_id;$/;"	m	class:CacheBlk
task_notify	./kern/tru64/tru64_syscalls.hh	/^        task_notify = 12,$/;"	e	enum:SystemCalls::__anon103
task_off	./arch/alpha/stacktrace.hh	/^    int task_off;$/;"	m	class:AlphaISA::ProcessInfo
task_off	./arch/arm/stacktrace.hh	/^    int task_off;$/;"	m	class:ArmISA::ProcessInfo
task_off	./arch/mips/stacktrace.hh	/^    int task_off;$/;"	m	class:MipsISA::ProcessInfo
task_off	./arch/x86/stacktrace.hh	/^        int task_off;$/;"	m	class:X86ISA::ProcessInfo
task_self	./kern/tru64/tru64_syscalls.hh	/^        task_self = 10,$/;"	e	enum:SystemCalls::__anon103
task_struct_size	./arch/alpha/stacktrace.hh	/^    int task_struct_size;$/;"	m	class:AlphaISA::ProcessInfo
task_struct_size	./arch/arm/stacktrace.hh	/^    int task_struct_size;$/;"	m	class:ArmISA::ProcessInfo
task_struct_size	./arch/x86/stacktrace.hh	/^        int task_struct_size;$/;"	m	class:X86ISA::ProcessInfo
tb	./arch/mips/dt_constants.hh	/^    Bitfield<27>     tb;$/;"	m	namespace:MipsISA
tba	./arch/sparc/isa.hh	/^    uint64_t tba;           \/\/ Trap Base Address$/;"	m	class:SparcISA::ISA
tba	./dev/alpha/tsunami_pchip.hh	/^    uint64_t tba[4];$/;"	m	class:TsunamiPChip
tbe	./arch/mips/mt_constants.hh	/^    Bitfield<17>     tbe;$/;"	m	namespace:MipsISA
tbi	./arch/alpha/osfpal.hh	/^        tbi = 0x33,$/;"	e	enum:PAL::__anon50
tbi	./arch/arm/miscregs.hh	/^        Bitfield<20> tbi; \/\/ EL2\/EL3$/;"	m	namespace:ArmISA
tbi	./arch/arm/miscregs.hh	/^        Bitfield<20> tbi;$/;"	m	namespace:ArmISA
tbi	./arch/mips/dt_constants.hh	/^    Bitfield<4>      tbi;$/;"	m	namespace:MipsISA
tbi0	./arch/arm/miscregs.hh	/^        Bitfield<37> tbi0; \/\/ EL1$/;"	m	namespace:ArmISA
tbi0	./arch/arm/miscregs.hh	/^        Bitfield<37> tbi0;$/;"	m	namespace:ArmISA
tbi1	./arch/arm/miscregs.hh	/^        Bitfield<38> tbi1; \/\/ EL1$/;"	m	namespace:ArmISA
tbi1	./arch/arm/miscregs.hh	/^        Bitfield<38> tbi1;$/;"	m	namespace:ArmISA
tbicr	./dev/net/ns_gige.hh	/^    uint32_t    tbicr;$/;"	m	struct:dp_regs
tbisr	./dev/net/ns_gige.hh	/^    uint32_t    tbisr;$/;"	m	struct:dp_regs
tbl_sysinfo	./kern/tru64/tru64.hh	/^    struct tbl_sysinfo {$/;"	s	class:Tru64
tbr	./arch/sparc/remote_gdb.hh	/^            uint32_t tbr;$/;"	m	struct:SparcISA::RemoteGDB::SPARCGdbRegCache::__anon42
tbu	./arch/mips/dt_constants.hh	/^    Bitfield<3>      tbu;$/;"	m	namespace:MipsISA
tc	./arch/alpha/stacktrace.hh	/^    ThreadContext *tc;$/;"	m	class:AlphaISA::ProcessInfo
tc	./arch/alpha/stacktrace.hh	/^    ThreadContext *tc;$/;"	m	class:AlphaISA::StackTrace
tc	./arch/arm/stacktrace.hh	/^    ThreadContext *tc;$/;"	m	class:ArmISA::ProcessInfo
tc	./arch/arm/stacktrace.hh	/^    ThreadContext *tc;$/;"	m	class:ArmISA::StackTrace
tc	./arch/arm/table_walker.hh	/^        ThreadContext *tc;$/;"	m	class:ArmISA::TableWalker::WalkerState
tc	./arch/generic/freebsd/threadinfo.hh	/^    ThreadContext *tc;$/;"	m	class:FreeBSD::ThreadInfo
tc	./arch/generic/linux/threadinfo.hh	/^    ThreadContext *tc;$/;"	m	class:Linux::ThreadInfo
tc	./arch/mips/stacktrace.hh	/^    ThreadContext *tc;$/;"	m	class:MipsISA::ProcessInfo
tc	./arch/mips/stacktrace.hh	/^    ThreadContext *tc;$/;"	m	class:MipsISA::StackTrace
tc	./arch/power/stacktrace.hh	/^    ThreadContext *tc;$/;"	m	class:PowerISA::StackTrace
tc	./arch/x86/pagetable_walker.hh	/^            ThreadContext *tc;$/;"	m	class:X86ISA::Walker::WalkerState
tc	./arch/x86/stacktrace.hh	/^        ThreadContext *tc;$/;"	m	class:X86ISA::ProcessInfo
tc	./arch/x86/stacktrace.hh	/^        ThreadContext *tc;$/;"	m	class:X86ISA::StackTrace
tc	./cpu/checker/cpu.hh	/^    ThreadContext *tc;$/;"	m	class:CheckerCPU
tc	./cpu/cpuevent.hh	/^    ThreadContext *tc;$/;"	m	class:CpuEvent
tc	./cpu/kvm/base.hh	/^    ThreadContext *tc;$/;"	m	class:BaseKvmCPU
tc	./cpu/o3/thread_state.hh	/^    ThreadContext *tc;$/;"	m	struct:O3ThreadState
tc	./cpu/quiesce_event.hh	/^    ThreadContext *tc;$/;"	m	class:EndQuiesceEvent
tc	./cpu/simple_thread.hh	/^    ProxyThreadContext<SimpleThread> *tc;$/;"	m	class:SimpleThread
tc	./sim/arguments.hh	/^    ThreadContext *tc;$/;"	m	class:Arguments
tc	./sim/vptr.hh	/^    ThreadContext *tc;$/;"	m	class:VPtr
tcBase	./cpu/base_dyn_inst.hh	/^    ThreadContext *tcBase() { return thread->getTC(); }$/;"	f	class:BaseDynInst
tcBase	./cpu/minor/exec_context.hh	/^    ThreadContext *tcBase() { return thread.getTC(); }$/;"	f	class:Minor::ExecContext
tcBase	./cpu/o3/cpu.hh	/^    tcBase(ThreadID tid)$/;"	f	class:FullO3CPU
tcSquash	./cpu/o3/commit.hh	/^    bool tcSquash[Impl::MaxThreads];$/;"	m	class:DefaultCommit
tca	./arch/mips/mt_constants.hh	/^    Bitfield<15>     tca;$/;"	m	namespace:MipsISA
tcnum	./arch/mips/dt_constants.hh	/^    Bitfield<19, 12> tcnum;$/;"	m	namespace:MipsISA
tcp	./dev/net/i8254xGBe_defs.hh	/^inline bool tcp(TxDesc *d)  { assert(isContext(d)); return bits(d->d2, 24,24); }$/;"	f	namespace:iGbReg::TxdOp
tcp0	./arch/arm/miscregs.hh	/^        Bitfield<0>  tcp0;$/;"	m	namespace:ArmISA
tcp1	./arch/arm/miscregs.hh	/^        Bitfield<1>  tcp1;$/;"	m	namespace:ArmISA
tcp10	./arch/arm/miscregs.hh	/^        Bitfield<10> tcp10;$/;"	m	namespace:ArmISA
tcp11	./arch/arm/miscregs.hh	/^        Bitfield<11> tcp11;$/;"	m	namespace:ArmISA
tcp12	./arch/arm/miscregs.hh	/^        Bitfield<12> tcp12;$/;"	m	namespace:ArmISA
tcp13	./arch/arm/miscregs.hh	/^        Bitfield<13> tcp13;$/;"	m	namespace:ArmISA
tcp2	./arch/arm/miscregs.hh	/^        Bitfield<2>  tcp2;$/;"	m	namespace:ArmISA
tcp3	./arch/arm/miscregs.hh	/^        Bitfield<3>  tcp3;$/;"	m	namespace:ArmISA
tcp4	./arch/arm/miscregs.hh	/^        Bitfield<4>  tcp4;$/;"	m	namespace:ArmISA
tcp5	./arch/arm/miscregs.hh	/^        Bitfield<5>  tcp5;$/;"	m	namespace:ArmISA
tcp6	./arch/arm/miscregs.hh	/^        Bitfield<6>  tcp6;$/;"	m	namespace:ArmISA
tcp7	./arch/arm/miscregs.hh	/^        Bitfield<7>  tcp7;$/;"	m	namespace:ArmISA
tcp8	./arch/arm/miscregs.hh	/^        Bitfield<8>  tcp8;$/;"	m	namespace:ArmISA
tcp9	./arch/arm/miscregs.hh	/^        Bitfield<9>  tcp9;$/;"	m	namespace:ArmISA
tcpac	./arch/arm/miscregs.hh	/^        Bitfield<31> tcpac;$/;"	m	namespace:ArmISA
tcr	./arch/arm/table_walker.hh	/^            TCR tcr;     \/\/ AArch64 translations$/;"	m	union:ArmISA::TableWalker::WalkerState::__anon65
tcs	./arch/mips/mt_constants.hh	/^    Bitfield<19>     tcs;$/;"	m	namespace:MipsISA
tctl	./dev/net/i8254xGBe_defs.hh	/^    TCTL tctl;$/;"	m	struct:iGbReg::Regs
tcu	./arch/mips/mt_constants.hh	/^    Bitfield<31, 28> tcu;$/;"	m	namespace:MipsISA
tcv	./arch/mips/dt_constants.hh	/^    Bitfield<20>     tcv;$/;"	m	namespace:MipsISA
tda	./arch/arm/miscregs.hh	/^        Bitfield<9>    tda;$/;"	m	namespace:ArmISA
tdba	./dev/net/i8254xGBe_defs.hh	/^    TDBA tdba;$/;"	m	struct:iGbReg::Regs
tde	./arch/arm/miscregs.hh	/^        Bitfield<8>    tde;$/;"	m	namespace:ArmISA
tdh	./dev/net/i8254xGBe_defs.hh	/^    TDH tdh;$/;"	m	struct:iGbReg::Regs
tdlen	./dev/net/i8254xGBe_defs.hh	/^    TDLEN tdlen;$/;"	m	struct:iGbReg::Regs
tdosa	./arch/arm/miscregs.hh	/^        Bitfield<10>   tdosa;$/;"	m	namespace:ArmISA
tdra	./arch/arm/miscregs.hh	/^        Bitfield<11>   tdra;$/;"	m	namespace:ArmISA
tds	./arch/mips/mt_constants.hh	/^    Bitfield<21>     tds;$/;"	m	namespace:MipsISA
tdt	./dev/net/i8254xGBe_defs.hh	/^    TDT tdt;$/;"	m	struct:iGbReg::Regs
tdwba	./dev/net/i8254xGBe_defs.hh	/^    uint64_t tdwba;$/;"	m	struct:iGbReg::Regs
tdz	./arch/arm/miscregs.hh	/^        Bitfield<28>     tdz;   \/\/ AArch64$/;"	m	namespace:ArmISA
te	./arch/arm/miscregs.hh	/^        Bitfield<30>   te;      \/\/ Thumb Exception Enable (AArch32 only)$/;"	m	namespace:ArmISA
te	./arch/mips/mt_constants.hh	/^    Bitfield<15>     te;$/;"	m	namespace:MipsISA
tebi	./python/m5/util/convert.py	/^tebi = gibi * 1024$/;"	v
tempBlock	./mem/cache/cache.hh	/^    CacheBlk *tempBlock;$/;"	m	class:Cache
tempBlockWriteback	./mem/cache/cache.hh	/^    PacketPtr tempBlockWriteback;$/;"	m	class:Cache
tempStore	./cpu/o3/probe/elastic_trace.hh	/^    std::unordered_map<InstSeqNum, InstExecInfo*> tempStore;$/;"	m	class:ElasticTrace
temperature_record_format	./mem/ruby/network/fault_model/FaultModel.hh	/^    enum temperature_record_format$/;"	g	class:FaultModel
temperature_record_temp	./mem/ruby/network/fault_model/FaultModel.hh	/^        temperature_record_temp,$/;"	e	enum:FaultModel::temperature_record_format
temperature_record_weight	./mem/ruby/network/fault_model/FaultModel.hh	/^        temperature_record_weight,$/;"	e	enum:FaultModel::temperature_record_format
temperature_weights	./mem/ruby/network/fault_model/FaultModel.hh	/^    std::vector <int> temperature_weights;$/;"	m	class:FaultModel
temperature_weights_database	./mem/ruby/network/fault_model/FaultModel.py	/^    temperature_weights_database = VectorParam.Int([$/;"	v	class:FaultModel
tera	./python/m5/util/convert.py	/^tera = 1.0e12$/;"	v
term	./dev/terminal.hh	/^        Terminal *term;$/;"	m	class:Terminal::DataEvent
term	./dev/terminal.hh	/^        Terminal *term;$/;"	m	class:Terminal::ListenEvent
term	./dev/uart.hh	/^    Terminal *term;$/;"	m	class:Uart
term	./dev/virtio/console.hh	/^    Terminal &term;$/;"	m	class:VirtIOConsole
termDataAvail	./dev/terminal.hh	/^    Callback *termDataAvail;$/;"	m	class:Terminal
termcap	./python/m5/util/terminal.py	/^termcap = ColorStrings(cap_string)$/;"	v
terminal	./dev/Uart.py	/^    terminal = Param.Terminal(Parent.any, "The terminal")$/;"	v	class:Uart
terminal	./dev/alpha/AlphaBackdoor.py	/^    terminal = Param.Terminal(Parent.any, "The console terminal")$/;"	v	class:AlphaBackdoor
terminal	./dev/alpha/backdoor.hh	/^    Terminal *terminal;$/;"	m	class:AlphaBackdoor
terminal	./dev/virtio/VirtIOConsole.py	/^    terminal = Param.Terminal(Parent.any, "The terminal")$/;"	v	class:VirtIOConsole
ternaryOp	./arch/arm/insts/vfp.cc	/^FpOp::ternaryOp(FPSCR &fpscr, fpType op1, fpType op2, fpType op3,$/;"	f	class:ArmISA::FpOp
tesr	./dev/net/ns_gige.hh	/^    uint32_t    tesr;$/;"	m	struct:dp_regs
test	./cpu/testers/networktest/NetworkTest.py	/^    test = MasterPort("Port to the memory system to test")$/;"	v	class:NetworkTest
test	./python/m5/util/region.py	/^    def test(left, right):$/;"	f
test1	./python/m5/util/multidict.py	/^    test1 = multidict()$/;"	v	class:multidict
test2	./python/m5/util/multidict.py	/^    test2 = multidict(test1)$/;"	v	class:multidict
test3	./python/m5/util/multidict.py	/^    test3 = multidict(test2)$/;"	v	class:multidict
test4	./python/m5/util/multidict.py	/^    test4 = multidict(test3)$/;"	v	class:multidict
testAndClearAsyncEvent	./sim/simulate.cc	/^testAndClearAsyncEvent()$/;"	f	file:
testAndRead	./mem/ruby/slicc_interface/RubySlicc_Util.hh	/^testAndRead(Addr addr, DataBlock& blk, Packet *pkt)$/;"	f
testAndWrite	./mem/ruby/slicc_interface/RubySlicc_Util.hh	/^testAndWrite(Addr addr, DataBlock& blk, Packet *pkt)$/;"	f
testCacheAccess	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::testCacheAccess(Addr address, RubyRequestType type,$/;"	f	class:CacheMemory
testCmdAttrib	./mem/packet.hh	/^    testCmdAttrib(MemCmd::Attribute attrib) const$/;"	f	class:MemCmd
testDrainComplete	./mem/ruby/system/DMASequencer.cc	/^DMASequencer::testDrainComplete()$/;"	f	class:DMASequencer
testDrainComplete	./mem/ruby/system/RubyPort.cc	/^RubyPort::testDrainComplete()$/;"	f	class:RubyPort
testPredicate	./arch/arm/utility.hh	/^testPredicate(uint32_t nz, uint32_t c, uint32_t v, ConditionCode code)$/;"	f	namespace:ArmISA
testVal	./unittest/refcnttest.cc	/^    int testVal;$/;"	m	class:__anon3::TestRC	file:
test_termcap	./python/m5/util/terminal.py	/^def test_termcap(obj):$/;"	f
tester	./cpu/testers/directedtest/RubyDirectedTester.hh	/^        RubyDirectedTester *tester;$/;"	m	class:RubyDirectedTester::CpuPort
tester	./cpu/testers/directedtest/RubyDirectedTester.hh	/^        RubyDirectedTester *tester;$/;"	m	class:RubyDirectedTester::DirectedStartEvent
tester	./cpu/testers/rubytest/RubyTester.hh	/^        RubyTester *tester;$/;"	m	class:RubyTester::CheckStartEvent
tester	./cpu/testers/rubytest/RubyTester.hh	/^        RubyTester *tester;$/;"	m	class:RubyTester::CpuPort
testfunc	./unittest/stattest.cc	/^testfunc()$/;"	f
tex_formatter	./mem/slicc/generate/tex.py	/^class tex_formatter(code_formatter):$/;"	c
texcb	./arch/arm/table_walker.hh	/^        uint8_t texcb() const$/;"	f	class:ArmISA::TableWalker::L1Descriptor
texcb	./arch/arm/table_walker.hh	/^        uint8_t texcb() const$/;"	f	class:ArmISA::TableWalker::L2Descriptor
texcb	./arch/arm/table_walker.hh	/^        virtual uint8_t texcb() const$/;"	f	class:ArmISA::TableWalker::DescriptorBase
text	./base/loader/object_file.hh	/^    Section text;$/;"	m	class:ObjectFile
textBase	./base/loader/object_file.hh	/^    Addr textBase() const { return text.baseAddr; }$/;"	f	class:ObjectFile
textSize	./base/loader/object_file.hh	/^    size_t textSize() const { return text.size; }$/;"	f	class:ObjectFile
text_start	./arch/alpha/aout_machdep.h	/^    uint64_t    text_start;     \/\/\/< text base address$/;"	m	struct:aout_exechdr
text_start	./base/loader/exec_ecoff.h	/^        coff_ulong  text_start;$/;"	m	struct:ecoff_aouthdr
tf	./arch/x86/regs/misc.hh	/^        Bitfield<8> tf; \/\/ Trap Flag$/;"	m	namespace:X86ISA
tfcr	./arch/mips/dt_constants.hh	/^    Bitfield<3>      tfcr;$/;"	m	namespace:MipsISA
tfp	./arch/arm/miscregs.hh	/^        Bitfield<10> tfp;  \/\/ AArch64$/;"	m	namespace:ArmISA
tfp	./arch/arm/miscregs.hh	/^        Bitfield<10> tfp;$/;"	m	namespace:ArmISA
tg0	./arch/arm/miscregs.hh	/^        Bitfield<14> tg0;$/;"	m	namespace:ArmISA
tg0	./arch/arm/miscregs.hh	/^        Bitfield<15, 14> tg0;$/;"	m	namespace:ArmISA
tg1	./arch/arm/miscregs.hh	/^        Bitfield<30> tg1;$/;"	m	namespace:ArmISA
tg1	./arch/arm/miscregs.hh	/^        Bitfield<31, 30> tg1; \/\/ EL1$/;"	m	namespace:ArmISA
tge	./arch/arm/miscregs.hh	/^        Bitfield<27>     tge;$/;"	m	namespace:ArmISA
tgtFlag	./kern/operatingsystem.hh	/^    int tgtFlag;        \/\/!< Target system flag value.$/;"	m	struct:OpenFlagTransTable
tgt_iovec	./arch/arm/freebsd/freebsd.hh	/^    struct tgt_iovec {$/;"	s	class:ArmFreebsd32
tgt_iovec	./arch/arm/freebsd/freebsd.hh	/^    struct tgt_iovec {$/;"	s	class:ArmFreebsd64
tgt_iovec	./arch/arm/linux/linux.hh	/^    struct tgt_iovec {$/;"	s	class:ArmLinux32
tgt_iovec	./arch/arm/linux/linux.hh	/^    struct tgt_iovec {$/;"	s	class:ArmLinux64
tgt_iovec	./arch/x86/linux/linux.hh	/^    } tgt_iovec;$/;"	t	class:X86Linux64	typeref:struct:X86Linux64::__anon60
tgt_iovec	./kern/linux/linux.hh	/^    struct tgt_iovec {$/;"	s	class:Linux
tgt_iovec	./kern/operatingsystem.hh	/^    } tgt_iovec;$/;"	t	class:OperatingSystem	typeref:struct:OperatingSystem::__anon95
tgt_stat	./arch/arm/freebsd/freebsd.hh	/^    } tgt_stat;$/;"	t	class:ArmFreebsd32	typeref:struct:ArmFreebsd32::__anon69
tgt_stat	./arch/arm/freebsd/freebsd.hh	/^    } tgt_stat;$/;"	t	class:ArmFreebsd64	typeref:struct:ArmFreebsd64::__anon71
tgt_stat	./arch/arm/linux/linux.hh	/^    } tgt_stat;$/;"	t	class:ArmLinux32	typeref:struct:ArmLinux32::__anon74
tgt_stat	./arch/arm/linux/linux.hh	/^    } tgt_stat;$/;"	t	class:ArmLinux64	typeref:struct:ArmLinux64::__anon77
tgt_stat	./arch/power/linux/linux.hh	/^    } tgt_stat;$/;"	t	class:PowerLinux	typeref:struct:PowerLinux::__anon54
tgt_stat	./arch/sparc/linux/linux.hh	/^    } tgt_stat;$/;"	t	class:SparcLinux	typeref:struct:SparcLinux::__anon44
tgt_stat	./kern/linux/linux.hh	/^    } tgt_stat;$/;"	t	class:Linux	typeref:struct:Linux::__anon97
tgt_stat	./kern/operatingsystem.hh	/^    typedef void tgt_stat;$/;"	t	class:OperatingSystem
tgt_stat	./kern/solaris/solaris.hh	/^    } tgt_stat;$/;"	t	class:Solaris	typeref:struct:Solaris::__anon108
tgt_stat	./kern/tru64/tru64.hh	/^    typedef F64_stat tgt_stat;$/;"	t	class:Tru64_F64
tgt_stat	./kern/tru64/tru64.hh	/^    typedef pre_F64_stat tgt_stat;$/;"	t	class:Tru64_PreF64
tgt_stat64	./arch/arm/freebsd/freebsd.hh	/^    } tgt_stat64;$/;"	t	class:ArmFreebsd32	typeref:struct:ArmFreebsd32::__anon70
tgt_stat64	./arch/arm/freebsd/freebsd.hh	/^    } tgt_stat64;$/;"	t	class:ArmFreebsd64	typeref:struct:ArmFreebsd64::__anon72
tgt_stat64	./arch/arm/linux/linux.hh	/^    } tgt_stat64;$/;"	t	class:ArmLinux32	typeref:struct:ArmLinux32::__anon75
tgt_stat64	./arch/arm/linux/linux.hh	/^    } tgt_stat64;$/;"	t	class:ArmLinux64	typeref:struct:ArmLinux64::__anon78
tgt_stat64	./arch/power/linux/linux.hh	/^    } tgt_stat64;$/;"	t	class:PowerLinux	typeref:struct:PowerLinux::__anon55
tgt_stat64	./arch/sparc/linux/linux.hh	/^    } tgt_stat64;$/;"	t	class:Sparc32Linux	typeref:struct:Sparc32Linux::__anon46
tgt_stat64	./arch/x86/linux/linux.hh	/^    } __attribute__((__packed__)) tgt_stat64;$/;"	t	class:X86Linux32	typeref:struct:X86Linux32::__anon62
tgt_stat64	./arch/x86/linux/linux.hh	/^    } tgt_stat64;$/;"	t	class:X86Linux64	typeref:struct:X86Linux64::__anon59
tgt_stat64	./kern/linux/linux.hh	/^    } tgt_stat64;$/;"	t	class:Linux	typeref:struct:Linux::__anon98
tgt_stat64	./kern/operatingsystem.hh	/^    typedef void tgt_stat64;$/;"	t	class:OperatingSystem
tgt_stat64	./kern/solaris/solaris.hh	/^    } tgt_stat64;$/;"	t	class:Solaris	typeref:struct:Solaris::__anon109
tgt_sysinfo	./arch/alpha/linux/linux.hh	/^    } tgt_sysinfo;$/;"	t	class:AlphaLinux	typeref:struct:AlphaLinux::__anon51
tgt_sysinfo	./arch/arm/linux/linux.hh	/^    } tgt_sysinfo;$/;"	t	class:ArmLinux32	typeref:struct:ArmLinux32::__anon76
tgt_sysinfo	./arch/arm/linux/linux.hh	/^    } tgt_sysinfo;$/;"	t	class:ArmLinux64	typeref:struct:ArmLinux64::__anon79
tgt_sysinfo	./arch/mips/linux/linux.hh	/^    } tgt_sysinfo;$/;"	t	class:MipsLinux	typeref:struct:MipsLinux::__anon84
tgt_sysinfo	./arch/sparc/linux/linux.hh	/^    } tgt_sysinfo;   $/;"	t	class:Sparc32Linux	typeref:struct:Sparc32Linux::__anon47
tgt_sysinfo	./arch/sparc/linux/linux.hh	/^    } tgt_sysinfo;$/;"	t	class:SparcLinux	typeref:struct:SparcLinux::__anon45
tgt_sysinfo	./arch/x86/linux/linux.hh	/^    } tgt_sysinfo;$/;"	t	class:X86Linux32	typeref:struct:X86Linux32::__anon63
tgt_sysinfo	./arch/x86/linux/linux.hh	/^   } tgt_sysinfo;$/;"	t	class:X86Linux64	typeref:struct:X86Linux64::__anon61
tgt_timespec	./kern/solaris/solaris.hh	/^    struct tgt_timespec {$/;"	s	class:Solaris
tgts_per_mshr	./mem/cache/Cache.py	/^    tgts_per_mshr = Param.Unsigned("Max number of accesses per MSHR")$/;"	v	class:BaseCache
theAllFlags	./base/debug.cc	/^AllFlags theAllFlags;$/;"	m	namespace:Debug	file:
thee	./arch/arm/miscregs.hh	/^        Bitfield<6>    thee;    \/\/ ThumbEE enable$/;"	m	namespace:ArmISA
themode	./arch/alpha/kernel_stats.hh	/^    cpu_mode themode;$/;"	m	class:AlphaISA::Kernel::Statistics
thiszone	./dev/net/etherdump.cc	/^    int32_t thiszone;           \/\/ gmt to local correction$/;"	m	struct:pcap_file_header	file:
thread	./cpu/base_dyn_inst.hh	/^    ImplState *thread;$/;"	m	class:BaseDynInst
thread	./cpu/checker/cpu.hh	/^    SimpleThread *thread;$/;"	m	class:CheckerCPU
thread	./cpu/kvm/base.hh	/^    SimpleThread *thread;$/;"	m	class:BaseKvmCPU
thread	./cpu/minor/exec_context.hh	/^    SimpleThread &thread;$/;"	m	class:Minor::ExecContext
thread	./cpu/o3/commit.hh	/^    std::vector<Thread *> thread;$/;"	m	class:DefaultCommit
thread	./cpu/o3/cpu.hh	/^    std::vector<Thread *> thread;$/;"	m	class:FullO3CPU
thread	./cpu/o3/lsq.hh	/^    LSQUnit *thread;$/;"	m	class:LSQ
thread	./cpu/o3/thread_context.hh	/^    O3ThreadState<Impl> *thread;$/;"	m	class:O3ThreadContext
thread	./cpu/simple/exec_context.hh	/^    SimpleThread* thread;$/;"	m	class:SimpleExecContext
thread	./cpu/timing_expr.hh	/^    ThreadContext *thread;$/;"	m	class:TimingExprEvalContext
thread	./sim/insttracer.hh	/^    ThreadContext *thread;$/;"	m	class:Trace::InstRecord
threadBarrier	./sim/simulate.cc	/^Barrier *threadBarrier;$/;"	v
threadBase	./cpu/checker/cpu.hh	/^    SimpleThread *threadBase() { return thread; }$/;"	f	class:CheckerCPU
threadContextDirty	./cpu/kvm/base.hh	/^    bool threadContextDirty;$/;"	m	class:BaseKvmCPU
threadContexts	./cpu/base.hh	/^    std::vector<ThreadContext *> threadContexts;$/;"	m	class:BaseCPU
threadContexts	./sim/system.hh	/^    std::vector<ThreadContext *> threadContexts;$/;"	m	class:System
threadEntries	./cpu/o3/rob.hh	/^    unsigned threadEntries[Impl::MaxThreads];$/;"	m	class:ROB
threadFetched	./cpu/o3/fetch.hh	/^    ThreadID threadFetched;$/;"	m	class:DefaultFetch
threadId	./cpu/checker/thread_context.hh	/^    int threadId() const { return actualTC->threadId(); }$/;"	f	class:CheckerThreadContext
threadId	./cpu/minor/dyn_inst.hh	/^    ThreadID threadId;$/;"	m	class:Minor::InstId
threadId	./cpu/o3/thread_context.hh	/^    virtual int threadId() const { return thread->threadId(); }$/;"	f	class:O3ThreadContext
threadId	./cpu/thread_context.hh	/^    int threadId() const { return actualTC->threadId(); }$/;"	f	class:ProxyThreadContext
threadId	./cpu/thread_state.hh	/^    ThreadID threadId() const { return _threadId; }$/;"	f	struct:ThreadState
threadId	./mem/request.hh	/^    threadId() const$/;"	f	class:Request
threadInfo	./cpu/simple/base.hh	/^    std::vector<SimpleExecContext*> threadInfo;$/;"	m	class:BaseSimpleCPU
threadMap	./cpu/o3/cpu.hh	/^    std::map<ThreadID, unsigned> threadMap;$/;"	m	class:FullO3CPU
threadNumber	./cpu/base_dyn_inst.hh	/^    ThreadID threadNumber;$/;"	m	class:BaseDynInst
threadSnoop	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::threadSnoop(PacketPtr pkt, ThreadID sender)$/;"	f	class:AtomicSimpleCPU
threadSnoop	./cpu/simple/timing.cc	/^TimingSimpleCPU::threadSnoop(PacketPtr pkt, ThreadID sender)$/;"	f	class:TimingSimpleCPU
thread_info	./arch/mips/linux/thread_info.hh	/^    struct thread_info {$/;"	s	namespace:Linux
thread_info_size	./arch/alpha/stacktrace.hh	/^    int thread_info_size;$/;"	m	class:AlphaISA::ProcessInfo
thread_info_size	./arch/arm/stacktrace.hh	/^    int thread_info_size;$/;"	m	class:ArmISA::ProcessInfo
thread_info_size	./arch/x86/stacktrace.hh	/^        int thread_info_size;$/;"	m	class:X86ISA::ProcessInfo
thread_loop	./sim/simulate.cc	/^thread_loop(EventQueue *queue)$/;"	f	file:
thread_reply	./kern/tru64/tru64_syscalls.hh	/^        thread_reply = 11,$/;"	e	enum:SystemCalls::__anon103
thread_self	./kern/tru64/tru64_syscalls.hh	/^        thread_self = 13,$/;"	e	enum:SystemCalls::__anon103
thread_switch	./kern/tru64/tru64_syscalls.hh	/^        thread_switch = 61,$/;"	e	enum:SystemCalls::__anon103
threads	./cpu/minor/cpu.hh	/^    std::vector<Minor::MinorThread *> threads;$/;"	m	class:MinorCPU
threshConf	./mem/cache/prefetch/stride.hh	/^    const int threshConf;$/;"	m	class:StridePrefetcher
thresh_conf	./mem/cache/prefetch/Prefetcher.py	/^    thresh_conf = Param.Int(4, "Threshold confidence level")$/;"	v	class:StridePrefetcher
thumb	./arch/arm/types.hh	/^        Bitfield<36>     thumb;$/;"	m	namespace:ArmISA
thumb	./arch/arm/types.hh	/^        thumb() const$/;"	f	class:ArmISA::PCState
thumb	./arch/arm/types.hh	/^        thumb(bool val)$/;"	f	class:ArmISA::PCState
thumbPcElrOffset	./arch/arm/faults.hh	/^        const uint8_t thumbPcElrOffset;$/;"	m	struct:ArmISA::ArmFault::FaultVals
thumbPcElrOffset	./arch/arm/faults.hh	/^    uint8_t thumbPcElrOffset() { return vals.thumbPcElrOffset; }$/;"	f	class:ArmISA::ArmFaultVals
thumbPcOffset	./arch/arm/faults.hh	/^        const uint8_t thumbPcOffset;$/;"	m	struct:ArmISA::ArmFault::FaultVals
thumbPcOffset	./arch/arm/faults.hh	/^    uint8_t thumbPcOffset(bool isHyp) { return isHyp ? vals.thumbPcElrOffset$/;"	f	class:ArmISA::ArmFaultVals
ti	./arch/mips/pra_constants.hh	/^    Bitfield<30>     ti;$/;"	m	namespace:MipsISA
ti	./arch/x86/regs/misc.hh	/^        Bitfield<2> ti; \/\/ Table Indicator$/;"	m	namespace:X86ISA
ti	./base/loader/coff_sym.h	/^    TIR ti;             \/* type information record *\/$/;"	m	union:__anon115
tiNil	./base/loader/coff_sym.h	323;"	d
tick	./arch/sparc/isa.hh	/^    uint64_t tick;          \/\/ Hardware clock-tick counter$/;"	m	class:SparcISA::ISA
tick	./cpu/kvm/base.cc	/^BaseKvmCPU::tick()$/;"	f	class:BaseKvmCPU
tick	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::tick()$/;"	f	class:DefaultCommit
tick	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::tick()$/;"	f	class:FullO3CPU
tick	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::tick()$/;"	f	class:DefaultDecode
tick	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::tick()$/;"	f	class:DefaultFetch
tick	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::tick()$/;"	f	class:DefaultIEW
tick	./cpu/o3/lsq.hh	/^    void tick(ThreadID tid)$/;"	f	class:LSQ
tick	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::tick()$/;"	f	class:LSQ
tick	./cpu/o3/lsq_unit.hh	/^    void tick() { usedPorts = 0; }$/;"	f	class:LSQUnit
tick	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::tick()$/;"	f	class:DefaultRename
tick	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::tick()$/;"	f	class:AtomicSimpleCPU
tick	./cpu/testers/memtest/memtest.cc	/^MemTest::tick()$/;"	f	class:MemTest
tick	./cpu/testers/networktest/networktest.cc	/^NetworkTest::tick()$/;"	f	class:NetworkTest
tick	./cpu/testers/traffic_gen/generators.hh	/^        Tick tick;$/;"	m	struct:TraceGen::TraceElement
tick	./cpu/trace/trace_cpu.hh	/^            Tick tick;$/;"	m	struct:TraceCPU::FixedRetryGen::TraceElement
tick	./dev/net/i8254xGBe.cc	/^IGbE::tick()$/;"	f	class:IGbE
tick	./mem/bridge.hh	/^        const Tick tick;$/;"	m	class:Bridge::DeferredPacket
tick	./mem/cache/prefetch/queued.hh	/^        Tick tick;$/;"	m	struct:QueuedPrefetcher::DeferredPacket
tick	./mem/dramsim2.cc	/^DRAMSim2::tick()$/;"	f	class:DRAMSim2
tick	./mem/dramsim2_wrapper.cc	/^DRAMSim2Wrapper::tick()$/;"	f	class:DRAMSim2Wrapper
tick	./mem/packet_queue.hh	/^        Tick tick;      \/\/\/< The tick when the packet is ready to transmit$/;"	m	class:PacketQueue::DeferredPacket
tick	./mem/serial_link.hh	/^        const Tick tick;$/;"	m	class:SerialLink::DeferredPacket
tick	./mem/simple_mem.hh	/^        const Tick tick;$/;"	m	class:SimpleMemory::DeferredPacket
tick	./sim/clocked_object.hh	/^    mutable Tick tick;$/;"	m	class:Clocked
tickClock	./dev/mc146818.cc	/^MC146818::tickClock()$/;"	f	class:MC146818
tickCompare	./arch/sparc/isa.hh	/^    TickCompareEvent *tickCompare;$/;"	m	class:SparcISA::ISA
tickCycles	./sim/ticked_object.hh	/^    Stats::Scalar tickCycles;$/;"	m	class:Ticked
tickDelta	./cpu/trace/trace_cpu.hh	/^        int64_t tickDelta() { return delta; }$/;"	f	class:TraceCPU::FixedRetryGen
tickEvent	./cpu/kvm/base.hh	/^    TickEvent tickEvent;$/;"	m	class:BaseKvmCPU
tickEvent	./cpu/o3/cpu.hh	/^    TickEvent tickEvent;$/;"	m	class:FullO3CPU
tickEvent	./cpu/simple/atomic.hh	/^    TickEvent tickEvent;$/;"	m	class:AtomicSimpleCPU
tickEvent	./cpu/simple/timing.hh	/^        DTickEvent tickEvent;$/;"	m	class:TimingSimpleCPU::DcachePort
tickEvent	./cpu/simple/timing.hh	/^        ITickEvent tickEvent;$/;"	m	class:TimingSimpleCPU::IcachePort
tickEvent	./cpu/testers/memtest/memtest.hh	/^    EventWrapper<MemTest, &MemTest::tick> tickEvent;$/;"	m	class:MemTest
tickEvent	./cpu/testers/networktest/networktest.hh	/^    TickEvent tickEvent;$/;"	m	class:NetworkTest
tickEvent	./dev/mc146818.hh	/^    RTCTickEvent tickEvent;$/;"	m	class:MC146818
tickEvent	./dev/net/i8254xGBe.hh	/^    EventWrapper<IGbE, &IGbE::tick> tickEvent;$/;"	m	class:IGbE
tickEvent	./mem/dramsim2.hh	/^    EventWrapper<DRAMSim2, &DRAMSim2::tick> tickEvent;$/;"	m	class:DRAMSim2
tickInserted	./mem/cache/blk.hh	/^    Tick tickInserted;$/;"	m	class:CacheBlk
tickOffset	./cpu/testers/traffic_gen/generators.hh	/^    mutable Tick tickOffset;$/;"	m	class:TraceGen
tickOffset	./cpu/trace/trace_cpu.hh	/^    Stats::Scalar tickOffset;$/;"	m	class:TraceCPU
tick_cmpr	./arch/sparc/isa.hh	/^    uint64_t tick_cmpr;     \/\/ Hardware tick compare registers$/;"	m	class:SparcISA::ISA
ticksFromHostCycles	./cpu/kvm/timer.hh	/^    Tick ticksFromHostCycles(uint64_t cycles) {$/;"	f	class:BaseKvmTimer
ticksFromHostNs	./cpu/kvm/timer.hh	/^    Tick ticksFromHostNs(uint64_t ns) {$/;"	f	class:BaseKvmTimer
ticksPerByte	./dev/net/dist_etherlink.hh	/^        double ticksPerByte;$/;"	m	class:DistEtherLink::TxLink
ticksPerByte	./dev/net/etherbus.hh	/^    double ticksPerByte;$/;"	m	class:EtherBus
ticksPerByte	./dev/net/etherlink.hh	/^        const double ticksPerByte;$/;"	m	class:EtherLink::Link
ticksToCycles	./sim/clocked_object.hh	/^    inline Cycles ticksToCycles(Tick t) const$/;"	f	class:Clocked
ticksTokHz	./dev/arm/energy_ctrl.hh	/^    static uint32_t ticksTokHz(Tick period) {$/;"	f	class:EnergyCtrl
tid	./cpu/o3/commit.hh	/^        ThreadID tid;$/;"	m	class:DefaultCommit::TrapEvent
tid	./cpu/pred/bpred_unit.hh	/^        ThreadID tid;$/;"	m	struct:BPredUnit::PredictorHistory
tid	./cpu/pred/btb.hh	/^        ThreadID tid;$/;"	m	struct:DefaultBTB::BTBEntry
tid0	./arch/arm/miscregs.hh	/^        Bitfield<15>     tid0;$/;"	m	namespace:ArmISA
tid1	./arch/arm/miscregs.hh	/^        Bitfield<16>     tid1;$/;"	m	namespace:ArmISA
tid2	./arch/arm/miscregs.hh	/^        Bitfield<17>     tid2;$/;"	m	namespace:ArmISA
tid3	./arch/arm/miscregs.hh	/^        Bitfield<18>     tid3;$/;"	m	namespace:ArmISA
tidcp	./arch/arm/miscregs.hh	/^        Bitfield<20>     tidcp;$/;"	m	namespace:ArmISA
tids	./cpu/o3/cpu.hh	/^    std::vector<ThreadID> tids;$/;"	m	class:FullO3CPU
tidv	./dev/net/i8254xGBe_defs.hh	/^    TIDV tidv;$/;"	m	struct:iGbReg::Regs
tidvEvent	./dev/net/i8254xGBe.hh	/^    EventWrapper<IGbE, &IGbE::tidvProcess> tidvEvent;$/;"	m	class:IGbE
tidvProcess	./dev/net/i8254xGBe.hh	/^    void tidvProcess() {$/;"	f	class:IGbE
tim	./arch/mips/dt_constants.hh	/^    Bitfield<1>      tim;$/;"	m	namespace:MipsISA
time	./base/cp_annotate.hh	/^        Tick time;$/;"	m	struct:CPA::AnnotateData
time	./base/time.cc	/^Time::time() const$/;"	f	class:Time
time	./dev/alpha/Tsunami.py	/^    time = Param.Time('01\/01\/2009',$/;"	v	class:TsunamiIO
time	./dev/arm/RealView.py	/^    time = Param.Time('01\/01\/2009', "System time to use ('Now' for actual time)")$/;"	v	class:PL031
time	./dev/arm/flash_device.hh	/^        Tick time;$/;"	m	struct:FlashDevice::CallBackEntry
time	./dev/mips/Malta.py	/^    time = Param.Time('01\/01\/2009',$/;"	v	class:MaltaIO
time	./dev/sparc/T1000.py	/^    time = Param.Time('01\/01\/2009', "System time to use ('Now' for real time)")$/;"	v	class:DumbTOD
time	./dev/x86/Cmos.py	/^    time = Param.Time('01\/01\/2012',$/;"	v	class:Cmos
time	./mem/request.hh	/^    time() const$/;"	f	class:Request
timeBuffer	./cpu/o3/commit.hh	/^    TimeBuffer<TimeStruct> *timeBuffer;$/;"	m	class:DefaultCommit
timeBuffer	./cpu/o3/cpu.hh	/^    TimeBuffer<TimeStruct> timeBuffer;$/;"	m	class:FullO3CPU
timeBuffer	./cpu/o3/decode.hh	/^    TimeBuffer<TimeStruct> *timeBuffer;$/;"	m	class:DefaultDecode
timeBuffer	./cpu/o3/fetch.hh	/^    TimeBuffer<TimeStruct> *timeBuffer;$/;"	m	class:DefaultFetch
timeBuffer	./cpu/o3/iew.hh	/^    TimeBuffer<TimeStruct> *timeBuffer;$/;"	m	class:DefaultIEW
timeBuffer	./cpu/o3/inst_queue.hh	/^    TimeBuffer<TimeStruct> *timeBuffer;$/;"	m	class:InstructionQueue
timeBuffer	./cpu/o3/rename.hh	/^    TimeBuffer<TimeStruct> *timeBuffer;$/;"	m	class:DefaultRename
timeFunc	./sim/syscall_emul.hh	/^timeFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
timeOfLastRead	./mem/comm_monitor.hh	/^        Tick timeOfLastRead;$/;"	m	struct:CommMonitor::MonitorStats
timeOfLastReq	./mem/comm_monitor.hh	/^        Tick timeOfLastReq;$/;"	m	struct:CommMonitor::MonitorStats
timeOfLastWrite	./mem/comm_monitor.hh	/^        Tick timeOfLastWrite;$/;"	m	struct:CommMonitor::MonitorStats
timeRegWithDecodeEn	./dev/storage/ide_ctrl.cc	/^static const uint16_t timeRegWithDecodeEn = 0x8000;$/;"	v	file:
timeSource	./cpu/minor/func_unit.hh	/^    ClockedObject &timeSource;$/;"	m	class:Minor::FUPipeline
timeStampOffset	./mem/dram_ctrl.hh	/^    uint64_t timeStampOffset;$/;"	m	class:DRAMCtrl
timeSync	./sim/root.cc	/^Root::timeSync()$/;"	f	class:Root
timeSyncEnable	./sim/root.cc	/^Root::timeSyncEnable(bool en)$/;"	f	class:Root
timeSyncEnabled	./sim/root.hh	/^    bool timeSyncEnabled() const { return _enabled; }$/;"	f	class:Root
timeSyncPeriod	./sim/root.cc	/^Root::timeSyncPeriod(Time newPeriod)$/;"	f	class:Root
timeSyncPeriod	./sim/root.hh	/^    const Time timeSyncPeriod() const { return _period; }$/;"	f	class:Root
timeSyncSpinThreshold	./sim/root.cc	/^Root::timeSyncSpinThreshold(Time newThreshold)$/;"	f	class:Root
timeSyncSpinThreshold	./sim/root.hh	/^    const Time timeSyncSpinThreshold() const { return _spinThreshold; }$/;"	f	class:Root
timeVal	./dev/arm/rtc_pl031.hh	/^    uint32_t timeVal;$/;"	m	class:PL031
time_formats	./python/m5/params.py	/^time_formats = [ "%a %b %d %H:%M:%S %Z %Y",$/;"	v
time_sync_enable	./sim/Root.py	/^    time_sync_enable = Param.Bool(False, "whether time syncing is enabled")$/;"	v	class:Root
time_sync_period	./sim/Root.py	/^    time_sync_period = Param.Clock("100ms", "how often to sync with real time")$/;"	v	class:Root
time_sync_spin_threshold	./sim/Root.py	/^            Param.Clock("100us", "when less than this much time is left, spin")$/;"	v	class:Root
time_t	./arch/arm/freebsd/freebsd.hh	/^    typedef int32_t time_t;$/;"	t	class:ArmFreebsd32
time_t	./arch/arm/freebsd/freebsd.hh	/^    typedef int64_t time_t;$/;"	t	class:ArmFreebsd64
time_t	./arch/arm/linux/linux.hh	/^    typedef int32_t time_t;$/;"	t	class:ArmLinux32
time_t	./arch/arm/linux/linux.hh	/^    typedef int64_t time_t;$/;"	t	class:ArmLinux64
time_t	./arch/power/linux/linux.hh	/^    typedef int32_t time_t;$/;"	t	class:PowerLinux
time_t	./kern/freebsd/freebsd.hh	/^    typedef int64_t time_t;$/;"	t	class:FreeBSD
time_t	./kern/linux/linux.hh	/^    typedef int64_t time_t;$/;"	t	class:Linux
time_t	./kern/solaris/solaris.hh	/^    typedef int64_t time_t;$/;"	t	class:Solaris
time_t	./kern/tru64/tru64.hh	/^    typedef uint32_t time_t;$/;"	t	class:Tru64
timeout	./dev/x86/i8042.hh	/^        Bitfield<6> timeout;$/;"	m	class:X86ISA::I8042
timer	./arch/arm/isa.hh	/^        std::unique_ptr<BaseISADevice> timer;$/;"	m	class:ArmISA::ISA
timer	./cpu/kvm/timer.hh	/^    timer_t timer;$/;"	m	class:PosixKvmTimer
timer	./dev/x86/speaker.hh	/^        Bitfield<5> timer;$/;"	m	class:X86ISA::Speaker
timer	./dev/x86/speaker.hh	/^    I8254 * timer;$/;"	m	class:X86ISA::Speaker
timer0	./dev/arm/RealView.py	/^    timer0 = Sp804(int_num0=34, int_num1=34, pio_addr=0x1C110000, clock0='1MHz', clock1='1MHz')$/;"	v	class:VExpress_EMM
timer0	./dev/arm/RealView.py	/^    timer0 = Sp804(int_num0=36, int_num1=36, pio_addr=0x10011000)$/;"	v	class:RealViewEB
timer0	./dev/arm/RealView.py	/^    timer0 = Sp804(int_num0=36, int_num1=36, pio_addr=0x10011000)$/;"	v	class:RealViewPBX
timer0	./dev/arm/timer_sp804.hh	/^    Timer timer0;$/;"	m	class:Sp804
timer1	./dev/arm/RealView.py	/^    timer1 = Sp804(int_num0=35, int_num1=35, pio_addr=0x1C120000, clock0='1MHz', clock1='1MHz')$/;"	v	class:VExpress_EMM
timer1	./dev/arm/RealView.py	/^    timer1 = Sp804(int_num0=37, int_num1=37, pio_addr=0x10012000)$/;"	v	class:RealViewEB
timer1	./dev/arm/RealView.py	/^    timer1 = Sp804(int_num0=37, int_num1=37, pio_addr=0x10012000)$/;"	v	class:RealViewPBX
timer1	./dev/arm/timer_sp804.hh	/^    Timer timer1;$/;"	m	class:Sp804
timerAtZero	./dev/arm/timer_cpulocal.cc	/^CpuLocalTimer::Timer::timerAtZero()$/;"	f	class:CpuLocalTimer::Timer
timerControl	./dev/arm/timer_cpulocal.hh	/^        TimerCtrl timerControl;$/;"	m	class:CpuLocalTimer::Timer
timerData	./dev/alpha/tsunami_io.hh	/^    uint16_t timerData;$/;"	m	class:TsunamiIO
timerData	./dev/mips/malta_io.hh	/^    uint16_t timerData;$/;"	m	class:MaltaIO
timerEnable	./dev/arm/timer_sp804.hh	/^            Bitfield<7>   timerEnable;$/;"	m	class:Sp804::Timer
timerLoadValue	./dev/arm/timer_cpulocal.hh	/^        uint32_t timerLoadValue;$/;"	m	class:CpuLocalTimer::Timer
timerMode	./dev/arm/timer_sp804.hh	/^            Bitfield<6>   timerMode;$/;"	m	class:Sp804::Timer
timerPrescale	./dev/arm/timer_sp804.hh	/^            Bitfield<3,2> timerPrescale;$/;"	m	class:Sp804::Timer
timerRange	./dev/arm/generic_timer.hh	/^    const AddrRange timerRange;$/;"	m	class:GenericTimerMem
timerRead	./dev/arm/generic_timer.cc	/^GenericTimerMem::timerRead(Addr addr, size_t size) const$/;"	f	class:GenericTimerMem
timerSize	./dev/arm/timer_sp804.hh	/^            Bitfield<1>   timerSize;$/;"	m	class:Sp804::Timer
timerValue	./dev/arm/generic_timer.hh	/^    uint32_t timerValue() const { return _counterLimit - value(); }$/;"	f	class:ArchTimer
timerWrite	./dev/arm/generic_timer.cc	/^GenericTimerMem::timerWrite(Addr addr, size_t size, uint64_t value)$/;"	f	class:GenericTimerMem
timerZeroEvent	./dev/arm/timer_cpulocal.hh	/^        EventWrapper<Timer, &Timer::timerAtZero> timerZeroEvent;$/;"	m	class:CpuLocalTimer::Timer
timers	./dev/arm/generic_timer.hh	/^    std::vector<std::unique_ptr<CoreTimers>> timers;$/;"	m	class:GenericTimer
timesFunc	./sim/syscall_emul.hh	/^timesFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
timesIdled	./cpu/o3/cpu.hh	/^    Stats::Scalar timesIdled;$/;"	m	class:FullO3CPU
timespec	./arch/arm/linux/linux.hh	/^    struct timespec {$/;"	s	class:ArmLinux32
timespec	./arch/arm/linux/linux.hh	/^    struct timespec {$/;"	s	class:ArmLinux64
timespec	./kern/linux/linux.hh	/^    struct timespec {$/;"	s	class:Linux
timeval	./arch/arm/freebsd/freebsd.hh	/^    struct timeval {$/;"	s	class:ArmFreebsd32
timeval	./arch/arm/freebsd/freebsd.hh	/^    struct timeval {$/;"	s	class:ArmFreebsd64
timeval	./arch/arm/linux/linux.hh	/^    struct timeval {$/;"	s	class:ArmLinux32
timeval	./arch/arm/linux/linux.hh	/^    struct timeval {$/;"	s	class:ArmLinux64
timeval	./kern/linux/linux.hh	/^    struct timeval {$/;"	s	class:Linux
timeval	./kern/operatingsystem.hh	/^    } timeval;$/;"	t	class:OperatingSystem	typeref:struct:OperatingSystem::__anon94
timeval	./kern/tru64/tru64.hh	/^    struct timeval {$/;"	s	class:Tru64
timing	./arch/arm/stage2_lookup.hh	/^    bool                    timing;$/;"	m	class:ArmISA::Stage2LookUp
timing	./arch/arm/table_walker.hh	/^        bool timing;$/;"	m	class:ArmISA::TableWalker::WalkerState
timing	./arch/x86/pagetable_walker.hh	/^            bool timing;$/;"	m	class:X86ISA::Walker::WalkerState
timingFault	./arch/x86/pagetable_walker.hh	/^            Fault timingFault;$/;"	m	class:X86ISA::Walker::WalkerState
timings	./cpu/minor/MinorCPU.py	/^    timings = VectorParam.MinorFUTiming([], "extra decoding rules")$/;"	v	class:MinorFU
timings	./cpu/minor/MinorCPU.py	/^    timings = [MinorFUTiming(description="Int",$/;"	v	class:MinorDefaultIntFU
timings	./cpu/minor/MinorCPU.py	/^    timings = [MinorFUTiming(description='FloatSimd',$/;"	v	class:MinorDefaultFloatSimdFU
timings	./cpu/minor/MinorCPU.py	/^    timings = [MinorFUTiming(description='Mem',$/;"	v	class:MinorDefaultMemFU
timings	./cpu/minor/MinorCPU.py	/^    timings = [MinorFUTiming(description='Mul',$/;"	v	class:MinorDefaultIntMulFU
timings	./cpu/minor/func_unit.hh	/^    std::vector<MinorFUTiming *> timings;$/;"	m	class:MinorFU
timings	./dev/pixelpump.hh	/^    const DisplayTimings &timings() const { return _timings; }$/;"	f	class:BasePixelPump
tjdbx	./arch/arm/miscregs.hh	/^        Bitfield<17> tjdbx;$/;"	m	namespace:ArmISA
tksu	./arch/mips/mt_constants.hh	/^    Bitfield<12, 11> tksu;$/;"	m	namespace:MipsISA
tl	./arch/mips/pra_constants.hh	/^    Bitfield<0>  tl;$/;"	m	namespace:MipsISA
tl	./arch/mips/pra_constants.hh	/^    Bitfield<23, 20> tl;$/;"	m	namespace:MipsISA
tl	./arch/sparc/isa.hh	/^    uint8_t tl;             \/\/ Trap Level$/;"	m	class:SparcISA::ISA
tlb	./arch/arm/ArmTLB.py	/^    tlb = Param.ArmTLB("Stage 1 TLB")$/;"	v	class:ArmStage2MMU
tlb	./arch/arm/ArmTLB.py	/^    tlb = Parent.dtb$/;"	v	class:ArmStage2DMMU
tlb	./arch/arm/ArmTLB.py	/^    tlb = Parent.itb$/;"	v	class:ArmStage2IMMU
tlb	./arch/arm/table_walker.hh	/^    TLB *tlb;$/;"	m	class:ArmISA::TableWalker
tlb	./arch/sparc/tlb.hh	/^    TlbEntry *tlb;$/;"	m	class:SparcISA::TLB
tlb	./arch/x86/pagetable_walker.hh	/^        TLB * tlb;$/;"	m	class:X86ISA::Walker
tlb	./arch/x86/tlb.hh	/^        std::vector<TlbEntry> tlb;$/;"	m	class:X86ISA::TLB
tlbiALL	./arch/arm/isa.cc	/^ISA::tlbiALL(ThreadContext *tc, bool secure_lookup, uint8_t target_el)$/;"	f	class:ArmISA::ISA
tlbiALLN	./arch/arm/isa.cc	/^ISA::tlbiALLN(ThreadContext *tc, bool hyp, uint8_t target_el)$/;"	f	class:ArmISA::ISA
tlbiMVA	./arch/arm/isa.cc	/^ISA::tlbiMVA(ThreadContext *tc, MiscReg newVal, bool secure_lookup, bool hyp,$/;"	f	class:ArmISA::ISA
tlbiVA	./arch/arm/isa.cc	/^ISA::tlbiVA(ThreadContext *tc, MiscReg newVal, uint16_t asid,$/;"	f	class:ArmISA::ISA
tlbs	./arch/mips/mt_constants.hh	/^    Bitfield<29>     tlbs;$/;"	m	namespace:MipsISA
tle	./arch/sparc/miscregs.hh	/^    Bitfield<8> tle;$/;"	m	namespace:SparcISA
tlsm	./arch/mips/dt_constants.hh	/^    Bitfield<2>      tlsm;$/;"	m	namespace:MipsISA
tlz	./arch/sparc/miscregs.hh	/^    Bitfield<0> tlz;$/;"	m	namespace:SparcISA
tms	./arch/arm/freebsd/freebsd.hh	/^    struct tms {$/;"	s	class:ArmFreebsd32
tms	./arch/arm/freebsd/freebsd.hh	/^    struct tms {$/;"	s	class:ArmFreebsd64
tms	./arch/arm/linux/linux.hh	/^    struct tms {$/;"	s	class:ArmLinux32
tms	./arch/arm/linux/linux.hh	/^    struct tms {$/;"	s	class:ArmLinux64
tms	./arch/power/linux/linux.hh	/^    struct tms {$/;"	s	class:PowerLinux
tms	./kern/linux/linux.hh	/^    struct tms {$/;"	s	class:Linux
tms_cstime	./arch/arm/freebsd/freebsd.hh	/^        int32_t tms_cstime;     \/\/!< system time of children$/;"	m	struct:ArmFreebsd32::tms
tms_cstime	./arch/arm/freebsd/freebsd.hh	/^        int64_t tms_cstime;     \/\/!< system time of children$/;"	m	struct:ArmFreebsd64::tms
tms_cstime	./arch/arm/linux/linux.hh	/^        int32_t tms_cstime;     \/\/!< system time of children$/;"	m	struct:ArmLinux32::tms
tms_cstime	./arch/arm/linux/linux.hh	/^        int64_t tms_cstime;     \/\/!< system time of children$/;"	m	struct:ArmLinux64::tms
tms_cstime	./arch/power/linux/linux.hh	/^        int32_t tms_cstime;     \/\/!< system time of children$/;"	m	struct:PowerLinux::tms
tms_cstime	./kern/linux/linux.hh	/^        int64_t tms_cstime;     \/\/!< system time of children$/;"	m	struct:Linux::tms
tms_cutime	./arch/arm/freebsd/freebsd.hh	/^        int32_t tms_cutime;     \/\/!< user time of children$/;"	m	struct:ArmFreebsd32::tms
tms_cutime	./arch/arm/freebsd/freebsd.hh	/^        int64_t tms_cutime;     \/\/!< user time of children$/;"	m	struct:ArmFreebsd64::tms
tms_cutime	./arch/arm/linux/linux.hh	/^        int32_t tms_cutime;     \/\/!< user time of children$/;"	m	struct:ArmLinux32::tms
tms_cutime	./arch/arm/linux/linux.hh	/^        int64_t tms_cutime;     \/\/!< user time of children$/;"	m	struct:ArmLinux64::tms
tms_cutime	./arch/power/linux/linux.hh	/^        int32_t tms_cutime;     \/\/!< user time of children$/;"	m	struct:PowerLinux::tms
tms_cutime	./kern/linux/linux.hh	/^        int64_t tms_cutime;     \/\/!< user time of children$/;"	m	struct:Linux::tms
tms_stime	./arch/arm/freebsd/freebsd.hh	/^        int32_t tms_stime;      \/\/!< system time$/;"	m	struct:ArmFreebsd32::tms
tms_stime	./arch/arm/freebsd/freebsd.hh	/^        int64_t tms_stime;      \/\/!< system time$/;"	m	struct:ArmFreebsd64::tms
tms_stime	./arch/arm/linux/linux.hh	/^        int32_t tms_stime;      \/\/!< system time$/;"	m	struct:ArmLinux32::tms
tms_stime	./arch/arm/linux/linux.hh	/^        int64_t tms_stime;      \/\/!< system time$/;"	m	struct:ArmLinux64::tms
tms_stime	./arch/power/linux/linux.hh	/^        int32_t tms_stime;      \/\/!< system time$/;"	m	struct:PowerLinux::tms
tms_stime	./kern/linux/linux.hh	/^        int64_t tms_stime;      \/\/!< system time$/;"	m	struct:Linux::tms
tms_utime	./arch/arm/freebsd/freebsd.hh	/^        int32_t tms_utime;      \/\/!< user time$/;"	m	struct:ArmFreebsd32::tms
tms_utime	./arch/arm/freebsd/freebsd.hh	/^        int64_t tms_utime;      \/\/!< user time$/;"	m	struct:ArmFreebsd64::tms
tms_utime	./arch/arm/linux/linux.hh	/^        int32_t tms_utime;      \/\/!< user time$/;"	m	struct:ArmLinux32::tms
tms_utime	./arch/arm/linux/linux.hh	/^        int64_t tms_utime;      \/\/!< user time$/;"	m	struct:ArmLinux64::tms
tms_utime	./arch/power/linux/linux.hh	/^        int32_t tms_utime;      \/\/!< user time$/;"	m	struct:PowerLinux::tms
tms_utime	./kern/linux/linux.hh	/^        int64_t tms_utime;      \/\/!< user time$/;"	m	struct:Linux::tms
tmx	./arch/mips/mt_constants.hh	/^    Bitfield<27>     tmx;$/;"	m	namespace:MipsISA
tnpc	./arch/sparc/isa.hh	/^    uint64_t tnpc[MaxTL];   \/\/ Trap Next Program Counter (value from$/;"	m	class:SparcISA::ISA
to	./cpu/testers/traffic_gen/traffic_gen.hh	/^        uint32_t to;$/;"	m	struct:TrafficGen::Transition
to64	./arch/arm/faults.hh	/^    bool to64;  \/\/ True if the exception is taken in AArch64 state$/;"	m	class:ArmISA::ArmFault
toBool	./python/m5/util/convert.py	/^def toBool(value):$/;"	f
toCommit	./cpu/o3/iew.hh	/^    typename TimeBuffer<IEWStruct>::wire toCommit;$/;"	m	class:DefaultIEW
toCommitTick	./cpu/o3/probe/elastic_trace.hh	/^        Tick toCommitTick;$/;"	m	struct:ElasticTrace::InstExecInfo
toCommitTick	./cpu/o3/probe/elastic_trace.hh	/^        Tick toCommitTick;$/;"	m	struct:ElasticTrace::TraceInfo
toCurrent	./python/m5/util/convert.py	/^def toCurrent(value):$/;"	f
toDecode	./cpu/o3/fetch.hh	/^    typename TimeBuffer<FetchStruct>::wire toDecode;$/;"	m	class:DefaultFetch
toDecode	./cpu/o3/rename.hh	/^    typename TimeBuffer<TimeStruct>::wire toDecode;$/;"	m	class:DefaultRename
toEL	./arch/arm/faults.hh	/^    ExceptionLevel toEL;  \/\/ Target exception level$/;"	m	class:ArmISA::ArmFault
toFetch	./cpu/o3/decode.hh	/^    typename TimeBuffer<TimeStruct>::wire toFetch;$/;"	m	class:DefaultDecode
toFetch	./cpu/o3/iew.hh	/^    typename TimeBuffer<TimeStruct>::wire toFetch;$/;"	m	class:DefaultIEW
toFloat	./python/m5/util/convert.py	/^def toFloat(value):$/;"	f
toFrequency	./python/m5/util/convert.py	/^def toFrequency(value):$/;"	f
toIEW	./cpu/o3/commit.hh	/^    typename TimeBuffer<TimeStruct>::wire toIEW;$/;"	m	class:DefaultCommit
toIEW	./cpu/o3/rename.hh	/^    typename TimeBuffer<RenameStruct>::wire toIEW;$/;"	m	class:DefaultRename
toIEWIndex	./cpu/o3/rename.hh	/^    unsigned toIEWIndex;$/;"	m	class:DefaultRename
toInt	./mem/packet.hh	/^    int toInt() const { return (int)cmd; }$/;"	f	class:MemCmd
toInteger	./python/m5/util/convert.py	/^def toInteger(value):$/;"	f
toIpAddress	./python/m5/util/convert.py	/^def toIpAddress(value):$/;"	f
toIpNetmask	./python/m5/util/convert.py	/^def toIpNetmask(value):$/;"	f
toIpWithPort	./python/m5/util/convert.py	/^def toIpWithPort(value):$/;"	f
toLatency	./python/m5/util/convert.py	/^def toLatency(value):$/;"	f
toLookupLevel	./arch/arm/table_walker.cc	/^TableWalker::toLookupLevel(uint8_t lookup_level_as_int)$/;"	f	class:TableWalker
toMemoryBandwidth	./python/m5/util/convert.py	/^def toMemoryBandwidth(value):$/;"	f
toMemorySize	./python/m5/util/convert.py	/^def toMemorySize(value):$/;"	f
toMicroVolt	./dev/arm/energy_ctrl.hh	/^    static uint32_t toMicroVolt(double voltage) {$/;"	f	class:EnergyCtrl
toNetworkBandwidth	./python/m5/util/convert.py	/^def toNetworkBandwidth(value):$/;"	f
toPixel	./base/framebuffer.hh	/^        uint8_t toPixel(uint32_t word) const {$/;"	f	struct:PixelConverter::Channel
toPixel	./base/framebuffer.hh	/^    Pixel toPixel(const uint8_t *rfb) const {$/;"	f	class:PixelConverter
toPixel	./base/framebuffer.hh	/^    Pixel toPixel(uint32_t word) const {$/;"	f	class:PixelConverter
toPrefix	./sim/cxx_manager.hh	/^        std::string toPrefix;$/;"	m	struct:CxxConfigManager::Renaming
toRename	./cpu/o3/decode.hh	/^    typename TimeBuffer<DecodeStruct>::wire toRename;$/;"	m	class:DefaultDecode
toRename	./cpu/o3/iew.hh	/^    typename TimeBuffer<TimeStruct>::wire toRename;$/;"	m	class:DefaultIEW
toRenameIndex	./cpu/o3/decode.hh	/^    unsigned toRenameIndex;$/;"	m	class:DefaultDecode
toString	./mem/packet.hh	/^    const std::string &toString() const { return commandInfo[cmd].str; }$/;"	f	class:MemCmd
toVoltage	./python/m5/util/convert.py	/^def toVoltage(value):$/;"	f
to_bool	./base/str.hh	/^to_bool(const std::string &value, bool &retval)$/;"	f
to_lower	./base/str.hh	/^to_lower(const std::string &s)$/;"	f
to_number	./base/framebuffer.hh	/^to_number(const std::string &value, Pixel &retval)$/;"	f
to_number	./base/str.hh	/^to_number(const std::string &value, T &retval)$/;"	f
to_string	./base/addr_range.hh	/^    std::string to_string() const$/;"	f	class:AddrRange
todTime	./dev/sparc/dtod.hh	/^    uint64_t todTime;$/;"	m	class:DumbTOD
tokenize	./base/str.cc	/^tokenize(vector<string>& v, const string &s, char token, bool ignore)$/;"	f
tokens	./arch/isa_parser.py	/^    tokens = reserved + ($/;"	v	class:ISAParser
tokens	./arch/micro_asm.py	/^tokens = reserved + ($/;"	v
tokens	./base/match.hh	/^    std::vector<std::vector<std::string> > tokens;$/;"	m	class:ObjectMatch
tokens	./mem/slicc/parser.py	/^    tokens = [ 'EQ', 'NE', 'LT', 'GT', 'LE', 'GE',$/;"	v	class:SLICC
tom2	./arch/x86/regs/misc.hh	/^        Bitfield<21> tom2; \/\/ MtrrTom2En$/;"	m	namespace:X86ISA
top	./arch/isa_parser.py	/^    def top(self):$/;"	m	class:Stack
top	./cpu/pred/ras.hh	/^    TheISA::PCState top()$/;"	f	class:ReturnAddrStack
top	./cpu/profile.hh	/^    ProfileNode top;$/;"	m	class:FunctionProfile
top5	./arch/x86/types.hh	/^        Bitfield<7,3> top5;$/;"	m	namespace:X86ISA
top6	./arch/arm/types.hh	/^        Bitfield<7, 2> top6;$/;"	m	namespace:ArmISA
topDW	./dev/x86/i82094aa.hh	/^        Bitfield<63, 32> topDW;$/;"	m	class:X86ISA::I82094AA
topIdx	./cpu/pred/ras.hh	/^    unsigned topIdx()$/;"	f	class:ReturnAddrStack
topNibble	./unittest/bituniontest.cc	/^        Bitfield<63, 60> topNibble;$/;"	m	struct:__anon1::ContainingStruct	file:
topReserved	./dev/x86/i82094aa.hh	/^        Bitfield<55, 32> topReserved;$/;"	m	class:X86ISA::I82094AA
topcode10_8	./arch/arm/types.hh	/^        Bitfield<10, 8>  topcode10_8;$/;"	m	namespace:ArmISA
topcode10_9	./arch/arm/types.hh	/^        Bitfield<10, 9>  topcode10_9;$/;"	m	namespace:ArmISA
topcode11_8	./arch/arm/types.hh	/^        Bitfield<11, 8>  topcode11_8;$/;"	m	namespace:ArmISA
topcode11_9	./arch/arm/types.hh	/^        Bitfield<11, 9>  topcode11_9;$/;"	m	namespace:ArmISA
topcode12_10	./arch/arm/types.hh	/^        Bitfield<12, 10> topcode12_10;$/;"	m	namespace:ArmISA
topcode12_11	./arch/arm/types.hh	/^        Bitfield<12, 11> topcode12_11;$/;"	m	namespace:ArmISA
topcode13_11	./arch/arm/types.hh	/^        Bitfield<13, 11> topcode13_11;$/;"	m	namespace:ArmISA
topcode15_13	./arch/arm/types.hh	/^        Bitfield<15, 13> topcode15_13;$/;"	m	namespace:ArmISA
topcode3_0	./arch/arm/types.hh	/^        Bitfield<3, 0>   topcode3_0;$/;"	m	namespace:ArmISA
topcode7	./arch/arm/types.hh	/^        Bitfield<7>      topcode7;$/;"	m	namespace:ArmISA
topcode7_4	./arch/arm/types.hh	/^        Bitfield<7, 4>   topcode7_4;$/;"	m	namespace:ArmISA
topcode7_5	./arch/arm/types.hh	/^        Bitfield<7, 5>   topcode7_5;$/;"	m	namespace:ArmISA
topcode7_6	./arch/arm/types.hh	/^        Bitfield<7, 6>   topcode7_6;$/;"	m	namespace:ArmISA
topcode9_6	./arch/arm/types.hh	/^        Bitfield<9,  6>  topcode9_6;$/;"	m	namespace:ArmISA
topology	./mem/ruby/network/Network.py	/^    topology = Param.String("Not Specified",$/;"	v	class:RubyNetwork
tos	./base/inet.hh	/^    uint8_t  tos() const { return ip_tos; }$/;"	f	struct:Net::IpHdr
tos	./cpu/pred/ras.hh	/^    unsigned tos;$/;"	m	class:ReturnAddrStack
totBandwidth	./dev/net/etherdevice.hh	/^    Stats::Formula totBandwidth;$/;"	m	class:EtherDevice
totBusLat	./mem/dram_ctrl.hh	/^    Stats::Scalar totBusLat;$/;"	m	class:DRAMCtrl
totBytes	./dev/dma_device.hh	/^        const Addr totBytes;$/;"	m	struct:DmaPort::DmaReqState
totBytes	./dev/net/etherdevice.hh	/^    Stats::Formula totBytes;$/;"	m	class:EtherDevice
totGap	./mem/dram_ctrl.hh	/^    Stats::Scalar totGap;$/;"	m	class:DRAMCtrl
totMemAccLat	./mem/dram_ctrl.hh	/^    Stats::Scalar totMemAccLat;$/;"	m	class:DRAMCtrl
totPacketRate	./dev/net/etherdevice.hh	/^    Stats::Formula totPacketRate;$/;"	m	class:EtherDevice
totPackets	./dev/net/etherdevice.hh	/^    Stats::Formula totPackets;$/;"	m	class:EtherDevice
totPktSize	./mem/noncoherent_xbar.hh	/^    Stats::Scalar totPktSize;$/;"	m	class:NoncoherentXBar
totQLat	./mem/dram_ctrl.hh	/^    Stats::Scalar totQLat;$/;"	m	class:DRAMCtrl
totRequests	./mem/snoop_filter.hh	/^    Stats::Scalar totRequests;$/;"	m	class:SnoopFilter
totSnoops	./mem/snoop_filter.hh	/^    Stats::Scalar totSnoops;$/;"	m	class:SnoopFilter
total	./base/statistics.cc	/^Formula::total() const$/;"	f	class:Stats::Formula
total	./base/statistics.hh	/^    Result total() const { return (*functor)(); }$/;"	f	class:Stats::FunctorProxy
total	./base/statistics.hh	/^    Result total() const { return (object->*method)(); }$/;"	f	class:Stats::MethodProxy
total	./base/statistics.hh	/^    Result total() const { return *scalar; }$/;"	f	class:Stats::ValueProxy
total	./base/statistics.hh	/^    Result total() const { return data->result(); };$/;"	f	class:Stats::ScalarStatNode
total	./base/statistics.hh	/^    Result total() const { return data->total(); };$/;"	f	class:Stats::VectorStatNode
total	./base/statistics.hh	/^    Result total() const { return formula.total(); }$/;"	f	class:Stats::FormulaNode
total	./base/statistics.hh	/^    Result total() const { return proxy->total(); };$/;"	f	class:Stats::ValueBase
total	./base/statistics.hh	/^    Result total() const { return this->s.total(); }$/;"	f	class:Stats::FormulaInfoProxy
total	./base/statistics.hh	/^    Result total() const { return this->s.total(); }$/;"	f	class:Stats::ScalarInfoProxy
total	./base/statistics.hh	/^    Result total() const { return this->s.total(); }$/;"	f	class:Stats::VectorInfoProxy
total	./base/statistics.hh	/^    Result total() const { return vresult[0]; };$/;"	f	class:Stats::ConstNode
total	./base/statistics.hh	/^    Result total() { return result(); }$/;"	f	class:Stats::ScalarBase
total	./base/statistics.hh	/^    mutable Result total;$/;"	m	class:Stats::AvgStor
total	./base/statistics.hh	/^    total() const$/;"	f	class:Stats::BinaryNode
total	./base/statistics.hh	/^    total() const$/;"	f	class:Stats::ConstVectorNode
total	./base/statistics.hh	/^    total() const$/;"	f	class:Stats::ScalarProxyNode
total	./base/statistics.hh	/^    total() const$/;"	f	class:Stats::SumNode
total	./base/statistics.hh	/^    total() const$/;"	f	class:Stats::UnaryNode
total	./base/statistics.hh	/^    total() const$/;"	f	class:Stats::VectorBase
total	./base/statistics.hh	/^    total() const$/;"	f	class:Stats::VectorProxy
total	./base/stats/info.hh	/^const FlagsType total =         0x0010;$/;"	m	namespace:Stats
total	./base/stats/text.cc	/^    Result total;$/;"	m	struct:Stats::VectorPrint	file:
totalCpi	./cpu/o3/cpu.hh	/^    Stats::Formula totalCpi;$/;"	m	class:FullO3CPU
totalEnergy	./mem/dram_ctrl.hh	/^        Stats::Scalar totalEnergy;$/;"	m	class:DRAMCtrl::Rank
totalGCActivations	./dev/arm/flash_device.hh	/^        Stats::Scalar totalGCActivations;$/;"	m	struct:FlashDevice::FlashDeviceStats
totalInsts	./cpu/kvm/base.cc	/^BaseKvmCPU::totalInsts() const$/;"	f	class:BaseKvmCPU
totalInsts	./cpu/minor/cpu.cc	/^MinorCPU::totalInsts() const$/;"	f	class:MinorCPU
totalInsts	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::totalInsts() const$/;"	f	class:FullO3CPU
totalInsts	./cpu/simple/base.cc	/^BaseSimpleCPU::totalInsts() const$/;"	f	class:BaseSimpleCPU
totalInsts	./cpu/trace/trace_cpu.hh	/^    Counter totalInsts() const$/;"	f	class:TraceCPU
totalIpc	./cpu/o3/cpu.hh	/^    Stats::Formula totalIpc;$/;"	m	class:FullO3CPU
totalNumInsts	./sim/system.hh	/^    Counter totalNumInsts;$/;"	m	class:System
totalNumPhysRegs	./cpu/o3/regfile.hh	/^    unsigned totalNumPhysRegs() const { return totalNumRegs; }$/;"	f	class:PhysRegFile
totalNumRegs	./cpu/o3/regfile.hh	/^    unsigned totalNumRegs;$/;"	m	class:PhysRegFile
totalOps	./cpu/kvm/base.cc	/^BaseKvmCPU::totalOps() const$/;"	f	class:BaseKvmCPU
totalOps	./cpu/minor/cpu.cc	/^MinorCPU::totalOps() const$/;"	f	class:MinorCPU
totalOps	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::totalOps() const$/;"	f	class:FullO3CPU
totalOps	./cpu/simple/base.cc	/^BaseSimpleCPU::totalOps() const$/;"	f	class:BaseSimpleCPU
totalOps	./cpu/trace/trace_cpu.hh	/^    Counter totalOps() const$/;"	f	class:TraceCPU
totalRead	./dev/arm/ufs_device.hh	/^        uint32_t totalRead;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
totalReadBytes	./mem/comm_monitor.hh	/^        Stats::Scalar totalReadBytes;$/;"	m	struct:CommMonitor::MonitorStats
totalReadDiskTransactions	./dev/arm/ufs_device.hh	/^        Stats::Scalar totalReadDiskTransactions;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
totalReadSSD	./dev/arm/ufs_device.hh	/^        Stats::Scalar totalReadSSD;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
totalReadUFSTransactions	./dev/arm/ufs_device.hh	/^        Stats::Scalar totalReadUFSTransactions;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
totalRefs	./mem/cache/tags/base.hh	/^    Stats::Scalar totalRefs;$/;"	m	class:BaseTags
totalRxDesc	./dev/net/etherdevice.hh	/^    Stats::Scalar totalRxDesc;$/;"	m	class:EtherDevice
totalRxIdle	./dev/net/etherdevice.hh	/^    Stats::Scalar totalRxIdle;$/;"	m	class:EtherDevice
totalRxOk	./dev/net/etherdevice.hh	/^    Stats::Scalar totalRxOk;$/;"	m	class:EtherDevice
totalRxOrn	./dev/net/etherdevice.hh	/^    Stats::Scalar totalRxOrn;$/;"	m	class:EtherDevice
totalSize	./mem/physical.hh	/^    uint64_t totalSize() const { return size; }$/;"	f	class:PhysicalMemory
totalSpace	./cpu/minor/buffers.hh	/^    unsigned int totalSpace() const { return capacity; }$/;"	f	class:Minor::Queue
totalSwi	./dev/net/etherdevice.hh	/^    Stats::Scalar totalSwi;$/;"	m	class:EtherDevice
totalTxDesc	./dev/net/etherdevice.hh	/^    Stats::Scalar totalTxDesc;$/;"	m	class:EtherDevice
totalTxIdle	./dev/net/etherdevice.hh	/^    Stats::Scalar totalTxIdle;$/;"	m	class:EtherDevice
totalTxOk	./dev/net/etherdevice.hh	/^    Stats::Scalar totalTxOk;$/;"	m	class:EtherDevice
totalVnicDistance	./dev/net/sinic.hh	/^    Stats::Scalar totalVnicDistance;$/;"	m	class:Sinic::Device
totalWidth	./cpu/o3/inst_queue.hh	/^    unsigned totalWidth;$/;"	m	class:InstructionQueue
totalWrite	./dev/arm/ufs_device.hh	/^        uint32_t totalWrite;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
totalWriteDiskTransactions	./dev/arm/ufs_device.hh	/^        Stats::Scalar totalWriteDiskTransactions;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
totalWriteUFSTransactions	./dev/arm/ufs_device.hh	/^        Stats::Scalar totalWriteUFSTransactions;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
totalWrittenBytes	./mem/comm_monitor.hh	/^        Stats::Scalar totalWrittenBytes;$/;"	m	struct:CommMonitor::MonitorStats
totalWrittenSSD	./dev/arm/ufs_device.hh	/^        Stats::Scalar totalWrittenSSD;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
totalhigh	./arch/alpha/linux/linux.hh	/^       uint64_t totalhigh; \/* Total high memory size *\/$/;"	m	struct:AlphaLinux::__anon51
totalhigh	./arch/arm/linux/linux.hh	/^        uint32_t totalhigh; \/* Total high memory size *\/$/;"	m	struct:ArmLinux32::__anon76
totalhigh	./arch/arm/linux/linux.hh	/^        uint64_t totalhigh; \/* Total high memory size *\/$/;"	m	struct:ArmLinux64::__anon79
totalhigh	./arch/mips/linux/linux.hh	/^       uint32_t totalhigh; \/* Total high memory size *\/$/;"	m	struct:MipsLinux::__anon84
totalhigh	./arch/sparc/linux/linux.hh	/^        uint32_t totalhigh; \/* Total high memory size *\/$/;"	m	struct:Sparc32Linux::__anon47
totalhigh	./arch/sparc/linux/linux.hh	/^        uint64_t totalhigh; \/* Total high memory size *\/$/;"	m	struct:SparcLinux::__anon45
totalhigh	./arch/x86/linux/linux.hh	/^        uint64_t totalhigh; \/* Total high memory size *\/$/;"	m	struct:X86Linux64::__anon61
totalhigh	./arch/x86/linux/linux.hh	/^       uint32_t totalhigh; \/* Total high memory size *\/$/;"	m	struct:X86Linux32::__anon63
totalram	./arch/alpha/linux/linux.hh	/^       uint64_t totalram;  \/* Total usable main memory size *\/$/;"	m	struct:AlphaLinux::__anon51
totalram	./arch/arm/linux/linux.hh	/^        uint32_t totalram;  \/* Total usable main memory size *\/$/;"	m	struct:ArmLinux32::__anon76
totalram	./arch/arm/linux/linux.hh	/^        uint64_t totalram;  \/* Total usable main memory size *\/$/;"	m	struct:ArmLinux64::__anon79
totalram	./arch/mips/linux/linux.hh	/^       uint32_t totalram;  \/* Total usable main memory size *\/$/;"	m	struct:MipsLinux::__anon84
totalram	./arch/sparc/linux/linux.hh	/^        uint32_t totalram;  \/* Total usable main memory size *\/$/;"	m	struct:Sparc32Linux::__anon47
totalram	./arch/sparc/linux/linux.hh	/^        uint64_t totalram;  \/* Total usable main memory size *\/$/;"	m	struct:SparcLinux::__anon45
totalram	./arch/x86/linux/linux.hh	/^        uint64_t totalram;  \/* Total usable main memory size *\/$/;"	m	struct:X86Linux64::__anon61
totalram	./arch/x86/linux/linux.hh	/^       uint32_t totalram;  \/* Total usable main memory size *\/$/;"	m	struct:X86Linux32::__anon63
totalswap	./arch/alpha/linux/linux.hh	/^       uint64_t totalswap; \/* Total swap space size *\/$/;"	m	struct:AlphaLinux::__anon51
totalswap	./arch/arm/linux/linux.hh	/^        uint32_t totalswap; \/* Total swap space size *\/$/;"	m	struct:ArmLinux32::__anon76
totalswap	./arch/arm/linux/linux.hh	/^        uint64_t totalswap; \/* Total swap space size *\/$/;"	m	struct:ArmLinux64::__anon79
totalswap	./arch/mips/linux/linux.hh	/^       uint32_t totalswap; \/* Total swap space size *\/$/;"	m	struct:MipsLinux::__anon84
totalswap	./arch/sparc/linux/linux.hh	/^        uint32_t totalswap; \/* Total swap space size *\/$/;"	m	struct:Sparc32Linux::__anon47
totalswap	./arch/sparc/linux/linux.hh	/^        uint64_t totalswap; \/* Total swap space size *\/$/;"	m	struct:SparcLinux::__anon45
totalswap	./arch/x86/linux/linux.hh	/^        uint64_t totalswap; \/* Total swap space size *\/$/;"	m	struct:X86Linux64::__anon61
totalswap	./arch/x86/linux/linux.hh	/^       uint32_t totalswap; \/* Total swap space size *\/$/;"	m	struct:X86Linux32::__anon63
touch	./mem/ruby/structures/LRUPolicy.cc	/^LRUPolicy::touch(int64_t set, int64_t index, Tick time)$/;"	f	class:LRUPolicy
touch	./mem/ruby/structures/PseudoLRUPolicy.cc	/^PseudoLRUPolicy::touch(int64_t set, int64_t index, Tick time)$/;"	f	class:PseudoLRUPolicy
tpc	./arch/arm/miscregs.hh	/^        Bitfield<23>     tpc;$/;"	m	namespace:ArmISA
tpc	./arch/sparc/isa.hh	/^    uint64_t tpc[MaxTL];    \/\/ Trap Program Counter (value from$/;"	m	class:SparcISA::ISA
tpm	./arch/arm/miscregs.hh	/^        Bitfield<6>    tpm;$/;"	m	namespace:ArmISA
tpmcr	./arch/arm/miscregs.hh	/^        Bitfield<5>    tpmcr;$/;"	m	namespace:ArmISA
tpr	./arch/x86/regs/misc.hh	/^        Bitfield<3, 0> tpr; \/\/ Task Priority Register$/;"	m	namespace:X86ISA
tps	./python/m5/ticks.py	/^tps = 1.0e12         # default to 1 THz (1 Tick == 1 ps)$/;"	v
tps_fixed	./python/m5/ticks.py	/^tps_fixed = False    # once set to true, can't be changed$/;"	v
tpu	./arch/arm/miscregs.hh	/^        Bitfield<24>     tpu;$/;"	m	namespace:ArmISA
tq0	./base/loader/coff_sym.h	/^    unsigned tq0 : 4;$/;"	m	struct:__anon112
tq1	./base/loader/coff_sym.h	/^    unsigned tq1 : 4;   \/* 6 type qualifiers - tqPtr, etc. *\/$/;"	m	struct:__anon112
tq2	./base/loader/coff_sym.h	/^    unsigned tq2 : 4;$/;"	m	struct:__anon112
tq3	./base/loader/coff_sym.h	/^    unsigned tq3 : 4;$/;"	m	struct:__anon112
tq4	./base/loader/coff_sym.h	/^    unsigned tq4 : 4;$/;"	m	struct:__anon112
tq5	./base/loader/coff_sym.h	/^    unsigned tq5 : 4;$/;"	m	struct:__anon112
tqArray	./base/loader/coff_symconst.h	164;"	d
tqConst	./base/loader/coff_symconst.h	167;"	d
tqFar	./base/loader/coff_symconst.h	165;"	d
tqMax	./base/loader/coff_symconst.h	168;"	d
tqNil	./base/loader/coff_symconst.h	161;"	d
tqProc	./base/loader/coff_symconst.h	163;"	d
tqPtr	./base/loader/coff_symconst.h	162;"	d
tqVol	./base/loader/coff_symconst.h	166;"	d
tr0	./arch/arm/miscregs.hh	/^       Bitfield<1,0> tr0;$/;"	m	namespace:ArmISA
tr1	./arch/arm/miscregs.hh	/^       Bitfield<3,2> tr1;$/;"	m	namespace:ArmISA
tr2	./arch/arm/miscregs.hh	/^       Bitfield<5,4> tr2;$/;"	m	namespace:ArmISA
tr3	./arch/arm/miscregs.hh	/^       Bitfield<7,6> tr3;$/;"	m	namespace:ArmISA
tr4	./arch/arm/miscregs.hh	/^       Bitfield<9,8> tr4;$/;"	m	namespace:ArmISA
tr5	./arch/arm/miscregs.hh	/^       Bitfield<11,10> tr5;$/;"	m	namespace:ArmISA
tr6	./arch/arm/miscregs.hh	/^       Bitfield<13,12> tr6;$/;"	m	namespace:ArmISA
tr7	./arch/arm/miscregs.hh	/^       Bitfield<15,14> tr7;$/;"	m	namespace:ArmISA
trace	./arch/alpha/stacktrace.cc	/^StackTrace::trace(ThreadContext *_tc, bool is_call)$/;"	f	class:AlphaISA::StackTrace
trace	./arch/alpha/stacktrace.hh	/^StackTrace::trace(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:AlphaISA::StackTrace
trace	./arch/arm/stacktrace.cc	/^    StackTrace::trace(ThreadContext *_tc, bool is_call)$/;"	f	class:ArmISA::StackTrace
trace	./arch/arm/stacktrace.hh	/^StackTrace::trace(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:ArmISA::StackTrace
trace	./arch/mips/stacktrace.cc	/^StackTrace::trace(ThreadContext *_tc, bool is_call)$/;"	f	class:StackTrace
trace	./arch/mips/stacktrace.hh	/^StackTrace::trace(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:MipsISA::StackTrace
trace	./arch/power/stacktrace.cc	/^StackTrace::trace(ThreadContext *_tc, bool is_call)$/;"	f	class:PowerISA::StackTrace
trace	./arch/power/stacktrace.hh	/^StackTrace::trace(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:PowerISA::StackTrace
trace	./arch/sparc/stacktrace.hh	/^    trace(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:SparcISA::StackTrace
trace	./arch/x86/stacktrace.cc	/^    StackTrace::trace(ThreadContext *_tc, bool is_call)$/;"	f	class:X86ISA::StackTrace
trace	./arch/x86/stacktrace.hh	/^    StackTrace::trace(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:X86ISA::StackTrace
trace	./cpu/profile.hh	/^    TheISA::StackTrace trace;$/;"	m	class:FunctionProfile
trace	./cpu/testers/traffic_gen/generators.hh	/^        ProtoInputStream trace;$/;"	m	class:TraceGen::InputStream
trace	./cpu/testers/traffic_gen/generators.hh	/^    InputStream trace;$/;"	m	class:TraceGen
trace	./cpu/trace/trace_cpu.hh	/^            ProtoInputStream trace;$/;"	m	class:TraceCPU::ElasticDataGen::InputStream
trace	./cpu/trace/trace_cpu.hh	/^            ProtoInputStream trace;$/;"	m	class:TraceCPU::FixedRetryGen::InputStream
trace	./cpu/trace/trace_cpu.hh	/^        InputStream trace;$/;"	m	class:TraceCPU::ElasticDataGen
trace	./cpu/trace/trace_cpu.hh	/^        InputStream trace;$/;"	m	class:TraceCPU::FixedRetryGen
trace	./sim/eventq.cc	/^Event::trace(const char *action)$/;"	f	class:Event
traceCommit	./cpu/o3/probe/simple_trace.cc	/^void SimpleTrace::traceCommit(const O3CPUImpl::DynInstPtr &dynInst)$/;"	f	class:SimpleTrace
traceComplete	./cpu/testers/traffic_gen/generators.hh	/^    bool traceComplete;$/;"	m	class:TraceGen
traceComplete	./cpu/trace/trace_cpu.hh	/^        bool traceComplete;$/;"	m	class:TraceCPU::ElasticDataGen
traceComplete	./cpu/trace/trace_cpu.hh	/^        bool traceComplete;$/;"	m	class:TraceCPU::FixedRetryGen
traceData	./cpu/base_dyn_inst.hh	/^    Trace::InstRecord *traceData;$/;"	m	class:BaseDynInst
traceData	./cpu/minor/dyn_inst.hh	/^    Trace::InstRecord *traceData;$/;"	m	class:Minor::MinorDynInst
traceData	./cpu/simple/base.hh	/^    Trace::InstRecord *traceData;$/;"	m	class:BaseSimpleCPU
traceFetch	./cpu/o3/probe/simple_trace.cc	/^void SimpleTrace::traceFetch(const O3CPUImpl::DynInstPtr &dynInst)$/;"	f	class:SimpleTrace
traceFile	./mem/DRAMSim2.py	/^    traceFile = Param.String("", "Output file for trace generation")$/;"	v	class:DRAMSim2
traceFunctions	./cpu/base.hh	/^    void traceFunctions(Addr pc)$/;"	f	class:BaseCPU
traceFunctionsInternal	./cpu/base.cc	/^BaseCPU::traceFunctionsInternal(Addr pc)$/;"	f	class:BaseCPU
traceInfoMap	./cpu/o3/probe/elastic_trace.hh	/^    std::unordered_map<InstSeqNum, TraceInfo*> traceInfoMap;$/;"	m	class:ElasticTrace
traceInst	./cpu/exetrace.cc	/^Trace::ExeTracerRecord::traceInst(const StaticInstPtr &inst, bool ran)$/;"	f	class:Trace::Trace::ExeTracerRecord
traceInst	./cpu/inst_pb_trace.cc	/^InstPBTrace::traceInst(ThreadContext *tc, StaticInstPtr si, TheISA::PCState pc)$/;"	f	class:Trace::InstPBTrace
traceMem	./cpu/inst_pb_trace.cc	/^InstPBTrace::traceMem(StaticInstPtr si, Addr a, Addr s, unsigned f)$/;"	f	class:Trace::InstPBTrace
traceStream	./cpu/inst_pb_trace.cc	/^ProtoOutputStream *InstPBTrace::traceStream;$/;"	m	class:Trace::InstPBTrace	file:
traceStream	./cpu/inst_pb_trace.hh	/^    static ProtoOutputStream *traceStream;$/;"	m	class:Trace::InstPBTrace
traceStream	./mem/probes/mem_trace.hh	/^    ProtoOutputStream *traceStream;$/;"	m	class:MemTraceProbe
traceVirtAddr	./cpu/o3/probe/ElasticTrace.py	/^                                "to be traced.")$/;"	v	class:ElasticTrace
traceVirtAddr	./cpu/o3/probe/elastic_trace.hh	/^    const bool traceVirtAddr;$/;"	m	class:ElasticTrace
trace_compress	./mem/probes/MemTraceProbe.py	/^    trace_compress = Param.Bool(True, "Enable trace compression")$/;"	v	class:MemTraceProbe
trace_file	./mem/probes/MemTraceProbe.py	/^    trace_file = Param.String("", "Packet trace output file")$/;"	v	class:MemTraceProbe
tracer	./cpu/BaseCPU.py	/^    tracer = Param.InstTracer(default_tracer, "Instruction tracer")$/;"	v
tracer	./cpu/base.hh	/^    Trace::InstTracer * tracer;$/;"	m	class:BaseCPU
tracer	./cpu/inst_pb_trace.hh	/^    InstPBTrace& tracer;$/;"	m	class:Trace::InstPBTraceRecord
trackLoadLocked	./mem/abstract_mem.cc	/^AbstractMemory::trackLoadLocked(PacketPtr pkt)$/;"	f	class:AbstractMemory
trackLoadLocked	./mem/cache/blk.hh	/^    void trackLoadLocked(PacketPtr pkt)$/;"	f	class:CacheBlk
trafficGen	./cpu/testers/traffic_gen/traffic_gen.hh	/^        TrafficGen& trafficGen;$/;"	m	class:TrafficGen::TrafficGenPort
trafficType	./cpu/testers/networktest/networktest.hh	/^    int trafficType;$/;"	m	class:NetworkTest
traffic_type	./cpu/testers/networktest/NetworkTest.py	/^    traffic_type = Param.Counter(0, "Traffic type: uniform random, tornado, bit complement")$/;"	v	class:NetworkTest
train_misses	./mem/ruby/structures/RubyPrefetcher.py	/^    train_misses = Param.UInt32(4, "")$/;"	v	class:Prefetcher
tranMethod	./arch/arm/faults.hh	/^    ArmFault::TranMethod tranMethod;$/;"	m	class:ArmISA::AbortFault
tranType	./arch/arm/stage2_lookup.hh	/^    TLB::ArmTranslationType tranType;$/;"	m	class:ArmISA::Stage2LookUp
tranType	./arch/arm/table_walker.hh	/^        TLB::ArmTranslationType tranType;$/;"	m	class:ArmISA::TableWalker::WalkerState
trans	./mem/slicc/generate/tex.py	/^            trans = sm.get_transition(state, event)$/;"	v
transDist	./mem/xbar.hh	/^    Stats::Vector transDist;$/;"	m	class:BaseXBar
transKick	./dev/virtio/base.hh	/^    Callback *transKick;$/;"	m	class:VirtIODeviceBase
transLatency	./sim/dvfs_handler.hh	/^    Tick transLatency() const { return _transLatency; }$/;"	f	class:DVFSHandler
transState	./arch/arm/stage2_lookup.hh	/^    TLB::Translation        *transState;$/;"	m	class:ArmISA::Stage2LookUp
transState	./arch/arm/table_walker.hh	/^        TLB::Translation *transState;$/;"	m	class:ArmISA::TableWalker::WalkerState
transactionLatency	./dev/arm/ufs_device.hh	/^        Stats::Histogram transactionLatency;$/;"	m	struct:UFSHostDevice::UFSHostDeviceStats
transactionStart	./dev/arm/ufs_device.hh	/^    Tick transactionStart[32];$/;"	m	class:UFSHostDevice
transaction_bins	./mem/CommMonitor.py	/^                                          "count histograms")$/;"	v	class:CommMonitor
transferCompleted	./dev/arm/ufs_device.hh	/^        bool transferCompleted;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
transferDone	./dev/arm/ufs_device.cc	/^UFSHostDevice::transferDone(Addr responseStartAddr, uint32_t req_pos,$/;"	f	class:UFSHostDevice
transferDone	./dev/net/ns_gige.cc	/^NSGigE::transferDone()$/;"	f	class:NSGigE
transferDone	./dev/net/sinic.cc	/^Device::transferDone()$/;"	f	class:Sinic::Device
transferDoneCallback	./dev/arm/ufs_device.hh	/^    Callback* transferDoneCallback;$/;"	m	class:UFSHostDevice
transferDoneInfo	./dev/arm/ufs_device.hh	/^    struct transferDoneInfo {$/;"	s	class:UFSHostDevice
transferEnd	./dev/arm/ufs_device.hh	/^    std::deque<struct transferStart> transferEnd;$/;"	m	class:UFSHostDevice
transferEventQueue	./dev/arm/ufs_device.hh	/^    transferEventQueue;$/;"	m	class:UFSHostDevice
transferHandler	./dev/arm/ufs_device.cc	/^UFSHostDevice::transferHandler(struct UTPTransferReqDesc* request_in,$/;"	f	class:UFSHostDevice
transferInfo	./dev/arm/ufs_device.hh	/^        transferDoneInfo transferInfo;$/;"	m	class:UFSHostDevice::UFSSCSIDevice
transferInfo	./dev/arm/ufs_device.hh	/^    struct transferInfo {$/;"	s	class:UFSHostDevice
transferNeedsBurst	./cpu/minor/lsq.cc	/^transferNeedsBurst(Addr addr, unsigned int size, unsigned int block_size)$/;"	f	namespace:Minor
transferStart	./dev/arm/ufs_device.cc	/^UFSHostDevice::transferStart()$/;"	f	class:UFSHostDevice
transferStart	./dev/arm/ufs_device.hh	/^    struct transferStart {$/;"	s	class:UFSHostDevice
transferStartInfo	./dev/arm/ufs_device.hh	/^    std::deque<struct transferStart> transferStartInfo;$/;"	m	class:UFSHostDevice
transferTrack	./dev/arm/ufs_device.hh	/^    uint32_t transferTrack;$/;"	m	class:UFSHostDevice
transfers	./cpu/minor/fetch1.hh	/^    FetchQueue transfers;$/;"	m	class:Minor::Fetch1
transfers	./cpu/minor/lsq.hh	/^    LSQQueue transfers;$/;"	m	class:Minor::LSQ
transition	./cpu/testers/traffic_gen/traffic_gen.cc	/^TrafficGen::transition()$/;"	f	class:TrafficGen
transitionMatrix	./cpu/testers/traffic_gen/traffic_gen.hh	/^    std::vector<std::vector<double> > transitionMatrix;$/;"	m	class:TrafficGen
transition_latency	./sim/DVFSHandler.py	/^    transition_latency = Param.Latency('100us',$/;"	v	class:DVFSHandler
transitions_per_cycle	./mem/ruby/slicc_interface/Controller.py	/^        Param.Int(32, "no. of  SLICC state machine transitions per cycle")$/;"	v	class:RubyController
translate	./arch/sparc/pagetable.hh	/^    translate(Addr vaddr) const$/;"	f	class:SparcISA::PageTableEntry
translate	./arch/x86/tlb.cc	/^TLB::translate(RequestPtr req, ThreadContext *tc, Translation *translation,$/;"	f	class:X86ISA::TLB
translate	./mem/page_table.cc	/^PageTableBase::translate(Addr vaddr, Addr &paddr)$/;"	f	class:PageTableBase
translate	./mem/page_table.cc	/^PageTableBase::translate(RequestPtr req)$/;"	f	class:PageTableBase
translate	./mem/page_table.hh	/^    bool translate(Addr vaddr) { Addr dummy; return translate(vaddr, dummy); }$/;"	f	class:PageTableBase
translateAtomic	./arch/alpha/tlb.cc	/^TLB::translateAtomic(RequestPtr req, ThreadContext *tc, Mode mode)$/;"	f	class:AlphaISA::TLB
translateAtomic	./arch/arm/tlb.cc	/^TLB::translateAtomic(RequestPtr req, ThreadContext *tc, Mode mode,$/;"	f	class:TLB
translateAtomic	./arch/generic/tlb.cc	/^GenericTLB::translateAtomic(RequestPtr req, ThreadContext *tc, Mode)$/;"	f	class:GenericTLB
translateAtomic	./arch/mips/tlb.cc	/^TLB::translateAtomic(RequestPtr req, ThreadContext *tc, Mode mode)$/;"	f	class:TLB
translateAtomic	./arch/power/tlb.cc	/^TLB::translateAtomic(RequestPtr req, ThreadContext *tc, Mode mode)$/;"	f	class:TLB
translateAtomic	./arch/sparc/tlb.cc	/^TLB::translateAtomic(RequestPtr req, ThreadContext *tc, Mode mode)$/;"	f	class:SparcISA::TLB
translateAtomic	./arch/x86/tlb.cc	/^TLB::translateAtomic(RequestPtr req, ThreadContext *tc, Mode mode)$/;"	f	class:X86ISA::TLB
translateComplete	./arch/arm/tlb.cc	/^TLB::translateComplete(RequestPtr req, ThreadContext *tc,$/;"	f	class:TLB
translateData	./arch/alpha/tlb.cc	/^TLB::translateData(RequestPtr req, ThreadContext *tc, bool write)$/;"	f	class:AlphaISA::TLB
translateData	./arch/mips/tlb.cc	/^TLB::translateData(RequestPtr req, ThreadContext *tc, bool write)$/;"	f	class:TLB
translateData	./arch/power/tlb.cc	/^TLB::translateData(RequestPtr req, ThreadContext *tc, bool write)$/;"	f	class:TLB
translateData	./arch/sparc/tlb.cc	/^TLB::translateData(RequestPtr req, ThreadContext *tc, bool write)$/;"	f	class:SparcISA::TLB
translateDelta	./mem/request.hh	/^    Tick translateDelta;$/;"	m	class:Request
translateFs	./arch/arm/tlb.cc	/^TLB::translateFs(RequestPtr req, ThreadContext *tc, Mode mode,$/;"	f	class:TLB
translateFunctional	./arch/alpha/tlb.cc	/^TLB::translateFunctional(RequestPtr req, ThreadContext *tc, Mode mode)$/;"	f	class:AlphaISA::TLB
translateFunctional	./arch/arm/tlb.cc	/^TLB::translateFunctional(RequestPtr req, ThreadContext *tc, Mode mode,$/;"	f	class:TLB
translateFunctional	./arch/arm/tlb.cc	/^TLB::translateFunctional(ThreadContext *tc, Addr va, Addr &pa)$/;"	f	class:TLB
translateFunctional	./arch/mips/tlb.cc	/^TLB::translateFunctional(RequestPtr req, ThreadContext *tc, Mode mode)$/;"	f	class:TLB
translateFunctional	./arch/power/tlb.cc	/^TLB::translateFunctional(RequestPtr req, ThreadContext *tc, Mode mode)$/;"	f	class:TLB
translateFunctional	./arch/sparc/tlb.cc	/^TLB::translateFunctional(RequestPtr req, ThreadContext *tc, Mode mode)$/;"	f	class:SparcISA::TLB
translateFunctional	./arch/x86/tlb.cc	/^TLB::translateFunctional(RequestPtr req, ThreadContext *tc, Mode mode)$/;"	f	class:X86ISA::TLB
translateInst	./arch/alpha/tlb.cc	/^TLB::translateInst(RequestPtr req, ThreadContext *tc)$/;"	f	class:AlphaISA::TLB
translateInst	./arch/mips/tlb.cc	/^TLB::translateInst(RequestPtr req, ThreadContext *tc)$/;"	f	class:TLB
translateInst	./arch/power/tlb.cc	/^TLB::translateInst(RequestPtr req, ThreadContext *tc)$/;"	f	class:TLB
translateInst	./arch/sparc/tlb.cc	/^TLB::translateInst(RequestPtr req, ThreadContext *tc)$/;"	f	class:SparcISA::TLB
translateInt	./arch/x86/tlb.cc	/^TLB::translateInt(RequestPtr req, ThreadContext *tc)$/;"	f	class:X86ISA::TLB
translateSe	./arch/arm/tlb.cc	/^TLB::translateSe(RequestPtr req, ThreadContext *tc, Mode mode,$/;"	f	class:TLB
translateTable	./arch/arm/isa.hh	/^    enum translateTable {$/;"	g	namespace:ArmISA
translateTiming	./arch/alpha/tlb.cc	/^TLB::translateTiming(RequestPtr req, ThreadContext *tc,$/;"	f	class:AlphaISA::TLB
translateTiming	./arch/arm/stage2_mmu.hh	/^        Fault translateTiming(ThreadContext *tc)$/;"	f	class:ArmISA::Stage2MMU::Stage2Translation
translateTiming	./arch/arm/tlb.cc	/^TLB::translateTiming(RequestPtr req, ThreadContext *tc,$/;"	f	class:TLB
translateTiming	./arch/generic/tlb.cc	/^GenericTLB::translateTiming(RequestPtr req, ThreadContext *tc,$/;"	f	class:GenericTLB
translateTiming	./arch/mips/tlb.cc	/^TLB::translateTiming(RequestPtr req, ThreadContext *tc,$/;"	f	class:TLB
translateTiming	./arch/power/tlb.cc	/^TLB::translateTiming(RequestPtr req, ThreadContext *tc,$/;"	f	class:TLB
translateTiming	./arch/sparc/tlb.cc	/^TLB::translateTiming(RequestPtr req, ThreadContext *tc,$/;"	f	class:SparcISA::TLB
translateTiming	./arch/x86/tlb.cc	/^TLB::translateTiming(RequestPtr req, ThreadContext *tc,$/;"	f	class:X86ISA::TLB
translation	./arch/x86/pagetable_walker.hh	/^            TLB::Translation * translation;$/;"	m	class:X86ISA::Walker::WalkerState
translationCompleted	./cpu/base_dyn_inst.hh	/^    bool translationCompleted() const { return instFlags[TranslationCompleted]; }$/;"	f	class:BaseDynInst
translationCompleted	./cpu/base_dyn_inst.hh	/^    void translationCompleted(bool f) { instFlags[TranslationCompleted] = f; }$/;"	f	class:BaseDynInst
translationEvent	./cpu/minor/lsq.hh	/^        TranslationEvent translationEvent;$/;"	m	class:Minor::LSQ::SplitDataRequest
translationFault	./cpu/simple/timing.cc	/^TimingSimpleCPU::translationFault(const Fault &fault)$/;"	f	class:TimingSimpleCPU
translationStarted	./cpu/base_dyn_inst.hh	/^    bool translationStarted() const { return instFlags[TranslationStarted]; }$/;"	f	class:BaseDynInst
translationStarted	./cpu/base_dyn_inst.hh	/^    void translationStarted(bool f) { instFlags[TranslationStarted] = f; }$/;"	f	class:BaseDynInst
transmit	./dev/net/dist_etherlink.cc	/^DistEtherLink::TxLink::transmit(EthPacketPtr pkt)$/;"	f	class:DistEtherLink::TxLink
transmit	./dev/net/etherlink.cc	/^EtherLink::Link::transmit(EthPacketPtr pkt)$/;"	f	class:EtherLink::Link
transmit	./dev/net/ns_gige.cc	/^NSGigE::transmit()$/;"	f	class:NSGigE
transmit	./dev/net/sinic.cc	/^Device::transmit()$/;"	f	class:Sinic::Device
transmitList	./dev/dma_device.hh	/^    std::deque<PacketPtr> transmitList;$/;"	m	class:DmaPort
transmitList	./mem/bridge.hh	/^        std::deque<DeferredPacket> transmitList;$/;"	m	class:Bridge::BridgeMasterPort
transmitList	./mem/bridge.hh	/^        std::deque<DeferredPacket> transmitList;$/;"	m	class:Bridge::BridgeSlavePort
transmitList	./mem/packet_queue.hh	/^    DeferredPacketList transmitList;$/;"	m	class:PacketQueue
transmitList	./mem/serial_link.hh	/^        std::deque<DeferredPacket> transmitList;$/;"	m	class:SerialLink::SerialLinkMasterPort
transmitList	./mem/serial_link.hh	/^        std::deque<DeferredPacket> transmitList;$/;"	m	class:SerialLink::SerialLinkSlavePort
transmitTime	./mem/comm_monitor.hh	/^        Tick transmitTime;$/;"	m	class:CommMonitor::CommMonitorSenderState
trap	./base/remote_gdb.cc	/^BaseRemoteGDB::trap(int type)$/;"	f	class:BaseRemoteGDB
trap	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::trap(const Fault &fault, ThreadID tid,$/;"	f	class:FullO3CPU
trap	./cpu/o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::trap(const Fault &fault)$/;"	f	class:BaseO3DynInst
trapEvent	./base/remote_gdb.hh	/^    TrapEvent trapEvent;$/;"	m	class:BaseRemoteGDB
trapInFlight	./cpu/o3/commit.hh	/^    bool trapInFlight[Impl::MaxThreads];$/;"	m	class:DefaultCommit
trapLatency	./cpu/o3/O3CPU.py	/^    trapLatency = Param.Cycles(13, "Trap latency")$/;"	v	class:DerivO3CPU
trapLatency	./cpu/o3/commit.hh	/^    const Cycles trapLatency;$/;"	m	class:DefaultCommit
trapPending	./cpu/o3/thread_state.hh	/^    bool trapPending;$/;"	m	struct:O3ThreadState
trapSquash	./cpu/o3/commit.hh	/^    bool trapSquash[Impl::MaxThreads];$/;"	m	class:DefaultCommit
trapType	./arch/sparc/faults.hh	/^        const TrapType trapType;$/;"	m	struct:SparcISA::SparcFaultBase::FaultVals
trapType	./arch/sparc/faults.hh	/^    TrapType trapType() { return SparcFault<T>::trapType() + _n; }$/;"	f	class:SparcISA::EnumeratedFault
trapType	./arch/sparc/faults.hh	/^    TrapType trapType() { return vals.trapType; }$/;"	f	class:SparcISA::SparcFault
tre	./arch/arm/miscregs.hh	/^        Bitfield<28>   tre;     \/\/ TEX remap enable (AArch32 only)$/;"	m	namespace:ArmISA
tree	./arch/sparc/tlb_map.hh	/^    RangeMap tree;$/;"	m	class:SparcISA::TlbMap
tree	./base/addr_range_map.hh	/^    RangeMap tree;$/;"	m	class:AddrRangeMap
tree	./mem/stack_dist_calc.hh	/^    TreeType tree;$/;"	m	class:StackDistCalc
trickBoxCheck	./arch/arm/tlb.cc	/^TLB::trickBoxCheck(RequestPtr req, Mode mode, TlbEntry::DomainType domain)$/;"	f	class:TLB
trie	./arch/x86/tlb.hh	/^        TlbEntryTrie trie;$/;"	m	class:X86ISA::TLB
trieHandle	./arch/x86/pagetable.hh	/^        TlbEntryTrie::Handle trieHandle;$/;"	m	struct:X86ISA::TlbEntry
triedToPredict	./cpu/minor/dyn_inst.hh	/^    bool triedToPredict;$/;"	m	class:Minor::MinorDynInst
trigger	./arch/x86/bios/IntelMP.py	/^    trigger = Param.X86IntelMPTriggerMode('ConformTrigger', 'trigger mode')$/;"	v	class:X86IntelMPIOIntAssignment
trigger	./arch/x86/bios/IntelMP.py	/^    trigger = Param.X86IntelMPTriggerMode('ConformTrigger', 'trigger mode')$/;"	v	class:X86IntelMPLocalIntAssignment
trigger	./arch/x86/interrupts.hh	/^        Bitfield<15> trigger;$/;"	m	class:X86ISA::Interrupts
trigger	./arch/x86/intmessage.hh	/^        Bitfield<21> trigger;$/;"	m	namespace:X86ISA
trigger	./arch/x86/regs/apic.hh	/^        Bitfield<15> trigger;$/;"	m	namespace:X86ISA
trigger	./dev/x86/i82094aa.hh	/^        Bitfield<15> trigger;$/;"	m	class:X86ISA::I82094AA
triggerTimerInterrupt	./arch/x86/interrupts.hh	/^    triggerTimerInterrupt()$/;"	f	class:X86ISA::Interrupts
tru64	./kern/tru64/dump_mbuf.cc	/^namespace tru64 {$/;"	n	file:
tru64	./kern/tru64/dump_mbuf.hh	/^namespace tru64 {$/;"	n
tru64	./kern/tru64/mbuf.hh	/^namespace tru64 {$/;"	n
tru64	./kern/tru64/printf.cc	/^namespace tru64 {$/;"	n	file:
tru64	./kern/tru64/printf.hh	/^namespace tru64 {$/;"	n
trueExpr	./cpu/TimingExpr.py	/^    trueExpr = Param.TimingExpr("true expression")$/;"	v	class:TimingExprIf
trueExpr	./cpu/timing_expr.hh	/^    TimingExpr *trueExpr;$/;"	m	class:TimingExprIf
truecolor	./base/vnc/vncinput.hh	/^        uint8_t truecolor;$/;"	m	struct:VncInput::PixelFormat
truncFP	./arch/mips/utility.cc	/^truncFP(double val)$/;"	f	namespace:MipsISA
truncPage	./arch/arm/utility.cc	/^truncPage(Addr addr)$/;"	f	namespace:ArmISA
truncate	./kern/tru64/tru64_syscalls.hh	/^        truncate = 129,$/;"	e	enum:SystemCalls::__anon102
truncate64Func	./sim/syscall_emul.cc	/^truncate64Func(SyscallDesc *desc, int num,$/;"	f
truncateFunc	./sim/syscall_emul.cc	/^truncateFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)$/;"	f
trvm	./arch/arm/miscregs.hh	/^        Bitfield<30>     trvm;  \/\/ AArch64$/;"	m	namespace:ArmISA
tryAccess	./mem/ruby/structures/BankedArray.cc	/^BankedArray::tryAccess(int64_t idx)$/;"	f	class:BankedArray
tryAsSimObjectOrVector	./python/m5/SimObject.py	/^def tryAsSimObjectOrVector(value):$/;"	f
tryCacheAccess	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::tryCacheAccess(Addr address, RubyRequestType type,$/;"	f	class:CacheMemory
tryCompleteDrain	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::tryCompleteDrain()$/;"	f	class:AtomicSimpleCPU
tryCompleteDrain	./cpu/simple/timing.cc	/^TimingSimpleCPU::tryCompleteDrain()$/;"	f	class:TimingSimpleCPU
tryDrain	./cpu/kvm/base.cc	/^BaseKvmCPU::tryDrain()$/;"	f	class:BaseKvmCPU
tryDrain	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::tryDrain()$/;"	f	class:FullO3CPU
tryDrain	./sim/drain.cc	/^DrainManager::tryDrain()$/;"	f	class:DrainManager
tryFile	./base/loader/aout_object.cc	/^AoutObject::tryFile(const string &fname, size_t len, uint8_t *data)$/;"	f	class:AoutObject
tryFile	./base/loader/dtb_object.cc	/^DtbObject::tryFile(const std::string &fname, size_t len, uint8_t *data)$/;"	f	class:DtbObject
tryFile	./base/loader/ecoff_object.cc	/^EcoffObject::tryFile(const string &fname, size_t len, uint8_t *data)$/;"	f	class:EcoffObject
tryFile	./base/loader/elf_object.cc	/^ElfObject::tryFile(const string &fname, size_t len, uint8_t *data)$/;"	f	class:ElfObject
tryFile	./base/loader/raw_object.cc	/^RawObject::tryFile(const std::string &fname, size_t len, uint8_t *data)$/;"	f	class:RawObject
tryGet	./dev/dma_device.cc	/^DmaReadFifo::tryGet(uint8_t *dst, size_t len)$/;"	f	class:DmaReadFifo
tryGet	./dev/dma_device.hh	/^    bool tryGet(T &value) {$/;"	f	class:DmaReadFifo
tryMemsetBlob	./mem/se_translating_port_proxy.cc	/^SETranslatingPortProxy::tryMemsetBlob(Addr addr, uint8_t val, int size) const$/;"	f	class:SETranslatingPortProxy
tryNext	./cpu/trace/trace_cpu.cc	/^TraceCPU::FixedRetryGen::tryNext()$/;"	f	class:TraceCPU::FixedRetryGen
tryPCEvents	./cpu/minor/execute.cc	/^Execute::tryPCEvents()$/;"	f	class:Minor::Execute
tryReadBlob	./mem/se_translating_port_proxy.cc	/^SETranslatingPortProxy::tryReadBlob(Addr addr, uint8_t *p, int size) const$/;"	f	class:SETranslatingPortProxy
tryReadString	./mem/se_translating_port_proxy.cc	/^SETranslatingPortProxy::tryReadString(std::string &str, Addr addr) const$/;"	f	class:SETranslatingPortProxy
trySend	./dev/virtio/console.cc	/^VirtIOConsole::TermRecvQueue::trySend()$/;"	f	class:VirtIOConsole::TermRecvQueue
trySendRetries	./mem/ruby/system/RubyPort.cc	/^RubyPort::trySendRetries()$/;"	f	class:RubyPort
trySendTiming	./mem/bridge.cc	/^Bridge::BridgeMasterPort::trySendTiming()$/;"	f	class:Bridge::BridgeMasterPort
trySendTiming	./mem/bridge.cc	/^Bridge::BridgeSlavePort::trySendTiming()$/;"	f	class:Bridge::BridgeSlavePort
trySendTiming	./mem/serial_link.cc	/^SerialLink::SerialLinkMasterPort::trySendTiming()$/;"	f	class:SerialLink::SerialLinkMasterPort
trySendTiming	./mem/serial_link.cc	/^SerialLink::SerialLinkSlavePort::trySendTiming()$/;"	f	class:SerialLink::SerialLinkSlavePort
trySendTimingReq	./dev/dma_device.cc	/^DmaPort::trySendTimingReq()$/;"	f	class:DmaPort
tryTiming	./mem/xbar.cc	/^BaseXBar::Layer<SrcType,DstType>::tryTiming(SrcType* src_port)$/;"	f	class:BaseXBar::Layer
tryToBranch	./cpu/minor/execute.cc	/^Execute::tryToBranch(MinorDynInstPtr inst, Fault fault, BranchData &branch)$/;"	f	class:Minor::Execute
tryToSend	./cpu/minor/fetch1.cc	/^Fetch1::tryToSend(FetchRequestPtr request)$/;"	f	class:Minor::Fetch1
tryToSend	./cpu/minor/lsq.cc	/^LSQ::tryToSend(LSQRequestPtr request)$/;"	f	class:Minor::LSQ
tryToSendToTransfers	./cpu/minor/fetch1.cc	/^Fetch1::tryToSendToTransfers(FetchRequestPtr request)$/;"	f	class:Minor::Fetch1
tryToSendToTransfers	./cpu/minor/lsq.cc	/^LSQ::tryToSendToTransfers(LSQRequestPtr request)$/;"	f	class:Minor::LSQ
tryWriteBlob	./mem/se_translating_port_proxy.cc	/^SETranslatingPortProxy::tryWriteBlob(Addr addr, const uint8_t *p,$/;"	f	class:SETranslatingPortProxy
tryWriteString	./mem/se_translating_port_proxy.cc	/^SETranslatingPortProxy::tryWriteString(Addr addr, const char *str) const$/;"	f	class:SETranslatingPortProxy
try_translate	./arch/arm/vtophys.cc	/^try_translate(ThreadContext *tc, Addr addr)$/;"	f	file:
ts	./arch/mips/dt_constants.hh	/^    Bitfield<31>     ts;$/;"	m	namespace:MipsISA
ts	./arch/mips/pra_constants.hh	/^    Bitfield<21>     ts;$/;"	m	namespace:MipsISA
ts	./arch/mips/pra_constants.hh	/^    Bitfield<27, 24> ts;$/;"	m	namespace:MipsISA
ts	./arch/x86/regs/misc.hh	/^        Bitfield<3> ts; \/\/ Task Switched$/;"	m	namespace:X86ISA
tsc	./arch/arm/miscregs.hh	/^        Bitfield<19>     tsc;$/;"	m	namespace:ArmISA
tsd	./arch/x86/regs/misc.hh	/^        Bitfield<2> tsd; \/\/ Time Stamp Disable$/;"	m	namespace:X86ISA
tse	./dev/net/i8254xGBe_defs.hh	/^inline bool tse(TxDesc *d)  {$/;"	f	namespace:iGbReg::TxdOp
tsecr	./base/inet.hh	/^    uint32_t tsecr() const { return ntohl(opt_data.timestamp[1]); }$/;"	f	struct:Net::TcpOpt
tsize	./arch/alpha/aout_machdep.h	/^    uint64_t    tsize;          \/\/\/< text segment size$/;"	m	struct:aout_exechdr
tsize	./base/loader/exec_ecoff.h	/^        coff_ulong  tsize;$/;"	m	struct:ecoff_aouthdr
tsoCopyBytes	./dev/net/i8254xGBe.hh	/^        Addr tsoCopyBytes;$/;"	m	class:IGbE::TxDescCache
tsoDescBytesUsed	./dev/net/i8254xGBe.hh	/^        Addr tsoDescBytesUsed;$/;"	m	class:IGbE::TxDescCache
tsoHeader	./dev/net/i8254xGBe.hh	/^        uint8_t tsoHeader[256];$/;"	m	class:IGbE::TxDescCache
tsoHeaderLen	./dev/net/i8254xGBe.hh	/^        Addr tsoHeaderLen;$/;"	m	class:IGbE::TxDescCache
tsoLoadedHeader	./dev/net/i8254xGBe.hh	/^        bool tsoLoadedHeader;$/;"	m	class:IGbE::TxDescCache
tsoMss	./dev/net/i8254xGBe.hh	/^        Addr tsoMss;$/;"	m	class:IGbE::TxDescCache
tsoPktHasHeader	./dev/net/i8254xGBe.hh	/^        bool tsoPktHasHeader;$/;"	m	class:IGbE::TxDescCache
tsoPktPayloadBytes	./dev/net/i8254xGBe.hh	/^        Addr tsoPktPayloadBytes;$/;"	m	class:IGbE::TxDescCache
tsoPkts	./dev/net/i8254xGBe.hh	/^        int tsoPkts;$/;"	m	class:IGbE::TxDescCache
tsoPrevSeq	./dev/net/i8254xGBe.hh	/^        Addr tsoPrevSeq;$/;"	m	class:IGbE::TxDescCache
tsoTotalLen	./dev/net/i8254xGBe.hh	/^        Addr tsoTotalLen;$/;"	m	class:IGbE::TxDescCache
tsoUsedLen	./dev/net/i8254xGBe.hh	/^        Addr tsoUsedLen;$/;"	m	class:IGbE::TxDescCache
tstate	./arch/sparc/isa.hh	/^    uint64_t tstate[MaxTL]; \/\/ Trap State$/;"	m	class:SparcISA::ISA
tsunami	./dev/alpha/Tsunami.py	/^    tsunami = Param.Tsunami(Parent.any, "Tsunami")$/;"	v	class:TsunamiCChip
tsunami	./dev/alpha/Tsunami.py	/^    tsunami = Param.Tsunami(Parent.any, "Tsunami")$/;"	v	class:TsunamiIO
tsunami	./dev/alpha/Tsunami.py	/^    tsunami = Param.Tsunami(Parent.any, "Tsunami")$/;"	v	class:TsunamiPChip
tsunami	./dev/alpha/tsunami_cchip.hh	/^    Tsunami *tsunami;$/;"	m	class:TsunamiCChip
tsunami	./dev/alpha/tsunami_io.hh	/^        Tsunami *tsunami;$/;"	m	class:TsunamiIO::RTC
tsunami	./dev/alpha/tsunami_io.hh	/^    Tsunami *tsunami;$/;"	m	class:TsunamiIO
tsval	./base/inet.hh	/^    uint32_t tsval() const { return ntohl(opt_data.timestamp[0]); }$/;"	f	struct:Net::TcpOpt
tsw	./arch/arm/miscregs.hh	/^        Bitfield<22>     tsw;$/;"	m	namespace:ArmISA
tt	./arch/sparc/isa.hh	/^    uint16_t tt[MaxTL];     \/\/ Trap Type (Type of trap which occured$/;"	m	class:SparcISA::ISA
tta	./arch/arm/miscregs.hh	/^        Bitfield<20> tta;$/;"	m	namespace:ArmISA
tta	./arch/arm/miscregs.hh	/^        Bitfield<28> tta;  \/\/ AArch64$/;"	m	namespace:ArmISA
ttbcr	./arch/arm/table_walker.hh	/^            TTBCR ttbcr; \/\/ AArch32 translations$/;"	m	union:ArmISA::TableWalker::WalkerState::__anon65
ttbcr	./arch/arm/tlb.hh	/^    TTBCR ttbcr;$/;"	m	class:ArmISA::TLB
ttee	./arch/arm/miscregs.hh	/^        Bitfield<16> ttee;$/;"	m	namespace:ArmISA
ttl	./base/inet.hh	/^    uint8_t  ttl() const { return ip_ttl; }$/;"	f	struct:Net::IpHdr
ttlb	./arch/arm/miscregs.hh	/^        Bitfield<25>     ttlb;$/;"	m	namespace:ArmISA
tty_termcap	./python/m5/util/terminal.py	/^    tty_termcap = no_termcap$/;"	v
tty_termcap	./python/m5/util/terminal.py	/^    tty_termcap = termcap$/;"	v
tu	./arch/mips/pra_constants.hh	/^    Bitfield<30, 28> tu;$/;"	m	namespace:MipsISA
tucse	./dev/net/i8254xGBe_defs.hh	/^inline int tucse(TxDesc *d) { assert(isContext(d)); return bits(d->d1,63,48); }$/;"	f	namespace:iGbReg::TxdOp
tucso	./dev/net/i8254xGBe_defs.hh	/^inline int tucso(TxDesc *d) { assert(isContext(d)); return bits(d->d1,47,40); }$/;"	f	namespace:iGbReg::TxdOp
tucss	./dev/net/i8254xGBe_defs.hh	/^inline int tucss(TxDesc *d) { assert(isContext(d)); return bits(d->d1,39,32); }$/;"	f	namespace:iGbReg::TxdOp
tup	./arch/mips/dt_constants.hh	/^    Bitfield<1> tup;$/;"	m	namespace:MipsISA
tv_nsec	./arch/arm/linux/linux.hh	/^        int32_t tv_nsec;  \/\/!< nanoseconds$/;"	m	struct:ArmLinux32::timespec
tv_nsec	./arch/arm/linux/linux.hh	/^        int64_t tv_nsec;  \/\/!< nanoseconds$/;"	m	struct:ArmLinux64::timespec
tv_nsec	./kern/linux/linux.hh	/^        int64_t tv_nsec;        \/\/!< nanoseconds$/;"	m	struct:Linux::timespec
tv_nsec	./kern/solaris/solaris.hh	/^        int64_t tv_nsec;$/;"	m	struct:Solaris::tgt_timespec
tv_sec	./arch/arm/freebsd/freebsd.hh	/^        int32_t tv_sec;         \/\/!< seconds$/;"	m	struct:ArmFreebsd32::timeval
tv_sec	./arch/arm/freebsd/freebsd.hh	/^        int64_t tv_sec;         \/\/!< seconds$/;"	m	struct:ArmFreebsd64::timeval
tv_sec	./arch/arm/linux/linux.hh	/^        int32_t tv_sec;         \/\/!< seconds$/;"	m	struct:ArmLinux32::timeval
tv_sec	./arch/arm/linux/linux.hh	/^        int32_t tv_sec;   \/\/!< seconds$/;"	m	struct:ArmLinux32::timespec
tv_sec	./arch/arm/linux/linux.hh	/^        int64_t tv_sec;         \/\/!< seconds$/;"	m	struct:ArmLinux64::timeval
tv_sec	./arch/arm/linux/linux.hh	/^        int64_t tv_sec;   \/\/!< seconds$/;"	m	struct:ArmLinux64::timespec
tv_sec	./kern/linux/linux.hh	/^        int64_t tv_sec;         \/\/!< seconds$/;"	m	struct:Linux::timeval
tv_sec	./kern/linux/linux.hh	/^        time_t tv_sec;         \/\/!< seconds$/;"	m	struct:Linux::timespec
tv_sec	./kern/operatingsystem.hh	/^        int64_t tv_sec;         \/\/!< seconds$/;"	m	struct:OperatingSystem::__anon94
tv_sec	./kern/solaris/solaris.hh	/^        int64_t tv_sec;$/;"	m	struct:Solaris::tgt_timespec
tv_sec	./kern/tru64/tru64.hh	/^        uint32_t tv_sec;        \/\/!< seconds$/;"	m	struct:Tru64::timeval
tv_usec	./arch/arm/freebsd/freebsd.hh	/^        int32_t tv_usec;        \/\/!< microseconds$/;"	m	struct:ArmFreebsd32::timeval
tv_usec	./arch/arm/freebsd/freebsd.hh	/^        int64_t tv_usec;        \/\/!< microseconds$/;"	m	struct:ArmFreebsd64::timeval
tv_usec	./arch/arm/linux/linux.hh	/^        int32_t tv_usec;        \/\/!< microseconds$/;"	m	struct:ArmLinux32::timeval
tv_usec	./arch/arm/linux/linux.hh	/^        int64_t tv_usec;        \/\/!< microseconds$/;"	m	struct:ArmLinux64::timeval
tv_usec	./kern/linux/linux.hh	/^        int64_t tv_usec;        \/\/!< microseconds$/;"	m	struct:Linux::timeval
tv_usec	./kern/operatingsystem.hh	/^        int64_t tv_usec;        \/\/!< microseconds$/;"	m	struct:OperatingSystem::__anon94
tv_usec	./kern/tru64/tru64.hh	/^        uint32_t tv_usec;       \/\/!< microseconds$/;"	m	struct:Tru64::timeval
tvm	./arch/arm/miscregs.hh	/^        Bitfield<26>     tvm;$/;"	m	namespace:ArmISA
twe	./arch/arm/miscregs.hh	/^        Bitfield<13> twe;$/;"	m	namespace:ArmISA
twe	./arch/arm/miscregs.hh	/^        Bitfield<14>     twe;$/;"	m	namespace:ArmISA
tweak	./arch/micro_asm_test.py	/^    def tweak(self):$/;"	m	class:TestMacroop
twi	./arch/arm/miscregs.hh	/^        Bitfield<12> twi;$/;"	m	namespace:ArmISA
twi	./arch/arm/miscregs.hh	/^        Bitfield<13>     twi;$/;"	m	namespace:ArmISA
twoToOne	./dev/x86/i8042.hh	/^        Bitfield<4> twoToOne;$/;"	m	class:X86ISA::PS2Mouse
tx	./dev/arm/kmi.hh	/^        Bitfield<1> tx;$/;"	m	class:Pl050
txAdvance	./dev/net/ns_gige.hh	/^        txAdvance$/;"	e	enum:NSGigE::TxState
txBandwidth	./dev/net/etherdevice.hh	/^    Stats::Formula txBandwidth;$/;"	m	class:EtherDevice
txBeginCopy	./dev/net/sinic.hh	/^        txBeginCopy,$/;"	e	enum:Sinic::Device::TxState
txBytes	./dev/net/etherdevice.hh	/^    Stats::Scalar txBytes;$/;"	m	class:EtherDevice
txComplete	./dev/net/etherlink.cc	/^EtherLink::Link::txComplete(EthPacketPtr packet)$/;"	f	class:EtherLink::Link
txCopy	./dev/net/sinic.hh	/^        txCopy,$/;"	e	enum:Sinic::Device::TxState
txCopyDone	./dev/net/sinic.hh	/^        txCopyDone$/;"	e	enum:Sinic::Device::TxState
txDelay	./dev/net/ns_gige.hh	/^    Tick txDelay;$/;"	m	class:NSGigE
txDesc32	./dev/net/ns_gige.hh	/^    ns_desc32 txDesc32;$/;"	m	class:NSGigE
txDesc64	./dev/net/ns_gige.hh	/^    ns_desc64 txDesc64;$/;"	m	class:NSGigE
txDescCache	./dev/net/i8254xGBe.hh	/^    TxDescCache txDescCache;$/;"	m	class:IGbE
txDescCnt	./dev/net/ns_gige.hh	/^    uint32_t txDescCnt;$/;"	m	class:NSGigE
txDescRead	./dev/net/ns_gige.hh	/^        txDescRead,$/;"	e	enum:NSGigE::TxState
txDescRefr	./dev/net/ns_gige.hh	/^        txDescRefr,$/;"	e	enum:NSGigE::TxState
txDescWrite	./dev/net/ns_gige.hh	/^        txDescWrite,$/;"	e	enum:NSGigE::TxState
txDmaAddr	./dev/net/ns_gige.hh	/^    Addr  txDmaAddr;$/;"	m	class:NSGigE
txDmaAddr	./dev/net/sinic.hh	/^    Addr txDmaAddr;$/;"	m	class:Sinic::Device
txDmaData	./dev/net/ns_gige.hh	/^    void *txDmaData;$/;"	m	class:NSGigE
txDmaData	./dev/net/sinic.hh	/^    uint8_t *txDmaData;$/;"	m	class:Sinic::Device
txDmaDone	./dev/net/sinic.cc	/^Device::txDmaDone()$/;"	f	class:Sinic::Device
txDmaEvent	./dev/net/sinic.hh	/^    EventWrapper<Device, &Device::txDmaDone> txDmaEvent;$/;"	m	class:Sinic::Device
txDmaFree	./dev/net/ns_gige.hh	/^    bool txDmaFree;$/;"	m	class:NSGigE
txDmaLen	./dev/net/ns_gige.hh	/^    int   txDmaLen;$/;"	m	class:NSGigE
txDmaLen	./dev/net/sinic.hh	/^    int txDmaLen;$/;"	m	class:Sinic::Device
txDmaReadDone	./dev/net/ns_gige.cc	/^NSGigE::txDmaReadDone()$/;"	f	class:NSGigE
txDmaReadEvent	./dev/net/ns_gige.hh	/^    EventWrapper<NSGigE, &NSGigE::txDmaReadDone> txDmaReadEvent;$/;"	m	class:NSGigE
txDmaState	./dev/net/ns_gige.hh	/^    DmaState txDmaState;$/;"	m	class:NSGigE
txDmaWriteDone	./dev/net/ns_gige.cc	/^NSGigE::txDmaWriteDone()$/;"	f	class:NSGigE
txDmaWriteEvent	./dev/net/ns_gige.hh	/^    EventWrapper<NSGigE, &NSGigE::txDmaWriteDone> txDmaWriteEvent;$/;"	m	class:NSGigE
txDone	./dev/net/dist_etherlink.cc	/^DistEtherLink::TxLink::txDone()$/;"	f	class:DistEtherLink::TxLink
txDone	./dev/net/etherbus.cc	/^EtherBus::txDone()$/;"	f	class:EtherBus
txDone	./dev/net/etherlink.cc	/^EtherLink::Link::txDone()$/;"	f	class:EtherLink::Link
txEnable	./dev/net/ns_gige.hh	/^    bool txEnable;$/;"	m	class:NSGigE
txEnable	./dev/net/sinic.hh	/^    bool txEnable;$/;"	m	class:Sinic::Base
txEvent	./dev/net/ethertap.hh	/^    TxEvent txEvent;$/;"	m	class:EtherTap
txEvent	./dev/net/ns_gige.hh	/^    TxEvent txEvent;$/;"	m	class:NSGigE
txEvent	./dev/net/sinic.hh	/^    TxEvent txEvent;$/;"	m	class:Sinic::Device
txEventTransmit	./dev/net/ns_gige.hh	/^    void txEventTransmit()$/;"	f	class:NSGigE
txEventTransmit	./dev/net/sinic.hh	/^    void txEventTransmit()$/;"	f	class:Sinic::Device
txFifo	./dev/net/i8254xGBe.hh	/^    PacketFifo txFifo;$/;"	m	class:IGbE
txFifo	./dev/net/ns_gige.hh	/^    PacketFifo txFifo;$/;"	m	class:NSGigE
txFifo	./dev/net/sinic.hh	/^    PacketFifo txFifo;$/;"	m	class:Sinic::Device
txFifoBlock	./dev/net/ns_gige.hh	/^        txFifoBlock,$/;"	e	enum:NSGigE::TxState
txFifoBlock	./dev/net/sinic.hh	/^        txFifoBlock,$/;"	e	enum:Sinic::Device::TxState
txFifoTick	./dev/net/i8254xGBe.hh	/^    bool txFifoTick;$/;"	m	class:IGbE
txFragPtr	./dev/net/ns_gige.hh	/^    Addr txFragPtr;$/;"	m	class:NSGigE
txFragRead	./dev/net/ns_gige.hh	/^        txFragRead,$/;"	e	enum:NSGigE::TxState
txFull	./dev/net/sinic.hh	/^    bool txFull;$/;"	m	class:Sinic::Device
txHalt	./dev/net/ns_gige.hh	/^    bool txHalt;$/;"	m	class:NSGigE
txIdle	./dev/net/ns_gige.hh	/^        txIdle,$/;"	e	enum:NSGigE::TxState
txIdle	./dev/net/sinic.hh	/^        txIdle,$/;"	e	enum:Sinic::Device::TxState
txIntrEvent	./dev/uart8250.hh	/^    IntrEvent txIntrEvent;$/;"	m	class:Uart8250
txIpChecksums	./dev/net/etherdevice.hh	/^    Stats::Scalar txIpChecksums;$/;"	m	class:EtherDevice
txKick	./dev/net/ns_gige.cc	/^NSGigE::txKick()$/;"	f	class:NSGigE
txKick	./dev/net/sinic.cc	/^Device::txKick()$/;"	f	class:Sinic::Device
txKickEvent	./dev/net/ns_gige.hh	/^    TxKickEvent txKickEvent;$/;"	m	class:NSGigE
txKickTick	./dev/net/ns_gige.hh	/^    Tick txKickTick;$/;"	m	class:NSGigE
txKickTick	./dev/net/sinic.hh	/^    Tick txKickTick;$/;"	m	class:Sinic::Device
txLink	./dev/net/dist_etherlink.hh	/^        TxLink *txLink;$/;"	m	class:DistEtherLink::LocalIface
txLink	./dev/net/dist_etherlink.hh	/^    TxLink *txLink;$/;"	m	class:DistEtherLink
txList	./dev/net/sinic.hh	/^    VirtualList txList;$/;"	m	class:Sinic::Device
txPacket	./dev/net/i8254xGBe.hh	/^    EthPacketPtr txPacket;$/;"	m	class:IGbE
txPacket	./dev/net/ns_gige.hh	/^    EthPacketPtr txPacket;$/;"	m	class:NSGigE
txPacket	./dev/net/sinic.hh	/^    EthPacketPtr txPacket;$/;"	m	class:Sinic::Device
txPacketBufPtr	./dev/net/ns_gige.hh	/^    uint8_t *txPacketBufPtr;$/;"	m	class:NSGigE
txPacketBytes	./dev/net/sinic.hh	/^    int txPacketBytes;$/;"	m	class:Sinic::Device
txPacketOffset	./dev/net/sinic.hh	/^    int txPacketOffset;$/;"	m	class:Sinic::Device
txPacketRate	./dev/net/etherdevice.hh	/^    Stats::Formula txPacketRate;$/;"	m	class:EtherDevice
txPackets	./dev/net/etherdevice.hh	/^    Stats::Scalar txPackets;$/;"	m	class:EtherDevice
txQueue	./dev/net/etherlink.hh	/^        std::deque<std::pair<Tick, EthPacketPtr>> txQueue;$/;"	m	class:EtherLink::Link
txQueueEvent	./dev/net/etherlink.hh	/^        TxQueueEvent txQueueEvent;$/;"	m	class:EtherLink::Link
txReadDelay	./dev/net/i8254xGBe.hh	/^    Tick rxWriteDelay, txReadDelay;$/;"	m	class:IGbE
txReset	./dev/net/ns_gige.cc	/^NSGigE::txReset()$/;"	f	class:NSGigE
txState	./dev/net/ns_gige.hh	/^    TxState txState;$/;"	m	class:NSGigE
txState	./dev/net/sinic.hh	/^    TxState txState;$/;"	m	class:Sinic::Device
txStateMachine	./dev/net/i8254xGBe.cc	/^IGbE::txStateMachine()$/;"	f	class:IGbE
txTcpChecksums	./dev/net/etherdevice.hh	/^    Stats::Scalar txTcpChecksums;$/;"	m	class:EtherDevice
txTick	./dev/net/i8254xGBe.hh	/^    bool txTick;$/;"	m	class:IGbE
txUdpChecksums	./dev/net/etherdevice.hh	/^    Stats::Scalar txUdpChecksums;$/;"	m	class:EtherDevice
txUnique	./dev/net/sinic.hh	/^        Counter txUnique;$/;"	m	struct:Sinic::Device::VirtualReg
txUnique	./dev/net/sinic.hh	/^    Counter txUnique;$/;"	m	class:Sinic::Device
txWire	./dev/net/i8254xGBe.cc	/^IGbE::txWire()$/;"	f	class:IGbE
txXferLen	./dev/net/ns_gige.hh	/^    uint32_t txXferLen;$/;"	m	class:NSGigE
tx_delay	./dev/net/Ethernet.py	/^    tx_delay = Param.Latency('1us', "Transmit Delay")$/;"	v	class:EtherDevBase
tx_desc_cache_size	./dev/net/Ethernet.py	/^    tx_desc_cache_size = Param.Int(64,$/;"	v	class:IGbE
tx_fifo_high_mark	./dev/net/Ethernet.py	/^    tx_fifo_high_mark = Param.MemorySize('384kB', "tx fifo high threshold")$/;"	v	class:Sinic
tx_fifo_size	./dev/net/Ethernet.py	/^    tx_fifo_size = Param.MemorySize('384kB', "Size of the tx FIFO")$/;"	v	class:IGbE
tx_fifo_size	./dev/net/Ethernet.py	/^    tx_fifo_size = Param.MemorySize('512kB', "max size of tx fifo")$/;"	v	class:EtherDevBase
tx_fifo_threshold	./dev/net/Ethernet.py	/^    tx_fifo_threshold = Param.MemorySize('128kB', "tx fifo low threshold")$/;"	v	class:Sinic
tx_max_copy	./dev/net/Ethernet.py	/^    tx_max_copy = Param.MemorySize('16kB', "tx max copy")$/;"	v	class:Sinic
tx_read_delay	./dev/net/Ethernet.py	/^    tx_read_delay = Param.Latency('0ns', "delay after tx dma read")$/;"	v	class:IGbE
tx_thread	./dev/net/Ethernet.py	/^    tx_thread = Param.Bool(False, "dedicated kernel threads for receive")$/;"	v	class:EtherDevBase
txbuf	./dev/terminal.hh	/^    CircleBuf<char> txbuf;$/;"	m	class:Terminal
txbusy	./dev/arm/kmi.hh	/^        Bitfield<5> txbusy;$/;"	m	class:Pl050
txcfg	./dev/net/ns_gige.hh	/^    uint32_t    txcfg;$/;"	m	struct:dp_regs
txdca_ctl	./dev/net/i8254xGBe_defs.hh	/^    TXDCA_CTL txdca_ctl;$/;"	m	struct:iGbReg::Regs
txdctl	./dev/net/i8254xGBe_defs.hh	/^    TXDCTL txdctl;$/;"	m	struct:iGbReg::Regs
txdp	./dev/net/ns_gige.hh	/^    uint32_t    txdp;$/;"	m	struct:dp_regs
txdp_hi	./dev/net/ns_gige.hh	/^    uint32_t    txdp_hi;$/;"	m	struct:dp_regs
txempty	./dev/arm/kmi.hh	/^        Bitfield<6> txempty;$/;"	m	class:Pl050
txint	./dev/net/etherlink.hh	/^        Interface *txint;$/;"	m	class:EtherLink::Link
txint_enable	./dev/arm/kmi.hh	/^        Bitfield<3> txint_enable;$/;"	m	class:Pl050
txlink	./dev/net/etherlink.hh	/^        Link *txlink;$/;"	m	class:EtherLink::Interface
txsm	./dev/net/i8254xGBe_defs.hh	/^inline bool txsm(TxDesc *d)  { return isData(d) && bits(d->d2, 41,41); }$/;"	f	namespace:iGbReg::TxdOp
type	./arch/alpha/AlphaISA.py	/^    type = 'AlphaISA'$/;"	v	class:AlphaISA
type	./arch/alpha/AlphaInterrupts.py	/^    type = 'AlphaInterrupts'$/;"	v	class:AlphaInterrupts
type	./arch/alpha/AlphaSystem.py	/^    type = 'AlphaSystem'$/;"	v	class:AlphaSystem
type	./arch/alpha/AlphaSystem.py	/^    type = 'FreebsdAlphaSystem'$/;"	v	class:FreebsdAlphaSystem
type	./arch/alpha/AlphaSystem.py	/^    type = 'LinuxAlphaSystem'$/;"	v	class:LinuxAlphaSystem
type	./arch/alpha/AlphaSystem.py	/^    type = 'Tru64AlphaSystem'$/;"	v	class:Tru64AlphaSystem
type	./arch/alpha/AlphaTLB.py	/^    type = 'AlphaTLB'$/;"	v	class:AlphaTLB
type	./arch/arm/ArmISA.py	/^    type = 'ArmISA'$/;"	v	class:ArmISA
type	./arch/arm/ArmInterrupts.py	/^    type = 'ArmInterrupts'$/;"	v	class:ArmInterrupts
type	./arch/arm/ArmNativeTrace.py	/^    type = 'ArmNativeTrace'$/;"	v	class:ArmNativeTrace
type	./arch/arm/ArmPMU.py	/^    type = 'ArmPMU'$/;"	v	class:ArmPMU
type	./arch/arm/ArmSystem.py	/^    type = 'ArmSystem'$/;"	v	class:ArmSystem
type	./arch/arm/ArmSystem.py	/^    type = 'FreebsdArmSystem'$/;"	v	class:FreebsdArmSystem
type	./arch/arm/ArmSystem.py	/^    type = 'GenericArmSystem'$/;"	v	class:GenericArmSystem
type	./arch/arm/ArmSystem.py	/^    type = 'LinuxArmSystem'$/;"	v	class:LinuxArmSystem
type	./arch/arm/ArmTLB.py	/^    type = 'ArmStage2MMU'$/;"	v	class:ArmStage2MMU
type	./arch/arm/ArmTLB.py	/^    type = 'ArmTLB'$/;"	v	class:ArmTLB
type	./arch/arm/ArmTLB.py	/^    type = 'ArmTableWalker'$/;"	v	class:ArmTableWalker
type	./arch/arm/insts/macromem.hh	/^    ArmExtendType type;$/;"	m	class:ArmISA::MicroIntRegXOp
type	./arch/arm/insts/mem64.hh	/^    ArmExtendType type;$/;"	m	class:ArmISA::MemoryReg64
type	./arch/arm/kvm/ArmKvmCPU.py	/^    type = 'ArmKvmCPU'$/;"	v	class:ArmKvmCPU
type	./arch/arm/kvm/ArmV8KvmCPU.py	/^    type = 'ArmV8KvmCPU'$/;"	v	class:ArmV8KvmCPU
type	./arch/arm/kvm/BaseArmKvmCPU.py	/^    type = 'BaseArmKvmCPU'$/;"	v	class:BaseArmKvmCPU
type	./arch/arm/kvm/KvmGic.py	/^    type = 'KvmGic'$/;"	v	class:KvmGic
type	./arch/arm/table_walker.hh	/^        EntryType type() const$/;"	f	class:ArmISA::TableWalker::L1Descriptor
type	./arch/arm/table_walker.hh	/^        EntryType type() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
type	./arch/generic/BaseTLB.py	/^    type = 'BaseTLB'$/;"	v	class:BaseTLB
type	./arch/mips/MipsISA.py	/^    type = 'MipsISA'$/;"	v	class:MipsISA
type	./arch/mips/MipsInterrupts.py	/^    type = 'MipsInterrupts'$/;"	v	class:MipsInterrupts
type	./arch/mips/MipsSystem.py	/^    type = 'BareIronMipsSystem'$/;"	v	class:BareIronMipsSystem
type	./arch/mips/MipsSystem.py	/^    type = 'LinuxMipsSystem'$/;"	v	class:LinuxMipsSystem
type	./arch/mips/MipsSystem.py	/^    type = 'MipsSystem'$/;"	v	class:MipsSystem
type	./arch/mips/MipsTLB.py	/^    type = 'MipsTLB'$/;"	v	class:MipsTLB
type	./arch/power/PowerISA.py	/^    type = 'PowerISA'$/;"	v	class:PowerISA
type	./arch/power/PowerInterrupts.py	/^    type = 'PowerInterrupts'$/;"	v	class:PowerInterrupts
type	./arch/power/PowerTLB.py	/^    type = 'PowerTLB'$/;"	v	class:PowerTLB
type	./arch/sparc/SparcISA.py	/^    type = 'SparcISA'$/;"	v	class:SparcISA
type	./arch/sparc/SparcInterrupts.py	/^    type = 'SparcInterrupts'$/;"	v	class:SparcInterrupts
type	./arch/sparc/SparcNativeTrace.py	/^    type = 'SparcNativeTrace'$/;"	v	class:SparcNativeTrace
type	./arch/sparc/SparcSystem.py	/^    type = 'SparcSystem'$/;"	v	class:SparcSystem
type	./arch/sparc/SparcTLB.py	/^    type = 'SparcTLB'$/;"	v	class:SparcTLB
type	./arch/sparc/pagetable.hh	/^    EntryType type;$/;"	m	class:SparcISA::PageTableEntry
type	./arch/x86/X86ISA.py	/^    type = 'X86ISA'$/;"	v	class:X86ISA
type	./arch/x86/X86LocalApic.py	/^    type = 'X86LocalApic'$/;"	v	class:X86LocalApic
type	./arch/x86/X86NativeTrace.py	/^    type = 'X86NativeTrace'$/;"	v	class:X86NativeTrace
type	./arch/x86/X86System.py	/^    type = 'LinuxX86System'$/;"	v	class:LinuxX86System
type	./arch/x86/X86System.py	/^    type = 'X86System'$/;"	v	class:X86System
type	./arch/x86/X86TLB.py	/^    type = 'X86PagetableWalker'$/;"	v	class:X86PagetableWalker
type	./arch/x86/X86TLB.py	/^    type = 'X86TLB'$/;"	v	class:X86TLB
type	./arch/x86/bios/ACPI.py	/^    type = 'X86ACPIRSDP'$/;"	v	class:X86ACPIRSDP
type	./arch/x86/bios/ACPI.py	/^    type = 'X86ACPIRSDT'$/;"	v	class:X86ACPIRSDT
type	./arch/x86/bios/ACPI.py	/^    type = 'X86ACPISysDescTable'$/;"	v	class:X86ACPISysDescTable
type	./arch/x86/bios/ACPI.py	/^    type = 'X86ACPIXSDT'$/;"	v	class:X86ACPIXSDT
type	./arch/x86/bios/E820.py	/^    type = 'X86E820Entry'$/;"	v	class:X86E820Entry
type	./arch/x86/bios/E820.py	/^    type = 'X86E820Table'$/;"	v	class:X86E820Table
type	./arch/x86/bios/IntelMP.py	/^    type = 'X86IntelMPAddrSpaceMapping'$/;"	v	class:X86IntelMPAddrSpaceMapping
type	./arch/x86/bios/IntelMP.py	/^    type = 'X86IntelMPBaseConfigEntry'$/;"	v	class:X86IntelMPBaseConfigEntry
type	./arch/x86/bios/IntelMP.py	/^    type = 'X86IntelMPBus'$/;"	v	class:X86IntelMPBus
type	./arch/x86/bios/IntelMP.py	/^    type = 'X86IntelMPBusHierarchy'$/;"	v	class:X86IntelMPBusHierarchy
type	./arch/x86/bios/IntelMP.py	/^    type = 'X86IntelMPCompatAddrSpaceMod'$/;"	v	class:X86IntelMPCompatAddrSpaceMod
type	./arch/x86/bios/IntelMP.py	/^    type = 'X86IntelMPConfigTable'$/;"	v	class:X86IntelMPConfigTable
type	./arch/x86/bios/IntelMP.py	/^    type = 'X86IntelMPExtConfigEntry'$/;"	v	class:X86IntelMPExtConfigEntry
type	./arch/x86/bios/IntelMP.py	/^    type = 'X86IntelMPFloatingPointer'$/;"	v	class:X86IntelMPFloatingPointer
type	./arch/x86/bios/IntelMP.py	/^    type = 'X86IntelMPIOAPIC'$/;"	v	class:X86IntelMPIOAPIC
type	./arch/x86/bios/IntelMP.py	/^    type = 'X86IntelMPIOIntAssignment'$/;"	v	class:X86IntelMPIOIntAssignment
type	./arch/x86/bios/IntelMP.py	/^    type = 'X86IntelMPLocalIntAssignment'$/;"	v	class:X86IntelMPLocalIntAssignment
type	./arch/x86/bios/IntelMP.py	/^    type = 'X86IntelMPProcessor'$/;"	v	class:X86IntelMPProcessor
type	./arch/x86/bios/SMBios.py	/^    type = 'X86SMBiosBiosInformation'$/;"	v	class:X86SMBiosBiosInformation
type	./arch/x86/bios/SMBios.py	/^    type = 'X86SMBiosSMBiosStructure'$/;"	v	class:X86SMBiosSMBiosStructure
type	./arch/x86/bios/SMBios.py	/^    type = 'X86SMBiosSMBiosTable'$/;"	v	class:X86SMBiosSMBiosTable
type	./arch/x86/bios/e820.hh	/^        uint32_t type;$/;"	m	class:X86ISA::E820Entry
type	./arch/x86/bios/intelmp.hh	/^    uint8_t type;$/;"	m	class:X86ISA::IntelMP::BaseConfigEntry
type	./arch/x86/bios/intelmp.hh	/^    uint8_t type;$/;"	m	class:X86ISA::IntelMP::ExtConfigEntry
type	./arch/x86/bios/smbios.hh	/^    uint8_t type;$/;"	m	class:X86ISA::SMBios::SMBiosStructure
type	./arch/x86/regs/misc.hh	/^        Bitfield<11, 8> type;$/;"	m	namespace:X86ISA
type	./arch/x86/regs/misc.hh	/^        Bitfield<43, 40> type;$/;"	m	namespace:X86ISA
type	./arch/x86/regs/misc.hh	/^        Bitfield<7, 0> type; \/\/ Default memory type$/;"	m	namespace:X86ISA
type	./arch/x86/regs/misc.hh	/^        Bitfield<7, 0> type; \/\/ Default type$/;"	m	namespace:X86ISA
type	./arch/x86/types.hh	/^            OpcodeType type;$/;"	m	struct:X86ISA::ExtMachInst::__anon64
type	./base/CPA.py	/^    type = 'CPA'$/;"	v	class:CPA
type	./base/inet.hh	/^    uint16_t type() const {$/;"	f	struct:Net::EthHdr
type	./base/inet.hh	/^    uint8_t type() const { return opt_type; }$/;"	f	struct:Net::IpOpt
type	./base/inet.hh	/^    uint8_t type() const { return opt_type; }$/;"	f	struct:Net::TcpOpt
type	./base/inet.hh	/^    uint8_t type;$/;"	m	struct:Net::ip6_opt_dstopts
type	./base/inet.hh	/^    uint8_t type;$/;"	m	struct:Net::ip6_opt_routing_type2
type	./base/remote_gdb.hh	/^        void type(int t) { _type = t; }$/;"	f	class:BaseRemoteGDB::TrapEvent
type	./base/statistics.hh	/^    const DistType type;$/;"	m	struct:Stats::DistParams
type	./base/stats/info.hh	/^    DistType type;$/;"	m	struct:Stats::DistData
type	./base/vnc/Vnc.py	/^    type = 'VncInput'$/;"	v	class:VncInput
type	./base/vnc/Vnc.py	/^    type = 'VncServer'$/;"	v	class:VncServer
type	./base/vnc/vncinput.hh	/^        uint8_t type;$/;"	m	struct:VncInput::ClientCutTextMessage
type	./base/vnc/vncinput.hh	/^        uint8_t type;$/;"	m	struct:VncInput::FrameBufferUpdateReq
type	./base/vnc/vncinput.hh	/^        uint8_t type;$/;"	m	struct:VncInput::KeyEventMessage
type	./base/vnc/vncinput.hh	/^        uint8_t type;$/;"	m	struct:VncInput::PixelEncodingsMessage
type	./base/vnc/vncinput.hh	/^        uint8_t type;$/;"	m	struct:VncInput::PixelFormatMessage
type	./base/vnc/vncinput.hh	/^        uint8_t type;$/;"	m	struct:VncInput::PointerEventMessage
type	./base/vnc/vncserver.hh	/^        uint8_t type;$/;"	m	struct:VncServer::FrameBufferUpdate
type	./base/vnc/vncserver.hh	/^        uint8_t type;$/;"	m	struct:VncServer::ServerCutText
type	./cpu/BaseCPU.py	/^    type = 'BaseCPU'$/;"	v	class:BaseCPU
type	./cpu/CPUTracers.py	/^    type = 'ExeTracer'$/;"	v	class:ExeTracer
type	./cpu/CPUTracers.py	/^    type = 'IntelTrace'$/;"	v	class:IntelTrace
type	./cpu/CPUTracers.py	/^    type = 'NativeTrace'$/;"	v	class:NativeTrace
type	./cpu/CheckerCPU.py	/^    type = 'CheckerCPU'$/;"	v	class:CheckerCPU
type	./cpu/DummyChecker.py	/^    type = 'DummyChecker'$/;"	v	class:DummyChecker
type	./cpu/FuncUnit.py	/^    type = 'FUDesc'$/;"	v	class:FUDesc
type	./cpu/FuncUnit.py	/^    type = 'OpDesc'$/;"	v	class:OpDesc
type	./cpu/InstPBTrace.py	/^    type = 'InstPBTrace'$/;"	v	class:InstPBTrace
type	./cpu/IntrControl.py	/^    type = 'IntrControl'$/;"	v	class:IntrControl
type	./cpu/TimingExpr.py	/^    type = 'TimingExpr'$/;"	v	class:TimingExpr
type	./cpu/TimingExpr.py	/^    type = 'TimingExprBin'$/;"	v	class:TimingExprBin
type	./cpu/TimingExpr.py	/^    type = 'TimingExprIf'$/;"	v	class:TimingExprIf
type	./cpu/TimingExpr.py	/^    type = 'TimingExprLet'$/;"	v	class:TimingExprLet
type	./cpu/TimingExpr.py	/^    type = 'TimingExprLiteral'$/;"	v	class:TimingExprLiteral
type	./cpu/TimingExpr.py	/^    type = 'TimingExprReadIntReg'$/;"	v	class:TimingExprReadIntReg
type	./cpu/TimingExpr.py	/^    type = 'TimingExprRef'$/;"	v	class:TimingExprRef
type	./cpu/TimingExpr.py	/^    type = 'TimingExprSrcReg'$/;"	v	class:TimingExprSrcReg
type	./cpu/TimingExpr.py	/^    type = 'TimingExprUn'$/;"	v	class:TimingExprUn
type	./cpu/kvm/BaseKvmCPU.py	/^    type = 'BaseKvmCPU'$/;"	v	class:BaseKvmCPU
type	./cpu/kvm/KvmVM.py	/^    type = 'KvmVM'$/;"	v	class:KvmVM
type	./cpu/kvm/X86KvmCPU.py	/^    type = 'X86KvmCPU'$/;"	v	class:X86KvmCPU
type	./cpu/minor/MinorCPU.py	/^    type = 'MinorCPU'$/;"	v	class:MinorCPU
type	./cpu/minor/MinorCPU.py	/^    type = 'MinorFU'$/;"	v	class:MinorFU
type	./cpu/minor/MinorCPU.py	/^    type = 'MinorFUPool'$/;"	v	class:MinorFUPool
type	./cpu/minor/MinorCPU.py	/^    type = 'MinorFUTiming'$/;"	v	class:MinorFUTiming
type	./cpu/minor/MinorCPU.py	/^    type = 'MinorOpClass'$/;"	v	class:MinorOpClass
type	./cpu/minor/MinorCPU.py	/^    type = 'MinorOpClassSet'$/;"	v	class:MinorOpClassSet
type	./cpu/o3/FUPool.py	/^    type = 'FUPool'$/;"	v	class:FUPool
type	./cpu/o3/O3CPU.py	/^    type = 'DerivO3CPU'$/;"	v	class:DerivO3CPU
type	./cpu/o3/O3Checker.py	/^    type = 'O3Checker'$/;"	v	class:O3Checker
type	./cpu/o3/probe/ElasticTrace.py	/^    type = 'ElasticTrace'$/;"	v	class:ElasticTrace
type	./cpu/o3/probe/SimpleTrace.py	/^    type = 'SimpleTrace'$/;"	v	class:SimpleTrace
type	./cpu/o3/probe/elastic_trace.hh	/^        RecordType type;$/;"	m	struct:ElasticTrace::TraceInfo
type	./cpu/pred/BranchPredictor.py	/^    type = 'BiModeBP'$/;"	v	class:BiModeBP
type	./cpu/pred/BranchPredictor.py	/^    type = 'BranchPredictor'$/;"	v	class:BranchPredictor
type	./cpu/pred/BranchPredictor.py	/^    type = 'LocalBP'$/;"	v	class:LocalBP
type	./cpu/pred/BranchPredictor.py	/^    type = 'TournamentBP'$/;"	v	class:TournamentBP
type	./cpu/simple/AtomicSimpleCPU.py	/^    type = 'AtomicSimpleCPU'$/;"	v	class:AtomicSimpleCPU
type	./cpu/simple/BaseSimpleCPU.py	/^    type = 'BaseSimpleCPU'$/;"	v	class:BaseSimpleCPU
type	./cpu/simple/TimingSimpleCPU.py	/^    type = 'TimingSimpleCPU'$/;"	v	class:TimingSimpleCPU
type	./cpu/simple/probes/SimPoint.py	/^    type = 'SimPoint'$/;"	v	class:SimPoint
type	./cpu/testers/directedtest/RubyDirectedTester.py	/^    type = 'DirectedGenerator'$/;"	v	class:DirectedGenerator
type	./cpu/testers/directedtest/RubyDirectedTester.py	/^    type = 'InvalidateGenerator'$/;"	v	class:InvalidateGenerator
type	./cpu/testers/directedtest/RubyDirectedTester.py	/^    type = 'RubyDirectedTester'$/;"	v	class:RubyDirectedTester
type	./cpu/testers/directedtest/RubyDirectedTester.py	/^    type = 'SeriesRequestGenerator'$/;"	v	class:SeriesRequestGenerator
type	./cpu/testers/memtest/MemTest.py	/^    type = 'MemTest'$/;"	v	class:MemTest
type	./cpu/testers/networktest/NetworkTest.py	/^    type = 'NetworkTest'$/;"	v	class:NetworkTest
type	./cpu/testers/rubytest/RubyTester.py	/^    type = 'RubyTester'$/;"	v	class:RubyTester
type	./cpu/testers/traffic_gen/TrafficGen.py	/^    type = 'TrafficGen'$/;"	v	class:TrafficGen
type	./cpu/trace/TraceCPU.py	/^    type = 'TraceCPU'$/;"	v	class:TraceCPU
type	./cpu/trace/trace_cpu.hh	/^            RecordType type;$/;"	m	class:TraceCPU::ElasticDataGen::GraphNode
type	./dev/BadDevice.py	/^    type = 'BadDevice'$/;"	v	class:BadDevice
type	./dev/Device.py	/^    type = 'BasicPioDevice'$/;"	v	class:BasicPioDevice
type	./dev/Device.py	/^    type = 'DmaDevice'$/;"	v	class:DmaDevice
type	./dev/Device.py	/^    type = 'IsaFake'$/;"	v	class:IsaFake
type	./dev/Device.py	/^    type = 'PioDevice'$/;"	v	class:PioDevice
type	./dev/Platform.py	/^    type = 'Platform'$/;"	v	class:Platform
type	./dev/Terminal.py	/^    type = 'Terminal'$/;"	v	class:Terminal
type	./dev/Uart.py	/^    type = 'Uart'$/;"	v	class:Uart
type	./dev/Uart.py	/^    type = 'Uart8250'$/;"	v	class:Uart8250
type	./dev/alpha/AlphaBackdoor.py	/^    type = 'AlphaBackdoor'$/;"	v	class:AlphaBackdoor
type	./dev/alpha/Tsunami.py	/^    type = 'Tsunami'$/;"	v	class:Tsunami
type	./dev/alpha/Tsunami.py	/^    type = 'TsunamiCChip'$/;"	v	class:TsunamiCChip
type	./dev/alpha/Tsunami.py	/^    type = 'TsunamiIO'$/;"	v	class:TsunamiIO
type	./dev/alpha/Tsunami.py	/^    type = 'TsunamiPChip'$/;"	v	class:TsunamiPChip
type	./dev/arm/AbstractNVM.py	/^    type = 'AbstractNVM'$/;"	v	class:AbstractNVM
type	./dev/arm/EnergyCtrl.py	/^    type = 'EnergyCtrl'$/;"	v	class:EnergyCtrl
type	./dev/arm/FlashDevice.py	/^    type = 'FlashDevice'$/;"	v	class:FlashDevice
type	./dev/arm/Gic.py	/^    type = 'BaseGic'$/;"	v	class:BaseGic
type	./dev/arm/Gic.py	/^    type = 'Gicv2m'$/;"	v	class:Gicv2m
type	./dev/arm/Gic.py	/^    type = 'Gicv2mFrame'$/;"	v	class:Gicv2mFrame
type	./dev/arm/Gic.py	/^    type = 'Pl390'$/;"	v	class:Pl390
type	./dev/arm/NoMali.py	/^    type = 'NoMaliGpu'$/;"	v	class:NoMaliGpu
type	./dev/arm/RealView.py	/^    type = 'A9SCU'$/;"	v	class:A9SCU
type	./dev/arm/RealView.py	/^    type = 'AmbaDmaDevice'$/;"	v	class:AmbaDmaDevice
type	./dev/arm/RealView.py	/^    type = 'AmbaFake'$/;"	v	class:AmbaFake
type	./dev/arm/RealView.py	/^    type = 'AmbaIntDevice'$/;"	v	class:AmbaIntDevice
type	./dev/arm/RealView.py	/^    type = 'AmbaPioDevice'$/;"	v	class:AmbaPioDevice
type	./dev/arm/RealView.py	/^    type = 'CpuLocalTimer'$/;"	v	class:CpuLocalTimer
type	./dev/arm/RealView.py	/^    type = 'GenericTimer'$/;"	v	class:GenericTimer
type	./dev/arm/RealView.py	/^    type = 'GenericTimerMem'$/;"	v	class:GenericTimerMem
type	./dev/arm/RealView.py	/^    type = 'HDLcd'$/;"	v	class:HDLcd
type	./dev/arm/RealView.py	/^    type = 'PL031'$/;"	v	class:PL031
type	./dev/arm/RealView.py	/^    type = 'Pl011'$/;"	v	class:Pl011
type	./dev/arm/RealView.py	/^    type = 'Pl050'$/;"	v	class:Pl050
type	./dev/arm/RealView.py	/^    type = 'Pl111'$/;"	v	class:Pl111
type	./dev/arm/RealView.py	/^    type = 'RealView'$/;"	v	class:RealView
type	./dev/arm/RealView.py	/^    type = 'RealViewCtrl'$/;"	v	class:RealViewCtrl
type	./dev/arm/RealView.py	/^    type = 'RealViewOsc'$/;"	v	class:RealViewOsc
type	./dev/arm/RealView.py	/^    type = 'Sp804'$/;"	v	class:Sp804
type	./dev/arm/RealView.py	/^    type = 'VGic'$/;"	v	class:VGic
type	./dev/arm/UFSHostDevice.py	/^    type = 'UFSHostDevice'$/;"	v	class:UFSHostDevice
type	./dev/arm/kmi.hh	/^        Bitfield<5> type;$/;"	m	class:Pl050
type	./dev/i2c/I2C.py	/^    type = 'I2CBus'$/;"	v	class:I2CBus
type	./dev/i2c/I2C.py	/^    type = 'I2CDevice'$/;"	v	class:I2CDevice
type	./dev/mips/Malta.py	/^    type = 'Malta'$/;"	v	class:Malta
type	./dev/mips/Malta.py	/^    type = 'MaltaCChip'$/;"	v	class:MaltaCChip
type	./dev/mips/Malta.py	/^    type = 'MaltaIO'$/;"	v	class:MaltaIO
type	./dev/net/Ethernet.py	/^    type = 'DistEtherLink'$/;"	v	class:DistEtherLink
type	./dev/net/Ethernet.py	/^    type = 'EtherBus'$/;"	v	class:EtherBus
type	./dev/net/Ethernet.py	/^    type = 'EtherDevBase'$/;"	v	class:EtherDevBase
type	./dev/net/Ethernet.py	/^    type = 'EtherDevice'$/;"	v	class:EtherDevice
type	./dev/net/Ethernet.py	/^    type = 'EtherDump'$/;"	v	class:EtherDump
type	./dev/net/Ethernet.py	/^    type = 'EtherLink'$/;"	v	class:EtherLink
type	./dev/net/Ethernet.py	/^    type = 'EtherObject'$/;"	v	class:EtherObject
type	./dev/net/Ethernet.py	/^    type = 'EtherTap'$/;"	v	class:EtherTap
type	./dev/net/Ethernet.py	/^    type = 'IGbE'$/;"	v	class:IGbE
type	./dev/net/Ethernet.py	/^    type = 'NSGigE'$/;"	v	class:NSGigE
type	./dev/net/Ethernet.py	/^    type = 'Sinic'$/;"	v	class:Sinic
type	./dev/pci/CopyEngine.py	/^    type = 'CopyEngine'$/;"	v	class:CopyEngine
type	./dev/pci/PciDevice.py	/^    type = 'PciDevice'$/;"	v	class:PciDevice
type	./dev/pci/PciHost.py	/^    type = 'GenericPciHost'$/;"	v	class:GenericPciHost
type	./dev/pci/PciHost.py	/^    type = 'PciHost'$/;"	v	class:PciHost
type	./dev/sparc/T1000.py	/^    type = 'DumbTOD'$/;"	v	class:DumbTOD
type	./dev/sparc/T1000.py	/^    type = 'Iob'$/;"	v	class:Iob
type	./dev/sparc/T1000.py	/^    type = 'MmDisk'$/;"	v	class:MmDisk
type	./dev/sparc/T1000.py	/^    type = 'T1000'$/;"	v	class:T1000
type	./dev/storage/DiskImage.py	/^    type = 'CowDiskImage'$/;"	v	class:CowDiskImage
type	./dev/storage/DiskImage.py	/^    type = 'DiskImage'$/;"	v	class:DiskImage
type	./dev/storage/DiskImage.py	/^    type = 'RawDiskImage'$/;"	v	class:RawDiskImage
type	./dev/storage/Ide.py	/^    type = 'IdeController'$/;"	v	class:IdeController
type	./dev/storage/Ide.py	/^    type = 'IdeDisk'$/;"	v	class:IdeDisk
type	./dev/storage/SimpleDisk.py	/^    type = 'SimpleDisk'$/;"	v	class:SimpleDisk
type	./dev/virtio/VirtIO.py	/^    type = 'PciVirtIO'$/;"	v	class:PciVirtIO
type	./dev/virtio/VirtIO.py	/^    type = 'VirtIODeviceBase'$/;"	v	class:VirtIODeviceBase
type	./dev/virtio/VirtIO9P.py	/^    type = 'VirtIO9PBase'$/;"	v	class:VirtIO9PBase
type	./dev/virtio/VirtIO9P.py	/^    type = 'VirtIO9PDiod'$/;"	v	class:VirtIO9PDiod
type	./dev/virtio/VirtIO9P.py	/^    type = 'VirtIO9PProxy'$/;"	v	class:VirtIO9PProxy
type	./dev/virtio/VirtIO9P.py	/^    type = 'VirtIO9PSocket'$/;"	v	class:VirtIO9PSocket
type	./dev/virtio/VirtIOBlock.py	/^    type = 'VirtIOBlock'$/;"	v	class:VirtIOBlock
type	./dev/virtio/VirtIOConsole.py	/^    type = 'VirtIOConsole'$/;"	v	class:VirtIOConsole
type	./dev/virtio/block.hh	/^        RequestType type;$/;"	m	struct:VirtIOBlock::BlkRequest
type	./dev/virtio/fs9p.cc	/^    P9MsgType type;$/;"	m	struct:P9MsgInfo	file:
type	./dev/virtio/fs9p.hh	/^    P9MsgType type;$/;"	m	struct:P9MsgHeader
type	./dev/x86/Cmos.py	/^    type = 'Cmos'$/;"	v	class:Cmos
type	./dev/x86/I8042.py	/^    type = 'I8042'$/;"	v	class:I8042
type	./dev/x86/I82094AA.py	/^    type = 'I82094AA'$/;"	v	class:I82094AA
type	./dev/x86/I8237.py	/^    type = 'I8237'$/;"	v	class:I8237
type	./dev/x86/I8254.py	/^    type = 'I8254'$/;"	v	class:I8254
type	./dev/x86/I8259.py	/^    type = 'I8259'$/;"	v	class:I8259
type	./dev/x86/Pc.py	/^    type = 'Pc'$/;"	v	class:Pc
type	./dev/x86/PcSpeaker.py	/^    type = 'PcSpeaker'$/;"	v	class:PcSpeaker
type	./dev/x86/SouthBridge.py	/^    type = 'SouthBridge'$/;"	v	class:SouthBridge
type	./dev/x86/X86IntPin.py	/^    type = 'X86IntLine'$/;"	v	class:X86IntLine
type	./dev/x86/X86IntPin.py	/^    type = 'X86IntSinkPin'$/;"	v	class:X86IntSinkPin
type	./dev/x86/X86IntPin.py	/^    type = 'X86IntSourcePin'$/;"	v	class:X86IntSourcePin
type	./kern/tru64/tru64.hh	/^        int type;       \/\/!< type$/;"	m	struct:Tru64::nxm_thread_attr
type	./mem/AbstractMemory.py	/^    type = 'AbstractMemory'$/;"	v	class:AbstractMemory
type	./mem/AddrMapper.py	/^    type = 'AddrMapper'$/;"	v	class:AddrMapper
type	./mem/AddrMapper.py	/^    type = 'RangeAddrMapper'$/;"	v	class:RangeAddrMapper
type	./mem/Bridge.py	/^    type = 'Bridge'$/;"	v	class:Bridge
type	./mem/CommMonitor.py	/^    type = 'CommMonitor'$/;"	v	class:CommMonitor
type	./mem/DRAMCtrl.py	/^    type = 'DRAMCtrl'$/;"	v	class:DRAMCtrl
type	./mem/DRAMSim2.py	/^    type = 'DRAMSim2'$/;"	v	class:DRAMSim2
type	./mem/ExternalMaster.py	/^    type = 'ExternalMaster'$/;"	v	class:ExternalMaster
type	./mem/ExternalSlave.py	/^    type = 'ExternalSlave'$/;"	v	class:ExternalSlave
type	./mem/HMCController.py	/^        type = 'HMCController'$/;"	v	class:HMCController
type	./mem/MemChecker.py	/^    type = 'MemChecker'$/;"	v	class:MemChecker
type	./mem/MemChecker.py	/^    type = 'MemCheckerMonitor'$/;"	v	class:MemCheckerMonitor
type	./mem/MemObject.py	/^    type = 'MemObject'$/;"	v	class:MemObject
type	./mem/SerialLink.py	/^    type = 'SerialLink'$/;"	v	class:SerialLink
type	./mem/SimpleMemory.py	/^    type = 'SimpleMemory'$/;"	v	class:SimpleMemory
type	./mem/XBar.py	/^    type = 'BaseXBar'$/;"	v	class:BaseXBar
type	./mem/XBar.py	/^    type = 'CoherentXBar'$/;"	v	class:CoherentXBar
type	./mem/XBar.py	/^    type = 'NoncoherentXBar'$/;"	v	class:NoncoherentXBar
type	./mem/XBar.py	/^    type = 'SnoopFilter'$/;"	v	class:SnoopFilter
type	./mem/cache/Cache.py	/^    type = 'BaseCache'$/;"	v	class:BaseCache
type	./mem/cache/Cache.py	/^    type = 'Cache'$/;"	v	class:Cache
type	./mem/cache/prefetch/Prefetcher.py	/^    type = "QueuedPrefetcher"$/;"	v	class:QueuedPrefetcher
type	./mem/cache/prefetch/Prefetcher.py	/^    type = 'BasePrefetcher'$/;"	v	class:BasePrefetcher
type	./mem/cache/prefetch/Prefetcher.py	/^    type = 'StridePrefetcher'$/;"	v	class:StridePrefetcher
type	./mem/cache/prefetch/Prefetcher.py	/^    type = 'TaggedPrefetcher'$/;"	v	class:TaggedPrefetcher
type	./mem/cache/tags/Tags.py	/^    type = 'BaseSetAssoc'$/;"	v	class:BaseSetAssoc
type	./mem/cache/tags/Tags.py	/^    type = 'BaseTags'$/;"	v	class:BaseTags
type	./mem/cache/tags/Tags.py	/^    type = 'FALRU'$/;"	v	class:FALRU
type	./mem/cache/tags/Tags.py	/^    type = 'LRU'$/;"	v	class:LRU
type	./mem/cache/tags/Tags.py	/^    type = 'RandomRepl'$/;"	v	class:RandomRepl
type	./mem/probes/BaseMemProbe.py	/^    type = 'BaseMemProbe'$/;"	v	class:BaseMemProbe
type	./mem/probes/MemTraceProbe.py	/^    type = 'MemTraceProbe'$/;"	v	class:MemTraceProbe
type	./mem/probes/StackDistProbe.py	/^    type = 'StackDistProbe'$/;"	v	class:StackDistProbe
type	./mem/ruby/common/MachineID.hh	/^    MachineType type;$/;"	m	struct:MachineID
type	./mem/ruby/network/BasicLink.py	/^    type = 'BasicExtLink'$/;"	v	class:BasicExtLink
type	./mem/ruby/network/BasicLink.py	/^    type = 'BasicIntLink'$/;"	v	class:BasicIntLink
type	./mem/ruby/network/BasicLink.py	/^    type = 'BasicLink'$/;"	v	class:BasicLink
type	./mem/ruby/network/BasicRouter.py	/^    type = 'BasicRouter'$/;"	v	class:BasicRouter
type	./mem/ruby/network/MessageBuffer.py	/^    type = 'MessageBuffer'$/;"	v	class:MessageBuffer
type	./mem/ruby/network/Network.py	/^    type = 'RubyNetwork'$/;"	v	class:RubyNetwork
type	./mem/ruby/network/fault_model/FaultModel.py	/^    type = 'FaultModel'$/;"	v	class:FaultModel
type	./mem/ruby/network/garnet/BaseGarnetNetwork.py	/^    type = 'BaseGarnetNetwork'$/;"	v	class:BaseGarnetNetwork
type	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    type = 'CreditLink_d'$/;"	v	class:CreditLink_d
type	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    type = 'GarnetExtLink_d'$/;"	v	class:GarnetExtLink_d
type	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    type = 'GarnetIntLink_d'$/;"	v	class:GarnetIntLink_d
type	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    type = 'NetworkLink_d'$/;"	v	class:NetworkLink_d
type	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.py	/^    type = 'GarnetNetworkInterface_d'$/;"	v	class:GarnetNetworkInterface_d
type	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.py	/^    type = 'GarnetNetwork_d'$/;"	v	class:GarnetNetwork_d
type	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.py	/^    type = 'GarnetRouter_d'$/;"	v	class:GarnetRouter_d
type	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.py	/^    type = 'GarnetExtLink'$/;"	v	class:GarnetExtLink
type	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.py	/^    type = 'GarnetIntLink'$/;"	v	class:GarnetIntLink
type	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.py	/^    type = 'NetworkLink'$/;"	v	class:NetworkLink
type	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.py	/^    type = 'GarnetNetwork'$/;"	v	class:GarnetNetwork
type	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.py	/^    type = 'GarnetNetworkInterface'$/;"	v	class:GarnetNetworkInterface
type	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.py	/^    type = 'GarnetRouter'$/;"	v	class:GarnetRouter
type	./mem/ruby/network/simple/SimpleLink.py	/^    type = 'SimpleExtLink'$/;"	v	class:SimpleExtLink
type	./mem/ruby/network/simple/SimpleLink.py	/^    type = 'SimpleIntLink'$/;"	v	class:SimpleIntLink
type	./mem/ruby/network/simple/SimpleNetwork.py	/^    type = 'SimpleNetwork'$/;"	v	class:SimpleNetwork
type	./mem/ruby/network/simple/SimpleNetwork.py	/^    type = 'Switch'$/;"	v	class:Switch
type	./mem/ruby/slicc_interface/Controller.py	/^    type = 'RubyController'$/;"	v	class:RubyController
type	./mem/ruby/structures/DirectoryMemory.py	/^    type = 'RubyDirectoryMemory'$/;"	v	class:RubyDirectoryMemory
type	./mem/ruby/structures/LRUReplacementPolicy.py	/^    type = 'LRUReplacementPolicy'$/;"	v	class:LRUReplacementPolicy
type	./mem/ruby/structures/PseudoLRUReplacementPolicy.py	/^    type = 'PseudoLRUReplacementPolicy'$/;"	v	class:PseudoLRUReplacementPolicy
type	./mem/ruby/structures/ReplacementPolicy.py	/^    type = 'ReplacementPolicy'$/;"	v	class:ReplacementPolicy
type	./mem/ruby/structures/RubyCache.py	/^    type = 'RubyCache'$/;"	v	class:RubyCache
type	./mem/ruby/structures/RubyMemoryControl.py	/^    type = 'RubyMemoryControl'$/;"	v	class:RubyMemoryControl
type	./mem/ruby/structures/RubyPrefetcher.py	/^    type = 'Prefetcher'$/;"	v	class:Prefetcher
type	./mem/ruby/structures/WireBuffer.py	/^    type = 'RubyWireBuffer'$/;"	v	class:RubyWireBuffer
type	./mem/ruby/system/RubySystem.py	/^    type = 'RubySystem'$/;"	v	class:RubySystem
type	./mem/ruby/system/Sequencer.py	/^    type = 'DMASequencer'$/;"	v	class:DMASequencer
type	./mem/ruby/system/Sequencer.py	/^    type = 'RubyPort'$/;"	v	class:RubyPort
type	./mem/ruby/system/Sequencer.py	/^    type = 'RubyPortProxy'$/;"	v	class:RubyPortProxy
type	./mem/ruby/system/Sequencer.py	/^    type = 'RubySequencer'$/;"	v	class:RubySequencer
type	./mem/slicc/ast/TypeAST.py	/^    def type(self, assert_type=None):$/;"	m	class:TypeAST
type	./python/m5/SimObject.py	/^    type = 'SimObject'$/;"	v	class:SimObject
type	./sim/ClockDomain.py	/^    type = 'ClockDomain'$/;"	v	class:ClockDomain
type	./sim/ClockDomain.py	/^    type = 'DerivedClockDomain'$/;"	v	class:DerivedClockDomain
type	./sim/ClockDomain.py	/^    type = 'SrcClockDomain'$/;"	v	class:SrcClockDomain
type	./sim/ClockedObject.py	/^    type = 'ClockedObject'$/;"	v	class:ClockedObject
type	./sim/DVFSHandler.py	/^    type = 'DVFSHandler'$/;"	v	class:DVFSHandler
type	./sim/InstTracer.py	/^    type = 'InstTracer'$/;"	v	class:InstTracer
type	./sim/Process.py	/^    type = 'EmulatedDriver'$/;"	v	class:EmulatedDriver
type	./sim/Process.py	/^    type = 'LiveProcess'$/;"	v	class:LiveProcess
type	./sim/Process.py	/^    type = 'Process'$/;"	v	class:Process
type	./sim/Root.py	/^    type = 'Root'$/;"	v	class:Root
type	./sim/SubSystem.py	/^    type = 'SubSystem'$/;"	v	class:SubSystem
type	./sim/System.py	/^    type = 'System'$/;"	v	class:System
type	./sim/TickedObject.py	/^    type = 'TickedObject'$/;"	v	class:TickedObject
type	./sim/VoltageDomain.py	/^    type = 'VoltageDomain'$/;"	v	class:VoltageDomain
type	./sim/probe/Probe.py	/^    type = 'ProbeListenerObject'$/;"	v	class:ProbeListenerObject
typeClass	./base/inet.hh	/^    uint8_t typeClass() const { return IP_OPT_CLASS(opt_type); }$/;"	f	struct:Net::IpOpt
typeCopied	./base/inet.hh	/^    uint8_t typeCopied() const { return IP_OPT_COPIED(opt_type); }$/;"	f	struct:Net::IpOpt
typeNumber	./base/inet.hh	/^    uint8_t typeNumber() const { return IP_OPT_NUMBER(opt_type); }$/;"	f	struct:Net::IpOpt
typeOfSmallest	./mem/ruby/structures/PersistentTable.cc	/^PersistentTable::typeOfSmallest(Addr address) const$/;"	f	class:PersistentTable
typeToStr	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::TraceInfo::typeToStr() const$/;"	f	class:ElasticTrace::TraceInfo
typeToStr	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::GraphNode::typeToStr() const$/;"	f	class:TraceCPU::ElasticDataGen::GraphNode
u	./arch/arm/miscregs.hh	/^        Bitfield<22>   u;       \/\/ Alignment (dropped in ARMv7)$/;"	m	namespace:ArmISA
u	./arch/arm/pmu.hh	/^        Bitfield<30> u;$/;"	m	class:ArmISA::PMU
u	./arch/mips/dt_constants.hh	/^    Bitfield<21>     u;$/;"	m	namespace:MipsISA
u	./arch/mips/pra_constants.hh	/^    Bitfield<3>     u;$/;"	m	namespace:MipsISA
u	./arch/x86/pagetable.hh	/^        Bitfield<2> u;$/;"	m	namespace:X86ISA
uAdvance	./arch/generic/types.hh	/^    uAdvance()$/;"	f	class:GenericISA::DelaySlotUPCState
uAdvance	./arch/generic/types.hh	/^    uAdvance()$/;"	f	class:GenericISA::UPCState
uDelaySkipEvent	./arch/arm/freebsd/system.hh	/^    FreeBSD::UDelayEvent *uDelaySkipEvent;$/;"	m	class:FreebsdArmSystem
uDelaySkipEvent	./arch/arm/linux/system.hh	/^    Linux::UDelayEvent *uDelaySkipEvent;$/;"	m	class:LinuxArmSystem
uEnd	./arch/arm/types.hh	/^        uEnd()$/;"	f	class:ArmISA::PCState
uEnd	./arch/generic/types.hh	/^    uEnd()$/;"	f	class:GenericISA::DelaySlotUPCState
uEnd	./arch/generic/types.hh	/^    uEnd()$/;"	f	class:GenericISA::UPCState
uEnd	./arch/x86/types.hh	/^        uEnd()$/;"	f	class:X86ISA::PCState
uSatInt	./arch/arm/insts/static_inst.hh	/^    uSatInt(int32_t &res, int64_t op, int width)$/;"	f	class:ArmISA::ArmStaticInst
uSaturateOp	./arch/arm/insts/static_inst.hh	/^    uSaturateOp(uint32_t &res, int64_t op1, int64_t op2, bool sub=false)$/;"	f	class:ArmISA::ArmStaticInst
uadmin	./kern/tru64/tru64_syscalls.hh	/^        uadmin = 242,$/;"	e	enum:SystemCalls::__anon102
uart	./dev/alpha/Tsunami.py	/^    uart = Uart8250(pio_addr=0x801fc0003f8)$/;"	v	class:Tsunami
uart	./dev/arm/RealView.py	/^    uart = Pl011(pio_addr=0x10009000, int_num=44)$/;"	v	class:RealViewEB
uart	./dev/arm/RealView.py	/^    uart = Pl011(pio_addr=0x10009000, int_num=44)$/;"	v	class:RealViewPBX
uart	./dev/arm/RealView.py	/^    uart = Pl011(pio_addr=0x1c090000, int_num=37)$/;"	v	class:VExpress_EMM
uart	./dev/mips/Malta.py	/^    uart = Uart8250(pio_addr=0xBFD003F8)$/;"	v	class:Malta
uart	./dev/uart8250.hh	/^            Uart8250 *uart;$/;"	m	class:Uart8250::IntrEvent
uart1_fake	./dev/arm/RealView.py	/^    uart1_fake     = AmbaFake(pio_addr=0x1C0A0000)$/;"	v	class:VExpress_EMM
uart1_fake	./dev/arm/RealView.py	/^    uart1_fake    = AmbaFake(pio_addr=0x1000a000)$/;"	v	class:RealViewEB
uart1_fake	./dev/arm/RealView.py	/^    uart1_fake    = AmbaFake(pio_addr=0x1000a000)$/;"	v	class:RealViewPBX
uart2_fake	./dev/arm/RealView.py	/^    uart2_fake     = AmbaFake(pio_addr=0x1C0B0000)$/;"	v	class:VExpress_EMM
uart2_fake	./dev/arm/RealView.py	/^    uart2_fake    = AmbaFake(pio_addr=0x1000b000)$/;"	v	class:RealViewEB
uart2_fake	./dev/arm/RealView.py	/^    uart2_fake    = AmbaFake(pio_addr=0x1000b000)$/;"	v	class:RealViewPBX
uart3_fake	./dev/arm/RealView.py	/^    uart3_fake     = AmbaFake(pio_addr=0x1C0C0000)$/;"	v	class:VExpress_EMM
uart3_fake	./dev/arm/RealView.py	/^    uart3_fake    = AmbaFake(pio_addr=0x1000c000)$/;"	v	class:RealViewEB
uart3_fake	./dev/arm/RealView.py	/^    uart3_fake    = AmbaFake(pio_addr=0x1000c000)$/;"	v	class:RealViewPBX
uc	./arch/x86/regs/misc.hh	/^        Bitfield<61> uc; \/\/ Uncorrected error$/;"	m	namespace:X86ISA
uci	./arch/arm/miscregs.hh	/^        Bitfield<26>   uci;     \/\/ Enable EL0 access to DC CVAU, DC CIVAC,$/;"	m	namespace:ArmISA
uct	./arch/arm/miscregs.hh	/^        Bitfield<15>   uct;     \/\/ Enable EL0 access to CTR_EL0$/;"	m	namespace:ArmISA
udmaControl	./dev/storage/ide_ctrl.hh	/^    uint8_t udmaControl;$/;"	m	class:IdeController
udmaTiming	./dev/storage/ide_ctrl.hh	/^    uint16_t udmaTiming;$/;"	m	class:IdeController
ue	./arch/power/miscregs.hh	/^    Bitfield<6> ue;$/;"	m	namespace:PowerISA
ufc	./arch/arm/miscregs.hh	/^        Bitfield<3> ufc;$/;"	m	namespace:ArmISA
ufe	./arch/arm/miscregs.hh	/^        Bitfield<11> ufe;$/;"	m	namespace:ArmISA
ufs_slots	./dev/arm/UFSHostDevice.py	/^        the Host controller (min: 1, max: 32)")$/;"	v	class:UFSHostDevice
uid	./sim/Process.py	/^    uid = Param.Int(100, 'user id')$/;"	v	class:LiveProcess
uid	./sim/process.hh	/^    inline uint64_t uid() {return __uid;}$/;"	f	class:LiveProcess
uid_t	./kern/freebsd/freebsd.hh	/^    typedef uint32_t uid_t;$/;"	t	class:FreeBSD
uid_t	./kern/linux/linux.hh	/^    typedef uint32_t uid_t;$/;"	t	class:Linux
uid_t	./kern/solaris/solaris.hh	/^    typedef int32_t uid_t;$/;"	t	class:Solaris
uid_t	./kern/tru64/tru64.hh	/^    typedef uint32_t uid_t;$/;"	t	class:Tru64
uie	./dev/mc146818.hh	/^        Bitfield<4> uie;       \/\/\/ 1 = enable update-ended interrupt$/;"	m	class:MC146818
uimm	./arch/power/insts/integer.hh	/^    uint32_t uimm;$/;"	m	class:PowerISA::IntImmOp
uint32_t	./dev/alpha/access.h	/^typedef unsigned uint32_t;$/;"	t
uint32_t	./dev/mips/access.h	/^typedef unsigned uint32_t;$/;"	t
uint64_t	./dev/alpha/access.h	/^typedef unsigned long uint64_t;$/;"	t
uint64_t	./dev/mips/access.h	/^typedef unsigned long uint64_t;$/;"	t
uint64_ta	./arch/mips/linux/aligned.hh	/^typedef uint64_t uint64_ta __attribute__ ((aligned (8))) ;$/;"	t
uint64_ta	./arch/mips/linux/aligned.hh	45;"	d
uiomove_f	./kern/tru64/mbuf.hh	/^    Addr        uiomove_f;      \/\/ 0x30$/;"	m	struct:tru64::m_ext
uip	./dev/mc146818.hh	/^        Bitfield<7> uip;    \/\/\/ 1 = date and time update in progress$/;"	m	class:MC146818
um	./arch/mips/pra_constants.hh	/^    Bitfield<4>      um;$/;"	m	namespace:MipsISA
uma	./arch/arm/miscregs.hh	/^        Bitfield<9>    uma;     \/\/ User mask access (AArch64 SCTLR_EL1 only)$/;"	m	namespace:ArmISA
umask	./kern/tru64/tru64_syscalls.hh	/^        umask = 60,$/;"	e	enum:SystemCalls::__anon102
umaskFunc	./sim/syscall_emul.cc	/^umaskFunc(SyscallDesc *desc, int num, LiveProcess *process, ThreadContext *tc)$/;"	f
unPostMaintInt	./dev/arm/vgic.cc	/^VGic::unPostMaintInt(uint32_t cpu)$/;"	f	class:VGic
unPostVInt	./dev/arm/vgic.cc	/^VGic::unPostVInt(uint32_t cpu)$/;"	f	class:VGic
unRename	./sim/cxx_manager.cc	/^CxxConfigManager::unRename(const std::string &to_name)$/;"	f	class:CxxConfigManager
uname	./kern/tru64/tru64_syscalls.hh	/^        uname = 207,$/;"	e	enum:SystemCalls::__anon102
unameFunc	./arch/alpha/linux/process.cc	/^unameFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
unameFunc	./arch/alpha/tru64/process.cc	/^unameFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
unameFunc	./arch/mips/linux/process.cc	/^unameFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
unameFunc	./arch/power/linux/process.cc	/^unameFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
unameFunc	./arch/sparc/linux/syscalls.cc	/^unameFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	namespace:SparcISA
unameFunc	./arch/sparc/solaris/process.cc	/^unameFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
unameFunc	./arch/x86/linux/process.cc	/^unameFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
unameFunc32	./arch/arm/linux/process.cc	/^unameFunc32(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
unameFunc64	./arch/arm/linux/process.cc	/^unameFunc64(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f	file:
unaryOp	./arch/arm/insts/vfp.cc	/^FpOp::unaryOp(FPSCR &fpscr, fpType op1, fpType (*func)(fpType),$/;"	f	class:ArmISA::FpOp
unbcdize	./dev/mc146818.cc	/^unbcdize(uint8_t val)$/;"	f	file:
unbind	./mem/port.cc	/^MasterPort::unbind()$/;"	f	class:MasterPort
unbind	./mem/port.cc	/^SlavePort::unbind()$/;"	f	class:SlavePort
unblock	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::unblock(ThreadID tid)$/;"	f	class:DefaultDecode
unblock	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::unblock(ThreadID tid)$/;"	f	class:DefaultIEW
unblock	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::unblock(ThreadID tid)$/;"	f	class:DefaultRename
unblock	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::unblock(Addr addr)$/;"	f	class:AbstractController
uncacheAddr	./cpu/testers/memtest/memtest.hh	/^    Addr uncacheAddr;$/;"	m	class:MemTest
uncacheBit39	./arch/alpha/tlb.cc	/^bool uncacheBit39 = false;$/;"	m	namespace:AlphaISA	file:
uncacheBit40	./arch/alpha/tlb.cc	/^bool uncacheBit40 = false;$/;"	m	namespace:AlphaISA	file:
uncacheable	./arch/x86/pagetable.hh	/^        bool uncacheable;$/;"	m	struct:X86ISA::TlbEntry
uncondBranch	./cpu/pred/2bit_local.cc	/^LocalBP::uncondBranch(Addr pc, void *&bp_history)$/;"	f	class:LocalBP
uncondBranch	./cpu/pred/bi_mode.cc	/^BiModeBP::uncondBranch(Addr pc, void * &bpHistory)$/;"	f	class:BiModeBP
uncondBranch	./cpu/pred/tournament.cc	/^TournamentBP::uncondBranch(Addr pc, void * &bp_history)$/;"	f	class:TournamentBP
underReset	./dev/pci/copy_engine.hh	/^        bool underReset;$/;"	m	class:CopyEngine::CopyEngineChannel
underflow	./base/statistics.hh	/^    Counter underflow;$/;"	m	class:Stats::DistStor
underflow	./base/stats/info.hh	/^    Counter underflow;$/;"	m	struct:Stats::DistData
underflow	./dev/arm/pl111.hh	/^        Bitfield<1> underflow;$/;"	m	class:Pl111
underrun	./dev/pixelpump.hh	/^    bool underrun() const { return _underrun; }$/;"	f	class:BasePixelPump
underruns	./dev/arm/hdlcd.hh	/^        Stats::Scalar underruns;$/;"	m	struct:HDLcd::__anon23
unescapeParams	./arch/micro_asm.py	/^    def unescapeParams(mo):$/;"	f	function:t_params_PARAMS
unfair_arbitration	./mem/ruby/network/fault_model/FaultModel.hh	/^        unfair_arbitration,$/;"	e	enum:FaultModel::fault_type
unflattenMiscReg	./arch/arm/miscregs.cc	/^unflattenMiscReg(int reg)$/;"	f	namespace:ArmISA
unflattenResultMiscReg	./arch/arm/miscregs.cc	/^int unflattenResultMiscReg[NUM_MISCREGS];$/;"	m	namespace:ArmISA	file:
unicast	./base/inet.hh	/^    bool unicast() const { return !(data[0] & 0x01); }$/;"	f	struct:Net::EthAddr
unimplementedFunc	./sim/syscall_emul.cc	/^unimplementedFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
uniq	./arch/alpha/isa.hh	/^        uint64_t uniq;       \/\/ process-unique register$/;"	m	class:AlphaISA::ISA
unitBusy	./cpu/o3/fu_pool.hh	/^    std::vector<bool> unitBusy;$/;"	m	class:FUPool
unitMask	./arch/x86/regs/misc.hh	/^        Bitfield<15,8> unitMask;$/;"	m	namespace:X86ISA
unit_filter	./mem/ruby/structures/RubyPrefetcher.py	/^    unit_filter  = Param.UInt32(8,$/;"	v	class:Prefetcher
unitsToBeFreed	./cpu/o3/fu_pool.hh	/^    std::vector<int> unitsToBeFreed;$/;"	m	class:FUPool
unknown	./arch/alpha/stacktrace.hh	/^        unknown = 3$/;"	e	enum:AlphaISA::StackTrace::__anon49
unknown	./arch/arm/faults.hh	/^    bool unknown;$/;"	m	class:ArmISA::UndefinedInstruction
unknown	./arch/mips/stacktrace.hh	/^    static const int unknown = 3;$/;"	m	class:MipsISA::StackTrace
unknown	./arch/power/stacktrace.hh	/^    static const int unknown = 3;$/;"	m	class:PowerISA::StackTrace
unknown	./arch/x86/stacktrace.hh	/^        static const int unknown = 3;$/;"	m	class:X86ISA::StackTrace
unknownPages	./dev/arm/flash_device.hh	/^    std::vector<uint32_t> unknownPages;$/;"	m	class:FlashDevice
unlink	./kern/tru64/tru64_syscalls.hh	/^        unlink = 10,$/;"	e	enum:SystemCalls::__anon102
unlinkFunc	./sim/syscall_emul.cc	/^unlinkFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)$/;"	f
unlinkHelper	./sim/syscall_emul.cc	/^unlinkHelper(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc,$/;"	f
unlinkatFunc	./sim/syscall_emul.hh	/^unlinkatFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
unlock	./sim/eventq.hh	/^    void unlock() { service_mutex.unlock(); }$/;"	f	class:EventQueue
unmap	./mem/multi_level_page_table_impl.hh	/^MultiLevelPageTable<ISAOps>::unmap(Addr vaddr, int64_t size)$/;"	f	class:MultiLevelPageTable
unmap	./mem/page_table.cc	/^FuncPageTable::unmap(Addr vaddr, int64_t size)$/;"	f	class:FuncPageTable
unmaskAll	./dev/x86/i8259.hh	/^    unmaskAll()$/;"	f	class:X86ISA::I8259
unmount	./kern/tru64/tru64_syscalls.hh	/^        unmount = 22,$/;"	e	enum:SystemCalls::__anon102
unproxy	./python/m5/SimObject.py	/^    def unproxy(self, base):$/;"	f
unproxy	./python/m5/params.py	/^    def unproxy(self, base):$/;"	m	class:EthernetAddr
unproxy	./python/m5/params.py	/^    def unproxy(self, base):$/;"	m	class:NullSimObject
unproxy	./python/m5/params.py	/^    def unproxy(self, base):$/;"	m	class:ParamValue
unproxy	./python/m5/params.py	/^    def unproxy(self, base):$/;"	m	class:VectorParamValue
unproxy	./python/m5/params.py	/^    def unproxy(self, simobj):$/;"	m	class:PortRef
unproxy	./python/m5/params.py	/^    def unproxy(self, simobj):$/;"	m	class:VectorPortRef
unproxy	./python/m5/proxy.py	/^    def unproxy(self, base):$/;"	m	class:BaseProxy
unproxyParams	./python/m5/SimObject.py	/^    def unproxyParams(self):$/;"	f
unregisterDrainable	./sim/drain.cc	/^DrainManager::unregisterDrainable(Drainable *obj)$/;"	f	class:DrainManager
unreservedRemainingSpace	./cpu/minor/buffers.hh	/^    unreservedRemainingSpace() const$/;"	f	class:Minor::Queue
unreservedRemainingSpace	./cpu/minor/buffers.hh	/^    unreservedRemainingSpace()$/;"	f	class:Minor::InputBuffer
unscheduleEvent	./arch/mips/isa.cc	/^ISA::CP0Event::unscheduleEvent()$/;"	f	class:MipsISA::ISA::CP0Event
unscheduleTickEvent	./cpu/o3/cpu.hh	/^    void unscheduleTickEvent()$/;"	f	class:FullO3CPU
unserialize	./arch/alpha/interrupts.hh	/^    unserialize(CheckpointIn &cp)$/;"	f	class:AlphaISA::Interrupts
unserialize	./arch/alpha/isa.cc	/^ISA::unserialize(CheckpointIn &cp)$/;"	f	class:AlphaISA::ISA
unserialize	./arch/alpha/kernel_stats.cc	/^Statistics::unserialize(CheckpointIn &cp)$/;"	f	class:AlphaISA::Kernel::Statistics
unserialize	./arch/alpha/pagetable.cc	/^TlbEntry::unserialize(CheckpointIn &cp)$/;"	f	class:AlphaISA::TlbEntry
unserialize	./arch/alpha/tlb.cc	/^TLB::unserialize(CheckpointIn &cp)$/;"	f	class:AlphaISA::TLB
unserialize	./arch/arm/interrupts.hh	/^    unserialize(CheckpointIn &cp)$/;"	f	class:ArmISA::Interrupts
unserialize	./arch/arm/isa.hh	/^        void unserialize(CheckpointIn &cp)$/;"	f	class:ArmISA::ISA
unserialize	./arch/arm/kvm/gic.cc	/^KvmGic::unserialize(CheckpointIn &cp)$/;"	f	class:KvmGic
unserialize	./arch/arm/pagetable.hh	/^    void unserialize(CheckpointIn &cp)$/;"	f	struct:ArmISA::PTE
unserialize	./arch/arm/pmu.cc	/^PMU::CounterState::unserialize(CheckpointIn &cp)$/;"	f	class:ArmISA::PMU::CounterState
unserialize	./arch/arm/pmu.cc	/^PMU::unserialize(CheckpointIn &cp)$/;"	f	class:ArmISA::PMU
unserialize	./arch/arm/tlb.cc	/^TLB::unserialize(CheckpointIn &cp)$/;"	f	class:TLB
unserialize	./arch/mips/pagetable.cc	/^PTE::unserialize(CheckpointIn &cp)$/;"	f	class:MipsISA::PTE
unserialize	./arch/mips/pagetable.hh	/^    void unserialize(CheckpointIn &cp)$/;"	f	struct:MipsISA::TlbEntry
unserialize	./arch/mips/tlb.cc	/^TLB::unserialize(CheckpointIn &cp)$/;"	f	class:TLB
unserialize	./arch/power/pagetable.cc	/^PTE::unserialize(CheckpointIn &cp)$/;"	f	class:PowerISA::PTE
unserialize	./arch/power/tlb.cc	/^TLB::unserialize(CheckpointIn &cp)$/;"	f	class:TLB
unserialize	./arch/power/tlb.hh	/^    unserialize(CheckpointIn &cp)$/;"	f	struct:PowerISA::TlbEntry
unserialize	./arch/sparc/isa.cc	/^ISA::unserialize(CheckpointIn &cp)$/;"	f	class:SparcISA::ISA
unserialize	./arch/sparc/pagetable.cc	/^TlbEntry::unserialize(CheckpointIn &cp)$/;"	f	class:SparcISA::TlbEntry
unserialize	./arch/sparc/tlb.cc	/^TLB::unserialize(CheckpointIn &cp)$/;"	f	class:SparcISA::TLB
unserialize	./arch/x86/interrupts.cc	/^X86ISA::Interrupts::unserialize(CheckpointIn &cp)$/;"	f	class:X86ISA::Interrupts
unserialize	./arch/x86/isa.cc	/^ISA::unserialize(CheckpointIn &cp)$/;"	f	class:X86ISA::ISA
unserialize	./arch/x86/pagetable.cc	/^TlbEntry::unserialize(CheckpointIn &cp)$/;"	f	class:X86ISA::TlbEntry
unserialize	./arch/x86/tlb.cc	/^TLB::unserialize(CheckpointIn &cp)$/;"	f	class:X86ISA::TLB
unserialize	./arch/x86/types.hh	/^        unserialize(CheckpointIn &cp)$/;"	f	class:X86ISA::PCState
unserialize	./base/cp_annotate.cc	/^CPA::AnnotateData::unserialize(CheckpointIn &cp)$/;"	f	class:CPA::AnnotateData
unserialize	./base/cp_annotate.cc	/^CPA::unserialize(CheckpointIn &cp)$/;"	f	class:CPA
unserialize	./base/framebuffer.cc	/^FrameBuffer::unserialize(CheckpointIn &cp)$/;"	f	class:FrameBuffer
unserialize	./base/loader/symtab.cc	/^SymbolTable::unserialize(const string &base, CheckpointIn &cp)$/;"	f	class:SymbolTable
unserialize	./base/pollevent.cc	/^PollEvent::unserialize(CheckpointIn &cp)$/;"	f	class:PollEvent
unserialize	./base/random.cc	/^Random::unserialize(CheckpointIn &cp)$/;"	f	class:Random
unserialize	./base/time.cc	/^Time::unserialize(const std::string &base, CheckpointIn &cp)$/;"	f	class:Time
unserialize	./cpu/base.cc	/^BaseCPU::unserialize(CheckpointIn &cp)$/;"	f	class:BaseCPU
unserialize	./cpu/checker/cpu.cc	/^CheckerCPU::unserialize(CheckpointIn &cp)$/;"	f	class:CheckerCPU
unserialize	./cpu/minor/cpu.cc	/^MinorCPU::unserialize(CheckpointIn &cp)$/;"	f	class:MinorCPU
unserialize	./cpu/simple_thread.cc	/^SimpleThread::unserialize(CheckpointIn &cp)$/;"	f	class:SimpleThread
unserialize	./cpu/testers/traffic_gen/traffic_gen.cc	/^TrafficGen::unserialize(CheckpointIn &cp)$/;"	f	class:TrafficGen
unserialize	./cpu/thread_context.cc	/^unserialize(ThreadContext &tc, CheckpointIn &cp)$/;"	f
unserialize	./cpu/thread_state.cc	/^ThreadState::unserialize(CheckpointIn &cp)$/;"	f	class:ThreadState
unserialize	./dev/alpha/backdoor.cc	/^AlphaBackdoor::Access::unserialize(CheckpointIn &cp)$/;"	f	class:AlphaBackdoor::Access
unserialize	./dev/alpha/backdoor.cc	/^AlphaBackdoor::unserialize(CheckpointIn &cp)$/;"	f	class:AlphaBackdoor
unserialize	./dev/alpha/tsunami.cc	/^Tsunami::unserialize(CheckpointIn &cp)$/;"	f	class:Tsunami
unserialize	./dev/alpha/tsunami_cchip.cc	/^TsunamiCChip::unserialize(CheckpointIn &cp)$/;"	f	class:TsunamiCChip
unserialize	./dev/alpha/tsunami_io.cc	/^TsunamiIO::unserialize(CheckpointIn &cp)$/;"	f	class:TsunamiIO
unserialize	./dev/alpha/tsunami_pchip.cc	/^TsunamiPChip::unserialize(CheckpointIn &cp)$/;"	f	class:TsunamiPChip
unserialize	./dev/arm/energy_ctrl.cc	/^EnergyCtrl::unserialize(CheckpointIn &cp)$/;"	f	class:EnergyCtrl
unserialize	./dev/arm/flash_device.cc	/^FlashDevice::unserialize(CheckpointIn &cp)$/;"	f	class:FlashDevice
unserialize	./dev/arm/generic_timer.cc	/^ArchTimer::unserialize(CheckpointIn &cp)$/;"	f	class:ArchTimer
unserialize	./dev/arm/generic_timer.cc	/^GenericTimer::unserialize(CheckpointIn &cp)$/;"	f	class:GenericTimer
unserialize	./dev/arm/generic_timer.cc	/^GenericTimerMem::unserialize(CheckpointIn &cp)$/;"	f	class:GenericTimerMem
unserialize	./dev/arm/generic_timer.cc	/^SystemCounter::unserialize(CheckpointIn &cp)$/;"	f	class:SystemCounter
unserialize	./dev/arm/gic_pl390.cc	/^Pl390::unserialize(CheckpointIn &cp)$/;"	f	class:Pl390
unserialize	./dev/arm/gpu_nomali.cc	/^NoMaliGpu::unserialize(CheckpointIn &cp)$/;"	f	class:NoMaliGpu
unserialize	./dev/arm/hdlcd.cc	/^HDLcd::DmaEngine::unserialize(CheckpointIn &cp)$/;"	f	class:HDLcd::DmaEngine
unserialize	./dev/arm/hdlcd.cc	/^HDLcd::unserialize(CheckpointIn &cp)$/;"	f	class:HDLcd
unserialize	./dev/arm/kmi.cc	/^Pl050::unserialize(CheckpointIn &cp)$/;"	f	class:Pl050
unserialize	./dev/arm/pl011.cc	/^Pl011::unserialize(CheckpointIn &cp)$/;"	f	class:Pl011
unserialize	./dev/arm/pl111.cc	/^Pl111::unserialize(CheckpointIn &cp)$/;"	f	class:Pl111
unserialize	./dev/arm/rtc_pl031.cc	/^PL031::unserialize(CheckpointIn &cp)$/;"	f	class:PL031
unserialize	./dev/arm/rv_ctrl.cc	/^RealViewCtrl::unserialize(CheckpointIn &cp)$/;"	f	class:RealViewCtrl
unserialize	./dev/arm/rv_ctrl.cc	/^RealViewOsc::unserialize(CheckpointIn &cp)$/;"	f	class:RealViewOsc
unserialize	./dev/arm/timer_cpulocal.cc	/^CpuLocalTimer::Timer::unserialize(CheckpointIn &cp)$/;"	f	class:CpuLocalTimer::Timer
unserialize	./dev/arm/timer_cpulocal.cc	/^CpuLocalTimer::unserialize(CheckpointIn &cp)$/;"	f	class:CpuLocalTimer
unserialize	./dev/arm/timer_sp804.cc	/^Sp804::Timer::unserialize(CheckpointIn &cp)$/;"	f	class:Sp804::Timer
unserialize	./dev/arm/timer_sp804.cc	/^Sp804::unserialize(CheckpointIn &cp)$/;"	f	class:Sp804
unserialize	./dev/arm/ufs_device.cc	/^UFSHostDevice::unserialize(CheckpointIn &cp)$/;"	f	class:UFSHostDevice
unserialize	./dev/arm/vgic.cc	/^VGic::vcpuIntData::unserialize(CheckpointIn &cp)$/;"	f	class:VGic::vcpuIntData
unserialize	./dev/arm/vgic.cc	/^void VGic::unserialize(CheckpointIn &cp)$/;"	f	class:VGic
unserialize	./dev/dma_device.cc	/^DmaReadFifo::unserialize(CheckpointIn &cp)$/;"	f	class:DmaReadFifo
unserialize	./dev/i2c/bus.cc	/^I2CBus::unserialize(CheckpointIn &cp)$/;"	f	class:I2CBus
unserialize	./dev/intel_8254_timer.cc	/^Intel8254Timer::Counter::unserialize(const string &base, CheckpointIn &cp)$/;"	f	class:Intel8254Timer::Counter
unserialize	./dev/intel_8254_timer.cc	/^Intel8254Timer::unserialize(const string &base, CheckpointIn &cp)$/;"	f	class:Intel8254Timer
unserialize	./dev/mc146818.cc	/^MC146818::unserialize(const string &base, CheckpointIn &cp)$/;"	f	class:MC146818
unserialize	./dev/mips/malta.cc	/^Malta::unserialize(CheckpointIn &cp)$/;"	f	class:Malta
unserialize	./dev/mips/malta_cchip.cc	/^MaltaCChip::unserialize(CheckpointIn &cp)$/;"	f	class:MaltaCChip
unserialize	./dev/mips/malta_io.cc	/^MaltaIO::unserialize(CheckpointIn &cp)$/;"	f	class:MaltaIO
unserialize	./dev/net/dist_etherlink.cc	/^DistEtherLink::Link::unserialize(CheckpointIn &cp)$/;"	f	class:DistEtherLink::Link
unserialize	./dev/net/dist_etherlink.cc	/^DistEtherLink::unserialize(CheckpointIn &cp)$/;"	f	class:DistEtherLink
unserialize	./dev/net/dist_iface.cc	/^DistIface::RecvScheduler::Desc::unserialize(CheckpointIn &cp)$/;"	f	class:DistIface::RecvScheduler::Desc
unserialize	./dev/net/dist_iface.cc	/^DistIface::RecvScheduler::unserialize(CheckpointIn &cp)$/;"	f	class:DistIface::RecvScheduler
unserialize	./dev/net/dist_iface.cc	/^DistIface::SyncNode::unserialize(CheckpointIn &cp)$/;"	f	class:DistIface::SyncNode
unserialize	./dev/net/dist_iface.cc	/^DistIface::SyncSwitch::unserialize(CheckpointIn &cp)$/;"	f	class:DistIface::SyncSwitch
unserialize	./dev/net/dist_iface.cc	/^DistIface::unserialize(CheckpointIn &cp)$/;"	f	class:DistIface
unserialize	./dev/net/etherlink.cc	/^EtherLink::Link::unserialize(const string &base, CheckpointIn &cp)$/;"	f	class:EtherLink::Link
unserialize	./dev/net/etherlink.cc	/^EtherLink::unserialize(CheckpointIn &cp)$/;"	f	class:EtherLink
unserialize	./dev/net/etherpkt.cc	/^EthPacketData::unserialize(const string &base, CheckpointIn &cp)$/;"	f	class:EthPacketData
unserialize	./dev/net/ethertap.cc	/^EtherTap::unserialize(CheckpointIn &cp)$/;"	f	class:EtherTap
unserialize	./dev/net/i8254xGBe.cc	/^IGbE::DescCache<T>::unserialize(CheckpointIn &cp)$/;"	f	class:IGbE::DescCache
unserialize	./dev/net/i8254xGBe.cc	/^IGbE::RxDescCache::unserialize(CheckpointIn &cp)$/;"	f	class:IGbE::RxDescCache
unserialize	./dev/net/i8254xGBe.cc	/^IGbE::TxDescCache::unserialize(CheckpointIn &cp)$/;"	f	class:IGbE::TxDescCache
unserialize	./dev/net/i8254xGBe.cc	/^IGbE::unserialize(CheckpointIn &cp)$/;"	f	class:IGbE
unserialize	./dev/net/i8254xGBe_defs.hh	/^        void unserialize(CheckpointIn &cp)$/;"	f	struct:iGbReg::Regs::Reg
unserialize	./dev/net/ns_gige.cc	/^NSGigE::unserialize(CheckpointIn &cp)$/;"	f	class:NSGigE
unserialize	./dev/net/pktfifo.cc	/^PacketFifo::unserialize(const string &base, CheckpointIn &cp)$/;"	f	class:PacketFifo
unserialize	./dev/net/pktfifo.cc	/^PacketFifoEntry::unserialize(const string &base, CheckpointIn &cp)$/;"	f	class:PacketFifoEntry
unserialize	./dev/net/sinic.cc	/^Base::unserialize(CheckpointIn &cp)$/;"	f	class:Sinic::Base
unserialize	./dev/net/sinic.cc	/^Device::unserialize(CheckpointIn &cp)$/;"	f	class:Sinic::Device
unserialize	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::unserialize(CheckpointIn &cp)$/;"	f	class:CopyEngine::CopyEngineChannel
unserialize	./dev/pci/copy_engine.cc	/^CopyEngine::unserialize(CheckpointIn &cp)$/;"	f	class:CopyEngine
unserialize	./dev/pci/copy_engine_defs.hh	/^    void unserialize(CheckpointIn &cp)$/;"	f	struct:CopyEngineReg::Reg
unserialize	./dev/pci/device.cc	/^PciDevice::unserialize(CheckpointIn &cp)$/;"	f	class:PciDevice
unserialize	./dev/pixelpump.cc	/^BasePixelPump::PixelEvent::unserialize(CheckpointIn &cp)$/;"	f	class:BasePixelPump::PixelEvent
unserialize	./dev/pixelpump.cc	/^BasePixelPump::unserialize(CheckpointIn &cp)$/;"	f	class:BasePixelPump
unserialize	./dev/pixelpump.cc	/^DisplayTimings::unserialize(CheckpointIn &cp)$/;"	f	class:DisplayTimings
unserialize	./dev/sparc/dtod.cc	/^DumbTOD::unserialize(CheckpointIn &cp)$/;"	f	class:DumbTOD
unserialize	./dev/sparc/iob.cc	/^Iob::unserialize(CheckpointIn &cp)$/;"	f	class:Iob
unserialize	./dev/storage/disk_image.cc	/^CowDiskImage::unserialize(CheckpointIn &cp)$/;"	f	class:CowDiskImage
unserialize	./dev/storage/ide_ctrl.cc	/^IdeController::Channel::unserialize(const std::string &base, CheckpointIn &cp)$/;"	f	class:IdeController::Channel
unserialize	./dev/storage/ide_ctrl.cc	/^IdeController::unserialize(CheckpointIn &cp)$/;"	f	class:IdeController
unserialize	./dev/storage/ide_disk.cc	/^IdeDisk::unserialize(CheckpointIn &cp)$/;"	f	class:IdeDisk
unserialize	./dev/uart8250.cc	/^Uart8250::unserialize(CheckpointIn &cp)$/;"	f	class:Uart8250
unserialize	./dev/virtio/base.cc	/^VirtIODeviceBase::unserialize(CheckpointIn &cp)$/;"	f	class:VirtIODeviceBase
unserialize	./dev/virtio/base.cc	/^VirtQueue::unserialize(CheckpointIn &cp)$/;"	f	class:VirtQueue
unserialize	./dev/virtio/fs9p.cc	/^VirtIO9PProxy::unserialize(CheckpointIn &cp)$/;"	f	class:VirtIO9PProxy
unserialize	./dev/x86/cmos.cc	/^X86ISA::Cmos::unserialize(CheckpointIn &cp)$/;"	f	class:X86ISA::Cmos
unserialize	./dev/x86/i8042.cc	/^X86ISA::I8042::unserialize(CheckpointIn &cp)$/;"	f	class:X86ISA::I8042
unserialize	./dev/x86/i8042.cc	/^X86ISA::PS2Device::unserialize(const std::string &base, CheckpointIn &cp)$/;"	f	class:X86ISA::PS2Device
unserialize	./dev/x86/i8042.cc	/^X86ISA::PS2Mouse::unserialize(const std::string &base, CheckpointIn &cp)$/;"	f	class:X86ISA::PS2Mouse
unserialize	./dev/x86/i82094aa.cc	/^X86ISA::I82094AA::unserialize(CheckpointIn &cp)$/;"	f	class:X86ISA::I82094AA
unserialize	./dev/x86/i8237.cc	/^X86ISA::I8237::unserialize(CheckpointIn &cp)$/;"	f	class:X86ISA::I8237
unserialize	./dev/x86/i8254.cc	/^X86ISA::I8254::unserialize(CheckpointIn &cp)$/;"	f	class:X86ISA::I8254
unserialize	./dev/x86/i8259.cc	/^X86ISA::I8259::unserialize(CheckpointIn &cp)$/;"	f	class:X86ISA::I8259
unserialize	./dev/x86/speaker.cc	/^X86ISA::Speaker::unserialize(CheckpointIn &cp)$/;"	f	class:X86ISA::Speaker
unserialize	./kern/kernel_stats.cc	/^Statistics::unserialize(CheckpointIn &cp)$/;"	f	class:Kernel::Statistics
unserialize	./mem/cache/cache.cc	/^Cache::unserialize(CheckpointIn &cp)$/;"	f	class:Cache
unserialize	./mem/multi_level_page_table_impl.hh	/^MultiLevelPageTable<ISAOps>::unserialize(CheckpointIn &cp)$/;"	f	class:MultiLevelPageTable
unserialize	./mem/page_table.cc	/^FuncPageTable::unserialize(CheckpointIn &cp)$/;"	f	class:FuncPageTable
unserialize	./mem/physical.cc	/^PhysicalMemory::unserialize(CheckpointIn &cp)$/;"	f	class:PhysicalMemory
unserialize	./mem/ruby/system/RubySystem.cc	/^RubySystem::unserialize(CheckpointIn &cp)$/;"	f	class:RubySystem
unserialize	./sim/clock_domain.cc	/^SrcClockDomain::unserialize(CheckpointIn &cp)$/;"	f	class:SrcClockDomain
unserialize	./sim/dvfs_handler.cc	/^DVFSHandler::unserialize(CheckpointIn &cp)$/;"	f	class:DVFSHandler
unserialize	./sim/eventq.cc	/^Event::unserialize(CheckpointIn &cp)$/;"	f	class:Event
unserialize	./sim/fd_entry.cc	/^FDEntry::unserialize(CheckpointIn &cp)$/;"	f	class:FDEntry
unserialize	./sim/process.cc	/^Process::unserialize(CheckpointIn &cp)$/;"	f	class:Process
unserialize	./sim/root.cc	/^Root::unserialize(CheckpointIn &cp)$/;"	f	class:Root
unserialize	./sim/serialize.cc	/^Globals::unserialize(CheckpointIn &cp)$/;"	f	class:Globals
unserialize	./sim/sim_events.cc	/^LocalSimLoopExitEvent::unserialize(CheckpointIn &cp)$/;"	f	class:LocalSimLoopExitEvent
unserialize	./sim/system.cc	/^System::unserialize(CheckpointIn &cp)$/;"	f	class:System
unserialize	./sim/ticked_object.cc	/^Ticked::unserialize(CheckpointIn &cp)$/;"	f	class:Ticked
unserialize	./sim/ticked_object.cc	/^TickedObject::unserialize(CheckpointIn &cp)$/;"	f	class:TickedObject
unserialize	./sim/voltage_domain.cc	/^VoltageDomain::unserialize(CheckpointIn &cp)$/;"	f	class:VoltageDomain
unserializeGlobals	./python/swig/pyobject.hh	/^unserializeGlobals(CheckpointIn &cp)$/;"	f
unserializeGlobals	./sim/serialize.cc	/^Serializable::unserializeGlobals(CheckpointIn &cp)$/;"	f	class:Serializable
unserializeSection	./sim/serialize.cc	/^Serializable::unserializeSection(CheckpointIn &cp, const char *name)$/;"	f	class:Serializable
unserializeSection	./sim/serialize.hh	/^    void unserializeSection(CheckpointIn &cp, const std::string &name) {$/;"	f	class:Serializable
unserializeStore	./mem/physical.cc	/^PhysicalMemory::unserializeStore(CheckpointIn &cp)$/;"	f	class:PhysicalMemory
unserializeSymtab	./arch/alpha/system.cc	/^AlphaSystem::unserializeSymtab(CheckpointIn &cp)$/;"	f	class:AlphaSystem
unserializeSymtab	./arch/sparc/system.cc	/^SparcSystem::unserializeSymtab(CheckpointIn &cp)$/;"	f	class:SparcSystem
unserializeSymtab	./sim/system.hh	/^    virtual void unserializeSymtab(CheckpointIn &cp) {}$/;"	f	class:System
unserializeThread	./cpu/base.hh	/^    virtual void unserializeThread(CheckpointIn &cp, ThreadID tid) {};$/;"	f	class:BaseCPU
unserializeThread	./cpu/kvm/base.cc	/^BaseKvmCPU::unserializeThread(CheckpointIn &cp, ThreadID tid)$/;"	f	class:BaseKvmCPU
unserializeThread	./cpu/minor/cpu.cc	/^MinorCPU::unserializeThread(CheckpointIn &cp, ThreadID thread_id)$/;"	f	class:MinorCPU
unserializeThread	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::unserializeThread(CheckpointIn &cp, ThreadID tid)$/;"	f	class:FullO3CPU
unserializeThread	./cpu/simple/base.cc	/^BaseSimpleCPU::unserializeThread(CheckpointIn &cp, ThreadID tid)$/;"	f	class:BaseSimpleCPU
unserializedCurTick	./sim/serialize.cc	/^    Tick unserializedCurTick;$/;"	m	class:Globals	file:
unset	./mem/ruby/filters/BlockBloomFilter.cc	/^BlockBloomFilter::unset(Addr addr)$/;"	f	class:BlockBloomFilter
unset	./mem/ruby/filters/BulkBloomFilter.cc	/^BulkBloomFilter::unset(Addr addr)$/;"	f	class:BulkBloomFilter
unset	./mem/ruby/filters/H3BloomFilter.cc	/^H3BloomFilter::unset(Addr addr)$/;"	f	class:H3BloomFilter
unset	./mem/ruby/filters/LSB_CountingBloomFilter.cc	/^LSB_CountingBloomFilter::unset(Addr addr)$/;"	f	class:LSB_CountingBloomFilter
unset	./mem/ruby/filters/MultiBitSelBloomFilter.cc	/^MultiBitSelBloomFilter::unset(Addr addr)$/;"	f	class:MultiBitSelBloomFilter
unset	./mem/ruby/filters/MultiGrainBloomFilter.cc	/^MultiGrainBloomFilter::unset(Addr addr)$/;"	f	class:MultiGrainBloomFilter
unset	./mem/ruby/filters/NonCountingBloomFilter.cc	/^NonCountingBloomFilter::unset(Addr addr)$/;"	f	class:NonCountingBloomFilter
unset	./mem/ruby/structures/TimerTable.cc	/^TimerTable::unset(Addr address)$/;"	f	class:TimerTable
unsetReg	./cpu/o3/scoreboard.hh	/^    void unsetReg(PhysRegIndex reg_idx)$/;"	f	class:Scoreboard
unsigned	./python/m5/params.py	/^    unsigned = True$/;"	v	class:Addr
unsigned	./python/m5/params.py	/^    unsigned = True$/;"	v	class:Cycles
unsigned	./python/m5/params.py	/^    unsigned = True$/;"	v	class:MemorySize
unsigned	./python/m5/params.py	/^    unsigned = True$/;"	v	class:MemorySize32
unsignedRSqrtEstimate	./arch/arm/insts/vfp.cc	/^unsignedRSqrtEstimate(uint32_t op)$/;"	f	namespace:ArmISA
unsignedRecipEstimate	./arch/arm/insts/vfp.cc	/^unsignedRecipEstimate(uint32_t op)$/;"	f	namespace:ArmISA
untweak	./arch/micro_asm_test.py	/^    def untweak(self):$/;"	m	class:TestMacroop
unusable	./arch/x86/regs/misc.hh	/^        Bitfield<2> unusable;$/;"	m	namespace:X86ISA
unused	./kern/tru64/tru64.hh	/^        uint32_t     unused[3];         \/\/!< future expansion$/;"	m	struct:Tru64::cpu_info
unused0	./arch/x86/linux/linux.hh	/^        int64_t unused0[3];$/;"	m	struct:X86Linux64::__anon59
unusedCache	./dev/net/i8254xGBe.hh	/^        CacheType unusedCache;$/;"	m	class:IGbE::DescCache
unverifiedInst	./cpu/checker/cpu.hh	/^    DynInstPtr unverifiedInst;$/;"	m	class:Checker
unverifiedMemData	./cpu/checker/cpu.hh	/^    uint8_t *unverifiedMemData;$/;"	m	class:CheckerCPU
unverifiedReq	./cpu/checker/cpu.hh	/^    Request *unverifiedReq;$/;"	m	class:CheckerCPU
unverifiedResult	./cpu/checker/cpu.hh	/^    Result unverifiedResult;$/;"	m	class:CheckerCPU
uops	./arch/arm/insts/mem.hh	/^    StaticInstPtr *uops;$/;"	m	class:ArmISA::Memory
uops	./arch/arm/insts/mem.hh	/^    StaticInstPtr *uops;$/;"	m	class:ArmISA::RfeOp
uops	./arch/arm/insts/mem.hh	/^    StaticInstPtr *uops;$/;"	m	class:ArmISA::SrsOp
uops	./arch/arm/insts/mem64.hh	/^    StaticInstPtr *uops;$/;"	m	class:ArmISA::Memory64
up	./arch/arm/insts/macromem.hh	/^    bool up;$/;"	m	class:ArmISA::MicroMemOp
up	./arch/arm/insts/macromem.hh	/^    bool up;$/;"	m	class:ArmISA::MicroMemPairOp
up	./arch/arm/types.hh	/^            Bitfield<23> up;$/;"	m	namespace:ArmISA
upc	./arch/generic/types.hh	/^    MicroPC upc() const { return _upc; }$/;"	f	class:GenericISA::DelaySlotUPCState
upc	./arch/generic/types.hh	/^    MicroPC upc() const { return _upc; }$/;"	f	class:GenericISA::UPCState
upc	./arch/generic/types.hh	/^    void upc(MicroPC val) { _upc = val; }$/;"	f	class:GenericISA::DelaySlotUPCState
upc	./arch/generic/types.hh	/^    void upc(MicroPC val) { _upc = val; }$/;"	f	class:GenericISA::UPCState
update	./arch/arm/nativetrace.cc	/^Trace::ArmNativeTrace::ThreadState::update(NativeTrace *parent)$/;"	f	class:Trace::Trace::ArmNativeTrace::ThreadState
update	./arch/arm/nativetrace.cc	/^Trace::ArmNativeTrace::ThreadState::update(ThreadContext *tc)$/;"	f	class:Trace::Trace::ArmNativeTrace::ThreadState
update	./arch/isa_parser.py	/^    def update(self, file, contents):$/;"	m	class:ISAParser
update	./arch/x86/nativetrace.cc	/^X86NativeTrace::ThreadState::update(NativeTrace *parent)$/;"	f	class:Trace::X86NativeTrace::ThreadState
update	./arch/x86/nativetrace.cc	/^X86NativeTrace::ThreadState::update(ThreadContext *tc)$/;"	f	class:Trace::X86NativeTrace::ThreadState
update	./base/flags.hh	/^    update(Type flags, Type mask)$/;"	f	class:Flags
update	./base/stats/text.cc	/^ScalarPrint::update(Result val, Result total)$/;"	f	class:Stats::ScalarPrint
update	./cpu/decode_cache.hh	/^    update(PageIt recentest)$/;"	f	class:DecodeCache::AddrMap
update	./cpu/pred/2bit_local.cc	/^LocalBP::update(Addr branch_addr, bool taken, void *bp_history, bool squashed)$/;"	f	class:LocalBP
update	./cpu/pred/bi_mode.cc	/^BiModeBP::update(Addr branchAddr, bool taken, void *bpHistory, bool squashed)$/;"	f	class:BiModeBP
update	./cpu/pred/bpred_unit.cc	/^BPredUnit::update(const InstSeqNum &done_sn, ThreadID tid)$/;"	f	class:BPredUnit
update	./cpu/pred/btb.cc	/^DefaultBTB::update(Addr instPC, const TheISA::PCState &target, ThreadID tid)$/;"	f	class:DefaultBTB
update	./cpu/pred/tournament.cc	/^TournamentBP::update(Addr branch_addr, bool taken, void *bp_history,$/;"	f	class:TournamentBP
update	./cpu/testers/traffic_gen/traffic_gen.cc	/^TrafficGen::update()$/;"	f	class:TrafficGen
update	./dev/virtio/base.cc	/^VirtDescriptor::update()$/;"	f	class:VirtDescriptor
update	./mem/ruby/profiler/AccessTraceForAddress.cc	/^AccessTraceForAddress::update(RubyRequestType type,$/;"	f	class:AccessTraceForAddress
update	./python/m5/util/jobfile.py	/^    def update(self, obj):$/;"	m	class:Data
update	./python/m5/util/sorteddict.py	/^    def update(self, *args, **kwargs):$/;"	m	class:SortedDict
update	./sim/clocked_object.hh	/^    void update() const$/;"	f	class:Clocked
updateAckEvent	./dev/arm/energy_ctrl.hh	/^    EventWrapper<EnergyCtrl, &EnergyCtrl::updatePLAck> updateAckEvent;$/;"	m	class:EnergyCtrl
updateAllCounters	./arch/arm/pmu.cc	/^PMU::updateAllCounters()$/;"	f	class:ArmISA::PMU
updateAttributes	./arch/arm/pagetable.hh	/^    updateAttributes()$/;"	f	struct:ArmISA::TlbEntry
updateBranchData	./cpu/minor/execute.cc	/^Execute::updateBranchData($/;"	f	class:Minor::Execute
updateBranchPrediction	./cpu/minor/fetch2.cc	/^Fetch2::updateBranchPrediction(const BranchData &branch)$/;"	f	class:Minor::Fetch2
updateCP0ReadView	./arch/mips/isa.hh	/^        void updateCP0ReadView(int misc_reg, ThreadID tid) { }$/;"	f	class:MipsISA::ISA
updateCPU	./arch/mips/isa.cc	/^ISA::updateCPU(BaseCPU *cpu)$/;"	f	class:MipsISA::ISA
updateCPUID	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::updateCPUID()$/;"	f	class:X86KvmCPU
updateCache	./arch/alpha/tlb.hh	/^    updateCache(TlbEntry *entry) {$/;"	f	class:AlphaISA::TLB
updateCache	./mem/page_table.hh	/^    inline void updateCache(Addr vaddr, TheISA::TlbEntry entry)$/;"	f	class:PageTableBase
updateChain	./dev/virtio/base.cc	/^VirtDescriptor::updateChain()$/;"	f	class:VirtDescriptor
updateClockPeriod	./sim/clock_domain.cc	/^DerivedClockDomain::updateClockPeriod()$/;"	f	class:DerivedClockDomain
updateClockPeriod	./sim/clocked_object.hh	/^    inline void updateClockPeriod() const$/;"	f	class:Clocked
updateComInstStats	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::updateComInstStats(DynInstPtr &inst)$/;"	f	class:DefaultCommit
updateCommitOrderDep	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::updateCommitOrderDep(TraceInfo* new_record,$/;"	f	class:ElasticTrace
updateCounter	./arch/arm/pmu.cc	/^PMU::updateCounter(CounterId id, CounterState &ctr)$/;"	f	class:ArmISA::PMU
updateCounter	./dev/arm/generic_timer.cc	/^ArchTimer::updateCounter()$/;"	f	class:ArchTimer
updateCycleCounts	./cpu/simple/timing.cc	/^TimingSimpleCPU::updateCycleCounts()$/;"	f	class:TimingSimpleCPU
updateDelayedTicks	./mem/ruby/slicc_interface/Message.hh	/^    void updateDelayedTicks(Tick curTime)$/;"	f	class:Message
updateEvent	./cpu/testers/traffic_gen/traffic_gen.hh	/^    EventWrapper<TrafficGen, &TrafficGen::update> updateEvent;$/;"	m	class:TrafficGen
updateEvents	./sim/stat_control.cc	/^updateEvents()$/;"	f	namespace:Stats
updateExeInstStats	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::updateExeInstStats(DynInstPtr &inst)$/;"	f	class:DefaultIEW
updateExpectedSeqNums	./cpu/minor/fetch1.cc	/^Fetch1::updateExpectedSeqNums(const BranchData &branch)$/;"	f	class:Minor::Fetch1
updateExportContext	./arch/isa_parser.py	/^    def updateExportContext(self):$/;"	m	class:ISAParser
updateFetchStatus	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::updateFetchStatus()$/;"	f	class:DefaultFetch
updateGlobalHistNotTaken	./cpu/pred/tournament.cc	/^TournamentBP::updateGlobalHistNotTaken()$/;"	f	class:TournamentBP
updateGlobalHistReg	./cpu/pred/bi_mode.cc	/^BiModeBP::updateGlobalHistReg(bool taken)$/;"	f	class:BiModeBP
updateGlobalHistTaken	./cpu/pred/tournament.cc	/^TournamentBP::updateGlobalHistTaken()$/;"	f	class:TournamentBP
updateHandyM5Reg	./arch/x86/isa.cc	/^ISA::updateHandyM5Reg(Efer efer, CR0 cr0,$/;"	f	class:X86ISA::ISA
updateHead	./cpu/o3/rob_impl.hh	/^ROB<Impl>::updateHead()$/;"	f	class:ROB
updateIRRV	./arch/x86/interrupts.hh	/^    updateIRRV()$/;"	f	class:X86ISA::Interrupts
updateISRV	./arch/x86/interrupts.hh	/^    updateISRV()$/;"	f	class:X86ISA::Interrupts
updateIntState	./dev/arm/gic_pl390.cc	/^Pl390::updateIntState(int hint)$/;"	f	class:Pl390
updateIntState	./dev/arm/vgic.cc	/^VGic::updateIntState(ContextID ctx_id)$/;"	f	class:VGic
updateIntStatus	./dev/arm/kmi.cc	/^Pl050::updateIntStatus()$/;"	f	class:Pl050
updateIntrInfo	./arch/alpha/interrupts.hh	/^    updateIntrInfo(ThreadContext *tc)$/;"	f	class:AlphaISA::Interrupts
updateIntrInfo	./arch/arm/interrupts.hh	/^    updateIntrInfo(ThreadContext *tc)$/;"	f	class:ArmISA::Interrupts
updateIntrInfo	./arch/mips/interrupts.cc	/^Interrupts::updateIntrInfo(ThreadContext *tc) const$/;"	f	class:MipsISA::Interrupts
updateIntrInfo	./arch/power/interrupts.hh	/^    updateIntrInfo(ThreadContext *tc)$/;"	f	class:PowerISA::Interrupts
updateIntrInfo	./arch/sparc/interrupts.hh	/^    updateIntrInfo(ThreadContext *tc)$/;"	f	class:SparcISA::Interrupts
updateIntrInfo	./arch/x86/interrupts.cc	/^X86ISA::Interrupts::updateIntrInfo(ThreadContext *tc)$/;"	f	class:X86ISA::Interrupts
updateIssueOrderDep	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::updateIssueOrderDep(TraceInfo* new_record)$/;"	f	class:ElasticTrace
updateKvmState	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::updateKvmState()$/;"	f	class:ArmKvmCPU
updateKvmState	./arch/arm/kvm/armv8_cpu.cc	/^ArmV8KvmCPU::updateKvmState()$/;"	f	class:ArmV8KvmCPU
updateKvmState	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::updateKvmState()$/;"	f	class:X86KvmCPU
updateKvmStateCoProc	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::updateKvmStateCoProc(uint64_t id, bool show_warnings)$/;"	f	class:ArmKvmCPU
updateKvmStateCore	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::updateKvmStateCore()$/;"	f	class:ArmKvmCPU
updateKvmStateFPU	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::updateKvmStateFPU()$/;"	f	class:X86KvmCPU
updateKvmStateFPUCommon	./cpu/kvm/x86_cpu.cc	/^updateKvmStateFPUCommon(ThreadContext *tc, T &fpu)$/;"	f	file:
updateKvmStateFPULegacy	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::updateKvmStateFPULegacy()$/;"	f	class:X86KvmCPU
updateKvmStateFPUXSave	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::updateKvmStateFPUXSave()$/;"	f	class:X86KvmCPU
updateKvmStateMSRs	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::updateKvmStateMSRs()$/;"	f	class:X86KvmCPU
updateKvmStateMisc	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::updateKvmStateMisc()$/;"	f	class:ArmKvmCPU
updateKvmStateRegs	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::updateKvmStateRegs()$/;"	f	class:X86KvmCPU
updateKvmStateSRegs	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::updateKvmStateSRegs()$/;"	f	class:X86KvmCPU
updateKvmStateVFP	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::updateKvmStateVFP(uint64_t id, bool show_warnings)$/;"	f	class:ArmKvmCPU
updateLSQNextCycle	./cpu/o3/iew.hh	/^    bool updateLSQNextCycle;$/;"	m	class:DefaultIEW
updateLocalHistNotTaken	./cpu/pred/tournament.cc	/^TournamentBP::updateLocalHistNotTaken(unsigned local_history_idx)$/;"	f	class:TournamentBP
updateLocalHistTaken	./cpu/pred/tournament.cc	/^TournamentBP::updateLocalHistTaken(unsigned local_history_idx)$/;"	f	class:TournamentBP
updateMiscReg	./arch/arm/tlb.cc	/^TLB::updateMiscReg(ThreadContext *tc, ArmTranslationType tranType)$/;"	f	class:TLB
updateMiscRegs	./cpu/o3/dyn_inst.hh	/^    void updateMiscRegs()$/;"	f	class:BaseO3DynInst
updateNPC	./arch/x86/decoder.hh	/^    updateNPC(X86ISA::PCState &nextPC)$/;"	f	class:X86ISA::Decoder
updateNext	./mem/ruby/structures/TimerTable.cc	/^TimerTable::updateNext() const$/;"	f	class:TimerTable
updateOffsetState	./arch/x86/decoder.hh	/^    void updateOffsetState()$/;"	f	class:X86ISA::Decoder
updateOnError	./cpu/CheckerCPU.py	/^    updateOnError = Param.Bool(False,$/;"	v	class:CheckerCPU
updateOnError	./cpu/checker/cpu.hh	/^    bool updateOnError;$/;"	m	class:CheckerCPU
updatePLAck	./dev/arm/energy_ctrl.hh	/^    void updatePLAck() {$/;"	f	class:EnergyCtrl
updatePerfLevel	./sim/dvfs_handler.cc	/^DVFSHandler::UpdateEvent::updatePerfLevel()$/;"	f	class:DVFSHandler::UpdateEvent
updatePerfLevelEvents	./sim/dvfs_handler.hh	/^    UpdatePerfLevelEvents updatePerfLevelEvents;$/;"	m	class:DVFSHandler
updatePortCache	./mem/xbar.hh	/^    inline void updatePortCache(short id, const AddrRange& range) {$/;"	f	class:BaseXBar
updatePowerStats	./mem/dram_ctrl.cc	/^DRAMCtrl::Rank::updatePowerStats()$/;"	f	class:DRAMCtrl::Rank
updateRegDep	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::updateRegDep(const DynInstPtr &dyn_inst)$/;"	f	class:ElasticTrace
updateRegMap	./arch/arm/isa.hh	/^        updateRegMap(CPSR cpsr)$/;"	f	class:ArmISA::ISA
updateResponse	./mem/snoop_filter.cc	/^SnoopFilter::updateResponse(const Packet* cpkt, const SlavePort& slave_port)$/;"	f	class:SnoopFilter
updateRoute	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    updateRoute(int vc, int outport, Cycles curTime)$/;"	f	class:InputUnit_d
updateRunPri	./dev/arm/gic_pl390.cc	/^Pl390::updateRunPri()$/;"	f	class:Pl390
updateSignals	./dev/i2c/bus.cc	/^I2CBus::updateSignals(PacketPtr pkt)$/;"	f	class:I2CBus
updateSnoopForward	./mem/snoop_filter.cc	/^SnoopFilter::updateSnoopForward(const Packet* cpkt,$/;"	f	class:SnoopFilter
updateSnoopResponse	./mem/snoop_filter.cc	/^SnoopFilter::updateSnoopResponse(const Packet* cpkt,$/;"	f	class:SnoopFilter
updateState	./dev/storage/ide_disk.cc	/^IdeDisk::updateState(DevAction_t action)$/;"	f	class:IdeDisk
updateStatus	./cpu/o3/commit_impl.hh	/^DefaultCommit<Impl>::updateStatus()$/;"	f	class:DefaultCommit
updateStatus	./cpu/o3/decode_impl.hh	/^DefaultDecode<Impl>::updateStatus()$/;"	f	class:DefaultDecode
updateStatus	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::updateStatus()$/;"	f	class:DefaultIEW
updateStatus	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::updateStatus()$/;"	f	class:DefaultRename
updateStatusView	./arch/mips/mt.hh	/^updateStatusView(TC *tc)$/;"	f	namespace:MipsISA
updateSum	./mem/stack_dist_calc.cc	/^StackDistCalc::updateSum(Node* node, bool from_left,$/;"	f	class:StackDistCalc
updateSumsLeavesToRoot	./mem/stack_dist_calc.cc	/^StackDistCalc::updateSumsLeavesToRoot(Node* node, bool is_new_leaf)$/;"	f	class:StackDistCalc
updateTCStateCoProc	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::updateTCStateCoProc(uint64_t id, bool show_warnings)$/;"	f	class:ArmKvmCPU
updateTCStateCore	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::updateTCStateCore()$/;"	f	class:ArmKvmCPU
updateTCStateMisc	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::updateTCStateMisc()$/;"	f	class:ArmKvmCPU
updateTCStateVFP	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::updateTCStateVFP(uint64_t id, bool show_warnings)$/;"	f	class:ArmKvmCPU
updateTCStatusView	./arch/mips/mt.hh	/^updateTCStatusView(TC *tc)$/;"	f	namespace:MipsISA
updateTail	./cpu/o3/rob_impl.hh	/^ROB<Impl>::updateTail()$/;"	f	class:ROB
updateThisCycle	./cpu/checker/cpu.hh	/^    bool updateThisCycle;$/;"	m	class:Checker
updateThreadContext	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::updateThreadContext()$/;"	f	class:ArmKvmCPU
updateThreadContext	./arch/arm/kvm/armv8_cpu.cc	/^ArmV8KvmCPU::updateThreadContext()$/;"	f	class:ArmV8KvmCPU
updateThreadContext	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::updateThreadContext()$/;"	f	class:X86KvmCPU
updateThreadContextFPU	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::updateThreadContextFPU(const struct kvm_fpu &fpu)$/;"	f	class:X86KvmCPU
updateThreadContextFPUCommon	./cpu/kvm/x86_cpu.cc	/^updateThreadContextFPUCommon(ThreadContext *tc, const T &fpu)$/;"	f	file:
updateThreadContextMSRs	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::updateThreadContextMSRs()$/;"	f	class:X86KvmCPU
updateThreadContextRegs	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::updateThreadContextRegs(const struct kvm_regs &regs,$/;"	f	class:X86KvmCPU
updateThreadContextSRegs	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::updateThreadContextSRegs(const struct kvm_sregs &sregs)$/;"	f	class:X86KvmCPU
updateThreadContextXSave	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::updateThreadContextXSave(const struct kvm_xsave &kxsave)$/;"	f	class:X86KvmCPU
updateThreadPriority	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::updateThreadPriority()$/;"	f	class:FullO3CPU
updateTree	./mem/stack_dist_calc.cc	/^StackDistCalc::updateTree()$/;"	f	class:StackDistCalc
updateVaddr	./arch/alpha/pagetable.hh	/^    updateVaddr(Addr new_vaddr)$/;"	f	struct:AlphaISA::TlbEntry
updateVaddr	./arch/arm/pagetable.hh	/^    updateVaddr(Addr new_vaddr)$/;"	f	struct:ArmISA::TlbEntry
updateVaddr	./arch/mips/pagetable.hh	/^    updateVaddr(Addr new_vaddr) {}$/;"	f	struct:MipsISA::TlbEntry
updateVaddr	./arch/power/tlb.hh	/^    updateVaddr(Addr new_vaddr)$/;"	f	struct:PowerISA::TlbEntry
updateVaddr	./arch/sparc/pagetable.hh	/^    updateVaddr(Addr new_vaddr)$/;"	f	struct:SparcISA::TlbEntry
updateVaddr	./arch/x86/pagetable.hh	/^        updateVaddr(Addr new_vaddr)$/;"	f	struct:X86ISA::TlbEntry
updateVideoParams	./dev/arm/pl111.cc	/^Pl111::updateVideoParams()$/;"	f	class:Pl111
update_credit	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh	/^    update_credit(int in_vc, int credit)$/;"	f	class:InputUnit_d
update_credit	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.hh	/^    inline void update_credit(int credit)   { m_credit_count = credit; }$/;"	f	class:VirtualChannel_d
update_data	./dev/Device.py	/^    update_data = Param.Bool(False, "Update the data that is returned on writes")$/;"	v	class:IsaFake
update_incredit	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^Router_d::update_incredit(int in_port, int in_vc, int credit)$/;"	f	class:Router_d
update_sw_winner	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^Router_d::update_sw_winner(int inport, flit_d *t_flit)$/;"	f	class:Router_d
update_sw_winner	./mem/ruby/network/garnet/fixed-pipeline/Switch_d.hh	/^    inline void update_sw_winner(int inport, flit_d *t_flit)$/;"	f	class:Switch_d
update_vc	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.cc	/^OutputUnit_d::update_vc(int vc, int in_port, int in_vc)$/;"	f	class:OutputUnit_d
updatedQueues	./cpu/o3/iew.hh	/^    bool updatedQueues;$/;"	m	class:DefaultIEW
upper	./arch/arm/isa.hh	/^            uint32_t upper;$/;"	m	struct:ArmISA::ISA::MiscRegLUTEntry
upperAddr	./dev/arm/ufs_device.hh	/^        uint32_t upperAddr;$/;"	m	struct:UFSHostDevice::UFSHCDSGEntry
upperBound	./base/loader/symtab.hh	/^    upperBound(Addr addr, ATable::const_iterator &iter) const$/;"	f	class:SymbolTable
uppercase	./base/cprintf_formats.hh	/^    bool uppercase;$/;"	m	struct:cp::Format
uptime	./arch/alpha/linux/linux.hh	/^       int64_t  uptime;    \/* Seconds since boot *\/$/;"	m	struct:AlphaLinux::__anon51
uptime	./arch/arm/linux/linux.hh	/^        int32_t  uptime;    \/* Seconds since boot *\/$/;"	m	struct:ArmLinux32::__anon76
uptime	./arch/arm/linux/linux.hh	/^        int64_t  uptime;    \/* Seconds since boot *\/$/;"	m	struct:ArmLinux64::__anon79
uptime	./arch/mips/linux/linux.hh	/^       int32_t  uptime;    \/* Seconds since boot *\/$/;"	m	struct:MipsLinux::__anon84
uptime	./arch/sparc/linux/linux.hh	/^        int32_t  uptime;    \/* Seconds since boot *\/$/;"	m	struct:Sparc32Linux::__anon47
uptime	./arch/sparc/linux/linux.hh	/^        int64_t  uptime;    \/* Seconds since boot *\/$/;"	m	struct:SparcLinux::__anon45
uptime	./arch/x86/linux/linux.hh	/^        int64_t  uptime;    \/* Seconds since boot *\/$/;"	m	struct:X86Linux64::__anon61
uptime	./arch/x86/linux/linux.hh	/^       int32_t  uptime;    \/* Seconds since boot *\/$/;"	m	struct:X86Linux32::__anon63
ura	./arch/arm/insts/macromem.hh	/^    IntRegIndex ura, urb, urc;$/;"	m	class:ArmISA::MicroSetPCCPSR
ura	./arch/arm/insts/macromem.hh	/^    RegIndex dest, ura;$/;"	m	class:ArmISA::MicroNeonMemOp
ura	./arch/arm/insts/macromem.hh	/^    RegIndex ura, urb, urc;$/;"	m	class:ArmISA::MicroIntOp
ura	./arch/arm/insts/macromem.hh	/^    RegIndex ura, urb, urc;$/;"	m	class:ArmISA::MicroIntRegOp
ura	./arch/arm/insts/macromem.hh	/^    RegIndex ura, urb, urc;$/;"	m	class:ArmISA::MicroIntRegXOp
ura	./arch/arm/insts/macromem.hh	/^    RegIndex ura, urb;$/;"	m	class:ArmISA::MicroIntImmOp
ura	./arch/arm/insts/macromem.hh	/^    RegIndex ura, urb;$/;"	m	class:ArmISA::MicroIntImmXOp
ura	./arch/arm/insts/macromem.hh	/^    RegIndex ura, urb;$/;"	m	class:ArmISA::MicroIntMov
ura	./arch/arm/insts/mem.hh	/^    IntRegIndex ura, urb, urc;$/;"	m	class:ArmISA::RfeOp
urb	./arch/arm/insts/macromem.hh	/^    IntRegIndex ura, urb, urc;$/;"	m	class:ArmISA::MicroSetPCCPSR
urb	./arch/arm/insts/macromem.hh	/^    RegIndex dest, dest2, urb;$/;"	m	class:ArmISA::MicroMemPairOp
urb	./arch/arm/insts/macromem.hh	/^    RegIndex ura, urb, urc;$/;"	m	class:ArmISA::MicroIntOp
urb	./arch/arm/insts/macromem.hh	/^    RegIndex ura, urb, urc;$/;"	m	class:ArmISA::MicroIntRegOp
urb	./arch/arm/insts/macromem.hh	/^    RegIndex ura, urb, urc;$/;"	m	class:ArmISA::MicroIntRegXOp
urb	./arch/arm/insts/macromem.hh	/^    RegIndex ura, urb;$/;"	m	class:ArmISA::MicroIntImmOp
urb	./arch/arm/insts/macromem.hh	/^    RegIndex ura, urb;$/;"	m	class:ArmISA::MicroIntImmXOp
urb	./arch/arm/insts/macromem.hh	/^    RegIndex ura, urb;$/;"	m	class:ArmISA::MicroIntMov
urb	./arch/arm/insts/mem.hh	/^    IntRegIndex ura, urb, urc;$/;"	m	class:ArmISA::RfeOp
urc	./arch/arm/insts/macromem.hh	/^    IntRegIndex ura, urb, urc;$/;"	m	class:ArmISA::MicroSetPCCPSR
urc	./arch/arm/insts/macromem.hh	/^    RegIndex ura, urb, urc;$/;"	m	class:ArmISA::MicroIntOp
urc	./arch/arm/insts/macromem.hh	/^    RegIndex ura, urb, urc;$/;"	m	class:ArmISA::MicroIntRegOp
urc	./arch/arm/insts/macromem.hh	/^    RegIndex ura, urb, urc;$/;"	m	class:ArmISA::MicroIntRegXOp
urc	./arch/arm/insts/mem.hh	/^    IntRegIndex ura, urb, urc;$/;"	m	class:ArmISA::RfeOp
urp	./base/inet.hh	/^    uint16_t urp() const { return ntohs(th_urp); }$/;"	f	struct:Net::TcpHdr
urti	./arch/alpha/osfpal.hh	/^        urti = 0x92,$/;"	e	enum:PAL::__anon50
us	./sim/core.cc	/^Tick us;$/;"	m	namespace:SimClock::Int	file:
us	./sim/core.cc	/^double us;$/;"	m	namespace:SimClock::Float	file:
usage	./mem/slicc/main.py	/^usage="%prog [options] <files> ... "$/;"	v
usage	./python/m5/main.py	/^usage="%prog [gem5 options] script.py [script options]"$/;"	v
usage	./python/m5/options.py	/^    def usage(self, exitcode=None):$/;"	m	class:OptionParser
usage	./unittest/initest.cc	/^usage()$/;"	f
usage	./unittest/symtest.cc	/^usage(const char *progname)$/;"	f
usb_fake	./dev/arm/RealView.py	/^    usb_fake       = IsaFake(pio_addr=0x1B000000, pio_size=0x1ffff)$/;"	v	class:VExpress_EMM
useArchPT	./sim/Process.py	/^                            table in an architecture-specific format')$/;"	v	class:Process
useArchPT	./sim/process.hh	/^    bool useArchPT;$/;"	m	class:Process
useCoalescedMMIO	./cpu/kvm/BaseKvmCPU.py	/^    useCoalescedMMIO = Param.Bool(False, "Use coalesced MMIO (EXPERIMENTAL)")$/;"	v
useDefaultRange	./mem/xbar.hh	/^    const bool useDefaultRange;$/;"	m	class:BaseXBar
useGzip	./proto/protoio.hh	/^    bool useGzip;$/;"	m	class:ProtoInputStream
useImm	./arch/arm/types.hh	/^        Bitfield<25>     useImm;$/;"	m	namespace:ArmISA
useMasterId	./mem/cache/prefetch/stride.hh	/^    const bool useMasterId;$/;"	m	class:StridePrefetcher
useOccupancy	./mem/ruby/structures/AbstractReplacementPolicy.hh	/^    virtual bool useOccupancy() const { return false; }$/;"	f	class:AbstractReplacementPolicy
usePerfOverflow	./cpu/kvm/BaseKvmCPU.py	/^    usePerfOverflow = Param.Bool(False, "Use perf event overflow counters (EXPERIMENTAL)")$/;"	v
useTso	./dev/net/i8254xGBe.hh	/^        bool useTso;$/;"	m	class:IGbE::TxDescCache
useXSave	./cpu/kvm/X86KvmCPU.py	/^    useXSave = Param.Bool(True, "Use XSave to synchronize FPU\/SIMD registers")$/;"	v
useXSave	./cpu/kvm/x86_cpu.hh	/^    bool useXSave;$/;"	m	class:X86KvmCPU
use_default_range	./mem/XBar.py	/^                                       "the default port")$/;"	v	class:BaseXBar
use_master_id	./mem/cache/prefetch/Prefetcher.py	/^    use_master_id = Param.Bool(True, "Use master id based history")$/;"	v	class:StridePrefetcher
useable	./arch/x86/linux/process.cc	/^    Bitfield<6> useable;$/;"	v
usec	./base/time.hh	/^    long usec() const { return _time.tv_nsec \/ NSEC_PER_USEC; }$/;"	f	class:Time
usec	./base/time.hh	/^    void usec(long usec) { _time.tv_nsec = usec * NSEC_PER_USEC; }$/;"	f	class:Time
used	./arch/sparc/pagetable.hh	/^    bool used;$/;"	m	struct:SparcISA::TlbEntry
used	./dev/virtio/base.hh	/^    VirtRing<struct vring_used_elem> used;$/;"	m	class:VirtQueue
used	./dev/virtio/virtio_ring.h	/^    struct vring_used *used;$/;"	m	struct:vring	typeref:struct:vring::vring_used
usedCache	./dev/net/i8254xGBe.hh	/^        CacheType usedCache;$/;"	m	class:IGbE::DescCache
usedEntries	./arch/sparc/tlb.hh	/^    int usedEntries;$/;"	m	class:SparcISA::TLB
usedEntries	./cpu/pred/ras.hh	/^    unsigned usedEntries;$/;"	m	class:ReturnAddrStack
usedIQ	./cpu/o3/comm.hh	/^        bool usedIQ;$/;"	m	struct:TimeBufStruct::iewComm
usedLSQ	./cpu/o3/comm.hh	/^        bool usedLSQ;$/;"	m	struct:TimeBufStruct::iewComm
usedPorts	./cpu/o3/lsq_unit.hh	/^    int usedPorts;$/;"	m	class:LSQUnit
usedRAS	./cpu/pred/bpred_unit.hh	/^        bool usedRAS;$/;"	m	struct:BPredUnit::PredictorHistory
usedRAS	./cpu/pred/bpred_unit.hh	/^    Stats::Scalar usedRAS;$/;"	m	class:BPredUnit
usedROB	./cpu/o3/comm.hh	/^        bool usedROB; \/\/ *R$/;"	m	struct:TimeBufStruct::commitComm
user	./arch/alpha/kernel_stats.hh	/^enum cpu_mode { kernel, user, idle, cpu_mode_num };$/;"	e	enum:AlphaISA::Kernel::cpu_mode
user	./arch/alpha/stacktrace.hh	/^        user = 1,$/;"	e	enum:AlphaISA::StackTrace::__anon49
user	./arch/arm/kernel_stats.hh	/^enum cpu_mode { hypervisor, kernel, user, idle, cpu_mode_num };$/;"	e	enum:ArmISA::Kernel::cpu_mode
user	./arch/arm/table_walker.hh	/^        bool user() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
user	./arch/mips/kernel_stats.hh	/^enum cpu_mode { kernel, user, idle, cpu_mode_num };$/;"	e	enum:MipsISA::Kernel::cpu_mode
user	./arch/mips/stacktrace.hh	/^    static const int user = 1;$/;"	m	class:MipsISA::StackTrace
user	./arch/power/kernel_stats.hh	/^enum cpu_mode { hypervisor, kernel, user, idle, cpu_mode_num };$/;"	e	enum:PowerISA::Kernel::cpu_mode
user	./arch/power/stacktrace.hh	/^    static const int user = 1;$/;"	m	class:PowerISA::StackTrace
user	./arch/sparc/kernel_stats.hh	/^enum cpu_mode { hypervisor, kernel, user, idle, cpu_mode_num };$/;"	e	enum:SparcISA::Kernel::cpu_mode
user	./arch/x86/faults.hh	/^            Bitfield<2> user;$/;"	m	class:X86ISA::PageFault
user	./arch/x86/kernel_stats.hh	/^    user = ring3,$/;"	e	enum:X86ISA::Kernel::cpu_mode
user	./arch/x86/pagetable.hh	/^        bool user;$/;"	m	struct:X86ISA::TlbEntry
user	./arch/x86/stacktrace.hh	/^        static const int user = 1;$/;"	m	class:X86ISA::StackTrace
user1	./dev/pci/copy_engine_defs.hh	/^    uint64_t user1;$/;"	m	struct:CopyEngineReg::DmaDesc
user2	./dev/pci/copy_engine_defs.hh	/^    uint64_t user2;$/;"	m	struct:CopyEngineReg::DmaDesc
userApp	./base/cp_annotate.hh	/^    std::map<std::string, SymbolTable*> userApp;$/;"	m	class:CPA
userTable	./arch/arm/table_walker.hh	/^        bool userTable;$/;"	m	class:ArmISA::TableWalker::WalkerState
userTable	./arch/arm/table_walker.hh	/^        uint8_t userTable() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
user_apps	./base/CPA.py	/^    user_apps = VectorParam.String([], "List of apps to get symbols for")$/;"	v	class:CPA
ushared_state	./kern/tru64/tru64.hh	/^    struct ushared_state {$/;"	s	class:Tru64
using_network_tester	./mem/ruby/system/Sequencer.py	/^    using_network_tester = Param.Bool(False, "")$/;"	v	class:RubySequencer
using_ruby_tester	./mem/ruby/system/Sequencer.py	/^    using_ruby_tester = Param.Bool(False, "")$/;"	v	class:DMASequencer
using_ruby_tester	./mem/ruby/system/Sequencer.py	/^    using_ruby_tester = Param.Bool(False, "")$/;"	v	class:RubyPort
usleep_thread	./kern/tru64/tru64_syscalls.hh	/^        usleep_thread = 251,$/;"	e	enum:SystemCalls::__anon102
usr	./arch/x86/regs/misc.hh	/^        Bitfield<16> usr; \/\/ User mode$/;"	m	namespace:X86ISA
uswitch	./kern/tru64/tru64_syscalls.hh	/^        uswitch = 250,$/;"	e	enum:SystemCalls::__anon102
ut	./arch/mips/dt_constants.hh	/^    Bitfield<30>     ut;$/;"	m	namespace:MipsISA
utc_adjtime	./kern/tru64/tru64_syscalls.hh	/^        utc_adjtime = 220,$/;"	e	enum:SystemCalls::__anon102
utc_gettime	./kern/tru64/tru64_syscalls.hh	/^        utc_gettime = 219,$/;"	e	enum:SystemCalls::__anon102
utcmd	./dev/net/i8254xGBe_defs.hh	/^inline int utcmd(TxDesc *d) { assert(isContext(d)); return bits(d->d2,24,31); }$/;"	f	namespace:iGbReg::TxdOp
utilization	./mem/xbar.hh	/^        Stats::Formula utilization;$/;"	m	class:BaseXBar::Layer
utimes	./kern/tru64/tru64_syscalls.hh	/^        utimes = 138,$/;"	e	enum:SystemCalls::__anon102
utimesFunc	./sim/syscall_emul.hh	/^utimesFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
utsname	./kern/linux/linux.hh	/^    struct utsname {$/;"	s	class:Linux
utsname	./kern/operatingsystem.hh	/^    } utsname;$/;"	t	class:OperatingSystem	typeref:struct:OperatingSystem::__anon92
utsname	./kern/solaris/solaris.hh	/^    typedef struct utsname {$/;"	s	class:Solaris
utsname	./kern/solaris/solaris.hh	/^    } utsname;$/;"	t	class:Solaris	typeref:struct:Solaris::utsname
utsname	./kern/tru64/tru64.hh	/^    struct utsname {$/;"	s	class:Tru64
uwxn	./arch/arm/miscregs.hh	/^        Bitfield<20>   uwxn;    \/\/ Unprivileged write permission implies EL1 XN$/;"	m	namespace:ArmISA
ux	./arch/mips/pra_constants.hh	/^    Bitfield<5>      ux;$/;"	m	namespace:MipsISA
ux	./arch/power/miscregs.hh	/^    Bitfield<27> ux;$/;"	m	namespace:PowerISA
v	./arch/arm/miscregs.hh	/^        Bitfield<13>   v;       \/\/ Vectors bit (AArch32 only)$/;"	m	namespace:ArmISA
v	./arch/arm/miscregs.hh	/^        Bitfield<28> v;$/;"	m	namespace:ArmISA
v	./arch/arm/remote_gdb.hh	/^          uint32_t v[32*4];$/;"	m	struct:ArmISA::RemoteGDB::AArch64GdbRegCache::__anon68
v	./arch/mips/pra_constants.hh	/^    Bitfield<1>      v;     \/\/ Valid Bit$/;"	m	namespace:MipsISA
v	./arch/x86/regs/misc.hh	/^        Bitfield<11> v; \/\/ I\/O register pair enable (valid)$/;"	m	namespace:X86ISA
vAddr	./cpu/base.hh	/^    Addr vAddr;$/;"	m	struct:AddressMonitor
vBackPorch	./dev/pixelpump.hh	/^    unsigned vBackPorch;$/;"	m	struct:DisplayTimings
vFrontPorch	./dev/pixelpump.hh	/^    unsigned vFrontPorch;$/;"	m	struct:DisplayTimings
vIntPosted	./dev/arm/vgic.hh	/^    bool        vIntPosted[VGIC_CPU_MAX];$/;"	m	class:VGic
vSync	./dev/pixelpump.hh	/^    unsigned vSync;$/;"	m	struct:DisplayTimings
v_back_porch	./dev/arm/hdlcd.hh	/^    TimingReg v_back_porch;         \/**< Vertical back porch width register *\/$/;"	m	class:HDLcd
v_data	./dev/arm/hdlcd.hh	/^    TimingReg v_data;               \/**< Vertical data width register *\/$/;"	m	class:HDLcd
v_front_porch	./dev/arm/hdlcd.hh	/^    TimingReg v_front_porch;        \/**< Vertical front porch width register *\/$/;"	m	class:HDLcd
v_sync	./dev/arm/hdlcd.hh	/^    TimingReg v_sync;               \/**< Vertical sync width register *\/$/;"	m	class:HDLcd
va	./arch/arm/miscregs.hh	/^        Bitfield<8>      va;$/;"	m	namespace:ArmISA
va	./arch/sparc/pagetable.hh	/^    Addr va()    const { assert(populated); return bits(entry,41,0); }$/;"	f	class:SparcISA::TteTag
va	./arch/sparc/pagetable.hh	/^    Addr va;$/;"	m	struct:SparcISA::TlbRange
vaddr	./arch/alpha/faults.hh	/^    VAddr vaddr;$/;"	m	class:AlphaISA::DtbFault
vaddr	./arch/arm/table_walker.hh	/^        Addr vaddr;$/;"	m	class:ArmISA::TableWalker::WalkerState
vaddr	./arch/mips/faults.hh	/^    Addr vaddr;$/;"	m	class:MipsISA::AddressFault
vaddr	./arch/mips/pra_constants.hh	/^    Bitfield<63, 3> vaddr;$/;"	m	namespace:MipsISA
vaddr	./arch/sparc/faults.hh	/^    Addr vaddr;$/;"	m	class:SparcISA::FastDataAccessMMUMiss
vaddr	./arch/sparc/faults.hh	/^    Addr vaddr;$/;"	m	class:SparcISA::FastInstructionAccessMMUMiss
vaddr	./arch/x86/pagetable.hh	/^        Addr vaddr;$/;"	m	struct:X86ISA::TlbEntry
vaddr	./mem/page_table.hh	/^        Addr vaddr;$/;"	m	struct:PageTableBase::cacheElement
vaddr	./sim/faults.hh	/^    Addr vaddr;$/;"	m	class:GenericAlignmentFault
vaddr	./sim/faults.hh	/^    Addr vaddr;$/;"	m	class:GenericPageTableFault
vaddr_tainted	./arch/arm/table_walker.hh	/^        Addr vaddr_tainted;$/;"	m	class:ArmISA::TableWalker::WalkerState
val	./arch/x86/regs/misc.hh	/^        Bitfield<63> val; \/\/ Valid$/;"	m	namespace:X86ISA
val	./cpu/base.hh	/^    uint64_t val;$/;"	m	struct:AddressMonitor
val	./dev/arm/hdlcd.hh	/^        Bitfield<11,0>  val;$/;"	m	class:HDLcd
val	./kern/tru64/tru64.hh	/^    typedef struct { int val[2]; } quad;$/;"	m	struct:Tru64::__anon104
valid	./arch/alpha/pagetable.hh	/^    bool valid() const { return (entry >>  0) & 0x1; }$/;"	f	struct:AlphaISA::PageTableEntry
valid	./arch/alpha/pagetable.hh	/^    bool valid;             \/\/ valid page table entry$/;"	m	struct:AlphaISA::TlbEntry
valid	./arch/alpha/stacktrace.hh	/^    bool valid() const { return tc != NULL; }$/;"	f	class:AlphaISA::StackTrace
valid	./arch/arm/pagetable.hh	/^    bool valid;$/;"	m	struct:ArmISA::TlbEntry
valid	./arch/arm/stacktrace.hh	/^    bool valid() const { return tc != NULL; }$/;"	f	class:ArmISA::StackTrace
valid	./arch/mips/stacktrace.hh	/^    bool valid() const { return tc != NULL; }$/;"	f	class:MipsISA::StackTrace
valid	./arch/power/stacktrace.hh	/^    valid() const$/;"	f	class:PowerISA::StackTrace
valid	./arch/sparc/pagetable.hh	/^    bool valid() const { assert(populated); return !bits(entry,62,62); }$/;"	f	class:SparcISA::TteTag
valid	./arch/sparc/pagetable.hh	/^    bool valid() const { return bits(entry4u,63,63) && populated; }$/;"	f	class:SparcISA::PageTableEntry
valid	./arch/sparc/pagetable.hh	/^    bool valid;$/;"	m	struct:SparcISA::TlbEntry
valid	./arch/x86/regs/misc.hh	/^        Bitfield<11> valid; \/\/ MTRR pair enable$/;"	m	namespace:X86ISA
valid	./arch/x86/stacktrace.hh	/^        bool valid() const { return tc != NULL; }$/;"	f	class:X86ISA::StackTrace
valid	./base/addr_range.hh	/^    bool valid() const { return _start <= _end; }$/;"	f	class:AddrRange
valid	./base/stats/text.cc	/^Text::valid() const$/;"	f	class:Stats::Text
valid	./cpu/pred/btb.cc	/^DefaultBTB::valid(Addr instPC, ThreadID tid)$/;"	f	class:DefaultBTB
valid	./cpu/pred/btb.hh	/^        bool valid;$/;"	m	struct:DefaultBTB::BTBEntry
valid	./cpu/timebuf.hh	/^    void valid(int idx) const$/;"	f	class:TimeBuffer
valid	./mem/page_table.hh	/^        bool valid;$/;"	m	struct:PageTableBase::cacheElement
valid	./mem/xbar.hh	/^        bool valid;$/;"	m	struct:BaseXBar::PortCache
validDomainID	./sim/dvfs_handler.cc	/^DVFSHandler::validDomainID(DomainID domain_id) const$/;"	f	class:DVFSHandler
validInsts	./cpu/o3/rename_impl.hh	/^DefaultRename<Impl>::validInsts()$/;"	f	class:DefaultRename
validInstsFromRename	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::validInstsFromRename()$/;"	f	class:DefaultIEW
validLFST	./cpu/o3/store_set.hh	/^    std::vector<bool> validLFST;$/;"	m	class:StoreSet
validModes	./arch/mips/dt_constants.hh	/^    Bitfield<6,  5>  validModes;$/;"	m	namespace:MipsISA
validPerfLevel	./sim/clock_domain.hh	/^    bool validPerfLevel(PerfLevel perf_level) const {$/;"	f	class:SrcClockDomain
validSSIT	./cpu/o3/store_set.hh	/^    std::vector<bool> validSSIT;$/;"	m	class:StoreSet
validSyscallNumber	./kern/tru64/tru64_syscalls.hh	/^    static bool validSyscallNumber(int num) {$/;"	f	class:SystemCalls
validVirtualAddress	./arch/alpha/tlb.hh	/^    validVirtualAddress(Addr vaddr)$/;"	f	class:AlphaISA::TLB
validVirtualAddress	./arch/sparc/tlb.cc	/^TLB::validVirtualAddress(Addr va, bool am)$/;"	f	class:SparcISA::TLB
validate	./cpu/activity.cc	/^ActivityRecorder::validate()$/;"	f	class:ActivityRecorder
validateExecution	./cpu/checker/cpu_impl.hh	/^Checker<Impl>::validateExecution(DynInstPtr &inst)$/;"	f	class:Checker
validateInst	./cpu/checker/cpu_impl.hh	/^Checker<Impl>::validateInst(DynInstPtr &inst)$/;"	f	class:Checker
validateStatName	./base/statistics.cc	/^validateStatName(const string &name)$/;"	f	namespace:Stats
validateState	./cpu/checker/cpu_impl.hh	/^Checker<Impl>::validateState()$/;"	f	class:Checker
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<ArmSev>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<DataAbort>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<FastInterrupt>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<FlushPipe>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<HypervisorCall>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<HypervisorTrap>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<IllegalInstSetStateFault>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<Interrupt>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<PCAlignmentFault>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<PrefetchAbort>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<Reset>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<SPAlignmentFault>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<SecureMonitorCall>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<SecureMonitorTrap>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<SupervisorCall>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<SupervisorTrap>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<SystemError>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<UndefinedInstruction>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<VirtualDataAbort>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<VirtualFastInterrupt>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.cc	/^template<> ArmFault::FaultVals ArmFaultVals<VirtualInterrupt>::vals = {$/;"	m	class:ArmISA::ArmFaultVals	file:
vals	./arch/arm/faults.hh	/^    static FaultVals vals;$/;"	m	class:ArmISA::ArmFaultVals
vals	./arch/mips/faults.cc	/^template <> FaultVals MipsFault<AddressErrorFault>::vals =$/;"	m	class:MipsISA::MipsFault	file:
vals	./arch/mips/faults.cc	/^template <> FaultVals MipsFault<BreakpointFault>::vals =$/;"	m	class:MipsISA::MipsFault	file:
vals	./arch/mips/faults.cc	/^template <> FaultVals MipsFault<CoprocessorUnusableFault>::vals =$/;"	m	class:MipsISA::MipsFault	file:
vals	./arch/mips/faults.cc	/^template <> FaultVals MipsFault<DspStateDisabledFault>::vals =$/;"	m	class:MipsISA::MipsFault	file:
vals	./arch/mips/faults.cc	/^template <> FaultVals MipsFault<IntegerOverflowFault>::vals =$/;"	m	class:MipsISA::MipsFault	file:
vals	./arch/mips/faults.cc	/^template <> FaultVals MipsFault<InterruptFault>::vals =$/;"	m	class:MipsISA::MipsFault	file:
vals	./arch/mips/faults.cc	/^template <> FaultVals MipsFault<MachineCheckFault>::vals =$/;"	m	class:MipsISA::MipsFault	file:
vals	./arch/mips/faults.cc	/^template <> FaultVals MipsFault<NonMaskableInterrupt>::vals =$/;"	m	class:MipsISA::MipsFault	file:
vals	./arch/mips/faults.cc	/^template <> FaultVals MipsFault<ReservedInstructionFault>::vals =$/;"	m	class:MipsISA::MipsFault	file:
vals	./arch/mips/faults.cc	/^template <> FaultVals MipsFault<ResetFault>::vals =$/;"	m	class:MipsISA::MipsFault	file:
vals	./arch/mips/faults.cc	/^template <> FaultVals MipsFault<SoftResetFault>::vals =$/;"	m	class:MipsISA::MipsFault	file:
vals	./arch/mips/faults.cc	/^template <> FaultVals MipsFault<SystemCallFault>::vals =$/;"	m	class:MipsISA::MipsFault	file:
vals	./arch/mips/faults.cc	/^template <> FaultVals MipsFault<ThreadFault>::vals =$/;"	m	class:MipsISA::MipsFault	file:
vals	./arch/mips/faults.cc	/^template <> FaultVals MipsFault<TlbInvalidFault>::vals =$/;"	m	class:MipsISA::MipsFault	file:
vals	./arch/mips/faults.cc	/^template <> FaultVals MipsFault<TlbRefillFault>::vals =$/;"	m	class:MipsISA::MipsFault	file:
vals	./arch/mips/faults.cc	/^template <> FaultVals MipsFault<TrapFault>::vals =$/;"	m	class:MipsISA::MipsFault	file:
vals	./arch/mips/faults.cc	/^template <> MipsFaultBase::FaultVals MipsFault<TlbModifiedFault>::vals =$/;"	m	class:MipsISA::MipsFault	file:
vals	./arch/mips/faults.hh	/^    static FaultVals vals;$/;"	m	class:MipsISA::MipsFault
vals	./arch/sparc/faults.cc	/^    SparcFault<CleanWindow>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<CpuMondo>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<DataAccessError>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<DataAccessException>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<DataAccessProtection>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<DataInvalidTSBEntry>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<DataRealTranslationMiss>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<DevMondo>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<DivisionByZero>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<ExternallyInitiatedReset>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<FastDataAccessMMUMiss>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<FastDataAccessProtection>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<FastInstructionAccessMMUMiss>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<FillNNormal>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<FillNOther>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<FpDisabled>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<FpExceptionIEEE754>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<FpExceptionOther>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<HstickMatch>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<IllegalInstruction>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<InstructionAccessError>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<InstructionAccessException>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<InstructionBreakpoint>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<InstructionInvalidTSBEntry>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<InstructionRealTranslationMiss>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<InternalProcessorError>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<InterruptLevelN>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<InterruptVector>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<LDDFMemAddressNotAligned>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<LDQFMemAddressNotAligned>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<MemAddressNotAligned>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<PAWatchpoint>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<PowerOnReset>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<PrivilegedAction>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<PrivilegedOpcode>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<REDStateException>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<ResumableError>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<STDFMemAddressNotAligned>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<STQFMemAddressNotAligned>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<SoftwareInitiatedReset>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<SpillNNormal>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<SpillNOther>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<StoreError>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<TagOverflow>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<TrapInstruction>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<TrapLevelZero>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<VAWatchpoint>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.cc	/^    SparcFault<WatchDogReset>::vals =$/;"	m	class:SparcISA::SparcFault	file:
vals	./arch/sparc/faults.hh	/^    static FaultVals vals;$/;"	m	class:SparcISA::SparcFault
vals	./cpu/FuncUnit.py	/^    vals = ['No_OpClass', 'IntAlu', 'IntMult', 'IntDiv', 'FloatAdd',$/;"	v	class:OpClass
vals	./cpu/StaticInstFlags.py	/^    vals = [$/;"	v	class:StaticInstFlags
vals	./cpu/TimingExpr.py	/^    vals = [$/;"	v	class:TimingExprOp
vals	./python/m5/params.py	/^    vals = []$/;"	v	class:Enum
value	./arch/arm/pmu.hh	/^        uint64_t value;$/;"	m	struct:ArmISA::PMU::CounterState
value	./base/inifile.hh	/^        std::string     value;          \/\/\/< The entry value.$/;"	m	class:IniFile::Entry
value	./base/loader/coff_sym.h	/^    coff_long   value;          \/* value of symbol *\/$/;"	m	struct:ecoff_sym
value	./base/loader/coff_sym.h	/^    unsigned value: 24; \/* address where we are moving it to *\/$/;"	m	struct:__anon116
value	./base/statistics.hh	/^    Counter value() const { return (*functor)(); }$/;"	f	class:Stats::FunctorProxy
value	./base/statistics.hh	/^    Counter value() const { return (object->*method)(); }$/;"	f	class:Stats::MethodProxy
value	./base/statistics.hh	/^    Counter value() const { return *scalar; }$/;"	f	class:Stats::ValueProxy
value	./base/statistics.hh	/^    Counter value() const { return current; }$/;"	f	class:Stats::AvgStor
value	./base/statistics.hh	/^    Counter value() const { return data()->value(); }$/;"	f	class:Stats::ScalarBase
value	./base/statistics.hh	/^    Counter value() const { return data; }$/;"	f	class:Stats::StatStor
value	./base/statistics.hh	/^    Counter value() const { return stat.data(index)->value(); }$/;"	f	class:Stats::ScalarProxy
value	./base/statistics.hh	/^    Counter value() const { return this->s.value(); }$/;"	f	class:Stats::ScalarInfoProxy
value	./base/statistics.hh	/^    Counter value() { return data()->value(); }$/;"	f	class:Stats::ScalarBase
value	./base/statistics.hh	/^    Counter value() { return proxy->value(); }$/;"	f	class:Stats::ValueBase
value	./base/statistics.hh	/^    VCounter &value() const { return cvec; }$/;"	f	class:Stats::FormulaInfoProxy
value	./base/statistics.hh	/^    value() const$/;"	f	class:Stats::VectorInfoProxy
value	./base/statistics.hh	/^    value(VCounter &vec) const$/;"	f	class:Stats::VectorBase
value	./base/stats/text.cc	/^    Result value;$/;"	m	struct:Stats::ScalarPrint	file:
value	./base/trie.hh	/^        Value *value;$/;"	m	struct:Trie::Node
value	./cpu/TimingExpr.py	/^    value = 0$/;"	v	class:TimingExpr0
value	./cpu/TimingExpr.py	/^    value = Param.UInt64("literal value")$/;"	v	class:TimingExprLiteral
value	./cpu/timing_expr.hh	/^    uint64_t value;$/;"	m	class:TimingExprLiteral
value	./dev/arm/generic_timer.cc	/^ArchTimer::value() const$/;"	f	class:ArchTimer
value	./dev/arm/generic_timer.hh	/^    uint64_t value() const$/;"	f	class:SystemCounter
value	./sim/syscallreturn.hh	/^    int64_t value;$/;"	m	class:SyscallReturn
value	./unittest/genini.py	/^                value = 'True'$/;"	v
value	./unittest/genini.py	/^                value = arg[offset+1:]$/;"	v
value_type	./base/circlebuf.hh	/^    typedef T value_type;$/;"	t	class:CircleBuf
value_type	./base/circlebuf.hh	/^    typedef T value_type;$/;"	t	class:Fifo
valuerange	./python/m5/util/sorteddict.py	/^    def valuerange(self, *args, **kwargs):$/;"	m	class:SortedDict
values	./python/m5/debug.py	/^    def values(self):$/;"	m	class:AllFlags
values	./python/m5/util/multidict.py	/^    def values(self):$/;"	m	class:multidict
values	./python/m5/util/orderdict.py	/^    def values(self):$/;"	m	class:orderdict
values	./python/m5/util/smartdict.py	/^    def values(self):$/;"	m	class:SmartDict
values	./python/m5/util/sorteddict.py	/^    def values(self):$/;"	m	class:SortedDict
var	./mem/slicc/ast/VarExprAST.py	/^    def var(self):$/;"	m	class:VarExprAST
vbp	./dev/arm/pl111.hh	/^        Bitfield<31,24> vbp;$/;"	m	class:Pl111
vc_arbitrate	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::vc_arbitrate()$/;"	f	class:Router
vcarb_req	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^Router_d::vcarb_req()$/;"	f	class:Router_d
vcnt	./arch/x86/regs/misc.hh	/^        Bitfield<7, 0> vcnt; \/\/ Variable-Range Register Count$/;"	m	namespace:X86ISA
vcomp	./dev/arm/pl111.hh	/^        Bitfield<3> vcomp;$/;"	m	class:Pl111
vcpuAddr	./dev/arm/vgic.hh	/^    Addr vcpuAddr;$/;"	m	class:VGic
vcpuData	./dev/arm/vgic.hh	/^    struct std::array<vcpuIntData, VGIC_CPU_MAX>  vcpuData;$/;"	m	class:VGic	typeref:struct:VGic::array
vcpuFD	./cpu/kvm/base.hh	/^    int vcpuFD;$/;"	m	class:BaseKvmCPU
vcpuID	./cpu/kvm/base.hh	/^    const long vcpuID;$/;"	m	class:BaseKvmCPU
vcpuIntData	./dev/arm/vgic.hh	/^        vcpuIntData()$/;"	f	struct:VGic::vcpuIntData
vcpuIntData	./dev/arm/vgic.hh	/^    struct vcpuIntData : public Serializable {$/;"	s	class:VGic
vcpuMMapSize	./cpu/kvm/base.hh	/^    int vcpuMMapSize;$/;"	m	class:BaseKvmCPU
vcpuMMapSize	./cpu/kvm/vm.hh	/^    int vcpuMMapSize;$/;"	m	class:Kvm
vcpuThread	./cpu/kvm/base.hh	/^    pthread_t vcpuThread;$/;"	m	class:BaseKvmCPU
vcpu_addr	./dev/arm/RealView.py	/^    vcpu_addr = Param.Addr(0, "Address for vcpu interfaces")$/;"	v	class:VGic
vcs	./mem/ruby/network/fault_model/FaultModel.hh	/^        int vcs;$/;"	m	struct:FaultModel::system_conf
vcs_per_vnet	./mem/ruby/network/garnet/BaseGarnetNetwork.py	/^    vcs_per_vnet = Param.Int(4, "virtual channels per virtual network");$/;"	v	class:BaseGarnetNetwork
vcs_per_vnet	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    vcs_per_vnet = Param.Int(Parent.vcs_per_vnet,$/;"	v	class:NetworkLink_d
vcs_per_vnet	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.py	/^    vcs_per_vnet = Param.UInt32(Parent.vcs_per_vnet,$/;"	v	class:GarnetNetworkInterface_d
vcs_per_vnet	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.py	/^    vcs_per_vnet = Param.UInt32(Parent.vcs_per_vnet,$/;"	v	class:GarnetRouter_d
vcs_per_vnet	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.py	/^    vcs_per_vnet = Param.Int(Parent.vcs_per_vnet,$/;"	v	class:NetworkLink
vcs_per_vnet	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.py	/^    vcs_per_vnet = Param.Int(Parent.vcs_per_vnet,$/;"	v	class:GarnetRouter
vcs_per_vnet	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.py	/^    vcs_per_vnet = Param.UInt32(Parent.vcs_per_vnet,$/;"	v	class:GarnetNetworkInterface
vctrl	./dev/arm/vgic.hh	/^        VCTLR vctrl;$/;"	m	struct:VGic::vcpuIntData
vcvtFpDFpH	./arch/arm/insts/vfp.cc	/^vcvtFpDFpH(FPSCR &fpscr, bool flush, bool defaultNan,$/;"	f	namespace:ArmISA
vcvtFpFpH	./arch/arm/insts/vfp.cc	/^vcvtFpFpH(FPSCR &fpscr, bool flush, bool defaultNan,$/;"	f	namespace:ArmISA
vcvtFpHFp	./arch/arm/insts/vfp.cc	/^vcvtFpHFp(FPSCR &fpscr, bool defaultNan, bool ahp, uint16_t op, bool isDouble)$/;"	f	namespace:ArmISA
vcvtFpHFpD	./arch/arm/insts/vfp.cc	/^vcvtFpHFpD(FPSCR &fpscr, bool defaultNan, bool ahp, uint16_t op)$/;"	f	namespace:ArmISA
vcvtFpHFpS	./arch/arm/insts/vfp.cc	/^vcvtFpHFpS(FPSCR &fpscr, bool defaultNan, bool ahp, uint16_t op)$/;"	f	namespace:ArmISA
vcvtFpSFpH	./arch/arm/insts/vfp.cc	/^vcvtFpSFpH(FPSCR &fpscr, bool flush, bool defaultNan,$/;"	f	namespace:ArmISA
vdr	./dev/net/ns_gige.hh	/^    uint32_t    vdr;$/;"	m	struct:dp_regs
ve	./arch/arm/miscregs.hh	/^        Bitfield<24>   ve;      \/\/ Interrupt Vectors Enable (ARMv7 only)$/;"	m	namespace:ArmISA
ve	./arch/power/miscregs.hh	/^    Bitfield<8> ve;$/;"	m	namespace:PowerISA
vec	./base/statistics.hh	/^    mutable VResult vec;$/;"	m	class:Stats::FormulaInfoProxy
vec	./base/statistics.hh	/^    mutable VResult vec;$/;"	m	class:Stats::FormulaNode
vec	./base/statistics.hh	/^    mutable VResult vec;$/;"	m	class:Stats::VectorProxy
vec	./base/stats/text.cc	/^    VResult vec;$/;"	m	struct:Stats::VectorPrint	file:
vecIndex	./mem/ruby/common/NetDest.hh	/^    vecIndex(MachineID m) const$/;"	f	class:NetDest
vec_ctrl	./dev/pci/pcireg.h	/^        uint32_t vec_ctrl;$/;"	m	struct:MSIXTable::__anon30
vect	./arch/alpha/faults.hh	/^    FaultVect vect() {return _vect;}$/;"	f	class:AlphaISA::AlignmentFault
vect	./arch/alpha/faults.hh	/^    FaultVect vect() {return _vect;}$/;"	f	class:AlphaISA::ArithmeticFault
vect	./arch/alpha/faults.hh	/^    FaultVect vect() {return _vect;}$/;"	f	class:AlphaISA::DtbAcvFault
vect	./arch/alpha/faults.hh	/^    FaultVect vect() {return _vect;}$/;"	f	class:AlphaISA::DtbAlignmentFault
vect	./arch/alpha/faults.hh	/^    FaultVect vect() {return _vect;}$/;"	f	class:AlphaISA::DtbPageFault
vect	./arch/alpha/faults.hh	/^    FaultVect vect() {return _vect;}$/;"	f	class:AlphaISA::FloatEnableFault
vect	./arch/alpha/faults.hh	/^    FaultVect vect() {return _vect;}$/;"	f	class:AlphaISA::IntegerOverflowFault
vect	./arch/alpha/faults.hh	/^    FaultVect vect() {return _vect;}$/;"	f	class:AlphaISA::InterruptFault
vect	./arch/alpha/faults.hh	/^    FaultVect vect() {return _vect;}$/;"	f	class:AlphaISA::ItbAcvFault
vect	./arch/alpha/faults.hh	/^    FaultVect vect() {return _vect;}$/;"	f	class:AlphaISA::ItbPageFault
vect	./arch/alpha/faults.hh	/^    FaultVect vect() {return _vect;}$/;"	f	class:AlphaISA::MachineCheckFault
vect	./arch/alpha/faults.hh	/^    FaultVect vect() {return _vect;}$/;"	f	class:AlphaISA::NDtbMissFault
vect	./arch/alpha/faults.hh	/^    FaultVect vect() {return _vect;}$/;"	f	class:AlphaISA::PDtbMissFault
vect	./arch/alpha/faults.hh	/^    FaultVect vect() {return _vect;}$/;"	f	class:AlphaISA::PalFault
vect	./arch/alpha/faults.hh	/^    FaultVect vect() {return _vect;}$/;"	f	class:AlphaISA::ResetFault
vect	./arch/alpha/faults.hh	/^    FaultVect vect() {return _vect;}$/;"	f	class:AlphaISA::UnimplementedOpcodeFault
vect	./arch/mips/faults.hh	/^    vect(ThreadContext *tc) const$/;"	f	class:MipsISA::MipsFaultBase
vector	./arch/x86/faults.hh	/^        uint8_t vector;$/;"	m	class:X86ISA::X86FaultBase
vector	./arch/x86/interrupts.hh	/^        Bitfield<7, 0> vector;$/;"	m	class:X86ISA::Interrupts
vector	./arch/x86/intmessage.hh	/^        Bitfield<15, 8> vector;$/;"	m	namespace:X86ISA
vector	./arch/x86/regs/apic.hh	/^        Bitfield<7, 0> vector;$/;"	m	namespace:X86ISA
vector	./dev/sparc/iob.hh	/^        int vector;$/;"	m	struct:Iob::IntMan
vector	./dev/x86/i82094aa.hh	/^        Bitfield<7, 0> vector;$/;"	m	class:X86ISA::I82094AA
vector	./doxygen/stl.hh	/^template <class T> class vector {$/;"	c	namespace:std
vectorOffset	./dev/x86/i8259.hh	/^    uint8_t vectorOffset;$/;"	m	class:X86ISA::I8259
veic	./arch/mips/pra_constants.hh	/^    Bitfield<6>  veic;$/;"	m	namespace:MipsISA
vendor	./arch/x86/bios/SMBios.py	/^    vendor = Param.String("", "vendor name string")$/;"	v	class:X86SMBiosBiosInformation
vendor	./arch/x86/bios/smbios.hh	/^    uint8_t vendor;$/;"	m	class:X86ISA::SMBios::BiosInformation
vendor	./dev/pci/pcireg.h	/^        uint16_t vendor;$/;"	m	struct:PCIConfig::__anon26
vendor0	./dev/arm/ufs_device.hh	/^        uint32_t vendor0;$/;"	m	struct:UFSHostDevice::LUNInfo
vendor1	./dev/arm/ufs_device.hh	/^        uint32_t vendor1;$/;"	m	struct:UFSHostDevice::LUNInfo
vendorSpecific	./dev/arm/ufs_device.hh	/^        uint32_t vendorSpecific;$/;"	m	struct:UFSHostDevice::HCIMem
vendorString	./arch/x86/cpuid.cc	/^    static const char vendorString[vendorStringSize] = "M5 Simulator";$/;"	m	namespace:X86ISA	file:
vendorStringSize	./arch/x86/cpuid.cc	/^    static const int vendorStringSize = 13;$/;"	m	namespace:X86ISA	file:
ver_maj	./dev/arm/NoMali.py	/^    ver_maj = Param.UInt32(0, "GPU Version (Major)")$/;"	v	class:NoMaliGpu
ver_min	./dev/arm/NoMali.py	/^    ver_min = Param.UInt32(0, "GPU Version (Minor)")$/;"	v	class:NoMaliGpu
ver_status	./dev/arm/NoMali.py	/^    ver_status = Param.UInt32(0, "GPU Version (Status)")$/;"	v	class:NoMaliGpu
verbosity	./mem/packet.hh	/^        const int verbosity;$/;"	m	class:Packet::PrintReqState
verify	./cpu/checker/cpu_impl.hh	/^Checker<Impl>::verify(DynInstPtr &completed_inst)$/;"	f	class:Checker
verify	./mem/probes/StackDistProbe.py	/^    verify = Param.Bool(False, "Verify behaviuor with reference implementation")$/;"	v	class:StackDistProbe
verify	./python/m5/params.py	/^    def verify(self):$/;"	m	class:IpNetmask
verify	./python/m5/params.py	/^    def verify(self):$/;"	m	class:IpWithPort
verifyIp	./python/m5/params.py	/^    def verifyIp(self):$/;"	m	class:IpAddress
verifyMemoryMode	./arch/arm/kvm/gic.cc	/^KvmGic::verifyMemoryMode() const$/;"	f	class:KvmGic
verifyMemoryMode	./cpu/base.hh	/^    virtual void verifyMemoryMode() const { };$/;"	f	class:BaseCPU
verifyMemoryMode	./cpu/kvm/base.cc	/^BaseKvmCPU::verifyMemoryMode() const$/;"	f	class:BaseKvmCPU
verifyMemoryMode	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::verifyMemoryMode() const$/;"	f	class:FullO3CPU
verifyMemoryMode	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::verifyMemoryMode() const$/;"	f	class:AtomicSimpleCPU
verifyMemoryMode	./cpu/simple/timing.cc	/^TimingSimpleCPU::verifyMemoryMode() const$/;"	f	class:TimingSimpleCPU
verifyStack	./mem/stack_dist_calc.hh	/^    const bool verifyStack;$/;"	m	class:StackDistCalc
verifyStackDist	./mem/stack_dist_calc.cc	/^StackDistCalc::verifyStackDist(const Addr r_address, bool update_stack)$/;"	f	class:StackDistCalc
version	./arch/x86/bios/IntelMP.py	/^    version = Param.UInt8(0, 'bits 0-7 of the version register')$/;"	v	class:X86IntelMPIOAPIC
version	./arch/x86/bios/SMBios.py	/^    version = Param.String("", "version string")$/;"	v	class:X86SMBiosBiosInformation
version	./arch/x86/bios/intelmp.hh	/^    uint8_t version;$/;"	m	class:X86ISA::IntelMP::IOAPIC
version	./arch/x86/bios/smbios.hh	/^    uint8_t version;$/;"	m	class:X86ISA::SMBios::BiosInformation
version	./base/cp_annotate.hh	/^        uint64_t version;$/;"	m	struct:CPA::AnnotateHeader
version	./base/inet.hh	/^    uint8_t  version() const { return ip_v; }$/;"	f	struct:Net::IpHdr
version	./base/inet.hh	/^    uint8_t version() const { return ip6_vfc; }$/;"	f	struct:Net::Ip6Hdr
version	./dev/alpha/access.h	/^    uint32_t    version;                \/\/ 04:$/;"	m	struct:AlphaAccess
version	./dev/arm/hdlcd.hh	/^    const VersionReg version;       \/**< Version register *\/$/;"	m	class:HDLcd
version	./dev/mips/access.h	/^    uint32_t    version;                \/\/ 08:$/;"	m	struct:MipsAccess
version	./kern/linux/linux.hh	/^        char version[_SYS_NMLN];        \/\/!< OS version.$/;"	m	struct:Linux::utsname
version	./kern/operatingsystem.hh	/^        char version[_SYS_NMLN];        \/\/!< OS version.$/;"	m	struct:OperatingSystem::__anon92
version	./kern/solaris/solaris.hh	/^        char version[_SYS_NMLN];        \/\/!< OS version.$/;"	m	struct:Solaris::utsname
version	./kern/tru64/tru64.hh	/^        char version[_SYS_NMLN];        \/\/!< OS version.$/;"	m	struct:Tru64::utsname
version	./kern/tru64/tru64.hh	/^        int version;    \/\/!< version$/;"	m	struct:Tru64::nxm_thread_attr
version	./mem/ruby/slicc_interface/Controller.py	/^    version = Param.Int("")$/;"	v	class:RubyController
version	./mem/ruby/structures/DirectoryMemory.py	/^    version = Param.Int(0, "")$/;"	v	class:RubyDirectoryMemory
version	./mem/ruby/system/Sequencer.py	/^    version = Param.Int(0, "")$/;"	v	class:DMASequencer
version	./mem/ruby/system/Sequencer.py	/^    version = Param.Int(0, "")$/;"	v	class:RubyPort
version	./mem/slicc/main.py	/^version="%prog v0.4"$/;"	v
version	./python/m5/main.py	/^version="%prog 2.0"$/;"	v
version_major	./dev/arm/hdlcd.hh	/^        Bitfield<15,8>  version_major;$/;"	m	class:HDLcd
version_major	./dev/net/etherdump.cc	/^    uint16_t version_major;$/;"	m	struct:pcap_file_header	file:
version_minor	./dev/arm/hdlcd.hh	/^        Bitfield<7,0>   version_minor;$/;"	m	class:HDLcd
version_minor	./dev/net/etherdump.cc	/^    uint16_t version_minor;$/;"	m	struct:pcap_file_header	file:
vex	./arch/x86/types.hh	/^        ThreeByteVex vex;$/;"	m	struct:X86ISA::ExtMachInst
vf	./arch/arm/miscregs.hh	/^        Bitfield<6>      vf;$/;"	m	namespace:ArmISA
vfork	./kern/tru64/tru64_syscalls.hh	/^        vfork = 66,$/;"	e	enum:SystemCalls::__anon102
vfp	./arch/alpha/remote_gdb.hh	/^            uint64_t vfp;$/;"	m	struct:AlphaISA::RemoteGDB::AlphaGdbRegCache::__anon48
vfp	./dev/arm/pl111.hh	/^        Bitfield<23,16> vfp;$/;"	m	class:Pl111
vfpExceptionTrapping	./arch/arm/miscregs.hh	/^        Bitfield<15, 12> vfpExceptionTrapping;$/;"	m	namespace:ArmISA
vfpFlushToZero	./arch/arm/insts/vfp.hh	/^vfpFlushToZero(FPSCR &fpscr, fpType &op)$/;"	f	namespace:ArmISA
vfpFlushToZero	./arch/arm/insts/vfp.hh	/^vfpFlushToZero(FPSCR &fpscr, fpType &op1, fpType &op2)$/;"	f	namespace:ArmISA
vfpFpToFixed	./arch/arm/insts/vfp.hh	/^vfpFpToFixed(T val, bool isSigned, uint8_t width, uint8_t imm, bool$/;"	f	namespace:ArmISA
vfpHalfPrecision	./arch/arm/miscregs.hh	/^        Bitfield<27, 24> vfpHalfPrecision;$/;"	m	namespace:ArmISA
vfpNeon64Enabled	./arch/arm/utility.hh	/^vfpNeon64Enabled(CPACR cpacr, ExceptionLevel el)$/;"	f	namespace:ArmISA
vfpNeonEnabled	./arch/arm/utility.cc	/^vfpNeonEnabled(uint32_t &seq, HCPTR hcptr, NSACR nsacr, CPACR cpacr, CPSR cpsr,$/;"	f	namespace:ArmISA
vfpSFixedToFpD	./arch/arm/insts/vfp.cc	/^vfpSFixedToFpD(bool flush, bool defaultNan,$/;"	f	namespace:ArmISA
vfpSFixedToFpS	./arch/arm/insts/vfp.cc	/^vfpSFixedToFpS(bool flush, bool defaultNan,$/;"	f	namespace:ArmISA
vfpUFixedToFpD	./arch/arm/insts/vfp.cc	/^vfpUFixedToFpD(bool flush, bool defaultNan,$/;"	f	namespace:ArmISA
vfpUFixedToFpS	./arch/arm/insts/vfp.cc	/^vfpUFixedToFpS(bool flush, bool defaultNan,$/;"	f	namespace:ArmISA
vfp_modified_imm	./arch/arm/insts/pred_inst.hh	/^vfp_modified_imm(uint8_t data, bool wide)$/;"	f	namespace:ArmISA
vga	./dev/pixelpump.hh	/^    static const DisplayTimings vga;$/;"	m	struct:DisplayTimings
vgettimeofdayOffset	./arch/x86/process.hh	/^            Addr vgettimeofdayOffset;$/;"	m	class:X86ISA::X86_64LiveProcess::VSyscallPage
vgic	./dev/arm/RealView.py	/^    vgic   = VGic(vcpu_addr=0x2c006000, hv_addr=0x2c004000, ppint=25)$/;"	v	class:VExpress_EMM
vi	./arch/arm/miscregs.hh	/^        Bitfield<7>      vi;$/;"	m	namespace:ArmISA
vi	./arch/mips/pra_constants.hh	/^    Bitfield<3>      vi;$/;"	m	namespace:MipsISA
videoHeight	./base/vnc/vncinput.hh	/^    uint16_t videoHeight() const { return _videoHeight; }$/;"	f	class:VncInput
videoWidth	./base/vnc/vncinput.hh	/^    uint16_t videoWidth() const { return _videoWidth; }$/;"	f	class:VncInput
vif	./arch/x86/regs/misc.hh	/^        Bitfield<19> vif; \/\/ Virtual Interrupt Flag$/;"	m	namespace:X86ISA
vint	./arch/mips/pra_constants.hh	/^    Bitfield<5>  vint;$/;"	m	namespace:MipsISA
vio	./dev/virtio/VirtIO.py	/^    vio = Param.VirtIODeviceBase("VirtIO device")$/;"	v	class:PciVirtIO
vio	./dev/virtio/pci.hh	/^    VirtIODeviceBase &vio;$/;"	m	class:PciVirtIO
violation	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::violation(DynInstPtr &store,$/;"	f	class:InstructionQueue
violation	./cpu/o3/lsq.hh	/^    bool violation(ThreadID tid)$/;"	f	class:LSQ
violation	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::violation()$/;"	f	class:LSQ
violation	./cpu/o3/lsq_unit.hh	/^    bool violation() { return memDepViolator; }$/;"	f	class:LSQUnit
violation	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::violation(DynInstPtr &store_inst,$/;"	f	class:MemDepUnit
violation	./cpu/o3/store_set.cc	/^StoreSet::violation(Addr store_PC, Addr load_PC)$/;"	f	class:StoreSet
vip	./arch/x86/regs/misc.hh	/^        Bitfield<20> vip; \/\/ Virtual Interrupt Pending$/;"	m	namespace:X86ISA
virt	./dev/arm/generic_timer.hh	/^        ArchTimer virt;$/;"	m	struct:GenericTimer::CoreTimers
virtAddr	./cpu/o3/probe/elastic_trace.hh	/^        Addr virtAddr;$/;"	m	struct:ElasticTrace::TraceInfo
virtAddr	./cpu/trace/trace_cpu.hh	/^            Addr virtAddr;$/;"	m	class:TraceCPU::ElasticDataGen::GraphNode
virtProxy	./arch/alpha/system.hh	/^    FSTranslatingPortProxy virtProxy;$/;"	m	class:AlphaSystem
virtProxy	./cpu/thread_state.hh	/^    FSTranslatingPortProxy *virtProxy;$/;"	m	struct:ThreadState
virtTimer	./dev/arm/generic_timer.hh	/^    ArchTimer virtTimer;$/;"	m	class:GenericTimerMem
virt_nets	./mem/ruby/network/garnet/fixed-pipeline/GarnetLink_d.py	/^    virt_nets = Param.Int(Parent.number_of_virtual_networks,$/;"	v	class:NetworkLink_d
virt_nets	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.py	/^    virt_nets = Param.UInt32(Parent.number_of_virtual_networks,$/;"	v	class:GarnetNetworkInterface_d
virt_nets	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.py	/^    virt_nets = Param.UInt32(Parent.number_of_virtual_networks,$/;"	v	class:GarnetRouter_d
virt_nets	./mem/ruby/network/garnet/flexible-pipeline/GarnetLink.py	/^    virt_nets = Param.Int(Parent.number_of_virtual_networks,$/;"	v	class:NetworkLink
virt_nets	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.py	/^    virt_nets = Param.Int(Parent.number_of_virtual_networks,$/;"	v	class:GarnetRouter
virt_nets	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.py	/^    virt_nets = Param.UInt32(Parent.number_of_virtual_networks,$/;"	v	class:GarnetNetworkInterface
virt_nets	./mem/ruby/network/simple/SimpleNetwork.py	/^    virt_nets = Param.Int(Parent.number_of_virtual_networks,$/;"	v	class:Switch
virtualRegs	./dev/net/sinic.hh	/^    VirtualRegs virtualRegs;$/;"	m	class:Sinic::Device
virtual_addr	./dev/net/Ethernet.py	/^    virtual_addr = Param.Bool(False, "Virtual addressing")$/;"	v	class:Sinic
virtual_count	./dev/net/Ethernet.py	/^    virtual_count = Param.UInt32(1, "Virtualized SINIC")$/;"	v	class:Sinic
virtvalid	./arch/arm/vtophys.cc	/^ArmISA::virtvalid(ThreadContext *tc, Addr vaddr)$/;"	f	class:ArmISA
visibleLine	./dev/pixelpump.hh	/^    bool visibleLine() const {$/;"	f	class:BasePixelPump
visit	./base/statistics.hh	/^    visit(Output &visitor)$/;"	f	class:Stats::InfoProxy
visit	./base/statistics.hh	/^    void visit(Output &visitor) { visitor.visit(*this); }$/;"	f	class:Stats::ProxyInfo
visit	./base/stats/text.cc	/^Text::visit(const DistInfo &info)$/;"	f	class:Stats::Text
visit	./base/stats/text.cc	/^Text::visit(const FormulaInfo &info)$/;"	f	class:Stats::Text
visit	./base/stats/text.cc	/^Text::visit(const ScalarInfo &info)$/;"	f	class:Stats::Text
visit	./base/stats/text.cc	/^Text::visit(const SparseHistInfo &info)$/;"	f	class:Stats::Text
visit	./base/stats/text.cc	/^Text::visit(const Vector2dInfo &info)$/;"	f	class:Stats::Text
visit	./base/stats/text.cc	/^Text::visit(const VectorDistInfo &info)$/;"	f	class:Stats::Text
visit	./base/stats/text.cc	/^Text::visit(const VectorInfo &info)$/;"	f	class:Stats::Text
visitor	./mem/cache/cache.hh	/^    VisitorPtr visitor;$/;"	m	class:CacheBlkVisitorWrapper
vlan	./dev/net/i8254xGBe_defs.hh	/^            uint16_t vlan;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon6
vlanId	./base/inet.hh	/^    uint16_t vlanId() const {$/;"	f	struct:Net::EthHdr
vlan_tag	./dev/net/i8254xGBe_defs.hh	/^            uint16_t vlan_tag;$/;"	m	struct:iGbReg::RxDesc::__anon5::__anon8
vle	./dev/net/i8254xGBe_defs.hh	/^inline bool vle(TxDesc *d)  { assert(isLegacy(d) || isData(d)); return bits(d->d2, 30,30); }$/;"	f	namespace:iGbReg::TxdOp
vm	./arch/arm/kvm/gic.hh	/^    KvmVM &vm;$/;"	m	class:KvmGic
vm	./arch/arm/miscregs.hh	/^        Bitfield<0>      vm;$/;"	m	namespace:ArmISA
vm	./arch/x86/regs/misc.hh	/^        Bitfield<17> vm; \/\/ Virtual-8086 Mode$/;"	m	namespace:X86ISA
vm	./cpu/kvm/base.hh	/^    KvmVM &vm;$/;"	m	class:BaseKvmCPU
vmFD	./cpu/kvm/vm.hh	/^    const int vmFD;$/;"	m	class:KvmVM
vm_stack	./kern/tru64/tru64.hh	/^    struct vm_stack {$/;"	s	class:Tru64
vme	./arch/x86/regs/misc.hh	/^        Bitfield<0> vme; \/\/ Virtual-8086 Mode Extensions$/;"	m	namespace:X86ISA
vmid	./arch/arm/pagetable.hh	/^    uint8_t vmid;           \/\/ Virtual machine Identifier$/;"	m	struct:ArmISA::TlbEntry
vmid	./arch/arm/table_walker.hh	/^        uint8_t vmid;$/;"	m	class:ArmISA::TableWalker::WalkerState
vmid	./arch/arm/tlb.hh	/^    uint8_t vmid;$/;"	m	class:ArmISA::TLB
vnc	./dev/arm/RealView.py	/^    vnc   = Param.VncInput(Parent.any, "Vnc server for remote frame buffer display")$/;"	v	class:Pl111
vnc	./dev/arm/RealView.py	/^    vnc = Param.VncInput(Parent.any, "Vnc server for remote frame buffer "$/;"	v	class:HDLcd
vnc	./dev/arm/RealView.py	/^    vnc = Param.VncInput(Parent.any, "Vnc server for remote frame buffer display")$/;"	v	class:Pl050
vnc	./dev/arm/hdlcd.hh	/^    VncInput *vnc;$/;"	m	class:HDLcd
vnc	./dev/arm/kmi.hh	/^    VncInput *vnc;$/;"	m	class:Pl050
vnc	./dev/arm/pl111.hh	/^    VncInput *vnc;$/;"	m	class:Pl111
vncVersion	./base/vnc/vncserver.hh	/^    const char* vncVersion() const$/;"	f	class:VncServer
vncserver	./base/vnc/vncserver.hh	/^        VncServer *vncserver;$/;"	m	class:VncServer::DataEvent
vncserver	./base/vnc/vncserver.hh	/^        VncServer *vncserver;$/;"	m	class:VncServer::ListenEvent
vnet	./mem/ruby/slicc_interface/Message.hh	/^    int vnet;$/;"	m	class:Message
voltage	./sim/VoltageDomain.py	/^    voltage = VectorParam.Voltage('1V', "Operational voltage(s)")$/;"	v	class:VoltageDomain
voltage	./sim/clock_domain.cc	/^ClockDomain::voltage() const$/;"	f	class:ClockDomain
voltage	./sim/voltage_domain.hh	/^    double voltage() const { return voltageOpPoints[_perfLevel]; }$/;"	f	class:VoltageDomain
voltage	./sim/voltage_domain.hh	/^    double voltage(PerfLevel perf_level) const$/;"	f	class:VoltageDomain
voltageAtPerfLevel	./sim/dvfs_handler.hh	/^    double voltageAtPerfLevel(DomainID domain_id, PerfLevel perf_level) const$/;"	f	class:DVFSHandler
voltageDomain	./sim/clock_domain.hh	/^    inline VoltageDomain *voltageDomain() const { return _voltageDomain; }$/;"	f	class:ClockDomain
voltageOpPoints	./sim/voltage_domain.hh	/^    const Voltages voltageOpPoints;$/;"	m	class:VoltageDomain
voltage_domain	./dev/arm/RealView.py	/^    voltage_domain = Param.VoltageDomain(Parent.voltage_domain,$/;"	v	class:RealViewOsc
voltage_domain	./sim/ClockDomain.py	/^    voltage_domain = Param.VoltageDomain("Voltage domain")$/;"	v	class:SrcClockDomain
vpa	./arch/mips/mt_constants.hh	/^    Bitfield<0>      vpa;$/;"	m	namespace:MipsISA
vpc	./arch/mips/mt_constants.hh	/^    Bitfield<1> vpc;$/;"	m	namespace:MipsISA
vpn	./arch/alpha/pagetable.hh	/^    Addr vpn() const { return (addr & ImplMask) >> PageShift; }$/;"	f	struct:AlphaISA::VAddr
vpn	./arch/arm/pagetable.hh	/^    Addr vpn;               \/\/ Virtual Page Number$/;"	m	struct:ArmISA::TlbEntry
vpn	./arch/mips/faults.hh	/^    Addr vpn;$/;"	m	class:MipsISA::TlbFault
vpn	./arch/power/pagetable.hh	/^    vpn() const$/;"	f	struct:PowerISA::VAddr
vpn2	./arch/mips/pra_constants.hh	/^    Bitfield<39, 13> vpn2;$/;"	m	namespace:MipsISA
vpn2x	./arch/mips/pra_constants.hh	/^    Bitfield<12, 11> vpn2x;$/;"	m	namespace:MipsISA
vram	./dev/arm/RealView.py	/^    vram           = SimpleMemory(range = AddrRange(0x18000000, size='32MB'),$/;"	v	class:VExpress_EMM
vrcr	./dev/net/ns_gige.hh	/^    uint32_t    vrcr;$/;"	m	struct:dp_regs
vresult	./base/statistics.hh	/^    VResult vresult;$/;"	m	class:Stats::ConstNode
vresult	./base/statistics.hh	/^    VResult vresult;$/;"	m	class:Stats::ConstVectorNode
vresult	./base/statistics.hh	/^    mutable VResult vresult;$/;"	m	class:Stats::BinaryNode
vresult	./base/statistics.hh	/^    mutable VResult vresult;$/;"	m	class:Stats::ScalarProxyNode
vresult	./base/statistics.hh	/^    mutable VResult vresult;$/;"	m	class:Stats::ScalarStatNode
vresult	./base/statistics.hh	/^    mutable VResult vresult;$/;"	m	class:Stats::SumNode
vresult	./base/statistics.hh	/^    mutable VResult vresult;$/;"	m	class:Stats::UnaryNode
vring	./dev/virtio/virtio_ring.h	/^struct vring {$/;"	s
vring_avail	./dev/virtio/virtio_ring.h	/^struct vring_avail {$/;"	s
vring_avail_event	./dev/virtio/virtio_ring.h	130;"	d
vring_desc	./dev/virtio/virtio_ring.h	/^struct vring_desc {$/;"	s
vring_init	./dev/virtio/virtio_ring.h	/^static inline void vring_init(struct vring *vr, unsigned int num, void *p,$/;"	f
vring_need_event	./dev/virtio/virtio_ring.h	/^static inline int vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)$/;"	f
vring_size	./dev/virtio/virtio_ring.h	/^static inline unsigned vring_size(unsigned int num, unsigned long align)$/;"	f
vring_used	./dev/virtio/virtio_ring.h	/^struct vring_used {$/;"	s
vring_used_elem	./dev/virtio/virtio_ring.h	/^struct vring_used_elem {$/;"	s
vring_used_event	./dev/virtio/virtio_ring.h	129;"	d
vs	./arch/mips/pra_constants.hh	/^    Bitfield<9,  5>  vs;$/;"	m	namespace:MipsISA
vse	./arch/arm/miscregs.hh	/^        Bitfield<8>      vse;   \/\/ AArch64$/;"	m	namespace:ArmISA
vstamp	./arch/alpha/aout_machdep.h	/^    uint16_t    vstamp;         \/\/\/< version stamp?$/;"	m	struct:aout_exechdr
vstamp	./base/loader/coff_sym.h	/^    coff_short  vstamp;         \/* version stamp *\/$/;"	m	struct:ecoff_symhdr
vstamp	./base/loader/exec_ecoff.h	/^        coff_ushort vstamp;$/;"	m	struct:ecoff_aouthdr
vsw	./dev/arm/pl111.hh	/^        Bitfield<15,10> vsw;$/;"	m	class:Pl111
vsync_polarity	./dev/arm/hdlcd.hh	/^        Bitfield<0>    vsync_polarity;$/;"	m	class:HDLcd
vsyscallOffset	./arch/x86/process.hh	/^            Addr vsyscallOffset;$/;"	m	class:X86ISA::I386LiveProcess::VSyscallPage
vsyscallPage	./arch/x86/process.hh	/^        VSyscallPage vsyscallPage;$/;"	m	class:X86ISA::I386LiveProcess
vsyscallPage	./arch/x86/process.hh	/^        VSyscallPage vsyscallPage;$/;"	m	class:X86ISA::X86_64LiveProcess
vsysexitOffset	./arch/x86/process.hh	/^            Addr vsysexitOffset;$/;"	m	class:X86ISA::I386LiveProcess::VSyscallPage
vtcr	./arch/arm/table_walker.hh	/^        VTCR_t vtcr;$/;"	m	class:ArmISA::TableWalker::WalkerState
vtcr	./dev/net/ns_gige.hh	/^    uint32_t    vtcr;$/;"	m	struct:dp_regs
vtimeOffset	./arch/x86/process.hh	/^            Addr vtimeOffset;$/;"	m	class:X86ISA::X86_64LiveProcess::VSyscallPage
vtoh_legacy	./dev/virtio/base.hh	/^vtoh_legacy(T v) {$/;"	f
vtoh_legacy	./dev/virtio/base.hh	/^vtoh_legacy(vring_desc v) {$/;"	f
vtoh_legacy	./dev/virtio/base.hh	/^vtoh_legacy(vring_used_elem v) {$/;"	f
vtophys	./arch/alpha/vtophys.cc	/^vtophys(Addr vaddr)$/;"	f	namespace:AlphaISA
vtophys	./arch/alpha/vtophys.cc	/^vtophys(ThreadContext *tc, Addr addr)$/;"	f	namespace:AlphaISA
vtophys	./arch/arm/vtophys.cc	/^ArmISA::vtophys(Addr vaddr)$/;"	f	class:ArmISA
vtophys	./arch/arm/vtophys.cc	/^ArmISA::vtophys(ThreadContext *tc, Addr addr)$/;"	f	class:ArmISA
vtophys	./arch/mips/vtophys.cc	/^MipsISA::vtophys(Addr vaddr)$/;"	f	class:MipsISA
vtophys	./arch/mips/vtophys.cc	/^MipsISA::vtophys(ThreadContext *tc, Addr addr)$/;"	f	class:MipsISA
vtophys	./arch/power/vtophys.cc	/^PowerISA::vtophys(Addr vaddr)$/;"	f	class:PowerISA
vtophys	./arch/power/vtophys.cc	/^PowerISA::vtophys(ThreadContext *tc, Addr addr)$/;"	f	class:PowerISA
vtophys	./arch/sparc/vtophys.cc	/^vtophys(Addr vaddr)$/;"	f	namespace:SparcISA
vtophys	./arch/sparc/vtophys.cc	/^vtophys(ThreadContext *tc, Addr addr)$/;"	f	namespace:SparcISA
vtophys	./arch/x86/vtophys.cc	/^    vtophys(Addr vaddr)$/;"	f	namespace:X86ISA
vtophys	./arch/x86/vtophys.cc	/^    vtophys(ThreadContext *tc, Addr vaddr)$/;"	f	namespace:X86ISA
vvvv	./arch/x86/types.hh	/^            Bitfield<14, 11>  vvvv;$/;"	m	namespace:X86ISA
vvvv	./arch/x86/types.hh	/^            Bitfield<22, 19>  vvvv;$/;"	m	namespace:X86ISA
vx	./arch/power/miscregs.hh	/^    Bitfield<29> vx;$/;"	m	namespace:PowerISA
vxcvi	./arch/power/miscregs.hh	/^    Bitfield<9> vxcvi;$/;"	m	namespace:PowerISA
vxidi	./arch/power/miscregs.hh	/^    Bitfield<22> vxidi;$/;"	m	namespace:PowerISA
vximz	./arch/power/miscregs.hh	/^    Bitfield<20> vximz;$/;"	m	namespace:PowerISA
vxisi	./arch/power/miscregs.hh	/^    Bitfield<23> vxisi;$/;"	m	namespace:PowerISA
vxsnan	./arch/power/miscregs.hh	/^    Bitfield<24> vxsnan;$/;"	m	namespace:PowerISA
vxsqrt	./arch/power/miscregs.hh	/^    Bitfield<10> vxsqrt;$/;"	m	namespace:PowerISA
vxvc	./arch/power/miscregs.hh	/^    Bitfield<19> vxvc;$/;"	m	namespace:PowerISA
vxzdz	./arch/power/miscregs.hh	/^    Bitfield<21> vxzdz;$/;"	m	namespace:PowerISA
w	./arch/mips/pra_constants.hh	/^    Bitfield<0>      w;$/;"	m	namespace:MipsISA
w	./arch/mips/pra_constants.hh	/^    Bitfield<0>     w;$/;"	m	namespace:MipsISA
w	./arch/mips/pra_constants.hh	/^    Bitfield<30>    w;$/;"	m	namespace:MipsISA
w	./arch/x86/pagetable.hh	/^        Bitfield<1> w;$/;"	m	namespace:X86ISA
w	./arch/x86/regs/misc.hh	/^            Bitfield<41> w; \/\/ Writable$/;"	m	namespace:X86ISA
w	./arch/x86/types.hh	/^            Bitfield<23> w;$/;"	m	namespace:X86ISA
w	./arch/x86/types.hh	/^        Bitfield<3> w;$/;"	m	namespace:X86ISA
wait	./base/barrier.hh	/^    wait()$/;"	f	class:Barrier
wait	./kern/tru64/tru64.hh	/^        uint64_t wait;          \/\/!< Wait time$/;"	m	struct:Tru64::tbl_sysinfo
wait4	./kern/tru64/tru64_syscalls.hh	/^        wait4 = 7,$/;"	e	enum:SystemCalls::__anon102
waitChan	./sim/process.hh	/^        Addr waitChan;$/;"	m	struct:Process::WaitRec
waitList	./sim/process.hh	/^    std::list<WaitRec> waitList;$/;"	m	class:Process
waitNum	./dev/net/dist_iface.hh	/^        unsigned waitNum;$/;"	m	class:DistIface::Sync
waitid	./kern/tru64/tru64_syscalls.hh	/^        waitid = 236,$/;"	e	enum:SystemCalls::__anon102
waiting	./cpu/base.hh	/^    bool waiting;   \/\/ 0=normal, 1=mwaiting$/;"	m	struct:AddressMonitor
waitingContext	./sim/process.hh	/^        ThreadContext *waitingContext;$/;"	m	struct:Process::WaitRec
waitingForLayer	./mem/xbar.hh	/^        std::deque<SrcType*> waitingForLayer;$/;"	m	class:BaseXBar::Layer
waitingForPeer	./mem/xbar.hh	/^        SrcType* waitingForPeer;$/;"	m	class:BaseXBar::Layer
waitingOnRetry	./mem/packet_queue.hh	/^    bool waitingOnRetry;$/;"	m	class:PacketQueue
wakeCPU	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::wakeCPU()$/;"	f	class:FullO3CPU
wakeCPU	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::wakeCPU()$/;"	f	class:DefaultIEW
wakeCPU	./sim/pseudo_inst.cc	/^wakeCPU(ThreadContext *tc, uint64_t cpuid)$/;"	f	namespace:PseudoInst
wakeDependents	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::wakeDependents(DynInstPtr &inst)$/;"	f	class:DefaultIEW
wakeDependents	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::wakeDependents(DynInstPtr &completed_inst)$/;"	f	class:InstructionQueue
wakeDependents	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::wakeDependents(DynInstPtr &inst)$/;"	f	class:MemDepUnit
wakeFromQuiesce	./cpu/o3/fetch_impl.hh	/^DefaultFetch<Impl>::wakeFromQuiesce()$/;"	f	class:DefaultFetch
wakeUpAllBuffers	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::wakeUpAllBuffers()$/;"	f	class:AbstractController
wakeUpAllBuffers	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::wakeUpAllBuffers(Addr addr)$/;"	f	class:AbstractController
wakeUpBuffers	./mem/ruby/slicc_interface/AbstractController.cc	/^AbstractController::wakeUpBuffers(Addr addr)$/;"	f	class:AbstractController
wakeup	./arch/null/cpu_dummy.hh	/^    static void wakeup(ThreadID tid) { ; }$/;"	f	class:BaseCPU
wakeup	./cpu/kvm/base.cc	/^BaseKvmCPU::wakeup(ThreadID tid)$/;"	f	class:BaseKvmCPU
wakeup	./cpu/minor/cpu.cc	/^MinorCPU::wakeup(ThreadID tid)$/;"	f	class:MinorCPU
wakeup	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::wakeup(ThreadID tid)$/;"	f	class:FullO3CPU
wakeup	./cpu/simple/base.cc	/^BaseSimpleCPU::wakeup(ThreadID tid)$/;"	f	class:BaseSimpleCPU
wakeup	./cpu/testers/directedtest/RubyDirectedTester.cc	/^RubyDirectedTester::wakeup()$/;"	f	class:RubyDirectedTester
wakeup	./cpu/testers/rubytest/RubyTester.cc	/^RubyTester::wakeup()$/;"	f	class:RubyTester
wakeup	./cpu/trace/trace_cpu.hh	/^    void wakeup(ThreadID tid = 0)$/;"	f	class:TraceCPU
wakeup	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.cc	/^InputUnit_d::wakeup()$/;"	f	class:InputUnit_d
wakeup	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.cc	/^NetworkInterface_d::wakeup()$/;"	f	class:NetworkInterface_d
wakeup	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.cc	/^NetworkLink_d::wakeup()$/;"	f	class:NetworkLink_d
wakeup	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.cc	/^OutputUnit_d::wakeup()$/;"	f	class:OutputUnit_d
wakeup	./mem/ruby/network/garnet/fixed-pipeline/SWallocator_d.cc	/^SWallocator_d::wakeup()$/;"	f	class:SWallocator_d
wakeup	./mem/ruby/network/garnet/fixed-pipeline/Switch_d.cc	/^Switch_d::wakeup()$/;"	f	class:Switch_d
wakeup	./mem/ruby/network/garnet/fixed-pipeline/VCallocator_d.cc	/^VCallocator_d::wakeup()$/;"	f	class:VCallocator_d
wakeup	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.cc	/^NetworkInterface::wakeup()$/;"	f	class:NetworkInterface
wakeup	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.cc	/^NetworkLink::wakeup()$/;"	f	class:NetworkLink
wakeup	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::wakeup()$/;"	f	class:Router
wakeup	./mem/ruby/network/garnet/flexible-pipeline/VCarbiter.cc	/^VCarbiter::wakeup()$/;"	f	class:VCarbiter
wakeup	./mem/ruby/network/simple/PerfectSwitch.cc	/^PerfectSwitch::wakeup()$/;"	f	class:PerfectSwitch
wakeup	./mem/ruby/network/simple/Throttle.cc	/^Throttle::wakeup()$/;"	f	class:Throttle
wakeup	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::wakeup()$/;"	f	class:RubyMemoryControl
wakeup	./mem/ruby/structures/WireBuffer.cc	/^WireBuffer::wakeup()$/;"	f	class:WireBuffer
wakeup	./mem/ruby/system/Sequencer.cc	/^Sequencer::wakeup()$/;"	f	class:Sequencer
wakeup	./sim/eventq.hh	/^    virtual void wakeup(Tick when = (Tick)-1) { }$/;"	f	class:EventQueue
wakeupEventQueue	./sim/eventq.hh	/^    void wakeupEventQueue(Tick when = (Tick)-1)$/;"	f	class:EventManager
wakeupEvents	./cpu/kvm/perfevent.hh	/^    PerfKvmCounterConfig &wakeupEvents(uint32_t events) {$/;"	f	class:PerfKvmCounterConfig
wakeupFetch	./cpu/minor/execute.cc	/^Execute::wakeupFetch(BranchData::Reason reason)$/;"	f	class:Minor::Execute
wakeupFetch	./cpu/minor/pipeline.cc	/^Pipeline::wakeupFetch()$/;"	f	class:Minor::Pipeline
wakeupOnEvent	./cpu/minor/cpu.cc	/^MinorCPU::wakeupOnEvent(unsigned int stage_id)$/;"	f	class:MinorCPU
wakeup_frequency	./cpu/testers/rubytest/RubyTester.py	/^    wakeup_frequency = Param.Int(10, "number of cycles between wakeups")$/;"	v	class:RubyTester
walk	./arch/arm/table_walker.cc	/^TableWalker::walk(RequestPtr _req, ThreadContext *_tc, uint16_t _asid,$/;"	f	class:TableWalker
walk	./mem/multi_level_page_table_impl.hh	/^MultiLevelPageTable<ISAOps>::walk(Addr vaddr, bool allocate, Addr &PTE_addr)$/;"	f	class:MultiLevelPageTable
walkTrickBoxCheck	./arch/arm/tlb.cc	/^TLB::walkTrickBoxCheck(Addr pa, bool is_secure, Addr va, Addr sz, bool is_exec,$/;"	f	class:TLB
walker	./arch/arm/ArmTLB.py	/^    walker = ArmStage2TableWalker()$/;"	v	class:ArmStage2TLB
walker	./arch/arm/ArmTLB.py	/^    walker = Param.ArmTableWalker(ArmTableWalker(), "HW Table walker")$/;"	v	class:ArmTLB
walker	./arch/x86/X86TLB.py	/^            X86PagetableWalker(), "page table walker")$/;"	v	class:X86TLB
walker	./arch/x86/pagetable_walker.hh	/^            Walker *walker;$/;"	m	class:X86ISA::Walker::WalkerPort
walker	./arch/x86/pagetable_walker.hh	/^            Walker *walker;$/;"	m	class:X86ISA::Walker::WalkerState
walker	./arch/x86/tlb.hh	/^        Walker * walker;$/;"	m	class:X86ISA::TLB
want_hack	./base/misc.cc	/^bool want_hack = true;$/;"	v
want_info	./base/misc.cc	/^bool want_info = true;$/;"	v
warmedUp	./mem/cache/tags/base.hh	/^    bool warmedUp;$/;"	m	class:BaseTags
warmupBound	./mem/cache/tags/base.hh	/^    int warmupBound;$/;"	m	class:BaseTags
warmupCycle	./mem/cache/tags/base.hh	/^    Stats::Scalar warmupCycle;$/;"	m	class:BaseTags
warn	./base/misc.hh	207;"	d
warn	./python/m5/util/__init__.py	/^def warn(fmt, *args):$/;"	f
warnOnce	./sim/syscall_emul.hh	/^    bool warnOnce() const {  return (flags & WarnOnce); }$/;"	f	class:SyscallDesc
warnOnly	./mem/mem_checker_monitor.hh	/^    bool warnOnly;$/;"	m	class:MemCheckerMonitor
warnOnlyOnLoadError	./cpu/CheckerCPU.py	/^    warnOnlyOnLoadError = Param.Bool(True,$/;"	v	class:CheckerCPU
warnOnlyOnLoadError	./cpu/checker/cpu.hh	/^    bool warnOnlyOnLoadError;$/;"	m	class:CheckerCPU
warn_access	./dev/Device.py	/^    warn_access = Param.String("", "String to print when device is accessed")$/;"	v	class:IsaFake
warn_if	./base/misc.hh	229;"	d
warn_once	./base/misc.hh	214;"	d
warn_only	./mem/MemChecker.py	/^    warn_only = Param.Bool(False, "Warn about violations only")$/;"	v	class:MemCheckerMonitor
warn_verbose	./base/misc.cc	/^bool warn_verbose = false;$/;"	v
warned	./arch/arm/insts/pseudo.hh	/^    mutable bool warned;$/;"	m	class:WarnUnimplemented
warned	./sim/syscall_emul.hh	/^    bool warned;        \/\/!< Have we warned about unimplemented syscall?$/;"	m	class:SyscallDesc
warning	./mem/slicc/ast/AST.py	/^    def warning(self, message, *args):$/;"	m	class:AST
warning	./mem/slicc/symbols/Symbol.py	/^    def warning(self, message, *args):$/;"	m	class:Symbol
warning	./mem/slicc/util.py	/^    def warning(self, message, *args):$/;"	m	class:Location
wasCall	./cpu/pred/bpred_unit.hh	/^        bool wasCall;$/;"	m	struct:BPredUnit::PredictorHistory
wasPrefetched	./mem/cache/blk.hh	/^    bool wasPrefetched() const$/;"	f	class:CacheBlk
wasReturn	./cpu/pred/bpred_unit.hh	/^        bool wasReturn;$/;"	m	struct:BPredUnit::PredictorHistory
wasSquashed	./cpu/pred/bpred_unit.hh	/^        bool wasSquashed;$/;"	m	struct:BPredUnit::PredictorHistory
wasStarted	./arch/x86/pagetable_walker.cc	/^Walker::WalkerState::wasStarted()$/;"	f	class:X86ISA::Walker::WalkerState
watchdogAtZero	./dev/arm/timer_cpulocal.cc	/^CpuLocalTimer::Timer::watchdogAtZero()$/;"	f	class:CpuLocalTimer::Timer
watchdogControl	./dev/arm/timer_cpulocal.hh	/^        WatchdogCtrl watchdogControl;$/;"	m	class:CpuLocalTimer::Timer
watchdogDisableReg	./dev/arm/timer_cpulocal.hh	/^        uint32_t watchdogDisableReg;$/;"	m	class:CpuLocalTimer::Timer
watchdogLoadValue	./dev/arm/timer_cpulocal.hh	/^        uint32_t watchdogLoadValue;$/;"	m	class:CpuLocalTimer::Timer
watchdogMode	./dev/arm/timer_cpulocal.hh	/^            Bitfield<3>   watchdogMode;$/;"	m	class:CpuLocalTimer::Timer
watchdogZeroEvent	./dev/arm/timer_cpulocal.hh	/^        EventWrapper<Timer, &Timer::watchdogAtZero> watchdogZeroEvent;$/;"	m	class:CpuLocalTimer::Timer
watchdog_fake	./dev/arm/RealView.py	/^    watchdog_fake  = AmbaFake(pio_addr=0x1C0F0000)$/;"	v	class:VExpress_EMM
watchdog_fake	./dev/arm/RealView.py	/^    watchdog_fake = AmbaFake(pio_addr=0x10010000)$/;"	v	class:RealViewEB
watchdog_fake	./dev/arm/RealView.py	/^    watchdog_fake = AmbaFake(pio_addr=0x10010000)$/;"	v	class:RealViewPBX
waterMark	./dev/arm/pl111.hh	/^    uint32_t waterMark;$/;"	m	class:Pl111
watermark	./dev/arm/pl111.hh	/^        Bitfield<16> watermark;$/;"	m	class:Pl111
way	./mem/cache/blk.hh	/^    int set, way;$/;"	m	class:CacheBlk
wb	./arch/arm/insts/macromem.hh	/^    bool wb, replicate;$/;"	m	class:ArmISA::VldSingleOp64
wb	./arch/arm/insts/macromem.hh	/^    bool wb, replicate;$/;"	m	class:ArmISA::VstSingleOp64
wb	./arch/arm/insts/macromem.hh	/^    bool wb;$/;"	m	class:ArmISA::VldMultOp64
wb	./arch/arm/insts/macromem.hh	/^    bool wb;$/;"	m	class:ArmISA::VstMultOp64
wb	./arch/arm/insts/mem.hh	/^    bool wb;$/;"	m	class:ArmISA::RfeOp
wb	./arch/arm/insts/mem.hh	/^    bool wb;$/;"	m	class:ArmISA::SrsOp
wbAlignment	./dev/net/i8254xGBe.hh	/^        Addr wbAlignment;$/;"	m	class:IGbE::DescCache
wbBuf	./dev/net/i8254xGBe.hh	/^        T *wbBuf;$/;"	m	class:IGbE::DescCache
wbCompDelay	./dev/net/i8254xGBe.hh	/^    Tick fetchCompDelay, wbCompDelay;$/;"	m	class:IGbE
wbComplete	./dev/net/i8254xGBe.cc	/^IGbE::DescCache<T>::wbComplete()$/;"	f	class:IGbE::DescCache
wbCycle	./cpu/o3/iew.hh	/^    unsigned wbCycle;$/;"	m	class:DefaultIEW
wbDelay	./dev/net/i8254xGBe.hh	/^    Tick fetchDelay, wbDelay;$/;"	m	class:IGbE
wbDelayEvent	./dev/net/i8254xGBe.hh	/^        EventWrapper<DescCache, &DescCache::writeback1> wbDelayEvent;$/;"	m	class:IGbE::DescCache
wbEvent	./dev/net/i8254xGBe.hh	/^        EventWrapper<DescCache, &DescCache::wbComplete> wbEvent;$/;"	m	class:IGbE::DescCache
wbFanout	./cpu/o3/iew.hh	/^    Stats::Formula wbFanout;$/;"	m	class:DefaultIEW
wbNumInst	./cpu/o3/iew.hh	/^    unsigned wbNumInst;$/;"	m	class:DefaultIEW
wbOut	./dev/net/i8254xGBe.hh	/^        int wbOut;$/;"	m	class:IGbE::DescCache
wbOutstanding	./cpu/o3/inst_queue.hh	/^    int wbOutstanding;$/;"	m	class:InstructionQueue
wbRate	./cpu/o3/iew.hh	/^    Stats::Formula wbRate;$/;"	m	class:DefaultIEW
wbStatus	./cpu/o3/iew.hh	/^    StageStatus wbStatus;$/;"	m	class:DefaultIEW
wbWidth	./cpu/o3/O3CPU.py	/^    wbWidth = Param.Unsigned(8, "Writeback width")$/;"	v	class:DerivO3CPU
wbWidth	./cpu/o3/iew.hh	/^    unsigned wbWidth;$/;"	m	class:DefaultIEW
wb_comp_delay	./dev/net/Ethernet.py	/^    wb_comp_delay = Param.Latency('10ns', "delay after desc wb occurs")$/;"	v	class:IGbE
wb_delay	./dev/net/Ethernet.py	/^    wb_delay = Param.Latency('10ns', "delay before desc writeback occurs")$/;"	v	class:IGbE
wc	./arch/x86/regs/misc.hh	/^        Bitfield<10> wc; \/\/ Write-Combining$/;"	m	namespace:X86ISA
wcsr	./dev/net/ns_gige.hh	/^    uint32_t    wcsr;$/;"	m	struct:dp_regs
wday	./dev/mc146818.hh	/^            uint8_t wday;$/;"	m	struct:MC146818::__anon17::__anon18
weakext	./base/loader/coff_sym.h	/^    unsigned weakext:1; \/* symbol is weak external *\/$/;"	m	struct:ecoff_extsym
weight	./mem/ruby/network/BasicLink.py	/^    weight = Param.Int(1, "used to restrict routing in shortest path analysis")$/;"	v	class:BasicLink
whami	./arch/alpha/osfpal.hh	/^        whami = 0x3c,$/;"	e	enum:PAL::__anon50
what	./mem/ruby/slicc_interface/AbstractController.hh	/^    virtual const char* what() const throw()$/;"	f	class:RejectException
what	./sim/cxx_manager.hh	/^        const char *what() const throw() { return message.c_str(); }$/;"	f	class:CxxConfigManager::Exception
when	./sim/eventq.hh	/^    Tick when() const { return _when; }$/;"	f	class:Event
when	./sim/global_event.hh	/^    Tick when() const$/;"	f	class:BaseGlobalEvent
when	./sim/insttracer.hh	/^    Tick when;$/;"	m	class:Trace::InstRecord
whenCreated	./sim/eventq.hh	/^    Tick whenCreated;   \/\/!< time created$/;"	m	class:Event
whenReady	./mem/cache/blk.hh	/^    Tick whenReady;$/;"	m	class:CacheBlk
whenScheduled	./sim/eventq.hh	/^    Tick whenScheduled; \/\/!< time scheduled$/;"	m	class:Event
wide	./arch/arm/insts/vfp.hh	/^    bool wide;$/;"	m	class:ArmISA::VfpMacroOp
width	./arch/arm/miscregs.hh	/^        Bitfield<4> width;      \/\/ AArch64$/;"	m	namespace:ArmISA
width	./arch/arm/types.hh	/^        Bitfield<4> width;$/;"	m	namespace:ArmISA
width	./base/cprintf_formats.hh	/^    int width;$/;"	m	struct:cp::Format
width	./base/framebuffer.hh	/^    unsigned width() const { return _width; }$/;"	f	class:FrameBuffer
width	./base/loader/coff_sym.h	/^    coff_int    width;          \/* width for non-default sized struc fields *\/$/;"	m	union:__anon115
width	./base/vnc/vncinput.hh	/^        uint16_t width;$/;"	m	struct:VncInput::FrameBufferUpdateReq
width	./base/vnc/vncserver.hh	/^        uint16_t width;$/;"	m	struct:VncServer::FrameBufferRect
width	./cpu/minor/pipe_data.hh	/^    unsigned int width() const { return numInsts; }$/;"	f	class:Minor::ForwardInstData
width	./cpu/simple/AtomicSimpleCPU.py	/^    width = Param.Int(1, "CPU width")$/;"	v	class:AtomicSimpleCPU
width	./cpu/simple/atomic.hh	/^    const int width;$/;"	m	class:AtomicSimpleCPU
width	./dev/arm/pl111.hh	/^    uint16_t width;$/;"	m	class:Pl111
width	./dev/pixelpump.hh	/^    unsigned width;$/;"	m	struct:DisplayTimings
width	./mem/XBar.py	/^    width = 16$/;"	v	class:IOXBar
width	./mem/XBar.py	/^    width = 16$/;"	v	class:SystemXBar
width	./mem/XBar.py	/^    width = 32$/;"	v	class:L2XBar
width	./mem/XBar.py	/^    width = Param.Unsigned("Datapath width per port (bytes)")$/;"	v	class:BaseXBar
width	./mem/xbar.hh	/^    const uint32_t width;$/;"	m	class:BaseXBar
willChangePC	./cpu/checker/cpu.hh	/^    bool willChangePC;$/;"	m	class:CheckerCPU
willWB	./cpu/o3/lsq.hh	/^    bool willWB(ThreadID tid)$/;"	f	class:LSQ
willWB	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::willWB()$/;"	f	class:LSQ
willWB	./cpu/o3/lsq_unit.hh	/^    bool willWB() { return storeQueue[storeWBIdx].canWB &&$/;"	f	class:LSQUnit
wim	./arch/sparc/remote_gdb.hh	/^            uint32_t wim;$/;"	m	struct:SparcISA::RemoteGDB::SPARCGdbRegCache::__anon42
win	./base/inet.hh	/^    uint16_t win() const { return ntohs(th_win); }$/;"	f	struct:Net::TcpHdr
windowSize	./cpu/trace/trace_cpu.hh	/^            uint32_t windowSize;$/;"	m	class:TraceCPU::ElasticDataGen::InputStream
windowSize	./cpu/trace/trace_cpu.hh	/^        const uint32_t windowSize;$/;"	m	class:TraceCPU::ElasticDataGen
wire	./cpu/timebuf.hh	/^        wire()$/;"	f	class:TimeBuffer::wire
wire	./cpu/timebuf.hh	/^        wire(TimeBuffer<T> *buf, int i)$/;"	f	class:TimeBuffer::wire
wire	./cpu/timebuf.hh	/^        wire(const wire &i)$/;"	f	class:TimeBuffer::wire
wire	./cpu/timebuf.hh	/^    class wire$/;"	c	class:TimeBuffer
wired	./arch/mips/pra_constants.hh	/^    Bitfield<30, 0> wired;$/;"	m	namespace:MipsISA
wnr	./arch/arm/miscregs.hh	/^        Bitfield<11> wnr;$/;"	m	namespace:ArmISA
workItemBegin	./cpu/base.hh	/^    inline void workItemBegin() { numWorkItemsStarted++; }$/;"	f	class:BaseCPU
workItemBegin	./sim/system.hh	/^    inline void workItemBegin(uint32_t tid, uint32_t workid)$/;"	f	class:System
workItemEnd	./cpu/base.hh	/^    inline void workItemEnd() { numWorkItemsCompleted++; }$/;"	f	class:BaseCPU
workItemEnd	./sim/system.cc	/^System::workItemEnd(uint32_t tid, uint32_t workid)$/;"	f	class:System
workItemStats	./sim/system.hh	/^    std::map<uint32_t, Stats::Histogram*> workItemStats;$/;"	m	class:System
workItemsBegin	./sim/system.hh	/^    uint64_t workItemsBegin;$/;"	m	class:System
workItemsEnd	./sim/system.hh	/^    uint64_t workItemsEnd;$/;"	m	class:System
work_begin_ckpt_count	./sim/System.py	/^    work_begin_ckpt_count = Param.Counter(0,$/;"	v
work_begin_cpu_id_exit	./sim/System.py	/^    work_begin_cpu_id_exit = Param.Int(-1,$/;"	v
work_begin_exit_count	./sim/System.py	/^    work_begin_exit_count = Param.Counter(0,$/;"	v
work_cpus_ckpt_count	./sim/System.py	/^    work_cpus_ckpt_count = Param.Counter(0,$/;"	v
work_end_ckpt_count	./sim/System.py	/^    work_end_ckpt_count = Param.Counter(0,$/;"	v
work_end_exit_count	./sim/System.py	/^    work_end_exit_count = Param.Counter(0,$/;"	v
work_item_id	./sim/System.py	/^    work_item_id = Param.Int(-1, "specific work item id")$/;"	v
workaroundDmaLineCount	./dev/arm/hdlcd.hh	/^    const bool workaroundDmaLineCount;$/;"	m	class:HDLcd
workaroundSwapRB	./dev/arm/hdlcd.hh	/^    const bool workaroundSwapRB;$/;"	m	class:HDLcd
workaround_dma_line_count	./dev/arm/RealView.py	/^    workaround_dma_line_count = Param.Bool(True, "Workaround incorrect "$/;"	v	class:HDLcd
workaround_swap_rb	./dev/arm/RealView.py	/^                   workaround_swap_rb=True)$/;"	v	class:VExpress_EMM
workaround_swap_rb	./dev/arm/RealView.py	/^    workaround_swap_rb = Param.Bool(False, "Workaround incorrect color "$/;"	v	class:HDLcd
workbegin	./sim/pseudo_inst.cc	/^workbegin(ThreadContext *tc, uint64_t workid, uint64_t threadid)$/;"	f	namespace:PseudoInst
workend	./sim/pseudo_inst.cc	/^workend(ThreadContext *tc, uint64_t workid, uint64_t threadid)$/;"	f	namespace:PseudoInst
workload	./cpu/BaseCPU.py	/^    workload = VectorParam.Process([], "processes to run")$/;"	v
workload	./cpu/checker/cpu.hh	/^    std::vector<Process*> workload;$/;"	m	class:CheckerCPU
wp	./arch/mips/pra_constants.hh	/^    Bitfield<22>     wp;$/;"	m	namespace:MipsISA
wp	./arch/x86/regs/misc.hh	/^        Bitfield<16> wp; \/\/ Write Protect$/;"	m	namespace:X86ISA
wr	./arch/mips/pra_constants.hh	/^    Bitfield<3>      wr;$/;"	m	namespace:MipsISA
wr	./arch/x86/regs/misc.hh	/^        Bitfield<3> wr; \/\/ WrMem Enable$/;"	m	namespace:X86ISA
wr	./dev/arm/rv_ctrl.hh	/^        Bitfield<30> wr;$/;"	m	class:RealViewCtrl
wrPerTurnAround	./mem/dram_ctrl.hh	/^    Stats::Histogram wrPerTurnAround;$/;"	m	class:DRAMCtrl
wrQLenPdf	./mem/dram_ctrl.hh	/^    Stats::Vector wrQLenPdf;$/;"	m	class:DRAMCtrl
wrapInstObjParams	./arch/isa_parser.py	/^        def wrapInstObjParams(*args):$/;"	f	function:ISAParser.updateExportContext
wrap_decode_block	./arch/isa_parser.py	/^    def wrap_decode_block(self, pre, post = ''):$/;"	m	class:GenCode
wrappedFileStream	./proto/protoio.hh	/^    google::protobuf::io::IstreamInputStream* wrappedFileStream;$/;"	m	class:ProtoInputStream
wrappedFileStream	./proto/protoio.hh	/^    google::protobuf::io::OstreamOutputStream* wrappedFileStream;$/;"	m	class:ProtoOutputStream
wrapper	./mem/dramsim2.hh	/^    DRAMSim2Wrapper wrapper;$/;"	m	class:DRAMSim2
wrapper_is_struct	./cpu/StaticInstFlags.py	/^    wrapper_is_struct = True$/;"	v	class:StaticInstFlags
wrapper_is_struct	./python/m5/params.py	/^    wrapper_is_struct = False$/;"	v	class:Enum
wrapper_name	./cpu/StaticInstFlags.py	/^    wrapper_name = 'StaticInstFlags'$/;"	v	class:StaticInstFlags
wrapper_name	./python/m5/params.py	/^    wrapper_name = 'Enums'$/;"	v	class:Enum
wrent	./arch/alpha/osfpal.hh	/^        wrent = 0x34,$/;"	e	enum:PAL::__anon50
wrfen	./arch/alpha/osfpal.hh	/^        wrfen = 0x2b,$/;"	e	enum:PAL::__anon50
wripir	./arch/alpha/osfpal.hh	/^        wripir = 0x0d,$/;"	e	enum:PAL::__anon50
writable	./arch/sparc/pagetable.hh	/^    bool writable() const { assert(populated); return bits(entry4u,1,1); }$/;"	f	class:SparcISA::PageTableEntry
writable	./arch/x86/pagetable.hh	/^        bool writable;$/;"	m	struct:X86ISA::TlbEntry
writable	./arch/x86/regs/misc.hh	/^        Bitfield<12> writable;$/;"	m	namespace:X86ISA
write	./arch/alpha/remote_gdb.cc	/^RemoteGDB::write(Addr vaddr, size_t size, const char *data)$/;"	f	class:RemoteGDB
write	./arch/arm/faults.hh	/^    bool write;$/;"	m	class:ArmISA::AbortFault
write	./arch/arm/kvm/gic.cc	/^KvmGic::write(PacketPtr pkt)$/;"	f	class:KvmGic
write	./arch/x86/faults.hh	/^            Bitfield<1> write;$/;"	m	class:X86ISA::PageFault
write	./arch/x86/interrupts.cc	/^X86ISA::Interrupts::write(PacketPtr pkt)$/;"	f	class:X86ISA::Interrupts
write	./base/bitmap.cc	/^Bitmap::write(std::ostream &bmp) const$/;"	f	class:Bitmap
write	./base/circlebuf.hh	/^    void write(InputIterator in, size_t len) {$/;"	f	class:CircleBuf
write	./base/circlebuf.hh	/^    void write(InputIterator in, size_t len) {$/;"	f	class:Fifo
write	./base/remote_gdb.cc	/^BaseRemoteGDB::write(Addr vaddr, size_t size, const char *data)$/;"	f	class:BaseRemoteGDB
write	./base/remote_gdb.hh	/^BaseRemoteGDB::write(Addr addr, T data)$/;"	f	class:BaseRemoteGDB
write	./base/vnc/vncserver.cc	/^VncServer::write(T* val)$/;"	f	class:VncServer
write	./base/vnc/vncserver.cc	/^VncServer::write(const char* str)$/;"	f	class:VncServer
write	./base/vnc/vncserver.cc	/^VncServer::write(const uint8_t *buf, size_t len)$/;"	f	class:VncServer
write	./cpu/o3/cpu.hh	/^    Fault write(RequestPtr &req, RequestPtr &sreqLow, RequestPtr &sreqHigh,$/;"	f	class:FullO3CPU
write	./cpu/o3/lsq.hh	/^LSQ<Impl>::write(RequestPtr req, RequestPtr sreqLow, RequestPtr sreqHigh,$/;"	f	class:LSQ
write	./cpu/o3/lsq_unit.hh	/^LSQUnit<Impl>::write(Request *req, Request *sreqLow, Request *sreqHigh,$/;"	f	class:LSQUnit
write	./dev/alpha/backdoor.cc	/^AlphaBackdoor::write(PacketPtr pkt)$/;"	f	class:AlphaBackdoor
write	./dev/alpha/tsunami_cchip.cc	/^TsunamiCChip::write(PacketPtr pkt)$/;"	f	class:TsunamiCChip
write	./dev/alpha/tsunami_io.cc	/^TsunamiIO::write(PacketPtr pkt)$/;"	f	class:TsunamiIO
write	./dev/alpha/tsunami_pchip.cc	/^TsunamiPChip::write(PacketPtr pkt)$/;"	f	class:TsunamiPChip
write	./dev/arm/a9scu.cc	/^A9SCU::write(PacketPtr pkt)$/;"	f	class:A9SCU
write	./dev/arm/amba_fake.cc	/^AmbaFake::write(PacketPtr pkt)$/;"	f	class:AmbaFake
write	./dev/arm/energy_ctrl.cc	/^EnergyCtrl::write(PacketPtr pkt)$/;"	f	class:EnergyCtrl
write	./dev/arm/generic_timer.cc	/^GenericTimerMem::write(PacketPtr pkt)$/;"	f	class:GenericTimerMem
write	./dev/arm/gic_pl390.cc	/^Pl390::write(PacketPtr pkt)$/;"	f	class:Pl390
write	./dev/arm/gic_v2m.cc	/^Gicv2m::write(PacketPtr pkt)$/;"	f	class:Gicv2m
write	./dev/arm/gpu_nomali.cc	/^NoMaliGpu::write(PacketPtr pkt)$/;"	f	class:NoMaliGpu
write	./dev/arm/hdlcd.cc	/^HDLcd::write(PacketPtr pkt)$/;"	f	class:HDLcd
write	./dev/arm/kmi.cc	/^Pl050::write(PacketPtr pkt)$/;"	f	class:Pl050
write	./dev/arm/pl011.cc	/^Pl011::write(PacketPtr pkt)$/;"	f	class:Pl011
write	./dev/arm/pl111.cc	/^Pl111::write(PacketPtr pkt)$/;"	f	class:Pl111
write	./dev/arm/rtc_pl031.cc	/^PL031::write(PacketPtr pkt)$/;"	f	class:PL031
write	./dev/arm/rv_ctrl.cc	/^RealViewCtrl::write(PacketPtr pkt)$/;"	f	class:RealViewCtrl
write	./dev/arm/rv_ctrl.cc	/^RealViewOsc::write(uint32_t freq)$/;"	f	class:RealViewOsc
write	./dev/arm/timer_cpulocal.cc	/^CpuLocalTimer::Timer::write(PacketPtr pkt, Addr daddr)$/;"	f	class:CpuLocalTimer::Timer
write	./dev/arm/timer_cpulocal.cc	/^CpuLocalTimer::write(PacketPtr pkt)$/;"	f	class:CpuLocalTimer
write	./dev/arm/timer_sp804.cc	/^Sp804::Timer::write(PacketPtr pkt, Addr daddr)$/;"	f	class:Sp804::Timer
write	./dev/arm/timer_sp804.cc	/^Sp804::write(PacketPtr pkt)$/;"	f	class:Sp804
write	./dev/arm/ufs_device.cc	/^UFSHostDevice::write(PacketPtr pkt)$/;"	f	class:UFSHostDevice
write	./dev/arm/vgic.cc	/^VGic::write(PacketPtr pkt)$/;"	f	class:VGic
write	./dev/baddev.cc	/^BadDevice::write(PacketPtr pkt)$/;"	f	class:BadDevice
write	./dev/i2c/bus.cc	/^I2CBus::write(PacketPtr pkt)$/;"	f	class:I2CBus
write	./dev/intel_8254_timer.cc	/^Intel8254Timer::Counter::write(const uint8_t data)$/;"	f	class:Intel8254Timer::Counter
write	./dev/isa_fake.cc	/^IsaFake::write(PacketPtr pkt)$/;"	f	class:IsaFake
write	./dev/mips/malta_cchip.cc	/^MaltaCChip::write(PacketPtr pkt)$/;"	f	class:MaltaCChip
write	./dev/mips/malta_io.cc	/^MaltaIO::write(PacketPtr pkt)$/;"	f	class:MaltaIO
write	./dev/net/i8254xGBe.cc	/^IGbE::write(PacketPtr pkt)$/;"	f	class:IGbE
write	./dev/net/ns_gige.cc	/^NSGigE::write(PacketPtr pkt)$/;"	f	class:NSGigE
write	./dev/net/sinic.cc	/^Device::write(PacketPtr pkt)$/;"	f	class:Sinic::Device
write	./dev/net/sinicreg.hh	/^    bool write;$/;"	m	struct:Sinic::Regs::Info
write	./dev/pci/copy_engine.cc	/^CopyEngine::write(PacketPtr pkt)$/;"	f	class:CopyEngine
write	./dev/pci/copy_engine.hh	/^        virtual Tick write(PacketPtr pkt)$/;"	f	class:CopyEngine::CopyEngineChannel
write	./dev/pci/host.cc	/^GenericPciHost::write(PacketPtr pkt)$/;"	f	class:GenericPciHost
write	./dev/sparc/dtod.cc	/^DumbTOD::write(PacketPtr pkt)$/;"	f	class:DumbTOD
write	./dev/sparc/iob.cc	/^Iob::write(PacketPtr pkt)$/;"	f	class:Iob
write	./dev/sparc/mm_disk.cc	/^MmDisk::write(PacketPtr pkt)$/;"	f	class:MmDisk
write	./dev/storage/disk_image.cc	/^CowDiskImage::write(const uint8_t *data, std::streampos offset)$/;"	f	class:CowDiskImage
write	./dev/storage/disk_image.cc	/^RawDiskImage::write(const uint8_t *data, std::streampos offset)$/;"	f	class:RawDiskImage
write	./dev/storage/ide_ctrl.cc	/^IdeController::write(PacketPtr pkt)$/;"	f	class:IdeController
write	./dev/storage/simple_disk.cc	/^SimpleDisk::write(Addr addr, baddr_t block, int count)$/;"	f	class:SimpleDisk
write	./dev/terminal.cc	/^Terminal::write(const uint8_t *buf, size_t len)$/;"	f	class:Terminal
write	./dev/terminal.hh	/^    void write(uint8_t c) { write(&c, 1); }$/;"	f	class:Terminal
write	./dev/uart8250.cc	/^Uart8250::write(PacketPtr pkt)$/;"	f	class:Uart8250
write	./dev/virtio/base.cc	/^VirtDescriptor::write(size_t offset, const uint8_t *src, size_t size)$/;"	f	class:VirtDescriptor
write	./dev/virtio/base.hh	/^        void write() {$/;"	f	class:VirtQueue::VirtRing
write	./dev/virtio/block.cc	/^VirtIOBlock::write(const BlkRequest &req, VirtDescriptor *desc_chain,$/;"	f	class:VirtIOBlock
write	./dev/virtio/fs9p.cc	/^VirtIO9PDiod::write(const uint8_t *data, size_t len)$/;"	f	class:VirtIO9PDiod
write	./dev/virtio/fs9p.cc	/^VirtIO9PSocket::write(const uint8_t *data, size_t len)$/;"	f	class:VirtIO9PSocket
write	./dev/virtio/pci.cc	/^PciVirtIO::write(PacketPtr pkt)$/;"	f	class:PciVirtIO
write	./dev/x86/cmos.cc	/^X86ISA::Cmos::write(PacketPtr pkt)$/;"	f	class:X86ISA::Cmos
write	./dev/x86/i8042.cc	/^X86ISA::I8042::write(PacketPtr pkt)$/;"	f	class:X86ISA::I8042
write	./dev/x86/i82094aa.cc	/^X86ISA::I82094AA::write(PacketPtr pkt)$/;"	f	class:X86ISA::I82094AA
write	./dev/x86/i8237.cc	/^X86ISA::I8237::write(PacketPtr pkt)$/;"	f	class:X86ISA::I8237
write	./dev/x86/i8254.cc	/^X86ISA::I8254::write(PacketPtr pkt)$/;"	f	class:X86ISA::I8254
write	./dev/x86/i8259.cc	/^X86ISA::I8259::write(PacketPtr pkt)$/;"	f	class:X86ISA::I8259
write	./dev/x86/speaker.cc	/^X86ISA::Speaker::write(PacketPtr pkt)$/;"	f	class:X86ISA::Speaker
write	./kern/tru64/tru64_syscalls.hh	/^        write = 4,$/;"	e	enum:SystemCalls::__anon102
write	./mem/port_proxy.hh	/^PortProxy::write(Addr address, T data) const$/;"	f	class:PortProxy
write	./mem/ruby/system/DMASequencer.hh	/^    bool write;$/;"	m	struct:DMARequest
write	./proto/protoio.cc	/^ProtoOutputStream::write(const Message& msg)$/;"	f	class:ProtoOutputStream
write	./python/m5/util/code_formatter.py	/^    def write(self, *args):$/;"	m	class:code_formatter
writeAccess	./dev/arm/flash_device.hh	/^        Stats::Histogram writeAccess;$/;"	m	struct:FlashDevice::FlashDeviceStats
writeAccesses	./arch/arm/tlb.hh	/^    Stats::Formula writeAccesses;$/;"	m	class:ArmISA::TLB
writeAddrDist	./mem/comm_monitor.hh	/^        Stats::SparseHistogram writeAddrDist;$/;"	m	struct:CommMonitor::MonitorStats
writeAddrMask	./mem/comm_monitor.hh	/^    const Addr writeAddrMask;$/;"	m	class:CommMonitor
writeAll	./dev/virtio/fs9p.cc	/^VirtIO9PProxy::writeAll(const uint8_t *data, size_t len)$/;"	f	class:VirtIO9PProxy
writeBandwidthHist	./mem/comm_monitor.hh	/^        Stats::Histogram writeBandwidthHist;$/;"	m	struct:CommMonitor::MonitorStats
writeBit	./mem/ruby/filters/BlockBloomFilter.cc	/^BlockBloomFilter::writeBit(const int index, const int value)$/;"	f	class:BlockBloomFilter
writeBit	./mem/ruby/filters/BulkBloomFilter.cc	/^BulkBloomFilter::writeBit(const int index, const int value)$/;"	f	class:BulkBloomFilter
writeBit	./mem/ruby/filters/H3BloomFilter.cc	/^H3BloomFilter::writeBit(const int index, const int value)$/;"	f	class:H3BloomFilter
writeBit	./mem/ruby/filters/LSB_CountingBloomFilter.cc	/^LSB_CountingBloomFilter::writeBit(const int index, const int value)$/;"	f	class:LSB_CountingBloomFilter
writeBit	./mem/ruby/filters/MultiBitSelBloomFilter.cc	/^MultiBitSelBloomFilter::writeBit(const int index, const int value)$/;"	f	class:MultiBitSelBloomFilter
writeBit	./mem/ruby/filters/MultiGrainBloomFilter.cc	/^MultiGrainBloomFilter::writeBit(const int index, const int value)$/;"	f	class:MultiGrainBloomFilter
writeBit	./mem/ruby/filters/NonCountingBloomFilter.cc	/^NonCountingBloomFilter::writeBit(const int index, const int value)$/;"	f	class:NonCountingBloomFilter
writeBlob	./mem/fs_translating_port_proxy.cc	/^FSTranslatingPortProxy::writeBlob(Addr addr, const uint8_t *p, int size) const$/;"	f	class:FSTranslatingPortProxy
writeBlob	./mem/port_proxy.cc	/^PortProxy::writeBlob(Addr addr, const uint8_t *p, int size) const$/;"	f	class:PortProxy
writeBlob	./mem/se_translating_port_proxy.cc	/^SETranslatingPortProxy::writeBlob(Addr addr, const uint8_t *p, int size) const$/;"	f	class:SETranslatingPortProxy
writeBuffer	./mem/cache/base.hh	/^    MSHRQueue writeBuffer;$/;"	m	class:BaseCache
writeBufferSize	./mem/dram_ctrl.hh	/^    const uint32_t writeBufferSize;$/;"	m	class:DRAMCtrl
writeBurstLengthHist	./mem/comm_monitor.hh	/^        Stats::Histogram writeBurstLengthHist;$/;"	m	struct:CommMonitor::MonitorStats
writeBursts	./mem/dram_ctrl.hh	/^    Stats::Scalar writeBursts;$/;"	m	class:DRAMCtrl
writeByte	./mem/ruby/common/SubBlock.hh	/^    void writeByte(uint8_t data) { setByte(0, data); }$/;"	f	class:SubBlock
writeCallback	./mem/ruby/system/Sequencer.cc	/^Sequencer::writeCallback(Addr address, DataBlock& data,$/;"	f	class:Sequencer
writeClusters	./mem/mem_checker.hh	/^        WriteClusterList writeClusters;$/;"	m	class:MemChecker::ByteTracker
writeCodeFiles	./mem/slicc/parser.py	/^    def writeCodeFiles(self, code_path, includes):$/;"	m	class:SLICC
writeCodeFiles	./mem/slicc/symbols/Func.py	/^    def writeCodeFiles(self, path, includes):$/;"	m	class:Func
writeCodeFiles	./mem/slicc/symbols/StateMachine.py	/^    def writeCodeFiles(self, path, includes):$/;"	m	class:StateMachine
writeCodeFiles	./mem/slicc/symbols/SymbolTable.py	/^    def writeCodeFiles(self, path, includes):$/;"	m	class:SymbolTable
writeCodeFiles	./mem/slicc/symbols/Type.py	/^    def writeCodeFiles(self, path, includes):$/;"	m	class:Type
writeCodeFiles	./mem/slicc/symbols/Var.py	/^    def writeCodeFiles(self, path, includes):$/;"	m	class:Var
writeCommand	./dev/storage/ide_disk.cc	/^IdeDisk::writeCommand(const Addr offset, int size, const uint8_t *data)$/;"	f	class:IdeDisk
writeComplete	./mem/dramsim2.cc	/^void DRAMSim2::writeComplete(unsigned id, uint64_t addr, uint64_t cycle)$/;"	f	class:DRAMSim2
writeCompleteEvent	./dev/pci/copy_engine.hh	/^            writeCompleteEvent;$/;"	m	class:CopyEngine::CopyEngineChannel
writeCompletionStatus	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::writeCompletionStatus()$/;"	f	class:CopyEngine::CopyEngineChannel
writeCompressedTrace	./mem/ruby/system/RubySystem.cc	/^RubySystem::writeCompressedTrace(uint8_t *raw_data, string filename,$/;"	f	class:RubySystem
writeConfig	./dev/net/i8254xGBe.cc	/^IGbE::writeConfig(PacketPtr pkt)$/;"	f	class:IGbE
writeConfig	./dev/net/ns_gige.cc	/^NSGigE::writeConfig(PacketPtr pkt)$/;"	f	class:NSGigE
writeConfig	./dev/pci/device.cc	/^PciDevice::writeConfig(PacketPtr pkt)$/;"	f	class:PciDevice
writeConfig	./dev/storage/ide_ctrl.cc	/^IdeController::writeConfig(PacketPtr pkt)$/;"	f	class:IdeController
writeConfig	./dev/virtio/base.cc	/^VirtIODeviceBase::writeConfig(PacketPtr pkt, Addr cfgOffset)$/;"	f	class:VirtIODeviceBase
writeConfigBlob	./dev/virtio/base.cc	/^VirtIODeviceBase::writeConfigBlob(PacketPtr pkt, Addr cfgOffset, uint8_t *cfg)$/;"	f	class:VirtIODeviceBase
writeControl	./dev/intel_8254_timer.cc	/^Intel8254Timer::writeControl(const CtrlReg data)$/;"	f	class:Intel8254Timer
writeControl	./dev/storage/ide_disk.cc	/^IdeDisk::writeControl(const Addr offset, int size, const uint8_t *data)$/;"	f	class:IdeDisk
writeControl	./dev/x86/i8254.hh	/^    writeControl(uint8_t val)$/;"	f	class:X86ISA::I8254
writeCopyBytes	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::writeCopyBytes()$/;"	f	class:CopyEngine::CopyEngineChannel
writeCopyBytesComplete	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::writeCopyBytesComplete()$/;"	f	class:CopyEngine::CopyEngineChannel
writeCounter	./dev/intel_8254_timer.hh	/^    writeCounter(unsigned int num, const uint8_t data)$/;"	f	class:Intel8254Timer
writeCounter	./dev/x86/i8254.hh	/^    writeCounter(unsigned int num, const uint8_t data)$/;"	f	class:X86ISA::I8254
writeCpu	./dev/arm/gic_pl390.cc	/^Pl390::writeCpu(PacketPtr pkt)$/;"	f	class:Pl390
writeCtrl	./dev/arm/vgic.cc	/^VGic::writeCtrl(PacketPtr pkt)$/;"	f	class:VGic
writeDSPControl	./arch/mips/dsp.cc	/^MipsISA::writeDSPControl(uint32_t *dspctl, uint32_t value, uint32_t mask)$/;"	f	class:MipsISA
writeData	./dev/mc146818.cc	/^MC146818::writeData(const uint8_t addr, const uint8_t data)$/;"	f	class:MC146818
writeData	./dev/x86/i8042.cc	/^X86ISA::I8042::writeData(uint8_t newData, bool mouse)$/;"	f	class:X86ISA::I8042
writeData	./mem/packet.hh	/^    writeData(uint8_t *p) const$/;"	f	class:Packet
writeDataToBlock	./mem/packet.hh	/^    writeDataToBlock(uint8_t *blk_data, int blkSize) const$/;"	f	class:Packet
writeDepTrace	./cpu/o3/probe/elastic_trace.cc	/^ElasticTrace::writeDepTrace(uint32_t num_to_write)$/;"	f	class:ElasticTrace
writeDevice	./dev/arm/ufs_device.cc	/^UFSHostDevice::writeDevice(Event* additional_action, bool toDisk, Addr$/;"	f	class:UFSHostDevice
writeDisk	./dev/storage/ide_disk.cc	/^IdeDisk::writeDisk(uint32_t sector, uint8_t *data)$/;"	f	class:IdeDisk
writeDistributor	./dev/arm/gic_pl390.cc	/^Pl390::writeDistributor(PacketPtr pkt)$/;"	f	class:Pl390
writeDone	./dev/arm/ufs_device.cc	/^UFSHostDevice::writeDone()$/;"	f	class:UFSHostDevice
writeDoneEvent	./dev/arm/ufs_device.hh	/^    writeDoneEvent;$/;"	m	class:UFSHostDevice
writeElementAsTrace	./cpu/trace/trace_cpu.cc	/^TraceCPU::ElasticDataGen::GraphNode::writeElementAsTrace() const$/;"	f	class:TraceCPU::ElasticDataGen::GraphNode
writeEnergy	./mem/dram_ctrl.hh	/^        Stats::Scalar writeEnergy;$/;"	m	class:DRAMCtrl::Rank
writeFlash	./dev/arm/ufs_device.cc	/^UFSHostDevice::UFSSCSIDevice::writeFlash(uint8_t* writeaddr, uint64_t offset,$/;"	f	class:UFSHostDevice::UFSSCSIDevice
writeFunc	./sim/syscall_emul.cc	/^writeFunc(SyscallDesc *desc, int num, LiveProcess *p, ThreadContext *tc)$/;"	f
writeHTMLFiles	./mem/slicc/parser.py	/^    def writeHTMLFiles(self, html_path):$/;"	m	class:SLICC
writeHTMLFiles	./mem/slicc/symbols/StateMachine.py	/^    def writeHTMLFiles(self, path):$/;"	m	class:StateMachine
writeHTMLFiles	./mem/slicc/symbols/Symbol.py	/^    def writeHTMLFiles(self, path):$/;"	m	class:Symbol
writeHTMLFiles	./mem/slicc/symbols/SymbolTable.py	/^    def writeHTMLFiles(self, path):$/;"	m	class:SymbolTable
writeHeader	./dev/virtio/base.hh	/^        void writeHeader() {$/;"	f	class:VirtQueue::VirtRing
writeHighThreshold	./mem/dram_ctrl.hh	/^    const uint32_t writeHighThreshold;$/;"	m	class:DRAMCtrl
writeHits	./arch/arm/tlb.hh	/^    mutable Stats::Scalar writeHits;$/;"	m	class:ArmISA::TLB
writeHtoG	./mem/port_proxy.hh	/^PortProxy::writeHtoG(Addr address, T data) const$/;"	f	class:PortProxy
writeIob	./dev/sparc/iob.cc	/^Iob::writeIob(PacketPtr pkt)$/;"	f	class:Iob
writeJBus	./dev/sparc/iob.cc	/^Iob::writeJBus(PacketPtr pkt)$/;"	f	class:Iob
writeLatency	./dev/arm/flash_device.hh	/^        Stats::Histogram writeLatency;$/;"	m	struct:FlashDevice::FlashDeviceStats
writeLatency	./dev/arm/flash_device.hh	/^    const Tick writeLatency;$/;"	m	class:FlashDevice
writeLatencyHist	./mem/comm_monitor.hh	/^        Stats::Histogram writeLatencyHist;$/;"	m	struct:CommMonitor::MonitorStats
writeLinearHist	./mem/probes/stack_dist.hh	/^    Stats::Histogram writeLinearHist;$/;"	m	class:StackDistProbe
writeLogHist	./mem/probes/stack_dist.hh	/^    Stats::SparseHistogram writeLogHist;$/;"	m	class:StackDistProbe
writeLowThreshold	./mem/dram_ctrl.hh	/^    const uint32_t writeLowThreshold;$/;"	m	class:DRAMCtrl
writeMem	./cpu/base_dyn_inst.hh	/^BaseDynInst<Impl>::writeMem(uint8_t *data, unsigned size,$/;"	f	class:BaseDynInst
writeMem	./cpu/checker/cpu.cc	/^CheckerCPU::writeMem(uint8_t *data, unsigned size,$/;"	f	class:CheckerCPU
writeMem	./cpu/minor/exec_context.hh	/^    writeMem(uint8_t *data, unsigned int size, Addr addr,$/;"	f	class:Minor::ExecContext
writeMem	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::writeMem(uint8_t *data, unsigned size,$/;"	f	class:AtomicSimpleCPU
writeMem	./cpu/simple/timing.cc	/^TimingSimpleCPU::writeMem(uint8_t *data, unsigned size,$/;"	f	class:TimingSimpleCPU
writeMemAtomic	./arch/generic/memhelpers.hh	/^writeMemAtomic(XC *xc, Trace::InstRecord *traceData, const MemT &mem,$/;"	f
writeMemAtomic	./arch/x86/memhelpers.hh	/^writeMemAtomic(XC *xc, Trace::InstRecord *traceData, uint64_t mem,$/;"	f	namespace:X86ISA
writeMemTiming	./arch/generic/memhelpers.hh	/^writeMemTiming(XC *xc, Trace::InstRecord *traceData, MemT mem, Addr addr,$/;"	f
writeMemTiming	./arch/x86/memhelpers.hh	/^writeMemTiming(XC *xc, Trace::InstRecord *traceData, uint64_t mem,$/;"	f	namespace:X86ISA
writeMisses	./arch/arm/tlb.hh	/^    mutable Stats::Scalar writeMisses;$/;"	m	class:ArmISA::TLB
writeOK	./mem/abstract_mem.hh	/^    bool writeOK(PacketPtr pkt) {$/;"	f	class:AbstractMemory
writeOut	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::AddrSpaceMapping::writeOut($/;"	f	class:X86ISA::IntelMP::AddrSpaceMapping
writeOut	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::BaseConfigEntry::writeOut(PortProxy& proxy,$/;"	f	class:X86ISA::IntelMP::BaseConfigEntry
writeOut	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::Bus::writeOut($/;"	f	class:X86ISA::IntelMP::Bus
writeOut	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::BusHierarchy::writeOut($/;"	f	class:X86ISA::IntelMP::BusHierarchy
writeOut	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::CompatAddrSpaceMod::writeOut($/;"	f	class:X86ISA::IntelMP::CompatAddrSpaceMod
writeOut	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::ConfigTable::writeOut(PortProxy& proxy, Addr addr)$/;"	f	class:X86ISA::IntelMP::ConfigTable
writeOut	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::ExtConfigEntry::writeOut(PortProxy& proxy,$/;"	f	class:X86ISA::IntelMP::ExtConfigEntry
writeOut	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::FloatingPointer::writeOut(PortProxy& proxy, Addr addr)$/;"	f	class:X86ISA::IntelMP::FloatingPointer
writeOut	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::IOAPIC::writeOut($/;"	f	class:X86ISA::IntelMP::IOAPIC
writeOut	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::IntAssignment::writeOut($/;"	f	class:X86ISA::IntelMP::IntAssignment
writeOut	./arch/x86/bios/intelmp.cc	/^X86ISA::IntelMP::Processor::writeOut($/;"	f	class:X86ISA::IntelMP::Processor
writeOut	./arch/x86/bios/smbios.cc	/^X86ISA::SMBios::BiosInformation::writeOut(PortProxy& proxy, Addr addr)$/;"	f	class:X86ISA::SMBios::BiosInformation
writeOut	./arch/x86/bios/smbios.cc	/^X86ISA::SMBios::SMBiosStructure::writeOut(PortProxy& proxy, Addr addr)$/;"	f	class:X86ISA::SMBios::SMBiosStructure
writeOut	./arch/x86/bios/smbios.cc	/^X86ISA::SMBios::SMBiosTable::writeOut(PortProxy& proxy, Addr addr,$/;"	f	class:X86ISA::SMBios::SMBiosTable
writeOutField	./arch/x86/bios/intelmp.cc	/^writeOutField(PortProxy& proxy, Addr addr, T val)$/;"	f
writeOutMPTable	./arch/x86/system.cc	/^X86System::writeOutMPTable(Addr fp,$/;"	f	class:X86System
writeOutSMBiosTable	./arch/x86/system.cc	/^X86System::writeOutSMBiosTable(Addr header,$/;"	f	class:X86System
writeOutString	./arch/x86/bios/intelmp.cc	/^writeOutString(PortProxy& proxy, Addr addr, string str, int length)$/;"	f
writeOutStrings	./arch/x86/bios/smbios.cc	/^X86ISA::SMBios::SMBiosStructure::writeOutStrings($/;"	f	class:X86ISA::SMBios::SMBiosStructure
writePacket	./dev/net/i8254xGBe.cc	/^IGbE::RxDescCache::writePacket(EthPacketPtr packet, int pkt_offset)$/;"	f	class:IGbE::RxDescCache
writePendingNum	./dev/arm/ufs_device.hh	/^    int writePendingNum;$/;"	m	class:UFSHostDevice
writePktSize	./mem/dram_ctrl.hh	/^    Stats::Vector writePktSize;$/;"	m	class:DRAMCtrl
writePorts	./cpu/testers/rubytest/RubyTester.hh	/^    std::vector<MasterPort*> writePorts;$/;"	m	class:RubyTester
writeQueue	./mem/dram_ctrl.hh	/^    std::deque<DRAMPacket*> writeQueue;$/;"	m	class:DRAMCtrl
writeQueueFull	./mem/dram_ctrl.cc	/^DRAMCtrl::writeQueueFull(unsigned int neededEntries) const$/;"	f	class:DRAMCtrl
writeReg	./dev/arm/gpu_nomali.cc	/^NoMaliGpu::writeReg(nomali_addr_t reg, uint32_t value)$/;"	f	class:NoMaliGpu
writeReg	./dev/arm/hdlcd.cc	/^HDLcd::writeReg(Addr offset, uint32_t value)$/;"	f	class:HDLcd
writeReg	./dev/x86/i82094aa.cc	/^X86ISA::I82094AA::writeReg(uint8_t offset, uint32_t value)$/;"	f	class:X86ISA::I82094AA
writeRegRaw	./dev/arm/gpu_nomali.cc	/^NoMaliGpu::writeRegRaw(nomali_addr_t reg, uint32_t value)$/;"	f	class:NoMaliGpu
writeRegister	./dev/x86/cmos.cc	/^X86ISA::Cmos::writeRegister(uint8_t reg, uint8_t val)$/;"	f	class:X86ISA::Cmos
writeReqs	./mem/dram_ctrl.hh	/^    Stats::Scalar writeReqs;$/;"	m	class:DRAMCtrl
writeRowHitRate	./mem/dram_ctrl.hh	/^    Stats::Formula writeRowHitRate;$/;"	m	class:DRAMCtrl
writeRowHits	./mem/dram_ctrl.hh	/^    Stats::Scalar writeRowHits;$/;"	m	class:DRAMCtrl
writeSfsr	./arch/sparc/tlb.cc	/^TLB::writeSfsr(Addr a, bool write, ContextType ct,$/;"	f	class:SparcISA::TLB
writeSfsr	./arch/sparc/tlb.cc	/^TLB::writeSfsr(bool write, ContextType ct, bool se, FaultTypes ft, int asi)$/;"	f	class:SparcISA::TLB
writeStatusComplete	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::writeStatusComplete()$/;"	f	class:CopyEngine::CopyEngineChannel
writeString	./mem/se_translating_port_proxy.cc	/^SETranslatingPortProxy::writeString(Addr addr, const char *str) const$/;"	f	class:SETranslatingPortProxy
writeTagAccess	./arch/sparc/tlb.cc	/^TLB::writeTagAccess(Addr va, int context)$/;"	f	class:SparcISA::TLB
writeTo	./arch/x86/bios/e820.cc	/^void X86ISA::E820Table::writeTo(PortProxy& proxy, Addr countAddr, Addr addr)$/;"	f	class:X86ISA::E820Table
writeToDiskBurst	./dev/arm/ufs_device.hh	/^    struct writeToDiskBurst {$/;"	s	class:UFSHostDevice
writeTrans	./mem/comm_monitor.hh	/^        unsigned int writeTrans;$/;"	m	struct:CommMonitor::MonitorStats
writeTransHist	./mem/comm_monitor.hh	/^        Stats::Histogram writeTransHist;$/;"	m	struct:CommMonitor::MonitorStats
writeVCpu	./dev/arm/vgic.cc	/^VGic::writeVCpu(PacketPtr pkt)$/;"	f	class:VGic
writeVal	./arch/x86/bios/e820.cc	/^void writeVal(T val, PortProxy& proxy, Addr &addr)$/;"	f
writeVecElem	./arch/arm/insts/neon64_mem.hh	/^writeVecElem(VReg *dest, XReg src, int index, int eSize)$/;"	f	namespace:ArmISA
writeWord	./base/framebuffer.cc	/^PixelConverter::writeWord(uint8_t *p, uint32_t word) const$/;"	f	class:PixelConverter
write_accesses	./arch/alpha/tlb.hh	/^    mutable Stats::Scalar write_accesses;$/;"	m	class:AlphaISA::TLB
write_accesses	./arch/mips/tlb.hh	/^    mutable Stats::Scalar write_accesses;$/;"	m	class:MipsISA::TLB
write_accesses	./arch/power/tlb.hh	/^    mutable Stats::Scalar write_accesses;$/;"	m	class:PowerISA::TLB
write_acv	./arch/alpha/tlb.hh	/^    mutable Stats::Scalar write_acv;$/;"	m	class:AlphaISA::TLB
write_acv	./arch/mips/tlb.hh	/^    mutable Stats::Scalar write_acv;$/;"	m	class:MipsISA::TLB
write_acv	./arch/power/tlb.hh	/^    mutable Stats::Scalar write_acv;$/;"	m	class:PowerISA::TLB
write_addr_mask	./mem/CommMonitor.py	/^    write_addr_mask = Param.Addr(MaxAddr, "Address mask for write address")$/;"	v	class:CommMonitor
write_buffer_size	./mem/DRAMCtrl.py	/^    write_buffer_size = 128$/;"	v	class:DDR4_2400_x64
write_buffer_size	./mem/DRAMCtrl.py	/^    write_buffer_size = 32$/;"	v	class:HMC_2500_x32
write_buffer_size	./mem/DRAMCtrl.py	/^    write_buffer_size = Param.Unsigned(64, "Number of write queue entries")$/;"	v	class:DRAMCtrl
write_buffers	./mem/cache/Cache.py	/^    write_buffers = Param.Unsigned(8, "Number of write buffers")$/;"	v	class:BaseCache
write_byte	./dev/intel_8254_timer.hh	/^        uint8_t read_byte, write_byte;$/;"	m	class:Intel8254Timer::Counter
write_high_thresh_perc	./mem/DRAMCtrl.py	/^    write_high_thresh_perc = Param.Percent(85, "Threshold to force writes")$/;"	v	class:DRAMCtrl
write_hits	./arch/alpha/tlb.hh	/^    mutable Stats::Scalar write_hits;$/;"	m	class:AlphaISA::TLB
write_hits	./arch/mips/tlb.hh	/^    mutable Stats::Scalar write_hits;$/;"	m	class:MipsISA::TLB
write_hits	./arch/power/tlb.hh	/^    mutable Stats::Scalar write_hits;$/;"	m	class:PowerISA::TLB
write_lat	./dev/arm/FlashDevice.py	/^    write_lat = Param.Latency("200us", "Write Latency")$/;"	v	class:FlashDevice
write_low_thresh_perc	./mem/DRAMCtrl.py	/^    write_low_thresh_perc = Param.Percent(50, "Threshold to start writes")$/;"	v	class:DRAMCtrl
write_misses	./arch/alpha/tlb.hh	/^    mutable Stats::Scalar write_misses;$/;"	m	class:AlphaISA::TLB
write_misses	./arch/mips/tlb.hh	/^    mutable Stats::Scalar write_misses;$/;"	m	class:MipsISA::TLB
write_misses	./arch/power/tlb.hh	/^    mutable Stats::Scalar write_misses;$/;"	m	class:PowerISA::TLB
write_top_level_files	./arch/isa_parser.py	/^    def write_top_level_files(self):$/;"	m	class:ISAParser
writeback	./arch/arm/types.hh	/^            Bitfield<21> writeback;$/;"	m	namespace:ArmISA
writeback	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::writeback(DynInstPtr &inst, PacketPtr pkt)$/;"	f	class:LSQUnit
writeback	./dev/net/i8254xGBe.cc	/^IGbE::DescCache<T>::writeback(Addr aMask)$/;"	f	class:IGbE::DescCache
writeback	./dev/storage/disk_image.cc	/^CowDiskImage::writeback()$/;"	f	class:CowDiskImage
writeback1	./dev/net/i8254xGBe.cc	/^IGbE::DescCache<T>::writeback1()$/;"	f	class:IGbE::DescCache
writebackBlk	./mem/cache/cache.cc	/^Cache::writebackBlk(CacheBlk *blk)$/;"	f	class:Cache
writebackClean	./mem/cache/cache.hh	/^    const bool writebackClean;$/;"	m	class:Cache
writebackCount	./cpu/o3/iew.hh	/^    Stats::Vector writebackCount;$/;"	m	class:DefaultIEW
writebackInsts	./cpu/o3/iew_impl.hh	/^DefaultIEW<Impl>::writebackInsts()$/;"	f	class:DefaultIEW
writebackPendingStore	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::writebackPendingStore()$/;"	f	class:LSQUnit
writebackStores	./cpu/o3/lsq_impl.hh	/^LSQ<Impl>::writebackStores()$/;"	f	class:LSQ
writebackStores	./cpu/o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::writebackStores()$/;"	f	class:LSQUnit
writebackTempBlockAtomic	./mem/cache/cache.hh	/^    void writebackTempBlockAtomic() {$/;"	f	class:Cache
writebackTempBlockAtomicEvent	./mem/cache/cache.hh	/^        writebackTempBlockAtomicEvent;$/;"	m	class:Cache
writebackVisitor	./mem/cache/cache.cc	/^Cache::writebackVisitor(CacheBlk &blk)$/;"	f	class:Cache
writeback_clean	./mem/cache/Cache.py	/^    writeback_clean = Param.Bool(False, "Writeback clean lines")$/;"	v	class:Cache
writebacks	./mem/cache/base.hh	/^    Stats::Vector writebacks;$/;"	m	class:BaseCache
writefile	./sim/pseudo_inst.cc	/^writefile(ThreadContext *tc, Addr vaddr, uint64_t len, uint64_t offset,$/;"	f	namespace:PseudoInst
writes	./arch/x86/pagetable_walker.hh	/^            std::vector<PacketPtr> writes;$/;"	m	class:X86ISA::Walker::WalkerState
writes	./mem/mem_checker.hh	/^        std::unordered_map<Serial, Transaction> writes;$/;"	m	class:MemChecker::WriteCluster
writesThisTime	./mem/dram_ctrl.hh	/^    uint32_t writesThisTime;$/;"	m	class:DRAMCtrl
writev	./kern/tru64/tru64_syscalls.hh	/^        writev = 121,$/;"	e	enum:SystemCalls::__anon102
writevFunc	./sim/syscall_emul.hh	/^writevFunc(SyscallDesc *desc, int callnum, LiveProcess *process,$/;"	f
writingInst	./cpu/minor/scoreboard.hh	/^    std::vector<InstSeqNum> writingInst;$/;"	m	class:Minor::Scoreboard
writtenBytes	./mem/comm_monitor.hh	/^        unsigned int writtenBytes;$/;"	m	struct:CommMonitor::MonitorStats
wrkgp	./arch/alpha/osfpal.hh	/^        wrkgp = 0x37,$/;"	e	enum:PAL::__anon50
wrmces	./arch/alpha/osfpal.hh	/^        wrmces = 0x11,$/;"	e	enum:PAL::__anon50
wroteToTimeBuffer	./cpu/o3/commit.hh	/^    bool wroteToTimeBuffer;$/;"	m	class:DefaultCommit
wroteToTimeBuffer	./cpu/o3/decode.hh	/^    bool wroteToTimeBuffer;$/;"	m	class:DefaultDecode
wroteToTimeBuffer	./cpu/o3/fetch.hh	/^    bool wroteToTimeBuffer;$/;"	m	class:DefaultFetch
wroteToTimeBuffer	./cpu/o3/iew.hh	/^    bool wroteToTimeBuffer;$/;"	m	class:DefaultIEW
wroteToTimeBuffer	./cpu/o3/rename.hh	/^    bool wroteToTimeBuffer;$/;"	m	class:DefaultRename
wrperfmon	./arch/alpha/osfpal.hh	/^        wrperfmon = 0x39,$/;"	e	enum:PAL::__anon50
wrunique	./arch/alpha/osfpal.hh	/^        wrunique = 0x9f,$/;"	e	enum:PAL::__anon50
wrusp	./arch/alpha/osfpal.hh	/^        wrusp = 0x38,$/;"	e	enum:PAL::__anon50
wrval	./arch/alpha/osfpal.hh	/^        wrval = 0x31,$/;"	e	enum:PAL::__anon50
wrvptptr	./arch/alpha/osfpal.hh	/^        wrvptptr = 0x2d,$/;"	e	enum:PAL::__anon50
wsba	./dev/alpha/tsunami_pchip.hh	/^    uint64_t wsba[4];$/;"	m	class:TsunamiPChip
wscale	./base/inet.hh	/^    uint8_t wscale() const { return opt_data.wscale; }$/;"	f	struct:Net::TcpOpt
wsm	./dev/alpha/tsunami_pchip.hh	/^    uint64_t wsm[4];$/;"	m	class:TsunamiPChip
wtint	./arch/alpha/osfpal.hh	/^        wtint = 0x3e,$/;"	e	enum:PAL::__anon50
wxn	./arch/arm/miscregs.hh	/^        Bitfield<19>   wxn;     \/\/ Write permission implies XN$/;"	m	namespace:ArmISA
x	./arch/arm/pmu.hh	/^        Bitfield<4> x;$/;"	m	class:ArmISA::PMU
x	./arch/arm/remote_gdb.hh	/^          uint64_t x[31];$/;"	m	struct:ArmISA::RemoteGDB::AArch64GdbRegCache::__anon68
x	./arch/x86/types.hh	/^            Bitfield<14> x;$/;"	m	namespace:X86ISA
x	./arch/x86/types.hh	/^        Bitfield<1> x;$/;"	m	namespace:X86ISA
x	./base/statistics.hh	/^    size_type x;$/;"	m	class:Stats::Vector2dBase
x	./base/stats/info.hh	/^    size_type x;$/;"	m	class:Stats::Vector2dInfo
x	./base/vnc/vncinput.hh	/^        uint16_t x;$/;"	m	struct:VncInput::FrameBufferUpdateReq
x	./base/vnc/vncinput.hh	/^        uint16_t x;$/;"	m	struct:VncInput::PointerEventMessage
x	./base/vnc/vncserver.hh	/^        uint16_t x;$/;"	m	struct:VncServer::FrameBufferRect
x	./python/m5/util/attrdict.py	/^    x = attrdict()$/;"	v
x	./python/m5/util/attrdict.py	/^    x = multiattrdict()$/;"	v
x	./python/m5/util/code_formatter.py	/^    x = "this is a test"$/;"	v	class:code_formatter
x	./python/m5/util/region.py	/^    x = Regions(*((i, i + 1) for i in xrange(0,30,2)))$/;"	v
x86IOAddress	./arch/x86/x86_traits.hh	/^    x86IOAddress(const uint32_t port)$/;"	f	namespace:X86ISA
x86IOAddress	./dev/x86/Pc.py	/^def x86IOAddress(port):$/;"	f
x86IOAddress	./dev/x86/SouthBridge.py	/^def x86IOAddress(port):$/;"	f
x86InterruptAddress	./arch/x86/x86_traits.hh	/^    x86InterruptAddress(const uint8_t id, const uint16_t addr)$/;"	f	namespace:X86ISA
x86LocalAPICAddress	./arch/x86/x86_traits.hh	/^    x86LocalAPICAddress(const uint8_t id, const uint16_t addr)$/;"	f	namespace:X86ISA
x86PciConfigAddress	./arch/x86/x86_traits.hh	/^    x86PciConfigAddress(const uint32_t addr)$/;"	f	namespace:X86ISA
xOverflow	./dev/ps2.hh	/^    Bitfield<6> xOverflow;$/;"	m	namespace:Ps2
xSign	./dev/ps2.hh	/^    Bitfield<4> xSign;$/;"	m	namespace:Ps2
xbar	./mem/coherent_xbar.hh	/^        CoherentXBar &xbar;$/;"	m	class:CoherentXBar::CoherentXBarMasterPort
xbar	./mem/coherent_xbar.hh	/^        CoherentXBar &xbar;$/;"	m	class:CoherentXBar::CoherentXBarSlavePort
xbar	./mem/noncoherent_xbar.hh	/^        NoncoherentXBar &xbar;$/;"	m	class:NoncoherentXBar::NoncoherentXBarMasterPort
xbar	./mem/noncoherent_xbar.hh	/^        NoncoherentXBar &xbar;$/;"	m	class:NoncoherentXBar::NoncoherentXBarSlavePort
xbar	./mem/xbar.hh	/^        BaseXBar& xbar;$/;"	m	class:BaseXBar::Layer
xbarRanges	./mem/xbar.hh	/^    AddrRangeList xbarRanges;$/;"	m	class:BaseXBar
xc	./cpu/translation.hh	/^    ExecContextPtr xc;$/;"	m	class:DataTranslation
xe	./arch/power/miscregs.hh	/^    Bitfield<4> xe;$/;"	m	namespace:PowerISA
xer	./arch/power/remote_gdb.hh	/^            uint32_t xer;$/;"	m	struct:PowerISA::RemoteGDB::PowerGdbRegCache::__anon53
xferCap	./dev/pci/copy_engine_defs.hh	/^    uint8_t xferCap;$/;"	m	struct:CopyEngineReg::Regs
xmm	./arch/x86/nativetrace.hh	/^        uint64_t xmm[32];$/;"	m	struct:Trace::X86NativeTrace::ThreadState
xmm	./cpu/kvm/x86_cpu.cc	/^    uint8_t xmm[16][16];$/;"	m	struct:FXSave	file:
xn	./arch/arm/pagetable.hh	/^    bool xn;                \/\/ Execute Never$/;"	m	struct:ArmISA::TlbEntry
xn	./arch/arm/table_walker.hh	/^        bool xn() const$/;"	f	class:ArmISA::TableWalker::L1Descriptor
xn	./arch/arm/table_walker.hh	/^        bool xn() const$/;"	f	class:ArmISA::TableWalker::L2Descriptor
xn	./arch/arm/table_walker.hh	/^        bool xn() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
xnTable	./arch/arm/table_walker.hh	/^        bool xnTable() const$/;"	f	class:ArmISA::TableWalker::LongDescriptor
xnTable	./arch/arm/table_walker.hh	/^        bool xnTable;$/;"	m	class:ArmISA::TableWalker::WalkerState
xorHighBit	./base/addr_range.hh	/^    uint8_t xorHighBit;$/;"	m	class:AddrRange
xp	./arch/arm/miscregs.hh	/^        Bitfield<23>   xp;      \/\/ Extended page table enable (dropped in ARMv7)$/;"	m	namespace:ArmISA
xre	./arch/alpha/pagetable.hh	/^    uint8_t xre;            \/\/ read permissions - VMEM_PERM_* mask$/;"	m	struct:AlphaISA::TlbEntry
xsdt	./arch/x86/bios/ACPI.py	/^    xsdt = Param.X86ACPIXSDT(X86ACPIXSDT(),$/;"	v	class:X86ACPIRSDP
xsdt	./arch/x86/bios/acpi.hh	/^    XSDT * xsdt;$/;"	m	class:X86ISA::ACPI::RSDP
xtc	./arch/mips/mt_constants.hh	/^    Bitfield<28, 21> xtc;$/;"	m	namespace:MipsISA
xwe	./arch/alpha/pagetable.hh	/^    uint8_t xwe;            \/\/ write permissions - VMEM_PERM_* mask$/;"	m	struct:AlphaISA::TlbEntry
xx	./arch/power/miscregs.hh	/^    Bitfield<25> xx;$/;"	m	namespace:PowerISA
y	./arch/sparc/remote_gdb.hh	/^            uint32_t y;$/;"	m	struct:SparcISA::RemoteGDB::SPARCGdbRegCache::__anon42
y	./arch/sparc/remote_gdb.hh	/^            uint64_t y;$/;"	m	struct:SparcISA::RemoteGDB::SPARC64GdbRegCache::__anon43
y	./base/statistics.hh	/^    size_type y;$/;"	m	class:Stats::Vector2dBase
y	./base/stats/info.hh	/^    size_type y;$/;"	m	class:Stats::Vector2dInfo
y	./base/vnc/vncinput.hh	/^        uint16_t y;$/;"	m	struct:VncInput::FrameBufferUpdateReq
y	./base/vnc/vncinput.hh	/^        uint16_t y;$/;"	m	struct:VncInput::PointerEventMessage
y	./base/vnc/vncserver.hh	/^        uint16_t y;$/;"	m	struct:VncServer::FrameBufferRect
y	./python/m5/util/code_formatter.py	/^    y = code_formatter()$/;"	v	class:code_formatter
y	./python/m5/util/region.py	/^    y = Regions(*((i, i + 4) for i in xrange(0,30,5)))$/;"	v
yOverflow	./dev/ps2.hh	/^    Bitfield<7> yOverflow;$/;"	m	namespace:Ps2
ySign	./dev/ps2.hh	/^    Bitfield<5> ySign;$/;"	m	namespace:Ps2
y_subnames	./base/stats/info.hh	/^    std::vector<std::string> y_subnames;$/;"	m	class:Stats::Vector2dInfo
year	./dev/mc146818.hh	/^            uint8_t year;$/;"	m	struct:MC146818::__anon17::__anon18
year_is_bcd	./dev/alpha/Tsunami.py	/^    year_is_bcd = Param.Bool(False,$/;"	v	class:TsunamiIO
year_is_bcd	./dev/mips/Malta.py	/^    year_is_bcd = Param.Bool(False,$/;"	v	class:MaltaIO
yieldThread	./arch/mips/mt.hh	/^yieldThread(TC *tc, Fault &fault, int src_reg, uint32_t yield_mask)$/;"	f	namespace:MipsISA
youngestSN	./cpu/checker/cpu.hh	/^    InstSeqNum youngestSN;$/;"	m	class:CheckerCPU
youngestSeqNum	./cpu/o3/commit.hh	/^    InstSeqNum youngestSeqNum[Impl::MaxThreads];$/;"	m	class:DefaultCommit
ysi	./arch/mips/mt_constants.hh	/^    Bitfield<21>     ysi;$/;"	m	namespace:MipsISA
ysize	./kern/tru64/tru64.hh	/^        size_t  ysize;          \/\/!< yellow zone size$/;"	m	struct:Tru64::vm_stack
ysubname	./base/statistics.hh	/^    ysubname(off_type i) const$/;"	f	class:Stats::DataWrapVec2d
ysubname	./base/statistics.hh	/^    ysubname(off_type index, const std::string &subname)$/;"	f	class:Stats::DataWrapVec2d
ysubnames	./base/statistics.hh	/^    ysubnames(const char **names)$/;"	f	class:Stats::DataWrapVec2d
z	./arch/arm/miscregs.hh	/^        Bitfield<11>   z;       \/\/ Branch prediction enable (ARMv7 only)$/;"	m	namespace:ArmISA
z	./arch/arm/miscregs.hh	/^        Bitfield<30> z;$/;"	m	namespace:ArmISA
z	./python/m5/util/region.py	/^    z = Region(6,7)$/;"	v
ze	./arch/power/miscregs.hh	/^    Bitfield<5> ze;$/;"	m	namespace:PowerISA
zero	./arch/x86/types.hh	/^        Bitfield<7,0> zero;$/;"	m	namespace:X86ISA
zero	./base/statistics.cc	/^Formula::zero() const$/;"	f	class:Stats::Formula
zero	./base/statistics.hh	/^    bool zero() const { return data == Counter(); }$/;"	f	class:Stats::StatStor
zero	./base/statistics.hh	/^    bool zero() const { return data()->zero(); }$/;"	f	class:Stats::DistBase
zero	./base/statistics.hh	/^    bool zero() const { return data()->zero(); }$/;"	f	class:Stats::SparseHistBase
zero	./base/statistics.hh	/^    bool zero() const { return proxy->zero(); }$/;"	f	class:Stats::ValueBase
zero	./base/statistics.hh	/^    bool zero() const { return s.zero(); }$/;"	f	class:Stats::InfoProxy
zero	./base/statistics.hh	/^    bool zero() const { return samples == Counter(); }$/;"	f	class:Stats::SampleStor
zero	./base/statistics.hh	/^    bool zero() const { return sum == Counter(); }$/;"	f	class:Stats::AvgSampleStor
zero	./base/statistics.hh	/^    bool zero() const { return total == 0.0; }$/;"	f	class:Stats::AvgStor
zero	./base/statistics.hh	/^    bool zero() const { return true; }$/;"	f	class:Stats::InfoAccess
zero	./base/statistics.hh	/^    bool zero() const { return value() == 0; }$/;"	f	class:Stats::ProxyInfo
zero	./base/statistics.hh	/^    bool zero() { return result() == 0.0; }$/;"	f	class:Stats::ScalarBase
zero	./base/statistics.hh	/^    zero() const$/;"	f	class:Stats::DistProxy
zero	./base/statistics.hh	/^    zero() const$/;"	f	class:Stats::DistStor
zero	./base/statistics.hh	/^    zero() const$/;"	f	class:Stats::HistStor
zero	./base/statistics.hh	/^    zero() const$/;"	f	class:Stats::SparseHistStor
zero	./base/statistics.hh	/^    zero() const$/;"	f	class:Stats::Vector2dBase
zero	./base/statistics.hh	/^    zero() const$/;"	f	class:Stats::VectorBase
zero	./base/statistics.hh	/^    zero() const$/;"	f	class:Stats::VectorDistBase
zero	./cpu/timebuf.hh	/^    wire zero()$/;"	f	class:TimeBuffer
zeroCopyStream	./proto/protoio.hh	/^    google::protobuf::io::ZeroCopyInputStream* zeroCopyStream;$/;"	m	class:ProtoInputStream
zeroCopyStream	./proto/protoio.hh	/^    google::protobuf::io::ZeroCopyOutputStream* zeroCopyStream;$/;"	m	class:ProtoOutputStream
zeroEvent	./dev/arm/timer_sp804.hh	/^        EventWrapper<Timer, &Timer::counterAtZero> zeroEvent;$/;"	m	class:Sp804::Timer
zeroReg	./cpu/o3/rename_map.hh	/^    RegIndex zeroReg;$/;"	m	class:SimpleRenameMap
zeroRegIdx	./cpu/o3/scoreboard.hh	/^    PhysRegIndex zeroRegIdx;$/;"	m	class:Scoreboard
zeroRegisters	./arch/alpha/ev5.cc	/^zeroRegisters(CPU *cpu)$/;"	f	namespace:AlphaISA
zeroRegisters	./arch/mips/utility.cc	/^zeroRegisters(CPU *cpu)$/;"	f	namespace:MipsISA
zero_copy	./dev/net/Ethernet.py	/^    zero_copy = Param.Bool(False, "Zero copy receive")$/;"	v	class:Sinic
zero_copy_size	./dev/net/Ethernet.py	/^    zero_copy_size = Param.UInt32(64, "Bytes to copy if below threshold")$/;"	v	class:Sinic
zero_copy_threshold	./dev/net/Ethernet.py	/^    zero_copy_threshold = Param.UInt32(256,$/;"	v	class:Sinic
zero_time	./mem/ruby/slicc_interface/RubySlicc_Util.hh	/^inline Cycles zero_time() { return Cycles(0); }$/;"	f
zf	./arch/x86/regs/misc.hh	/^        Bitfield<6> zf; \/\/ Zero Flag$/;"	m	namespace:X86ISA
zf	./arch/x86/regs/misc.hh	/^        Bitfield<6> zf;$/;"	m	namespace:X86ISA
zlen	./sim/init.hh	/^    int zlen;$/;"	m	struct:EmbeddedPython
zx	./arch/power/miscregs.hh	/^    Bitfield<26> zx;$/;"	m	namespace:PowerISA
~AbstractBloomFilter	./mem/ruby/filters/AbstractBloomFilter.hh	/^    virtual ~AbstractBloomFilter() {};$/;"	f	class:AbstractBloomFilter
~AbstractCacheEntry	./mem/ruby/slicc_interface/AbstractCacheEntry.cc	/^AbstractCacheEntry::~AbstractCacheEntry()$/;"	f	class:AbstractCacheEntry
~AbstractEntry	./mem/ruby/slicc_interface/AbstractEntry.cc	/^AbstractEntry::~AbstractEntry()$/;"	f	class:AbstractEntry
~AbstractMemory	./mem/abstract_mem.hh	/^    virtual ~AbstractMemory() {}$/;"	f	class:AbstractMemory
~AbstractNVM	./dev/arm/abstract_nvm.hh	/^    virtual ~AbstractNVM() {};$/;"	f	class:AbstractNVM
~AbstractReplacementPolicy	./mem/ruby/structures/AbstractReplacementPolicy.cc	/^AbstractReplacementPolicy::~AbstractReplacementPolicy()$/;"	f	class:AbstractReplacementPolicy
~AccessTraceForAddress	./mem/ruby/profiler/AccessTraceForAddress.cc	/^AccessTraceForAddress::~AccessTraceForAddress()$/;"	f	class:AccessTraceForAddress
~ActivityRecorder	./cpu/activity.cc	/^ActivityRecorder::~ActivityRecorder()$/;"	f	class:ActivityRecorder
~AddrMapper	./mem/addr_mapper.hh	/^    virtual ~AddrMapper() { }$/;"	f	class:AddrMapper
~AddrMapperSenderState	./mem/addr_mapper.hh	/^        ~AddrMapperSenderState() { }$/;"	f	class:AddrMapper::AddrMapperSenderState
~AddressProfiler	./mem/ruby/profiler/AddressProfiler.cc	/^AddressProfiler::~AddressProfiler()$/;"	f	class:AddressProfiler
~AlphaFault	./arch/alpha/faults.hh	/^    virtual ~AlphaFault() {}$/;"	f	class:AlphaISA::AlphaFault
~AlphaSystem	./arch/alpha/system.cc	/^AlphaSystem::~AlphaSystem()$/;"	f	class:AlphaSystem
~AoutObject	./base/loader/aout_object.hh	/^    virtual ~AoutObject() {}$/;"	f	class:AoutObject
~Arguments	./sim/arguments.hh	/^    ~Arguments() {}$/;"	f	class:Arguments
~ArmKvmCPU	./arch/arm/kvm/arm_cpu.cc	/^ArmKvmCPU::~ArmKvmCPU()$/;"	f	class:ArmKvmCPU
~ArmSystem	./arch/arm/system.cc	/^ArmSystem::~ArmSystem()$/;"	f	class:ArmSystem
~ArmV8KvmCPU	./arch/arm/kvm/armv8_cpu.cc	/^ArmV8KvmCPU::~ArmV8KvmCPU()$/;"	f	class:ArmV8KvmCPU
~AtagHeader	./arch/arm/linux/atag.hh	/^    virtual ~AtagHeader()$/;"	f	class:AtagHeader
~AtomicSimpleCPU	./cpu/simple/atomic.cc	/^AtomicSimpleCPU::~AtomicSimpleCPU()$/;"	f	class:AtomicSimpleCPU
~BPHistory	./cpu/pred/tournament.hh	/^        ~BPHistory()$/;"	f	struct:TournamentBP::BPHistory
~BareIronMipsSystem	./arch/mips/bare_iron/system.cc	/^BareIronMipsSystem::~BareIronMipsSystem()$/;"	f	class:BareIronMipsSystem
~BarrierEvent	./sim/global_event.cc	/^BaseGlobalEvent::BarrierEvent::~BarrierEvent()$/;"	f	class:BaseGlobalEvent::BarrierEvent
~BaseArmKvmCPU	./arch/arm/kvm/base_cpu.cc	/^BaseArmKvmCPU::~BaseArmKvmCPU()$/;"	f	class:BaseArmKvmCPU
~BaseBufferArg	./sim/syscall_emul_buf.hh	/^    ~BaseBufferArg() { delete [] bufPtr; }$/;"	f	class:BaseBufferArg
~BaseCPU	./cpu/base.cc	/^BaseCPU::~BaseCPU()$/;"	f	class:BaseCPU
~BaseCache	./mem/cache/base.hh	/^    ~BaseCache() {}$/;"	f	class:BaseCache
~BaseDynInst	./cpu/base_dyn_inst_impl.hh	/^BaseDynInst<Impl>::~BaseDynInst()$/;"	f	class:BaseDynInst
~BaseGen	./cpu/testers/traffic_gen/generators.hh	/^    virtual ~BaseGen() { }$/;"	f	class:BaseGen
~BaseGic	./dev/arm/base_gic.cc	/^BaseGic::~BaseGic()$/;"	f	class:BaseGic
~BaseGlobalEvent	./sim/global_event.cc	/^BaseGlobalEvent::~BaseGlobalEvent()$/;"	f	class:BaseGlobalEvent
~BaseISADevice	./arch/arm/isa_device.hh	/^    virtual ~BaseISADevice() {}$/;"	f	class:ArmISA::BaseISADevice
~BaseKvmCPU	./cpu/kvm/base.cc	/^BaseKvmCPU::~BaseKvmCPU()$/;"	f	class:BaseKvmCPU
~BaseKvmTimer	./cpu/kvm/timer.hh	/^    virtual ~BaseKvmTimer() {};$/;"	f	class:BaseKvmTimer
~BaseMasterPort	./mem/port.cc	/^BaseMasterPort::~BaseMasterPort()$/;"	f	class:BaseMasterPort
~BaseO3DynInst	./cpu/o3/dyn_inst_impl.hh	/^template <class Impl>BaseO3DynInst<Impl>::~BaseO3DynInst()$/;"	f	class:BaseO3DynInst
~BasePixelPump	./dev/pixelpump.cc	/^BasePixelPump::~BasePixelPump()$/;"	f	class:BasePixelPump
~BasePrefetcher	./mem/cache/prefetch/base.hh	/^    virtual ~BasePrefetcher() {}$/;"	f	class:BasePrefetcher
~BaseRemoteGDB	./arch/null/remote_gdb.hh	/^    virtual ~BaseRemoteGDB() {}$/;"	f	class:BaseRemoteGDB
~BaseRemoteGDB	./base/remote_gdb.cc	/^BaseRemoteGDB::~BaseRemoteGDB()$/;"	f	class:BaseRemoteGDB
~BaseSetAssoc	./mem/cache/tags/base_set_assoc.cc	/^BaseSetAssoc::~BaseSetAssoc()$/;"	f	class:BaseSetAssoc
~BaseSimpleCPU	./cpu/simple/base.cc	/^BaseSimpleCPU::~BaseSimpleCPU()$/;"	f	class:BaseSimpleCPU
~BaseSlavePort	./mem/port.cc	/^BaseSlavePort::~BaseSlavePort()$/;"	f	class:BaseSlavePort
~BaseTags	./mem/cache/tags/base.hh	/^    virtual ~BaseTags() {}$/;"	f	class:BaseTags
~BaseXBar	./mem/xbar.cc	/^BaseXBar::~BaseXBar()$/;"	f	class:BaseXBar
~Bitmap	./base/bitmap.cc	/^Bitmap::~Bitmap()$/;"	f	class:Bitmap
~BlockBloomFilter	./mem/ruby/filters/BlockBloomFilter.cc	/^BlockBloomFilter::~BlockBloomFilter()$/;"	f	class:BlockBloomFilter
~BulkBloomFilter	./mem/ruby/filters/BulkBloomFilter.cc	/^BulkBloomFilter::~BulkBloomFilter()$/;"	f	class:BulkBloomFilter
~Cache	./mem/cache/cache.cc	/^Cache::~Cache()$/;"	f	class:Cache
~CacheBlkPrintWrapper	./mem/cache/blk.hh	/^    virtual ~CacheBlkPrintWrapper() {}$/;"	f	class:CacheBlkPrintWrapper
~CacheBlkVisitor	./mem/cache/blk.hh	/^    virtual ~CacheBlkVisitor() {}$/;"	f	class:CacheBlkVisitor
~CacheMemory	./mem/ruby/structures/CacheMemory.cc	/^CacheMemory::~CacheMemory()$/;"	f	class:CacheMemory
~CacheRecorder	./mem/ruby/system/CacheRecorder.cc	/^CacheRecorder::~CacheRecorder()$/;"	f	class:CacheRecorder
~Callback	./base/callback.hh	/^    virtual ~Callback() {}$/;"	f	class:Callback
~CallbackQueue	./base/callback.cc	/^CallbackQueue::~CallbackQueue()$/;"	f	class:CallbackQueue
~Channel	./dev/storage/ide_ctrl.cc	/^IdeController::Channel::~Channel()$/;"	f	class:IdeController::Channel
~CheckTable	./cpu/testers/rubytest/CheckTable.cc	/^CheckTable::~CheckTable()$/;"	f	class:CheckTable
~CheckerCPU	./cpu/checker/cpu.cc	/^CheckerCPU::~CheckerCPU()$/;"	f	class:CheckerCPU
~CheckpointIn	./sim/serialize.cc	/^CheckpointIn::~CheckpointIn()$/;"	f	class:CheckpointIn
~Clocked	./sim/clocked_object.hh	/^    virtual ~Clocked() { }$/;"	f	class:Clocked
~CoherentXBar	./mem/coherent_xbar.cc	/^CoherentXBar::~CoherentXBar()$/;"	f	class:CoherentXBar
~CommMonitorSenderState	./mem/comm_monitor.hh	/^        ~CommMonitorSenderState() { }$/;"	f	class:CommMonitor::CommMonitorSenderState
~Consumer	./mem/ruby/common/Consumer.hh	/^    ~Consumer()$/;"	f	class:Consumer
~CopyEngine	./dev/pci/copy_engine.cc	/^CopyEngine::~CopyEngine()$/;"	f	class:CopyEngine
~CopyEngineChannel	./dev/pci/copy_engine.cc	/^CopyEngine::CopyEngineChannel::~CopyEngineChannel()$/;"	f	class:CopyEngine::CopyEngineChannel
~CowDiskImage	./dev/storage/disk_image.cc	/^CowDiskImage::~CowDiskImage()$/;"	f	class:CowDiskImage
~CpuEvent	./cpu/cpuevent.cc	/^CpuEvent::~CpuEvent()$/;"	f	class:CpuEvent
~CxxConfigDirectoryEntry	./sim/cxx_config.hh	/^    virtual ~CxxConfigDirectoryEntry() { }$/;"	f	class:CxxConfigDirectoryEntry
~CxxConfigFileBase	./sim/cxx_config.hh	/^    virtual ~CxxConfigFileBase() { }$/;"	f	class:CxxConfigFileBase
~CxxConfigParams	./sim/cxx_config.hh	/^    virtual ~CxxConfigParams() { }$/;"	f	class:CxxConfigParams
~DRAMSim2Wrapper	./mem/dramsim2_wrapper.cc	/^DRAMSim2Wrapper::~DRAMSim2Wrapper()$/;"	f	class:DRAMSim2Wrapper
~Data	./sim/arguments.cc	/^Arguments::Data::~Data()$/;"	f	class:Arguments::Data
~DataBlock	./mem/ruby/common/DataBlock.hh	/^    ~DataBlock()$/;"	f	class:DataBlock
~DependencyGraph	./cpu/o3/dep_graph.hh	/^DependencyGraph<DynInstPtr>::~DependencyGraph()$/;"	f	class:DependencyGraph
~DescCache	./dev/net/i8254xGBe.cc	/^IGbE::DescCache<T>::~DescCache()$/;"	f	class:IGbE::DescCache
~Device	./dev/arm/rv_ctrl.hh	/^        virtual ~Device() {}$/;"	f	class:RealViewCtrl::Device
~Device	./dev/net/sinic.cc	/^Device::~Device()$/;"	f	class:Sinic::Device
~DiodDataEvent	./dev/virtio/fs9p.hh	/^        virtual ~DiodDataEvent() {};$/;"	f	class:VirtIO9PDiod::DiodDataEvent
~DirectedGenerator	./cpu/testers/directedtest/DirectedGenerator.hh	/^    virtual ~DirectedGenerator() {}$/;"	f	class:DirectedGenerator
~DirectoryMemory	./mem/ruby/structures/DirectoryMemory.cc	/^DirectoryMemory::~DirectoryMemory()$/;"	f	class:DirectoryMemory
~DiskImage	./dev/storage/disk_image.hh	/^    virtual ~DiskImage() {}$/;"	f	class:DiskImage
~DistEtherLink	./dev/net/dist_etherlink.cc	/^DistEtherLink::~DistEtherLink()$/;"	f	class:DistEtherLink
~DistHeaderPkt	./dev/net/dist_packet.hh	/^    ~DistHeaderPkt() {}$/;"	f	class:DistHeaderPkt
~DistIface	./dev/net/dist_iface.cc	/^DistIface::~DistIface()$/;"	f	class:DistIface
~DmaDevice	./dev/dma_device.hh	/^    virtual ~DmaDevice() { }$/;"	f	class:DmaDevice
~DmaReadFifo	./dev/dma_device.cc	/^DmaReadFifo::~DmaReadFifo()$/;"	f	class:DmaReadFifo
~DrainManager	./sim/drain.cc	/^DrainManager::~DrainManager()$/;"	f	class:DrainManager
~Drainable	./sim/drain.cc	/^Drainable::~Drainable()$/;"	f	class:Drainable
~DtbObject	./base/loader/dtb_object.cc	/^DtbObject::~DtbObject()$/;"	f	class:DtbObject
~DummyISADevice	./arch/arm/isa_device.hh	/^    ~DummyISADevice() {}$/;"	f	class:ArmISA::DummyISADevice
~EcoffObject	./base/loader/ecoff_object.hh	/^    virtual ~EcoffObject() {}$/;"	f	class:EcoffObject
~ElfObject	./base/loader/elf_object.hh	/^    virtual ~ElfObject() {}$/;"	f	class:ElfObject
~EthPacketData	./dev/net/etherpkt.hh	/^    ~EthPacketData() { if (data) delete [] data; }$/;"	f	class:EthPacketData
~EtherBus	./dev/net/etherbus.hh	/^    virtual ~EtherBus() {}$/;"	f	class:EtherBus
~EtherInt	./dev/net/etherint.hh	/^    virtual ~EtherInt() {}$/;"	f	class:EtherInt
~EtherLink	./dev/net/etherlink.cc	/^EtherLink::~EtherLink()$/;"	f	class:EtherLink
~EtherTap	./dev/net/ethertap.cc	/^EtherTap::~EtherTap()$/;"	f	class:EtherTap
~Event	./sim/eventq.cc	/^Event::~Event()$/;"	f	class:Event
~EventQueue	./sim/eventq.hh	/^    virtual ~EventQueue() { }$/;"	f	class:EventQueue
~Exception	./sim/cxx_manager.hh	/^        ~Exception() throw() { }$/;"	f	class:CxxConfigManager::Exception
~Execute	./cpu/minor/execute.cc	/^Execute::~Execute()$/;"	f	class:Minor::Execute
~FALRU	./mem/cache/tags/fa_lru.cc	/^FALRU::~FALRU()$/;"	f	class:FALRU
~FSQueue	./dev/virtio/fs9p.hh	/^        virtual ~FSQueue() {}$/;"	f	class:VirtIO9PBase::FSQueue
~FSTranslatingPortProxy	./mem/fs_translating_port_proxy.cc	/^FSTranslatingPortProxy::~FSTranslatingPortProxy()$/;"	f	class:FSTranslatingPortProxy
~FUPool	./cpu/o3/fu_pool.cc	/^FUPool::~FUPool()$/;"	f	class:FUPool
~FetchRequest	./cpu/minor/fetch1.cc	/^Fetch1::FetchRequest::~FetchRequest()$/;"	f	class:Minor::Fetch1::FetchRequest
~Flag	./base/debug.cc	/^Flag::~Flag()$/;"	f	class:Debug::Flag
~FlashDevice	./dev/arm/flash_device.cc	/^FlashDevice::~FlashDevice()$/;"	f	class:FlashDevice
~ForwardLineData	./cpu/minor/pipe_data.hh	/^    ~ForwardLineData() { line = NULL; }$/;"	f	class:Minor::ForwardLineData
~FrameBuffer	./base/framebuffer.cc	/^FrameBuffer::~FrameBuffer()$/;"	f	class:FrameBuffer
~FreebsdAlphaSystem	./arch/alpha/freebsd/system.cc	/^FreebsdAlphaSystem::~FreebsdAlphaSystem()$/;"	f	class:FreebsdAlphaSystem
~FreebsdArmSystem	./arch/arm/freebsd/system.cc	/^FreebsdArmSystem::~FreebsdArmSystem()$/;"	f	class:FreebsdArmSystem
~FullO3CPU	./cpu/o3/cpu.cc	/^FullO3CPU<Impl>::~FullO3CPU()$/;"	f	class:FullO3CPU
~FuncPageTable	./mem/page_table.cc	/^FuncPageTable::~FuncPageTable()$/;"	f	class:FuncPageTable
~FunctionProfile	./cpu/profile.cc	/^FunctionProfile::~FunctionProfile()$/;"	f	class:FunctionProfile
~GDBListener	./base/remote_gdb.cc	/^GDBListener::~GDBListener()$/;"	f	class:GDBListener
~GarnetNetwork	./mem/ruby/network/garnet/flexible-pipeline/GarnetNetwork.cc	/^GarnetNetwork::~GarnetNetwork()$/;"	f	class:GarnetNetwork
~GarnetNetwork_d	./mem/ruby/network/garnet/fixed-pipeline/GarnetNetwork_d.cc	/^GarnetNetwork_d::~GarnetNetwork_d()$/;"	f	class:GarnetNetwork_d
~GenericArmSystem	./arch/arm/system.hh	/^    virtual ~GenericArmSystem() {};$/;"	f	class:GenericArmSystem
~GenericPciHost	./dev/pci/host.cc	/^GenericPciHost::~GenericPciHost()$/;"	f	class:GenericPciHost
~H3BloomFilter	./mem/ruby/filters/H3BloomFilter.cc	/^H3BloomFilter::~H3BloomFilter()$/;"	f	class:H3BloomFilter
~HDLcd	./dev/arm/hdlcd.cc	/^HDLcd::~HDLcd()$/;"	f	class:HDLcd
~HexFile	./base/loader/hex_file.cc	/^HexFile::~HexFile()$/;"	f	class:HexFile
~Histogram	./mem/ruby/common/Histogram.cc	/^Histogram::~Histogram()$/;"	f	class:Histogram
~I2CDevice	./dev/i2c/device.hh	/^    virtual ~I2CDevice() { }$/;"	f	class:I2CDevice
~IGbE	./dev/net/i8254xGBe.cc	/^IGbE::~IGbE()$/;"	f	class:IGbE
~IdeDisk	./dev/storage/ide_disk.cc	/^IdeDisk::~IdeDisk()$/;"	f	class:IdeDisk
~Info	./base/statistics.cc	/^Info::~Info()$/;"	f	class:Stats::Info
~IniFile	./base/inifile.cc	/^IniFile::~IniFile()$/;"	f	class:IniFile
~InputUnit_d	./mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.cc	/^InputUnit_d::~InputUnit_d()$/;"	f	class:InputUnit_d
~InstPBTrace	./cpu/inst_pb_trace.cc	/^InstPBTrace::~InstPBTrace()$/;"	f	class:Trace::InstPBTrace
~InstRecord	./sim/insttracer.hh	/^    virtual ~InstRecord() { }$/;"	f	class:Trace::InstRecord
~InstTracer	./sim/insttracer.hh	/^    virtual ~InstTracer()$/;"	f	class:Trace::InstTracer
~InstructionQueue	./cpu/o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::~InstructionQueue()$/;"	f	class:InstructionQueue
~IntDevice	./dev/x86/intdev.hh	/^    virtual ~IntDevice()$/;"	f	class:X86ISA::IntDevice
~Intel8254Timer	./dev/intel_8254_timer.hh	/^    ~Intel8254Timer()$/;"	f	class:Intel8254Timer
~InvalidateGenerator	./cpu/testers/directedtest/InvalidateGenerator.cc	/^InvalidateGenerator::~InvalidateGenerator()$/;"	f	class:InvalidateGenerator
~Kvm	./cpu/kvm/vm.cc	/^Kvm::~Kvm()$/;"	f	class:Kvm
~KvmDevice	./cpu/kvm/device.cc	/^KvmDevice::~KvmDevice()$/;"	f	class:KvmDevice
~KvmGic	./arch/arm/kvm/gic.cc	/^KvmGic::~KvmGic()$/;"	f	class:KvmGic
~KvmVM	./cpu/kvm/vm.cc	/^KvmVM::~KvmVM()$/;"	f	class:KvmVM
~LRU	./mem/cache/tags/lru.hh	/^    ~LRU() {}$/;"	f	class:LRU
~LRUPolicy	./mem/ruby/structures/LRUPolicy.cc	/^LRUPolicy::~LRUPolicy()$/;"	f	class:LRUPolicy
~LSB_CountingBloomFilter	./mem/ruby/filters/LSB_CountingBloomFilter.cc	/^LSB_CountingBloomFilter::~LSB_CountingBloomFilter()$/;"	f	class:LSB_CountingBloomFilter
~LSQ	./cpu/minor/lsq.cc	/^LSQ::~LSQ()$/;"	f	class:Minor::LSQ
~LSQ	./cpu/o3/lsq.hh	/^    ~LSQ() {$/;"	f	class:LSQ
~LSQRequest	./cpu/minor/lsq.cc	/^LSQ::LSQRequest::~LSQRequest()$/;"	f	class:Minor::LSQ::LSQRequest
~Link	./dev/net/dist_etherlink.hh	/^        ~Link() {}$/;"	f	class:DistEtherLink::Link
~Link	./dev/net/etherlink.hh	/^        ~Link() {}$/;"	f	class:EtherLink::Link
~LinuxAlphaSystem	./arch/alpha/linux/system.cc	/^LinuxAlphaSystem::~LinuxAlphaSystem()$/;"	f	class:LinuxAlphaSystem
~LinuxArmSystem	./arch/arm/linux/system.cc	/^LinuxArmSystem::~LinuxArmSystem()$/;"	f	class:LinuxArmSystem
~LinuxMipsSystem	./arch/mips/linux/system.cc	/^LinuxMipsSystem::~LinuxMipsSystem()$/;"	f	class:LinuxMipsSystem
~LinuxX86System	./arch/x86/linux/system.cc	/^LinuxX86System::~LinuxX86System()$/;"	f	class:LinuxX86System
~ListenSocket	./base/socket.cc	/^ListenSocket::~ListenSocket()$/;"	f	class:ListenSocket
~Logger	./base/trace.hh	/^    virtual ~Logger() { }$/;"	f	class:Trace::Logger
~MC146818	./dev/mc146818.cc	/^MC146818::~MC146818()$/;"	f	class:MC146818
~MacroopBase	./arch/x86/insts/macroop.hh	/^    ~MacroopBase()$/;"	f	class:X86ISA::MacroopBase
~MasterPort	./mem/port.cc	/^MasterPort::~MasterPort()$/;"	f	class:MasterPort
~MemChecker	./mem/mem_checker.hh	/^    virtual ~MemChecker() {}$/;"	f	class:MemChecker
~MemCheckerMonitor	./mem/mem_checker_monitor.cc	/^MemCheckerMonitor::~MemCheckerMonitor()$/;"	f	class:MemCheckerMonitor
~MemCntrlProfiler	./mem/ruby/profiler/MemCntrlProfiler.cc	/^MemCntrlProfiler::~MemCntrlProfiler()$/;"	f	class:MemCntrlProfiler
~MemDepEntry	./cpu/o3/mem_dep_unit.hh	/^        ~MemDepEntry()$/;"	f	class:MemDepUnit::MemDepEntry
~MemDepUnit	./cpu/o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::~MemDepUnit()$/;"	f	class:MemDepUnit
~Memory	./arch/arm/insts/mem.hh	/^    ~Memory()$/;"	f	class:ArmISA::Memory
~Memory64	./arch/arm/insts/mem64.hh	/^    ~Memory64()$/;"	f	class:ArmISA::Memory64
~Message	./mem/ruby/slicc_interface/Message.hh	/^    virtual ~Message() { }$/;"	f	class:Message
~MessageMasterPort	./mem/mport.hh	/^    virtual ~MessageMasterPort()$/;"	f	class:MessageMasterPort
~MessageSlavePort	./mem/mport.hh	/^    virtual ~MessageSlavePort()$/;"	f	class:MessageSlavePort
~MicrocodeRom	./arch/x86/microcode_rom.hh	/^        ~MicrocodeRom()$/;"	f	class:X86ISAInst::MicrocodeRom
~MinorCPU	./cpu/minor/cpu.cc	/^MinorCPU::~MinorCPU()$/;"	f	class:MinorCPU
~MinorDynInst	./cpu/minor/dyn_inst.cc	/^MinorDynInst::~MinorDynInst()$/;"	f	class:Minor::MinorDynInst
~MipsSystem	./arch/mips/system.cc	/^MipsSystem::~MipsSystem()$/;"	f	class:MipsSystem
~MultiBitSelBloomFilter	./mem/ruby/filters/MultiBitSelBloomFilter.cc	/^MultiBitSelBloomFilter::~MultiBitSelBloomFilter()$/;"	f	class:MultiBitSelBloomFilter
~MultiGrainBloomFilter	./mem/ruby/filters/MultiGrainBloomFilter.cc	/^MultiGrainBloomFilter::~MultiGrainBloomFilter()$/;"	f	class:MultiGrainBloomFilter
~MultiLevelPageTable	./mem/multi_level_page_table_impl.hh	/^MultiLevelPageTable<ISAOps>::~MultiLevelPageTable()$/;"	f	class:MultiLevelPageTable
~NSGigE	./dev/net/ns_gige.cc	/^NSGigE::~NSGigE()$/;"	f	class:NSGigE
~NativeTrace	./cpu/nativetrace.hh	/^    virtual ~NativeTrace() {}$/;"	f	class:Trace::NativeTrace
~NetDest	./mem/ruby/common/NetDest.hh	/^    ~NetDest()$/;"	f	class:NetDest
~Network	./mem/ruby/network/Network.cc	/^Network::~Network()$/;"	f	class:Network
~NetworkInterface	./mem/ruby/network/garnet/flexible-pipeline/NetworkInterface.cc	/^NetworkInterface::~NetworkInterface()$/;"	f	class:NetworkInterface
~NetworkInterface_d	./mem/ruby/network/garnet/fixed-pipeline/NetworkInterface_d.cc	/^NetworkInterface_d::~NetworkInterface_d()$/;"	f	class:NetworkInterface_d
~NetworkLink	./mem/ruby/network/garnet/flexible-pipeline/NetworkLink.cc	/^NetworkLink::~NetworkLink()$/;"	f	class:NetworkLink
~NetworkLink_d	./mem/ruby/network/garnet/fixed-pipeline/NetworkLink_d.cc	/^NetworkLink_d::~NetworkLink_d()$/;"	f	class:NetworkLink_d
~NoMaliGpu	./dev/arm/gpu_nomali.cc	/^NoMaliGpu::~NoMaliGpu()$/;"	f	class:NoMaliGpu
~NonCountingBloomFilter	./mem/ruby/filters/NonCountingBloomFilter.cc	/^NonCountingBloomFilter::~NonCountingBloomFilter()$/;"	f	class:NonCountingBloomFilter
~NoncoherentXBar	./mem/noncoherent_xbar.cc	/^NoncoherentXBar::~NoncoherentXBar()$/;"	f	class:NoncoherentXBar
~ObjectFile	./base/loader/object_file.cc	/^ObjectFile::~ObjectFile()$/;"	f	class:ObjectFile
~Output	./base/stats/output.hh	/^    virtual ~Output() {}$/;"	f	struct:Stats::Output
~OutputDirectory	./base/output.cc	/^OutputDirectory::~OutputDirectory()$/;"	f	class:OutputDirectory
~OutputUnit_d	./mem/ruby/network/garnet/fixed-pipeline/OutputUnit_d.cc	/^OutputUnit_d::~OutputUnit_d()$/;"	f	class:OutputUnit_d
~PCEvent	./cpu/pc_event.hh	/^    virtual ~PCEvent() { if (queue) remove(); }$/;"	f	class:PCEvent
~PCEventQueue	./cpu/pc_event.cc	/^PCEventQueue::~PCEventQueue()$/;"	f	class:PCEventQueue
~PCTable	./mem/cache/prefetch/stride.cc	/^StridePrefetcher::PCTable::~PCTable() {$/;"	f	class:StridePrefetcher::PCTable
~PMU	./arch/arm/pmu.cc	/^PMU::~PMU()$/;"	f	class:ArmISA::PMU
~PS2Device	./dev/x86/i8042.hh	/^    virtual ~PS2Device()$/;"	f	class:X86ISA::PS2Device
~Packet	./mem/packet.hh	/^    ~Packet()$/;"	f	class:Packet
~PacketFifo	./dev/net/pktfifo.hh	/^    virtual ~PacketFifo() {}$/;"	f	class:PacketFifo
~PacketQueue	./mem/packet_queue.cc	/^PacketQueue::~PacketQueue()$/;"	f	class:PacketQueue
~PageTableBase	./mem/page_table.hh	/^    virtual ~PageTableBase() {};$/;"	f	class:PageTableBase
~PciHost	./dev/pci/host.cc	/^PciHost::~PciHost()$/;"	f	class:PciHost
~PciVirtIO	./dev/virtio/pci.cc	/^PciVirtIO::~PciVirtIO()$/;"	f	class:PciVirtIO
~PerfKvmCounter	./cpu/kvm/perfevent.cc	/^PerfKvmCounter::~PerfKvmCounter()$/;"	f	class:PerfKvmCounter
~PerfKvmCounterConfig	./cpu/kvm/perfevent.cc	/^PerfKvmCounterConfig::~PerfKvmCounterConfig()$/;"	f	class:PerfKvmCounterConfig
~PerfKvmTimer	./cpu/kvm/timer.cc	/^PerfKvmTimer::~PerfKvmTimer()$/;"	f	class:PerfKvmTimer
~PerfectSwitch	./mem/ruby/network/simple/PerfectSwitch.cc	/^PerfectSwitch::~PerfectSwitch()$/;"	f	class:PerfectSwitch
~PersistentTable	./mem/ruby/structures/PersistentTable.cc	/^PersistentTable::~PersistentTable()$/;"	f	class:PersistentTable
~PhysRegFile	./cpu/o3/regfile.hh	/^    ~PhysRegFile() {}$/;"	f	class:PhysRegFile
~PhysicalMemory	./mem/physical.cc	/^PhysicalMemory::~PhysicalMemory()$/;"	f	class:PhysicalMemory
~PioDevice	./dev/io_device.cc	/^PioDevice::~PioDevice()$/;"	f	class:PioDevice
~Pl111	./dev/arm/pl111.cc	/^Pl111::~Pl111()$/;"	f	class:Pl111
~Platform	./dev/platform.cc	/^Platform::~Platform()$/;"	f	class:Platform
~PollEvent	./base/pollevent.cc	/^PollEvent::~PollEvent()$/;"	f	class:PollEvent
~PollQueue	./base/pollevent.cc	/^PollQueue::~PollQueue()$/;"	f	class:PollQueue
~Port	./mem/external_master.hh	/^        ~Port() { }$/;"	f	class:ExternalMaster::Port
~Port	./mem/external_slave.hh	/^        ~Port() { }$/;"	f	class:ExternalSlave::Port
~Port	./mem/port.cc	/^Port::~Port()$/;"	f	class:Port
~PortProxy	./mem/port_proxy.hh	/^    virtual ~PortProxy() { }$/;"	f	class:PortProxy
~PosixKvmTimer	./cpu/kvm/timer.cc	/^PosixKvmTimer::~PosixKvmTimer()$/;"	f	class:PosixKvmTimer
~PredMacroOp	./arch/arm/insts/pred_inst.hh	/^    ~PredMacroOp()$/;"	f	class:ArmISA::PredMacroOp
~Prefetcher	./mem/ruby/structures/Prefetcher.cc	/^Prefetcher::~Prefetcher()$/;"	f	class:Prefetcher
~Print	./base/cprintf.cc	/^Print::~Print()$/;"	f	class:cp::Print
~PrintReqState	./mem/packet.cc	/^Packet::PrintReqState::~PrintReqState()$/;"	f	class:Packet::PrintReqState
~Printable	./base/printable.hh	/^    virtual ~Printable() {}$/;"	f	class:Printable
~ProbeListener	./sim/probe/probe.cc	/^ProbeListener::~ProbeListener()$/;"	f	class:ProbeListener
~ProbeListenerObject	./sim/probe/probe.cc	/^ProbeListenerObject::~ProbeListenerObject()$/;"	f	class:ProbeListenerObject
~ProbeManager	./sim/probe/probe.hh	/^    virtual ~ProbeManager() {}$/;"	f	class:ProbeManager
~ProbePoint	./sim/probe/probe.hh	/^    virtual ~ProbePoint() {}$/;"	f	class:ProbePoint
~Profiler	./mem/ruby/profiler/Profiler.cc	/^Profiler::~Profiler()$/;"	f	class:Profiler
~ProtoInputStream	./proto/protoio.cc	/^ProtoInputStream::~ProtoInputStream()$/;"	f	class:ProtoInputStream
~ProtoOutputStream	./proto/protoio.cc	/^ProtoOutputStream::~ProtoOutputStream()$/;"	f	class:ProtoOutputStream
~PseudoLRUPolicy	./mem/ruby/structures/PseudoLRUPolicy.cc	/^PseudoLRUPolicy::~PseudoLRUPolicy()$/;"	f	class:PseudoLRUPolicy
~PythonEvent	./python/swig/pyevent.cc	/^PythonEvent::~PythonEvent()$/;"	f	class:PythonEvent
~Queue	./cpu/minor/buffers.hh	/^    virtual ~Queue() { }$/;"	f	class:Minor::Queue
~QueuedMasterPort	./mem/qport.hh	/^    virtual ~QueuedMasterPort() { }$/;"	f	class:QueuedMasterPort
~QueuedPrefetcher	./mem/cache/prefetch/queued.cc	/^QueuedPrefetcher::~QueuedPrefetcher()$/;"	f	class:QueuedPrefetcher
~QueuedSlavePort	./mem/qport.hh	/^    virtual ~QueuedSlavePort() { }$/;"	f	class:QueuedSlavePort
~Random	./base/random.cc	/^Random::~Random()$/;"	f	class:Random
~RandomRepl	./mem/cache/tags/random_repl.hh	/^    ~RandomRepl() {}$/;"	f	class:RandomRepl
~RangeAddrMapper	./mem/addr_mapper.hh	/^    ~RangeAddrMapper() { }$/;"	f	class:RangeAddrMapper
~RawDiskImage	./dev/storage/disk_image.cc	/^RawDiskImage::~RawDiskImage()$/;"	f	class:RawDiskImage
~RawObject	./base/loader/raw_object.hh	/^    virtual ~RawObject() {}$/;"	f	class:RawObject
~RealViewOsc	./dev/arm/rv_ctrl.hh	/^    virtual ~RealViewOsc() {};$/;"	f	class:RealViewOsc
~RefCounted	./base/refcnt.hh	/^    virtual ~RefCounted() {}$/;"	f	class:RefCounted
~RefCountingPtr	./base/refcnt.hh	/^    ~RefCountingPtr() { del(); }$/;"	f	class:RefCountingPtr
~ReportIF	./cpu/minor/buffers.hh	/^    virtual ~ReportIF() { }$/;"	f	class:Minor::ReportIF
~ReqPacketQueue	./mem/packet_queue.hh	/^    virtual ~ReqPacketQueue() { }$/;"	f	class:ReqPacketQueue
~Request	./mem/request.hh	/^    ~Request() {}$/;"	f	class:Request
~RequestQueue	./dev/virtio/block.hh	/^        virtual ~RequestQueue() {}$/;"	f	class:VirtIOBlock::RequestQueue
~RespPacketQueue	./mem/packet_queue.hh	/^    virtual ~RespPacketQueue() { }$/;"	f	class:RespPacketQueue
~RfeOp	./arch/arm/insts/mem.hh	/^    ~RfeOp()$/;"	f	class:ArmISA::RfeOp
~Router	./mem/ruby/network/garnet/flexible-pipeline/Router.cc	/^Router::~Router()$/;"	f	class:Router
~Router_d	./mem/ruby/network/garnet/fixed-pipeline/Router_d.cc	/^Router_d::~Router_d()$/;"	f	class:Router_d
~RubyDirectedTester	./cpu/testers/directedtest/RubyDirectedTester.cc	/^RubyDirectedTester::~RubyDirectedTester()$/;"	f	class:RubyDirectedTester
~RubyMemoryControl	./mem/ruby/structures/RubyMemoryControl.cc	/^RubyMemoryControl::~RubyMemoryControl()$/;"	f	class:RubyMemoryControl
~RubyPort	./mem/ruby/system/RubyPort.hh	/^    virtual ~RubyPort() {}$/;"	f	class:RubyPort
~RubyPortProxy	./mem/ruby/system/RubyPortProxy.cc	/^RubyPortProxy::~RubyPortProxy()$/;"	f	class:RubyPortProxy
~RubyStatsCallback	./mem/ruby/system/RubySystem.hh	/^    virtual ~RubyStatsCallback() {}$/;"	f	class:RubyStatsCallback
~RubySystem	./mem/ruby/system/RubySystem.cc	/^RubySystem::~RubySystem()$/;"	f	class:RubySystem
~RubyTester	./cpu/testers/rubytest/RubyTester.cc	/^RubyTester::~RubyTester()$/;"	f	class:RubyTester
~RxLink	./dev/net/dist_etherlink.hh	/^        ~RxLink() {}$/;"	f	class:DistEtherLink::RxLink
~SETranslatingPortProxy	./mem/se_translating_port_proxy.cc	/^SETranslatingPortProxy::~SETranslatingPortProxy()$/;"	f	class:SETranslatingPortProxy
~SMBiosStructure	./arch/x86/bios/smbios.hh	/^    ~SMBiosStructure()$/;"	f	class:X86ISA::SMBios::SMBiosStructure
~SQEntry	./cpu/o3/lsq_unit.hh	/^        ~SQEntry()$/;"	f	struct:LSQUnit::SQEntry
~ScopedCheckpointSection	./sim/serialize.cc	/^Serializable::ScopedCheckpointSection::~ScopedCheckpointSection()$/;"	f	class:Serializable::ScopedCheckpointSection
~ScopedMigration	./sim/eventq.hh	/^        ~ScopedMigration()$/;"	f	class:EventQueue::ScopedMigration
~ScopedRelease	./sim/eventq.hh	/^        ~ScopedRelease()$/;"	f	class:EventQueue::ScopedRelease
~Scoreboard	./cpu/o3/scoreboard.hh	/^    ~Scoreboard() {}$/;"	f	class:Scoreboard
~SenderState	./mem/packet.hh	/^        virtual ~SenderState() {}$/;"	f	struct:Packet::SenderState
~Sequencer	./mem/ruby/system/Sequencer.cc	/^Sequencer::~Sequencer()$/;"	f	class:Sequencer
~Serializable	./sim/serialize.cc	/^Serializable::~Serializable()$/;"	f	class:Serializable
~SeriesRequestGenerator	./cpu/testers/directedtest/SeriesRequestGenerator.cc	/^SeriesRequestGenerator::~SeriesRequestGenerator()$/;"	f	class:SeriesRequestGenerator
~Set	./mem/ruby/common/Set.hh	/^    ~Set() {}$/;"	f	class:Set
~SimObject	./sim/sim_object.cc	/^SimObject::~SimObject()$/;"	f	class:SimObject
~SimObjectResolver	./sim/sim_object.hh	/^    virtual ~SimObjectResolver() { }$/;"	f	class:SimObjectResolver
~SimPoint	./cpu/simple/probes/simpoint.cc	/^SimPoint::~SimPoint()$/;"	f	class:SimPoint
~SimpleDisk	./dev/storage/simple_disk.cc	/^SimpleDisk::~SimpleDisk()$/;"	f	class:SimpleDisk
~SimpleNetwork	./mem/ruby/network/simple/SimpleNetwork.cc	/^SimpleNetwork::~SimpleNetwork()$/;"	f	class:SimpleNetwork
~SimpleRenameMap	./cpu/o3/rename_map.hh	/^    ~SimpleRenameMap() {};$/;"	f	class:SimpleRenameMap
~SimpleThread	./cpu/simple_thread.cc	/^SimpleThread::~SimpleThread()$/;"	f	class:SimpleThread
~SimpleTimingPort	./mem/tport.hh	/^    virtual ~SimpleTimingPort() { }$/;"	f	class:SimpleTimingPort
~SlavePort	./mem/port.cc	/^SlavePort::~SlavePort()$/;"	f	class:SlavePort
~SnoopRespPacketQueue	./mem/packet_queue.hh	/^    virtual ~SnoopRespPacketQueue() { }$/;"	f	class:SnoopRespPacketQueue
~SocketDataEvent	./dev/virtio/fs9p.hh	/^        virtual ~SocketDataEvent() {};$/;"	f	class:VirtIO9PSocket::SocketDataEvent
~SparcSystem	./arch/sparc/system.cc	/^SparcSystem::~SparcSystem()$/;"	f	class:SparcSystem
~SplitDataRequest	./cpu/minor/lsq.cc	/^LSQ::SplitDataRequest::~SplitDataRequest()$/;"	f	class:Minor::LSQ::SplitDataRequest
~SrsOp	./arch/arm/insts/mem.hh	/^    ~SrsOp()$/;"	f	class:ArmISA::SrsOp
~StackDistCalc	./mem/stack_dist_calc.cc	/^StackDistCalc::~StackDistCalc()$/;"	f	class:StackDistCalc
~StackTrace	./arch/alpha/stacktrace.cc	/^StackTrace::~StackTrace()$/;"	f	class:AlphaISA::StackTrace
~StackTrace	./arch/arm/stacktrace.cc	/^    StackTrace::~StackTrace()$/;"	f	class:ArmISA::StackTrace
~StackTrace	./arch/mips/stacktrace.cc	/^StackTrace::~StackTrace()$/;"	f	class:StackTrace
~StackTrace	./arch/power/stacktrace.cc	/^StackTrace::~StackTrace()$/;"	f	class:PowerISA::StackTrace
~StackTrace	./arch/x86/stacktrace.cc	/^    StackTrace::~StackTrace()$/;"	f	class:X86ISA::StackTrace
~StaticInst	./cpu/static_inst.cc	/^StaticInst::~StaticInst()$/;"	f	class:StaticInst
~Statistics	./kern/kernel_stats.hh	/^    virtual ~Statistics() {}$/;"	f	class:Kernel::Statistics
~StatsCallback	./mem/ruby/network/Network.hh	/^        virtual ~StatsCallback() {}$/;"	f	class:Network::StatsCallback
~StatsCallback	./mem/ruby/slicc_interface/AbstractController.hh	/^        virtual ~StatsCallback() {}$/;"	f	class:AbstractController::StatsCallback
~StorageParams	./base/statistics.cc	/^StorageParams::~StorageParams()$/;"	f	class:Stats::StorageParams
~StoreSet	./cpu/o3/store_set.cc	/^StoreSet::~StoreSet()$/;"	f	class:StoreSet
~StoreTrace	./mem/ruby/profiler/StoreTrace.cc	/^StoreTrace::~StoreTrace()$/;"	f	class:StoreTrace
~SubBlock	./mem/ruby/common/SubBlock.hh	/^    ~SubBlock() { }$/;"	f	class:SubBlock
~Switch	./mem/ruby/network/simple/Switch.cc	/^Switch::~Switch()$/;"	f	class:Switch
~Switch_d	./mem/ruby/network/garnet/fixed-pipeline/Switch_d.cc	/^Switch_d::~Switch_d()$/;"	f	class:Switch_d
~SymbolTable	./base/loader/symtab.hh	/^    ~SymbolTable() {}$/;"	f	class:SymbolTable
~SyncEvent	./dev/net/dist_iface.hh	/^        ~SyncEvent() {}$/;"	f	class:DistIface::SyncEvent
~SyncNode	./dev/net/dist_iface.hh	/^        ~SyncNode() {}$/;"	f	class:DistIface::SyncNode
~SyncSwitch	./dev/net/dist_iface.hh	/^        ~SyncSwitch() {}$/;"	f	class:DistIface::SyncSwitch
~SyscallReturn	./sim/syscallreturn.hh	/^    ~SyscallReturn() {}$/;"	f	class:SyscallReturn
~System	./sim/system.cc	/^System::~System()$/;"	f	class:System
~TCPIface	./dev/net/tcp_iface.cc	/^TCPIface::~TCPIface()$/;"	f	class:TCPIface
~TLB	./arch/alpha/tlb.cc	/^TLB::~TLB()$/;"	f	class:AlphaISA::TLB
~TLB	./arch/arm/tlb.cc	/^TLB::~TLB()$/;"	f	class:TLB
~TLB	./arch/mips/tlb.cc	/^TLB::~TLB()$/;"	f	class:TLB
~TLB	./arch/power/tlb.cc	/^TLB::~TLB()$/;"	f	class:TLB
~TableWalker	./arch/arm/table_walker.cc	/^TableWalker::~TableWalker()$/;"	f	class:TableWalker
~TaggedPrefetcher	./mem/cache/prefetch/tagged.hh	/^    ~TaggedPrefetcher() {}$/;"	f	class:TaggedPrefetcher
~TapListener	./dev/net/ethertap.cc	/^    ~TapListener() { if (event) delete event; }$/;"	f	class:TapListener
~TermRecvQueue	./dev/virtio/console.hh	/^        virtual ~TermRecvQueue() {}$/;"	f	class:VirtIOConsole::TermRecvQueue
~TermTransQueue	./dev/virtio/console.hh	/^        virtual ~TermTransQueue() {}$/;"	f	class:VirtIOConsole::TermTransQueue
~Terminal	./dev/terminal.cc	/^Terminal::~Terminal()$/;"	f	class:Terminal
~TestRC	./unittest/refcnttest.cc	/^    ~TestRC()$/;"	f	class:__anon3::TestRC
~Text	./base/stats/text.cc	/^Text::~Text()$/;"	f	class:Stats::Text
~ThreadContext	./cpu/thread_context.hh	/^    virtual ~ThreadContext() { };$/;"	f	class:ThreadContext
~ThreadInfo	./arch/generic/freebsd/threadinfo.hh	/^    ~ThreadInfo()$/;"	f	class:FreeBSD::ThreadInfo
~ThreadInfo	./arch/generic/linux/threadinfo.hh	/^    ~ThreadInfo()$/;"	f	class:Linux::ThreadInfo
~ThreadState	./cpu/thread_state.cc	/^ThreadState::~ThreadState()$/;"	f	class:ThreadState
~Throttle	./mem/ruby/network/simple/Throttle.hh	/^    ~Throttle() {}$/;"	f	class:Throttle
~Ticked	./sim/ticked_object.hh	/^    virtual ~Ticked() { }$/;"	f	class:Ticked
~TimeBuffer	./cpu/timebuf.hh	/^    ~TimeBuffer()$/;"	f	class:TimeBuffer
~TimingSimpleCPU	./cpu/simple/timing.cc	/^TimingSimpleCPU::~TimingSimpleCPU()$/;"	f	class:TimingSimpleCPU
~TraceCPU	./cpu/trace/trace_cpu.cc	/^TraceCPU::~TraceCPU()$/;"	f	class:TraceCPU
~TrafficGen	./cpu/testers/traffic_gen/traffic_gen.hh	/^    ~TrafficGen() {}$/;"	f	class:TrafficGen
~Translation	./arch/generic/tlb.hh	/^        virtual ~Translation()$/;"	f	class:BaseTLB::Translation
~Tru64AlphaSystem	./arch/alpha/tru64/system.cc	/^Tru64AlphaSystem::~Tru64AlphaSystem()$/;"	f	class:Tru64AlphaSystem
~TxLink	./dev/net/dist_etherlink.hh	/^        ~TxLink() {}$/;"	f	class:DistEtherLink::TxLink
~UFSSCSIDevice	./dev/arm/ufs_device.cc	/^UFSHostDevice::UFSSCSIDevice::~UFSSCSIDevice() {}$/;"	f	class:UFSHostDevice::UFSSCSIDevice
~UnifiedRenameMap	./cpu/o3/rename_map.hh	/^    ~UnifiedRenameMap() {};$/;"	f	class:UnifiedRenameMap
~VCarbiter	./mem/ruby/network/garnet/flexible-pipeline/VCarbiter.hh	/^    ~VCarbiter() {}$/;"	f	class:VCarbiter
~VPtr	./sim/vptr.hh	/^    ~VPtr()$/;"	f	class:VPtr
~ValueBase	./base/statistics.hh	/^    ~ValueBase() { if (proxy) delete proxy; }$/;"	f	class:Stats::ValueBase
~Vector2dBase	./base/statistics.hh	/^    ~Vector2dBase()$/;"	f	class:Stats::Vector2dBase
~VectorBase	./base/statistics.hh	/^    ~VectorBase()$/;"	f	class:Stats::VectorBase
~VectorDistBase	./base/statistics.hh	/^    ~VectorDistBase()$/;"	f	class:Stats::VectorDistBase
~VirtIO9PBase	./dev/virtio/fs9p.cc	/^VirtIO9PBase::~VirtIO9PBase()$/;"	f	class:VirtIO9PBase
~VirtIO9PDiod	./dev/virtio/fs9p.cc	/^VirtIO9PDiod::~VirtIO9PDiod()$/;"	f	class:VirtIO9PDiod
~VirtIO9PProxy	./dev/virtio/fs9p.cc	/^VirtIO9PProxy::~VirtIO9PProxy()$/;"	f	class:VirtIO9PProxy
~VirtIO9PSocket	./dev/virtio/fs9p.cc	/^VirtIO9PSocket::~VirtIO9PSocket()$/;"	f	class:VirtIO9PSocket
~VirtIOBlock	./dev/virtio/block.cc	/^VirtIOBlock::~VirtIOBlock()$/;"	f	class:VirtIOBlock
~VirtIOConsole	./dev/virtio/console.cc	/^VirtIOConsole::~VirtIOConsole()$/;"	f	class:VirtIOConsole
~VirtIODeviceBase	./dev/virtio/base.cc	/^VirtIODeviceBase::~VirtIODeviceBase()$/;"	f	class:VirtIODeviceBase
~VirtQueue	./dev/virtio/base.hh	/^    virtual ~VirtQueue() {};$/;"	f	class:VirtQueue
~VirtualChannel_d	./mem/ruby/network/garnet/fixed-pipeline/VirtualChannel_d.cc	/^VirtualChannel_d::~VirtualChannel_d()$/;"	f	class:VirtualChannel_d
~VncServer	./base/vnc/vncserver.cc	/^VncServer::~VncServer()$/;"	f	class:VncServer
~WireBuffer	./mem/ruby/structures/WireBuffer.cc	/^WireBuffer::~WireBuffer()$/;"	f	class:WireBuffer
~X86KvmCPU	./cpu/kvm/x86_cpu.cc	/^X86KvmCPU::~X86KvmCPU()$/;"	f	class:X86KvmCPU
~X86System	./arch/x86/system.cc	/^X86System::~X86System()$/;"	f	class:X86System
~vcpuIntData	./dev/arm/vgic.hh	/^        virtual ~vcpuIntData() {}$/;"	f	struct:VGic::vcpuIntData
